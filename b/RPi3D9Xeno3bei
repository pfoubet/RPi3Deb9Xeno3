LLBACK:-} && \
        -n "$1" && "$1" != -d && ${#toks[@]} -lt 1 ]] && \
        x=$( compgen -f -- $quoted ) &&
        while read -r tmp; do
            toks+=( "$tmp" )
        done <<< "$x"


    if [[ ${#toks[@]} -ne 0 ]]; then
        # 2>/dev/null for direct invocation, e.g. in the _filedir unit test
        compopt -o filenames 2>/dev/null
        COMPREPLY+=( "${toks[@]}" )
    fi
} # _filedir()


# This function splits $cur=--foo=bar into $prev=--foo, $cur=bar, making it
# easier to support both "--foo bar" and "--foo=bar" style completions.
# `=' should have been removed from COMP_WORDBREAKS when setting $cur for
# this to be useful.
# Returns 0 if current option was split, 1 otherwise.
#
_split_longopt()
{
    if [[ "$cur" == --?*=* ]]; then
        # Cut also backslash before '=' in case it ended up there
        # for some reason.
        prev="${cur%%?(\\)=*}"
        cur="${cur#*=}"
        return 0
    fi

    return 1
}

# Complete variables.
# @return  True (0) if variables were completed,
#          False (> 0) if not.
_variables()
{
    if [[ $cur =~ ^(\$\{?)([A-Za-z0-9_]*)$ ]]; then
        [[ $cur == *{* ]] && local suffix=} || local suffix=
        COMPREPLY+=( $( compgen -P ${BASH_REMATCH[1]} -S "$suffix" -v -- \
            "${BASH_REMATCH[2]}" ) )
        return 0
    fi
    return 1
}

# Initialize completion and deal with various general things: do file
# and variable completion where appropriate, and adjust prev, words,
# and cword as if no redirections exist so that completions do not
# need to deal with them.  Before calling this function, make sure
# cur, prev, words, and cword are local, ditto split if you use -s.
#
# Options:
#     -n EXCLUDE  Passed to _get_comp_words_by_ref -n with redirection chars
#     -e XSPEC    Passed to _filedir as first arg for stderr redirections
#     -o XSPEC    Passed to _filedir as first arg for other output redirections
#     -i XSPEC    Passed to _filedir as first arg for stdin redirections
#     -s          Split long options with _split_longopt, implies -n =
# @return  True (0) if completion needs further processing,
#          False (> 0) no further processing is necessary.
#
_init_completion()
{
    local exclude= flag outx errx inx OPTIND=1

    while getopts "n:e:o:i:s" flag "$@"; do
        case $flag in
            n) exclude+=$OPTARG ;;
            e) errx=$OPTARG ;;
            o) outx=$OPTARG ;;
            i) inx=$OPTARG ;;
            s) split=false ; exclude+== ;;
        esac
    done

    # For some reason completion functions are not invoked at all by
    # bash (at least as of 4.1.7) after the command line contains an
    # ampersand so we don't get a chance to deal with redirections
    # containing them, but if we did, hopefully the below would also
    # do the right thing with them...

    COMPREPLY=()
    local redir="@(?([0-9])<|?([0-9&])>?(>)|>&)"
    _get_comp_words_by_ref -n "$exclude<>&" cur prev words cword

    # Complete variable names.
    _variables && return 1

    # Complete on files if current is a redirect possibly followed by a
    # filename, e.g. ">foo", or previous is a "bare" redirect, e.g. ">".
    if [[ $cur == $redir* || $prev == $redir ]]; then
        local xspec
        case $cur in
            2'>'*) xspec=$errx ;;
            *'>'*) xspec=$outx ;;
            *'<'*) xspec=$inx ;;
            *)
                case $prev in
                    2'>'*) xspec=$errx ;;
                    *'>'*) xspec=$outx ;;
                    *'<'*) xspec=$inx ;;
                esac
                ;;
        esac
        cur="${cur##$redir}"
        _filedir $xspec
        return 1
    fi

    # Remove all redirections so completions don't have to deal with them.
    local i skip
    for (( i=1; i < ${#words[@]}; )); do
        if [[ ${words[i]} == $redir* ]]; then
            # If "bare" redirect, remove also the next word (skip=2).
            [[ ${words[i]} == $redir ]] && skip=2 || skip=1
            words=( "${words[@]:0:i}" "${words[@]:i+skip}" )
            [[ $i -le $cword ]] && cword=$(( cword - skip ))
        else
            i=$(( ++i ))
        fi
    done

    [[ $cword -le 0 ]] && return 1
    prev=${words[cword-1]}

    [[ ${split-} ]] && _split_longopt && split=true

    return 0
}

# Helper function for _parse_help and _parse_usage.
__parse_options()
{
    local option option2 i IFS=$' \t\n,/|'

    # Take first found long option, or first one (short) if not found.
    option=
    for i in $1; do
        case $i in
            ---*) break ;;
            --?*) option=$i ; break ;;
            -?*)  [[ $option ]] || option=$i ;;
            *)    break ;;
        esac
    done
    [[ $option ]] || return 0

    IFS=$' \t\n' # affects parsing of the regexps below...

    # Expand --[no]foo to --foo and --nofoo etc
    if [[ $option =~ (\[((no|dont)-?)\]). ]]; then
        option2=${option/"${BASH_REMATCH[1]}"/}
        option2=${option2%%[<{().[]*}
        printf '%s\n' "${option2/=*/=}"
        option=${option/"${BASH_REMATCH[1]}"/"${BASH_REMATCH[2]}"}
    fi

    option=${option%%[<{().[]*}
    printf '%s\n' "${option/=*/=}"
}

# Parse GNU style help output of the given command.
# @param $1  command; if "-", read from stdin and ignore rest of args
# @param $2  command options (default: --help)
#
_parse_help()
{
    eval local cmd=$( quote "$1" )
    local line
    { case $cmd in
        -) cat ;;
        *) LC_ALL=C "$( dequote "$cmd" )" ${2:---help} 2>&1 ;;
      esac } \
    | while read -r line; do

        [[ $line == *([ $'\t'])-* ]] || continue
        # transform "-f FOO, --foo=FOO" to "-f , --foo=FOO" etc
        while [[ $line =~ \
            ((^|[^-])-[A-Za-z0-9?][[:space:]]+)\[?[A-Z0-9]+\]? ]]; do
            line=${line/"${BASH_REMATCH[0]}"/"${BASH_REMATCH[1]}"}
        done
        __parse_options "${line// or /, }"

    done
}

# Parse BSD style usage output (options in brackets) of the given command.
# @param $1  command; if "-", read from stdin and ignore rest of args
# @param $2  command options (default: --usage)
#
_parse_usage()
{
    eval local cmd=$( quote "$1" )
    local line match option i char
    { case $cmd in
        -) cat ;;
        *) LC_ALL=C "$( dequote "$cmd" )" ${2:---usage} 2>&1 ;;
      esac } \
    | while read -r line; do

        while [[ $line =~ \[[[:space:]]*(-[^]]+)[[:space:]]*\] ]]; do
            match=${BASH_REMATCH[0]}
            option=${BASH_REMATCH[1]}
            case $option in
                -?(\[)+([a-zA-Z0-9?]))
                    # Treat as bundled short options
                    for (( i=1; i < ${#option}; i++ )); do
                        char=${option:i:1}
                        [[ $char != '[' ]] && printf '%s\n' -$char
                    done
                    ;;
                *)
                    __parse_options "$option"
                    ;;
            esac
            line=${line#*"$match"}
        done

    done
}

# This function completes on signal names (minus the SIG prefix)
# @param $1 prefix
_signals()
{
    local -a sigs=( $( compgen -P "$1" -A signal "SIG${cur#$1}" ) )
    COMPREPLY+=( "${sigs[@]/#${1}SIG/${1}}" )
}

# This function completes on known mac addresses
#
_mac_addresses()
{
    local re='\([A-Fa-f0-9]\{2\}:\)\{5\}[A-Fa-f0-9]\{2\}'
    local PATH="$PATH:/sbin:/usr/sbin"

    # Local interfaces
    # - ifconfig on Linux: HWaddr or ether
    # - ifconfig on FreeBSD: ether
    # - ip link: link/ether
    COMPREPLY+=( $( \
        { LC_ALL=C ifconfig -a || ip link show; } 2>/dev/null | sed -ne \
        "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]].*/\1/p" -ne \
        "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]]*$/\1/p" -ne \
        "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]].*|\2|p" -ne \
        "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]]*$|\2|p"
        ) )

    # ARP cache
    COMPREPLY+=( $( { arp -an || ip neigh show; } 2>/dev/null | sed -ne \
        "s/.*[[:space:]]\($re\)[[:space:]].*/\1/p" -ne \
        "s/.*[[:space:]]\($re\)[[:space:]]*$/\1/p" ) )

    # /etc/ethers
    COMPREPLY+=( $( sed -ne \
        "s/^[[:space:]]*\($re\)[[:space:]].*/\1/p" /etc/ethers 2>/dev/null ) )

    COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
    __ltrim_colon_completions "$cur"
}

# This function completes on configured network interfaces
#
_configured_interfaces()
{
    if [[ -f /etc/debian_version ]]; then
        # Debian system
        COMPREPLY=( $( compgen -W "$( sed -ne 's|^iface \([^ ]\{1,\}\).*$|\1|p'\
            /etc/network/interfaces )" -- "$cur" ) )
    elif [[ -f /etc/SuSE-release ]]; then
        # SuSE system
        COMPREPLY=( $( compgen -W "$( printf '%s\n' \
            /etc/sysconfig/network/ifcfg-* | \
            sed -ne 's|.*ifcfg-\(.*\)|\1|p' )" -- "$cur" ) )
    elif [[ -f /etc/pld-release ]]; then
        # PLD Linux
        COMPREPLY=( $( compgen -W "$( command ls -B \
            /etc/sysconfig/interfaces | \
            sed -ne 's|.*ifcfg-\(.*\)|\1|p' )" -- "$cur" ) )
    else
        # Assume Red Hat
        COMPREPLY=( $( compgen -W "$( printf '%s\n' \
            /etc/sysconfig/network-scripts/ifcfg-* | \
            sed -ne 's|.*ifcfg-\(.*\)|\1|p' )" -- "$cur" ) )
    fi
}

# Local IP addresses.
#
_ip_addresses()
{
    local PATH=$PATH:/sbin
    COMPREPLY+=( $( compgen -W \
        "$( { LC_ALL=C ifconfig -a || ip addr show; } 2>/dev/null |
            sed -ne 's/.*addr:\([^[:space:]]*\).*/\1/p' \
                -ne 's|.*inet[[:space:]]\{1,\}\([^[:space:]/]*\).*|\1|p' )" \
        -- "$cur" ) )
}

# This function completes on available kernels
#
_kernel_versions()
{
    COMPREPLY=( $( compgen -W '$( command ls /lib/modules )' -- "$cur" ) )
}

# This function completes on all available network interfaces
# -a: restrict to active interfaces only
# -w: restrict to wireless interfaces only
#
_available_interfaces()
{
    local cmd PATH=$PATH:/sbin

    if [[ ${1:-} == -w ]]; then
        cmd="iwconfig"
    elif [[ ${1:-} == -a ]]; then
        cmd="{ ifconfig || ip link show up; }"
    else
        cmd="{ ifconfig -a || ip link show; }"
    fi

    COMPREPLY=( $( eval $cmd 2>/dev/null | awk \
        '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { print $2 } else { print $1 } }' ) )
    COMPREPLY=( $( compgen -W '${COMPREPLY[@]/%[[:punct:]]/}' -- "$cur" ) )
}

# Echo number of CPUs, falling back to 1 on failure.
_ncpus()
{
    local var=NPROCESSORS_ONLN
    [[ $OSTYPE == *linux* ]] && var=_$var
    local n=$( getconf $var 2>/dev/null )
    printf %s ${n:-1}
}

# Perform tilde (~) completion
# @return  True (0) if completion needs further processing,
#          False (> 0) if tilde is followed by a valid username, completions
#          are put in COMPREPLY and no further processing is necessary.
_tilde()
{
    local result=0
    if [[ $1 == \~* && $1 != */* ]]; then
        # Try generate ~username completions
        COMPREPLY=( $( compgen -P '~' -u "${1#\~}" ) )
        result=${#COMPREPLY[@]}
        # 2>/dev/null for direct invocation, e.g. in the _tilde unit test
        [[ $result -gt 0 ]] && compopt -o filenames 2>/dev/null
    fi
    return $result
}


# Expand variable starting with tilde (~)
# We want to expand ~foo/... to /home/foo/... to avoid problems when
# word-to-complete starting with a tilde is fed to commands and ending up
# quoted instead of expanded.
# Only the first portion of the variable from the tilde up to the first slash
# (~../) is expanded.  The remainder of the variable, containing for example
# a dollar sign variable ($) or asterisk (*) is not expanded.
# Example usage:
#
#    $ v="~"; __expand_tilde_by_ref v; echo "$v"
#
# Example output:
#
#       v                  output
#    --------         ----------------
#    ~                /home/user
#    ~foo/bar         /home/foo/bar
#    ~foo/$HOME       /home/foo/$HOME
#    ~foo/a  b        /home/foo/a  b
#    ~foo/*           /home/foo/*
#
# @param $1  Name of variable (not the value of the variable) to expand
__expand_tilde_by_ref()
{
    # Does $1 start with tilde (~)?
    if [[ ${!1} == \~* ]]; then
        # Does $1 contain slash (/)?
        if [[ ${!1} == */* ]]; then
            # Yes, $1 contains slash;
            # 1: Remove * including and after first slash (/), i.e. "~a/b"
            #    becomes "~a".  Double quotes allow eval.
            # 2: Remove * before the first slash (/), i.e. "~a/b"
            #    becomes "b".  Single quotes prevent eval.
            #       +-----1----+ +---2----+
            eval $1="${!1/%\/*}"/'${!1#*/}'
        else
            # No, $1 doesn't contain slash
            eval $1="${!1}"
        fi
    fi
} # __expand_tilde_by_ref()


# This function expands tildes in pathnames
#
_expand()
{
    # FIXME: Why was this here?
    #[ "$cur" != "${cur%\\}" ] && cur+="\\"

    # Expand ~username type directory specifications.  We want to expand
    # ~foo/... to /home/foo/... to avoid problems when $cur starting with
    # a tilde is fed to commands and ending up quoted instead of expanded.

    if [[ "$cur" == \~*/* ]]; then
        eval cur=$cur 2>/dev/null
    elif [[ "$cur" == \~* ]]; then
        cur=${cur#\~}
        COMPREPLY=( $( compgen -P '~' -u "$cur" ) )
        [[ ${#COMPREPLY[@]} -eq 1 ]] && eval COMPREPLY[0]=${COMPREPLY[0]}
        return ${#COMPREPLY[@]}
    fi
}

# This function completes on process IDs.
# AIX and Solaris ps prefers X/Open syntax.
[[ $OSTYPE == *@(solaris|aix)* ]] &&
_pids()
{
    COMPREPLY=( $( compgen -W '$( command ps -efo pid | sed 1d )' -- "$cur" ))
} ||
_pids()
{
    COMPREPLY=( $( compgen -W '$( command ps axo pid= )' -- "$cur" ) )
}

# This function completes on process group IDs.
# AIX and SunOS prefer X/Open, all else should be BSD.
[[ $OSTYPE == *@(solaris|aix)* ]] &&
_pgids()
{
    COMPREPLY=( $( compgen -W '$( command ps -efo pgid | sed 1d )' -- "$cur" ))
} ||
_pgids()
{
    COMPREPLY=( $( compgen -W '$( command ps axo pgid= )' -- "$cur" ))
}

# This function completes on process names.
# AIX and SunOS prefer X/Open, all else should be BSD.
[[ $OSTYPE == *@(solaris|aix)* ]] &&
_pnames()
{
    COMPREPLY=( $( compgen -X '<defunct>' -W '$( command ps -efo comm | \
        sed -e 1d -e "s:.*/::" -e "s/^-//" | sort -u )' -- "$cur" ) )
} ||
_pnames()
{
    # FIXME: completes "[kblockd/0]" to "0". Previously it was completed
    # to "kblockd" which isn't correct either. "kblockd/0" would be
    # arguably most correct, but killall from psmisc 22 treats arguments
    # containing "/" specially unless -r is given so that wouldn't quite
    # work either. Perhaps it'd be best to not complete these to anything
    # for now.
    # Not using "ps axo comm" because under some Linux kernels, it
    # truncates command names (see e.g. http://bugs.debian.org/497540#19)
    COMPREPLY=( $( compgen -X '<defunct>' -W '$( command ps axo command= | \
        sed -e "s/ .*//" -e "s:.*/::" -e "s/:$//" -e "s/^[[(-]//" \
            -e "s/[])]$//" | sort -u )' -- "$cur" ) )
}

# This function completes on user IDs
#
_uids()
{
    if type getent &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( getent passwd | cut -d: -f3 )' -- "$cur" ) )
    elif type perl &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( perl -e '"'"'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'"'"' )' -- "$cur" ) )
    else
        # make do with /etc/passwd
        COMPREPLY=( $( compgen -W '$( cut -d: -f3 /etc/passwd )' -- "$cur" ) )
    fi
}

# This function completes on group IDs
#
_gids()
{
    if type getent &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( getent group | cut -d: -f3 )' \
            -- "$cur" ) )
    elif type perl &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( perl -e '"'"'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'"'"' )' -- "$cur" ) )
    else
        # make do with /etc/group
        COMPREPLY=( $( compgen -W '$( cut -d: -f3 /etc/group )' -- "$cur" ) )
    fi
}

# Glob for matching various backup files.
#
_backup_glob='@(#*#|*@(~|.@(bak|orig|rej|swp|dpkg*|rpm@(orig|new|save))))'

# Complete on xinetd services
#
_xinetd_services()
{
    local xinetddir=/etc/xinetd.d
    if [[ -d $xinetddir ]]; then
        local restore_nullglob=$(shopt -p nullglob); shopt -s nullglob
        local -a svcs=( $( printf '%s\n' $xinetddir/!($_backup_glob) ) )
        $restore_nullglob
        COMPREPLY+=( $( compgen -W '${svcs[@]#$xinetddir/}' -- "$cur" ) )
    fi
}

# This function completes on services
#
_services()
{
    local sysvdirs
    _sysvdirs

    local restore_nullglob=$(shopt -p nullglob); shopt -s nullglob
    COMPREPLY=( $( printf '%s\n' ${sysvdirs[0]}/!($_backup_glob|functions) ) )
    $restore_nullglob

    COMPREPLY+=( $( systemctl list-units --full --all 2>/dev/null | \
        awk '$1 ~ /\.service$/ { sub("\\.service$", "", $1); print $1 }' ) )

    COMPREPLY=( $( compgen -W '${COMPREPLY[@]#${sysvdirs[0]}/}' -- "$cur" ) )
}

# This completes on a list of all available service scripts for the
# 'service' command and/or the SysV init.d directory, followed by
# that script's available commands
#
_service()
{
    local cur prev words cword
    _init_completion || return

    # don't complete past 2nd token
    [[ $cword -gt 2 ]] && return 0

    if [[ $cword -eq 1 && $prev == ?(*/)service ]]; then
        _services
        [[ -e /etc/mandrake-release ]] && _xinetd_services
    else
        local sysvdirs
        _sysvdirs
        COMPREPLY=( $( compgen -W '`sed -e "y/|/ /" \
            -ne "s/^.*\(U\|msg_u\)sage.*{\(.*\)}.*$/\2/p" \
            ${sysvdirs[0]}/${prev##*/} 2>/dev/null` start stop' -- "$cur" ) )
    fi
} &&
complete -F _service service
_sysvdirs
for svcdir in ${sysvdirs[@]}; do
    for svc in $svcdir/!($_backup_glob); do
        [[ -x $svc ]] && complete -F _service $svc
    done
done
unset svc svcdir sysvdirs

# This function completes on modules
#
_modules()
{
    local modpath
    modpath=/lib/modules/$1
    COMPREPLY=( $( compgen -W "$( command ls -RL $modpath 2>/dev/null | \
        sed -ne 's/^\(.*\)\.k\{0,1\}o\(\.[gx]z\)\{0,1\}$/\1/p' )" -- "$cur" ) )
}

# This function completes on installed modules
#
_installed_modules()
{
    COMPREPLY=( $( compgen -W "$( PATH="$PATH:/sbin" lsmod | \
        awk '{if (NR != 1) print $1}' )" -- "$1" ) )
}

# This function completes on user or user:group format; as for chown and cpio.
#
# The : must be added manually; it will only complete usernames initially.
# The legacy user.group format is not supported.
#
# @param $1  If -u, only return users/groups the user has access to in
#            context of current completion.
_usergroup()
{
    if [[ $cur = *\\\\* || $cur = *:*:* ]]; then
        # Give up early on if something seems horribly wrong.
        return
    elif [[ $cur = *\\:* ]]; then
        # Completing group after 'user\:gr<TAB>'.
        # Reply with a list of groups prefixed with 'user:', readline will
        # escape to the colon.
        local prefix
        prefix=${cur%%*([^:])}
        prefix=${prefix//\\}
        local mycur="${cur#*[:]}"
        if [[ $1 == -u ]]; then
            _allowed_groups "$mycur"
        else
            local IFS=$'\n'
            COMPREPLY=( $( compgen -g -- "$mycur" ) )
        fi
        COMPREPLY=( $( compgen -P "$prefix" -W "${COMPREPLY[@]}" ) )
    elif [[ $cur = *:* ]]; then
        # Completing group after 'user:gr<TAB>'.
        # Reply with a list of unprefixed groups since readline with split on :
        # and only replace the 'gr' part
        local mycur="${cur#*:}"
        if [[ $1 == -u ]]; then
            _allowed_groups "$mycur"
        else
            local IFS=$'\n'
            COMPREPLY=( $( compgen -g -- "$mycur" ) )
        fi
    else
        # Completing a partial 'usernam<TAB>'.
        #
        # Don't suffix with a : because readline will escape it and add a
        # slash. It's better to complete into 'chown username ' than 'chown
        # username\:'.
        if [[ $1 == -u ]]; then
            _allowed_users "$cur"
        else
            local IFS=$'\n'
            COMPREPLY=( $( compgen -u -- "$cur" ) )
        fi
    fi
}

_allowed_users()
{
    if _complete_as_root; then
        local IFS=$'\n'
        COMPREPLY=( $( compgen -u -- "${1:-$cur}" ) )
    else
        local IFS=$'\n '
        COMPREPLY=( $( compgen -W \
            "$( id -un 2>/dev/null || whoami 2>/dev/null )" -- "${1:-$cur}" ) )
    fi
}

_allowed_groups()
{
    if _complete_as_root; then
        local IFS=$'\n'
        COMPREPLY=( $( compgen -g -- "$1" ) )
    else
        local IFS=$'\n '
        COMPREPLY=( $( compgen -W \
            "$( id -Gn 2>/dev/null || groups 2>/dev/null )" -- "$1" ) )
    fi
}

# This function completes on valid shells
#
_shells()
{
    local shell rest
    while read -r shell rest; do
        [[ $shell == /* && $shell == "$cur"* ]] && COMPREPLY+=( $shell )
    done 2>/dev/null < /etc/shells
}

# This function completes on valid filesystem types
#
_fstypes()
{
    local fss

    if [[ -e /proc/filesystems ]]; then
        # Linux
        fss="$( cut -d$'\t' -f2 /proc/filesystems )
             $( awk '! /\*/ { print $NF }' /etc/filesystems 2>/dev/null )"
    else
        # Generic
        fss="$( awk '/^[ \t]*[^#]/ { print $3 }' /etc/fstab 2>/dev/null )
             $( awk '/^[ \t]*[^#]/ { print $3 }' /etc/mnttab 2>/dev/null )
             $( awk '/^[ \t]*[^#]/ { print $4 }' /etc/vfstab 2>/dev/null )
             $( awk '{ print $1 }' /etc/dfs/fstypes 2>/dev/null )
             $( [[ -d /etc/fs ]] && command ls /etc/fs )"
    fi

    [[ -n $fss ]] && COMPREPLY+=( $( compgen -W "$fss" -- "$cur" ) )
}

# Get real command.
# - arg: $1  Command
# - stdout:  Filename of command in PATH with possible symbolic links resolved.
#            Empty string if command not found.
# - return:  True (0) if command found, False (> 0) if not.
_realcommand()
{
    type -P "$1" > /dev/null && {
        if type -p realpath > /dev/null; then
            realpath "$(type -P "$1")"
        elif type -p greadlink > /dev/null; then
            greadlink -f "$(type -P "$1")"
        elif type -p readlink > /dev/null; then
            readlink -f "$(type -P "$1")"
        else
            type -P "$1"
        fi
    }
}

# This function returns the first argument, excluding options
# @param $1 chars  Characters out of $COMP_WORDBREAKS which should
#     NOT be considered word breaks. See __reassemble_comp_words_by_ref.
_get_first_arg()
{
    local i

    arg=
    for (( i=1; i < COMP_CWORD; i++ )); do
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
            arg=${COMP_WORDS[i]}
            break
        fi
    done
}


# This function counts the number of args, excluding options
# @param $1 chars  Characters out of $COMP_WORDBREAKS which should
#     NOT be considered word breaks. See __reassemble_comp_words_by_ref.
_count_args()
{
    local i cword words
    __reassemble_comp_words_by_ref "$1" words cword

    args=1
    for i in "${words[@]:1:cword-1}"; do
        [[ "$i" != -* ]] && args=$(($args+1))
    done
}

# This function completes on PCI IDs
#
_pci_ids()
{
    COMPREPLY+=( $( compgen -W \
        "$( PATH="$PATH:/sbin" lspci -n | awk '{print $3}')" -- "$cur" ) )
}

# This function completes on USB IDs
#
_usb_ids()
{
    COMPREPLY+=( $( compgen -W \
        "$( PATH="$PATH:/sbin" lsusb | awk '{print $6}' )" -- "$cur" ) )
}

# CD device names
_cd_devices()
{
    COMPREPLY+=( $( compgen -f -d -X "!*/?([amrs])cd*" -- "${cur:-/dev/}" ) )
}

# DVD device names
_dvd_devices()
{
    COMPREPLY+=( $( compgen -f -d -X "!*/?(r)dvd*" -- "${cur:-/dev/}" ) )
}

# TERM environment variable values
_terms()
{
    COMPREPLY+=( $( compgen -W \
        "$( sed -ne 's/^\([^[:space:]#|]\{2,\}\)|.*/\1/p' /etc/termcap \
            2>/dev/null )" -- "$cur" ) )
    COMPREPLY+=( $( compgen -W "$( { toe -a 2>/dev/null || toe 2>/dev/null; } \
        | awk '{ print $1 }' | sort -u )" -- "$cur" ) )
}

# a little help for FreeBSD ports users
[[ $OSTYPE == *freebsd* ]] && complete -W 'index search fetch fetch-list
    extract patch configure build install reinstall deinstall clean
    clean-depends kernel buildworld' make

# This function provides simple user@host completion
#
_user_at_host()
{
    local cur prev words cword
    _init_completion -n : || return

    if [[ $cur == *@* ]]; then
        _known_hosts_real "$cur"
    else
        COMPREPLY=( $( compgen -u -- "$cur" ) )
    fi

    return 0
}
shopt -u hostcomplete && complete -F _user_at_host -o nospace talk ytalk finger

# NOTE: Using this function as a helper function is deprecated.  Use
#       `_known_hosts_real' instead.
_known_hosts()
{
    local cur prev words cword
    _init_completion -n : || return

    # NOTE: Using `_known_hosts' as a helper function and passing options
    #       to `_known_hosts' is deprecated: Use `_known_hosts_real' instead.
    local options
    [[ "$1" == -a || "$2" == -a ]] && options=-a
    [[ "$1" == -c || "$2" == -c ]] && options+=" -c"
    _known_hosts_real $options -- "$cur"
} # _known_hosts()

# Helper function for completing _known_hosts.
# This function performs host completion based on ssh's config and known_hosts
# files, as well as hostnames reported by avahi-browse if
# COMP_KNOWN_HOSTS_WITH_AVAHI is set to a non-empty value.  Also hosts from
# HOSTFILE (compgen -A hostname) are added, unless
# COMP_KNOWN_HOSTS_WITH_HOSTFILE is set to an empty value.
# Usage: _known_hosts_real [OPTIONS] CWORD
# Options:  -a             Use aliases
#           -c             Use `:' suffix
#           -F configfile  Use `configfile' for configuration settings
#           -p PREFIX      Use PREFIX
# Return: Completions, starting with CWORD, are added to COMPREPLY[]
_known_hosts_real()
{
    local configfile flag prefix
    local cur curd awkcur user suffix aliases i host
    local -a kh khd config

    local OPTIND=1
    while getopts "acF:p:" flag "$@"; do
        case $flag in
            a) aliases='yes' ;;
            c) suffix=':' ;;
            F) configfile=$OPTARG ;;
            p) prefix=$OPTARG ;;
        esac
    done
    [[ $# -lt $OPTIND ]] && echo "error: $FUNCNAME: missing mandatory argument CWORD"
    cur=${!OPTIND}; let "OPTIND += 1"
    [[ $# -ge $OPTIND ]] && echo "error: $FUNCNAME("$@"): unprocessed arguments:"\
    $(while [[ $# -ge $OPTIND ]]; do printf '%s\n' ${!OPTIND}; shift; done)

    [[ $cur == *@* ]] && user=${cur%@*}@ && cur=${cur#*@}
    kh=()

    # ssh config files
    if [[ -n $configfile ]]; then
        [[ -r $configfile ]] && config+=( "$configfile" )
    else
        for i in /etc/ssh/ssh_config ~/.ssh/config ~/.ssh2/config; do
            [[ -r $i ]] && config+=( "$i" )
        done
    fi

    # Known hosts files from configs
    if [[ ${#config[@]} -gt 0 ]]; then
        local OIFS=$IFS IFS=$'\n' j
        local -a tmpkh
        # expand paths (if present) to global and user known hosts files
        # TODO(?): try to make known hosts files with more than one consecutive
        #          spaces in their name work (watch out for ~ expansion
        #          breakage! Alioth#311595)
        tmpkh=( $( awk 'sub("^[ \t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][ \t]+", "") { print $0 }' "${config[@]}" | sort -u ) )
        IFS=$OIFS
        for i in "${tmpkh[@]}"; do
            # First deal with quoted entries...
            while [[ $i =~ ^([^\"]*)\"([^\"]*)\"(.*)$ ]]; do
                i=${BASH_REMATCH[1]}${BASH_REMATCH[3]}
                j=${BASH_REMATCH[2]}
                __expand_tilde_by_ref j # Eval/expand possible `~' or `~user'
                [[ -r $j ]] && kh+=( "$j" )
            done
            # ...and then the rest.
            for j in $i; do
                __expand_tilde_by_ref j # Eval/expand possible `~' or `~user'
                [[ -r $j ]] && kh+=( "$j" )
            done
        done
    fi

    if [[ -z $configfile ]]; then
        # Global and user known_hosts files
        for i in /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 \
            /etc/known_hosts /etc/known_hosts2 ~/.ssh/known_hosts \
            ~/.ssh/known_hosts2; do
            [[ -r $i ]] && kh+=( "$i" )
        done
        for i in /etc/ssh2/knownhosts ~/.ssh2/hostkeys; do
            [[ -d $i ]] && khd+=( "$i"/*pub )
        done
    fi

    # If we have known_hosts files to use
    if [[ ${#kh[@]} -gt 0 || ${#khd[@]} -gt 0 ]]; then
        # Escape slashes and dots in paths for awk
        awkcur=${cur//\//\\\/}
        awkcur=${awkcur//\./\\\.}
        curd=$awkcur

        if [[ "$awkcur" == [0-9]*[.:]* ]]; then
            # Digits followed by a dot or a colon - just search for that
            awkcur="^$awkcur[.:]*"
        elif [[ "$awkcur" == [0-9]* ]]; then
            # Digits followed by no dot or colon - search for digits followed
            # by a dot or a colon
            awkcur="^$awkcur.*[.:]"
        elif [[ -z $awkcur ]]; then
            # A blank - search for a dot, a colon, or an alpha character
            awkcur="[a-z.:]"
        else
            awkcur="^$awkcur"
        fi

        if [[ ${#kh[@]} -gt 0 ]]; then
            # FS needs to look for a comma separated list
            COMPREPLY+=( $( awk 'BEGIN {FS=","}
            /^\s*[^|\#]/ {
            sub("^@[^ ]+ +", ""); \
            sub(" .*$", ""); \
            for (i=1; i<=NF; ++i) { \
            sub("^\\[", "", $i); sub("\\](:[0-9]+)?$", "", $i); \
            if ($i !~ /[*?]/ && $i ~ /'"$awkcur"'/) {print $i} \
            }}' "${kh[@]}" 2>/dev/null ) )
        fi
        if [[ ${#khd[@]} -gt 0 ]]; then
            # Needs to look for files called
            # .../.ssh2/key_22_<hostname>.pub
            # dont fork any processes, because in a cluster environment,
            # there can be hundreds of hostkeys
            for i in "${khd[@]}" ; do
                if [[ "$i" == *key_22_$curd*.pub && -r "$i" ]]; then
                    host=${i/#*key_22_/}
                    host=${host/%.pub/}
                    COMPREPLY+=( $host )
                fi
            done
        fi

        # apply suffix and prefix
        for (( i=0; i < ${#COMPREPLY[@]}; i++ )); do
            COMPREPLY[i]=$prefix$user${COMPREPLY[i]}$suffix
        done
    fi

    # append any available aliases from config files
    if [[ ${#config[@]} -gt 0 && -n "$aliases" ]]; then
        local hosts=$( sed -ne 's/^[ \t]*[Hh][Oo][Ss][Tt]\([Nn][Aa][Mm][Ee]\)\{0,1\}['"$'\t '"']\{1,\}\([^#*?]*\)\(#.*\)\{0,1\}$/\2/p' "${config[@]}" )
        COMPREPLY+=( $( compgen -P "$prefix$user" \
            -S "$suffix" -W "$hosts" -- "$cur" ) )
    fi

    # This feature is disabled because it does not scale to
    #  larger networks. See:
    # https://bugs.launchpad.net/ubuntu/+source/bash-completion/+bug/510591
    # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=574950

    # Add hosts reported by avahi-browse, if desired and it's available.
    #if [[ ${COMP_KNOWN_HOSTS_WITH_AVAHI:-} ]] && \
        #type avahi-browse &>/dev/null; then
        # The original call to avahi-browse also had "-k", to avoid lookups
        # into avahi's services DB. We don't need the name of the service, and
        # if it contains ";", it may mistify the result. But on Gentoo (at
        # least), -k wasn't available (even if mentioned in the manpage) some
        # time ago, so...
        #COMPREPLY+=( $( compgen -P "$prefix$user" -S "$suffix" -W \
        #    "$( avahi-browse -cpr _workstation._tcp 2>/dev/null | \
        #         awk -F';' '/^=/ { print $7 }' | sort -u )" -- "$cur" ) )
    #fi

    # Add hosts reported by ruptime.
    COMPREPLY+=( $( compgen -W \
        "$( ruptime 2>/dev/null | awk '!/^ruptime:/ { print $1 }' )" \
        -- "$cur" ) )

    # Add results of normal hostname completion, unless
    # `COMP_KNOWN_HOSTS_WITH_HOSTFILE' is set to an empty value.
    if [[ -n ${COMP_KNOWN_HOSTS_WITH_HOSTFILE-1} ]]; then
        COMPREPLY+=(
            $( compgen -A hostname -P "$prefix$user" -S "$suffix" -- "$cur" ) )
    fi

    __ltrim_colon_completions "$prefix$user$cur"

    return 0
} # _known_hosts_real()
complete -F _known_hosts traceroute traceroute6 tracepath tracepath6 \
    fping fping6 telnet rsh rlogin ftp dig mtr ssh-installkeys showmount

# This meta-cd function observes the CDPATH variable, so that cd additionally
# completes on directories under those specified in CDPATH.
#
_cd()
{
    local cur prev words cword
    _init_completion || return

    local IFS=$'\n' i j k

    compopt -o filenames

    # Use standard dir completion if no CDPATH or parameter starts with /,
    # ./ or ../
    if [[ -z "${CDPATH:-}" || "$cur" == ?(.)?(.)/* ]]; then
        _filedir -d
        return 0
    fi

    local -r mark_dirs=$(_rl_enabled mark-directories && echo y)
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y)

    # we have a CDPATH, so loop on its contents
    for i in ${CDPATH//:/$'\n'}; do
        # create an array of matched subdirs
        k="${#COMPREPLY[@]}"
        for j in $( compgen -d $i/$cur ); do
            if [[ ( $mark_symdirs && -h $j || $mark_dirs && ! -h $j ) && ! -d ${j#$i/} ]]; then
                j+="/"
            fi
            COMPREPLY[k++]=${j#$i/}
        done
    done

    _filedir -d

    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
        i=${COMPREPLY[0]}
        if [[ "$i" == "$cur" && $i != "*/" ]]; then
            COMPREPLY[0]="${i}/"
        fi
    fi

    return 0
}
if shopt -q cdable_vars; then
    complete -v -F _cd -o nospace cd
else
    complete -F _cd -o nospace cd
fi

# a wrapper method for the next one, when the offset is unknown
_command()
{
    local offset i

    # find actual offset, as position of the first non-option
    offset=1
    for (( i=1; i <= COMP_CWORD; i++ )); do
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
            offset=$i
            break
        fi
    done
    _command_offset $offset
}

# A meta-command completion function for commands like sudo(8), which need to
# first complete on a command, then complete according to that command's own
# completion definition.
#
_command_offset()
{
    # rewrite current completion context before invoking
    # actual command completion

    # find new first word position, then
    # rewrite COMP_LINE and adjust COMP_POINT
    local word_offset=$1 i j
    for (( i=0; i < $word_offset; i++ )); do
        for (( j=0; j <= ${#COMP_LINE}; j++ )); do
            [[ "$COMP_LINE" == "${COMP_WORDS[i]}"* ]] && break
            COMP_LINE=${COMP_LINE:1}
            ((COMP_POINT--))
        done
        COMP_LINE=${COMP_LINE#"${COMP_WORDS[i]}"}
        ((COMP_POINT-=${#COMP_WORDS[i]}))
    done

    # shift COMP_WORDS elements and adjust COMP_CWORD
    for (( i=0; i <= COMP_CWORD - $word_offset; i++ )); do
        COMP_WORDS[i]=${COMP_WORDS[i+$word_offset]}
    done
    for (( i; i <= COMP_CWORD; i++ )); do
        unset COMP_WORDS[i]
    done
    ((COMP_CWORD -= $word_offset))

    COMPREPLY=()
    local cur
    _get_comp_words_by_ref cur

    if [[ $COMP_CWORD -eq 0 ]]; then
        local IFS=$'\n'
        compopt -o filenames
        COMPREPLY=( $( compgen -d -c -- "$cur" ) )
    else
        local cmd=${COMP_WORDS[0]} compcmd=${COMP_WORDS[0]}
        local cspec=$( complete -p $cmd 2>/dev/null )

        # If we have no completion for $cmd yet, see if we have for basename
        if [[ ! $cspec && $cmd == */* ]]; then
            cspec=$( complete -p ${cmd##*/} 2>/dev/null )
            [[ $cspec ]] && compcmd=${cmd##*/}
        fi
        # If still nothing, just load it for the basename
        if [[ ! $cspec ]]; then
            compcmd=${cmd##*/}
            _completion_loader $compcmd
            cspec=$( complete -p $compcmd 2>/dev/null )
        fi

        if [[ -n $cspec ]]; then
            if [[ ${cspec#* -F } != $cspec ]]; then
                # complete -F <function>

                # get function name
                local func=${cspec#*-F }
                func=${func%% *}

                if [[ ${#COMP_WORDS[@]} -ge 2 ]]; then
                    $func $cmd "${COMP_WORDS[${#COMP_WORDS[@]}-1]}" "${COMP_WORDS[${#COMP_WORDS[@]}-2]}"
                else
                    $func $cmd "${COMP_WORDS[${#COMP_WORDS[@]}-1]}"
                fi

                # restore initial compopts
                local opt
                while [[ $cspec == *" -o "* ]]; do
                    # FIXME: should we take "+o opt" into account?
                    cspec=${cspec#*-o }
                    opt=${cspec%% *}
                    compopt -o $opt
                    cspec=${cspec#$opt}
                done
            else
                cspec=${cspec#complete}
                cspec=${cspec%%$compcmd}
                COMPREPLY=( $( eval compgen "$cspec" -- '$cur' ) )
            fi
        elif [[ ${#COMPREPLY[@]} -eq 0 ]]; then
            # XXX will probably never happen as long as completion loader loads
            #     *something* for every command thrown at it ($cspec != empty)
            _minimal
        fi
    fi
}
complete -F _command aoss command do else eval exec ltrace nice nohup padsp \
    then time tsocks vsound xargs

_root_command()
{
    local PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin
    local root_command=$1
    _command
}
complete -F _root_command fakeroot gksu gksudo kdesudo really

# Return true if the completion should be treated as running as root
_complete_as_root()
{
    [[ $EUID -eq 0 || ${root_command:-} ]]
}

_longopt()
{
    local cur prev words cword split
    _init_completion -s || return

    case "${prev,,}" in
        --help|--usage|--version)
            return 0
            ;;
        --*dir*)
            _filedir -d
            return 0
            ;;
        --*file*|--*path*)
            _filedir
            return 0
            ;;
        --+([-a-z0-9_]))
            local argtype=$( $1 --help 2>&1 | sed -ne \
                "s|.*$prev\[\{0,1\}=[<[]\{0,1\}\([-A-Za-z0-9_]\{1,\}\).*|\1|p" )
            case ${argtype,,} in
                *dir*)
                    _filedir -d
                    return 0
                    ;;
                *file*|*path*)
                    _filedir
                    return 0
                    ;;
            esac
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W "$( $1 --help 2>&1 | \
            sed -ne 's/.*\(--[-A-Za-z0-9]\{1,\}=\{0,1\}\).*/\1/p' | sort -u )" \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    elif [[ "$1" == @(mk|rm)dir ]]; then
        _filedir -d
    else
        _filedir
    fi
}
# makeinfo and texi2dvi are defined elsewhere.
complete -F _longopt a2ps awk base64 bash bc bison cat colordiff cp csplit \
    cut date df diff dir du enscript env expand fmt fold gperf \
    grep grub head indent irb ld ldd less ln ls m4 md5sum mkdir mkfifo mknod \
    mv netstat nl nm objcopy objdump od paste pr ptx readelf rm rmdir \
    sed seq sha{,1,224,256,384,512}sum shar sort split strip sum tac tail tee \
    texindex touch tr uname unexpand uniq units vdir wc who

declare -A _xspecs
_filedir_xspec()
{
    local cur prev words cword
    _init_completion || return

    _tilde "$cur" || return 0

    local IFS=$'\n' xspec=${_xspecs[${1##*/}]} tmp
    local -a toks

    toks=( $(
        compgen -d -- "$(quote_readline "$cur")" | {
        while read -r tmp; do
            printf '%s\n' $tmp
        done
        }
        ))

    # Munge xspec to contain uppercase version too
    # http://thread.gmane.org/gmane.comp.shells.bash.bugs/15294/focus=15306
    eval xspec="${xspec}"
    local matchop=!
    if [[ $xspec == !* ]]; then
        xspec=${xspec#!}
        matchop=@
    fi
    xspec="$matchop($xspec|${xspec^^})"

    toks+=( $(
        eval compgen -f -X "!$xspec" -- "\$(quote_readline "\$cur")" | {
        while read -r tmp; do
            [[ -n $tmp ]] && printf '%s\n' $tmp
        done
        }
        ))

    if [[ ${#toks[@]} -ne 0 ]]; then
        compopt -o filenames
        COMPREPLY=( "${toks[@]}" )
    fi
}

_install_xspec()
{
    local xspec=$1 cmd
    shift
    for cmd in $@; do
        _xspecs[$cmd]=$xspec
    done
    complete -F _filedir_xspec $@
}
# bzcmp, bzdiff, bz*grep, bzless, bzmore intentionally not here, see Debian: #455510
_install_xspec '!*.?(t)bz?(2)' bunzip2 bzcat pbunzip2 pbzcat lbunzip2 lbzcat
_install_xspec '!*.@(zip|[ejsw]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|do[ct][xm]|p[op]t[mx]|xl[st][xm])' unzip zipinfo
_install_xspec '*.Z' compress znew
# zcmp, zdiff, z*grep, zless, zmore intentionally not here, see Debian: #455510
_install_xspec '!*.@(Z|[gGd]z|t[ag]z)' gunzip zcat unpigz
_install_xspec '!*.Z' uncompress
# lzcmp, lzdiff intentionally not here, see Debian: #455510
_install_xspec '!*.@(tlz|lzma)' lzcat lzegrep lzfgrep lzgrep lzless lzmore unlzma
_install_xspec '!*.@(?(t)xz|tlz|lzma)' unxz xzcat
_install_xspec '!*.lrz' lrunzip
_install_xspec '!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)' ee
_install_xspec '!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|svg)' qiv
_install_xspec '!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|?(e)ps)' xv
_install_xspec '!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))' gv ggv kghostview
_install_xspec '!*.@(dvi|DVI)?(.@(gz|Z|bz2))' xdvi kdvi
_install_xspec '!*.dvi' dvips dviselect dvitype dvipdf advi dvipdfm dvipdfmx
_install_xspec '!*.[pf]df' acroread gpdf
_install_xspec '!*.@(pdf|fdf)?(.@(gz|xz|Z|bz2))' xpdf
_install_xspec '!*.@(?(e)ps|pdf)' kpdf
_install_xspec '!*.@(okular|@(?(e|x)ps|?(E|X)PS|[pf]df|[PF]DF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM)?(.?(gz|GZ|bz2|BZ2)))' okular
_install_xspec '!*.pdf' epdfview
_install_xspec '!*.@(cb[rz7t]|djv?(u)|?(e)ps|pdf)' zathura
_install_xspec '!*.@(?(e)ps|pdf)' ps2pdf ps2pdf12 ps2pdf13 ps2pdf14 ps2pdfwr
_install_xspec '!*.texi*' makeinfo texi2html
_install_xspec '!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)' tex latex slitex jadetex pdfjadetex pdftex pdflatex texi2dvi
_install_xspec '!*.mp3' mpg123 mpg321 madplay
_install_xspec '!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)' xine aaxine fbxine
_install_xspec '!*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)' kaffeine dragon
_install_xspec '!*.@(avi|asf|wmv)' aviplay
_install_xspec '!*.@(rm?(j)|ra?(m)|smi?(l))' realplay
_install_xspec '!*.@(mpg|mpeg|avi|mov|qt)' xanim
_install_xspec '!*.@(og[ag]|m3u|flac|spx)' ogg123
_install_xspec '!*.@(mp3|og[ag]|pls|m3u)' gqmpeg freeamp
_install_xspec '!*.fig' xfig
_install_xspec '!*.@(mid?(i)|cmf)' playmidi
_install_xspec '!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)' timidity
_install_xspec '!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|okta|p[st]m|s[3t]m|ult|umx|wav|xm)' modplugplay modplug123
_install_xspec '*.@(o|so|so.!(conf|*/*)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)' vi vim gvim rvim view rview rgvim rgview gview emacs xemacs sxemacs kate kwrite
_install_xspec '!*.@(zip|z|gz|tgz)' bzme
# konqueror not here on purpose, it's more than a web/html browser
_install_xspec '!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))' netscape mozilla lynx galeon dillo elinks amaya firefox mozilla-firefox iceweasel google-chrome chromium-browser epiphany
_install_xspec '!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm)' oowriter
_install_xspec '!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)' ooimpress
_install_xspec '!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)' oocalc
_install_xspec '!*.@(sxd|std|sda|sdd|?(f)odg|otg)' oodraw
_install_xspec '!*.@(sxm|smf|mml|odf)' oomath
_install_xspec '!*.odb' oobase
_install_xspec '!*.[rs]pm' rpm2cpio
_install_xspec '!*.aux' bibtex
_install_xspec '!*.po' poedit gtranslator kbabel lokalize
_install_xspec '!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])' harbour gharbour hbpp
_install_xspec '!*.[Hh][Rr][Bb]' hbrun
_install_xspec '!*.ly' lilypond ly2dvi
_install_xspec '!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))' cdiff
_install_xspec '!@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)' portecle
_install_xspec '!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)' kid3 kid3-qt
_install_xspec '!*.py' pyflakes
unset -f _install_xspec

# Minimal completion to use as fallback in _completion_loader.
_minimal()
{
    local cur prev words cword split
    _init_completion -s || return
    $split && return
    _filedir
}
# Complete the empty string to allow completion of '>', '>>', and '<'
# http://lists.gnu.org/archive/html/bug-bash/2012-01/msg00045.html
complete -F _minimal ''


# set up dynamic completion loading
_completion_loader()
{
    local compfile=./completions
    [[ $BASH_SOURCE == */* ]] && compfile="${BASH_SOURCE%/*}/completions"
    compfile+="/${1##*/}"

    # Avoid trying to source dirs; https://bugzilla.redhat.com/903540
    [[ -f "$compfile" ]] && . "$compfile" &>/dev/null && return 124

    # Need to define *something*, otherwise there will be no completion at all.
    complete -F _minimal "$1" && return 124
} &&
complete -D -F _completion_loader

# Function for loading and calling functions from dynamically loaded
# completion files that may not have been sourced yet.
# @param $1 completion file to load function from in case it is missing
# @param $2... function and its arguments
_xfunc()
{
    set -- "$@"
    local srcfile=$1
    shift
    declare -F $1 &>/dev/null || {
        local compdir=./completions
        [[ $BASH_SOURCE == */* ]] && compdir="${BASH_SOURCE%/*}/completions"
        . "$compdir/$srcfile"
    }
    "$@"
}

# source compat completion directory definitions
if [[ -d $BASH_COMPLETION_COMPAT_DIR && -r $BASH_COMPLETION_COMPAT_DIR && \
    -x $BASH_COMPLETION_COMPAT_DIR ]]; then
    for i in $(LC_ALL=C command ls "$BASH_COMPLETION_COMPAT_DIR"); do
        i=$BASH_COMPLETION_COMPAT_DIR/$i
        [[ ${i##*/} != @($_backup_glob|Makefile*|$_blacklist_glob) \
            && -f $i && -r $i ]] && . "$i"
    done
fi
unset i _blacklist_glob

# source user completion file
[[ ${BASH_SOURCE[0]} != ~/.bash_completion && -r ~/.bash_completion ]] \
    && . ~/.bash_completion
unset -f have
unset have

set $BASH_COMPLETION_ORIGINAL_V_VALUE
unset BASH_COMPLETION_ORIGINAL_V_VALUE

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # a2x(1) completion                                        -*- shell-script -*-

_a2x()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -a|--attribute|--asciidoc-opts|--dblatex-opts|--fop-opts|-h|--help|\
        --version|--xsltproc-opts)
            return
            ;;
        -D|--destination-dir|--icons-dir)
            _filedir -d
            return
            ;;
        --doctype|-d)
            _xfunc asciidoc _asciidoc_doctype
            return
            ;;
        --stylesheet)
            _filedir css
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help )' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir
} &&
complete -F _a2x a2x

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # abook(1) completion                                      -*- shell-script -*-

_abook()
{
    local cur prev words cword
    _init_completion || return

    # abook only takes options, tabbing after command name adds a single dash
    [[ $cword -eq 1 && -z "$cur" ]] &&
    {
        compopt -o nospace
        COMPREPLY=( "-" )
        return 0
    }

    case $cur in
        -*)
            _longopt abook
            return 0
            ;;
    esac

    case $prev in
        --informat)
            COMPREPLY=( $( compgen -W "$(abook --formats | \
                sed -n -e 's/^\t\([a-z]*\).*/\1/p' -e '/^$/q')" -- "$cur" ) )
            return 0
            ;;
        --outformat)
            COMPREPLY=( $( compgen -W "$(abook --formats | \
                sed -n -e '/^$/,$s/^\t\([a-z]*\).*/\1/p')" -- "$cur" ) )
            return 0
            ;;
        --infile)
            COMPREPLY=( $( compgen -W stdin -- "$cur" ) )
            _filedir
            return 0
            ;;
        --outfile)
            COMPREPLY=( $( compgen -W stdout -- "$cur" ) )
            _filedir
            return 0
            ;;
        --config|--datafile)
            _filedir
            return 0
            ;;
    esac
} &&
complete -F _abook abook

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # aclocal(1) completion                                    -*- shell-script -*-

_aclocal()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        --help|--print-ac-dir|--version)
            return 0
            ;;
        --acdir|-I)
            _filedir -d
            return 0
            ;;
        --output)
            _filedir
            return 0
            ;;
        --warnings|-W)
            local cats=( syntax unsupported )
            COMPREPLY=( $( compgen -W \
                '${cats[@]} ${cats[@]/#/no-} all none error' -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _aclocal aclocal aclocal-1.11

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # acpi(1) completion                                        -*- shell-script -*-

_acpi()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h|--help|-v|--version)
            return
            ;;
        -d|--directory)
            _filedir -d
            return
            ;;
    esac

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
} &&
complete -F _acpi acpi

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # mailman add_members completion                           -*- shell-script -*-

_add_members()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -r|-d|--regular-members-file|--digest-members-file)
            _filedir
            return 0
            ;;
        -w|-a|--welcome-msg|--admin-notify)
            COMPREPLY=( $( compgen -W 'y n' -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--regular-members-file --digest-members-file
            --welcome-msg --admin-notify --help' -- "$cur" ) )
    else
        _xfunc list_lists _mailman_lists
    fi

} &&
complete -F _add_members add_members

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _addpart_module()
{
	local cur
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	case $COMP_CWORD in
		1)
			OPTS="--help --version $(lsblk -pnro name)"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			;;
		2)
			# FIXME: how to determine next free partition number
			;;
		3)
			COMPREPLY=( $(compgen -W "start" -- $cur) )
			;;
		4)
			COMPREPLY=( $(compgen -W "length" -- $cur) )
			;;
	esac
	return 0
}
complete -F _addpart_module addpart
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # bash alias completion                                    -*- shell-script -*-

_alias()
{
    local cur prev words cword
    _init_completion || return

    case ${words[@]} in
        *[^=])
            COMPREPLY=( $( compgen -A alias -- "$cur" ) )
            ;;
        *=)
            COMPREPLY=( "$( alias ${cur%=} 2>/dev/null | sed \
                -e 's|^alias '"$cur"'\(.*\)$|\1|' )" )
            ;;
    esac
} &&
complete -F _alias -o nospace alias

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # bash completion for ant and phing                        -*- shell-script -*-

_ant()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -buildfile|-file|-f)
            _filedir 'xml'
            return 0
            ;;
        -logfile|-l)
            _filedir
            return 0
            ;;
        -propertyfile)
            _filedir properties
            return 0
            ;;
        -nice)
            COMPREPLY=( $( compgen -W '{1..10}' -- "$cur" ) )
            return 0
            ;;
        -lib)
            _filedir -d
            return 0
            ;;
        -logger|-listener|-inputhandler|-main|-find|-s)
            return 0
            ;;
    esac

    if [[ $cur == -D* ]]; then
        return 0
    elif [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -h )' -- "$cur" ) )
    else
        # available targets completion
        # find which buildfile to use
        local buildfile=build.xml i
        for (( i=1; i < cword; i++ )); do
            if [[ "${words[i]}" == -@(?(build)file|f) ]]; then
                buildfile=${words[i+1]}
                break
            fi
        done
        [[ ! -f $buildfile ]] && return 0

        # parse buildfile for targets
        local line targets
        while read -rd '>' line; do
            [[ $line =~ \
               \<(targe|extension-poin)t[[:space:]].*name=[\"\']([^\"\']+) ]] \
                && targets+=" ${BASH_REMATCH[2]}"
        done < $buildfile
        COMPREPLY=( $( compgen -W '$targets' -- "$cur" ) )
    fi
} &&
complete -F _ant ant phing
type complete-ant-cmd.pl &>/dev/null && \
    complete -C complete-ant-cmd.pl -F _ant ant || :

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # apache2ctl(1) completion                                 -*- shell-script -*-

_apache2ctl()
{
    local cur prev words cword
    _init_completion || return

    local APWORDS
    APWORDS=$(apache2ctl 2>&1 >/dev/null | awk 'NR<2 { print $3; exit }' | \
        tr "|" " ")

    COMPREPLY=( $( compgen -W "$APWORDS" -- "$cur" ) )
} &&
complete -F _apache2ctl apache2ctl

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # Debian apt-build(1) completion                           -*- shell-script -*-

_apt_build()
{
    local cur prev words cword
    _init_completion || return

    local special i
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        if [[ ${words[i]} == @(install|remove|source|info|clean) ]]; then
            special=${words[i]}
        fi
    done

    if [[ -n $special ]]; then
        case $special in
            install|source|info)
                COMPREPLY=( $( apt-cache pkgnames "$cur" 2> /dev/null ) )
                return 0
                ;;
            remove)
                COMPREPLY=( \
                    $( _xfunc dpkg _comp_dpkg_installed_packages "$cur" ) )
                return 0
                ;;
            *)
                return 0
                ;;
        esac
    fi

    case $prev in
         --patch|--build-dir|--repository-dir)
               _filedir
               return 0
               ;;
         -h|--help)
               return 0
               ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--help --show-upgraded -u --build-dir
            --repository-dir --build-only --build-command --reinstall --rebuild
            --remove-builddep --no-wrapper --purge --patch --patch-strip -p
            --yes -y --version -v --no-source' -- "$cur" ) )

    else
        COMPREPLY=( $( compgen -W 'update upgrade install remove source
            dist-upgrade world clean info clean-build update-repository' \
            -- "$cur" ) )
    fi


    return 0
} &&
complete -F _apt_build apt-build

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # Debian apt(8) completion                             -*- shell-script -*-

_apt()
{
    local sourcesdir="/etc/apt/sources.list.d"
    local cur prev words cword
    _init_completion || return

    local GENERIC_APT_GET_OPTIONS='
        -d --download-only
        -y --assume-yes
        --assume-no
        -u --show-upgraded
        -m --ignore-missing
        -t --target-release
        --download
        --fix-missing
        --ignore-hold
        --upgrade
        --only-upgrade
        --allow-change-held-packages
        --allow-remove-essential
        --allow-downgrades
        --print-uris
        --trivial-only
        --remove
        --arch-only
        --allow-unauthenticated
        --allow-insecure-repositories
        --install-recommends
        --install-suggests
        --fix-policy
    '

    # see if the user selected a command already
    local COMMANDS=(
        "list"
        "search"
        "show" "showsrc"
        "install" "remove" "purge" "autoremove"
        "update"
        "upgrade" "full-upgrade" "dist-upgrade"
        "edit-sources"
        "help"
        "source" "build-dep"
        "clean" "autoclean"
        "download" "changelog"
        "moo"
        "depends" "rdepends"
        "policy")

    local command i
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        if [[ ${COMMANDS[@]} =~ ${words[i]} ]]; then
            command=${words[i]}
            break
        fi
    done

    # Complete a -t<SPACE><TAB>
    case $prev in
        -t|--target-release)
            COMPREPLY=( $( compgen -W "$(apt-cache policy | egrep -o 'a=[^,]*|n=[^,]*' | cut -f2- -d= | sort -u)" -- "$cur" ) )
            return 0
            ;;
    esac

    # supported options per command
    if [[ "$cur" == -* ]]; then
        case $command in
            install|remove|purge|upgrade|dist-upgrade|full-upgrade|autoremove)
                COMPREPLY=( $( compgen -W '--show-progress
                  --fix-broken --purge --verbose-versions --auto-remove
                  -s --simulate --dry-run
                  --download
                  --fix-missing
                  --fix-policy
                  --ignore-hold
                  --force-yes
                  --trivial-only
                  --reinstall --solver
                  -t --target-release'"$GENERIC_APT_GET_OPTIONS" -- "$cur" ) )
                return 0
                ;;
            update)
                COMPREPLY=( $( compgen -W '--list-cleanup
                  --print-uris
                  --allow-insecure-repositories
                  ' -- "$cur" ) )
                return 0
                ;;
            list)
                COMPREPLY=( $( compgen -W '--installed --upgradable 
                  --manual-installed
                  -v --verbose
                  -a --all-versions
                  -t --target-release
                  ' -- "$cur" ) )
                return 0
                ;;
            show)
                COMPREPLY=( $( compgen -W '-a --all-versions
                  ' -- "$cur" ) )
                return 0
                ;;
            depends|rdepends)
                COMPREPLY=( $( compgen -W '-i
                    --important
                    --installed
                    --pre-depends
                    --depends
                    --recommends
                    --suggests
                    --replaces
                    --breaks
                    --conflicts
                    --enhances
                    --recurse
                    --implicit' -- "$cur" ) )
                return 0
                ;;
            search)
                COMPREPLY=( $( compgen -W '
                    -n --names-only
                    -f --full' -- "$cur" ) )
                return 0
                ;;
            showsrc)
                COMPREPLY=( $( compgen -W '
                    --only-source' -- "$cur" ) )
                return 0
                ;;
            source)
                COMPREPLY=( $( compgen -W '
                    -s --simulate --dry-run
                    -b --compile --build
                    -P --build-profiles
                    --diff-only --debian-only
                    --tar-only
                    --dsc-only
                    -t --target-release
                    '"$GENERIC_APT_GET_OPTIONS" -- "$cur" ) )
                return 0
                ;;
            build-dep)
                COMPREPLY=( $( compgen -W '
                    -a --host-architecture
                    -s --simulate --dry-run
                    -P --build-profiles
                    -t --target-release
                    --purge --solver
                    '"$GENERIC_APT_GET_OPTIONS" -- "$cur" ) )
                return 0
                ;;
            moo)
                COMPREPLY=( $( compgen -W '
                    --color
                    ' -- "$cur" ) )
                return 0
                ;;
            clean|autoclean)
                COMPREPLY=( $( compgen -W '
                    -s --simulate --dry-run
                    ' -- "$cur" ) )
                return 0
                ;;
        esac
    fi

    # specific command arguments
    if [[ -n $command ]]; then
        case $command in
            remove|purge|autoremove)
                if [[ -f /etc/debian_version ]]; then
                    # Debian system
                    COMPREPLY=( $( \
                        _xfunc dpkg _comp_dpkg_installed_packages $cur ) )
                else
                    # assume RPM based
                    _xfunc rpm _rpm_installed_packages
                fi
                return 0
                ;;
            show|list|download|changelog|depends|rdepends)
                COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \
                    2> /dev/null ) )
                return 0
                ;;
            install)
                COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \
                    2> /dev/null ) )
                if [[ "$cur" == ./* || "$cur" == /* ]]; then
                    _filedir "deb"
                fi
                return 0
                ;;
            source|build-dep|showsrc|policy)
                COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \
                    2> /dev/null ) $( apt-cache dumpavail | \
                    command grep "^Source: $cur" | sort -u | cut -f2 -d" " ) )
                return 0
                ;;
            edit-sources)
                COMPREPLY=( $( compgen -W '$( command ls $sourcesdir )' \
                    -- "$cur" ) )
                return 0
                ;;
            moo)
                COMPREPLY=( $( compgen -W 'moo' \
                    -- "$cur" ) )
                return 0
                ;;
        esac
    fi

    # no command yet, show what commands we have
    if [ "$command" = "" ]; then
        COMPREPLY=( $( compgen -W '${COMMANDS[@]}' -- "$cur" ) )
    fi

    return 0
} &&
complete -F _apt apt

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # Debian apt-cache(8) completion                           -*- shell-script -*-

_apt_cache()
{
    local cur prev words cword
    _init_completion || return

    local special i
    if [[ $cur != show ]]; then
        for (( i=0; i < ${#words[@]}-1; i++ )); do
            if [[ ${words[i]} == @(add|depends|dotty|madison|policy|rdepends|show?(pkg|src|)) ]]; then
                special=${words[i]}
            fi
        done
    fi


    if [[ -n $special ]]; then
        case $special in
        add)
            _filedir
            return 0
            ;;

        showsrc)
            COMPREPLY=( $( apt-cache dumpavail | \
                command grep "^Source: $cur" | sort -u | cut -f2 -d" " ) )
            return 0
            ;;

        *)
            COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
            return 0
            ;;

        esac
    fi


    case $prev in
         -c|-p|-s|--config-file|--pkg-cache|--src-cache)
             _filedir
             return 0
             ;;
         search)
             if [[ "$cur" != -* ]]; then
                return 0
             fi
             ;;
    esac

    if [[ "$cur" == -* ]]; then

        COMPREPLY=( $( compgen -W '-h -v -p -s -q -i -f -a -g -c -o --help
                --version --pkg-cache --src-cache --quiet --important --full
                --all-versions --no-all-versions --generate --no-generate
                --names-only --all-names --recurse --config-file --option
                --installed' -- "$cur" ) )
    else

        COMPREPLY=( $( compgen -W 'add gencaches show showpkg showsrc stats
                dump dumpavail unmet search search depends rdepends pkgnames
                dotty xvcg policy madison' -- "$cur" ) )

    fi


    return 0
} &&
complete -F _apt_cache apt-cache

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # Debian apt-get(8) completion                             -*- shell-script -*-

_apt_get()
{
    local cur prev words cword
    _init_completion || return

    local special i
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        if [[ ${words[i]} == @(install|remove|autoremove|purge|source|build-dep|download|changelog) ]]; then
            special=${words[i]}
        fi
    done

    if [[ -n $special ]]; then
        case $special in
            remove|autoremove|purge)
                if [[ -f /etc/debian_version ]]; then
                    # Debian system
                    COMPREPLY=( $( \
                        _xfunc dpkg _comp_dpkg_installed_packages $cur ) )
                else
                    # assume RPM based
                    _xfunc rpm _rpm_installed_packages
                fi
                return 0
                ;;
            source)
                COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \
                    2> /dev/null ) $( apt-cache dumpavail | \
                    command grep "^Source: $cur" | sort -u | cut -f2 -d" " ) )
                return 0
                ;;
            *)
                COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \
                    2> /dev/null ) )
                return 0
                ;;
        esac
    fi

    case $prev in
        -c|--config-file)
             _filedir
             return 0
             ;;
        -t|--target-release|--default-release)
             COMPREPLY=( $( apt-cache policy | \
                 command grep "release.o=Debian,a=$cur" | \
                 sed -e "s/.*a=\(\w*\).*/\1/" | uniq 2> /dev/null) )
             return 0
             ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-d -f -h -v -m -q -s -y -u -t -b -c -o
            --download-only --fix-broken --help --version --ignore-missing
            --fix-missing --no-download --quiet --simulate --just-print
            --dry-run --recon --no-act --yes --assume-yes --show-upgraded
            --only-source --compile --build --ignore-hold --target-release
            --no-upgrade --force-yes --print-uris --purge --reinstall
            --list-cleanup --default-release --trivial-only --no-remove
            --diff-only --no-install-recommends --tar-only --config-file
            --option --auto-remove' -- "$cur" ) )
    else
        COMPREPLY=( $( compgen -W 'update upgrade dselect-upgrade
            dist-upgrade install remove purge source build-dep download
            changelog check clean autoclean autoremove' -- "$cur" ) )
    fi

    return 0
} &&
complete -F _apt_get apt-get

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # Debian aptitude(1) completion                            -*- shell-script -*-

_have grep-status && {
_comp_dpkg_hold_packages()
{
    grep-status -P -e "^$1" -a -FStatus 'hold' -n -s Package
}
} || {
_comp_dpkg_hold_packages()
{
    command grep -B 2 'hold' /var/lib/dpkg/status | \
        command grep "Package: $1" | cut -d\  -f2
}
}

_aptitude()
{
    local cur prev words cword
    _init_completion || return

    local dashoptions='-S -u -i -h --help --version -s --simulate -d
        --download-only -P --prompt -y --assume-yes -F --display-format -O
        --sort -w --width -f -r -g --with-recommends -R -G --without-recommends
        -t --target-release -V --show-versions -D --show-deps -Z -v --verbose
        --purge-unused --schedule-only'

    local special i
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        if [[ ${words[i]} == @(@(|re)install|@(|un)hold|@(|un)markauto|@(dist|full|safe)-upgrade|download|show|forbid-version|purge|remove|changelog|why@(|-not)|keep@(|-all)|build-dep|@(add|remove)-user-tag|versions) ]]; then
            special=${words[i]}
        fi
        #exclude some mutually exclusive options
        [[ ${words[i]} == '-u' ]] && dashoptions=${dashoptions/-i}
        [[ ${words[i]} == '-i' ]] && dashoptions=${dashoptions/-u}
    done

    if [[ -n "$special" ]]; then
       case $special in
           install|hold|markauto|unmarkauto|dist-upgrade|full-upgrade| \
           download|show|changelog|why|why-not|build-dep|add-user-tag| \
           remove-user-tag|versions|safe-upgrade)
               COMPREPLY=( $( apt-cache pkgnames $cur 2> /dev/null ) )
               return 0
               ;;
           purge|remove|reinstall|forbid-version)
               COMPREPLY=( \
                   $( _xfunc dpkg _comp_dpkg_installed_packages "$cur" ) )
               return 0
               ;;
           unhold)
               COMPREPLY=( $( _comp_dpkg_hold_packages "$cur" ) )
               return 0
               ;;
       esac
    fi

    case $prev in
        # don't complete anything if these options are found
        autoclean|clean|forget-new|search|upgrade|update|keep-all)
            return 0
            ;;
        -S)
            _filedir
            return 0
            ;;
        -t|--target-release|--default-release)
            COMPREPLY=( $( apt-cache policy | \
                command grep "release.o=Debian,a=$cur" | \
                sed -e "s/.*a=\(\w*\).*/\1/" | uniq 2> /dev/null ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W "$dashoptions" -- "$cur" ) )
    else
        COMPREPLY=( $( compgen -W 'update upgrade safe-upgrade forget-new
            clean autoclean install reinstall remove hold unhold purge markauto
            unmarkauto why why-not dist-upgrade full-upgrade download search
            show forbid-version changelog keep-all build-dep add-user-tag
            remove-user-tag versions' -- "$cur" ) )
    fi

    return 0
} &&
complete -F _aptitude -o default aptitude

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # mailman arch completion                                  -*- shell-script -*-

# Try to detect whether this is the mailman "arch" to avoid installing
# it for the coreutils/util-linux-ng one.
_have mailmanctl &&
_arch()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -w|-g|-d|--welcome-msg|--goodbye-msg|--digest)
            COMPREPLY=( $( compgen -W 'y n' -- "$cur" ) )
            return 0
            ;;
        -d|--file)
            _filedir
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--wipe --start --end --quiet --help' \
            -- "$cur" ) )
    else
        local args=$cword
        for (( i=1; i < cword; i++ )); do
            if [[ "${words[i]}" == -* ]]; then
                args=$(($args-1))
            fi
        done
        case $args in
            1)
                _xfunc list_lists _mailman_lists
                ;;
            2)
                _filedir
                ;;
        esac
    fi

} &&
complete -F _arch arch

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # arping(8) completion                                     -*- shell-script -*-

_arping()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -c|-w)
            return
            ;;
        -I)
            _available_interfaces -a
            return
            ;;
        -s)
            _ip_addresses
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -h )' -- "$cur" ) )
        return
    fi

    _known_hosts_real "$cur"
} &&
complete -F _arping arping

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # arpspoof completion                                      -*- shell-script -*-

_arpspoof()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -i)
            _available_interfaces -a
            return 0
            ;;
        -t)
            _known_hosts_real "$cur"
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
    else
        _known_hosts_real "$cur"
    fi

} &&
complete -F _arpspoof arpspoof

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # asciidoc(1) completion                                   -*- shell-script -*-

_asciidoc_doctype()
{
    COMPREPLY+=( $( compgen -W 'article book manpage' -- "$cur" ) )
}

_asciidoc()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --attribute|-a)
            return
            ;;
        --backend|-b)
            COMPREPLY=( $( compgen -W 'docbook html4 xhtml11' -- "$cur" ) )
            return
            ;;
        --conf-file|-f)
            _filedir conf
            return
            ;;
        --doctype|-d)
            _asciidoc_doctype
            return
            ;;
        --help|-h)
            COMPREPLY=( $( compgen -W 'manpage syntax topics' -- "$cur" ) )
            return
            ;;
        --out-file|-o)
            _filedir
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" "--help manpage" )' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir
} &&
complete -F _asciidoc asciidoc asciidoc.py

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # bash completion for aspell                               -*- shell-script -*-

_aspell_dictionary()
{
    local datadir
    datadir=$( aspell config data-dir 2>/dev/null || echo /usr/lib/aspell )
    # First, get aliases (dicts dump does not list them)
    COMPREPLY=( $( command ls $datadir/*.alias 2>/dev/null ) )
    COMPREPLY=( ${COMPREPLY[@]%.alias} )
    COMPREPLY=( ${COMPREPLY[@]#$datadir/} )
    # Then, add the canonical dicts
    COMPREPLY+=( $( aspell dicts 2>/dev/null ) )
    COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
}

_aspell()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -c|-p|check|--conf|--personal|--repl|--per-conf)
            _filedir
            return 0
            ;;
        --conf-dir|--data-dir|--dict-dir|--home-dir|--local-data-dir|--prefix)
            _filedir -d
            return 0
            ;;
        dump|create|merge)
            COMPREPLY=( $( compgen -W 'master personal repl' -- "$cur" ) )
            return 0
            ;;
        --mode)
            COMPREPLY=( $( compgen -W "$( $1 modes 2>/dev/null | \
                awk '{ print $1 }' )" -- "$cur" ) )
            return 0
            ;;
        --sug-mode)
            COMPREPLY=( $( compgen -W 'ultra fast normal bad-speller' \
                -- "$cur" ) )
            return 0
            ;;
        --keymapping)
            COMPREPLY=( $( compgen -W 'aspell ispell' -- "$cur" ) )
            return 0
            ;;
        -d|--master)
            _aspell_dictionary
            return 0
            ;;
        --add-filter|--rem-filter)
            COMPREPLY=( $( compgen -W "$( $1 filters 2>/dev/null | \
                awk '{ print $1 }' )" -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--conf= --conf-dir= --data-dir= --dict-dir=
            --encoding= --add-filter= --rem-filter= --mode= --add-extra-dicts=
            --rem-extra-dicts= --home-dir= --ignore= --ignore-accents
            --dont-ignore-accents --ignore-case --dont-ignore-case
            --ignore-repl --dont-ignore-repl --jargon --keyboard= --lang=
            --language-tag --local-data-dir= --master= --module
            --add-module-search-order --rem-module-search-order --per-conf=
            --personal= --prefix= --repl= --run-together --dont-run-together
            --run-together-limit= --run-together-min= --save-repl
            --dont-save-repl --set-prefix --dont-set-prefix --size= --spelling
            --strip-accents --dont-strip-accents --sug-mode=
            --add-word-list-path --rem-word-list-path --backup --dont-backup
            --reverse --dont-reverse --time --dont-time --keymapping=
            --add-email-quote= --rem-email-quote= --email-margin=
            --add-tex-command= --rem-tex-command= --tex-check-comments
            --dont-tex-check-comments --add-tex-extension --rem-tex-extension
            --add-sgml-check= --rem-sgml-check= --add-sgml-extension
            --rem-sgml-extension' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    else
        COMPREPLY=( $( compgen -W 'usage help check pipe list config soundslike
            filter version dump create merge' -- "$cur" ) )
    fi
} &&
complete -F _aspell aspell

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # autoconf(1) completion                                   -*- shell-script -*-

_autoconf()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        --help|-h|--version|-V|--trace|-t)
            return 0
            ;;
        --output|-o)
            _filedir
            return 0
            ;;
        --warnings|-W)
            local cats=( cross obsolete syntax )
            COMPREPLY=( $( compgen -W \
                '${cats[@]} ${cats[@]/#/no-} all none error' -- "$cur" ) )
            return 0
            ;;
        --prepend-include|-B|--include|-I)
            _filedir -d
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir '@(ac|in)'
} &&
complete -F _autoconf autoconf

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # automake(1) completion                                   -*- shell-script -*-

_automake()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        --help|--version)
            return 0
            ;;
        --warnings|-W)
            local cats=( gnu obsolete override portability syntax unsupported )
            COMPREPLY=( $( compgen -W \
                '${cats[@]} ${cats[@]/#/no-} all none error' -- "$cur" ) )
            return 0
            ;;
        --libdir)
            _filedir -d
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir
} &&
complete -F _automake automake automake-1.11

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # autoreconf(1) completion                                 -*- shell-script -*-

_autoreconf()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        --help|-h|--version|-V)
            return 0
            ;;
        --warnings|-W)
            local cats=( cross gnu obsolete override portability syntax \
                unsupported )
            COMPREPLY=( $( compgen -W \
                '${cats[@]} ${cats[@]/#/no-} all none error' -- "$cur" ) )
            return 0
            ;;
        --prepend-include|-B|--include|-I)
            _filedir -d
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi

    if [[ $1 == autoheader ]] ; then
        _filedir '@(ac|in)'
    else
        _filedir -d
    fi
} &&
complete -F _autoreconf autoreconf autoheader

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # autorpm(8) completion                                    -*- shell-script -*-

_autorpm()
{
    local cur prev words cword
    _init_completion || return

    COMPREPLY=( $( compgen -W '--notty --debug --help --version auto add
        fullinfo info help install list remove set' -- "$cur" ) )

} &&
complete -F _autorpm autorpm

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # autoscan(1) completion                                   -*- shell-script -*-

_autoscan()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        --help|-h|--version|-V)
            return 0
            ;;
        --prepend-include|-B|--include|-I)
            _filedir -d
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi

    if [[ $1 == autoupdate ]] ; then
        _filedir '@(ac|in)'
    else
        _filedir -d
    fi
} &&
complete -F _autoscan autoscan autoupdate

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # avctrl completion                                        -*- shell-script -*-

_avctrl()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--help --quiet' -- "$cur" ) )
    else
        local args
        _count_args
        if [[ $args -eq 1 ]]; then
            COMPREPLY=( $( compgen -W 'discover switch' -- "$cur" ) )
        fi
    fi
} &&
complete -F _avctrl avctrl

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # badblocks(8) completion                                  -*- shell-script -*-

_badblocks()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -b|-c|-e|-d|-p|-t)
            return 0
            ;;
        -i|-o)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        # Filter out -w (dangerous) and -X (internal use)
        for i in ${!COMPREPLY[@]}; do
            [[ ${COMPREPLY[i]} == -[wX] ]] && unset COMPREPLY[i]
        done
        return 0
    fi

    cur=${cur:=/dev/}
    _filedir
} &&
complete -F _badblocks badblocks

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # BitKeeper completion                                     -*- shell-script -*-
# adapted from code by  Bart Trojanowski <bart@jukie.net>

_bk()
{
    local cur prev words cword
    _init_completion || return

    local BKCMDS="$( bk help topics 2>/dev/null | \
        awk '/^  bk/ { print $4 }' | xargs printf '%s ' )"

    COMPREPLY=( $( compgen -W "$BKCMDS" -- "$cur" ) )
    _filedir

    return 0
} &&
complete -F _bk bk

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     _blkdiscard_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-o'|'--offset'|'-l'|'--length')
			COMPREPLY=( $(compgen -W "num" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--offset --length --secure --verbose --help --version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$(lsblk -pnro name)" -- $cur) )
	return 0
}
complete -F _blkdiscard_module blkdiscard
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     _blkid_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-c')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
		'-o')
			COMPREPLY=( $(compgen -W "value device export full" -- $cur) )
			return 0
			;;
		'-s')
			COMPREPLY=( $(compgen -W "tag" -- $cur) )
			return 0
			;;
		'-t')
			COMPREPLY=( $(compgen -W "token" -- $cur) )
			return 0
			;;
		'-L')
			COMPREPLY=( $(compgen -W "$(cd /dev/disk/by-label/ 2>/dev/null && echo *)" -- $cur) )
			return 0
			;;
		'-U')
			COMPREPLY=( $(compgen -W "$(cd /dev/disk/by-uuid/ 2>/dev/null && echo *)" -- $cur) )
			return 0
			;;
		'-s')
			COMPREPLY=( $(compgen -W "size" -- $cur) )
			return 0
			;;
		'-O')
			COMPREPLY=( $(compgen -W "offset" -- $cur) )
			return 0
			;;
		'-u')
			COMPREPLY=( $(compgen -W "filesystem raid crypto other nofilesystem noraid nocrypto noother" -- $cur) )
			return 0
			;;
		'-n')
			COMPREPLY=( $(compgen -W "$(awk '{print $NF}' /proc/filesystems)" -- $cur) )
			return 0
			;;
		'-h'|'-V')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="-c -d -h -g -o -k -s -t -l -L -U -V -p -i -S -O -u -n"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$(lsblk -pnro name)" -- $cur) )
	return 0
}
complete -F _blkid_module blkid
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             _blockdev_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	DEVS="$(lsblk -pnro name)"
	OPTS="-h -V -q
		--report
		--getsz
		--setro
		--setrw
		--getro
		--getdiscardzeroes
		--getss
		--getpbsz
		--getiomin
		--getioopt
		--getalignoff
		--getmaxsect
		--getbsz
		--setbsz
		--getsize64
		--setra
		--getra
		--setfra
		--getfra
		--flushbufs
		--rereadpt
		$DEVS"
	case $prev in
		'--setbsz')
			COMPREPLY=( $(compgen -W "bytes" -- $cur) )
			return 0
			;;
		'--setbsz'|'--setfra')
			COMPREPLY=( $(compgen -W "sectors" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
	return 0
}
complete -F _blockdev_module blockdev
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # bootctl(1) completion                               -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2014 Thomas H.P. Andersen
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local w word=$1; shift
        for w in "$@"; do
                [[ $w = "$word" ]] && return
        done
}

_bootctl() {
        local i verb comps
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local -A OPTS=(
               [STANDALONE]='-h --help --version'
        )

        if [[ "$cur" = -* ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
                return 0
        fi

        local -A VERBS=(
                [STANDALONE]='status'
        )

        for ((i=0; i < COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]}; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        if [[ -z $verb ]]; then
                comps=${VERBS[*]}
        elif __contains_word "$verb" ${VERBS[STANDALONE]}; then
                comps=''
        fi

        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
}

complete -F _bootctl bootctl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # bash completion for brctl                                -*- shell-script -*-

_brctl()
{
    local cur prev words cword
    _init_completion || return

    local command=${words[1]}

    case $cword in
        1)
            COMPREPLY=( $( compgen -W "addbr delbr addif delif setageing
                setbridgeprio setfd sethello setmaxage setpathcost setportprio
                show showmacs showstp stp" -- "$cur" ) )
            ;;
        2)
            case $command in
                show)
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "$(brctl show | \
                        awk 'NR>1 {print $1}' )" -- "$cur" ) )
            esac
            ;;
        3)
            case $command in
                addif|delif)
                    _configured_interfaces
                    ;;
                stp)
                    COMPREPLY=( $( compgen -W 'on off' -- "$cur" ) )
                    ;;
            esac
            ;;
    esac
} &&
complete -F _brctl -o default brctl

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # btdownloadheadless(1) completion                         -*- shell-script -*-

_btdownload()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --responsefile|--saveas)
            _filedir
            return 0
            ;;
    esac

     if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--max_uploads --keepalive_interval
            --download_slice_size --request_backlog --max_message_length
            --ip --minport --maxport --responsefile --url --saveas --timeout
            --timeout_check_interval --max_slice_length --max_rate_period
            --bind --upload_rate_fudge --display_interval --rerequest_interval
            --min_peers --http_timeout --max_initiate --max_allow_in
            --check_hashes --max_upload_rate --snub_time --spew
            --rarest_first_cutoff --min_uploads --report_hash_failures' \
            -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _btdownload btdownloadheadless.py btdownloadcurses.py \
    btdownloadgui.py

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # busctl(1) completion                               -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2013 Zbigniew Jędrzejewski-Szmek
# Copyright 2014 Thomas H.P. Andersen
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local w word=$1; shift
        for w in "$@"; do
                [[ $w = "$word" ]] && return
        done
}

__get_machines() {
        local a b
        machinectl list --no-legend --no-pager | { while read a b; do echo " $a"; done; };
}

__get_busnames() {
        local mode=$1
        local a b
        busctl $mode list --no-legend --no-pager | { while read a b; do echo " $a"; done; };
}

__get_objects() {
        local mode=$1
        local busname=$2
        local a b
        busctl $mode tree --list --no-legend --no-pager $busname | { while read a b; do echo " $a"; done; };
}

__get_interfaces() {
        local mode=$1
        local busname=$2
        local path=$3
        local a b
        busctl $mode introspect --list --no-legend --no-pager $busname $path | { while read a b c; do [[ "$b" == "interface" ]] && echo " $a"; done; };
}

__get_members() {
        local mode=$1
        local busname=$2
        local path=$3
        local interface=$4
        local type=$5
        local a b
        busctl $mode introspect --list --no-legend --no-pager $busname $path $interface | sed -e 's/^\.//' | { while read a b c; do [[ "$b" == "$type" ]] && echo " $a"; done; };
}

__get_signature() {
        local mode=$1
        local busname=$2
        local path=$3
        local interface=$4
        local member=$5
        local a b
        busctl $mode introspect --list --no-legend --no-pager $busname $path $interface | sed -e 's/^\.//' | { while read a b c d; do [[ "$a" == "$member" ]] && echo " \"$c\""; done; };
}

_busctl() {
        local i verb comps mode
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local -A OPTS=(
               [STANDALONE]='-h --help --version --no-pager --no-legend --system --user
                             --show-machine --unique --acquired --activatable --list
                             --quiet --verbose --expect-reply=no --auto-start=no
                             --allow-interactive-authorization=yes --augment-creds=no'
                      [ARG]='-H --host -M --machine --address --match --timeout'
        )

        if __contains_word "--user" ${COMP_WORDS[*]}; then
                mode=--user
        else
                mode=--system
        fi

        if __contains_word "$prev" ${OPTS[ARG]}; then
                case $prev in
                        --host|-H)
                                comps=$(compgen -A hostname)
                        ;;
                        --machine|-M)
                                comps=$( __get_machines )
                esac
                COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
                return 0
        fi

        if [[ "$cur" = -* ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
                return 0
        fi

        local -A VERBS=(
                [STANDALONE]='list help'
                [BUSNAME]='status monitor capture tree'
                [OBJECT]='introspect'
                [METHOD]='call'
                [PROPERTY_GET]='get-property'
                [PROPERTY_SET]='set-property'
        )

        for ((i=0; i < COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]} &&
                 ! __contains_word "${COMP_WORDS[i-1]}" ${OPTS[ARG]}; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        n=$(($COMP_CWORD - $i))

        if [[ -z $verb ]]; then
                comps=${VERBS[*]}
        elif __contains_word "$verb" ${VERBS[STANDALONE]}; then
                comps=''
        elif __contains_word "$verb" ${VERBS[BUSNAME]}; then
                comps=$( __get_busnames $mode)
        elif __contains_word "$verb" ${VERBS[OBJECT]}; then
                if [[ $n -eq 1 ]] ; then
                        comps=$( __get_busnames $mode)
                elif [[ $n -eq 2 ]] ; then
                        comps=$( __get_objects $mode ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 3 ]] ; then
                        comps=$( __get_interfaces $mode ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]})
                else
                        comps=''
                fi
        elif __contains_word "$verb" ${VERBS[METHOD]}; then
                if [[ $n -eq 1 ]] ; then
                        comps=$( __get_busnames $mode)
                elif [[ $n -eq 2 ]] ; then
                        comps=$( __get_objects $mode ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 3 ]] ; then
                        comps=$( __get_interfaces $mode ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 4 ]] ; then
                        comps=$( __get_members $mode ${COMP_WORDS[COMP_CWORD-3]} ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]} method)
                elif [[ $n -eq 5 ]] ; then
                        comps=$( __get_signature $mode ${COMP_WORDS[COMP_CWORD-4]} ${COMP_WORDS[COMP_CWORD-3]} ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]})
                else
                        comps=''
                fi
        elif __contains_word "$verb" ${VERBS[PROPERTY_GET]}; then
                if [[ $n -eq 1 ]] ; then
                        comps=$( __get_busnames $mode)
                elif [[ $n -eq 2 ]] ; then
                        comps=$( __get_objects $mode ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 3 ]] ; then
                        comps=$( __get_interfaces $mode ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 4 ]] ; then
                        comps=$( __get_members $mode ${COMP_WORDS[COMP_CWORD-3]} ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]} property)
                else
                        comps=''
                fi
        elif __contains_word "$verb" ${VERBS[PROPERTY_SET]}; then
                if [[ $n -eq 1 ]] ; then
                        comps=$( __get_busnames $mode)
                elif [[ $n -eq 2 ]] ; then
                        comps=$( __get_objects $mode ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 3 ]] ; then
                        comps=$( __get_interfaces $mode ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]})
                elif [[ $n -eq 4 ]] ; then
                        comps=$( __get_members $mode ${COMP_WORDS[COMP_CWORD-3]} ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]} property)
                elif [[ $n -eq 5 ]] ; then
                        comps=$( __get_signature $mode ${COMP_WORDS[COMP_CWORD-4]} ${COMP_WORDS[COMP_CWORD-3]} ${COMP_WORDS[COMP_CWORD-2]} ${COMP_WORDS[COMP_CWORD-1]})
                else
                        comps=''
                fi
        fi

        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
}

complete -F _busctl busctl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # bash completion for bzip2                                -*- shell-script -*-

_bzip2()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -b|-h|--help|-p)
            return 0
            ;;
        -n)
            COMPREPLY=( $( compgen -W "{1..$(_ncpus)}" -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        local helpopts=$( _parse_help "$1" )
        COMPREPLY=( $( compgen -W "${helpopts//#/} -2 -3 -4 -5 -6 -7 -8 -9" \
            -- "$cur" ) )
        return 0
    fi

    local IFS=$'\n' xspec="*.bz2"

    if [[ "$prev" == --* ]]; then
        [[ "$prev" == --decompress || \
            "$prev" == --list || \
            "$prev" == --test ]] && xspec="!"$xspec
        [[ "$prev" == --compress ]] && xspec=
    elif [[ "$prev" == -* ]]; then
        [[ "$prev" == -*[dt]* ]] && xspec="!"$xspec
        [[ "$prev" == -*z* ]] && xspec=
    fi

    _expand || return 0

    compopt -o filenames
    COMPREPLY=( $( compgen -f -X "$xspec" -- "$cur" ) \
        $( compgen -d -- "$cur" ) )
} &&
complete -F _bzip2 bzip2 pbzip2 lbzip2

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # cal(1) completion                                        -*- shell-script -*-

_cal()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -m)
            if [[ $OSTYPE == *bsd* ]]; then
                COMPREPLY=( $( compgen -W '{1..12}' -- "$cur" ) )
                return
            fi
            ;;
        -s)
            [[ $OSTYPE == *bsd* ]] && return
            ;;
        -A|-B|-d|-H)
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        return
    fi

    local args
    _count_args
    [[ $args -eq 1 ]] && COMPREPLY=( $( compgen -W '{1..12}' -- "$cur" ) )
} &&
complete -F _cal cal ncal

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # cancel(1) completion                                     -*- shell-script -*-

_cancel()
{
    local cur prev words cword
    _init_completion || return

    COMPREPLY=( $( compgen -W "$( lpstat 2>/dev/null | cut -d' ' -f1 )" -- "$cur" ) )
} &&
complete -F _cancel cancel

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # Linux cardctl(8) completion                              -*- shell-script -*-

_cardctl()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W 'status config ident suspend resume reset
            eject insert scheme' -- "$cur" ) )
    fi
} &&
complete -F _cardctl cardctl pccardctl

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # ccache(1) completion                                     -*- shell-script -*-

_ccache()
{
    local cur prev words cword split
    _init_completion -s || return

    if [[ $COMP_CWORD -eq 1 && ${COMP_WORDS[COMP_CWORD]} != -* ]]; then
        _command_offset 1
        return
    fi

    case $prev in
        -h|--help|-V|--version|-F|--max-files|-M|--max-size)
            return
            ;;
    esac

    $split && return

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _ccache ccache

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # cfagent completion                                       -*- shell-script -*-

_cfagent()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -f|--file)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    fi
} &&
complete -F _cfagent cfagent

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          _cfdisk_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-L'|'--color')
			COMPREPLY=( $(compgen -W "auto never always" -- $cur) )
			return 0
			;;
		'-V'|'--version'|'h'|'--help')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="	--color
				--zero
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$(lsblk -pnro name)" -- $cur) )
	return 0
}
complete -F _cfdisk_module cfdisk
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # cfrun completion                                         -*- shell-script -*-

_cfrun()
{
    local cur prev words cword
    _init_completion || return

    local i section=1
    for (( i=1; i < cword; i++ )); do
        if [[ "${words[i]}" == -- ]]; then
            section=$((section + 1))
        fi
    done

    case $section in
        1)
            case $prev in
                -f)
                    _filedir
                    return 0
                    ;;
            esac

            if [[ "$cur" == -* ]]; then
                COMPREPLY=( $( compgen -W '-f -h -d -S -T -v' -- "$cur" ) )
            else
                hostfile=${CFINPUTS:-/var/lib/cfengine/inputs}/cfrun.hosts
                for (( i=1; i < cword; i++ )); do
                    if [[ "${words[i]}" == -f ]]; then
                        hostfile=${words[i+1]}
                        break
                    fi
                done
                [[ ! -f $hostfile ]] && return 0

                COMPREPLY=( $(compgen -W  "$( command grep -v \
                    -E '(=|^$|^#)' $hostfile )" -- "$cur" ) )
            fi
            ;;
        2)
            COMPREPLY=( $( compgen -W '$( _parse_help cfagent )' -- "$cur" ) )
            ;;
    esac
} &&
complete -F _cfrun cfrun

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # chage(1) completion                                      -*- shell-script -*-

_chage()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -d|--lastday|-E|--expiredate|-h|--help|-I|--inactive|-m|--mindays|\
        -M|--maxdays|-W|--warndays)
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

    COMPREPLY=( $( compgen -u -- "$cur" ) )
} &&
complete -F _chage chage

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # mailman change_pw completion                             -*- shell-script -*-

_change_pw()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -l|--listname)
            _xfunc list_lists _mailman_lists
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--all --domain --listname --password --quiet
            --help' -- "$cur" ) )
    fi

} &&
complete -F _change_pw change_pw

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            _chcpu_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-e'|'--enable')
			local prefix realcur CPULIST_ALL CPULIST
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			CPULIST_ALL=$(sed 's/^/{/; s/-/../g; s/,/} {/g; s/$/}/' /sys/devices/system/cpu/offline)
			for WORD in $(eval echo $CPULIST_ALL); do
				if ! [[ $prefix == *"$WORD"* ]]; then
					CPULIST="$WORD $CPULIST"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$CPULIST" -S ',' -- $realcur) )
			return 0
			;;
		'-d'|'--disable')
			local prefix realcur CPULIST_ALL CPULIST
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			CPULIST_ALL=$(sed 's/^/{/; s/-/../g; s/,/} {/g; s/$/}/' /sys/devices/system/cpu/online)
			for WORD in $(eval echo $CPULIST_ALL); do
				if ! [[ $prefix == *"$WORD"* ]]; then
					CPULIST="$WORD $CPULIST"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$CPULIST" -S ',' -- $realcur) )
			return 0
			;;
		'-c'|'--configure'|'-g'|'--deconfigure')
			COMPREPLY=( $(compgen -W "cpu-list" -- $cur) )
			return 0
			;;
		'-p'|'--dispatch')
			COMPREPLY=( $(compgen -W "horizontal vertical" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	OPTS="--help
		--enable
		--disable
		--configure
		--deconfigure
		--dispatch
		--rescan
		--version"
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
	return 0
}
complete -F _chcpu_module chcpu
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # mailman check_db completion                              -*- shell-script -*-

_check_db()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--all --verbose --help' -- "$cur" ) )
    else
        _xfunc list_lists _mailman_lists
    fi

} &&
complete -F _check_db check_db

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # mailman check_perms completion                           -*- shell-script -*-

_check_perms()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-f -v -h' -- "$cur" ) )
    fi

} &&
complete -F _check_perms check_perms

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # chgrp(1) completion                                      -*- shell-script -*-

_chgrp()
{
    local cur prev words cword split
    _init_completion -s || return

    cur=${cur//\\\\/}

    if [[ "$prev" == --reference ]]; then
        _filedir
        return 0
    fi

    $split && return 0

    # options completion
    if [[ "$cur" == -* ]]; then
        local w opts
        for w in "${words[@]}" ; do
            [[ "$w" == -@(R|-recursive) ]] && opts="-H -L -P" && break
        done
        COMPREPLY=( $( compgen -W '-c -h -f -R -v --changes --dereference
            --no-dereference --silent --quiet --reference --recursive --verbose
            --help --version $opts' -- "$cur" ) )
        return 0
    fi

    # first parameter on line or first since an option?
    if [[ $cword -eq 1 && "$cur" != -* || "$prev" == -* ]]; then
        _allowed_groups "$cur"
    else
        _filedir || return 0
    fi

    return 0
} &&
complete -F _chgrp chgrp

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # chkconfig(8) completion                                  -*- shell-script -*-

_chkconfig()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --level=[1-6]|[1-6]|--list|--add|--del|--override)
            _services
            _xinetd_services
            return 0
            ;;
        --level)
            COMPREPLY=( $( compgen -W '{1..6}' -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--list --add --del --override --level' \
            -- "$cur" ) )
    else
        if [[ $cword -eq 2 || $cword -eq 4 ]]; then
            COMPREPLY=( $( compgen -W 'on off reset resetpriorities' \
                -- "$cur" ) )
        else
            _services
            _xinetd_services
        fi
    fi
} &&
complete -F _chkconfig chkconfig

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # chown(1) completion                                      -*- shell-script -*-

_chown()
{
    local cur prev words cword split
    # Don't treat user:group as separate words.
    _init_completion -s -n : || return

    case "$prev" in
        --from)
            _usergroup
            return 0
            ;;
        --reference)
            _filedir
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        # Complete -options
        local w opts
        for w in "${words[@]}" ; do
            [[ "$w" == -@(R|-recursive) ]] && opts="-H -L -P" && break
        done
        COMPREPLY=( $( compgen -W '-c -h -f -R -v --changes --dereference
            --no-dereference --from --silent --quiet --reference --recursive
            --verbose --help --version $opts' -- "$cur" ) )
    else
        local args

        # The first argument is an usergroup; the rest are filedir.
        _count_args :

        if [[ $args -eq 1 ]]; then
            _usergroup -u
        else
            _filedir
        fi
    fi
} &&
complete -F _chown chown

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # chpasswd(8) completion                                   -*- shell-script -*-

_chpasswd()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -c|--crypt)
            COMPREPLY=( $( compgen -W 'DES MD5 NONE SHA256 SHA512' \
                -- "$cur" ) )
            return 0
            ;;
        -s|--sha-rounds)
            return 0
            ;;
    esac

    $split && return 0

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _chpasswd chpasswd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # chronyc(1) completion                                    -*- shell-script -*-

_chronyc()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --help|-p)
            return
            ;;
        -h)
            _known_hosts_real "$cur"
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        return
    fi

    local i args=0
    for (( i=1; i < cword; i++ )); do
        [[ ${words[i]} != -* && ${words[i-1]} != @(-p|-h) ]] && (( args++ ))
    done
    
    case $args in
        0)
            COMPREPLY=( $( compgen -W "$( $1 help 2>/dev/null | \
                awk 'NR > 1 { sub("\\|", " ", $1); print $1 }' )" -- "$cur" ) )
            ;;
        1)
            case $prev in
                accheck|cmdaccheck|delete|maxdelay|maxdelayratio|\
                maxdelaydevratio|maxpoll|minpoll|minstratum|polltarget)
                    _known_hosts_real "$cur"
                    ;;
                add)
                    COMPREPLY=( $( compgen -W 'peer server' -- "$cur" ) )
                    ;;
                allow|cmdallow|cmddeny|deny)
                    COMPREPLY=( $( compgen -W 'all' -- "$cur" ) )
                    ;;
                authhash)
                    COMPREPLY=( $( compgen -W 'MD5 SHA1' -- "$cur" ) )
                    ;;
                dns)
                    COMPREPLY=( $( compgen -W '-n +n -4 -6 -46' -- "$cur" ) )
                    ;;
                local)
                    COMPREPLY=( $( compgen -W 'off stratum' -- "$cur" ) )
                    ;;
                manual)
                    COMPREPLY=( $( compgen -W 'list on off reset' -- "$cur" ) )
                    ;;
                sources|sourcestats)
                    COMPREPLY=( $( compgen -W '-v' -- "$cur" ) )
                    ;;
            esac
            ;;
        2)
            [[ $prev == @(peer|server) ]] && _known_hosts_real "$cur"
            ;;
    esac
} &&
complete -F _chronyc chronyc

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # chrpath(1) completion                                    -*- shell-script -*-

_chrpath()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -v|--version|-h|--help)
            return
            ;;
        -r|--replace)
            _filedir -d
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return
    fi

    _filedir
} &&
complete -F _chrpath chrpath

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         _chrt_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
		'-T'|'--sched-runtime'|'-P'|'--sched-period'|'-D'|'--sched-deadline')
			COMPREPLY=( $(compgen -W "nanoseconds" -- $cur) )
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="
				--all-tasks
				--batch
				--deadline
				--fifo
				--help
				--idle
				--max
				--other
				--pid
				--reset-on-fork
				--rr
				--sched-deadline
				--sched-period
				--sched-runtime
				--verbose
				--version
			"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local i
	for i in ${COMP_WORDS[*]}; do
		case $i in
		'-p'|'--pid')
			COMPREPLY=( $(compgen -W "$(cd /proc && echo [0-9]*)" -- $cur) )
			return 0
			;;
		esac
	done
	COMPREPLY=( $(compgen -c -- $cur) )
	return 0
}
complete -F _chrt_module chrt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # chsh(1) completion                                       -*- shell-script -*-

_chsh()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --list-shells|--help|-v|--version)
            return 0
            ;;
        -s|--shell)
            _shells
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
    else
        _allowed_users
    fi

    return 0
} &&
complete -F _chsh chsh

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # cksfv completion by Chris <xris@forevermore.net>         -*- shell-script -*-

_cksfv()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

    case "$prev" in
        -C|-g)
            _filedir -d
            return 0
            ;;
        -f)
            _filedir 'sfv'
            return 0
            ;;
    esac

    _filedir
    return 0
} &&
complete -F _cksfv cksfv

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # mailman cleanarch completion                             -*- shell-script -*-

_cleanarch()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--status --dry-run --quiet --help' \
            -- "$cur" ) )
    fi

} &&
complete -F _cleanarch cleanarch

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #                                                          -*- shell-script -*-
# bash brogrammable completion for various Common Lisp implementations by
# Nikodemus Siivola <nikodemus@random-state.net>

_clisp()
{
    local cur prev words cword
    _init_completion || return

    # completing an option (may or may not be separated by a space)
    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-h --help --version --license -B -K -M -m -L
            -N -E -q --quiet --silent -w -I -ansi -traditional -p -C -norc -i
            -c -l -o -x ' -- "$cur" ) )
    else
        _filedir
    fi

    return 0
} &&
complete -F _clisp -o default clisp

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # mailman clone_member completion                          -*- shell-script -*-

_clone_member()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -l|--listname)
            _xfunc list_lists _mailman_lists
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--listname --remove --admin --quiet
            --nomodify --help' -- "$cur" ) )
    fi

} &&
complete -F _clone_member clone_member

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # bash complete completion                                 -*- shell-script -*-

_complete()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -o)
            COMPREPLY=( $( compgen -W 'bashdefault default dirnames filenames
                nospace plusdirs' -- "$cur" ) )
            return 0
            ;;

        -A)
            COMPREPLY=( $( compgen -W 'alias arrayvar binding builtin command
                directory disabled enabled export file function group helptopic
                hostname job keyword running service setopt shopt signal
                stopped user variable' -- "$cur" ) )
            return 0
            ;;

        -C)
            COMPREPLY=( $( compgen -A command -- "$cur" ) )
            return 0
            ;;
        -F)
            COMPREPLY=( $( compgen -A function -- "$cur" ) )
            return 0
            ;;
        -p|-r)
            COMPREPLY=( $( complete -p | sed -e 's|.* ||' ) )
            COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
            return 0
            ;;

    esac

    if [[ "$cur" == -* ]]; then
        # relevant options completion
        local opts="-a -b -c -d -e -f -g -j -k -o -s -u -v -A -G -W -P -S -X"
        [[ $1 != compgen ]] && opts+=" -F -C"
        COMPREPLY=( $( compgen -W "$opts" -- "$cur" ) )
    else
        COMPREPLY=( $( compgen -A command -- "$cur" ) )
    fi
} &&
complete -F _complete compgen complete

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # mailman config_list completion                           -*- shell-script -*-

_config_list()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -i|-o|--inputfile|--outputfile)
            _filedir
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--inputfile --outputfile --checkonly
            --verbose --help' -- "$cur" ) )
    else
        _xfunc list_lists _mailman_lists
    fi

} &&
complete -F _config_list config_list

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # bash completion for configure                            -*- shell-script -*-

_configure()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -h|--help|-V|--version|--program-prefix|--program-suffix|\
        --program-transform-name)
            return
            ;;
        --*file)
            _filedir
            return
            ;;
        --*prefix|--*dir)
            _filedir -d
            return
            ;;
    esac

    $split && return 0

    # if $COMP_CONFIGURE_HINTS is not null, then completions of the form
    # --option=SETTING will include 'SETTING' as a contextual hint
    [[ "$cur" != -* ]] && return 0

    if [[ -n $COMP_CONFIGURE_HINTS ]]; then
        COMPREPLY=( $( compgen -W "$( $1 --help 2>&1 | \
            awk '/^  --[A-Za-z]/ { print $1; \
            if ($2 ~ /--[A-Za-z]/) print $2 }' | sed -e 's/[[,].*//g' )" \
            -- "$cur" ) )
        [[ $COMPREPLY == *=* ]] && compopt -o nospace
    else
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    fi
} &&
complete -F _configure configure

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # bash completion for ImageMagick                          -*- shell-script -*-

_ImageMagick()
{
    case $prev in
        -channel)
            COMPREPLY=( $( compgen -W 'Red Green Blue Opacity Matte Cyan
                Magenta Yellow Black' -- "$cur" ) )
            return 0
            ;;
        -colormap)
            COMPREPLY=( $( compgen -W 'shared private' -- "$cur" ) )
            return 0
            ;;
        -colorspace)
            COMPREPLY=( $( compgen -W 'GRAY OHTA RGB Transparent XYZ YCbCr YIQ
                YPbPr YUV CMYK' -- "$cur" ) )
            return 0
            ;;
        -compose)
            COMPREPLY=( $( compgen -W 'Over In Out Atop Xor Plus Minus Add
                Subtract Difference Multiply Bumpmap Copy CopyRed CopyGreen
                CopyBlue CopyOpacity' -- "$cur" ) )
            return 0
            ;;
        -compress)
            COMPREPLY=( $( compgen -W 'None BZip Fax Group4 JPEG Lossless LZW
                RLE Zip' -- "$cur" ) )
            return 0
            ;;
        -dispose)
            COMPREPLY=( $( compgen -W 'Undefined None Background Previous' \
                -- "$cur" ) )
            return 0
            ;;
        -encoding)
            COMPREPLY=( $( compgen -W 'AdobeCustom AdobeExpert AdobeStandard
                AppleRoman BIG5 GB2312 Latin2 None SJIScode Symbol Unicode
                Wansung' -- "$cur" ) )
            return 0
            ;;
        -endian)
            COMPREPLY=( $( compgen -W 'MSB LSB' -- "$cur" ) )
            return 0
            ;;
        -filter)
            COMPREPLY=( $( compgen -W 'Point Box Triangle Hermite Hanning
                Hamming Blackman Gaussian Quadratic Cubic Catrom Mitchell
                Lanczos Bessel Sinc' -- "$cur" ) )
            return 0
            ;;
        -format)
            COMPREPLY=( $( compgen -W "$( convert -list format | awk \
                '/ [r-][w-][+-] / { sub("[*]$","",$1); print tolower($1) }' )" \
                -- "$cur" ) )
            return 0
            ;;
        -gravity)
            COMPREPLY=( $( compgen -W 'Northwest North NorthEast West Center
                East SouthWest South SouthEast' -- "$cur" ) )
            return 0
            ;;
        -intent)
            COMPREPLY=( $( compgen -W 'Absolute Perceptual Relative
                Saturation' -- "$cur" ) )
            return 0
            ;;
        -interlace)
            COMPREPLY=( $( compgen -W 'None Line Plane Partition' -- "$cur" ) )
            return 0
            ;;
        -limit)
            COMPREPLY=( $( compgen -W 'Disk File Map Memory' -- "$cur" ) )
            return 0
            ;;
        -list)
            COMPREPLY=( $( compgen -W 'Delegate Format Magic Module Resource
                Type' -- "$cur" ) )
            return 0
            ;;
        -map)
            COMPREPLY=( $( compgen -W 'best default gray red green blue' \
                -- "$cur" ) )
            _filedir
            return 0
            ;;
        -noise)
            COMPREPLY=( $( compgen -W 'Uniform Gaussian Multiplicative
                Impulse Laplacian Poisson' -- "$cur" ) )
            return 0
            ;;
        -preview)
            COMPREPLY=( $( compgen -W 'Rotate Shear Roll Hue Saturation
                Brightness Gamma Spiff Dull Grayscale Quantize Despeckle
                ReduceNoise AddNoise Sharpen Blur Treshold EdgeDetect Spread
                Shade Raise Segment Solarize Swirl Implode Wave OilPaint
                CharcoalDrawing JPEG' -- "$cur" ) )
            return 0
            ;;
        -mask|-profile|-texture|-tile|-write)
            _filedir
            return 0
            ;;
        -type)
            COMPREPLY=( $( compgen -W 'Bilevel Grayscale Palette PaletteMatte
                TrueColor TrueColorMatte ColorSeparation ColorSeparationlMatte
                Optimize' -- "$cur" ) )
            return 0
            ;;
        -units)
            COMPREPLY=( $( compgen -W 'Undefined PixelsPerInch
                PixelsPerCentimeter' -- "$cur" ) )
            return 0
            ;;
        -virtual-pixel)
            COMPREPLY=( $( compgen -W 'Constant Edge mirror tile' -- "$cur" ) )
            return 0
            ;;
        -visual)
            COMPREPLY=( $( compgen -W 'StaticGray GrayScale StaticColor
                PseudoColor TrueColor DirectColor defaut visualid' \
                    -- "$cur" ) )
            return 0
            ;;
    esac

    return 1
}

_convert()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+adjoin +append +compress +contrast +debug
            +dither +endian +gamma +label +map +mask +matte +negate +noise
            +page +raise +render +write' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _convert convert

_mogrify()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+compress +contrast +debug +dither +endian
            +gamma +label +map +mask +matte +negate +page +raise' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _mogrify mogrify

_display()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+compress +contrast +debug +dither +endian
            +gamma +label +map +matte +negate +page +raise +write' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _display display

_animate()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+debug +dither +gamma +map +matte' \
            -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _animate animate

_identify()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+debug' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _identify identify

_montage()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+adjoin +compress +debug +dither +endian
            +gamma +label +matte +page' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _montage montage

_composite()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+compress +debug +dither +endian +label
            +matte +negate +page +write' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _composite composite

_compare()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+debug' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _compare compare

_conjure()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+debug' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _conjure conjure

_import()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+debug' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _import import

_stream()
{
    local cur prev words cword
    _init_completion || return

    _ImageMagick && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    elif [[ "$cur" == +* ]]; then
        COMPREPLY=( $( compgen -W '+debug' -- "$cur" ) )
    else
        _filedir
    fi
} &&
complete -F _stream stream

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # bash completion for cowsay                               -*- shell-script -*-

_cowsay()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -f)
            COMPREPLY=( $( compgen -W \
                '$( cowsay -l 2>/dev/null | tail -n +2 )' -- "$cur" ) )
            return 0
            ;;
    esac

    # relevant options completion
    COMPREPLY=( $( compgen -W '-b -d -g -p -s -t -w -y -e -f -h -l -n -T -W' \
        -- "$cur" ) )

} &&
complete -F _cowsay -o default cowsay cowthink

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # bash completion for cpan2dist                            -*- shell-script -*-

_cpan2dist()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --format)
            # should remove ":" from COMP_WORDBREAKS, but doesn't work (?)
            COMPREPLY=( $( compgen -W '$(perl -MCPANPLUS::Dist -e \
                "print map { \"\$_\n\" } CPANPLUS::Dist->dist_types")' \
                -- "$cur" ) )
            return 0
            ;;
        --banlist|--ignorelist|--modulelist|--logfile)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    else
        local cpandirs=( "$HOME/.cpanplus/" "$HOME/.cpan/source/modules/" )
        local packagelist
        for dir in ${cpandirs[@]}; do
            [[ -d "$dir" && -r "$dir/02packages.details.txt.gz" ]] && \
                packagelist="$dir/02packages.details.txt.gz"
        done
        [[ $packagelist ]] && COMPREPLY=( $( zgrep "^${cur//-/::}" \
            $packagelist 2>/dev/null | awk '{print $1}' | sed -e 's/::/-/g' ) )
    fi
} &&
complete -F _cpan2dist -o default cpan2dist

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # bash completion for cpio                                 -*- shell-script -*-

_cpio()
{
    local cur prev words cword split
    _init_completion -s -n : || return

    # --name value style option
    case $prev in
        -H|--format)
            COMPREPLY=( $( compgen -W \
                'bin odc newc crc tar ustar hpbin hpodc' -- "$cur" ) )
            return 0
            ;;
        -E|-F|-I|--file|--pattern-file)
            _filedir
            return 0
            ;;
        -R|--owner)
            _usergroup
            return 0
            ;;
        --rsh-command)
            compopt -o filenames
            COMPREPLY=( $( compgen -c -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W '-o --create -i --extract -p --pass-through
            -? --help --license --usage --version' -- "$cur" ) )
    else
        case ${words[1]} in
            -o|--create)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '-0 -a -c -v -A -B -L -V -C -H -M
                        -O -F --file --format --message --null
                        --reset-access-time --verbose --dot --append
                        --block-size --dereference --io-size --quiet
                        --force-local --rsh-command --help --version' \
                            -- "$cur" ) )
                fi
                ;;
            -i|--extract)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '-b -c -d -f -m -n -r -t -s -u -v
                        -B -S -V -C -E -H -M -R -I -F --file --make-directories
                        --nonmatching --preserve-modification-time
                        --numeric-uid-gid --rename --list --swap-bytes --swap
                        --dot --unconditional --verbose --block-size
                        --swap-halfwords --io-size --pattern-file --format
                        --owner --no-preserve-owner --message --force-local
                        --no-absolute-filenames --sparse --only-verify-crc
                        --quiet --rsh-command --help --to-stdout --version' \
                            -- "$cur" ) )
                fi
                ;;
            -p*|--pass-through)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '-0 -a -d -l -m -u -v -L -V -R
                        --null --reset-access-time --make-directories --link
                        --quiet --preserve-modification-time --unconditional
                        --verbose --dot --dereference --owner
                        --no-preserve-owner --sparse --help --version' \
                            -- "$cur" ) )
                else
                    _filedir -d
                fi
                ;;
        esac
    fi
} &&
complete -F _cpio cpio

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # bash completion for cppcheck(1)                          -*- shell-script -*-

_cppcheck()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --append|--exitcode-suppressions|--file-list|--rule-file|\
        --suppressions-list|--includes-file|--include|-i)
            _filedir
            return
            ;;
        -D|-U|--rule|--suppress|--template|--max-configs)
            return
            ;;
        --enable)
            # split comma-separated list
            split=false
            if [[ "$cur" == ?*,* ]]; then
                prev="${cur%,*}"
                cur="${cur##*,}"
                split=true
            fi
            COMPREPLY=( $( compgen -W 'all style performance portability
                information unusedFunction missingInclude' -- "$cur" ) )
            $split && COMPREPLY=( ${COMPREPLY[@]/#/"$prev,"} )
            return
            ;;
        --error-exitcode)
            COMPREPLY=( $( compgen -W '{0..255}' -- "$cur" ) )
            return
            ;;
        -I)
            _filedir -d
            return
            ;;
        -j)
            COMPREPLY=( $( compgen -W "{2..$(_ncpus)}" -- "$cur" ) )
            return
            ;;
        --language|-x)
            COMPREPLY=( $( compgen -W 'c c++' -- "$cur" ) )
            return
            ;;
        --std)
            COMPREPLY=( $( compgen -W 'c89 c99 c11 c++03 c++11 posix' \
                -- "$cur" ) )
            return
            ;;
        --platform)
            COMPREPLY=( $( compgen -W 'unix32 unix64 win32A win32W win64' \
                -- "$cur" ) )
            return
            ;;
        -rp|--relative-paths)
            if $split; then # -rp without argument is allowed
                _filedir -d
                return
            fi
            ;;
        --xml-version)
            COMPREPLY=( $( compgen -W '1 2' -- "$cur" ) )
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    else
        _filedir @(cpp|cxx|cc|c++|c|h|hpp|hxx|h++|tpp|txx)
    fi
} &&
complete -F _cppcheck cppcheck

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # crontab(1) completion                                    -*- shell-script -*-

_crontab()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -u)
            _allowed_users
            return 0
            ;;
    esac

    local -A opts=( [-u]= [-l]= [-r]= [-e]= )
    [[ $OSTYPE == *linux* ]] && opts[-i]=
    [[ -d /sys/fs/selinux || -d /selinux ]] && opts[-s]=

    local i
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        [[ ${words[i]} ]] && unset opts[${words[i]}]
        case "${words[i]}" in
            -l)
                unset opts[-r] opts[-e] opts[-i] opts[-s]
                ;;
            -e)
                unset opts[-l] opts[-r] opts[-i]
                ;;
            -r)
                unset opts[-l] opts[-e]
                ;;
            -u)
                unset opts[-i]
                ;;
        esac
    done

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '${!opts[@]}' -- "$cur" ) )
        return 0
    fi

    # do filenames only if we did not have -l, -r, or -e
    [[ "${words[@]}" == *\ -@(l|r|e)* ]] || _filedir
} &&
complete -F _crontab crontab

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # bash completion for cryptsetup                           -*- shell-script -*-

_cryptsetup_name()
{
    COMPREPLY=( $( compgen -X control -W '$( command ls /dev/mapper )' \
        -- "$cur" ) )
}

_cryptsetup_device()
{
    cur=${cur:=/dev/}
    _filedir
}

_cryptsetup()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --key-file|--master-key-file|--header-backup-file|-d)
            _filedir
            return 0
            ;;
    esac

    $split && return

    local arg
    _get_first_arg
    if [[ -z $arg ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
            [[ $COMPREPLY == *= ]] && compopt -o nospace
        else
            COMPREPLY=( $( compgen -W 'create remove status resize luksFormat
                luksOpen luksClose luksSuspend luksResume luksAddKey
                luksRemoveKey luksKillSlot luksDelKey luksUUID isLuks
                luksDump luksHeaderBackup luksHeaderRestore' -- "$cur" ) )
        fi
    else
        local args
        _count_args
        case $arg in
            create)
                case $args in
                    2)
                        _cryptsetup_name
                        ;;
                    3)
                        _cryptsetup_device
                        ;;
                esac
                ;;
            remove|status|resize|luksClose|luksSuspend|luksResume)
                case $args in
                    2)
                        _cryptsetup_name
                        ;;
                esac
                ;;
            luksFormat|luksAddKey|luksRemoveKey)
                case $args in
                    2)
                        _cryptsetup_device
                        ;;
                    3)
                        _filedir
                        ;;
                esac
                ;;
            luksOpen)
                case $args in
                    2)
                        _cryptsetup_device
                        ;;
                    3)
                        _cryptsetup_name
                        ;;
                esac
                ;;
            luksKillSlot|luksDelKey|luksUUID|isLuks|luksDump)
                case $args in
                    2)
                        _cryptsetup_device
                        ;;
                esac
                ;;
            luksHeaderBackup|luksHeaderRestore)
                case $args in
                    2)
                        _cryptsetup_device
                        ;;
                    3)
                        COMPREPLY=( '--header-backup-file' )
                        ;;
                    esac
                ;;
        esac
    fi

    return 0
} &&
complete -F _cryptsetup cryptsetup

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  _ctrlaltdel_module()
{
	local cur prev
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	if [ $COMP_CWORD -eq 1 ]; then
		COMPREPLY=( $(compgen -W "hard soft" -- $cur) )
	fi
	return 0
}
complete -F _ctrlaltdel_module ctrlaltdel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # curl(1) completion                                       -*- shell-script -*-

_curl()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --ciphers|--connect-timeout|-C|--continue-at|-F|--form|--form-string|\
        --ftp-account|--ftp-alternative-to-user|-P|--ftp-port|-H|--header|-h|\
        --help|--hostpubmd5|--keepalive-time|--krb|--limit-rate|--local-port|\
        --mail-from|--mail-rcpt|--max-filesize|--max-redirs|-m|--max-time|\
        --pass|--proto|--proto-redir|--proxy-user|--proxy1.0|-Q|--quote|-r|\
        --range|-X|--request|--retry|--retry-delay|--retry-max-time|\
        --socks5-gssapi-service|-t|--telnet-option|--tftp-blksize|-z|\
        --time-cond|--url|-u|--user|-A|--user-agent|-V|--version|-w|\
        --write-out|--resolve|--tlsuser|--tlspassword)
            return
            ;;
        -K|--config|-b|--cookie|-c|--cookie-jar|-D|--dump-header|--egd-file|\
        --key|--libcurl|-o|--output|--random-file|-T|--upload-file|--trace|\
        --trace-ascii|--netrc-file)
            _filedir
            return
            ;;
        --cacert|-E|--cert)
            _filedir '@(c?(e)rt|cer|pem|der)'
            return
            ;;
        --capath)
            _filedir -d
            return
            ;;
        --cert-type|--key-type)
            COMPREPLY=( $( compgen -W 'DER PEM ENG' -- "$cur" ) )
            return
            ;;
        --crlfile)
            _filedir crl
            return
            ;;
        -d|--data|--data-ascii|--data-binary|--data-urlencode)
            if [[ $cur == \@* ]]; then
                cur=${cur:1}
                _filedir
                COMPREPLY=( "${COMPREPLY[@]/#/@}" )
            fi
            return
            ;;
        --delegation)
            COMPREPLY=( $( compgen -W 'none policy always' -- "$cur" ) )
            return
            ;;
        --engine)
            COMPREPLY=( $( compgen -W 'list' -- "$cur" ) )
            return
            ;;
        --ftp-method)
            COMPREPLY=( $( compgen -W 'multicwd nocwd singlecwd' -- "$cur" ) )
            return
            ;;
        --ftp-ssl-ccc-mode)
            COMPREPLY=( $( compgen -W 'active passive' -- "$cur" ) )
            return
            ;;
        --interface)
            _available_interfaces -a
            return
            ;;
        -x|--proxy|--socks4|--socks4a|--socks5|--socks5-hostname)
            _known_hosts_real
            return
            ;;
        --pubkey)
            _filedir pub
            return
            ;;
        --stderr)
            COMPREPLY=( $( compgen -W '-' -- "$cur" ) )
            _filedir
            return
            ;;
        --tlsauthtype)
            COMPREPLY=( $( compgen -W 'SRP' -- "$cur" ) )
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    fi
} &&
complete -F _curl curl

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # cvs(1) completion                                        -*- shell-script -*-

_cvs_entries()
{
    local prefix=${cur%/*}/ IFS=$'\n'
    [[ -e ${prefix:-}CVS/Entries ]] || prefix=""
    entries=( $( cut -d/ -f2 -s ${prefix:-}CVS/Entries 2>/dev/null ) )
    if [[ $entries ]]; then
        entries=( "${entries[@]/#/${prefix:-}}" )
        compopt -o filenames
    fi
}

_cvs_modules()
{
    if [[ -n $prefix ]]; then
        COMPREPLY=( $( command ls -d ${cvsroot}/${prefix}/!(CVSROOT) ) )
    else
        COMPREPLY=( $( command ls -d ${cvsroot}/!(CVSROOT) ) )
    fi
}

_cvs_commands()
{
    cvs --help-commands 2>&1 | awk '/^(     *|\t)/ { print $1 }'
}

_cvs_command_options()
{
    COMPREPLY=( $( compgen -W '$( _parse_help "$1" "--help $2" )' -- "$cur" ) )
}

_cvs_kflags()
{
    COMPREPLY=( $( compgen -W 'kv kvl k o b v' -- "$cur" ) )
}

_cvs_roots()
{
    local -a cvsroots
    cvsroots=( $CVSROOT )
    [[ -r ~/.cvspass ]] && cvsroots+=( $( awk '{ print $2 }' ~/.cvspass ) )
    [[ -r CVS/Root ]] && mapfile -tO ${#cvsroots[@]} cvsroots < CVS/Root
    COMPREPLY=( $( compgen -W '${cvsroots[@]}' -- "$cur" ) )
    __ltrim_colon_completions "$cur"
}

_cvs()
{
    local cur prev words cword
    _init_completion -n : || return

    local count mode i cvsroot cvsroots pwd
    local -a flags miss files entries changed newremoved

    count=0
    for i in "${words[@]}"; do
        [[ $count -eq $cword ]] && break
        # Last parameter was the CVSROOT, now go back to mode selection
        if [[ "${words[((count))]}" == "$cvsroot" && "$mode" == cvsroot ]]; then
            mode=""
        fi
        if [[ -z $mode ]]; then
            case $i in
                -H|--help)
                    COMPREPLY=( $( compgen -W "$( _cvs_commands )" -- "$cur" ) )
                    return 0
                    ;;
                -d)
                    mode=cvsroot
                    cvsroot=${words[((count+1))]}
                    ;;
                add|ad|new)
                    mode=add
                    ;;
                admin|adm|rcs)
                    mode=admin
                    ;;
                annotate|ann|blame|rannotate|rann|ra)
                    mode=annotate
                    ;;
                checkout|co|get)
                    mode=checkout
                    ;;
                commit|ci|com)
                    mode=commit
                    ;;
                diff|di|dif)
                    mode=diff
                    ;;
                export|ex|exp)
                    mode=export
                    ;;
                edit|unedit|editors|logout|pserver|server|watch|watchers)
                    mode=$i
                    ;;
                history|hi|his)
                    mode=history
                    ;;
                import|im|imp)
                    mode=import
                    ;;
                log|lo|rlog|rl)
                    mode=log
                    ;;
                login|logon|lgn)
                    mode=login
                    ;;
                rdiff|patch|pa)
                    mode=rdiff
                    ;;
                release|re|rel)
                    mode=release
                    ;;
                remove|rm|delete)
                    mode=remove
                    ;;
                rtag|rt|rfreeze)
                    mode=rtag
                    ;;
                status|st|stat)
                    mode=status
                    ;;
                tag|ta|freeze)
                    mode=tag
                    ;;
                update|up|upd)
                    mode=update
                    ;;
                version|ve|ver)
                    mode=version
                    ;;
            esac
        elif [[ "$i" = -* ]]; then
            flags+=( $i )
        fi
        count=$((++count))
    done

    case $mode in
        add)
            case $prev in
                -m)
                    return 0
                    ;;
                -k)
                    _cvs_kflags
                    return 0
                    ;;
            esac

            if [[ "$cur" != -* ]]; then
                _cvs_entries
                [[ -z $cur ]] && files=( !(CVS) ) || \
                    files=( $( command ls -d ${cur}* 2>/dev/null ) )
                local f
                for i in ${!files[@]}; do
                    if [[ ${files[i]} == ?(*/)CVS ]]; then
                        unset files[i]
                    else
                        for f in "${entries[@]}"; do
                            if [[ ${files[i]} == $f && ! -d $f ]]; then
                                unset files[i]
                                break
                            fi
                        done
                    fi
                done
                COMPREPLY=( $( compgen -X "$_backup_glob" -W '${files[@]}' \
                    -- "$cur" ) )
            else
                _cvs_command_options "$1" $mode
            fi
            ;;
        admin)
            case $prev in
                -a|-A|-b|-c|-e|-l|-m|-n|-N|-o|-s|-t-|-u)
                    return 0
                    ;;
                -t)
                    _filedir
                    return 0
                    ;;
                -k)
                    _cvs_kflags
                    return 0
                    ;;
            esac

            if [[ "$cur" = -* ]]; then
                _cvs_command_options "$1" $mode
            else
                _cvs_entries
                COMPREPLY=( $( compgen -W '${entries[@]}' -- "$cur" ) )
            fi
            ;;
        annotate)
            [[ "$prev" == -@(r|D) ]] && return 0

            if [[ "$cur" = -* ]]; then
                _cvs_command_options "$1" $mode
            else
                _cvs_entries
                COMPREPLY=( $( compgen -W '${entries[@]}' -- "$cur" ) )
            fi
            ;;
        checkout)
            case $prev in
                -r|-D|j)
                    return 0
                    ;;
                -d)
                    _filedir -d
                    return 0
                    ;;
                -k)
                    _cvs_kflags
                    return 0
                    ;;
            esac

            if [[ "$cur" != -* ]]; then
                [[ -z $cvsroot ]] && cvsroot=$CVSROOT
                COMPREPLY=( $( cvs -d "$cvsroot" co -c 2> /dev/null | \
                    awk '{print $1}' ) )
                COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
            else
                _cvs_command_options "$1" $mode
            fi
            ;;
        commit)
            case $prev in
                -m|-r)
                    return 0
                    ;;
                -F)
                    _filedir
                    return 0
                    ;;
            esac

            if [[ "$cur" != -* ]]; then
                # if $COMP_CVS_REMOTE is not null, 'cvs commit' will
                # complete on remotely checked-out files (requires
                # passwordless access to the remote repository
                if [[ -n ${COMP_CVS_REMOTE:-} ]]; then
                    # this is the least computationally intensive way found so
                    # far, but other changes (something other than
                    # changed/removed/new) may be missing
                    changed=( $( cvs -q diff --brief 2>&1 | \
                        sed -ne 's/^Files [^ ]* and \([^ ]*\) differ$/\1/p' ) )
                    newremoved=( $( cvs -q diff --brief 2>&1 | \
                        sed -ne 's/^cvs diff: \([^ ]*\) .*, no comparison available$/\1/p' ) )
                    COMPREPLY=( $( compgen -W '${changed[@]:-} \
                        ${newremoved[@]:-}' -- "$cur" ) )
                else
                    _cvs_entries
                    COMPREPLY=( $( compgen -W '${entries[@]}' -- "$cur" ) )
                fi
            else
                _cvs_command_options "$1" $mode
            fi
            ;;
        cvsroot)
            _cvs_roots
            ;;
        diff)
            if [[ "$cur" == -* ]]; then
                _cvs_command_options "$1" $mode
                [[ $COMPREPLY == *= ]] && compopt -o nospace
            else
                _cvs_entries
                COMPREPLY=( $( compgen -W '${entries[@]:-}' -- "$cur" ) )
            fi
            ;;
        editors|watchers)
            if [[ "$cur" = -* ]]; then
                _cvs_command_options "$1" $mode
            else
                _cvs_entries
                COMPREPLY=( $( compgen -W '${entries[@]}' -- "$cur" ) )
            fi
            ;;
        export)
            case $prev in
                -r|-D)
                    return 0
                    ;;
                -d)
                    _filedir -d
                    return 0
                    ;;
                -k)
                    _cvs_kflags
                    return 0
                    ;;
            esac

            if [[ "$cur" != -* ]]; then
                [[ -z $cvsroot ]] && cvsroot=$CVSROOT
                COMPREPLY=( $( cvs -d "$cvsroot" co -c | awk '{print $1}' ) )
                COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
            else
                _cvs_command_options "$1" $mode
            fi
            ;;
        import)
            case $prev in
                -I|-b|-m|-W)
                    return 0
                    ;;
                -k)
                    _cvs_kflags
                    return 0
                    ;;
            esac

            if [[ "$cur" != -* ]]; then
                # starts with same algorithm as checkout
                [[ -z $cvsroot ]] && cvsroot=$CVSROOT
                local prefix=${cur%/*}
                if [[ -r ${cvsroot}/${prefix} ]]; then
                    _cvs_modules
                    COMPREPLY=( ${COMPREPLY[@]#$cvsroot} )
                    COMPREPLY=( ${COMPREPLY[@]#\/} )
                fi
                pwd=$( pwd )
                pwd=${pwd##*/}
                COMPREPLY=( $( compgen -W '${COMPREPLY[@]} $pwd' -- "$cur" ) )
            else
                _cvs_command_options "$1" $mode
            fi
            ;;
        remove)
            if [[ "$cur" != -* ]]; then
                _cvs_entries
                # find out what files are missing
                for i in "${entries[@]}"; do
                    [[ ! -r $i ]] && miss+=( $i )
                done
                COMPREPLY=( $( compgen -W '${miss[@]:-}' -- "$cur" ) )
            else
                _cvs_command_options "$1" $mode
            fi
            ;;
        update)
            case $prev in
                -r|-D|-j|-I|-W)
                    return 0
                    ;;
                -k)
                    _cvs_kflags
                    return 0
                    ;;
            esac

            if [[ "$cur" = -* ]]; then
                _cvs_command_options "$1" $mode
            else
                _cvs_entries
                COMPREPLY=( $( compgen -W '${entries[@]}' -- "$cur" ) )
            fi
            ;;
        "")
            case $prev in
                -T)
                    _filedir -d
                    return 0
                    ;;
                -e|-s)
                    return 0
                    ;;
                -z)
                    COMPREPLY=( $( compgen -W '{1..9}' -- "$cur" ) )
                    return 0
                    ;;
            esac

            COMPREPLY=( $( compgen -W '$( _cvs_commands )
                $( _parse_help "$1" --help-options ) --help --help-commands
                --help-options --version' -- "$cur" ) )
            ;;
    esac

    return 0
} &&
complete -F _cvs cvs

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # bash completion for cvsps                                -*- shell-script -*-

_cvsps()
{
    local cur prev words cword
    _init_completion -n : || return

    case $prev in
        -h|-z|-f|-d|-l|--diff-opts|--debuglvl)
            return 0
            ;;
        -s)
            COMPREPLY=( $( compgen -W "$( cvsps 2>/dev/null |
                awk '/^PatchSet:?[ \t]/ { print $2 }' )" -- "$cur" ) )
            return 0
            ;;
        -a)
            COMPREPLY=( $( compgen -W "$( cvsps 2>/dev/null |
                awk '/^Author:[ \t]/ { print $2 }' )" -- "$cur" ) )
            return 0
            ;;
        -b)
            COMPREPLY=( $( compgen -W "$( cvsps 2>/dev/null |
                awk '/^Branch:[ \t]/ { print $2 }' )" -- "$cur" ) )
            return 0
            ;;
        -r)
            COMPREPLY=( $( compgen -W "$( cvsps 2>/dev/null |
                awk '/^Tag:[ \t]+[^(]/ { print $2 }' )" -- "$cur" ) )
            return 0
            ;;
        -p)
            _filedir -d
            return 0
            ;;
        --test-log)
            _filedir
            return 0
            ;;
        -Z)
            COMPREPLY=( $( compgen -W '{1..9}' -- "$cur" ) )
            return 0
            ;;
        --root)
            _xfunc cvs _cvs_roots
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]] ; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -h )' -- "$cur" ) )
    else
        _xfunc cvs _cvs_roots
    fi
} &&
complete -F _cvsps cvsps

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # bash completion for dd                                   -*- shell-script -*-

_dd()
{
    local cur prev words cword
    _init_completion -n = || return

    case $cur in
        if=*|of=*)
            cur=${cur#*=}
            _filedir
            return 0
            ;;
        conv=*)
            cur=${cur#*=}
            COMPREPLY=( $( compgen -W 'ascii ebcdic ibm block unblock lcase
                notrunc ucase swab noerror sync' -- "$cur" ) )
            return 0
            ;;
    esac

    _expand || return 0

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) \
                $( compgen -W 'bs cbs conv count ibs if obs of seek skip' \
                           -S '=' -- "$cur" ) )
} &&
complete -F _dd -o nospace dd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             _have debconf-show &&
_debconf_show()
{
        local cur

        COMPREPLY=()
        cur=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=($( compgen -W '--listowners --listdbs --db=' -- $cur ) \
                        $( apt-cache pkgnames -- $cur ) )
}
complete -F _debconf_show debconf-show

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          _delpart_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $COMP_CWORD in
		1)
			OPTS="--help --version $(lsblk -pnro name)"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			;;
		2)
			prev="${COMP_WORDS[COMP_CWORD-1]}"
			COMPREPLY=( $(compgen -W "$(cat /sys/block/${prev##*/}/*/partition 2>/dev/null)" -- $cur) )
			;;
	esac
	return 0
}
complete -F _delpart_module delpart
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # desktop-file-validate completion                         -*- shell-script -*-

_desktop_file_validate()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --help)
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return
    fi

    _filedir desktop
} &&
complete -F _desktop_file_validate desktop-file-validate

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # bash completion for dhclient                             -*- shell-script -*-

_dhclient()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -cf|-lf|-pf|-sf)
            _filedir
            return 0
            ;;
        -s)
            _known_hosts_real "$cur"
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-p -d -q -1 -r -lf -pf -cf -sf -s -g -n -nw
            -w' -- "$cur" ) )
    else
        _available_interfaces
    fi
} &&
complete -F _dhclient dhclient

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # dict(1) completion                                       -*- shell-script -*-

_dictdata()
{
    dict $host $port $1 2>/dev/null | sed -ne \
        's/^['$'\t '']['$'\t '']*\([^'$'\t '']*\).*$/\1/p'
}

_dict()
{
    local cur prev words cword
    _init_completion || return

    local host port db i

    for (( i=1; i < cword; i++ )); do
        case ${words[i]} in
            -h|--host)
                host=${words[i+1]}
                [[ -n $host ]] && host="-h $host"
                i=$((++i))
                ;;
            -p|--port)
                port=${words[i+1]}
                [[ -n $port ]] && port="-p $port"
                i=$((++i))
                ;;
            -d|--database)
                db=${words[i+1]}
                [[ -n $db ]] && host="-d $db"
                i=$((++i))
                ;;
            *)
                ;;
        esac
    done

    if [[ "$cur" = -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

    case $prev in
        -d|--database|-i|-info)
            COMPREPLY=( $( compgen -W '$( _dictdata -D )' -- "$cur" ) )
            return 0
            ;;
        -s|--strategy)
            COMPREPLY=( $( compgen -W '$( _dictdata -S )' -- "$cur" ) )
            return 0
            ;;
        *)
            ;;
    esac

    local dictfile=/usr/share/dict/words
    if [[ -r $dictfile ]]; then
        # Dictfile may be too large for practical compgen -W usage, so narrow
        # it down with grep if $cur looks like something that's safe to embed
        # in a pattern instead.
        if [[ $cur == +([-A-Za-z0-9/.]) ]]; then
            COMPREPLY=( $( compgen -W \
                '$( command grep "^${cur//./\\.}" $dictfile )' -- "$cur" ) )
        else
            COMPREPLY=( $( compgen -W '$( cat $dictfile )' -- "$cur" ) )
        fi
    fi
} &&
complete -F _dict -o default dict rdict

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _dmesg_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-F'|'--file')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
		'-f'|'--facility')
			COMPREPLY=( $(compgen -W "kern user mail daemon auth syslog lpr news" -- $cur) )
			return 0
			;;
		'-l'|'--level'|'-n'|'--console-level')
			COMPREPLY=( $(compgen -W "emerg alert crit err warn notice info debug" -- $cur) )
			return 0
			;;
		'-s'|'--buffer-size')
			COMPREPLY=( $(compgen -W "size" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	OPTS="--clear
		--read-clear
		--console-off
		--show-delta
		--reltime
		--console-on
		--file
		--facility
		--human
		--kernel
		--color
		--level
		--console-level
		--nopager
		--raw
		--syslog
		--buffer-size
		--ctime
		--notime
		--userspace
		--follow
		--decode
		--help
		--version"
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
	return 0
}
complete -F _dmesg_module dmesg
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # dnsspoof completion                                      -*- shell-script -*-

_dnsspoof()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -i)
            _available_interfaces -a
            return 0
            ;;
        -f)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
    fi

} &&
complete -F _dnsspoof dnsspoof

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # dot(1) completion                                        -*- shell-script -*-

_dot()
{
    local cur prev words cword
    _init_completion -n := || return

    [[ $prev == -@(V|\?) ]] && return

    case $cur in
        -G*|-N*|-E*|-l?*|-q?*|-s?*|-Ln*|-LU*|-LC*|-LT*)
            return
            ;;
        -T*)
            local langs=( $( "$1" -TNON_EXISTENT 2>&1 | \
                sed -ne 's/.*one of://p' ) )
            COMPREPLY=( $( compgen -P -T -W '${langs[@]}' -- "${cur#-T}" ) )
            return
            ;;
        -K*)
            local layouts=( $( "$1" -KNON_EXISTENT 2>&1 | \
                sed -ne 's/.*one of://p' ) )
            COMPREPLY=( $( compgen -P -K -W '${layouts[@]}' -- "${cur#-K}" ) )
            return
            ;;
        -o*)
            cur=${cur#-o}
            _filedir
            COMPREPLY=( $( compgen -P -o -W '${COMPREPLY[@]}' -- "$cur" ) )
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '-V -v -G -N -E -T -K -l -o -O -P -q -s -y -n
            -n1 -n2 -x -Lg -LO -Ln -LU -LC -LT -m -c -?' -- "$cur" ) )
        [[ $COMPREPLY == -@(G|N|E|T|K|o|L[nUCT]) ]] && compopt -o nospace
        return
    fi

    _filedir dot
} &&
complete -F _dot dot

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ## Bash completion for the Android SDK tools.
#
# Written by Hans-Christoph Steiner, 2012
#
# This work is too trival to have any copyright, I hereby wave any copyright
# and release it into the public domain.

function _dphys_swapfile()
{
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="setup swapon swapoff uninstall"

  if [ ${COMP_CWORD} -eq 1 ]; then
      COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
      return 0
  else  
      COMPREPLY=""
      return 0
  fi
}
complete -o default -F _dphys_swapfile dphys-swapfile
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # Debian dpkg-source completion                            -*- shell-script -*-

_dpkg_source()
{
    local cur prev words cword
    _init_completion || return

    local options work i action packopts unpackopts fields

    packopts="-c -l -F -V -T -D -U -W -E -sa -i -I -sk -sr -ss -sA -sK -sP \
              -sU -sR"
    unpackopts="-sp -sn -su"
    options="-x -b $packopts $unpackopts"
    fields="Format Source Version Binary Maintainer Uploader Architecture \
            Standards-Version Build-Depends Files"

    action="options"
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        if [[ ${words[$i]} == "-x" ]]; then
            action=unpack
        elif [[ ${words[$i]} == "-b" ]]; then
            action=pack
        elif [[ ${words[$i]} == "-h" ]]; then
            action=help
        fi
    done

    case $action in
        unpack)
            case $prev in
                -x)
                    _filedir -d
                    _filedir 'dsc'
                    return 0
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "$unpackopts" -- "$cur" ) )
                    _filedir -d
                    _filedir
                    return 0
                    ;;
            esac
            return 0
            ;;
        pack)
            case $prev in
                -b)
                    _filedir -d
                    return 0
                    ;;
                -c|-l|-T|-i|-I)
                    # -c: get controlfile
                    # -l: get per-version info from this file
                    # -T: read variables here, not debian/substvars
                    # -i: <regexp> filter out files to ignore diffs of.
                    # -I: filter out files when building tarballs.
                    # return directory names and file names
                    _filedir -d
                    _filedir
                    return 0
                    ;;
                -F)
                    # -F: force change log format
                    COMPREPLY=( $( command ls /usr/lib/dpkg/parsechangelog ) )
                    return 0
                    ;;
                -V|-D)
                    # -V: set a substitution variable
                    # we don't know anything about possible variables or values
                    # so we don't try to suggest any completion.
                    COMPREPLY=()
                    return 0
                    ;;
                -D)
                    # -D: override or add a .dsc field and value
                    # if $cur doesn't contain a = yet, suggest variable names
                    if [[ "$cur" == *=* ]]; then
                        # $cur contains a "="
                        COMPREPLY=()
                        return 0
                    else
                        COMPREPLY=( $( compgen -W "$fields" -- "$cur" ) )
                        return 0
                    fi
                    ;;
                -U)
                    # -U: remove a field
                    # Suggest possible fieldnames
                    COMPREPLY=( $( compgen -W "$fields" -- "$cur" ) )
                    return 0
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "$packopts $unpackopts" -- "$cur" ) )
                    return 0
                    ;;
            esac
            return 0
            ;;
        *)
            COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
            return 0
            ;;
    esac
} &&
complete -F _dpkg_source dpkg-source

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # This function is required by _dpkg and _dpkg-reconfigure -*- shell-script -*-

_have grep-status && {
_comp_dpkg_installed_packages()
{
    grep-status -P -e "^$1" -a -FStatus 'install ok installed' -n -s Package
}
} || {
_comp_dpkg_installed_packages()
{
    command grep -A 1 "Package: $1" /var/lib/dpkg/status | \
        command grep -B 1 -Ee "ok installed|half-installed|unpacked| \
            half-configured" \
            -Ee "^Essential: yes" | \
        command grep "Package: $1" | cut -d\  -f2
}
}

_have grep-status && {
_comp_dpkg_purgeable_packages()
{
    grep-status -P -e "^$1" -a -FStatus 'install ok installed' -o -FStatus 'deinstall ok config-files' -n -s Package
}
} || {
_comp_dpkg_purgeable_packages()
{
    command grep -A 1 "Package: $1" /var/lib/dpkg/status | \
        command grep -B 1 -Ee "ok installed|half-installed|unpacked| \
            half-configured|config-files" \
            -Ee "^Essential: yes" | \
        command grep "Package: $1" | cut -d\  -f2
}
}

# Debian dpkg(1) completion
#
_dpkg()
{
    local cur prev words cword split
    _init_completion -s || return

    _expand || return 0

    local i=$cword

    # find the last option flag
    if [[ $cur != -* ]]; then
        while [[ $prev != -* && $i -ne 1 ]]; do
            i=$((i-1))
            prev=${words[i-1]}
        done
    fi

    case $prev in
        -c|-i|-A|-I|-f|-e|-x|-X|--install|--unpack|--record-avail| \
        --contents|--info|--fsys-tarfile|--field|--control|--extract| \
        --vextract)
            _filedir '?(u|d)deb'
            return 0
            ;;
        -b|--build)
            _filedir -d
            return 0
            ;;
        -s|-p|-l|-W|--status|--print-avail|--list|--show)
            COMPREPLY=( $( apt-cache pkgnames "$cur" 2>/dev/null ) )
            return 0
            ;;
        -S|--search)
            _filedir
            return 0
            ;;
        -r|--remove)
            COMPREPLY=( $( _comp_dpkg_installed_packages "$cur" ) )
            return 0
            ;;
        -L|-P|--listfiles|--purge)
            COMPREPLY=( $( _comp_dpkg_purgeable_packages "$cur" ) )
            return 0
            ;;
    esac

    $split && return

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _dpkg dpkg dpkg-query

# Debian dpkg-deb(1) completion
#
_dpkg_deb()
{
    local cur prev words cword split
    _init_completion -s || return

    _expand || return 0

    local i=$cword

    # find the last option flag
    if [[ $cur != -* ]]; then
        while [[ $prev != -* && $i -ne 1 ]]; do
            i=$((i-1))
            prev=${words[i-1]}
        done
    fi

    case $prev in
        -c|-I|-W|-f|-e|-x|-X|-R|--contents|--info|--show|--field|--control| \
        --extract|--vextract|--raw-extract|--fsys-tarfile)
            _filedir '?(u|d)deb'
            return 0
            ;;
        -b|--build)
            _filedir -d
            return 0
            ;;
    esac

    $split && return

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _dpkg_deb dpkg-deb

# Debian GNU dpkg-reconfigure(8) completion
#
_dpkg_reconfigure()
{
    local cur prev words cword
    _init_completion || return

    local opt

    case $prev in
        -f|--frontend)
        opt=( $( printf '%s\n' /usr/share/perl5/Debconf/FrontEnd/* ) )
        opt=( ${opt[@]##*/} )
        opt=( ${opt[@]%.pm} )
        COMPREPLY=( $( compgen -W '${opt[@]}' -- "$cur" ) )
        return 0
        ;;
        -p|--priority)
        COMPREPLY=( $( compgen -W 'low medium high critical' -- "$cur" ) )
        return 0
        ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $(compgen -W '--frontend --priority --all --unseen-only
                      --help --showold --force --terse' -- "$cur" ) )
    else
        COMPREPLY=( $( _comp_dpkg_installed_packages "$cur" ) )
    fi
} &&
complete -F _dpkg_reconfigure -o default dpkg-reconfigure

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # Debian Linux dselect(8) completion                       -*- shell-script -*-

_dselect()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --admindir)
            _filedir -d
            return 0
            ;;
        -D|-debug)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--admindir --help --version --licence
            --expert --debug' -- "$cur" ) )
    else
        COMPREPLY=( $( compgen -W 'access update select install config remove
            quit' -- "$cur" ) )
    fi

    return 0
} &&
complete -F _dselect dselect

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # dsniff completion                                        -*- shell-script -*-

_dsniff()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -r|-w|-f|-p)
            _filedir
            return 0
            ;;
        -i)
            _available_interfaces -a
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" ) -r -w -p' -- "$cur" ) )
    fi

} &&
complete -F _dsniff dsniff

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # mailman dumpdb completion                                -*- shell-script -*-

_dumpdb()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--marshal --pickle --noprint --help' \
            -- "$cur" ) )
    else
        _filedir
    fi

} &&
complete -F _dumpdb dumpdb

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # dumpe2fs(8) completion                                   -*- shell-script -*-

_dumpe2fs()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -o|-V)
            return 0
            ;;
        -i)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        return 0
    fi

    cur=${cur:=/dev/}
    _filedir
} &&
complete -F _dumpe2fs dumpe2fs

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # e2freefrag(8) completion                                 -*- shell-script -*-

_e2freefrag()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -c|-h)
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" -h )' -- "$cur" ) )
        return 0
    fi

    cur=${cur:=/dev/}
    _filedir
} &&
complete -F _e2freefrag e2freefrag

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # e2label(8) completion                                    -*- shell-script -*-

_e2label()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        cur=${cur:=/dev/}
        _filedir
    fi
} &&
complete -F _e2label e2label

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # bash completion for eject(1)                             -*- shell-script -*-

_eject()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h|--help|-V|--version|-c|--changerslot|-x|--cdspeed)
            return
            ;;
        -a|--auto|-i|--manualeject)
            COMPREPLY=( $( compgen -W 'on off' -- "$cur" ) )
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return
    elif [[ $prev == @(-d|--default) ]]; then
        return
    fi

    _cd_devices
    _dvd_devices
} &&
complete -F _eject eject

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # eog(1) completion                                        -*- shell-script -*-

_eog()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -'?'|--help|--help-all|--help-gtk)
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help-all )' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir '@(ani|?(w)bmp|gif|ico|j2k|jp[cefgx2]|jpeg|pcx|pn[gm]|ras|svg?(z)|tga|tif?(f)|x[bp]m)'
} &&
complete -F _eog eog

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # ether-wake(8) completion                                 -*- shell-script -*-

_ether_wake()
{
    local cur prev words cword
    _init_completion -n : || return

    case $prev in
        -i)
            _available_interfaces -a
            return 0
            ;;
        -p)
            return 0
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -u ) -V' -- "$cur" ) )
        return 0
    fi

    _mac_addresses
} &&
complete -F _ether_wake ether-wake

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # evince(1) completion                                     -*- shell-script -*-

_evince()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --help*|-h|--sm-client-id|--class|--name|--screen|--gdk-debug|\
        --gdk-no-debug|--gtk-module|--gtk-debug|--gtk-no-debug|\
        -p|--page-label|-i|--page-index|-l|--find|--display)
            return
            ;;
        --sm-client-state-file)
            _filedir
            return
            ;;
    esac

    $split && return 0

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help-all )' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir '@(@(?(e)ps|?(E)PS|[pf]df|[PF]DF|dvi|DVI)?(.gz|.GZ|.bz2|.BZ2|.xz|.XZ)|cb[rz]|djv?(u)|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)'
} &&
complete -F _evince evince

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # Slackware Linux explodepkg completion                    -*- shell-script -*-

complete -o plusdirs -f -X '!*.t[bglx]z' explodepkg

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # bash export completion                                   -*- shell-script -*-

_export()
{
    local cur prev words cword
    _init_completion -n = || return

    local i action=variable remove=false
    for (( i=1; i < cword; i++ )); do
        case ${words[i]} in
            -p)
                return
                ;;
            -*f*)
                action=function
                ;;&
            -*n*)
                remove=true
                ;;
            -*)
                continue
                ;;
        esac
        break
    done

    [[ $cur == *=\$* ]] && { cur=${cur#*=}; _variables; } && return

    case $cur in
        *=)
            local pval=$( quote "$( eval printf %s \"\$${cur%=}\" )" )
            # Complete previous value if it's not empty.
            if [[ $pval != \'\' ]]; then
                COMPREPLY=( "$pval" )
            else
                cur=${cur#*=}
                _filedir
            fi
            ;;
        *=*)
            cur=${cur#*=}
            _filedir
            ;;
        *)
            if [[ $cword -eq 1 && $cur == -* ]]; then
                COMPREPLY=( $( compgen -W \
                    '-p $( _parse_usage "$1" )' -- "$cur" ) )
                return
            fi
            local suffix
            if ! $remove; then
                suffix+==
                compopt -o nospace
            fi
            COMPREPLY=( $( compgen -A $action -S "$suffix" -- "$cur" ) )
            ;;
    esac
} &&
complete -F _export export

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # faillog(8) completion                                    -*- shell-script -*-

_faillog()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -h|--help|-l|--lock-time|-m|--maximum|-t|--time)
            return 0
            ;;
        -u|--user)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi
} &&
complete -F _faillog faillog

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       _fallocate_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-o'|'--offset'|'-l'|'--length')
			COMPREPLY=( $(compgen -W "bytes" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--keep-size
				--punch-hole
				--dig-holes
				--offset
				--length
				--help
				--verbose
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _fallocate_module fallocate
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # bash completion for fbgs(1)                              -*- shell-script -*-

_fbgs()
{
    local cur prev words cword
    _init_completion || return

    case "$prev" in
        -f|--font)
            local IFS=$'\n'
            COMPREPLY=( $( compgen -W '$( fc-list 2>/dev/null )' -- "$cur" ) )
            return
            ;;
        -m|--mode)
            COMPREPLY=( $( compgen -W '$( sed \
                -n "/^mode/{s/^mode \{1,\}\"\([^\"]\{1,\}\)\"/\1/g;p}" \
                /etc/fb.modes 2> /dev/null )' -- "$cur" ) )
            return
            ;;
        -d|--device)
            COMPREPLY=( $( compgen -f -d -- "${cur:-/dev/}" ) )
            return
            ;;
        -fp|--firstpage|-lp|--lastpage|-r|--resolution|-s|--scroll|-t|\
        --timeout)
            # expect integer value
            COMPREPLY+=( $( compgen -W '{0..9}' ) )
            compopt -o nospace
            return
            ;;
        -T|--vt|-p|--password|-g|--gamma)
            # argument required but no completions available
            return
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--bell --help --password -fp --firstpage
            -lp --lastpage --color -l -xl -xxl --resolution --autozoom
            --{,no}autoup --{,no}autodown --{,no}fitwidth --{,no}verbose
            --{,no}random --vt --scroll --timeout --{,no}once --gamma --font
            --device --mode' -- "$cur" ) )
        [[ $COMPREPLY ]] && return
    fi

    _filedir '?(e)ps|pdf'
} && complete -F _fbgs fbgs

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # bash completion for fbi(1)                               -*- shell-script -*-

_fbi()
{
    local cur prev words cword
    _init_completion || return

    case "$prev" in
        -l|--list)
            _filedir
            return
            ;;
        -r|--resolution)
            COMPREPLY+=( $( compgen -W '{1..5}' ) )
            return
            ;;
        -f|--font)
            local IFS=$'\n'
            COMPREPLY=( $( compgen -W '$( fc-list 2> /dev/null )' -- "$cur" ) )
            return
            ;;
        -m|--mode)
            COMPREPLY=( $( compgen -W '$( sed \
                -n "/^mode/{s/^mode \{1,\}\"\([^\"]\{1,\}\)\"/\1/g;p}" \
                /etc/fb.modes 2> /dev/null )' -- "$cur" ) )
            return
            ;;
        -d|--device)
            COMPREPLY=( $( compgen -f -d -- "${cur:-/dev/}" ) )
            return
            ;;
        --cachemem|--blend|-T|--vt|-s|--scroll|-t|--timeout|-g|--gamma)
            # argument required but no completions available
            return
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--help --version --store --list --text
            --autozoom --{,no}autoup --{,no}autodown --{,no}fitwidth
            --{,no}verbose --{,no}random --{,no}comments --{,no}edit
            --{,no}backup --{,no}preserve --{,no}readahead --cachemem --blend
            --vt --scroll --timeout --{,no}once --resolution --gamma --font
            --device --mode' -- "$cur" ) )
        [[ $COMPREPLY ]] && return
    fi

    # FIXME: It is hard to determine correct supported extensions.
    # fbi can handle any format that imagemagick can plus some others
    _filedir 'bmp|gif|jp?(e)g|pcd|png|p[pgb]m|tif?(f)|webp|xpm|xwd|?(e)ps|pdf|dvi|txt|svg?(z)|cdr|[ot]tf'
} && complete -F _fbi fbi

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      _fdformat_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	DEVS=$(for I in echo /dev/fd*; do if [ -e $I ]; then echo $I; fi; done)
	OPTS="--no-verify --help --version $DEVS"
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
	return 0
}
complete -F _fdformat_module fdformat
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  _fdisk_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-s'|'--getsz')
			COMPREPLY=( $(compgen -W "$(lsblk -pnro name)" -- $cur) )
			return 0
			;;
		'-b'|'--sector-size')
			COMPREPLY=( $(compgen -W "512 1024 2048 4096" -- $cur) )
			return 0
			;;
		'-c'|'--compatibility')
			COMPREPLY=( $(compgen -W "dos nondos" -- $cur) )
			return 0
			;;
		'-L'|'--color')
			COMPREPLY=( $(compgen -W "auto never always" -- $cur) )
			return 0
			;;
		'-u'|'--units')
			COMPREPLY=( $(compgen -W "cylinders sectors" -- $cur) )
			return 0
			;;
		'-C'|'--geom-cylinders'|'-H'|'--geom-heads'|'-S'|'--geom-sectors')
			COMPREPLY=( $(compgen -W "number" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-v'|'--version'|'-V'|'--list')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--sector-size
				--protect-boot
				--compatibility
				--color
				--list
				--type
				--units
				--getsz
				--geom-cylinders
				--geom-heads
				--geom-sectors
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$(lsblk -pnro name)" -- $cur) )
	return 0
}
complete -F _fdisk_module fdisk
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # bash completion for feh(1)                               -*- shell-script -*-

_feh()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        -B|--image-bg)
            COMPREPLY=( $( compgen -W 'checks white black' -- "$cur" ) )
            return
            ;;
        -f|--filelist|-o|--output|-O|--output-only|-\||--start-at)
            _filedir
            return
            ;;
        -K|--caption-path|-C|--fontpath|-j|--output-dir)
            _filedir -d
            return
            ;;
        -e|--font|-M|--menu-font|-@|--title-font)
            # expect string like "dejavu.ttf/12"
            if [[ "$cur" == */* ]]; then # expect integer value
                COMPREPLY=( $( compgen -P "$cur" -W '{0..9}' ) )
                compopt -o nospace
                return
            fi
            local font_path
            # font_path="$( imlib2-config --prefix 2> /dev/null )/share/imlib2/data/fonts"
            # COMPREPLY=( $( cd "$font_path" 2> /dev/null; compgen -f \
            #     -X "!*.@([tT][tT][fF])" -S / -- "$cur" ) )
            for (( i=${#words[@]}-1; i>0; i-- )); do
                if [[ ${words[i]} == -@(C|-fontpath) ]]; then
                    font_path="${words[i+1]}"
                    COMPREPLY+=( $( cd "$font_path" 2> /dev/null; compgen -f \
                        -X "!*.@([tT][tT][fF])" -S / -- "$cur" ) )
                fi
            done
            compopt -o nospace
            return
            ;;
        -T|--theme)
            local conf_path=~/.config/feh/themes
            local theme_name theme_opts
            [[ -r $conf_path ]] || return
            while read theme_name theme_opts; do
                if [[ "$theme_name" == '#'* || "$theme_name" == "" ]]; then
                    continue
                fi
                COMPREPLY+=( $( compgen -W "$theme_name" -- "$cur" ) )
            done < "$conf_path"
            return
            ;;
        -S|--sort)
            COMPREPLY=( $( compgen -W 'name filename width height pixels size
                format' -- "$cur" ) )
            return
            ;;
        -R|--reload|-H|--limit-height|-W|--limit-width|-E|--thumb-height|\
        -y|--thumb-width|-J|--thumb-redraw|--magick-timeout)
            # expect integer value
            COMPREPLY+=( $( compgen -W '{0..9}' ) )
            compopt -o nospace
            return
            ;;
        --zoom)
            # expect integer value or "max", "fill"
            COMPREPLY=( $( compgen -W 'max fill' -- "$cur" ) )
            if [[ ! $cur || ! $COMPREPLY ]]; then
                COMPREPLY+=( $( compgen -W '{0..9}' ) )
                compopt -o nospace
            fi
            return
            ;;
        -a|--alpha)
            COMPREPLY=( $( compgen -W '{0..255}' -- "$cur" ) )
            return
            ;;
        -b|--bg)
            _filedir
            COMPREPLY+=( $( compgen -W 'trans' -- "$cur" ) )
            return
            ;;
        -g|--geometry|--max-dimension|--min-dimension)
            # expect string like 640x480
            if [[ $cur && "$cur" != *x* ]]; then
                COMPREPLY=( x )
            fi
            COMPREPLY+=( $( compgen -W "{0..9}" ) )
            compopt -o nospace
            return
            ;;
        -L|--customlist|--index-info|--info|-D|--slideshow-delay|-~|\
        --thumb-title|-^|--title)
            # argument required but no completions available
            return
            ;;
    esac

    $split && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        [[ $COMPREPLY ]] && return
    fi

    # FIXME: It is hard to determine correct supported extensions.
    # feh can handle any format that imagemagick can plus some others
    _filedir 'xpm|tif?(f)|png|p[npgba]m|iff|?(i)lbm|jp?(e)g|jfi?(f)|gif|bmp|arg?(b)|tga|xcf|ani|ico|?(e)ps|pdf|dvi|txt|svg?(z)|cdr|[ot]tf'
} && complete -F _feh feh

# ex: ts=4 sw=4 et filetype=sh
                # file(1) completion                                       -*- shell-script -*-

_file()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --help|-v|--version|-F|--separator)
            return
            ;;
        -m|--magic-file|-f|--files-from)
            _filedir
            return
            ;;
        -e|--exclude)
            COMPREPLY=( $( compgen -W 'apptype ascii cdf compress elf encoding
                soft tar text tokens troff' -- "$cur" ) )
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return
    fi

    _filedir
} &&
complete -F _file file

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # file-roller(1) completion                                -*- shell-script -*-

_file_roller()
{
    local cur prev words cword split
    _init_completion -s || return

    local exts='@(7z|ace|alz|ar|arj|[bglx]z|bz2|tb?(z)2|cab|cb[rz]|iso?(9660)|Z|t[abglx]z|cpio|deb|[ejrw]ar|exe|?(g)tar|gem|lh[az]|lzh|?(t)lrz|lzma|lzo|wim|swm|rpm|sit|zip|zoo)'

    case $prev in
        -'?'|--help|--help-all|--help-gtk|--help-sm-client)
            return
            ;;
        --sm-client-state-file)
            _filedir
            return
            ;;
        -a|--add-to)
            _filedir "$exts"
            return
            ;;
        -e|--extract-to|--default-dir)
            _filedir -d
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help-all )' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir "$exts"
} &&
complete -F _file_roller file-roller

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # filefrag(8) completion                                   -*- shell-script -*-

_filefrag()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        return 0
    fi

    _filedir
} &&
complete -F _filefrag filefrag

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # filesnarf etc completion                                 -*- shell-script -*-

_snarf()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -i)
            _available_interfaces -a
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
    fi

} &&
complete -F _snarf filesnarf mailsnarf msgsnarf

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # bash completion for GNU find                             -*- shell-script -*-
# This makes heavy use of ksh style extended globs and contains Linux specific
# code for completing the parameter to the -fstype option.

_find()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -maxdepth|-mindepth)
            COMPREPLY=( $( compgen -W '{0..9}' -- "$cur" ) )
            return 0
            ;;
        -newer|-anewer|-cnewer|-fls|-fprint|-fprint0|-fprintf|-name|-iname|\
        -lname|-ilname|-wholename|-iwholename|-samefile)
            _filedir
            return 0
            ;;
        -fstype)
            _fstypes
            [[ $OSTYPE == *bsd* ]] && \
                COMPREPLY+=( $( compgen -W 'local rdonly' -- "$cur" ) )
            return 0
            ;;
        -gid)
            _gids
            return 0
            ;;
        -group)
            COMPREPLY=( $( compgen -g -- "$cur" 2>/dev/null) )
            return 0
            ;;
        -xtype|-type)
            COMPREPLY=( $( compgen -W 'b c d p f l s' -- "$cur" ) )
            return 0
            ;;
        -uid)
            _uids
            return 0
            ;;
        -user)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
        -exec|-execdir|-ok|-okdir)
            words=(words[0] "$cur")
            cword=1
            _command
            return 0
            ;;
        -[acm]min|-[acm]time|-iname|-lname|-wholename|-iwholename|-lwholename|\
        -ilwholename|-inum|-path|-ipath|-regex|-iregex|-links|-perm|-size|\
        -used|-printf|-context)
            # do nothing, just wait for a parameter to be given
            return 0
            ;;
        -regextype)
            COMPREPLY=( $( compgen -W 'emacs posix-awk posix-basic posix-egrep
                posix-extended' -- "$cur" ) )
            return 0
            ;;
    esac

    _expand || return 0

    local i exprfound=false
    # set exprfound to true if there is already an expression present
    for i in ${words[@]}; do
        [[ "$i" = [-\(\),\!]* ]] && exprfound=true && break
    done

    # handle case where first parameter is not a dash option
    if ! $exprfound && [[ "$cur" != [-\(\),\!]* ]]; then
        _filedir -d
        return 0
    fi

    # complete using basic options
    COMPREPLY=( $( compgen -W '-daystart -depth -follow -help
        -ignore_readdir_race -maxdepth -mindepth -mindepth -mount
        -noignore_readdir_race -noleaf -regextype -version -warn -nowarn -xdev
        -amin -anewer -atime -cmin -cnewer -ctime -empty -executable -false
        -fstype -gid -group -ilname -iname -inum -ipath -iregex -iwholename
        -links -lname -mmin -mtime -name -newer -nogroup -nouser -path -perm
        -readable -regex -samefile -size -true -type -uid -used -user
        -wholename -writable -xtype -context -delete -exec -execdir -fls
        -fprint -fprint0 -fprintf -ls -ok -okdir -print -print0 -printf -prune
        -quit' -- "$cur" ) )

    if [[ ${#COMPREPLY[@]} -ne 0 ]]; then
        # this removes any options from the list of completions that have
        # already been specified somewhere on the command line, as long as
        # these options can only be used once (in a word, "options", in
        # opposition to "tests" and "actions", as in the find(1) manpage).
        local -A onlyonce=( [-daystart]=1 [-depth]=1 [-follow]=1 [-help]=1
            [-ignore_readdir_race]=1 [-maxdepth]=1 [-mindepth]=1 [-mount]=1
            [-noignore_readdir_race]=1 [-noleaf]=1 [-nowarn]=1 [-regextype]=1
            [-version]=1 [-warn]=1 [-xdev]=1 )
        local j
        for i in "${words[@]}"; do
            [[ $i && ${onlyonce[$i]} ]] || continue
            for j in ${!COMPREPLY[@]}; do
                [[ ${COMPREPLY[j]} == $i ]] && unset COMPREPLY[j]
            done
        done
    fi

    _filedir

    return 0
} &&
complete -F _find find

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                      # mailman find_member completion                           -*- shell-script -*-

_find_member()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -l|-x|--listname|--exclude)
            _xfunc list_lists _mailman_lists
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--listname --exclude --owners --help' \
            -- "$cur" ) )
    fi

} &&
complete -F _find_member find_member

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      _findmnt_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-p'|'--poll')
			COMPREPLY=( $(compgen -W "=list" -- $cur) )
			return 0
			;;
		'-w'|'--timeout')
			COMPREPLY=( $(compgen -W "timeout" -- $cur) )
			return 0
			;;
		'-d'|'--direction')
			COMPREPLY=( $(compgen -W "forward backward" -- $cur) )
			return 0
			;;
		'-F'|'--tab-file')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
		'-N'|'--task')
			local TID='' I ARR
			for I in /proc/*/mountinfo; do IFS=/ read -ra ARR <<< "$I"; TID+="${ARR[2]} "; done
			COMPREPLY=( $(compgen -W "$TID" -- $cur) )
			return 0
			;;
		'-O'|'--options')
			local MTAB_3RD I
			declare -a TMP_ARR
			declare -A MNT_OPTS
			while read MTAB_3RD; do
				IFS=',' read -ra TMP_ARR <<<"$MTAB_3RD"
				for I in ${TMP_ARR[@]}; do
					MNT_OPTS[$I]='1'
				done
			done < <($1 -rno OPTIONS)
			COMPREPLY=( $(compgen -W "${!MNT_OPTS[@]}" -- $cur) )
			return 0
			;;
		'-o'|'--output')
			local prefix realcur OUTPUT_ALL OUTPUT
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"

			OUTPUT_ALL="SOURCE TARGET FSTYPE OPTIONS VFS-OPTIONS
				FS-OPTIONS LABEL UUID PARTLABEL PARTUUID
				MAJ\:MIN ACTION OLD-TARGET OLD-OPTIONS
				SIZE AVAIL USED USE% FSROOT TID ID
				OPT-FIELDS PROPAGATION FREQ PASSNO"

			for WORD in $OUTPUT_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					OUTPUT="$WORD $OUTPUT"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$OUTPUT" -S ',' -- $realcur) )
			return 0
			;;
		'-t'|'--types')
			local TYPES
			TYPES="adfs affs autofs cifs coda coherent cramfs
				debugfs devpts efs ext2 ext3 ext4 hfs
				hfsplus hpfs iso9660 jfs minix msdos
				ncpfs nfs nfs4 ntfs proc qnx4 ramfs
				reiserfs romfs squashfs smbfs sysv tmpfs
				ubifs udf ufs umsdos usbfs vfat xenix xfs"
			COMPREPLY=( $(compgen -W "$TYPES" -- $cur) )
			return 0
			;;
		'-S'|'--source')
			local DEV_MPOINT
			DEV_MPOINT=$($1 -rno SOURCE | grep ^/dev)
			COMPREPLY=( $(compgen -W "$DEV_MPOINT" -- $cur) )
			return 0
			;;
		'-T'|'--target')
			local DEV_MPOINT
			DEV_MPOINT=$($1 -rno TARGET)
			COMPREPLY=( $(compgen -W "$DEV_MPOINT" -- $cur) )
			return 0
			;;
		'-M'|'--mountpoint')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -o dirnames -- ${cur:-"/"}) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--fstab
				--mtab
				--kernel
				--poll
				--timeout
				--all
				--ascii
				--canonicalize
				--df
				--direction
				--evaluate
				--tab-file
				--first-only
				--invert
				--json
				--list
				--task
				--noheadings
				--notruncate
				--options
				--output
				--pairs
				--raw
				--types
				--nofsroot
				--submounts
				--source
				--target
				--mountpoint
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local DEV_MPOINT
	DEV_MPOINT=$($1 -rno TARGET,SOURCE)
	COMPREPLY=( $(compgen -W "$DEV_MPOINT" -- $cur) )
	return 0
}
complete -F _findmnt_module findmnt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               _flock_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-w'|'--timeout')
			COMPREPLY=( $(compgen -W "seconds" -- $cur) )
			return 0
			;;
		'-E'|'--conflict-exit-code')
			COMPREPLY=( $(compgen -W "{0..255}" -- $cur) )
			return 0
			;;
		'-c'|'--command')
			compopt -o bashdefault
			COMPREPLY=( $(compgen -c -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--shared
				--exclusive
				--unlock
				--nonblock
				--timeout
				--conflict-exit-code
				--close
				--command
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- ${cur:-"/"}) )
	return 0
}
complete -F _flock_module flock
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # freeciv client completions                               -*- shell-script -*-

_civclient()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -l|-S|-t|--log|--Sound|--tiles)
            _filedir
            return 0
            ;;
        -P|--Plugin)
            COMPREPLY=( $( compgen -W 'none esd sdl' -- "$cur" ) )
            return 0
            ;;
        -s|--server)
            _known_hosts_real "$cur"
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    fi

} &&
complete -F _civclient civclient freeciv-gtk2 freeciv-sdl freeciv-xaw

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # freeciv-server completion                                -*- shell-script -*-

_civserver()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -f|-g|-l|-r|--file|--log|--gamelog|--read)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    fi

} &&
complete -F _civserver civserver freeciv-server

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _fsck_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-b')
			COMPREPLY=( $(compgen -W "superblock" -- $cur) )
			return 0
			;;
		'-B')
			COMPREPLY=( $(compgen -W "blocksize" -- $cur) )
			return 0
			;;
		'-j')
			COMPREPLY=( $(compgen -W "external_journal" -- $cur) )
			return 0
			;;
		'-l'|'-L')
			COMPREPLY=( $(compgen -W "bad_blocks_file" -- $cur) )
			return 0
			;;
		'-?')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="-p -n -y -c -f -v -b -B -j -l -L"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$(find -L /dev/ -type b 2>/dev/null)" -- $cur) )
	return 0
}
complete -F _fsck_module fsck
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _fsck.cramfs_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-x'|'--destination')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -o dirnames -- ${cur:-"/"}) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			COMPREPLY=( $(compgen -W "--verbose --blocksize --extract --help --version" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _fsck.cramfs_module fsck.cramfs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 _fsck.minix_module()
{
	local cur OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	case $cur in
		-*)
			OPTS="--list --auto --repair --verbose --super --uncleared --force --help --version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$(lsblk -pnro name)" -- $cur) )
	return 0
}
complete -F _fsck.minix_module fsck.minix
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 _fsfreeze_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--freeze --unfreeze --help --version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local MPOINT
	MPOINT="$(findmnt -t ext2,ext3,ext4,reiserfs,jfs,xfs -o TARGET -n -r)"
	COMPREPLY=( $(compgen -W "$MPOINT" -- $cur) )
	return 0
}
complete -F _fsfreeze_module fsfreeze
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _fstrim_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-o'|'--offset'|'-l'|'--length'|'-m'|'--minimum')
			COMPREPLY=( $(compgen -W "num" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--all
				--offset
				--length
				--minimum
				--verbose
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local MPOINTS
	MPOINTS=$(findmnt -rno SOURCE,TARGET | awk '/^\/dev/{print $2}')
	COMPREPLY=( $(compgen -W "$MPOINTS" -- $cur) )
	return 0
}
complete -F _fstrim_module fstrim
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # bash shell function completion                           -*- shell-script -*-

_function()
{
    local cur prev words cword
    _init_completion || return

    if [[ $1 == @(declare|typeset) ]]; then
        if [[ $prev == -f ]]; then
            COMPREPLY=( $( compgen -A function -- "$cur" ) )
        elif [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        fi
    elif [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -A function -- "$cur" ) )
    else
        COMPREPLY=( "() $( type -- ${words[1]} | sed -e 1,2d )" )
    fi
} &&
complete -F _function function declare typeset

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # fusermount completion                                    -*- shell-script -*-

_fusermount()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h|-V|-o)
            return 0
            ;;
        -u)
            COMPREPLY=( $( compgen -W "$( awk \
                '{ if ($3 ~ /^fuse(\.|$)/) print $2 }' /etc/mtab \
                2>/dev/null )" -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]] ; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -h )' -- "$cur" ) )
    else
        _filedir -d
    fi
} &&
complete -F _fusermount fusermount

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # gcc(1) completion                                        -*- shell-script -*-
#
# The only unusual feature is that we don't parse "gcc --help -v" output
# directly, because that would include the options of all the other backend
# tools (linker, assembler, preprocessor, etc) without any indication that
# you cannot feed such options to the gcc driver directly.  (For example, the
# linker takes a -z option, but you must type -Wl,-z for gcc.)  Instead, we
# ask the driver ("g++") for the name of the compiler ("cc1"), and parse the
# --help output of the compiler.

_gcc()
{
    local cur prev words cword
    _init_completion || return

    _expand || return 0

    local cc backend

    case $1 in
        gcj)
            backend=jc1
            ;;
        gpc)
            backend=gpc1
            ;;
        *77)
            backend=f771
            ;;
        *)
            backend=cc1 # (near-)universal backend
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        cc=$( $1 -print-prog-name=$backend 2>/dev/null )
        [[ $cc ]] || return
        # sink stderr:
        # for C/C++/ObjectiveC it's useless
        # for FORTRAN/Java it's an error
        COMPREPLY=( $( compgen -W "$( $cc --help 2>/dev/null | tr '\t' ' ' |\
           sed -e '/^  *-/!d' -e 's/ *-\([^][ <>]*\).*/-\1/' )" -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    else
        _filedir
    fi
} &&
complete -F _gcc gcc g++ g77 gcj gpc &&
{
    cc  --version 2>/dev/null | grep -q 'GCC\|Debian' && complete -F _gcc cc  || :
    c++ --version 2>/dev/null | grep -q 'GCC\|Debian' && complete -F _gcc c++ || :
}

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #                                                          -*- shell-script -*-
# bash programmable completion for various Common Lisp implementations by
# Nikodemus Siivola <nikodemus@random-state.net>

_gcl()
{
    local cur prev words cword
    _init_completion || return

    # completing an option (may or may not be separated by a space)
    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-eval -load -f -batch -dir -libdir -compile
            -o-file -c-file -h-file -data-file -system-p' -- "$cur" ) )
    else
        _filedir
    fi

    return 0
} &&
complete -F _gcl -o default gcl

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # bash completion for gdb                                  -*- shell-script -*-

_gdb()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        local IFS
        compopt -o filenames
        if [[ "$cur" == */* ]]; then
            # compgen -c works as expected if $cur contains any slashes.
            IFS=$'\n'
            COMPREPLY=( $( PATH="$PATH:." compgen -d -c -- "$cur" ) )
        else
            # otherwise compgen -c contains Bash's built-in commands,
            # functions and aliases. Thus we need to retrieve the program
            # names manually.
            IFS=":"
            local path_array=( $( \
                sed -e 's/:\{2,\}/:/g' -e 's/^://' -e 's/:$//' <<<"$PATH" ) )
            IFS=$'\n'
            COMPREPLY=( $( compgen -d -W '$(find "${path_array[@]}" . \
                -mindepth 1 -maxdepth 1 -not -type d -executable \
                -printf "%f\\n" 2>/dev/null)' -- "$cur" ) )
        fi
    elif [[ $cword -eq 2 ]]; then
        COMPREPLY=( $( compgen -W "$( command ps axo comm,pid | \
            awk '{if ($1 ~ /^'"${prev##*/}"'/) print $2}' )" -- "$cur" ) )
        compopt -o filenames
        COMPREPLY+=( $( compgen -f -X '!?(*/)core?(.+([0-9]))' -o plusdirs \
            -- "$cur" ) )
    fi
} &&
complete -F _gdb gdb

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # mailman genaliases completion                            -*- shell-script -*-

_genaliases()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--quiet --help' -- "$cur" ) )
    fi

} &&
complete -F _genaliases genaliases

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # gendiff(1) completion                                    -*- shell-script -*-

_gendiff()
{
    local cur prev words cword
    _init_completion -o @(diff|patch) || return

    [[ $cword -eq 1 ]] && _filedir -d
} &&
complete -F _gendiff gendiff

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # bash completion for mkisofs/genisoimage                  -*- shell-script -*-

_mkisofs()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -o|-abstract|-biblio|-check-session|-copyright|-log-file| \
        -root-info|-prep-boot|-*-list)
            _filedir
            return 0
            ;;
        -*-charset)
            COMPREPLY=( $( compgen -W '$( mkisofs -input-charset \
                    help 2>&1 | tail -n +3 )' -- "$cur" ) )
            return 0
            ;;
        -uid)
            _uids
            return 0
            ;;
        -gid)
            _gids
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    else
        _filedir
    fi

} &&
complete -F _mkisofs mkisofs genisoimage

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # bash completion for getent                               -*- shell-script -*-

_getent()
{
    local cur prev words cword split
    _init_completion -s || return

    local i db
    for (( i=1; i < cword; i++ )); do
        case ${words[i]} in
            -V|--version|--usage|-'?'|--help)
                return
                ;;
            -s|--service)
                (( i++ ))
                ;;
            -*)
                ;;
            *)
                # First non-option value is the db
                db=${words[i]}
                break
                ;;
        esac
    done

    case $db in
        passwd)
            COMPREPLY=( $( compgen -u "$cur"  ) )
            return 0
            ;;
        group)
            COMPREPLY=( $( compgen -g "$cur"  ) )
            return 0
            ;;
        services)
            COMPREPLY=( $( compgen -s "$cur"  ) )
            return 0
            ;;
        hosts)
            COMPREPLY=( $( compgen -A hostname "$cur"  ) )
            return 0
            ;;
        protocols|networks|ahosts|ahostsv4|ahostsv6|rpc)
            COMPREPLY=( $( compgen -W "$( getent $db | \
                awk '{ print $1 }' )" -- "$cur" ) )
            return 0
            ;;
        aliases|shadow|gshadow)
            COMPREPLY=( $( compgen -W "$( getent $db | cut -d: -f1 )" \
                -- "$cur" ) )
            return 0
            ;;
        ethers|netgroup)
            return
            ;;
    esac

    case $prev in
        -s|--service)
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    elif [[ -z $db ]]; then
        COMPREPLY=( $( compgen -W 'passwd group hosts services protocols
            networks ahosts ahostsv4 ahostsv6 aliases ethers netgroup rpc
            shadow gshadow' -- "$cur" ) )
    fi
} &&
complete -F _getent getent

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        _getopt_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-l'|'--longoptions')
			COMPREPLY=( $(compgen -W "longopts" -- $cur) )
			return 0
			;;
		'-n'|'--name')
			COMPREPLY=( $(compgen -W "name" -- $cur) )
			return 0
			;;
		'-o'|'--options')
			COMPREPLY=( $(compgen -W "optstring" -- $cur) )
			return 0
			;;
		'-s'|'--shell')
			COMPREPLY=( $(compgen -W "sh bash csh tcsh" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--alternative --help --longoptions --name --options --quiet --quiet-output --shell --test --unquoted --version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	return 0
}
complete -F _getopt_module getopt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # gkrellm(1) completion                                    -*- shell-script -*-

_gkrellm()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -t|--theme)
            _filedir -d
            return 0
            ;;
        -p|--plugin)
            _filedir so
            return 0
            ;;
        -s|--server)
            _known_hosts_real "$cur"
            return 0
            ;;
        -l|--logfile)
            _filedir
            return 0
            ;;
        -g|--geometry|-c|--config|-P|--port|-d|--debug-level)
            # Argument required but no completions available
            return 0
            ;;
        -h|--help|-v|--version)
            # All other options are noop with these
            return 0
            ;;
    esac

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
} &&
complete -F _gkrellm gkrellm gkrellm2

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # Gnatmake completion                                      -*- shell-script -*-
# by Ralf_Schroth@t-online.de (Ralf Schroth)

_gnatmake()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        # relevant (and less relevant ;-) )options completion
        COMPREPLY=( $( compgen -W '-a -c -f -i -j -k -m -M -n -o -q -s -v -z
           -aL -A -aO -aI -I -I- -L -nostdinc -nostdlib -cargs -bargs -largs
           -fstack-check -fno-inline -g -O1 -O0 -O2 -O3 -gnata -gnatA -gnatb
           -gnatc -gnatd -gnatD -gnate -gnatE -gnatf -gnatF -gnatg -gnatG
           -gnath -gnati -gnatk -gnatl -gnatL -gnatm -gnatn -gnato -gnatO
           -gnatp -gnatP -gnatq -gnatR -gnats -gnatt -gnatT -gnatu -gnatU
           -gnatv -gnatws -gnatwe -gnatwl -gnatwu -gnatW -gnatx -gnatX -gnaty
           -gnatz -gnatZ -gnat83' -- "$cur" ) )
    else
        # source file completion
        _filedir '@(adb|ads)'
    fi
} &&
complete -F _gnatmake gnatmake

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # gnome-mplayer(1) completion                              -*- shell-script -*-

_gnome_mplayer()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -'?'|--help|--help-all|--help-gtk)
            return
            ;;
        --showcontrols|--showsubtitles|--autostart)
            COMPREPLY=( $( compgen -w '0 1' -- "$cur" ) )
            return
            ;;
        --subtitle)
            _filedir '@(srt|sub|txt|utf|rar|mpsub|smi|js|ssa|ass)'
            return
            ;;
        --tvdriver)
            COMPREPLY=( $( compgen -W 'v4l v4l2' -- "$cur" ) )
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help-all )' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir
} &&
complete -F _gnome_mplayer gnome-mplayer

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # gpasswd(1) completion                                    -*- shell-script -*-

_gpasswd()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -a|--add|-d|--delete|-A|--administrators|-M|--members)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        # TODO: only -A and -M can be combined
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

    COMPREPLY=( $( compgen -g -- "$cur" ) )
} &&
complete -F _gpasswd gpasswd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # bash completion for gpg                                  -*- shell-script -*-

_gpg()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -s|--sign|--clearsign|--decrypt-files|--load-extension)
            _filedir
            return 0
            ;;
        --export|--sign-key|--lsign-key|--nrsign-key|--nrlsign-key|--edit-key)
            # return list of public keys
            COMPREPLY=( $( compgen -W "$( gpg --list-keys 2>/dev/null | \
                sed -ne 's@^pub.*/\([^ ]*\).*$@\1@p' \
                    -ne 's@^.*\(<\([^>]*\)>\).*$@\2@p' )" -- "$cur" ) )
            return 0
            ;;
        -r|--recipient)
            COMPREPLY=( $( compgen -W "$( gpg --list-keys 2>/dev/null | \
                sed -ne 's@^.*<\([^>]*\)>.*$@\1@p')" -- "$cur" ) )
            if [[ -e ~/.gnupg/gpg.conf ]]; then
                COMPREPLY+=( $( compgen -W "$( sed -ne \
                    's@^[ \t]*group[ \t][ \t]*\([^=]*\).*$@\1@p' \
                    ~/.gnupg/gpg.conf  )" -- "$cur" ) )
            fi
            return 0
        ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$(gpg --dump-options)' -- "$cur" ) )
    fi
} &&
complete -F _gpg -o default gpg

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # gpg2(1) completion                                       -*- shell-script -*-

_gpg2()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --homedir)
            _filedir -d
            return 0
            ;;
        -s|--sign|--clearsign|--options|--decrypt)
            _filedir
            return 0
            ;;
        --export|--sign-key|--lsign-key|--nrsign-key|--nrlsign-key|--edit-key)
            # return list of public keys
            COMPREPLY=( $( compgen -W "$( gpg2 --list-keys 2>/dev/null | \
                sed -ne 's@^pub.*/\([^ ]*\).*$@\1@p' \
                    -ne 's@^.*\(<\([^>]*\)>\).*$@\2@p' )" -- "$cur" ) )
            return 0
            ;;
        -r|--recipient)
            COMPREPLY=( $( compgen -W "$( gpg2 --list-keys 2>/dev/null | \
                sed -ne 's@^.*<\([^>]*\)>.*$@\1@p')" -- "$cur" ) )
            if [[ -e ~/.gnupg/gpg.conf ]]; then
                COMPREPLY+=( $( compgen -W "$( sed -ne \
                    's@^[ \t]*group[ \t][ \t]*\([^=]*\).*$@\1@p' \
                    ~/.gnupg/gpg.conf)" -- "$cur" ) )
            fi
        return 0
        ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$(gpg2 --dump-options)' -- "$cur" ) )
    fi
} &&
complete -F _gpg2 -o default gpg2

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # bash completion for gphoto2(1)                           -*- shell-script -*-

_gphoto2()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --debug-logfile)
            _filedir
            return 0
            ;;
        --hook-script)
            _filedir
            return 0
            ;;
        --filename)
            _filedir
            return 0
            ;;
        -u|--upload-file)
            _filedir
            return 0
            ;;
        --port)
            COMPREPLY=( $(compgen -W "$( gphoto2 --list-ports 2>/dev/null | \
                tail -n +4 | awk '{ print $1 }'  )" -- "$cur") )
            return 0
            ;;
        --camera)
            local IFS=$'\n'
            COMPREPLY=( $(compgen -W "$( gphoto2 --list-cameras 2>/dev/null | \
                tail -n +3 | awk -F'"' '{ print $2 }'  )" -- "$cur") )
            return 0
            ;;
        --get-config|--set-config|--set-config-index|--set-config-value)
            COMPREPLY=( $(compgen -W "$( gphoto2 --list-config 2>/dev/null \
                )" -- "$cur") )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

} &&
complete -F _gphoto2 gphoto2

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # gprof(1) completion                                      -*- shell-script -*-

_gprof()
{
    local cur prev words cword split
    _init_completion -s || return

    case $cur in
        -A*|-C*|-J*|-p*|-P*|-q*|-Q*|-n*|-N*|-d*)
            return
            ;;
        -S*)
            cur=${cur:2}
            _filedir
            COMPREPLY=( "${COMPREPLY[@]/#/-S}" )
            return
            ;;
        -O*)
            cur=${cur:2}
            COMPREPLY=( $( compgen -P -O -W 'auto bsd 4.4bsd magic prof' \
                -- "$cur" ) )
            return
            ;;
    esac

    case $prev in
        -I|--directory-path)
            _filedir -d
            return
            ;;
        -R|--file-ordering|--external-symbol-table)
            _filedir
            return
            ;;
        -w|--width|-k|-m|--min-count|-h|--help|-e|-E|-f|-F)
            return
            ;;
        --file-format)
            COMPREPLY=( $( compgen -W 'auto bsd 4.4bsd magic prof' \
                -- "$cur" ) )
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '--annotated-source --brief --exec-counts
            --file-info --directory-path --no-annotated-source --print-path
            --flat-profile --no-flat-profile --graph --no-graph --table-length=
            --separate-files --no-exec-counts --function-ordering
            --file-ordering --traditional --width= --all-lines --demangle
            --no-demangle --no-static --static-call-graph
            --ignore-non-functions -k --line --min-count= --time= --no-time=
            --external-symbol-table= --display-unused-functions --debug --help
            --file-format= --sum --version' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir
} &&
complete -F _gprof gprof

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # groupadd(8) completion                                   -*- shell-script -*-

_groupadd()
{
    local cur prev words cword split
    _init_completion -s || return

    # TODO: if -o/--non-unique is given, could complete on existing gids
    #       with -g/--gid

    case $prev in
        -g|--gid|-K|--key|-p|--password)
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi
} &&
complete -F _groupadd groupadd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # groupdel(8) completion                                   -*- shell-script -*-

complete -g groupdel

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # groupmems(8) completion                                  -*- shell-script -*-

_groupmems()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -a|--add|-d|--delete)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
        -g|--group)
            COMPREPLY=( $( compgen -g -- "$cur" ) )
            return 0
            ;;
        -R|--root)
            _filedir -d
            return 0
            ;;
    esac

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
} &&
complete -F _groupmems groupmems

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # groupmod(8) completion                                   -*- shell-script -*-

_groupmod()
{
    local cur prev words cword split
    _init_completion -s || return

    # TODO: if -o/--non-unique is given, could complete on existing gids
    #       with -g/--gid

    case $prev in
        -g|--gid|-h|--help|-n|--new-name|-p|--password)
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi

    COMPREPLY=( $( compgen -g -- "$cur" ) )
} &&
complete -F _groupmod groupmod

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # growisofs(1) completion                                  -*- shell-script -*-

_growisofs()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -version|-speed)
            return 0
            ;;
        -Z|-M)
            compopt -o nospace
            _dvd_devices
            return 0
            ;;
        /?(r)dev/*)
            if [[ $cur == =* ]] ; then
                # e.g. /dev/dvd=foo.iso, /dev/dvdrw=/dev/zero
                cur="${cur#=}"
                _filedir
                return 0
            fi
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        # TODO: mkisofs options
        COMPREPLY=( $( compgen -W '-dvd-compat -overburn -speed= -Z -M' \
            -- "$cur" ) )
        [[ ${COMPREPLY[@]} == *= ]] && compopt -o nospace
        return 0
    fi

    _filedir
} &&
complete -F _growisofs growisofs

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # grpck(8) completion                                      -*- shell-script -*-

_grpck()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
        return 0
    fi

    _filedir
} &&
complete -F _grpck grpck

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # bash completion for gzip                                 -*- shell-script -*-

_gzip()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -b|--blocksize|-S|--suffix|-h|--help|-V|--version)
            return 0
            ;;
        -p|--processes)
            COMPREPLY=( $( compgen -W "{1..$(_ncpus)}" -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) {-1..-9}' \
            -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi

    local IFS=$'\n' xspec="*.@(gz|t[ag]z)"

    if [[ "$prev" == --* ]]; then
        [[ "$prev" == --decompress || \
            "$prev" == --list || \
            "$prev" == --test ]] && xspec="!"$xspec
        [[ "$prev" == --force ]] && xspec=
    elif [[ "$prev" == -* ]]; then
        [[ "$prev" == -*[dlt]* ]] && xspec="!"$xspec
        [[ "$prev" == -*f* ]] && xspec=
    fi

    _expand || return 0

    compopt -o filenames
    COMPREPLY=( $( compgen -f -X "$xspec" -- "$cur" ) \
        $( compgen -d -- "$cur" ) )
} &&
complete -F _gzip gzip pigz

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # bash completion for bluez utils                          -*- shell-script -*-

_bluetooth_adresses()
{
    if [[ -n ${COMP_BLUETOOTH_SCAN:-} ]]; then
        COMPREPLY+=( $( compgen -W "$( hcitool scan | \
            awk '/^\t/{print $1}' )" -- "$cur" ) )
    fi
}

_bluetooth_devices()
{
    COMPREPLY+=( $( compgen -W "$( hcitool dev | \
        awk '/^\t/{print $1}' )" -- "$cur" ) )
}

_bluetooth_services()
{
    COMPREPLY=( $( compgen -W 'DID SP DUN LAN FAX OPUSH FTP HS HF HFAG SAP NAP
        GN PANU HCRP HID CIP A2SRC A2SNK AVRCT AVRTG UDIUE UDITE SYNCML' \
            -- "$cur" ) )
}

_bluetooth_packet_types()
{
    COMPREPLY=( $( compgen -W 'DM1 DM3 DM5 DH1 DH3 DH5 HV1 HV2 HV3' \
        -- "$cur" ) )
}

_hcitool()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -i)
            _bluetooth_devices
            return 0
            ;;
        --role)
            COMPREPLY=( $( compgen -W 'm s' -- "$cur" ) )
            return 0
            ;;
        --pkt-type)
            _bluetooth_packet_types
            return 0
            ;;
    esac

    $split && return 0

    local arg
    _get_first_arg
    if [[ -z $arg ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        else
            COMPREPLY=( $( compgen -W 'dev inq scan name info spinq epinq cmd
                con cc dc sr cpt rssi lq tpl afh lst auth enc key clkoff
                clock' -- "$cur" ) )
        fi
    else
        case $arg in
            name|info|dc|rssi|lq|afh|auth|key|clkoff|lst)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_adresses
                fi
                ;;
            cc)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '--role --pkt-type' -- "$cur" ) )
                else
                    _count_args
                    if [[ $args -eq 2 ]]; then
                        _bluetooth_adresses
                    fi
                fi
                ;;
            sr)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_adresses
                else
                    COMPREPLY=( $( compgen -W 'master slave' -- "$cur" ) )
                fi
                ;;
            cpt)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_adresses
                else
                    _bluetooth_packet_types
                fi
                ;;
            tpl|enc|clock)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_adresses
                else
                    COMPREPLY=( $( compgen -W '0 1' -- "$cur" ) )
                fi
                ;;
        esac
    fi
} &&
complete -F _hcitool hcitool

_sdptool()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        --bdaddr)
            _bluetooth_adresses
            return 0
            ;;
    esac

    $split && return 0

    local arg
    _get_first_arg
    if [[ -z $arg ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        else
            COMPREPLY=( $( compgen -W 'search browse records add del get
                setattr setseq' -- "$cur" ) )
        fi
    else
        case $arg in
            search)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '--bdaddr --tree --raw --xml' \
                        -- "$cur" ) )
                else
                    _bluetooth_services
                fi
                ;;
            browse|records)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '--tree --raw --xml' -- "$cur" ) )
                else
                    _bluetooth_adresses
                fi
                ;;
            add)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '--handle --channel' -- "$cur" ) )
                else
                    _bluetooth_services
                fi
                ;;
            get)
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W '--bdaddr --tree --raw --xml' \
                        -- "$cur" ) )
                fi
                ;;
        esac
    fi
} &&
complete -F _sdptool sdptool

_l2ping()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -i)
            _bluetooth_devices
            return 0
            ;;
        -s|-c|-t|-d)
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
    else
        _bluetooth_adresses
    fi
} &&
complete -F _l2ping l2ping

_rfcomm()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -f|--config)
            _filedir
            return 0
            ;;
        -i)
            _bluetooth_devices
            _bluetooth_adresses
            return 0
            ;;
    esac

    local arg
    _get_first_arg
    if [[ -z $arg ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        else
            COMPREPLY=( $( compgen -W 'show connect listen watch bind
                release' -- "$cur" ) )
        fi
    else
        _count_args
        if [[ $args -eq 2 ]]; then
            _bluetooth_devices
        else
            case $arg in
                connect|bind)
                    if [[ $args -eq 3 ]]; then
                        _bluetooth_adresses
                    fi
                    ;;
            esac
        fi
    fi
} &&
complete -F _rfcomm rfcomm

_ciptool()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -i)
            _bluetooth_devices
            _bluetooth_adresses
            return 0
            ;;
    esac

    local arg
    _get_first_arg
    if [[ -z $arg ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        else
            COMPREPLY=( $( compgen -W 'show search connect release loopback' \
                -- "$cur" ) )
        fi
    else
        case $arg in
            connect|release|loopback)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_adresses
                fi
                ;;
        esac
    fi
} &&
complete -F _ciptool ciptool

_dfutool()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -d|--device)
            _bluetooth_devices
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    else
        local args
        _count_args
        case $args in
            1)
                COMPREPLY=( $( compgen -W 'verify modify upgrade archive' \
                    -- "$cur" ) )
                ;;
            2)
                _filedir
                ;;
        esac
    fi
} &&
complete -F _dfutool dfutool

_hciconfig()
{
    local cur prev words cword
    _init_completion || return

    local arg
    _get_first_arg
    if [[ -z $arg ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '--help --all' -- "$cur" ) )
        else
            COMPREPLY=( $( compgen -W 'up down reset rstat auth noauth encrypt
                noencrypt secmgr nosecmgr piscan noscan iscan pscan ptype name
                class voice iac inqmode inqdata inqtype inqparams pageparms
                pageto afhmode aclmtu scomtu putkey delkey commands features
                version revision lm' -- "$cur" ) )
        fi
    else
        case $arg in
            putkey|delkey)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_adresses
                fi
                ;;
            lm)
                _count_args
                if [[ $args -eq 2 ]]; then
                    COMPREPLY=( $( compgen -W 'MASTER SLAVE NONE ACCEPT' \
                        -- "$cur" ) )
                fi
                ;;
            ptype)
                _count_args
                if [[ $args -eq 2 ]]; then
                    _bluetooth_packet_types
                fi
                ;;
        esac
    fi
} &&
complete -F _hciconfig hciconfig

_hciattach()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-n -p -t -b -s -l' -- "$cur" ) )
    else
        local args
        _count_args
        case $args in
            1)
                COMPREPLY=( $( printf '%s\n' /dev/tty* ) )
                COMPREPLY=( $( compgen -W '${COMPREPLY[@]}
                    ${COMPREPLY[@]#/dev/}' -- "$cur" ) )
                ;;
            2)
                COMPREPLY=( $( compgen -W 'any ericsson digi xircom csr bboxes
                    swave bcsp 0x0105 0x080a 0x0160 0x0002' -- "$cur" ) )
                ;;
            3)
                COMPREPLY=( $( compgen -W '9600 19200 38400 57600 115200 230400
                    460800 921600' -- "$cur" ) )
                ;;
            4)
                COMPREPLY=( $( compgen -W 'flow noflow' -- "$cur" ) )
                ;;
            5)
                _bluetooth_adresses
                ;;
        esac
    fi
} &&
complete -F _hciattach hciattach

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # hddtemp(8) completion                                    -*- shell-script -*-

_hddtemp()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -f|--file)
            _filedir db
            return
            ;;
        -l|--listen)
            _ip_addresses
            return
            ;;
        -u|--unit)
            COMPREPLY=( $( compgen -W 'C F' -- "$cur" ) )
            return
            ;;
        -p|--port|-s|--separator|-S|--syslog|-v|--version|-h|-\?|--help)
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) --help' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    else
        cur=${cur:=/dev/}
        _filedir
    fi
} &&
complete -F _hddtemp hddtemp

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # hexdump(1) completion                                    -*- shell-script -*-

_hexdump()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -V|-e|-n|-s)
            return
            ;;
        -f)
            _filedir
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        local opts="$( _parse_help "$1" )"
        [[ $opts ]] || opts="$( _parse_usage "$1" )"
        COMPREPLY=( $( compgen -W "$opts" -- "$cur" ) )
        return
    fi

    _filedir
} &&
complete -F _hexdump hexdump hd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # hid2hci completion                                       -*- shell-script -*-

_hid2hci()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--help --quiet -0 --tohci -1 --tohid' \
            -- "$cur" ) )
    fi
} &&
complete -F _hid2hci hid2hci

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # hostnamectl(1) completion                               -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2010 Ran Benita
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local w word=$1; shift
        for w in "$@"; do
                [[ $w = "$word" ]] && return
        done
}

_hostnamectl() {
        local i verb comps
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local OPTS='-h --help --version --transient --static --pretty
                    --no-ask-password -H --host --machine'

        if [[ $cur = -* ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
                return 0
        fi

        local -A VERBS=(
                [STANDALONE]='status'
                     [ICONS]='set-icon-name'
                      [NAME]='set-hostname set-deployment set-location'
                   [CHASSIS]='set-chassis'
        )

        for ((i=0; i < COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]}; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        if [[ -z $verb ]]; then
                comps=${VERBS[*]}
        elif __contains_word "$verb" ${VERBS[CHASSIS]}; then
                comps='desktop laptop server tablet handset watch embedded vm container'
        elif __contains_word "$verb" ${VERBS[STANDALONE]} ${VERBS[ICONS]} ${VERBS[NAME]}; then
                comps=''
        fi

        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
}

complete -F _hostnamectl hostnamectl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # bash completion for hping2                               -*- shell-script -*-

_hping2()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -I|--interface)
            _available_interfaces
            return 0
            ;;
        -a|--spoof)
            _known_hosts_real "$cur"
            return 0
            ;;
        -o|--tos)
            COMPREPLY=( $( compgen -W '02 04 08 10' ) )
            return 0
            ;;
        -E|--file)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    else
        _known_hosts_real "$cur"
    fi
} &&
complete -F _hping2 hping hping2 hping3

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # htop(1) completion                                       -*- shell-script -*-

_htop()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        -s|--sort-key)
            COMPREPLY=( $( compgen -W '$( "$1" -s help )' -- "$cur" ) )
            return
            ;;
        -u|--user)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return
            ;;
        -d|--delay)
            # argument required but no completions available
            return
            ;;
    esac

    $split && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi
} && complete -F _htop htop

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # htpasswd(1) completion                                   -*- shell-script -*-

_htpasswd()
{
    local cur prev words cword
    _init_completion || return

    local i o=0 # $o is index of first non-option argument
    for (( i=1; i <= cword; i++ )); do
        case ${words[i]} in
            -*n*) return       ;;
            -*)                ;;
            *)    o=$i ; break ;;
        esac
    done

    if [[ $o -eq 0 || $o -eq $cword ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
            return
        fi
        # Password file (first non-option argument)
        _filedir

    elif [[ $o -eq $cword-1 ]]; then
        # Username (second non-option argument)
        COMPREPLY=( $( compgen -W \
            '$( cut -d: -f1 "${words[o]}" 2>/dev/null )' -- "$cur" ) )
    fi
} &&
complete -F _htpasswd htpasswd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           _hwclock_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-f'|'--rtc'|'--adjfile')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
		'--date')
			COMPREPLY=( $(compgen -W "date" -- $cur) )
			return 0
			;;
		'--epoch')
			COMPREPLY=( $(compgen -W "year" -- $cur) )
			return 0
			;;
		'-h'|'-?'|'--help'|'-v'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--help
				--show
				--set
				--hctosys
				--systohc
				--systz
				--adjust
				--compare
				--getepoch
				--setepoch
				--predict
				--version
				--utc
				--localtime
				--rtc
				--directisa
				--badyear
				--date
				--epoch
				--noadjfile
				--adjfile
				--test
				--debug"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	return 0
}
complete -F _hwclock_module hwclock
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # iconv(1) completion                                      -*- shell-script -*-

_iconv()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -'?'|--help|--usage|-V|--version|--unicode-subst|--byte-subst|\
        --widechar-subst)
            return 0
            ;;
        -f|--from-code|-t|--to-code)
            COMPREPLY=( $( compgen -W '$( iconv -l | \
                sed -e "s@/*\$@@" -e "s/[,()]//g" )' -- "$cur" ) )
            return 0
            ;;
        -o|--output)
            _filedir
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" = -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi
} &&
complete -F _iconv -o default iconv

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # id(1) completion                                         -*- shell-script -*-

_id()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        local opts=$( _parse_help "$1" )
        [[ $opts ]] || opts="-G -g -u" # POSIX fallback
        COMPREPLY=( $( compgen -W "$opts" -- "$cur" ) )
    else
        COMPREPLY=( $( compgen -u "$cur" ) )
    fi
} &&
complete -F _id id

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # idn(1) completion                                        -*- shell-script -*-

_idn()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -h|--help|-V|--version)
            return
            ;;
        -p|--profile)
            COMPREPLY=( $( compgen -W 'Nameprep iSCSI Nodeprep Resourceprep
                trace SASLprep' -- "$cur" ) )
            return
            ;;
    esac

    if ! $split && [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    fi
} &&
complete -F _idn idn

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # iftop(8) completion                                      -*- shell-script -*-

_iftop()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h|-f|-F|-m)
            return 0
            ;;
        -i)
            _available_interfaces -a
            return 0
            ;;
        -c)
            _filedir
            return 0
            ;;
    esac

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" -h )' -- "$cur" ) )
} &&
complete -F _iftop iftop

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # Red Hat & Debian GNU/Linux if{up,down} completion        -*- shell-script -*-

_userland GNU || return 1

_ifupdown()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        _configured_interfaces
        COMPREPLY=( $(compgen -W '${COMPREPLY[@]}' -- "$cur") )
    fi

    return 0
} &&
complete -F _ifupdown ifup ifdown ifstatus

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # bash completion for info                                 -*- shell-script -*-

_info()
{
    local cur prev words cword split
    _init_completion -s || return

    _expand || return 0

    # default completion if parameter looks like a path
    if [[ "$cur" == @(*/|[.~])* ]]; then
        _filedir
        return 0
    fi

    case $prev in
        -k|--apropos|--index-search|-n|--node|-h|--help|-v|--version)
            return
            ;;
        -d)
            if [[ ${1##*/} == info ]]; then
                _filedir -d
                return
            fi
            ;;
        --directory)
            _filedir -d
            return
            ;;
        --dribble|-f|--file|-o|--output|--restore|-r|--raw-filename|--rcfile)
            _filedir
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    local i infopath=/usr/share/info

    if [[ $INFOPATH == *: ]]; then
        infopath=${INFOPATH}${infopath}
    elif [[ ${INFOPATH:+set} ]]; then
        infopath=$INFOPATH
    fi

    infopath=$infopath:
    if [[ -n $cur ]]; then
        infopath="${infopath//://$cur* }"
    else
        infopath="${infopath//:// }"
    fi

    # redirect stderr for when path doesn't exist
    COMPREPLY=( $( eval command ls "$infopath" 2>/dev/null ) )
    # weed out directory path names and paths to info pages
    COMPREPLY=( ${COMPREPLY[@]##*/?(:)} )
    # weed out info dir file
    for (( i=0 ; i < ${#COMPREPLY[@]} ; ++i )); do
        [[ ${COMPREPLY[$i]} == dir ]] && unset COMPREPLY[$i]
    done
    # strip suffix from info pages
    COMPREPLY=( ${COMPREPLY[@]%.@(gz|bz2|xz|lzma)} )
    COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )

    return 0
} &&
complete -F _info info pinfo

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # mailman inject completion                                -*- shell-script -*-

_inject()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -l|--listname)
            _xfunc list_lists _mailman_lists
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--listname --queue --help' -- "$cur" ) )
    else
        _filedir
    fi

} &&
complete -F _inject inject

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # Linux insmod(8) completion                               -*- shell-script -*-

_insmod()
{
    local cur prev words cword
    _init_completion || return

    # do filename completion for first argument
    if [[ $cword -eq 1 ]]; then
        _filedir '@(?(k)o?(.gz))'
    else # do module parameter completion
        COMPREPLY=( $( compgen -W "$( PATH="$PATH:/sbin" modinfo \
            -p ${words[1]} 2>/dev/null | cut -d: -f1 )" -- "$cur" ) )
    fi
} &&
complete -F _insmod insmod insmod.static

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # Slackware Linux installpkg completion                    -*- shell-script -*-

_installpkg()
{
    local cur prev words cword
    _init_completion || return

    case "$prev" in
        --root)
            _filedir -d
            return 0
            ;;
        --priority)
            COMPREPLY=( $( compgen -W 'ADD REC OPT SKP' -- "$cur" ) )
            return 0
            ;;
        --tagfile)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--warn --md5sum --root --infobox --terse
            --menu --ask --priority --tagfile' -- "$cur" ) )
        return 0
    fi

    _filedir "t[bglx]z"
} && complete -F _installpkg installpkg

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # interdiff(1) completion                                  -*- shell-script -*-

_interdiff()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -U|--unified|-p|--strip-match|-d|--drop-context)
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    local exts='@(?(d)patch|dif?(f))' word
    for word in ${words[@]}; do
        if [[ $word == -@(z|-decompress) ]]; then
            exts+='?(.@(gz|bz2))'
            break
        fi
    done
    _filedir "$exts"
} &&
complete -F _interdiff interdiff

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # invoke-rc.d(8) completion                                -*- shell-script -*-
#
# Copyright (C) 2004 Servilio Afre Puentes <servilio@gmail.com>

_invoke_rc_d()
{
    local cur prev words cword
    _init_completion || return

    local sysvdir services options valid_options

    [[ -d /etc/rc.d/init.d ]] && sysvdir=/etc/rc.d/init.d \
        || sysvdir=/etc/init.d

    services=( $( printf '%s ' $sysvdir/!(README*|*.sh|$_backup_glob) ) )
    services=( ${services[@]#$sysvdir/} )
    options=( --help --quiet --force --try-anyway --disclose-deny --query \
        --no-fallback )

    if [[ ($cword -eq 1) || ("$prev" == --* ) ]]; then
    valid_options=( $( \
        tr " " "\n" <<<"${words[@]} ${options[@]}" \
        | sed -ne "/$( sed "s/ /\\\\|/g" <<<"${options[@]}" )/p" \
        | sort | uniq -u \
        ) )
    COMPREPLY=( $( compgen -W '${valid_options[@]} ${services[@]}' -- "$cur" ) )
    elif [[ -x $sysvdir/$prev ]]; then
        COMPREPLY=( $( compgen -W '`sed -e "y/|/ /" \
            -ne "s/^.*Usage:[ ]*[^ ]*[ ]*{*\([^}\"]*\).*$/\1/p" \
            $sysvdir/$prev`' -- "$cur" ) )
    else
        COMPREPLY=()
    fi

    return 0
} &&
complete -F _invoke_rc_d invoke-rc.d

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               _ionice_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-c'|'--class')
			COMPREPLY=( $(compgen -W "{0..3} none realtime best-effort idle" -- $cur) )
			return 0
			;;
		'-n'|'--classdata')
			COMPREPLY=( $(compgen -W "{0..7}" -- $cur) )
			return 0
			;;
		'-p'|'--pid')
			local PIDS
			PIDS=$(for I in /proc/[0-9]*; do echo ${I##"/proc/"}; done)
			COMPREPLY=( $(compgen -W "$PIDS" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--class --classdata --pid --ignore --version --help"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _ionice_module ionice
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # ip(8) completion                                         -*- shell-script -*-

_iproute2_etc()
{
    COMPREPLY+=( $( compgen -W \
        "$( awk '!/#/ { print $2 }' /etc/iproute2/$1 2>/dev/null )" \
        -- "$cur" ) )
}

_ip()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -V|-Version|-rc|-rcvbuf)
            return 0
            ;;
        -f|-family)
            COMPREPLY=( $( compgen -W 'inet inet6 ipx dnet link' -- "$cur" ) )
            return 0
            ;;
        -b|-batch)
            _filedir
            return 0
            ;;
        -force)
            COMPREPLY=( $( compgen -W '-batch' -- "$cur" ) )
            return 0
            ;;
    esac

    local subcword cmd subcmd
    for (( subcword=1; subcword < ${#words[@]}-1; subcword++ )); do
        [[ ${words[subcword]} == -b?(atch) ]] && return 0
        [[ -n $cmd ]] && subcmd=${words[subcword]} && break
        [[ ${words[subcword]} != -* && \
                ${words[subcword-1]} != -@(f?(amily)|rc?(vbuf)) ]] && \
            cmd=${words[subcword]}
    done

    if [[ -z $cmd ]]; then
        case $cur in
            -*)
                local c="-Version -statistics -details -resolve -family
                    -oneline -timestamp -batch -rcvbuf"
                [[ $cword -eq 1 ]] && c+=" -force"
                COMPREPLY=( $( compgen -W "$c" -- "$cur" ) )
                return 0
                ;;
            *)
                COMPREPLY=( $( compgen -W "help $( ip help 2>&1 | \
                    sed -e '/OBJECT := /,/}/!d' \
                        -e 's/.*{//' -e 's/}.*//' -e 's/|//g' )" -- "$cur" ) )
                return 0
                ;;
        esac
    fi

    [[ $subcmd == help ]] && return 0

    case $cmd in
        link)
            case $subcmd in
                add)
                    # TODO
                    ;;
                delete)
                    case $(($cword-$subcword)) in
                        1)
                            _available_interfaces
                            ;;
                        2)
                            COMPREPLY=( $( compgen -W 'type' -- "$cur" ) )
                            ;;
                        3)
                            [[ $prev == type ]] && \
                                COMPREPLY=( $( compgen -W 'vlan veth vcan dummy
                                    ifb macvlan can' -- "$cur" ) )
                            ;;
                    esac
                    ;;
                set)
                    if [[ $cword-$subcword -eq 1 ]]; then
                        _available_interfaces
                    else
                        case $prev in
                            arp|dynamic|multicast|allmulticast|promisc|\
                            trailers)
                                COMPREPLY=( $( compgen -W 'on off' \
                                    -- "$cur" ) )
                                ;;
                            txqueuelen|name|address|broadcast|mtu|netns|alias)
                                ;;
                            *)
                                local c="arp dynamic multicast allmulticast
                                    promisc trailers txqueuelen name address
                                    broadcast mtu netns alias"
                                [[ $prev != @(up|down) ]] && c+=" up down"
                                COMPREPLY=( $( compgen -W "$c" -- "$cur" ) )
                                ;;
                        esac
                    fi
                    ;;
                show)
                    if [[ $cword -eq $subcword+1 ]]; then
                        _available_interfaces
                        COMPREPLY+=( $( compgen -W 'dev group up' -- "$cur" ) )
                    elif [[ $prev == dev ]]; then
                        _available_interfaces
                    elif [[ $prev == group ]]; then
                        _iproute2_etc group
                    fi
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help add delete set show' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;

        addr)
            case $subcmd in
                add|change|replace)
                    # TODO
                    ;;
                del)
                    # TODO
                    ;;
                show|flush)
                    if [[ $cword -eq $subcword+1 ]]; then
                        _available_interfaces
                        COMPREPLY+=( $( compgen -W 'dev scope to label dynamic
                            permanent tentative deprecated dadfailed temporary
                            primary secondary up' -- "$cur" ) )
                    elif [[ $prev == dev ]]; then
                        _available_interfaces
                    elif [[ $prev == scope ]]; then
                        _iproute2_etc rt_scopes
                    fi
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help add change replace del
                            show flush' -- "$cur" ) )
                    ;;
            esac
            ;;

        addrlabel)
            case $subcmd in
                list|add|del|flush)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help list add del flush' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;

        route)
            case $subcmd in
                list|flush)
                    # TODO
                    ;;
                get)
                    # TODO
                    ;;
                add|del|change|append|replace|monitor)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help list flush get add del
                            change append replace monitor' -- "$cur" ) )
                    ;;
            esac
            ;;

        rule)
            case $subcmd in
                add|del)
                    # TODO
                    ;;
                flush|show|list|lst)
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help list add del flush' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;

        neigh)
            case $subcmd in
                add|del|change|replace)
                    # TODO
                    ;;
                show|flush)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help add del change replace
                            show flush' -- "$cur" ) )
                    ;;
            esac
            ;;

        ntable)
            case $subcmd in
                change)
                    # TODO
                    ;;
                show)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help change show' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;

        tunnel)
            case $subcmd in
                show)
                    ;;
                add|change|del|prl|6rd)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help add change del show prl
                            6rd' -- "$cur" ) )
                    ;;
            esac
            ;;

        maddr)
            case $subcmd in
                add|del)
                    # TODO
                    ;;
                show)
                    if [[ $cword -eq $subcword+1 || $prev == dev ]]; then
                        _available_interfaces
                        [[ $prev != dev ]] && \
                            COMPREPLY=( $( compgen -W '${COMPREPLY[@]} dev' \
                            -- "$cur" ) )
                    fi
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help add del show' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;

        mroute)
            case $subcmd in
                show)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help show' -- "$cur" ) )
                    ;;
            esac
            ;;

         monitor)
            case $subcmd in
                all) ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'help all' -- "$cur" ) )
                    ;;
            esac
            ;;

         xfrm)
            case $subcmd in
                state|policy|monitor)
                    # TODO
                    ;;
                *)
                    [[ $cword -eq $subcword ]] && \
                        COMPREPLY=( $( compgen -W 'state policy monitor' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;
    esac
} &&
complete -F _ip ip

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          _ipcmk_module()
{
	local cur prev
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-M'|'--shmem')
			COMPREPLY=( $(compgen -W "size" -- $cur) )
			return 0
			;;
		'-S'|'--semaphore')
			COMPREPLY=( $(compgen -W "number" -- $cur) )
			return 0
			;;
		'-p'|'--mode')
			COMPREPLY=( $(compgen -W "mode" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "--shmem --semaphore --queue --mode --help --version" -- $cur) )
	return 0
}
complete -F _ipcmk_module ipcmk
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _ipcrm_module()
{
	local cur prev OPTS KEYIDS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-m'|'--shmem-id')
			KEYIDS="$(ipcs -m | awk '{if (3 < NR) {print $2}}')"
			COMPREPLY=( $(compgen -W "$KEYIDS" -- $cur) )
			return 0
			;;
		'-M'|'--shmem-key')
			KEYIDS="$(ipcs -m | awk '{if (3 < NR) {print $1}}')"
			COMPREPLY=( $(compgen -W "$KEYIDS" -- $cur) )
			return 0
			;;
		'-q'|'--queue-id')
			KEYIDS="$(ipcs -q | awk '{if (3 < NR) {print $2}}')"
			COMPREPLY=( $(compgen -W "$KEYIDS" -- $cur) )
			return 0
			;;
		'-Q'|'--queue-key')
			KEYIDS="$(ipcs -q | awk '{if (3 < NR) {print $1}}')"
			COMPREPLY=( $(compgen -W "$KEYIDS" -- $cur) )
			return 0
			;;
		'-s'|'--semaphore-id')
			KEYIDS="$(ipcs -s | awk '{if (3 < NR) {print $2}}')"
			COMPREPLY=( $(compgen -W "$KEYIDS" -- $cur) )
			return 0
			;;
		'-S'|'--semaphore-key')
			KEYIDS="$(ipcs -s | awk '{if (3 < NR) {print $1}}')"
			COMPREPLY=( $(compgen -W "$KEYIDS" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		'=')
			cur=${cur#=}
			COMPREPLY=( $(compgen -W "shm msg sem" -- $cur) )
			return 0
			;;
	esac
	OPTS="	--shmem-id
		--shmem-key
		--queue-id
		--queue-key
		--semaphore-id
		--semaphore-key
		--all=
		--verbose
		--help
		--version"
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
	return 0
}
complete -F _ipcrm_module ipcrm
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 _ipcs_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-i'|'--id')
			COMPREPLY=( $(compgen -W "id" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	OPTS="--id
		--help
		--version
		--shmems
		--queues
		--semaphores
		--all
		--time
		--pid
		--creator
		--limits
		--summary
		--human
		--bytes"
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
	return 0
}
complete -F _ipcs_module ipcs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # iperf(1) completion                                      -*- shell-script -*-

_iperf()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -h|--help|-v|--version|-i|--interval|-l|--len|-p|--port|-w|--window|\
        -M|--mss|-b|--bandwidth|-n|--num|-t|--time|-L|--listenport|-P|\
        --parallel|-T|--ttl|-Z|--linux-congestion)
            return
            ;;
        -f|--format)
            COMPREPLY=( $( compgen -W 'k m K M' -- "$cur" ) )
            return
            ;;
        -o|--output|-F|--fileinput)
            _filedir
            return
            ;;
        -B|--bind)
            _available_interfaces -a
            _ip_addresses
            return
            ;;
        -c|--client)
            _known_hosts_real "$cur"
            return
            ;;
        -x|--reportexclude)
            COMPREPLY=( $( compgen -W 'C D M S V' -- "$cur" ) )
            return
            ;;
        -y|--reportstyle)
            COMPREPLY=( $( compgen -W 'C' -- "$cur" ) )
            return
            ;;
    esac

    $split && return

    # Filter mode specific options
    local i filter=cat
    for i in ${words[@]}; do
        case $i in
            -s|--server)
                filter='sed -e /^Client.specific/,/^$/d'
                ;;
            -c|--client)
                filter='sed -e /^Server.specific/,/^$/d'
                ;;
        esac
    done
    [[ $filter != cat ]] && filter+=' -e /--client/d -e /--server/d'

    COMPREPLY=( $( compgen -W \
        '$( "$1" --help 2>&1 | $filter | _parse_help - )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _iperf iperf

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # Linux ipsec(8) completion (for FreeS/WAN and strongSwan) -*- shell-script -*-

# Complete ipsec.conf conn entries.
#
# Reads a file from stdin in the ipsec.conf(5) format.
_ipsec_connections()
{
    local keyword name
    while read -r keyword name; do
        if [[ $keyword = [#]* ]]; then continue; fi
        [[ $keyword == conn && $name != '%default' ]] && COMPREPLY+=( "$name" )
    done
    COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
}

_ipsec_freeswan()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W 'auto barf eroute klipsdebug look manual
            pluto ranbits rsasigkey setup showdefaults showhostkey spi spigrp
            tncfg whack' -- "$cur" ) )
        return 0
    fi

    case ${words[1]} in
        auto)
            COMPREPLY=( $( compgen -W '--asynchronous --up --add --delete
                --replace --down --route --unroute --ready --status
                --rereadsecrets' -- "$cur" ) )
            ;;
        manual)
            COMPREPLY=( $( compgen -W '--up --down --route --unroute --union' \
                -- "$cur" ) )
            ;;
        ranbits)
            COMPREPLY=( $( compgen -W '--quick --continuous --bytes' \
                -- "$cur" ) )
            ;;
        setup)
            COMPREPLY=( $( compgen -W '--start --stop --restart' -- "$cur" ) )
            ;;
        *)
            ;;
    esac

    return 0
}

_ipsec_strongswan()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W 'down irdumm leases listaacerts listacerts
            listalgs listall listcacerts listcainfos listcards listcerts
            listcrls listgroups listocsp listocspcerts listpubkeys openac pki
            pluto pool purgecerts purgecrls purgeike purgeocsp ready reload
            rereadaacerts rereadacerts rereadall rereadcacerts rereadcrls
            rereadgroups rereadocspcerts rereadsecrets restart route scdecrypt
            scencrypt scepclient secrets start starter status statusall stop
            stroke unroute uci up update version whack --confdir --copyright
            --directory --help --version --versioncode' -- "$cur" ) )
        return 0
    fi

    case ${words[1]} in
        down|route|status|statusall|unroute|up)
            local confdir=$( ipsec --confdir )
            _ipsec_connections < "$confdir/ipsec.conf"
            ;;
        list*)
            COMPREPLY=( $( compgen -W '--utc' -- "$cur" ) )
            ;;
        restart|start)
            COMPREPLY=( $( compgen -W '--attach-gdb --auto-update --debug
                --debug-all --debug-more --nofork' -- "$cur" ) )
            ;;
        pki)
            COMPREPLY=( $( compgen -W '--gen --issue --keyid --print --pub
                --req --self --signcrl --verify' -- "$cur" ) )
            ;;
        pool)
            ;;
        irdumm)
            _filedir 'rb'
            ;;
        *)
            ;;
    esac

    return 0
}

case "$( ipsec --version 2>/dev/null )" in
    *strongSwan*)
        complete -F _ipsec_strongswan ipsec
        ;;
    *)
        complete -F _ipsec_freeswan ipsec
        ;;
esac

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # bash completion for ipmitool                             -*- shell-script -*-

_ipmitool_singleline_help()
{
    COMPREPLY=( $( compgen -W "$( $1 $2 2>&1 | \
        sed -ne 's/[,\r]//g' -e 's/^.*[Cc]ommands://p' )" -- "$cur" ) )
}

_ipmitool()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h|-V|-p|-U|-e|-k|-y|-P|-m|-b|-t|-B|-T|-l)
            return 0
            ;;
        -d)
            COMPREPLY=( $( compgen -W "$( \
                command ls -d /dev/ipmi* /dev/ipmi/* /dev/ipmidev/* \
                2>/dev/null | sed -ne 's/^[^0-9]*\([0-9]\{1,\}\)/\1/p' )" \
                -- "$cur" ) )
            return 0
            ;;
        -I)
            COMPREPLY=( $( compgen -W "$( $1 -h 2>&1 | \
                sed -e '/^Interfaces:/,/^[[:space:]]*$/!d' \
                -ne 's/^[[:space:]]\{1,\}\([^[:space:]]\{1,\}\).*/\1/p' )" \
                -- "$cur" ) )
            return 0
            ;;
        -H)
            _known_hosts_real "$cur"
            return 0
            ;;
        -f|-S|-O)
            _filedir
            return 0
            ;;
        -C)
            COMPREPLY=( $( compgen -W '{0..14}' -- "$cur" ) )
            return 0
            ;;
        -L)
            COMPREPLY=( $( compgen -W 'CALLBACK USER OPERATOR ADMINISTRATOR' \
                -- "$cur" ) )
            return 0
            ;;
        -A)
            COMPREPLY=( $( compgen -W 'NONE PASSWORD MD2 MD5 OEM' -- "$cur" ) )
            return 0
            ;;
        -o)
            COMPREPLY=( $( compgen -W "$( $1 -o list 2>&1 | \
                awk '/^[ \t]+/ { print $1 }' ) list" -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -h)' -- "$cur" ) )
        return 0
    fi

    # Find out command and subcommand

    local cmds=( raw i2c spd lan chassis power event mc sdr sensor fru gendev
        sel pef sol tsol isol user channel session sunoem kontronoem picmg fwum
        firewall shell exec set hpm ekanalyzer)
    local i c cmd subcmd
    for (( i=1; i < ${#words[@]}-1; i++ )); do
        [[ -n $cmd ]] && subcmd=${words[i]} && break
        for c in ${cmds[@]}; do
            [[ ${words[i]} == $c ]] && cmd=$c && break
        done
    done

    if [[ -z $cmd ]]; then
        COMPREPLY=( $( compgen -W '${cmds[@]}' -- "$cur" ) )
        return 0
    fi

    # Command/subcommand completions

    case $cmd in

        shell)
            ;;

        exec)
            _filedir
            ;;

        chassis|power|kontronoem|fwum)
            _ipmitool_singleline_help $1 $cmd
            ;;

        lan)
            case $subcmd in
                print|set)
                    ;;
                alert)
                    [[ $prev == alert ]] && \
                        COMPREPLY=( $( compgen -W 'print set' -- "$cur" ) )
                    ;;
                stats)
                    [[ $prev == stats ]] && \
                        COMPREPLY=( $( compgen -W 'print set' -- "$cur" ) )
                    ;;
                *)
                    COMPREPLY=( $( compgen -W 'print set alert stats' \
                        -- "$cur" ) )
                    ;;
            esac
            ;;

        sdr)
            case $subcmd in
                get|info|type|list|entity)
                    ;;
                elist)
                    COMPREPLY=( $( compgen -W 'all full compact event mclog fru
                        generic' -- "$cur" ) )
                    ;;
                dump)
                    _filedir
                    ;;
                fill)
                    case $prev in
                        fill)
                            COMPREPLY=( $( compgen -W 'sensors file' \
                                -- "$cur" ) )
                            ;;
                        file)
                            _filedir
                            ;;
                    esac
                    ;;
                *)
                    COMPREPLY=( $( compgen -W 'get info type list elist entity
                        dump fill' -- "$cur" ) )
                    ;;
            esac
            ;;

        sensor)
            case $subcmd in
                list|get|thresh)
                    ;;
                *)
                    COMPREPLY=( $( compgen -W 'list get thresh' -- "$cur" ) )
                    ;;
            esac
            ;;

        sel)
            case $subcmd in
                info|clear|list|elist|delete)
                    ;;
                add|save|writeraw|readraw)
                    _filedir
                    ;;
                time)
                    [[ $prev == time ]] && \
                        COMPREPLY=( $( compgen -W 'get set' -- "$cur" ) )
                    ;;
                *)
                    COMPREPLY=( $( compgen -W 'info clear list elist delete add
                        get save writeraw readraw time' -- "$cur" ) )
                    ;;
            esac
            ;;

        user)
            case $subcmd in
                summary|list|disable|enable|priv|test)
                    ;;
                set)
                    [[ $prev == set ]] && \
                        COMPREPLY=( $( compgen -W 'name password' -- "$cur" ) )
                    ;;
                *)
                    COMPREPLY=( $( compgen -W 'summary list set disable enable
                        priv test' -- "$cur" ) )
                    ;;
            esac
            ;;

        set)
            [[ $prev == set ]] && \
                COMPREPLY=( $( compgen -W 'hostname username password privlvl
                    authtype localaddr targetaddr port csv verbose' \
                        -- "$cur" ) )
            ;;

    esac
} &&
complete -F _ipmitool ipmitool

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # bash completion for iptables                             -*- shell-script -*-

_iptables()
{
    local cur prev words cword split
    _init_completion -s || return

    local table chain='s/^Chain \([^ ]\{1,\}\).*$/\1/p'

    if [[ ${words[@]} == *-t\ *filter* ]]; then
        table="-t filter"
    elif [[ ${words[@]} == *-t\ *nat* ]]; then
        table="-t nat"
    elif [[ ${words[@]} == *-t\ *mangle* ]]; then
        table="-t mangle"
    fi

    case $prev in
    -*[AIDRPFXLZ])
        COMPREPLY=( $( compgen -W '`iptables $table -nL | \
                sed -ne "s/^Chain \([^ ]\{1,\}\).*$/\1/p"`' -- "$cur" ) )
        ;;
    -*t)
        COMPREPLY=( $( compgen -W 'nat filter mangle' -- "$cur" ) )
        ;;
    -j)
        if [[ "$table" == "-t filter" || -z "$table" ]]; then
            COMPREPLY=( $( compgen -W 'ACCEPT DROP LOG ULOG REJECT
                `iptables $table -nL | sed -ne "$chain" \
                -e "s/INPUT|OUTPUT|FORWARD|PREROUTING|POSTROUTING//"`' -- \
                "$cur" ) )
        elif [[ $table == "-t nat" ]]; then
            COMPREPLY=( $( compgen -W 'ACCEPT DROP LOG ULOG REJECT MIRROR SNAT
                DNAT MASQUERADE `iptables $table -nL | \
                sed -ne "$chain" -e "s/OUTPUT|PREROUTING|POSTROUTING//"`' \
                -- "$cur" ) )
        elif [[ $table == "-t mangle" ]]; then
            COMPREPLY=( $( compgen -W 'ACCEPT DROP LOG ULOG REJECT MARK TOS
                `iptables $table -nL | sed -ne "$chain" \
                -e "s/INPUT|OUTPUT|FORWARD|PREROUTING|POSTROUTING//"`' -- \
                "$cur" ) )
        fi
        ;;
    *)
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '--in-interface --out-interface --source
                --destination --protocol --fragment --match --append --delete
                --insert --replace --list --flush --zero --new --delete-chain
                --policy --rename-chain --proto --source --destination
                --in-interface --jump --match --numeric --out-interface --table
                --verbose --line-numbers --exact --fragment --modprobe
                --set-counters --version' -- "$cur" ) )
        fi
        ;;
    esac

} &&
complete -F _iptables iptables

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # ipv6calc completion                                      -*- shell-script -*-

_ipv6calc()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        -d|--debug)
            return 0
            ;;
        -I|--in|-O|--out|-A|--action)
            # With ipv6calc < 0.73.0, -m does nothing here, so use sed instead.
            COMPREPLY=( $( compgen -W "$( ipv6calc "$prev" -h 2>&1 | \
                sed -ne 's/^[[:space:]]\{1,\}\([^[:space:]:]\{1,\}\)[[:space:]]*:.*/\1/p' )" \
                -- "$cur" ) )
            return 0
            ;;
        --db-geoip|--db-ip2location-ipv4|--db-ip2location-ipv6)
            _filedir
            return 0
            ;;
        --printstart|--printend)
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--help --debug --quiet --in --out --action
            --examples --showinfo --show_types --machine_readable --db-geoip
            --db-geoip-default --db-ip2location-ipv4 --db-ip2location-ipv6
            --lowercase --uppercase --printprefix --printsuffix --maskprefix
            --masksuffix --printstart --printend --printcompressed
            --printuncompressed --printfulluncompressed --printmirrored' \
                -- "$cur" ) )
        return 0
    fi

    return 0
} &&
complete -F _ipv6calc ipv6calc

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # iscsiadm(1) completion                                   -*- shell-script -*-

_iscsiadm()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -m|--mode)
            COMPREPLY=( $( compgen -W 'discovery node session iface fw host' \
                -- "$cur" ) )
            return 0
            ;;
        -o|--op)
            COMPREPLY=( $( compgen -W 'new delete update show' -- "$cur" ) )
            return 0
            ;;
        -t|--type)
            COMPREPLY=( $( compgen -W 'sendtargets st slp isns fw' -- "$cur" ) )
            return 0
            ;;
        -L|-U|--loginall|--logoutall)
            COMPREPLY=( $( compgen -W 'all manual automatic' -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    local options
    if [[ $cword -gt 1 ]] ; then

        case ${words[2]} in
            discovery)
                options='--help --version --debug --print --interface --type \
                    --portal --login --op --name --value'
                ;;
            node)
                options='--help --version --debug --print --loginall \
                    --logoutall--show  -T --portal --interface --login \
                    --logout --rescan --stats --op --name --value'
                ;;
            session)
                options='--help --version --debug --print --sid --logout \
                    --rescan --stats'
                ;;
            iface)
                options='--help --version --debug --print --interface --op \
                    --name --value'
                ;;
            fw)
                options='--login'
                ;;
            host)
                options='--print -H'
                ;;
        esac
    else
        options='--mode'
    fi

    COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
} &&
complete -F _iscsiadm iscsiadm

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      _isosize_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-d'|'--divisor')
			COMPREPLY=( $(compgen -W "number" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			COMPREPLY=( $(compgen -W "--divisor --sectors --help --version" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _isosize_module isosize
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # isql completion                                          -*- shell-script -*-
# by Victor Bogado da Silva Lins <victor@bogado.net>

_isql()
{
    local cur prev words cword
    _init_completion || return

    [[ -f $ODBCINI ]] \
        && COMPREPLY=( $( command grep \\["$cur" "$ODBCINI" | tr -d \\[\\] ) )
} &&
complete -F _isql isql

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # iwconfig completion                                      -*- shell-script -*-

_iwconfig()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        mode)
            COMPREPLY=( $( compgen -W 'managed ad-hoc master repeater secondary
                monitor' -- "$cur" ) )
            return 0
            ;;
        essid)
            COMPREPLY=( $( compgen -W 'on off any' -- "$cur" ) )
            if [[ -n ${COMP_IWLIST_SCAN:-} ]]; then
                COMPREPLY+=( $( compgen -W \
                    "$( iwlist ${words[1]} scan | \
                    awk -F'\"' '/ESSID/ {print $2}' )" -- "$cur" ) )
            fi
            return 0
            ;;
        nwid)
            COMPREPLY=( $( compgen -W 'on off' -- "$cur" ) )
            return 0
            ;;
        channel)
            COMPREPLY=( $( compgen -W "$( iwlist ${words[1]} channel | \
                awk '/^[ \t]*Channel/ {print $2}' )" -- "$cur" ) )
            return 0
            ;;

        freq)
            COMPREPLY=( $( compgen -W "$( iwlist ${words[1]} channel | \
                awk '/^[ \t]*Channel/ {print $4"G"}')" -- "$cur" ) )
            return 0
            ;;
        ap)
            COMPREPLY=( $( compgen -W 'on off any' -- "$cur" ) )
            if [[ -n ${COMP_IWLIST_SCAN:-} ]]; then
                COMPREPLY+=( $( compgen -W \
                    "$( iwlist ${words[1]} scan | \
                    awk -F ': ' '/Address/ {print $2}' )" -- "$cur" ) )
            fi
            return 0
            ;;
        rate)
            COMPREPLY=( $( compgen -W 'auto fixed' -- "$cur" ) )
            COMPREPLY+=( $( compgen -W \
                "$( iwlist ${words[1]} rate | \
                awk '/^[ \t]*[0-9]/ {print $1"M"}' )" -- "$cur" ) )
            return 0
            ;;
        rts|frag)
            COMPREPLY=( $( compgen -W 'auto fixed off' -- "$cur" ) )
            return 0
            ;;
        key|enc)
            COMPREPLY=( $( compgen -W 'off on open restricted' -- "$cur" ) )
            return 0
            ;;
        power)
            COMPREPLY=( $( compgen -W 'period timeout off on' -- "$cur" ) )
            return 0
            ;;
        txpower)
            COMPREPLY=( $( compgen -W 'off on auto' -- "$cur" ) )
            return 0
            ;;
        retry)
            COMPREPLY=( $( compgen -W 'limit lifetime' -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ $cword -eq 1 ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '--help --version' -- "$cur" ) )
        else
            _available_interfaces -w
        fi
    else
        COMPREPLY=( $( compgen -W 'essid nwid mode freq channel sens mode ap
            nick rate rts frag enc key power txpower commit' -- "$cur" ) )
    fi

} &&
complete -F _iwconfig iwconfig

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # iwlist completion                                        -*- shell-script -*-

_iwlist()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '--help --version' -- "$cur" ) )
        else
            _available_interfaces -w
        fi
    else
        COMPREPLY=( $( compgen -W 'scan scanning freq frequency channel rate
            bit bitrate key enc encryption power txpower retry ap accesspoint
            peers event' -- "$cur" ) )
    fi
} &&
complete -F _iwlist iwlist

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          # iwpriv completion                                        -*- shell-script -*-

_iwpriv()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        roam)
            COMPREPLY=( $( compgen -W 'on off' -- "$cur" ) )
            return 0
            ;;
        port)
            COMPREPLY=( $( compgen -W 'ad-hoc managed' -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ $cword -eq 1 ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '--help --version' -- "$cur" ) )
        else
            _available_interfaces -w
        fi
    else
        COMPREPLY=( $( compgen -W '--all roam port' -- "$cur" ) )
    fi
} &&
complete -F _iwpriv iwpriv

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # iwspy completion                                         -*- shell-script -*-

_iwspy()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W '--help --version' -- "$cur" ) )
        else
            _available_interfaces -w
        fi
    else
        COMPREPLY=( $( compgen -W 'setthr getthr off' -- "$cur" ) )
    fi
} &&
complete -F _iwspy iwspy

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # jar(1) completion                                        -*- shell-script -*-

_jar()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W 'c t x u' -- "$cur" ) )
        return 0
    fi

    case ${words[1]} in
        *c*f)
            _filedir
            ;;
        *f)
            _filedir_xspec unzip
            ;;
        *)
            _filedir
            ;;
    esac
} &&
complete -F _jar jar

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # jarsigner(1) completion                                  -*- shell-script -*-

_jarsigner()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -keystore)
            COMPREPLY=( $( compgen -W 'NONE' -- "$cur" ) )
            _filedir '@(jks|ks|p12|pfx)'
            return 0
            ;;
        -storepass|-keypass|-sigfile|-digestalg|-sigalg|-tsacert|-altsigner|\
        -altsignerpath|-providerName|-providerClass|-providerArg)
            return 0
            ;;
        -storetype)
            COMPREPLY=( $( compgen -W 'JKS PKCS11 PKCS12' -- "$cur" ) )
            return 0
            ;;
        -signedjar)
            _filedir jar
            return 0
            ;;
        -tsa)
            _filedir
            return 0
            ;;
    esac

    # Check if a jar was already given.
    local i jar=false
    for (( i=0; i < ${#words[@]}-1; i++ )) ; do
        if [[ "${words[i]}" == *.jar && \
            "${words[i-1]}" != -signedjar ]] ; then
            jar=true
            break
        fi
    done

    if ! $jar ; then
        if [[ "$cur" == -* ]] ; then
            # Documented as "should not be used": -internalsf, -sectionsonly
            COMPREPLY=( $( compgen -W '-keystore -storepass -storetype
                -keypass -sigfile -signedjar -digestalg -sigalg -verify
                -verbose -certs -tsa -tsacert -altsigner -altsignerpath
                -protected -providerName -providerClass -providerArg' \
                -- "$cur" ) )
        fi
        _filedir jar
    fi
} &&
complete -F _jarsigner jarsigner

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # bash completion for java, javac and javadoc              -*- shell-script -*-

# available path elements completion
_java_path()
{
    cur=${cur##*:}
    _filedir '@(jar|zip)'
}

# exact classpath determination
_java_find_classpath()
{
    local i

    # search first in current options
    for (( i=1; i < cword; i++ )); do
        if [[ "${words[i]}" == -@(cp|classpath) ]]; then
            classpath=${words[i+1]}
            break
        fi
    done

    # default to environment
    [[ -z $classpath ]] && classpath=$CLASSPATH

    # default to current directory
    [[ -z $classpath ]] && classpath=.
}

# exact sourcepath determination
_java_find_sourcepath()
{
    local i

    # search first in current options
    for (( i=1; i < cword; i++ )); do
        if [[ "${words[i]}" == -sourcepath ]]; then
            sourcepath=${words[i+1]}
            break
        fi
    done

    # default to classpath
    if [[ -z $sourcepath ]]; then
        local classpath
        _java_find_classpath
        sourcepath=$classpath
    fi
}

# available classes completion
_java_classes()
{
    local classpath i

    # find which classpath to use
    _java_find_classpath

    # convert package syntax to path syntax
    cur=${cur//.//}
    # parse each classpath element for classes
    for i in ${classpath//:/ }; do
        if [[ "$i" == *.@(jar|zip) && -r $i ]]; then
            if type zipinfo &>/dev/null; then
                COMPREPLY+=( $( zipinfo -1 "$i" "$cur*" 2>/dev/null | \
                    command grep '^[^$]*\.class$' ) )
            else
                COMPREPLY+=( $( jar tf "$i" "$cur" | \
                    command grep '^[^$]*\.class$' ) )
            fi

        elif [[ -d $i ]]; then
            COMPREPLY+=(
                $( compgen -d -- "$i/$cur" | sed -e "s|^$i/\(.*\)|\1.|" )
                $( compgen -f -X '!*.class' -- "$i/$cur" | \
                    sed -e '/\$/d' -e "s|^$i/||" )
            )
            [[ $COMPREPLY == *.class ]] || compopt -o nospace

            # FIXME: if we have foo.class and foo/, the completion
            # returns "foo/"... how to give precedence to files
            # over directories?
        fi
    done

    # remove class extension
    COMPREPLY=( ${COMPREPLY[@]%.class} )
    # convert path syntax to package syntax
    COMPREPLY=( ${COMPREPLY[@]//\//.} )
}

# available packages completion
_java_packages()
{
    local sourcepath i

    # find which sourcepath to use
    _java_find_sourcepath

    # convert package syntax to path syntax
    cur=${cur//.//}
    # parse each sourcepath element for packages
    for i in ${sourcepath//:/ }; do
        if [[ -d $i ]]; then
            COMPREPLY+=( $( command ls -F -d $i/$cur* 2>/dev/null | \
                sed -e 's|^'$i'/||' ) )
        fi
    done
    # keep only packages
    COMPREPLY=( $( tr " " "\n" <<<"${COMPREPLY[@]}" | command grep "/$" ) )
    # remove packages extension
    COMPREPLY=( ${COMPREPLY[@]%/} )
    # convert path syntax to package syntax
    cur=${COMPREPLY[@]//\//.}
}

# java completion
#
_java()
{
    local cur prev words cword
    _init_completion -n : || return

    local i

    for ((i=1; i < $cword; i++)); do
        case ${words[$i]} in
            -cp|-classpath)
                ((i++)) # skip the classpath string.
                ;;
            -*)
                # this is an option, not a class/jarfile name.
                ;;
            *)
                # once we've seen a class, just do filename completion
                _filedir
                return 0
                ;;
        esac
    done

    case $cur in
        # standard option completions
        -verbose:*)
            COMPREPLY=( $( compgen -W 'class gc jni' -- "${cur#*:}" ) )
            return 0
            ;;
        -javaagent:*)
            cur=${cur#*:}
            _filedir '@(jar|zip)'
            return 0
            ;;
        -agentpath:*)
            cur=${cur#*:}
            _filedir so
            return 0
            ;;
        # various non-standard option completions
        -splash:*)
            cur=${cur#*:}
            _filedir '@(gif|jp?(e)g|png)'
            return 0
            ;;
        -Xbootclasspath*:*)
            _java_path
            return 0
            ;;
        -Xcheck:*)
            COMPREPLY=( $( compgen -W 'jni' -- "${cur#*:}" ) )
            return 0
            ;;
        -Xgc:*)
            COMPREPLY=( $( compgen -W 'singlecon gencon singlepar genpar' \
                -- "${cur#*:}" ) )
            return 0
            ;;
        -Xgcprio:*)
            COMPREPLY=( $( compgen -W 'throughput pausetime deterministic' \
                -- "${cur#*:}" ) )
            return 0
            ;;
        -Xloggc:*|-Xverboselog:*)
            cur=${cur#*:}
            _filedir
            return 0
            ;;
        -Xshare:*)
            COMPREPLY=( $( compgen -W 'auto off on' -- "${cur#*:}" ) )
            return 0
            ;;
        -Xverbose:*)
            COMPREPLY=( $( compgen -W 'memory load jni cpuinfo codegen opt
                gcpause gcreport' -- "${cur#*:}" ) )
            return 0
            ;;
        -Xverify:*)
            COMPREPLY=( $( compgen -W 'all none remote' -- "${cur#*:}" ) )
            return 0
            ;;
        # the rest that we have no completions for
        -D*|-*:*)
            return 0
            ;;
    esac

    case $prev in
        -cp|-classpath)
            _java_path
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
        [[ $cur == -X* ]] && \
            COMPREPLY+=( $( compgen -W '$( _parse_help "$1" -X )' -- "$cur" ) )
    else
        if [[ "$prev" == -jar ]]; then
            # jar file completion
            _filedir jar
        else
            # classes completion
            _java_classes
        fi
    fi

    [[ $COMPREPLY == -*[:=] ]] && compopt -o nospace

    __ltrim_colon_completions "$cur"
} &&
complete -F _java java

_javadoc()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -overview|-helpfile)
            _filedir '?(x)htm?(l)'
            return 0
            ;;
        -stylesheetfile)
            _filedir css
            return 0
            ;;
        -d|-link|-linkoffline)
            _filedir -d
            return 0
            ;;
        -classpath|-bootclasspath|-docletpath|-sourcepath|-extdirs)
            _java_path
            return 0
            ;;
    esac

    # -linkoffline takes two arguments
    if [[ $cword -gt 2 && ${words[$cword-2]} == -linkoffline ]]; then
        _filedir -d
        return
    fi

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
    else
        # source files completion
        _filedir java
        # packages completion
        _java_packages
    fi
} &&
complete -F _javadoc javadoc

_javac()
{
    local cur prev words cword
    _init_completion -n : || return

    case $prev in
        -d)
            _filedir -d
            return 0
            ;;
        -classpath|-bootclasspath|-sourcepath|-extdirs)
            _java_path
            return 0
            ;;
    esac

    if [[ $cur == -+([a-zA-z0-9-_]):* ]]; then
        # Parse required options from -foo:{bar,quux,baz}
        local helpopt=-help
        [[ $cur == -X* ]] && helpopt=-X
        # For some reason there may be -g:none AND -g:{lines,source,vars};
        # convert the none case to the curly brace format so it parses like
        # the others.
        local opts=$( "$1" $helpopt 2>&1 | sed -e 's/-g:none/-g:{none}/' -ne \
            "s/^[[:space:]]*${cur%%:*}:{\([^}]\{1,\}\)}.*/\1/p" )
        COMPREPLY=( $( compgen -W "${opts//,/ }" -- "${cur#*:}" ) )
        return
    fi

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" -help )' -- "$cur" ) )
        [[ $cur == -X* ]] && \
            COMPREPLY+=( $( compgen -W '$( _parse_help "$1" -X )' -- "$cur" ) )
    else
        # source files completion
        _filedir java
    fi

    [[ $COMPREPLY == -*[:=] ]] && compopt -o nospace

    __ltrim_colon_completions "$cur"
} &&
complete -F _javac javac

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # javaws(1) completion                                     -*- shell-script -*-

_javaws()
{
    local cur prev words cword
    _init_completion -n = || return

    case $prev in
        -help|-license|-about|-viewer|-arg|-param|-property|-update|-umask)
            return 0
            ;;
        -basedir|-codebase)
            _filedir -d
            return 0
            ;;
        -uninstall|-import)
            _filedir jnlp
            return 0
            ;;
    esac

    if [[ $cur == *= ]]; then
        return 0
    elif [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W "$( _parse_help "$1" -help ) " -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return 0
    fi

    _filedir jnlp
} &&
complete -F _javaws javaws

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # jps(1) completion                                        -*- shell-script -*-

_jps()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -J*|-help)
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        # Not using _parse_usage because output has [-help] which does not
        # mean -h, -e, -l, -p...
        COMPREPLY=( $( compgen -W "-q -m -l -v -V -J -help" -- "$cur" ) )
        [[ $COMPREPLY == -J* ]] && compopt -o nospace
    else
        _known_hosts_real "$cur"
    fi
} &&
complete -F _jps jps

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # journalctl(1) completion                                -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2010 Ran Benita
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local w word=$1; shift
        for w in "$@"; do
                [[ $w = "$word" ]] && return
        done
}

__get_machines() {
        local a b
        (machinectl list-images --no-legend --no-pager; machinectl list --no-legend --no-pager; echo ".host") | \
		{ while read a b; do echo " $a"; done; } | sort -u;
}

__syslog_priorities=(emerg alert crit err warning notice info debug)

_journalctl() {
        local field_vals= cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local -A OPTS=(
                [STANDALONE]='-a --all --full --system --user
                              --disk-usage -f --follow --header
                              -h --help -l --local --new-id128 -m --merge --no-pager
                              --no-tail -q --quiet --setup-keys --this-boot --verify
                              --version --list-catalog --update-catalog --list-boots
                              --show-cursor --dmesg -k --pager-end -e -r --reverse
                              --utc -x --catalog --no-full --force --dump-catalog
                              --flush --rotate --sync'
                       [ARG]='-b --boot --this-boot -D --directory --file -F --field
                              -M --machine -o --output -u --unit --user-unit -p --priority
                              --vacuum-size --vacuum-time'
                [ARGUNKNOWN]='-c --cursor --interval -n --lines -S --since -U --until
                              --after-cursor --verify-key -t --identifier
                              --root'
        )

        if __contains_word "$prev" ${OPTS[ARG]} ${OPTS[ARGUNKNOWN]}; then
                case $prev in
                        --boot|--this-boot|-b)
                                comps=$(journalctl -F '_BOOT_ID' 2>/dev/null)
                        ;;
                        --directory|-D)
                                comps=$(compgen -d -- "$cur")
                                compopt -o filenames
                        ;;
                        --file)
                                comps=$(compgen -f -- "$cur")
                                compopt -o filenames
                        ;;
                        --output|-o)
                                comps='short short-full short-iso short-precise short-monotonic short-unix verbose export json json-pretty json-sse cat'
                        ;;
                        --field|-F)
                                comps=$(journalctl --fields | sort 2>/dev/null)
			;;
                        --machine|-M)
                                comps=$( __get_machines )
                        ;;
                        --priority|-p)
                                comps=${__syslog_priorities[*]}
                        ;;
                        --unit|-u)
                                comps=$(journalctl -F '_SYSTEMD_UNIT' 2>/dev/null)
                        ;;
                        --user-unit)
                                comps=$(journalctl -F '_SYSTEMD_USER_UNIT' 2>/dev/null)
                        ;;
                        *)
                                return 0
                        ;;
                esac
                COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
                return 0
        fi

        if [[ $cur = -* ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
                return 0
        elif [[ $cur = *=* ]]; then
                mapfile -t field_vals < <(journalctl -F "${prev%=}" 2>/dev/null)
                COMPREPLY=( $(compgen -W '${field_vals[*]}' -- "${cur#=}") )
        elif [[ $cur = /dev* ]]; then
                compopt -o filenames
                COMPREPLY=( $(compgen -f -- "${cur}") )
        elif [[ $cur = /* ]]; then
                # Append /dev/ to the list of completions, so that
                # after typing /<TAB><TAB> the user sees /dev/ as one
                # of the alternatives. Later on the rule above will
                # take care of showing device files in /dev/.
                mapfile -t field_vals < <(journalctl -F "_EXE" 2>/dev/null; echo '/dev/')
                COMPREPLY=( $(compgen -W '${field_vals[*]}' -- "${cur}") )
                if [[ "${COMPREPLY[@]}" = '/dev/' ]]; then
                    compopt -o filenames
                    COMPREPLY=( $(compgen -f -- "${cur}") )
                fi
        elif [[ $prev = '=' ]]; then
                mapfile -t field_vals < <(journalctl -F "${COMP_WORDS[COMP_CWORD-2]}" 2>/dev/null)
                COMPREPLY=( $(compgen -W '${field_vals[*]}' -- "$cur") )
        else
                mapfile -t field_vals < <(journalctl --fields 2>/dev/null)
                compopt -o nospace
                COMPREPLY=( $(compgen -W '${field_vals[*]}' -S= -- "$cur") )
        fi
}

complete -F _journalctl journalctl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # bash completion for k3b                                  -*- shell-script -*-

_k3b()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        --help*|--author|-v|--version|--license|--lang)
            return 0
            ;;
        --datacd|--audiocd|--videocd|--mixedcd|--emovixcd|--videodvd)
            _filedir
            return 0
            ;;
        --copydvd|--formatdvd|--videodvdrip)
            _dvd_devices
            return 0
            ;;
        --copycd|--erasecd|--cddarip|--videocdrip)
            _cd_devices
            _dvd_devices
            return 0
            ;;
        --cdimage|--image)
            _filedir @(cue|iso|toc)
            return 0
            ;;
        --dvdimage)
            _filedir iso
            return 0
            ;;
        --ao)
            COMPREPLY=( $( compgen -W 'alsa arts' -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]] ; then
        COMPREPLY=( $( compgen -W "$( _parse_help "$1" )" -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    else
        _filedir
    fi
} &&
complete -F _k3b k3b

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # kcov(1) completion                                       -*- shell-script -*-

_kcov()
{
    local cur prev words cword split
    _init_completion -s || return

    case "$prev" in
        --pid|-p)
            _pids
            return
            ;;
        --sort-type|-s)
            COMPREPLY=( $( compgen -W 'filename percentage lines uncovered' \
                -- "$cur" ) )
            return
            ;;
        --include-path|--exclude-path)
            _filedir
            return
            ;;
        --limits|-l)
            split=false
            if [[ "$cur" == ?*,* ]]; then
                prev="${cur%,*}"
                cur="${cur##*,}"
                split=true
            fi
            COMPREPLY=( $( compgen -W "{0..100}" -- "$cur" ) )
            if $split; then
                COMPREPLY=( ${COMPREPLY[@]/#/"$prev,"} )
            else
                compopt -o nospace
            fi
            return
            ;;
        --title|-t|--include-pattern|--exclude-pattern|--path-strip-level)
            # argument required but no completions available
            return
            ;;
    esac

    $split && return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" --help )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    _filedir
} && complete -F _kcov kcov

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # kernel-install(8) completion                                   -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2013 Kay Sievers
# Copyright 2013 Harald Hoyer
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

_kernel_install() {
        local comps
        local MACHINE_ID
        local cur=${COMP_WORDS[COMP_CWORD]}

        case $COMP_CWORD in
            1)
                comps="add remove"
                ;;
            2)
                comps=$(cd /lib/modules; echo [0-9]*)
                if [[ ${COMP_WORDS[1]} == "remove" ]] && [[ -f /etc/machine-id ]]; then
                    read MACHINE_ID < /etc/machine-id
                    if [[ $MACHINE_ID ]] && ( [[ -d /boot/$MACHINE_ID ]] || [[ -L /boot/$MACHINE_ID ]] ); then
                        comps=$(cd "/boot/$MACHINE_ID"; echo [0-9]*)
                    fi
                fi
                ;;
            3)
                [[ "$cur" ]] || cur=/boot/vmlinuz-${COMP_WORDS[2]}
                comps=$(compgen -f -- "$cur")
                compopt -o filenames
                ;;
        esac

        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
}

complete -F _kernel_install kernel-install
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # kill(1) completion                                       -*- shell-script -*-

_kill()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -s)
            _signals
            return
            ;;
        -l)
            return
            ;;
    esac

    if [[ $cword -eq 1 && "$cur" == -* ]]; then
        # return list of available signals
        _signals -
        COMPREPLY+=( $( compgen -W "-s -l" -- "$cur" ) )
    else
        # return list of available PIDs
        _pids
    fi
} &&
complete -F _kill kill

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # killall(1) completion                                    -*- shell-script -*-

[[ $OSTYPE == *@(linux|freebsd|darwin)* ]] || return 1

_killall()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -Z|--context|-o|--older-than|-y|--younger-than|-V|--version)
            return
            ;;
        -s|--signal)
            _signals
            return
            ;;
        -u|--user)
            _allowed_users
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $cword -eq 1 ]] && _signals -
        return
    fi

    _pnames
} &&
complete -F _killall killall

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # FreeBSD kldload completion                               -*- shell-script -*-

[[ $OSTYPE == *freebsd* ]] || return 1

_kldload()
{
    local cur prev words cword
    _init_completion || return

    local moddir=/modules/
    [[ -d $moddir ]] || moddir=/boot/kernel/

    compopt -o filenames
    COMPREPLY=( $( compgen -f "$moddir$cur" ) )
    COMPREPLY=( ${COMPREPLY[@]#$moddir} )
    COMPREPLY=( ${COMPREPLY[@]%.ko} )

    return 0
} &&
complete -F _kldload kldload

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # FreeBSD kldunload completion                             -*- shell-script -*-

[[ $OSTYPE == *freebsd* ]] || return 1

_kldunload()
{
    local cur prev words cword
    _init_completion || return

    COMPREPLY=( $( kldstat | \
        sed -ne "s/^.*[ \t]\{1,\}\($cur[a-z_]\{1,\}\).ko$/\1/p" ) )
} &&
complete -F _kldunload kldunload

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # kmod completion                                          -*- shell-script -*-
#
# This file is part of kmod.
#
# Copyright 2010 Ran Benita
# Copyright (C) 2013  Intel Corporation. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local word=$1; shift
        for w in "$@"; do [[ "$w" = "$word" ]] && return 0; done
        return 1
}

__is_opt () {
        local prevprev=${COMP_WORDS[COMP_CWORD-2]}
        local short="$1" long="$2"

        if [[ "$prev" = "$short" || "$prev" = "$long" ]]; then
                declare -g cur=${cur#=}
                return 0
        elif [[ "$prev" = "=" && "$prevprev" = "$long" ]]; then
                return 0
        fi

        return 1
}

_kmod_static_nodes () {
        local OPTS='-o -f -h --help'
        local OPTS_EQUAL='--output --format'
        local GROUP_FORMAT='human tmpfiles devname'

        if __is_opt '-o' '--output'; then
                compopt -o filenames
                COMPREPLY=( $(compgen -f -- "$cur") )
                return 0
        elif __is_opt '-f' '--format'; then
                COMPREPLY=( $(compgen -W "$GROUP_FORMAT" -- "$cur" ) )
                return 0
        fi

        local cur=${COMP_WORDS[COMP_CWORD]}

        compopt -o nospace
        COMPREPLY=( $(compgen -W "$OPTS" -- "$cur") )
        COMPREPLY+=( $(compgen -W "$OPTS_EQUAL" -S= -- "$cur") )
}

_kmod() {
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local VERBS=(help list static-nodes)
        local OPTS='-h --help -V --version'
        local verb

        # standalone options, no other option or action allowed
        for ((i=0; $i < $COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${OPTS}; then
                        return 0
                fi
        done

        # find the action
        for ((i=0; $i <= $COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" "${VERBS[@]}"; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        if [[ -z $verb ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]} ${VERBS[*]}' -- "$cur") )
                return 0
        fi

        local func=${verb//-/_}

        if declare -F _kmod_${func} > /dev/null; then
                _kmod_${func}
        fi

        # allow the space if there's only one completion and it doesn't end with
        # '='
        if [[ ${#COMPREPLY[@]} == 1 && ${COMPREPLY[0]} != *"=" ]] ; then
                compopt +o nospace
        fi

        return 0
}

complete -F _kmod kmod
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # koji completion                                          -*- shell-script -*-

_koji_search()
{
    COMPREPLY+=( $( compgen -W \
        '$( "$1" -q search $2 "$cur*" 2>/dev/null )' -- "$cur" ) )
}

_koji_build()
{
    _koji_search "$1" build
}

_koji_package()
{
    _koji_search "$1" package
}

_koji_user()
{
    _koji_search "$1" user
}

_koji_tag()
{
    COMPREPLY+=( $( compgen -W '$( "$1" -q list-tags 2>/dev/null )' \
        -- "$cur" ) )
}

_koji_target()
{
    COMPREPLY+=( $( compgen -W '$( "$1" -q list-targets 2>/dev/null |
        awk "{ print \$1 }" )' -- "$cur" ) )
}

_koji()
{
    local cur prev words cword split
    _init_completion -s || return

    local commandix command
    for (( commandix=1; commandix < cword; commandix++ )); do
        if [[ ${words[commandix]} != -* ]]; then
            command=${words[commandix]}
            break
        fi
    done

    case $prev in
        -h|--help|--help-commands)
            return
            ;;
        -c|--config|--keytab|-o)
            _filedir
            return
            ;;
        --runas|--user|--editor|--by)
            _koji_user "$1"
            return
            ;;
        --authtype)
            COMPREPLY=( $( compgen -W 'noauth ssl password kerberos' \
                -- "$cur" ) )
            return
            ;;
        --topdir)
            _filedir -d
            return
            ;;
        --type)
            case $command in
                latest-pkg|list-tagged)
                    COMPREPLY=( $( compgen -W 'maven' -- "$cur" ) )
                    ;;
            esac
            return
            ;;
        --name)
            case $command in
                list-targets)
                    _koji_target "$1"
                    ;;
            esac
            return
            ;;
        --owner)
            _koji_user "$1"
            return
            ;;
        --tag|--latestfrom)
            _koji_tag "$1"
            return
            ;;
        --package)
            _koji_package "$1"
            return
            ;;
        --build)
            _koji_build "$1"
            return
            ;;
        --build-target)
            _koji_target "$1"
            return
            ;;
    esac

    $split && return

    if [[ $command ]]; then
        if [[ $cur == -* ]]; then
            COMPREPLY=( $( compgen -W \
                '$( _parse_help "$1" "$command --help" )' -- "$cur" ) )
            [[ $COMPREPLY == *= ]] && compopt -o nospace
            return
        fi

        # How many'th non-option arg (1-based) for $command are we completing?
        local i nth=1
        for (( i=commandix+1; i < cword; i++ )); do
            [[ ${words[i]} == -* ]] || (( nth++ ))
        done

        case $command in
            build|maven-build|win-build)
                case $nth in
                    1)
                        _koji_target "$1"
                        ;;
                    2)
                        _filedir src.rpm
                        ;;
                esac
                ;;
            cancel)
                _koji_build "$1"
                ;;
            chain-build)
                case $nth in
                    1)
                        _koji_target "$1"
                        ;;
                esac
                ;;
            download-build)
                case $nth in
                    1)
                        _koji_build "$1"
                        ;;
                esac
                ;;
            import-comps)
                case $nth in
                    1)
                        _filedir xml
                        ;;
                    2)
                        _koji_tag "$1"
                        ;;
                esac
                ;;
            latest-by-tag)
                _koji_package "$1"
                ;;
            latest-pkg|list-groups|list-tag-inheritance|show-groups)
                case $nth in
                    1)
                        _koji_tag "$1"
                        ;;
                esac
                ;;
            list-tagged)
                case $nth in
                    1)
                        _koji_tag "$1"
                        ;;
                    2)
                        _koji_package "$1"
                        ;;
                esac
                ;;
            list-untagged)
                case $nth in
                    1)
                        _koji_package "$1"
                        ;;
                esac
                ;;
            move-pkg)
                case $nth in
                    1|2)
                        _koji_tag "$1"
                        ;;
                    *)
                        _koji_package "$1"
                        ;;
                esac
                ;;
            search)
                case $nth in
                    1)
                        COMPREPLY=( $( compgen -W 'package build tag target
                            user host rpm' -- "$cur" ) )
                        ;;
                esac
                ;;
            tag-pkg|untag-pkg)
                case $nth in
                    1)
                        _koji_tag "$1"
                        ;;
                    *)
                        _koji_package "$1"
                        ;;
                esac
                ;;
            taginfo)
                _koji_tag "$1"
                ;;
            wait-repo)
                case $nth in
                    1)
                        for (( i=commandix+1; i < cword; i++ )); do
                            if [[ ${words[i]} == --target ]]; then
                                _koji_target "$1"
                                return
                            fi
                        done
                        _koji_tag "$1"
                        ;;
                esac
                ;;
        esac
        return
    fi

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
    elif [[ ! $command ]]; then
        COMPREPLY=( $( compgen -W '$( "$1" --help-commands 2>/dev/null | \
            awk "/^(  +|\t)/ { print \$1 }" )' -- "$cur" ) )
    fi
} &&
complete -F _koji koji arm-koji ppc-koji s390-koji sparc-koji

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # ktutil completion                                        -*- shell-script -*-

_heimdal_principals()
{
    COMPREPLY=( $( compgen -W "$( kadmin -l dump 2>/dev/null | \
        awk '{print $1}' )" -- "$cur" ) )
}

_heimdal_realms()
{
    COMPREPLY=( $( compgen -W "( kadmin -l dump 2>/dev/null | \
        awk '{print $1}' | awk -F@ '{print $2}' )" -- "$cur" ) )
}

_heimdal_encodings()
{
    COMPREPLY=( $( compgen -W 'des-cbc-mcrc des-cbc-md4 des-cbc-md5
        des3-cbc-sha1 arcfour-hmac-md5 aes128-cts-hmac-sha1-96
        aes256-cts-hmac-sha1-96' -- "$cur" ) )
}

_ktutil()
{
    local cur prev words cword split
    _init_completion -s || return

    local command options

    case $prev in
        -p|--principal)
            _heimdal_principals
            return 0
            ;;
        -e|--enctype)
            _heimdal_encodings
            return 0
            ;;
        -a|--admin-server)
            _known_hosts_real "$cur"
            return 0
            ;;
        -r|--realm)
            _heimdal_realms
            return 0
            ;;
        -s|-k|--srvtab|--keytab)
            _filedir
            return 0
            ;;
    esac

    $split && return 0

    commands='add change copy get list remove rename purge srvconvert
        srv2keytab srvcreate key2srvtab'

    for (( i=1; i < cword; i++ )); do
        case ${words[i]} in
            -k|--keytab)
                i=$(($i+1))
                ;;
            -*)
                ;;
            *)
                command=${words[i]}
                break
                ;;
        esac
    done

    if [[ "$cur" == -* ]]; then
        case $command in
            add)
                options='-p --principal -V -e --enctype -w --password -r
                    --random -s --no-salt -h --hex'
            ;;
            change)
                options='-r --realm -a --admin-server -s --server-port'
            ;;
            get)
                options='-p --principal -e --enctype -r --realm -a
                    --admin-server -s server --server-port'
                ;;
            list)
                options='--keys --timestamp'
                ;;
            remove)
                options='-p --principal -V --kvno -e --enctype'
                ;;
            purge)
                options='--age'
                ;;
            srv2keytab|key2srvtab)
                options='-s --srvtab'
                ;;
            *)
                options='-k --keytab -v --verbose --version -v --help'
                ;;
        esac
        COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
    else
        case $command in
            copy)
                _filedir
                ;;
            get)
                _heimdal_principals
                ;;
            rename)
                _heimdal_principals
                ;;
            *)
                COMPREPLY=( $( compgen -W "$commands" -- "$cur" ) )
                ;;
        esac
    fi
} &&
complete -F _ktutil ktutil

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # larch(1) completion                                      -*- shell-script -*-
# by Alex Shinn <foof@synthcode.com>

_larch()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 || "$prev" == -* ]]; then
        COMPREPLY=( $( compgen -W ' \
            my-id my-default-archive register-archive whereis-archive archives \
            init-tree tree-root tree-version set-tree-version inventory \
            tagging-method tree-lint missing-tags add delete \
            move explicit-default set-manifest manifest check-manifest mkpatch \
            dopatch patch-report empty-patch make-archive make-category \
            make-branch make-version categories branches versions revisions \
            cat-archive-log archive-cache-revision archive-cached-revisions \
            archive-uncache-revision category-readme branch-readme \
            version-readme make-log logs add-log log-ls cat-log \
            log-header-field changelog log-for-merge merge-points \
            new-on-branch import commit get get-patch lock-branch \
            lock-revision push-mirror build-config update-config replay-config \
            record-config show-config config-history update replay delta-patch \
            star-merge tag prepare-branch finish-branch join-branch \
            whats-missing what-changed file-diffs pristines lock-pristine \
            my-revision-library library-find library-add library-remove \
            library-archives library-categories library-branches \
            library-versions library-revisions library-log library-file \
            touched-files-prereqs patch-set-web update-distributions \
            distribution-name notify my-notifier mail-new-categories \
            mail-new-branches mail-new-versions mail-new-revisions \
            notify-library notify-browser push-new-revisions sendmail-mailx' \
            "$cur" ) )
    fi

    return 0
} &&
complete -F _larch -o default larch

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       _last_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-f')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
		'-h')
			COMPREPLY=( $(compgen -A hostname -- $cur) )
			return 0
			;;
		'-i')
			COMPREPLY=( $(compgen -W "ipaddr" -- $cur) )
			return 0
			;;
		'-t')
			local TTYS
			TTYS=$(cd /sys/devices/virtual/tty && echo *)
			COMPREPLY=( $(compgen -W "$TTYS" -- $cur) )
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="-f -h -i -l -t -y"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -u -- $cur) )
	return 0
}
complete -F _last_module last
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # lastlog(8) completion                                    -*- shell-script -*-

_lastlog()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -b|--before|-h|--help|-t|--time)
            return 0
            ;;
        -u|--user)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
} &&
complete -F _lastlog lastlog

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # bash completion for openldap                             -*- shell-script -*-

_ldap_uris()
{
    COMPREPLY=( $( compgen -W 'ldap:// ldaps://' -- "$cur" ) )
}

_ldap_protocols()
{
    COMPREPLY=( $( compgen -W '2 3' -- "$cur" ) )
}

_ldapsearch()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -T)
            _filedir -d
            return 0
            ;;
        -f|-y)
            _filedir
            return 0
            ;;
        -s)
            COMPREPLY=( $( compgen -W 'base one sub children' -- "$cur" ) )
            return 0
            ;;
        -a)
            COMPREPLY=( $( compgen -W 'never always search find' \
                -- "$cur" ) )
            return 0
            ;;
        -P)
            _ldap_protocols
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -MM -ZZ' -- "$cur" ) )
    fi
} &&
complete -F _ldapsearch ldapsearch

_ldapaddmodify()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -S|-f|-y)
            _filedir
            return 0
            ;;
        -P)
            _ldap_protocols
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -MM -ZZ' -- "$cur" ) )
    fi
} &&
complete -F _ldapaddmodify ldapadd ldapmodify

_ldapdelete()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -f|-y)
            _filedir
            return 0
            ;;
        -P)
            _ldap_protocols
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -MM -ZZ' -- "$cur" ) )
    fi
} &&
complete -F _ldapdelete ldapdelete

_ldapcompare()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -y)
            _filedir
            return 0
            ;;
        -P)
            _ldap_protocols
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -MM -ZZ' -- "$cur" ) )
    fi
} &&
complete -F _ldapcompare ldapcompare

_ldapmodrdn()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -f|-y)
            _filedir
            return 0
            ;;
        -P)
            _ldap_protocols
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -ZZ -MM' -- "$cur" ) )
    fi
} &&
complete -F _ldapmodrdn ldapmodrdn

_ldapwhoami()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -f|-y)
            _filedir
            return 0
            ;;
        -P)
            _ldap_protocols
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -MM -ZZ' -- "$cur" ) )
    fi
} &&
complete -F _ldapwhoami ldapwhoami

_ldappasswd()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h)
            _known_hosts_real "$cur"
            return 0
            ;;
        -H)
            _ldap_uris
            return 0
            ;;
        -t|-T|-y)
            _filedir
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) -MM -ZZ' -- "$cur" ) )
    fi
} &&
complete -F _ldappasswd ldappasswd

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # bash completion for ldapvi                               -*- shell-script -*-

_ldapvi()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -h|--host)
            _known_hosts_real "$cur"
            return 0
            ;;
        -Y|--sasl-mech)
            COMPREPLY=( $( compgen -W 'EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5
                PLAIN ANONYMOUS' -- "$cur" ) )
            return 0
            ;;
        --bind)
            COMPREPLY=( $( compgen -W 'simple sasl' -- "$cur" ) )
            return 0
            ;;
        --bind-dialog)
            COMPREPLY=( $( compgen -W 'never auto always' -- "$cur" ) )
            return 0
            ;;
        --scope)
            COMPREPLY=( $( compgen -W 'base one sub' -- "$cur" ) )
            return 0
            ;;
        --deref)
            COMPREPLY=( $( compgen -W 'never searching finding always' \
                -- "$cur" ) )
            return 0
            ;;
        --encoding)
            COMPREPLY=( $( compgen -W 'ASCII UTF-8 binary' -- "$cur" ) )
            return 0
            ;;
        --tls)
            COMPREPLY=( $( compgen -W 'never allow try strict' -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    fi
} &&
complete -F _ldapvi ldapvi

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         _ldattach_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-s'|'--speed')
			COMPREPLY=( $(compgen -W "speed" -- $cur) )
			return 0
			;;
		'-i'|'--iflag')
			local IFLAGS
			IFLAGS="BRKINT ICRNL IGNBRK IGNCR IGNPAR IMAXBEL
				INLCR INPCK ISTRIP IUCLC IUTF8 IXANY
				IXOFF IXON PARMRK
				-BRKINT -ICRNL -IGNBRK -IGNCR -IGNPAR -IMAXBEL
				-INLCR -INPCK -ISTRIP -IUCLC -IUTF8 -IXANY
				-IXOFF -IXON -PARMRK"
			COMPREPLY=( $(compgen -W "$IFLAGS" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--debug
				--speed
				--sevenbits
				--eightbits
				--noparity
				--evenparity
				--oddparity
				--onestopbit
				--twostopbits
				--iflag
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
		/*)
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
	esac
	local LDISC_DEVICE
	LDISC_DEVICE="6PACK AX25 GIGASET GIGASET_M101 HCI HDLC IRDA M101
			MOUSE PPP PPS R3964 SLIP STRIP SYNCPPP SYNC_PPP
			TTY X25 /dev/"
	COMPREPLY=( $(compgen -W "$LDISC_DEVICE" -- $cur) )
	return 0
}
complete -F _ldattach_module ldattach
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # lftp(1) completion                                       -*- shell-script -*-

_lftp()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -f)
            _filedir
            return 0
            ;;
        -c|-h|--help|-v|--version|-e|-u|-p)
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]] ; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

    COMPREPLY=( $( compgen -W \
        '$( cut -f 1 -s ~/.lftp/bookmarks 2>/dev/null )' -- "$cur" ) )
    _known_hosts_real "$cur"
} &&
complete -F _lftp lftp

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # lftpget(1) completion                                    -*- shell-script -*-

_lftpget()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]] ; then
        COMPREPLY=( $( compgen -W '-c -d -v' -- "$cur" ) )
    fi
} &&
complete -F _lftpget lftpget

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # bash completion for lilo(8)                              -*- shell-script -*-

_lilo_labels()
{
    COMPREPLY=( $( compgen -W "$( awk -F'=' '/label/ {print $2}' \
        /etc/lilo.conf | sed -e 's/\"//g' )" -- "$cur" ) )
}

_lilo()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -C|-i|-m|-s|-S)
            _filedir
            return 0
            ;;
        -r)
            _filedir -d
            return 0
            ;;
        -I|-D|-R)
            # label completion
            _lilo_labels
            return 0
            ;;
        -A|-b|-M|-u|-U)
            # device completion
            cur=${cur:=/dev/}
            _filedir
            return 0
            ;;
        -T)
            # topic completion
            COMPREPLY=( $( compgen -W 'help ChRul EBDA geom geom= table=
                video' -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        # relevant options completion
        COMPREPLY=( $( compgen -W '-A -b -c -C -d -f -g -i -I -l -L -m -M -p -P
            -q -r -R -s -S -t -T -u -U -v -V -w -x -z' -- "$cur" ) )
    fi
} &&
complete -F _lilo lilo

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # bash completion for links                                -*- shell-script -*-

_links()
{
    local cur prev words cword
    _init_completion || return

    case $cur in
        --*)
            COMPREPLY=( $( compgen -W '--help' -- "$cur" ) )
            ;;
        -*)
            COMPREPLY=( $( compgen -W '-async-dns -max-connections
                -max-connections-to-host -retries -receive-timeout
                -unrestartable-receive-timeout -format-cache-size
                -memory-cache-size -http-proxy -ftp-proxy -download-dir
                -assume-codepage -anonymous -dump -no-connect -source -version
                -help' -- "$cur" ) )
                ;;
        *)
            if [[ -r ~/.links/links.his ]]; then
                COMPREPLY=( $( compgen -W '$( < ~/.links/links.his )' \
                    -- "$cur" ) )
            fi
            _filedir '@(htm|html)'
            return 0
            ;;
    esac

    return 0
} &&
complete -F _links links

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # bash completion for lintian(1) and lintian-info(1)       -*- shell-script -*-

_lintian_tags()
{
    local match search tags

    tags=$( grep -e ^Tag /usr/share/lintian/checks/*.desc | cut -d\  -f2 )
    if [[ "$cur" == *, ]]; then
        search=${cur//,/ }
        for item in $search; do
            match=$(grep -nE "^Tag: $item$" /usr/share/lintian/checks/*.desc \
                    | cut -d: -f1 )
            tags=$( sed -e "s/\<$item\>//g" <<<$tags )
        done
        COMPREPLY+=( $(compgen -W "$tags") )
    elif [[ "$cur" == *,* ]]; then
        COMPREPLY+=( $(compgen -P "${cur%,*}," -W "$tags" -- "${cur##*,}") )
    else
        COMPREPLY+=( $(compgen -W "$tags" -- "$cur") )
    fi
    return 0
}

_lintian_checks()
{
    local match search todisable checks

    checks=$(grep -e ^Check-Script -e ^Abbrev \
             /usr/share/lintian/checks/*.desc | cut -d\  -f2 )
    if [[ "$cur" == *, ]]; then
        search=${cur//,/ }
        for item in $search; do
            match=$(grep -nE "^(Check-Script|Abbrev): $item$" \
                    /usr/share/lintian/checks/*.desc | cut -d: -f1 )
            todisable=$(grep -e ^Check-Script -e ^Abbrev $match | \
                        cut -d\  -f2 )
            for name in $todisable; do
                checks=$( sed -e "s/\<$name\>//g" <<<$checks )
            done
        done
        COMPREPLY+=( $(compgen -W "$checks") )
    elif [[ "$cur" == *,* ]]; then
        COMPREPLY+=( $(compgen -P "${cur%,*}," -W "$checks" -- "${cur##*,}") )
    else
        COMPREPLY+=( $(compgen -W "$checks" -- "$cur") )
    fi
    return 0
}

_lintian_infos()
{
    local match search infos

    infos=$(grep -e ^Collector /usr/share/lintian/collection/*.desc \
            | cut -d\  -f2 )
    if [[ "$cur" == *, ]]; then
        search=${cur//,/ }
        for item in $search; do
            match=$( grep -nE "^Collector: $item$" \
                    /usr/share/lintian/collection/*.desc | cut -d: -f1 )
            infos=$( sed -e "s/\<$item\>//g" <<<$infos )
        done
        COMPREPLY+=( $(compgen -W "$infos") )
    elif [[ "$cur" == *,* ]]; then
        COMPREPLY+=( $(compgen -P "${cur%,*}," -W "$infos" -- "${cur##*,}") )
    else
        COMPREPLY+=( $(compgen -W "$infos" -- "$cur") )
    fi
    return 0
}

_lintian_arches()
{
    return 0
}

_lintian()
{
    local cur prev words cword
    _init_completion || return

    local action lint_actions general_opts behaviour_opts \
          configuration_opts selection_opts

    lint_actions="--setup-lab --remove-lab --check --check-part --tags
        --tags-from-file --ftp-master-rejects --dont-check-part --unpack
        --remove"
    general_opts="--help --version --print-version --verbose --debug --quiet"
    behaviour_opts="--info --display-info --display-experimental --pedantic
        --display-level --suppress-tags --suppress-tags-from-file --no-override
        --show-overrides --color --unpack-info --md5sums --checksums
        --allow-root --fail-on-warnings --keep-lab"
    configuration_opts="--cfg --lab --archivedir --dist --area --section --arch
        --root"
    selection_opts="--all --binary --source --udeb --packages-file"

    if [[ "$prev" = -* ]]; then
        case $prev in
            -C|--check-part|-X|--dont-check-part)
                _lintian_checks
                ;;
            -T|--tags|--suppress-tags)
                _lintian_tags
                ;;
            --tags-from-file|--suppress-tags-from-file|--cfg|-p|\
            --packages-file)
                _filedir
                ;;
            --lab|--archivedir|--dist|--root)
                _filedir -d
                ;;
            --color)
                COMPREPLY=($(compgen -W "never always auto html" -- "$cur"))
                ;;
            -U|--unpack-info)
                _lintian_infos
                ;;
            --area|--section)
                COMPREPLY=($(compgen -W "main contrib non-free" -- "$cur"))
                ;;
            --arch)
                ;;
        esac
    fi

    case "$cur" in
        --*)
            COMPREPLY=($(compgen -W "$lint_actions $general_opts
                $behaviour_opts $configuration_opts" -- "$cur"))
            ;;
        *,)
            # If we're here, the user is trying to complete on
            # --action tag,tag,<TAB>
            # Only few actions permit that, re-complete them now.
            case "$prev" in
                -C|--check-part|-X|--dont-check-part)
                    _lintian_checks
                    ;;
                -T|--tags|--suppress-tags)
                    _lintian_tags
                    ;;
                -U|--unpack-info)
                    _lintian_infos
                    ;;
            esac
            ;;
        *)
            _filedir '@(?(u)deb|changes|dsc)'
            ;;
    esac
    return 0
} &&
complete -F _lintian lintian

_lintian_info()
{
    local cur prev words cword
    _init_completion || return

    case "$prev" in
        -t|--tags)
            _lintian_tags
            return 0
            ;;
    esac

    case "$cur" in
        --*)
            COMPREPLY=($(compgen -W "--annotate --help --tags" -- "$cur"))
            ;;
        *)
            _filedir
            ;;
    esac
    return 0
} &&
complete -F _lintian_info lintian-info

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #                                                          -*- shell-script -*-
# bash programmable completion for various Common Lisp implementations by
# Nikodemus Siivola <nikodemus@random-state.net>

_lisp()
{
    local cur prev words cword
    _init_completion || return

    # completing an option (may or may not be separated by a space)
    if [[ "$cur" == -* ]]; then
    COMPREPLY=( $( compgen -W '-core -lib -batch -quit -edit -eval -init
        -dynamic-space-size -hinit -noinit -nositeinit -load -slave' \
        -- "$cur" ) )
    else
        _filedir
    fi

    return 0
} &&
complete -F _lisp -o default lisp

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # mailman list_admins completion                           -*- shell-script -*-

_list_admins()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--all-vhost --all --help' -- "$cur" ) )
    else
        _xfunc list_lists _mailman_lists
    fi

} &&
complete -F _list_admins list_admins

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # mailman list_lists completion                            -*- shell-script -*-

_mailman_lists()
{
    COMPREPLY=( $( compgen -W '$( list_lists -b 2>/dev/null )' -- "$cur" ) )
}

_list_lists()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--advertised --virtual-host-overview --bare
            --help' -- "$cur" ) )
    fi

} &&
complete -F _list_lists list_lists

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # mailman list_members completion                          -*- shell-script -*-

_list_members()
{
    local cur prev words cword split
    _init_completion -s || return

    case $prev in
        -o|--output)
            _filedir
            return 0
            ;;
        -d|--digest)
            COMPREPLY=( $( compgen -W 'mime plain' -- "$cur" ) )
            return 0
            ;;
        -n|--nomail)
            COMPREPLY=( $( compgen -W 'byadmin byuser bybounce unknown' \
                -- "$cur" ) )
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--output --regular --digest --nomail
            --fullnames --preserve --help' -- "$cur" ) )
    else
        _xfunc list_lists _mailman_lists
    fi

} &&
complete -F _list_members list_members

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # mailman list_owners completion                           -*- shell-script -*-

_list_owners()
{
    local cur prev words cword
    _init_completion || return

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--with-listnames --moderators --help' \
            -- "$cur" ) )
    else
        _xfunc list_lists _mailman_lists
    fi

} &&
complete -F _list_owners list_owners

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # localectl(1) completion                                 -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2010 Ran Benita
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local w word=$1; shift
        for w in "$@"; do
                [[ $w = "$word" ]] && return
        done
}

__locale_fields=( LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME \
                  LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER \
                  LC_NAME LC_ADDRESS LC_TELEPHONE \
                  LC_MEASUREMENT LC_IDENTIFICATION )
# LC_ALL is omitted on purpose

_localectl() {
        local i verb comps locale_vals
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local OPTS='-h --help --version --no-convert --no-pager --no-ask-password
                    -H --host --machine'

        if __contains_word "$prev" $OPTS; then
                case $prev in
                        --host|-H)
                                comps=''
                        ;;
                esac
                COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
                return 0
        fi

        if [[ $cur = -* ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
                return 0
        fi

        local -A VERBS=(
               [STANDALONE]='status list-locales list-keymaps'
                  [LOCALES]='set-locale'
                  [KEYMAPS]='set-keymap'
                      [X11]='set-x11-keymap'
        )

        for ((i=0; i < COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]}; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        if [[ -z $verb ]]; then
                comps=${VERBS[*]}
        elif __contains_word "$verb" ${VERBS[LOCALES]}; then
                if [[ $cur = *=* ]]; then
                        mapfile -t locale_vals < <(command localectl list-locales 2>/dev/null)
                        COMPREPLY=( $(compgen -W '${locale_vals[*]}' -- "${cur#=}") )
                elif [[ $prev = "=" ]]; then
                        mapfile -t locale_vals < <(command localectl list-locales 2>/dev/null)
                        COMPREPLY=( $(compgen -W '${locale_vals[*]}' -- "$cur") )
                else
                        compopt -o nospace
                        COMPREPLY=( $(compgen -W '${__locale_fields[*]}' -S= -- "$cur") )
                fi
                return 0
        elif __contains_word "$verb" ${VERBS[KEYMAPS]}; then
                comps=$(command localectl list-keymaps)
        elif __contains_word "$verb" ${VERBS[STANDALONE]} ${VERBS[X11]}; then
                comps=''
        fi

        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
}

complete -F _localectl localectl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _logger_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-f'|'--file'|'--journald')
			local IFS=$'\n'
			compopt -o filenames
			COMPREPLY=( $(compgen -f -- $cur) )
			return 0
			;;
		'-n'|'--server')
			COMPREPLY=( $(compgen -A hostname -- $cur) )
			return 0
			;;
		'-P'|'--port')
			COMPREPLY=( $(compgen -W "$(awk '$1 ~ /^syslog$/  {split($2, a, "/"); print a[1]}' /etc/services)" -- $cur) )
			return 0
			;;
		'-p'|'--priority')
			COMPREPLY=( $(compgen -W "{auth,authpriv,cron,daemon,ftp,lpr,mail,news,security}.{alert,crit,debug,emerg,err,error}" -- $cur) )
			return 0
			;;
		'-t'|'--tag')
			COMPREPLY=( $(compgen -W "tag" -- $cur) )
			return 0
			;;
		'-u'|'--socket')
			COMPREPLY=( $(compgen -W "$(awk '$NF ~ /^\// {print $NF}' /proc/net/unix)" -- $cur) )
			return 0
			;;
		'--msgid')
			COMPREPLY=( $(compgen -W "msgid" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="
				--file
				--help
				--id
				--journald
				--msgid
				--no-act
				--octet-count
				--port
				--prio-prefix
				--priority
				--rfc3164
				--rfc5424
				--server
				--size
				--skip-empty
				--socket
				--stderr
				--tag
				--udp
				--version
			"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	return 0
}
complete -F _logger_module logger
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # look(1) completion                                       -*- shell-script -*-

_look()
{
    local cur prev words cword
    _init_completion || return

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $( compgen -W '$(look "$cur" 2>/dev/null)' -- "$cur" ) )
    fi
} &&
complete -F _look -o default look

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # loginctl(1) completion                                  -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2010 Ran Benita
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local w word=$1; shift
        for w in "$@"; do
                [[ $w = "$word" ]] && return
        done
}

__get_all_sessions () { loginctl --no-legend list-sessions | { while read -r a b; do printf "%s\n" "$a"; done; } ; }
__get_all_users    () { loginctl --no-legend list-users    | { while read -r a b; do printf "%s\n" "$b"; done; } ; }
__get_all_seats    () { loginctl --no-legend list-seats    | { while read -r a b; do printf "%s\n" "$a"; done; } ; }

_loginctl () {
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local i verb comps

        local -A OPTS=(
               [STANDALONE]='--all -a --help -h --no-pager --privileged -P --version
                             --no-legend --no-ask-password -l --full'
                      [ARG]='--host -H --kill-who --property -p --signal -s --machine'
                      )

        if __contains_word "$prev" ${OPTS[ARG]}; then
                case $prev in
                        --signal|-s)
                                _signals
                                return
                        ;;
                        --kill-who)
                                comps='all leader'
                        ;;
                        --host|-H)
                                comps=$(compgen -A hostname)
                        ;;
                        --property|-p)
                                comps=''
                        ;;
                esac
                COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
                return 0
        fi


        if [[ "$cur" = -* ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
                return 0
        fi

        local -A VERBS=(
                [SESSIONS]='session-status show-session activate lock-session unlock-session terminate-session kill-session'
                [USERS]='user-status show-user enable-linger disable-linger terminate-user kill-user'
                [SEATS]='seat-status show-seat terminate-seat'
                [STANDALONE]='list-sessions list-users list-seats flush-devices'
                [ATTACH]='attach'
        )

        for ((i=0; i < COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]} &&
                 ! __contains_word "${COMP_WORDS[i-1]}" ${OPTS[ARG]}; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        if   [[ -z $verb ]]; then
                comps="${VERBS[*]}"

        elif __contains_word "$verb" ${VERBS[SESSIONS]}; then
                comps=$( __get_all_sessions )

        elif __contains_word "$verb" ${VERBS[USERS]}; then
                comps=$( __get_all_users )

        elif __contains_word "$verb" ${VERBS[SEATS]}; then
                comps=$( __get_all_seats )

        elif __contains_word "$verb" ${VERBS[STANDALONE]}; then
                comps=''

        elif __contains_word "$verb" ${VERBS[ATTACH]}; then
                if [[ $prev = $verb ]]; then
                        comps=$( __get_all_seats )
                else
                        comps=$(compgen -A file -- "$cur" )
                        compopt -o filenames
                fi
        fi

        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
}

complete -F _loginctl loginctl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            _losetup_module()
{
	local cur prev OPTS ARG
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-d'|'--detach')
			ARG="$($1 --output NAME | awk '{if (1 < NR) {print}}')"
			COMPREPLY=( $(compgen -W "$ARG" -- $cur) )
			return 0
			;;
		'-j'|'--associated')
			ARG="$($1 --output BACK-FILE | awk '{if (1 < NR) {print}}')"
			COMPREPLY=( $(compgen -W "$ARG" -- $cur) )
			return 0
			;;
		'-c'|'--set-capacity')
			ARG="$(for I in /dev/loop[0-9]*; do if [ -e $I ]; then echo $I; fi; done)"
			COMPREPLY=( $(compgen -W "$ARG" -- $cur) )
			return 0
			;;
		'-o'|'--offset'|'--sizelimit')
			COMPREPLY=( $(compgen -W "number" -- $cur) )
			return 0
			;;
		'-O'|'--output')
			local prefix realcur OUTPUT_ALL OUTPUT
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			OUTPUT_ALL="NAME AUTOCLEAR BACK-FILE BACK-INO
				BACK-MAJ:MIN MAJ:MIN OFFSET PARTSCAN RO
				SIZELIMIT"
			for WORD in $OUTPUT_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					OUTPUT="$WORD $OUTPUT"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$OUTPUT" -S ',' -- $realcur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--all
				--detach
				--detach-all
				--find
				--set-capacity
				--associated
				--list
				--offset
				--output
				--sizelimit
				--partscan
				--read-only
				--show
				--verbose
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _losetup_module losetup
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       # lpq(1) completion                                        -*- shell-script -*-

_lpq()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -P)
            COMPREPLY=( $( compgen -W "$( lpstat -a 2>/dev/null | cut -d' ' -f1 )" -- "$cur" ) )
            return 0
            ;;
        -U)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
    esac

    if [[ "$cur" == - ]]; then
        COMPREPLY=( $( compgen -W '-E -P -U -a -h -l' -- "$cur" ) )
        return 0
    fi

    _filedir
} &&
complete -F _lpq lpq

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # lpr(1) completion                                        -*- shell-script -*-

_lpr()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -P)
            COMPREPLY=( $( compgen -W "$( lpstat -a 2>/dev/null | cut -d' ' -f1 )" -- "$cur" ) )
            return 0
            ;;
        -U)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
        -o)
            COMPREPLY=( $( compgen -W "media= landscape orientation-requested= sides= fitplot number-up= scaling= cpi= lpi= page-bottom= page-top= page-left= page-right=" -- "$cur" ) )
            [[ $COMPREPLY == *= ]] && compopt -o nospace
            return 0
            ;;
    esac

    if [[ "$cur" == - ]]; then
        COMPREPLY=( $( compgen -W '-E -H -C -J -T -P -U -h -l -m -o -p -q -r' -- "$cur" ) )
        return 0
    fi

    _filedir
} &&
complete -F _lpr lpr

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         # lrzip(1) completion                                      -*- shell-script -*-

_lrzip()
{
    local cur prev words cword
    _init_completion || return

    local xspec="*.lrz"

    case $prev in
        -w|-S|-V|-h|-'?')
            return 0
            ;;
        -d)
            xspec="!"$xspec
            ;;
        -o)
            _filedir
            return 0
            ;;
        -O)
            _filedir -d
            return 0
            ;;
        -L)
            COMPREPLY=( $( compgen -W '{1..9}' -- "$cur" ) )
            return 0
            ;;
        -N)
            COMPREPLY=( $( compgen -W '{-20..19}' -- "$cur" ) )
            return 0
            ;;
        -p)
            COMPREPLY=( $( compgen -W "{1..$(_ncpus)}" -- "$cur" ) )
            return 0
            ;;
    esac

    _expand || return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
        return 0
    fi

    local IFS=$'\n'
    compopt -o filenames
    COMPREPLY=( $( compgen -f -X "$xspec" -- "$cur" ) \
        $( compgen -d -- "$cur" ) )
} &&
complete -F _lrzip lrzip

# ex: ts=4 sw=4 et filetype=sh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           _lsblk_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"

	LSBLK_COLS_ALL="NAME KNAME MAJ:MIN FSTYPE MOUNTPOINT
		LABEL UUID PARTTYPE PARTLABEL PARTUUID PARTFLAGS
		RA RO RM
		MODEL SIZE STATE OWNER GROUP MODE
		ALIGNMENT MIN-IO OPT-IO PHY-SEC LOG-SEC
		ROTA SCHED RQ-SIZE TYPE DISC-ALN
		DISC-GRAN DISC-MAX DISC-ZERO WSAME WWN
		RAND PKNAME HCTL TRAN REV VENDOR"

	case $prev in
		'-e'|'--exclude'|'-I'|'--include')
			local realcur prefix MAJOR_ALL MAJOR I J
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			for I in /sys/dev/block/*; do
				J=${I##*/}
				MAJOR_ALL="$MAJOR_ALL ${J%%:*}"
			done
			for WORD in $MAJOR_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					MAJOR="$WORD $MAJOR"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$MAJOR" -S ',' -- $realcur) )
			return 0
			;;
		'-o'|'--output')
			local prefix realcur LSBLK_COLS
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			for WORD in $LSBLK_COLS_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					LSBLK_COLS="$WORD $LSBLK_COLS"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$LSBLK_COLS" -S ',' -- $realcur) )
			return 0
			;;
		'-x'|'--sort')
			compopt -o nospace
			COMPREPLY=( $(compgen -W "$LSBLK_COLS_ALL"  -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--all
				--bytes
				--nodeps
				--discard
				--exclude
				--fs
				--help
				--include
				--ascii
				--list
				--perms
				--noheadings
				--output
				--pairs
				--raw
				--inverse
				--topology
				--scsi
				--sort
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	COMPREPLY=( $(compgen -W "$($1 -pnro name)" -- $cur) )
	return 0
}
complete -F _lsblk_module lsblk
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       _lscpu_module()
{
	local cur OPTS_ALL
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'--extended='|'=')
			local prefix realcur OPTS
			cur=${cur#=}
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			OPTS_ALL="CPU CORE SOCKET NODE
				BOOK CACHE POLARIZATION ADDRESS
				CONFIGURED ONLINE MAXMHZ MINMHZ"
			for WORD in $OPTS_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					OPTS="$WORD $OPTS"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$OPTS" -S ',' -- $realcur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS_ALL="--all
				--online
				--offline
				--extended=
				--parse=
				--sysroot
				--hex
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS_ALL[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _lscpu_module lscpu
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       _lsipc_module()
{
	local cur prev OPTS ARG
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-i'|'--id')
			COMPREPLY=( $(compgen -W "id" -- $cur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
		'-o'|'--output')
			local prefix realcur OUTPUT_ALL OUTPUT
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			OUTPUT_ALL="GENERAL KEY ID OWNER PERMS CUID
			CGID UID GID CHANGE MESSAGE USEDBYTES
			MSGS SEND RECV LSPID LRPID SHARED BYTES
			NATTCH STATUS ATTACH DETACH CPID LPID NSEMS
			LASTOP"
			for WORD in $OUTPUT_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					OUTPUT="$WORD $OUTPUT"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$OUTPUT" -S ',' -- $realcur) )
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--id
				--help
				--version
				--shmems
				--queues
				--semaphores
				--colon-separate
				--creator
				--export
				--global
				--json
				--newline
				--noheadings
				--notruncate
				--output
				--pid
				--print0
				--raw
				--time
				--time-format"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _lsipc_module lsipc
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           _lslocks_module()
{
	local cur prev OPTS
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	case $prev in
		'-p'|'--pid')
			local PIDS
			# /proc/locks can have 8 to 9 fields, see commit
			# 55c0d16bab8cc84b72bf11cb2fdd8aa6205ac608
			PIDS="$(awk '{print $(NF-3)}' /proc/locks)"
			COMPREPLY=( $(compgen -W "$PIDS" -- $cur) )
			return 0
			;;
		'-o'|'--output')
			local prefix realcur OUTPUT_ALL OUTPUT
			realcur="${cur##*,}"
			prefix="${cur%$realcur}"
			OUTPUT_ALL="COMMAND PID TYPE SIZE MODE M START END PATH BLOCKER"
			for WORD in $OUTPUT_ALL; do
				if ! [[ $prefix == *"$WORD"* ]]; then
					OUTPUT="$WORD $OUTPUT"
				fi
			done
			compopt -o nospace
			COMPREPLY=( $(compgen -P "$prefix" -W "$OUTPUT" -S ',' -- $realcur) )
			return 0
			;;
		'-h'|'--help'|'-V'|'--version')
			return 0
			;;
	esac
	case $cur in
		-*)
			OPTS="--pid
				--json
				--output
				--noheadings
				--raw
				--notruncate
				--help
				--version"
			COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
			return 0
			;;
	esac
	local IFS=$'\n'
	compopt -o filenames
	COMPREPLY=( $(compgen -f -- $cur) )
	return 0
}
complete -F _lslocks_module lslocks
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        