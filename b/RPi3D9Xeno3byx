ntr0___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr0___bit 0
#define reg_iop_sw_mpu_rw_cpu_intr___intr1___lsb 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr1___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr1___bit 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr2___lsb 2
#define reg_iop_sw_mpu_rw_cpu_intr___intr2___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr2___bit 2
#define reg_iop_sw_mpu_rw_cpu_intr___intr3___lsb 3
#define reg_iop_sw_mpu_rw_cpu_intr___intr3___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr3___bit 3
#define reg_iop_sw_mpu_rw_cpu_intr___intr4___lsb 4
#define reg_iop_sw_mpu_rw_cpu_intr___intr4___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr4___bit 4
#define reg_iop_sw_mpu_rw_cpu_intr___intr5___lsb 5
#define reg_iop_sw_mpu_rw_cpu_intr___intr5___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr5___bit 5
#define reg_iop_sw_mpu_rw_cpu_intr___intr6___lsb 6
#define reg_iop_sw_mpu_rw_cpu_intr___intr6___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr6___bit 6
#define reg_iop_sw_mpu_rw_cpu_intr___intr7___lsb 7
#define reg_iop_sw_mpu_rw_cpu_intr___intr7___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr7___bit 7
#define reg_iop_sw_mpu_rw_cpu_intr___intr8___lsb 8
#define reg_iop_sw_mpu_rw_cpu_intr___intr8___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr8___bit 8
#define reg_iop_sw_mpu_rw_cpu_intr___intr9___lsb 9
#define reg_iop_sw_mpu_rw_cpu_intr___intr9___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr9___bit 9
#define reg_iop_sw_mpu_rw_cpu_intr___intr10___lsb 10
#define reg_iop_sw_mpu_rw_cpu_intr___intr10___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr10___bit 10
#define reg_iop_sw_mpu_rw_cpu_intr___intr11___lsb 11
#define reg_iop_sw_mpu_rw_cpu_intr___intr11___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr11___bit 11
#define reg_iop_sw_mpu_rw_cpu_intr___intr12___lsb 12
#define reg_iop_sw_mpu_rw_cpu_intr___intr12___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr12___bit 12
#define reg_iop_sw_mpu_rw_cpu_intr___intr13___lsb 13
#define reg_iop_sw_mpu_rw_cpu_intr___intr13___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr13___bit 13
#define reg_iop_sw_mpu_rw_cpu_intr___intr14___lsb 14
#define reg_iop_sw_mpu_rw_cpu_intr___intr14___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr14___bit 14
#define reg_iop_sw_mpu_rw_cpu_intr___intr15___lsb 15
#define reg_iop_sw_mpu_rw_cpu_intr___intr15___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr15___bit 15
#define reg_iop_sw_mpu_rw_cpu_intr___intr16___lsb 16
#define reg_iop_sw_mpu_rw_cpu_intr___intr16___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr16___bit 16
#define reg_iop_sw_mpu_rw_cpu_intr___intr17___lsb 17
#define reg_iop_sw_mpu_rw_cpu_intr___intr17___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr17___bit 17
#define reg_iop_sw_mpu_rw_cpu_intr___intr18___lsb 18
#define reg_iop_sw_mpu_rw_cpu_intr___intr18___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr18___bit 18
#define reg_iop_sw_mpu_rw_cpu_intr___intr19___lsb 19
#define reg_iop_sw_mpu_rw_cpu_intr___intr19___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr19___bit 19
#define reg_iop_sw_mpu_rw_cpu_intr___intr20___lsb 20
#define reg_iop_sw_mpu_rw_cpu_intr___intr20___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr20___bit 20
#define reg_iop_sw_mpu_rw_cpu_intr___intr21___lsb 21
#define reg_iop_sw_mpu_rw_cpu_intr___intr21___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr21___bit 21
#define reg_iop_sw_mpu_rw_cpu_intr___intr22___lsb 22
#define reg_iop_sw_mpu_rw_cpu_intr___intr22___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr22___bit 22
#define reg_iop_sw_mpu_rw_cpu_intr___intr23___lsb 23
#define reg_iop_sw_mpu_rw_cpu_intr___intr23___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr23___bit 23
#define reg_iop_sw_mpu_rw_cpu_intr___intr24___lsb 24
#define reg_iop_sw_mpu_rw_cpu_intr___intr24___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr24___bit 24
#define reg_iop_sw_mpu_rw_cpu_intr___intr25___lsb 25
#define reg_iop_sw_mpu_rw_cpu_intr___intr25___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr25___bit 25
#define reg_iop_sw_mpu_rw_cpu_intr___intr26___lsb 26
#define reg_iop_sw_mpu_rw_cpu_intr___intr26___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr26___bit 26
#define reg_iop_sw_mpu_rw_cpu_intr___intr27___lsb 27
#define reg_iop_sw_mpu_rw_cpu_intr___intr27___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr27___bit 27
#define reg_iop_sw_mpu_rw_cpu_intr___intr28___lsb 28
#define reg_iop_sw_mpu_rw_cpu_intr___intr28___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr28___bit 28
#define reg_iop_sw_mpu_rw_cpu_intr___intr29___lsb 29
#define reg_iop_sw_mpu_rw_cpu_intr___intr29___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr29___bit 29
#define reg_iop_sw_mpu_rw_cpu_intr___intr30___lsb 30
#define reg_iop_sw_mpu_rw_cpu_intr___intr30___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr30___bit 30
#define reg_iop_sw_mpu_rw_cpu_intr___intr31___lsb 31
#define reg_iop_sw_mpu_rw_cpu_intr___intr31___width 1
#define reg_iop_sw_mpu_rw_cpu_intr___intr31___bit 31
#define reg_iop_sw_mpu_rw_cpu_intr_offset 76

/* Register r_cpu_intr, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_cpu_intr___intr0___lsb 0
#define reg_iop_sw_mpu_r_cpu_intr___intr0___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr0___bit 0
#define reg_iop_sw_mpu_r_cpu_intr___intr1___lsb 1
#define reg_iop_sw_mpu_r_cpu_intr___intr1___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr1___bit 1
#define reg_iop_sw_mpu_r_cpu_intr___intr2___lsb 2
#define reg_iop_sw_mpu_r_cpu_intr___intr2___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr2___bit 2
#define reg_iop_sw_mpu_r_cpu_intr___intr3___lsb 3
#define reg_iop_sw_mpu_r_cpu_intr___intr3___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr3___bit 3
#define reg_iop_sw_mpu_r_cpu_intr___intr4___lsb 4
#define reg_iop_sw_mpu_r_cpu_intr___intr4___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr4___bit 4
#define reg_iop_sw_mpu_r_cpu_intr___intr5___lsb 5
#define reg_iop_sw_mpu_r_cpu_intr___intr5___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr5___bit 5
#define reg_iop_sw_mpu_r_cpu_intr___intr6___lsb 6
#define reg_iop_sw_mpu_r_cpu_intr___intr6___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr6___bit 6
#define reg_iop_sw_mpu_r_cpu_intr___intr7___lsb 7
#define reg_iop_sw_mpu_r_cpu_intr___intr7___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr7___bit 7
#define reg_iop_sw_mpu_r_cpu_intr___intr8___lsb 8
#define reg_iop_sw_mpu_r_cpu_intr___intr8___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr8___bit 8
#define reg_iop_sw_mpu_r_cpu_intr___intr9___lsb 9
#define reg_iop_sw_mpu_r_cpu_intr___intr9___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr9___bit 9
#define reg_iop_sw_mpu_r_cpu_intr___intr10___lsb 10
#define reg_iop_sw_mpu_r_cpu_intr___intr10___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr10___bit 10
#define reg_iop_sw_mpu_r_cpu_intr___intr11___lsb 11
#define reg_iop_sw_mpu_r_cpu_intr___intr11___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr11___bit 11
#define reg_iop_sw_mpu_r_cpu_intr___intr12___lsb 12
#define reg_iop_sw_mpu_r_cpu_intr___intr12___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr12___bit 12
#define reg_iop_sw_mpu_r_cpu_intr___intr13___lsb 13
#define reg_iop_sw_mpu_r_cpu_intr___intr13___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr13___bit 13
#define reg_iop_sw_mpu_r_cpu_intr___intr14___lsb 14
#define reg_iop_sw_mpu_r_cpu_intr___intr14___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr14___bit 14
#define reg_iop_sw_mpu_r_cpu_intr___intr15___lsb 15
#define reg_iop_sw_mpu_r_cpu_intr___intr15___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr15___bit 15
#define reg_iop_sw_mpu_r_cpu_intr___intr16___lsb 16
#define reg_iop_sw_mpu_r_cpu_intr___intr16___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr16___bit 16
#define reg_iop_sw_mpu_r_cpu_intr___intr17___lsb 17
#define reg_iop_sw_mpu_r_cpu_intr___intr17___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr17___bit 17
#define reg_iop_sw_mpu_r_cpu_intr___intr18___lsb 18
#define reg_iop_sw_mpu_r_cpu_intr___intr18___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr18___bit 18
#define reg_iop_sw_mpu_r_cpu_intr___intr19___lsb 19
#define reg_iop_sw_mpu_r_cpu_intr___intr19___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr19___bit 19
#define reg_iop_sw_mpu_r_cpu_intr___intr20___lsb 20
#define reg_iop_sw_mpu_r_cpu_intr___intr20___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr20___bit 20
#define reg_iop_sw_mpu_r_cpu_intr___intr21___lsb 21
#define reg_iop_sw_mpu_r_cpu_intr___intr21___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr21___bit 21
#define reg_iop_sw_mpu_r_cpu_intr___intr22___lsb 22
#define reg_iop_sw_mpu_r_cpu_intr___intr22___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr22___bit 22
#define reg_iop_sw_mpu_r_cpu_intr___intr23___lsb 23
#define reg_iop_sw_mpu_r_cpu_intr___intr23___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr23___bit 23
#define reg_iop_sw_mpu_r_cpu_intr___intr24___lsb 24
#define reg_iop_sw_mpu_r_cpu_intr___intr24___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr24___bit 24
#define reg_iop_sw_mpu_r_cpu_intr___intr25___lsb 25
#define reg_iop_sw_mpu_r_cpu_intr___intr25___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr25___bit 25
#define reg_iop_sw_mpu_r_cpu_intr___intr26___lsb 26
#define reg_iop_sw_mpu_r_cpu_intr___intr26___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr26___bit 26
#define reg_iop_sw_mpu_r_cpu_intr___intr27___lsb 27
#define reg_iop_sw_mpu_r_cpu_intr___intr27___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr27___bit 27
#define reg_iop_sw_mpu_r_cpu_intr___intr28___lsb 28
#define reg_iop_sw_mpu_r_cpu_intr___intr28___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr28___bit 28
#define reg_iop_sw_mpu_r_cpu_intr___intr29___lsb 29
#define reg_iop_sw_mpu_r_cpu_intr___intr29___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr29___bit 29
#define reg_iop_sw_mpu_r_cpu_intr___intr30___lsb 30
#define reg_iop_sw_mpu_r_cpu_intr___intr30___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr30___bit 30
#define reg_iop_sw_mpu_r_cpu_intr___intr31___lsb 31
#define reg_iop_sw_mpu_r_cpu_intr___intr31___width 1
#define reg_iop_sw_mpu_r_cpu_intr___intr31___bit 31
#define reg_iop_sw_mpu_r_cpu_intr_offset 80

/* Register rw_intr_grp0_mask, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr0___lsb 0
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr0___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr0___bit 0
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp0___lsb 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp0___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp0___bit 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___timer_grp0___lsb 2
#define reg_iop_sw_mpu_rw_intr_grp0_mask___timer_grp0___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___timer_grp0___bit 2
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_out___lsb 3
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_out___bit 3
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr1___lsb 4
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr1___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr1___bit 4
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp1___lsb 5
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp1___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp1___bit 5
#define reg_iop_sw_mpu_rw_intr_grp0_mask___timer_grp1___lsb 6
#define reg_iop_sw_mpu_rw_intr_grp0_mask___timer_grp1___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___timer_grp1___bit 6
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_in___lsb 7
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_in___bit 7
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr2___lsb 8
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr2___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr2___bit 8
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp2___lsb 9
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp2___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp2___bit 9
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_out_extra___lsb 10
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_out_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_out_extra___bit 10
#define reg_iop_sw_mpu_rw_intr_grp0_mask___dmc_out___lsb 11
#define reg_iop_sw_mpu_rw_intr_grp0_mask___dmc_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___dmc_out___bit 11
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr3___lsb 12
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr3___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___spu_intr3___bit 12
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp3___lsb 13
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp3___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___trigger_grp3___bit 13
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_in_extra___lsb 14
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_in_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___fifo_in_extra___bit 14
#define reg_iop_sw_mpu_rw_intr_grp0_mask___dmc_in___lsb 15
#define reg_iop_sw_mpu_rw_intr_grp0_mask___dmc_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp0_mask___dmc_in___bit 15
#define reg_iop_sw_mpu_rw_intr_grp0_mask_offset 84

/* Register rw_ack_intr_grp0, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr0___lsb 0
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr0___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr0___bit 0
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr1___lsb 4
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr1___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr1___bit 4
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr2___lsb 8
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr2___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr2___bit 8
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr3___lsb 12
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr3___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp0___spu_intr3___bit 12
#define reg_iop_sw_mpu_rw_ack_intr_grp0_offset 88

/* Register r_intr_grp0, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr0___lsb 0
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr0___width 1
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr0___bit 0
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp0___lsb 1
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp0___width 1
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp0___bit 1
#define reg_iop_sw_mpu_r_intr_grp0___timer_grp0___lsb 2
#define reg_iop_sw_mpu_r_intr_grp0___timer_grp0___width 1
#define reg_iop_sw_mpu_r_intr_grp0___timer_grp0___bit 2
#define reg_iop_sw_mpu_r_intr_grp0___fifo_out___lsb 3
#define reg_iop_sw_mpu_r_intr_grp0___fifo_out___width 1
#define reg_iop_sw_mpu_r_intr_grp0___fifo_out___bit 3
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr1___lsb 4
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr1___width 1
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr1___bit 4
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp1___lsb 5
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp1___width 1
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp1___bit 5
#define reg_iop_sw_mpu_r_intr_grp0___timer_grp1___lsb 6
#define reg_iop_sw_mpu_r_intr_grp0___timer_grp1___width 1
#define reg_iop_sw_mpu_r_intr_grp0___timer_grp1___bit 6
#define reg_iop_sw_mpu_r_intr_grp0___fifo_in___lsb 7
#define reg_iop_sw_mpu_r_intr_grp0___fifo_in___width 1
#define reg_iop_sw_mpu_r_intr_grp0___fifo_in___bit 7
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr2___lsb 8
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr2___width 1
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr2___bit 8
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp2___lsb 9
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp2___width 1
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp2___bit 9
#define reg_iop_sw_mpu_r_intr_grp0___fifo_out_extra___lsb 10
#define reg_iop_sw_mpu_r_intr_grp0___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp0___fifo_out_extra___bit 10
#define reg_iop_sw_mpu_r_intr_grp0___dmc_out___lsb 11
#define reg_iop_sw_mpu_r_intr_grp0___dmc_out___width 1
#define reg_iop_sw_mpu_r_intr_grp0___dmc_out___bit 11
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr3___lsb 12
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr3___width 1
#define reg_iop_sw_mpu_r_intr_grp0___spu_intr3___bit 12
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp3___lsb 13
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp3___width 1
#define reg_iop_sw_mpu_r_intr_grp0___trigger_grp3___bit 13
#define reg_iop_sw_mpu_r_intr_grp0___fifo_in_extra___lsb 14
#define reg_iop_sw_mpu_r_intr_grp0___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp0___fifo_in_extra___bit 14
#define reg_iop_sw_mpu_r_intr_grp0___dmc_in___lsb 15
#define reg_iop_sw_mpu_r_intr_grp0___dmc_in___width 1
#define reg_iop_sw_mpu_r_intr_grp0___dmc_in___bit 15
#define reg_iop_sw_mpu_r_intr_grp0_offset 92

/* Register r_masked_intr_grp0, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr0___lsb 0
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr0___bit 0
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp0___lsb 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp0___bit 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___timer_grp0___lsb 2
#define reg_iop_sw_mpu_r_masked_intr_grp0___timer_grp0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___timer_grp0___bit 2
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_out___lsb 3
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_out___bit 3
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr1___lsb 4
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr1___bit 4
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp1___lsb 5
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp1___bit 5
#define reg_iop_sw_mpu_r_masked_intr_grp0___timer_grp1___lsb 6
#define reg_iop_sw_mpu_r_masked_intr_grp0___timer_grp1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___timer_grp1___bit 6
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_in___lsb 7
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_in___bit 7
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr2___lsb 8
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr2___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr2___bit 8
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp2___lsb 9
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp2___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp2___bit 9
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_out_extra___lsb 10
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_out_extra___bit 10
#define reg_iop_sw_mpu_r_masked_intr_grp0___dmc_out___lsb 11
#define reg_iop_sw_mpu_r_masked_intr_grp0___dmc_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___dmc_out___bit 11
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr3___lsb 12
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr3___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___spu_intr3___bit 12
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp3___lsb 13
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp3___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___trigger_grp3___bit 13
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_in_extra___lsb 14
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___fifo_in_extra___bit 14
#define reg_iop_sw_mpu_r_masked_intr_grp0___dmc_in___lsb 15
#define reg_iop_sw_mpu_r_masked_intr_grp0___dmc_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp0___dmc_in___bit 15
#define reg_iop_sw_mpu_r_masked_intr_grp0_offset 96

/* Register rw_intr_grp1_mask, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr4___lsb 0
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr4___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr4___bit 0
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp4___lsb 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp4___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp4___bit 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_out_extra___lsb 2
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_out_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_out_extra___bit 2
#define reg_iop_sw_mpu_rw_intr_grp1_mask___dmc_out___lsb 3
#define reg_iop_sw_mpu_rw_intr_grp1_mask___dmc_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___dmc_out___bit 3
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr5___lsb 4
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr5___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr5___bit 4
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp5___lsb 5
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp5___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp5___bit 5
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_in_extra___lsb 6
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_in_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_in_extra___bit 6
#define reg_iop_sw_mpu_rw_intr_grp1_mask___dmc_in___lsb 7
#define reg_iop_sw_mpu_rw_intr_grp1_mask___dmc_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___dmc_in___bit 7
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr6___lsb 8
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr6___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr6___bit 8
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp6___lsb 9
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp6___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp6___bit 9
#define reg_iop_sw_mpu_rw_intr_grp1_mask___timer_grp0___lsb 10
#define reg_iop_sw_mpu_rw_intr_grp1_mask___timer_grp0___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___timer_grp0___bit 10
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_out___lsb 11
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_out___bit 11
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr7___lsb 12
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr7___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___spu_intr7___bit 12
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp7___lsb 13
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp7___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___trigger_grp7___bit 13
#define reg_iop_sw_mpu_rw_intr_grp1_mask___timer_grp1___lsb 14
#define reg_iop_sw_mpu_rw_intr_grp1_mask___timer_grp1___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___timer_grp1___bit 14
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_in___lsb 15
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp1_mask___fifo_in___bit 15
#define reg_iop_sw_mpu_rw_intr_grp1_mask_offset 100

/* Register rw_ack_intr_grp1, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr4___lsb 0
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr4___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr4___bit 0
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr5___lsb 4
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr5___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr5___bit 4
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr6___lsb 8
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr6___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr6___bit 8
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr7___lsb 12
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr7___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp1___spu_intr7___bit 12
#define reg_iop_sw_mpu_rw_ack_intr_grp1_offset 104

/* Register r_intr_grp1, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr4___lsb 0
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr4___width 1
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr4___bit 0
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp4___lsb 1
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp4___width 1
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp4___bit 1
#define reg_iop_sw_mpu_r_intr_grp1___fifo_out_extra___lsb 2
#define reg_iop_sw_mpu_r_intr_grp1___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp1___fifo_out_extra___bit 2
#define reg_iop_sw_mpu_r_intr_grp1___dmc_out___lsb 3
#define reg_iop_sw_mpu_r_intr_grp1___dmc_out___width 1
#define reg_iop_sw_mpu_r_intr_grp1___dmc_out___bit 3
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr5___lsb 4
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr5___width 1
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr5___bit 4
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp5___lsb 5
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp5___width 1
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp5___bit 5
#define reg_iop_sw_mpu_r_intr_grp1___fifo_in_extra___lsb 6
#define reg_iop_sw_mpu_r_intr_grp1___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp1___fifo_in_extra___bit 6
#define reg_iop_sw_mpu_r_intr_grp1___dmc_in___lsb 7
#define reg_iop_sw_mpu_r_intr_grp1___dmc_in___width 1
#define reg_iop_sw_mpu_r_intr_grp1___dmc_in___bit 7
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr6___lsb 8
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr6___width 1
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr6___bit 8
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp6___lsb 9
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp6___width 1
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp6___bit 9
#define reg_iop_sw_mpu_r_intr_grp1___timer_grp0___lsb 10
#define reg_iop_sw_mpu_r_intr_grp1___timer_grp0___width 1
#define reg_iop_sw_mpu_r_intr_grp1___timer_grp0___bit 10
#define reg_iop_sw_mpu_r_intr_grp1___fifo_out___lsb 11
#define reg_iop_sw_mpu_r_intr_grp1___fifo_out___width 1
#define reg_iop_sw_mpu_r_intr_grp1___fifo_out___bit 11
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr7___lsb 12
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr7___width 1
#define reg_iop_sw_mpu_r_intr_grp1___spu_intr7___bit 12
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp7___lsb 13
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp7___width 1
#define reg_iop_sw_mpu_r_intr_grp1___trigger_grp7___bit 13
#define reg_iop_sw_mpu_r_intr_grp1___timer_grp1___lsb 14
#define reg_iop_sw_mpu_r_intr_grp1___timer_grp1___width 1
#define reg_iop_sw_mpu_r_intr_grp1___timer_grp1___bit 14
#define reg_iop_sw_mpu_r_intr_grp1___fifo_in___lsb 15
#define reg_iop_sw_mpu_r_intr_grp1___fifo_in___width 1
#define reg_iop_sw_mpu_r_intr_grp1___fifo_in___bit 15
#define reg_iop_sw_mpu_r_intr_grp1_offset 108

/* Register r_masked_intr_grp1, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr4___lsb 0
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr4___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr4___bit 0
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp4___lsb 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp4___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp4___bit 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_out_extra___lsb 2
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_out_extra___bit 2
#define reg_iop_sw_mpu_r_masked_intr_grp1___dmc_out___lsb 3
#define reg_iop_sw_mpu_r_masked_intr_grp1___dmc_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___dmc_out___bit 3
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr5___lsb 4
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr5___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr5___bit 4
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp5___lsb 5
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp5___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp5___bit 5
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_in_extra___lsb 6
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_in_extra___bit 6
#define reg_iop_sw_mpu_r_masked_intr_grp1___dmc_in___lsb 7
#define reg_iop_sw_mpu_r_masked_intr_grp1___dmc_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___dmc_in___bit 7
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr6___lsb 8
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr6___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr6___bit 8
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp6___lsb 9
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp6___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp6___bit 9
#define reg_iop_sw_mpu_r_masked_intr_grp1___timer_grp0___lsb 10
#define reg_iop_sw_mpu_r_masked_intr_grp1___timer_grp0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___timer_grp0___bit 10
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_out___lsb 11
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_out___bit 11
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr7___lsb 12
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr7___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___spu_intr7___bit 12
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp7___lsb 13
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp7___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___trigger_grp7___bit 13
#define reg_iop_sw_mpu_r_masked_intr_grp1___timer_grp1___lsb 14
#define reg_iop_sw_mpu_r_masked_intr_grp1___timer_grp1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___timer_grp1___bit 14
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_in___lsb 15
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp1___fifo_in___bit 15
#define reg_iop_sw_mpu_r_masked_intr_grp1_offset 112

/* Register rw_intr_grp2_mask, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr8___lsb 0
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr8___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr8___bit 0
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp0___lsb 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp0___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp0___bit 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___timer_grp0___lsb 2
#define reg_iop_sw_mpu_rw_intr_grp2_mask___timer_grp0___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___timer_grp0___bit 2
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_out___lsb 3
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_out___bit 3
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr9___lsb 4
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr9___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr9___bit 4
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp1___lsb 5
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp1___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp1___bit 5
#define reg_iop_sw_mpu_rw_intr_grp2_mask___timer_grp1___lsb 6
#define reg_iop_sw_mpu_rw_intr_grp2_mask___timer_grp1___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___timer_grp1___bit 6
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_in___lsb 7
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_in___bit 7
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr10___lsb 8
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr10___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr10___bit 8
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp2___lsb 9
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp2___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp2___bit 9
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_out_extra___lsb 10
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_out_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_out_extra___bit 10
#define reg_iop_sw_mpu_rw_intr_grp2_mask___dmc_out___lsb 11
#define reg_iop_sw_mpu_rw_intr_grp2_mask___dmc_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___dmc_out___bit 11
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr11___lsb 12
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr11___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___spu_intr11___bit 12
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp3___lsb 13
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp3___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___trigger_grp3___bit 13
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_in_extra___lsb 14
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_in_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___fifo_in_extra___bit 14
#define reg_iop_sw_mpu_rw_intr_grp2_mask___dmc_in___lsb 15
#define reg_iop_sw_mpu_rw_intr_grp2_mask___dmc_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp2_mask___dmc_in___bit 15
#define reg_iop_sw_mpu_rw_intr_grp2_mask_offset 116

/* Register rw_ack_intr_grp2, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr8___lsb 0
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr8___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr8___bit 0
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr9___lsb 4
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr9___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr9___bit 4
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr10___lsb 8
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr10___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr10___bit 8
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr11___lsb 12
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr11___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp2___spu_intr11___bit 12
#define reg_iop_sw_mpu_rw_ack_intr_grp2_offset 120

/* Register r_intr_grp2, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr8___lsb 0
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr8___width 1
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr8___bit 0
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp0___lsb 1
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp0___width 1
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp0___bit 1
#define reg_iop_sw_mpu_r_intr_grp2___timer_grp0___lsb 2
#define reg_iop_sw_mpu_r_intr_grp2___timer_grp0___width 1
#define reg_iop_sw_mpu_r_intr_grp2___timer_grp0___bit 2
#define reg_iop_sw_mpu_r_intr_grp2___fifo_out___lsb 3
#define reg_iop_sw_mpu_r_intr_grp2___fifo_out___width 1
#define reg_iop_sw_mpu_r_intr_grp2___fifo_out___bit 3
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr9___lsb 4
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr9___width 1
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr9___bit 4
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp1___lsb 5
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp1___width 1
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp1___bit 5
#define reg_iop_sw_mpu_r_intr_grp2___timer_grp1___lsb 6
#define reg_iop_sw_mpu_r_intr_grp2___timer_grp1___width 1
#define reg_iop_sw_mpu_r_intr_grp2___timer_grp1___bit 6
#define reg_iop_sw_mpu_r_intr_grp2___fifo_in___lsb 7
#define reg_iop_sw_mpu_r_intr_grp2___fifo_in___width 1
#define reg_iop_sw_mpu_r_intr_grp2___fifo_in___bit 7
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr10___lsb 8
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr10___width 1
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr10___bit 8
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp2___lsb 9
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp2___width 1
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp2___bit 9
#define reg_iop_sw_mpu_r_intr_grp2___fifo_out_extra___lsb 10
#define reg_iop_sw_mpu_r_intr_grp2___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp2___fifo_out_extra___bit 10
#define reg_iop_sw_mpu_r_intr_grp2___dmc_out___lsb 11
#define reg_iop_sw_mpu_r_intr_grp2___dmc_out___width 1
#define reg_iop_sw_mpu_r_intr_grp2___dmc_out___bit 11
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr11___lsb 12
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr11___width 1
#define reg_iop_sw_mpu_r_intr_grp2___spu_intr11___bit 12
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp3___lsb 13
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp3___width 1
#define reg_iop_sw_mpu_r_intr_grp2___trigger_grp3___bit 13
#define reg_iop_sw_mpu_r_intr_grp2___fifo_in_extra___lsb 14
#define reg_iop_sw_mpu_r_intr_grp2___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp2___fifo_in_extra___bit 14
#define reg_iop_sw_mpu_r_intr_grp2___dmc_in___lsb 15
#define reg_iop_sw_mpu_r_intr_grp2___dmc_in___width 1
#define reg_iop_sw_mpu_r_intr_grp2___dmc_in___bit 15
#define reg_iop_sw_mpu_r_intr_grp2_offset 124

/* Register r_masked_intr_grp2, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr8___lsb 0
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr8___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr8___bit 0
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp0___lsb 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp0___bit 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___timer_grp0___lsb 2
#define reg_iop_sw_mpu_r_masked_intr_grp2___timer_grp0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___timer_grp0___bit 2
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_out___lsb 3
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_out___bit 3
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr9___lsb 4
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr9___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr9___bit 4
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp1___lsb 5
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp1___bit 5
#define reg_iop_sw_mpu_r_masked_intr_grp2___timer_grp1___lsb 6
#define reg_iop_sw_mpu_r_masked_intr_grp2___timer_grp1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___timer_grp1___bit 6
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_in___lsb 7
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_in___bit 7
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr10___lsb 8
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr10___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr10___bit 8
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp2___lsb 9
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp2___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp2___bit 9
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_out_extra___lsb 10
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_out_extra___bit 10
#define reg_iop_sw_mpu_r_masked_intr_grp2___dmc_out___lsb 11
#define reg_iop_sw_mpu_r_masked_intr_grp2___dmc_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___dmc_out___bit 11
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr11___lsb 12
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr11___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___spu_intr11___bit 12
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp3___lsb 13
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp3___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___trigger_grp3___bit 13
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_in_extra___lsb 14
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___fifo_in_extra___bit 14
#define reg_iop_sw_mpu_r_masked_intr_grp2___dmc_in___lsb 15
#define reg_iop_sw_mpu_r_masked_intr_grp2___dmc_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp2___dmc_in___bit 15
#define reg_iop_sw_mpu_r_masked_intr_grp2_offset 128

/* Register rw_intr_grp3_mask, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr12___lsb 0
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr12___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr12___bit 0
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp4___lsb 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp4___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp4___bit 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_out_extra___lsb 2
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_out_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_out_extra___bit 2
#define reg_iop_sw_mpu_rw_intr_grp3_mask___dmc_out___lsb 3
#define reg_iop_sw_mpu_rw_intr_grp3_mask___dmc_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___dmc_out___bit 3
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr13___lsb 4
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr13___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr13___bit 4
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp5___lsb 5
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp5___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp5___bit 5
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_in_extra___lsb 6
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_in_extra___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_in_extra___bit 6
#define reg_iop_sw_mpu_rw_intr_grp3_mask___dmc_in___lsb 7
#define reg_iop_sw_mpu_rw_intr_grp3_mask___dmc_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___dmc_in___bit 7
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr14___lsb 8
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr14___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr14___bit 8
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp6___lsb 9
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp6___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp6___bit 9
#define reg_iop_sw_mpu_rw_intr_grp3_mask___timer_grp0___lsb 10
#define reg_iop_sw_mpu_rw_intr_grp3_mask___timer_grp0___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___timer_grp0___bit 10
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_out___lsb 11
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_out___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_out___bit 11
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr15___lsb 12
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr15___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___spu_intr15___bit 12
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp7___lsb 13
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp7___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___trigger_grp7___bit 13
#define reg_iop_sw_mpu_rw_intr_grp3_mask___timer_grp1___lsb 14
#define reg_iop_sw_mpu_rw_intr_grp3_mask___timer_grp1___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___timer_grp1___bit 14
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_in___lsb 15
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_in___width 1
#define reg_iop_sw_mpu_rw_intr_grp3_mask___fifo_in___bit 15
#define reg_iop_sw_mpu_rw_intr_grp3_mask_offset 132

/* Register rw_ack_intr_grp3, scope iop_sw_mpu, type rw */
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr12___lsb 0
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr12___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr12___bit 0
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr13___lsb 4
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr13___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr13___bit 4
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr14___lsb 8
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr14___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr14___bit 8
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr15___lsb 12
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr15___width 1
#define reg_iop_sw_mpu_rw_ack_intr_grp3___spu_intr15___bit 12
#define reg_iop_sw_mpu_rw_ack_intr_grp3_offset 136

/* Register r_intr_grp3, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr12___lsb 0
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr12___width 1
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr12___bit 0
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp4___lsb 1
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp4___width 1
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp4___bit 1
#define reg_iop_sw_mpu_r_intr_grp3___fifo_out_extra___lsb 2
#define reg_iop_sw_mpu_r_intr_grp3___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp3___fifo_out_extra___bit 2
#define reg_iop_sw_mpu_r_intr_grp3___dmc_out___lsb 3
#define reg_iop_sw_mpu_r_intr_grp3___dmc_out___width 1
#define reg_iop_sw_mpu_r_intr_grp3___dmc_out___bit 3
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr13___lsb 4
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr13___width 1
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr13___bit 4
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp5___lsb 5
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp5___width 1
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp5___bit 5
#define reg_iop_sw_mpu_r_intr_grp3___fifo_in_extra___lsb 6
#define reg_iop_sw_mpu_r_intr_grp3___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_intr_grp3___fifo_in_extra___bit 6
#define reg_iop_sw_mpu_r_intr_grp3___dmc_in___lsb 7
#define reg_iop_sw_mpu_r_intr_grp3___dmc_in___width 1
#define reg_iop_sw_mpu_r_intr_grp3___dmc_in___bit 7
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr14___lsb 8
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr14___width 1
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr14___bit 8
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp6___lsb 9
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp6___width 1
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp6___bit 9
#define reg_iop_sw_mpu_r_intr_grp3___timer_grp0___lsb 10
#define reg_iop_sw_mpu_r_intr_grp3___timer_grp0___width 1
#define reg_iop_sw_mpu_r_intr_grp3___timer_grp0___bit 10
#define reg_iop_sw_mpu_r_intr_grp3___fifo_out___lsb 11
#define reg_iop_sw_mpu_r_intr_grp3___fifo_out___width 1
#define reg_iop_sw_mpu_r_intr_grp3___fifo_out___bit 11
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr15___lsb 12
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr15___width 1
#define reg_iop_sw_mpu_r_intr_grp3___spu_intr15___bit 12
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp7___lsb 13
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp7___width 1
#define reg_iop_sw_mpu_r_intr_grp3___trigger_grp7___bit 13
#define reg_iop_sw_mpu_r_intr_grp3___timer_grp1___lsb 14
#define reg_iop_sw_mpu_r_intr_grp3___timer_grp1___width 1
#define reg_iop_sw_mpu_r_intr_grp3___timer_grp1___bit 14
#define reg_iop_sw_mpu_r_intr_grp3___fifo_in___lsb 15
#define reg_iop_sw_mpu_r_intr_grp3___fifo_in___width 1
#define reg_iop_sw_mpu_r_intr_grp3___fifo_in___bit 15
#define reg_iop_sw_mpu_r_intr_grp3_offset 140

/* Register r_masked_intr_grp3, scope iop_sw_mpu, type r */
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr12___lsb 0
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr12___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr12___bit 0
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp4___lsb 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp4___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp4___bit 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_out_extra___lsb 2
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_out_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_out_extra___bit 2
#define reg_iop_sw_mpu_r_masked_intr_grp3___dmc_out___lsb 3
#define reg_iop_sw_mpu_r_masked_intr_grp3___dmc_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___dmc_out___bit 3
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr13___lsb 4
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr13___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr13___bit 4
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp5___lsb 5
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp5___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp5___bit 5
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_in_extra___lsb 6
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_in_extra___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_in_extra___bit 6
#define reg_iop_sw_mpu_r_masked_intr_grp3___dmc_in___lsb 7
#define reg_iop_sw_mpu_r_masked_intr_grp3___dmc_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___dmc_in___bit 7
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr14___lsb 8
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr14___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr14___bit 8
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp6___lsb 9
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp6___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp6___bit 9
#define reg_iop_sw_mpu_r_masked_intr_grp3___timer_grp0___lsb 10
#define reg_iop_sw_mpu_r_masked_intr_grp3___timer_grp0___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___timer_grp0___bit 10
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_out___lsb 11
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_out___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_out___bit 11
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr15___lsb 12
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr15___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___spu_intr15___bit 12
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp7___lsb 13
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp7___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___trigger_grp7___bit 13
#define reg_iop_sw_mpu_r_masked_intr_grp3___timer_grp1___lsb 14
#define reg_iop_sw_mpu_r_masked_intr_grp3___timer_grp1___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___timer_grp1___bit 14
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_in___lsb 15
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_in___width 1
#define reg_iop_sw_mpu_r_masked_intr_grp3___fifo_in___bit 15
#define reg_iop_sw_mpu_r_masked_intr_grp3_offset 144


/* Constants */
#define regk_iop_sw_mpu_copy                      0x00000000
#define regk_iop_sw_mpu_cpu                       0x00000000
#define regk_iop_sw_mpu_mpu                       0x00000001
#define regk_iop_sw_mpu_no                        0x00000000
#define regk_iop_sw_mpu_nop                       0x00000000
#define regk_iop_sw_mpu_rd                        0x00000002
#define regk_iop_sw_mpu_reg_copy                  0x00000001
#define regk_iop_sw_mpu_rw_bus_clr_mask_default   0x00000000
#define regk_iop_sw_mpu_rw_bus_oe_clr_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_bus_oe_set_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_bus_set_mask_default   0x00000000
#define regk_iop_sw_mpu_rw_gio_clr_mask_default   0x00000000
#define regk_iop_sw_mpu_rw_gio_oe_clr_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_gio_oe_set_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_gio_set_mask_default   0x00000000
#define regk_iop_sw_mpu_rw_intr_grp0_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_intr_grp1_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_intr_grp2_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_intr_grp3_mask_default  0x00000000
#define regk_iop_sw_mpu_rw_sw_cfg_owner_default   0x00000000
#define regk_iop_sw_mpu_set                       0x00000001
#define regk_iop_sw_mpu_spu                       0x00000002
#define regk_iop_sw_mpu_wr                        0x00000003
#define regk_iop_sw_mpu_yes                       0x00000001
#endif /* __iop_sw_mpu_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef __iop_sw_cfg_defs_asm_h
#define __iop_sw_cfg_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           iop_sw_cfg.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile iop_sw_cfg_defs_asm.h iop_sw_cfg.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register rw_crc_par_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_crc_par_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_crc_par_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_crc_par_owner_offset 0

/* Register rw_dmc_in_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_dmc_in_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_dmc_in_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_dmc_in_owner_offset 4

/* Register rw_dmc_out_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_dmc_out_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_dmc_out_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_dmc_out_owner_offset 8

/* Register rw_fifo_in_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_fifo_in_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_fifo_in_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_fifo_in_owner_offset 12

/* Register rw_fifo_in_extra_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_fifo_in_extra_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_fifo_in_extra_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_fifo_in_extra_owner_offset 16

/* Register rw_fifo_out_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_fifo_out_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_fifo_out_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_fifo_out_owner_offset 20

/* Register rw_fifo_out_extra_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_fifo_out_extra_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_fifo_out_extra_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_fifo_out_extra_owner_offset 24

/* Register rw_sap_in_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_sap_in_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_sap_in_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_sap_in_owner_offset 28

/* Register rw_sap_out_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_sap_out_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_sap_out_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_sap_out_owner_offset 32

/* Register rw_scrc_in_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_scrc_in_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_scrc_in_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_scrc_in_owner_offset 36

/* Register rw_scrc_out_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_scrc_out_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_scrc_out_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_scrc_out_owner_offset 40

/* Register rw_spu_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_spu_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_spu_owner___cfg___width 1
#define reg_iop_sw_cfg_rw_spu_owner___cfg___bit 0
#define reg_iop_sw_cfg_rw_spu_owner_offset 44

/* Register rw_timer_grp0_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_timer_grp0_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_timer_grp0_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_owner_offset 48

/* Register rw_timer_grp1_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_timer_grp1_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_timer_grp1_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_owner_offset 52

/* Register rw_trigger_grp0_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp0_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp0_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp0_owner_offset 56

/* Register rw_trigger_grp1_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp1_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp1_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp1_owner_offset 60

/* Register rw_trigger_grp2_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp2_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp2_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp2_owner_offset 64

/* Register rw_trigger_grp3_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp3_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp3_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp3_owner_offset 68

/* Register rw_trigger_grp4_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp4_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp4_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp4_owner_offset 72

/* Register rw_trigger_grp5_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp5_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp5_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp5_owner_offset 76

/* Register rw_trigger_grp6_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp6_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp6_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp6_owner_offset 80

/* Register rw_trigger_grp7_owner, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grp7_owner___cfg___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grp7_owner___cfg___width 2
#define reg_iop_sw_cfg_rw_trigger_grp7_owner_offset 84

/* Register rw_bus_mask, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_bus_mask___byte0___lsb 0
#define reg_iop_sw_cfg_rw_bus_mask___byte0___width 8
#define reg_iop_sw_cfg_rw_bus_mask___byte1___lsb 8
#define reg_iop_sw_cfg_rw_bus_mask___byte1___width 8
#define reg_iop_sw_cfg_rw_bus_mask___byte2___lsb 16
#define reg_iop_sw_cfg_rw_bus_mask___byte2___width 8
#define reg_iop_sw_cfg_rw_bus_mask___byte3___lsb 24
#define reg_iop_sw_cfg_rw_bus_mask___byte3___width 8
#define reg_iop_sw_cfg_rw_bus_mask_offset 88

/* Register rw_bus_oe_mask, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte0___lsb 0
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte0___width 1
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte0___bit 0
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte1___lsb 1
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte1___width 1
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte1___bit 1
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte2___lsb 2
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte2___width 1
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte2___bit 2
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte3___lsb 3
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte3___width 1
#define reg_iop_sw_cfg_rw_bus_oe_mask___byte3___bit 3
#define reg_iop_sw_cfg_rw_bus_oe_mask_offset 92

/* Register rw_gio_mask, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_mask___val___lsb 0
#define reg_iop_sw_cfg_rw_gio_mask___val___width 32
#define reg_iop_sw_cfg_rw_gio_mask_offset 96

/* Register rw_gio_oe_mask, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_oe_mask___val___lsb 0
#define reg_iop_sw_cfg_rw_gio_oe_mask___val___width 32
#define reg_iop_sw_cfg_rw_gio_oe_mask_offset 100

/* Register rw_pinmapping, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte0___lsb 0
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte0___width 2
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte1___lsb 2
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte1___width 2
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte2___lsb 4
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte2___width 2
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte3___lsb 6
#define reg_iop_sw_cfg_rw_pinmapping___bus_byte3___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio3_0___lsb 8
#define reg_iop_sw_cfg_rw_pinmapping___gio3_0___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio7_4___lsb 10
#define reg_iop_sw_cfg_rw_pinmapping___gio7_4___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio11_8___lsb 12
#define reg_iop_sw_cfg_rw_pinmapping___gio11_8___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio15_12___lsb 14
#define reg_iop_sw_cfg_rw_pinmapping___gio15_12___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio19_16___lsb 16
#define reg_iop_sw_cfg_rw_pinmapping___gio19_16___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio23_20___lsb 18
#define reg_iop_sw_cfg_rw_pinmapping___gio23_20___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio27_24___lsb 20
#define reg_iop_sw_cfg_rw_pinmapping___gio27_24___width 2
#define reg_iop_sw_cfg_rw_pinmapping___gio31_28___lsb 22
#define reg_iop_sw_cfg_rw_pinmapping___gio31_28___width 2
#define reg_iop_sw_cfg_rw_pinmapping_offset 104

/* Register rw_bus_out_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_lo___lsb 0
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_lo___width 2
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_hi___lsb 2
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_hi___width 2
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_lo_oe___lsb 4
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_lo_oe___width 2
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_hi_oe___lsb 6
#define reg_iop_sw_cfg_rw_bus_out_cfg___bus_hi_oe___width 2
#define reg_iop_sw_cfg_rw_bus_out_cfg_offset 108

/* Register rw_gio_out_grp0_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio0___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio0___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio0_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio0_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio0_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio1___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio1___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio1_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio1_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio1_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio2___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio2___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio2_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio2_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio2_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio3___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio3___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio3_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio3_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg___gio3_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp0_cfg_offset 112

/* Register rw_gio_out_grp1_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio4___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio4___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio4_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio4_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio4_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio5___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio5___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio5_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio5_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio5_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio6___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio6___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio6_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio6_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio6_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio7___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio7___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio7_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio7_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg___gio7_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp1_cfg_offset 116

/* Register rw_gio_out_grp2_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio8___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio8___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio8_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio8_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio8_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio9___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio9___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio9_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio9_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio9_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio10___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio10___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio10_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio10_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio10_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio11___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio11___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio11_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio11_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg___gio11_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp2_cfg_offset 120

/* Register rw_gio_out_grp3_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio12___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio12___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio12_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio12_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio12_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio13___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio13___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio13_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio13_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio13_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio14___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio14___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio14_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio14_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio14_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio15___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio15___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio15_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio15_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg___gio15_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp3_cfg_offset 124

/* Register rw_gio_out_grp4_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio16___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio16___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio16_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio16_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio16_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio17___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio17___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio17_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio17_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio17_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio18___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio18___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio18_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio18_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio18_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio19___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio19___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio19_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio19_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg___gio19_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp4_cfg_offset 128

/* Register rw_gio_out_grp5_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio20___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio20___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio20_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio20_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio20_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio21___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio21___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio21_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio21_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio21_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio22___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio22___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio22_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio22_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio22_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio23___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio23___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio23_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio23_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg___gio23_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp5_cfg_offset 132

/* Register rw_gio_out_grp6_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio24___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio24___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio24_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio24_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio24_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio25___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio25___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio25_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio25_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio25_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio26___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio26___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio26_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio26_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio26_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio27___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio27___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio27_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio27_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg___gio27_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp6_cfg_offset 136

/* Register rw_gio_out_grp7_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio28___lsb 0
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio28___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio28_oe___lsb 3
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio28_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio28_oe___bit 3
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio29___lsb 4
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio29___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio29_oe___lsb 7
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio29_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio29_oe___bit 7
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio30___lsb 8
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio30___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio30_oe___lsb 11
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio30_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio30_oe___bit 11
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio31___lsb 12
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio31___width 3
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio31_oe___lsb 15
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio31_oe___width 1
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg___gio31_oe___bit 15
#define reg_iop_sw_cfg_rw_gio_out_grp7_cfg_offset 140

/* Register rw_spu_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_spu_cfg___bus0_in___lsb 0
#define reg_iop_sw_cfg_rw_spu_cfg___bus0_in___width 1
#define reg_iop_sw_cfg_rw_spu_cfg___bus0_in___bit 0
#define reg_iop_sw_cfg_rw_spu_cfg___bus1_in___lsb 1
#define reg_iop_sw_cfg_rw_spu_cfg___bus1_in___width 1
#define reg_iop_sw_cfg_rw_spu_cfg___bus1_in___bit 1
#define reg_iop_sw_cfg_rw_spu_cfg_offset 144

/* Register rw_timer_grp0_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___ext_clk___lsb 0
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___ext_clk___width 3
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr0_en___lsb 3
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr0_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr1_en___lsb 5
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr1_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr2_en___lsb 7
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr2_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr3_en___lsb 9
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr3_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr0_dis___lsb 11
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr0_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr1_dis___lsb 13
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr1_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr2_dis___lsb 15
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr2_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr3_dis___lsb 17
#define reg_iop_sw_cfg_rw_timer_grp0_cfg___tmr3_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp0_cfg_offset 148

/* Register rw_timer_grp1_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___ext_clk___lsb 0
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___ext_clk___width 3
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr0_en___lsb 3
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr0_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr1_en___lsb 5
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr1_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr2_en___lsb 7
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr2_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr3_en___lsb 9
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr3_en___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr0_dis___lsb 11
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr0_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr1_dis___lsb 13
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr1_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr2_dis___lsb 15
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr2_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr3_dis___lsb 17
#define reg_iop_sw_cfg_rw_timer_grp1_cfg___tmr3_dis___width 2
#define reg_iop_sw_cfg_rw_timer_grp1_cfg_offset 152

/* Register rw_trigger_grps_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp0_dis___lsb 0
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp0_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp0_dis___bit 0
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp0_en___lsb 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp0_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp0_en___bit 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp1_dis___lsb 2
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp1_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp1_dis___bit 2
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp1_en___lsb 3
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp1_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp1_en___bit 3
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp2_dis___lsb 4
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp2_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp2_dis___bit 4
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp2_en___lsb 5
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp2_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp2_en___bit 5
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp3_dis___lsb 6
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp3_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp3_dis___bit 6
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp3_en___lsb 7
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp3_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp3_en___bit 7
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp4_dis___lsb 8
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp4_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp4_dis___bit 8
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp4_en___lsb 9
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp4_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp4_en___bit 9
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp5_dis___lsb 10
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp5_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp5_dis___bit 10
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp5_en___lsb 11
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp5_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp5_en___bit 11
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp6_dis___lsb 12
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp6_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp6_dis___bit 12
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp6_en___lsb 13
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp6_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp6_en___bit 13
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp7_dis___lsb 14
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp7_dis___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp7_dis___bit 14
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp7_en___lsb 15
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp7_en___width 1
#define reg_iop_sw_cfg_rw_trigger_grps_cfg___grp7_en___bit 15
#define reg_iop_sw_cfg_rw_trigger_grps_cfg_offset 156

/* Register rw_pdp_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_pdp_cfg___out_strb___lsb 0
#define reg_iop_sw_cfg_rw_pdp_cfg___out_strb___width 4
#define reg_iop_sw_cfg_rw_pdp_cfg___in_src___lsb 4
#define reg_iop_sw_cfg_rw_pdp_cfg___in_src___width 2
#define reg_iop_sw_cfg_rw_pdp_cfg___in_size___lsb 6
#define reg_iop_sw_cfg_rw_pdp_cfg___in_size___width 3
#define reg_iop_sw_cfg_rw_pdp_cfg___in_last___lsb 9
#define reg_iop_sw_cfg_rw_pdp_cfg___in_last___width 2
#define reg_iop_sw_cfg_rw_pdp_cfg___in_strb___lsb 11
#define reg_iop_sw_cfg_rw_pdp_cfg___in_strb___width 4
#define reg_iop_sw_cfg_rw_pdp_cfg_offset 160

/* Register rw_sdp_cfg, scope iop_sw_cfg, type rw */
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_out_strb___lsb 0
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_out_strb___width 3
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_in_data___lsb 3
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_in_data___width 3
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_in_last___lsb 6
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_in_last___width 2
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_in_strb___lsb 8
#define reg_iop_sw_cfg_rw_sdp_cfg___sdp_in_strb___width 3
#define reg_iop_sw_cfg_rw_sdp_cfg_offset 164


/* Constants */
#define regk_iop_sw_cfg_a                         0x00000001
#define regk_iop_sw_cfg_b                         0x00000002
#define regk_iop_sw_cfg_bus                       0x00000000
#define regk_iop_sw_cfg_bus_rot16                 0x00000002
#define regk_iop_sw_cfg_bus_rot24                 0x00000003
#define regk_iop_sw_cfg_bus_rot8                  0x00000001
#define regk_iop_sw_cfg_clk12                     0x00000000
#define regk_iop_sw_cfg_cpu                       0x00000000
#define regk_iop_sw_cfg_gated_clk0                0x0000000e
#define regk_iop_sw_cfg_gated_clk1                0x0000000f
#define regk_iop_sw_cfg_gio0                      0x00000004
#define regk_iop_sw_cfg_gio1                      0x00000001
#define regk_iop_sw_cfg_gio2                      0x00000005
#define regk_iop_sw_cfg_gio3                      0x00000002
#define regk_iop_sw_cfg_gio4                      0x00000006
#define regk_iop_sw_cfg_gio5                      0x00000003
#define regk_iop_sw_cfg_gio6                      0x00000007
#define regk_iop_sw_cfg_gio7                      0x00000004
#define regk_iop_sw_cfg_gio_in18                  0x00000002
#define regk_iop_sw_cfg_gio_in19                  0x00000003
#define regk_iop_sw_cfg_gio_in20                  0x00000004
#define regk_iop_sw_cfg_gio_in21                  0x00000005
#define regk_iop_sw_cfg_gio_in26                  0x00000006
#define regk_iop_sw_cfg_gio_in27                  0x00000007
#define regk_iop_sw_cfg_gio_in4                   0x00000000
#define regk_iop_sw_cfg_gio_in5                   0x00000001
#define regk_iop_sw_cfg_last_timer_grp0_tmr2      0x00000001
#define regk_iop_sw_cfg_last_timer_grp1_tmr2      0x00000002
#define regk_iop_sw_cfg_last_timer_grp1_tmr3      0x00000003
#define regk_iop_sw_cfg_mpu                       0x00000001
#define regk_iop_sw_cfg_none                      0x00000000
#define regk_iop_sw_cfg_pdp_out                   0x00000001
#define regk_iop_sw_cfg_pdp_out_hi                0x00000001
#define regk_iop_sw_cfg_pdp_out_lo                0x00000000
#define regk_iop_sw_cfg_rw_bus_mask_default       0x00000000
#define regk_iop_sw_cfg_rw_bus_oe_mask_default    0x00000000
#define regk_iop_sw_cfg_rw_bus_out_cfg_default    0x00000000
#define regk_iop_sw_cfg_rw_crc_par_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_dmc_in_owner_default   0x00000000
#define regk_iop_sw_cfg_rw_dmc_out_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_fifo_in_extra_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_fifo_in_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_fifo_out_extra_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_fifo_out_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_mask_default       0x00000000
#define regk_iop_sw_cfg_rw_gio_oe_mask_default    0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp0_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp1_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp2_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp3_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp4_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp5_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp6_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_gio_out_grp7_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_pdp_cfg_default        0x00000000
#define regk_iop_sw_cfg_rw_pinmapping_default     0x00555555
#define regk_iop_sw_cfg_rw_sap_in_owner_default   0x00000000
#define regk_iop_sw_cfg_rw_sap_out_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_scrc_in_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_scrc_out_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_sdp_cfg_default        0x00000000
#define regk_iop_sw_cfg_rw_spu_cfg_default        0x00000000
#define regk_iop_sw_cfg_rw_spu_owner_default      0x00000000
#define regk_iop_sw_cfg_rw_timer_grp0_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_timer_grp0_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_timer_grp1_cfg_default  0x00000000
#define regk_iop_sw_cfg_rw_timer_grp1_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp0_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp1_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp2_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp3_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp4_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp5_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp6_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grp7_owner_default  0x00000000
#define regk_iop_sw_cfg_rw_trigger_grps_cfg_default  0x00000000
#define regk_iop_sw_cfg_sdp_out                   0x00000004
#define regk_iop_sw_cfg_size16                    0x00000002
#define regk_iop_sw_cfg_size24                    0x00000003
#define regk_iop_sw_cfg_size32                    0x00000004
#define regk_iop_sw_cfg_size8                     0x00000001
#define regk_iop_sw_cfg_spu                       0x00000002
#define regk_iop_sw_cfg_spu_bus_out0_hi           0x00000002
#define regk_iop_sw_cfg_spu_bus_out0_lo           0x00000002
#define regk_iop_sw_cfg_spu_bus_out1_hi           0x00000003
#define regk_iop_sw_cfg_spu_bus_out1_lo           0x00000003
#define regk_iop_sw_cfg_spu_g0                    0x00000007
#define regk_iop_sw_cfg_spu_g1                    0x00000007
#define regk_iop_sw_cfg_spu_g2                    0x00000007
#define regk_iop_sw_cfg_spu_g3                    0x00000007
#define regk_iop_sw_cfg_spu_g4                    0x00000007
#define regk_iop_sw_cfg_spu_g5                    0x00000007
#define regk_iop_sw_cfg_spu_g6                    0x00000007
#define regk_iop_sw_cfg_spu_g7                    0x00000007
#define regk_iop_sw_cfg_spu_gio0                  0x00000000
#define regk_iop_sw_cfg_spu_gio1                  0x00000001
#define regk_iop_sw_cfg_spu_gio5                  0x00000005
#define regk_iop_sw_cfg_spu_gio6                  0x00000006
#define regk_iop_sw_cfg_spu_gio7                  0x00000007
#define regk_iop_sw_cfg_spu_gio_out0              0x00000008
#define regk_iop_sw_cfg_spu_gio_out1              0x00000009
#define regk_iop_sw_cfg_spu_gio_out2              0x0000000a
#define regk_iop_sw_cfg_spu_gio_out3              0x0000000b
#define regk_iop_sw_cfg_spu_gio_out4              0x0000000c
#define regk_iop_sw_cfg_spu_gio_out5              0x0000000d
#define regk_iop_sw_cfg_spu_gio_out6              0x0000000e
#define regk_iop_sw_cfg_spu_gio_out7              0x0000000f
#define regk_iop_sw_cfg_spu_gioout0               0x00000000
#define regk_iop_sw_cfg_spu_gioout1               0x00000000
#define regk_iop_sw_cfg_spu_gioout10              0x00000007
#define regk_iop_sw_cfg_spu_gioout11              0x00000007
#define regk_iop_sw_cfg_spu_gioout12              0x00000007
#define regk_iop_sw_cfg_spu_gioout13              0x00000007
#define regk_iop_sw_cfg_spu_gioout14              0x00000007
#define regk_iop_sw_cfg_spu_gioout15              0x00000007
#define regk_iop_sw_cfg_spu_gioout16              0x00000007
#define regk_iop_sw_cfg_spu_gioout17              0x00000007
#define regk_iop_sw_cfg_spu_gioout18              0x00000007
#define regk_iop_sw_cfg_spu_gioout19              0x00000007
#define regk_iop_sw_cfg_spu_gioout2               0x00000001
#define regk_iop_sw_cfg_spu_gioout20              0x00000007
#define regk_iop_sw_cfg_spu_gioout21              0x00000007
#define regk_iop_sw_cfg_spu_gioout22              0x00000007
#define regk_iop_sw_cfg_spu_gioout23              0x00000007
#define regk_iop_sw_cfg_spu_gioout24              0x00000007
#define regk_iop_sw_cfg_spu_gioout25              0x00000007
#define regk_iop_sw_cfg_spu_gioout26              0x00000007
#define regk_iop_sw_cfg_spu_gioout27              0x00000007
#define regk_iop_sw_cfg_spu_gioout28              0x00000007
#define regk_iop_sw_cfg_spu_gioout29              0x00000007
#define regk_iop_sw_cfg_spu_gioout3               0x00000001
#define regk_iop_sw_cfg_spu_gioout30              0x00000007
#define regk_iop_sw_cfg_spu_gioout31              0x00000007
#define regk_iop_sw_cfg_spu_gioout4               0x00000002
#define regk_iop_sw_cfg_spu_gioout5               0x00000002
#define regk_iop_sw_cfg_spu_gioout6               0x00000003
#define regk_iop_sw_cfg_spu_gioout7               0x00000003
#define regk_iop_sw_cfg_spu_gioout8               0x00000007
#define regk_iop_sw_cfg_spu_gioout9               0x00000007
#define regk_iop_sw_cfg_strb_timer_grp0_tmr0      0x00000001
#define regk_iop_sw_cfg_strb_timer_grp0_tmr1      0x00000002
#define regk_iop_sw_cfg_strb_timer_grp1_tmr0      0x00000003
#define regk_iop_sw_cfg_strb_timer_grp1_tmr1      0x00000002
#define regk_iop_sw_cfg_timer_grp0                0x00000000
#define regk_iop_sw_cfg_timer_grp0_rot            0x00000001
#define regk_iop_sw_cfg_timer_grp0_strb0          0x00000005
#define regk_iop_sw_cfg_timer_grp0_strb1          0x00000005
#define regk_iop_sw_cfg_timer_grp0_strb2          0x00000005
#define regk_iop_sw_cfg_timer_grp0_strb3          0x00000005
#define regk_iop_sw_cfg_timer_grp0_tmr0           0x00000002
#define regk_iop_sw_cfg_timer_grp1                0x00000000
#define regk_iop_sw_cfg_timer_grp1_rot            0x00000001
#define regk_iop_sw_cfg_timer_grp1_strb0          0x00000006
#define regk_iop_sw_cfg_timer_grp1_strb1          0x00000006
#define regk_iop_sw_cfg_timer_grp1_strb2          0x00000006
#define regk_iop_sw_cfg_timer_grp1_strb3          0x00000006
#define regk_iop_sw_cfg_timer_grp1_tmr0           0x00000003
#define regk_iop_sw_cfg_trig0_0                   0x00000000
#define regk_iop_sw_cfg_trig0_1                   0x00000000
#define regk_iop_sw_cfg_trig0_2                   0x00000000
#define regk_iop_sw_cfg_trig0_3                   0x00000000
#define regk_iop_sw_cfg_trig1_0                   0x00000000
#define regk_iop_sw_cfg_trig1_1                   0x00000000
#define regk_iop_sw_cfg_trig1_2                   0x00000000
#define regk_iop_sw_cfg_trig1_3                   0x00000000
#define regk_iop_sw_cfg_trig2_0                   0x00000001
#define regk_iop_sw_cfg_trig2_1                   0x00000001
#define regk_iop_sw_cfg_trig2_2                   0x00000001
#define regk_iop_sw_cfg_trig2_3                   0x00000001
#define regk_iop_sw_cfg_trig3_0                   0x00000001
#define regk_iop_sw_cfg_trig3_1                   0x00000001
#define regk_iop_sw_cfg_trig3_2                   0x00000001
#define regk_iop_sw_cfg_trig3_3                   0x00000001
#define regk_iop_sw_cfg_trig4_0                   0x00000002
#define regk_iop_sw_cfg_trig4_1                   0x00000002
#define regk_iop_sw_cfg_trig4_2                   0x00000002
#define regk_iop_sw_cfg_trig4_3                   0x00000002
#define regk_iop_sw_cfg_trig5_0                   0x00000002
#define regk_iop_sw_cfg_trig5_1                   0x00000002
#define regk_iop_sw_cfg_trig5_2                   0x00000002
#define regk_iop_sw_cfg_trig5_3                   0x00000002
#define regk_iop_sw_cfg_trig6_0                   0x00000003
#define regk_iop_sw_cfg_trig6_1                   0x00000003
#define regk_iop_sw_cfg_trig6_2                   0x00000003
#define regk_iop_sw_cfg_trig6_3                   0x00000003
#define regk_iop_sw_cfg_trig7_0                   0x00000003
#define regk_iop_sw_cfg_trig7_1                   0x00000003
#define regk_iop_sw_cfg_trig7_2                   0x00000003
#define regk_iop_sw_cfg_trig7_3                   0x00000003
#endif /* __iop_sw_cfg_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef __iop_sap_in_defs_asm_h
#define __iop_sap_in_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           iop_sap_in.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile iop_sap_in_defs_asm.h iop_sap_in.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

#define STRIDE_iop_sap_in_rw_bus_byte 4
/* Register rw_bus_byte, scope iop_sap_in, type rw */
#define reg_iop_sap_in_rw_bus_byte___sync_sel___lsb 0
#define reg_iop_sap_in_rw_bus_byte___sync_sel___width 2
#define reg_iop_sap_in_rw_bus_byte___sync_ext_src___lsb 2
#define reg_iop_sap_in_rw_bus_byte___sync_ext_src___width 3
#define reg_iop_sap_in_rw_bus_byte___sync_edge___lsb 5
#define reg_iop_sap_in_rw_bus_byte___sync_edge___width 2
#define reg_iop_sap_in_rw_bus_byte___delay___lsb 7
#define reg_iop_sap_in_rw_bus_byte___delay___width 2
#define reg_iop_sap_in_rw_bus_byte_offset 0

#define STRIDE_iop_sap_in_rw_gio 4
/* Register rw_gio, scope iop_sap_in, type rw */
#define reg_iop_sap_in_rw_gio___sync_sel___lsb 0
#define reg_iop_sap_in_rw_gio___sync_sel___width 2
#define reg_iop_sap_in_rw_gio___sync_ext_src___lsb 2
#define reg_iop_sap_in_rw_gio___sync_ext_src___width 3
#define reg_iop_sap_in_rw_gio___sync_edge___lsb 5
#define reg_iop_sap_in_rw_gio___sync_edge___width 2
#define reg_iop_sap_in_rw_gio___delay___lsb 7
#define reg_iop_sap_in_rw_gio___delay___width 2
#define reg_iop_sap_in_rw_gio___logic___lsb 9
#define reg_iop_sap_in_rw_gio___logic___width 2
#define reg_iop_sap_in_rw_gio_offset 16


/* Constants */
#define regk_iop_sap_in_and                       0x00000002
#define regk_iop_sap_in_ext_clk200                0x00000003
#define regk_iop_sap_in_gio0                      0x00000000
#define regk_iop_sap_in_gio12                     0x00000003
#define regk_iop_sap_in_gio16                     0x00000004
#define regk_iop_sap_in_gio20                     0x00000005
#define regk_iop_sap_in_gio24                     0x00000006
#define regk_iop_sap_in_gio28                     0x00000007
#define regk_iop_sap_in_gio4                      0x00000001
#define regk_iop_sap_in_gio8                      0x00000002
#define regk_iop_sap_in_inv                       0x00000001
#define regk_iop_sap_in_neg                       0x00000002
#define regk_iop_sap_in_no                        0x00000000
#define regk_iop_sap_in_no_del_ext_clk200         0x00000002
#define regk_iop_sap_in_none                      0x00000000
#define regk_iop_sap_in_one                       0x00000001
#define regk_iop_sap_in_or                        0x00000003
#define regk_iop_sap_in_pos                       0x00000001
#define regk_iop_sap_in_pos_neg                   0x00000003
#define regk_iop_sap_in_rw_bus_byte_default       0x00000000
#define regk_iop_sap_in_rw_bus_byte_size          0x00000004
#define regk_iop_sap_in_rw_gio_default            0x00000000
#define regk_iop_sap_in_rw_gio_size               0x00000020
#define regk_iop_sap_in_timer_grp0_tmr3           0x00000000
#define regk_iop_sap_in_timer_grp1_tmr3           0x00000001
#define regk_iop_sap_in_tmr_clk200                0x00000001
#define regk_iop_sap_in_two                       0x00000002
#define regk_iop_sap_in_two_clk200                0x00000000
#endif /* __iop_sap_in_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef __iop_sap_out_defs_asm_h
#define __iop_sap_out_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           iop_sap_out.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile iop_sap_out_defs_asm.h iop_sap_out.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register rw_gen_gated, scope iop_sap_out, type rw */
#define reg_iop_sap_out_rw_gen_gated___clk0_src___lsb 0
#define reg_iop_sap_out_rw_gen_gated___clk0_src___width 2
#define reg_iop_sap_out_rw_gen_gated___clk0_gate_src___lsb 2
#define reg_iop_sap_out_rw_gen_gated___clk0_gate_src___width 2
#define reg_iop_sap_out_rw_gen_gated___clk0_force_src___lsb 4
#define reg_iop_sap_out_rw_gen_gated___clk0_force_src___width 3
#define reg_iop_sap_out_rw_gen_gated___clk1_src___lsb 7
#define reg_iop_sap_out_rw_gen_gated___clk1_src___width 2
#define reg_iop_sap_out_rw_gen_gated___clk1_gate_src___lsb 9
#define reg_iop_sap_out_rw_gen_gated___clk1_gate_src___width 2
#define reg_iop_sap_out_rw_gen_gated___clk1_force_src___lsb 11
#define reg_iop_sap_out_rw_gen_gated___clk1_force_src___width 3
#define reg_iop_sap_out_rw_gen_gated_offset 0

/* Register rw_bus, scope iop_sap_out, type rw */
#define reg_iop_sap_out_rw_bus___byte0_clk_sel___lsb 0
#define reg_iop_sap_out_rw_bus___byte0_clk_sel___width 2
#define reg_iop_sap_out_rw_bus___byte0_clk_ext___lsb 2
#define reg_iop_sap_out_rw_bus___byte0_clk_ext___width 2
#define reg_iop_sap_out_rw_bus___byte0_gated_clk___lsb 4
#define reg_iop_sap_out_rw_bus___byte0_gated_clk___width 1
#define reg_iop_sap_out_rw_bus___byte0_gated_clk___bit 4
#define reg_iop_sap_out_rw_bus___byte0_clk_inv___lsb 5
#define reg_iop_sap_out_rw_bus___byte0_clk_inv___width 1
#define reg_iop_sap_out_rw_bus___byte0_clk_inv___bit 5
#define reg_iop_sap_out_rw_bus___byte0_delay___lsb 6
#define reg_iop_sap_out_rw_bus___byte0_delay___width 1
#define reg_iop_sap_out_rw_bus___byte0_delay___bit 6
#define reg_iop_sap_out_rw_bus___byte1_clk_sel___lsb 7
#define reg_iop_sap_out_rw_bus___byte1_clk_sel___width 2
#define reg_iop_sap_out_rw_bus___byte1_clk_ext___lsb 9
#define reg_iop_sap_out_rw_bus___byte1_clk_ext___width 2
#define reg_iop_sap_out_rw_bus___byte1_gated_clk___lsb 11
#define reg_iop_sap_out_rw_bus___byte1_gated_clk___width 1
#define reg_iop_sap_out_rw_bus___byte1_gated_clk___bit 11
#define reg_iop_sap_out_rw_bus___byte1_clk_inv___lsb 12
#define reg_iop_sap_out_rw_bus___byte1_clk_inv___width 1
#define reg_iop_sap_out_rw_bus___byte1_clk_inv___bit 12
#define reg_iop_sap_out_rw_bus___byte1_delay___lsb 13
#define reg_iop_sap_out_rw_bus___byte1_delay___width 1
#define reg_iop_sap_out_rw_bus___byte1_delay___bit 13
#define reg_iop_sap_out_rw_bus___byte2_clk_sel___lsb 14
#define reg_iop_sap_out_rw_bus___byte2_clk_sel___width 2
#define reg_iop_sap_out_rw_bus___byte2_clk_ext___lsb 16
#define reg_iop_sap_out_rw_bus___byte2_clk_ext___width 2
#define reg_iop_sap_out_rw_bus___byte2_gated_clk___lsb 18
#define reg_iop_sap_out_rw_bus___byte2_gated_clk___width 1
#define reg_iop_sap_out_rw_bus___byte2_gated_clk___bit 18
#define reg_iop_sap_out_rw_bus___byte2_clk_inv___lsb 19
#define reg_iop_sap_out_rw_bus___byte2_clk_inv___width 1
#define reg_iop_sap_out_rw_bus___byte2_clk_inv___bit 19
#define reg_iop_sap_out_rw_bus___byte2_delay___lsb 20
#define reg_iop_sap_out_rw_bus___byte2_delay___width 1
#define reg_iop_sap_out_rw_bus___byte2_delay___bit 20
#define reg_iop_sap_out_rw_bus___byte3_clk_sel___lsb 21
#define reg_iop_sap_out_rw_bus___byte3_clk_sel___width 2
#define reg_iop_sap_out_rw_bus___byte3_clk_ext___lsb 23
#define reg_iop_sap_out_rw_bus___byte3_clk_ext___width 2
#define reg_iop_sap_out_rw_bus___byte3_gated_clk___lsb 25
#define reg_iop_sap_out_rw_bus___byte3_gated_clk___width 1
#define reg_iop_sap_out_rw_bus___byte3_gated_clk___bit 25
#define reg_iop_sap_out_rw_bus___byte3_clk_inv___lsb 26
#define reg_iop_sap_out_rw_bus___byte3_clk_inv___width 1
#define reg_iop_sap_out_rw_bus___byte3_clk_inv___bit 26
#define reg_iop_sap_out_rw_bus___byte3_delay___lsb 27
#define reg_iop_sap_out_rw_bus___byte3_delay___width 1
#define reg_iop_sap_out_rw_bus___byte3_delay___bit 27
#define reg_iop_sap_out_rw_bus_offset 4

/* Register rw_bus_lo_oe, scope iop_sap_out, type rw */
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_sel___lsb 0
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_sel___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_ext___lsb 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_ext___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_gated_clk___lsb 4
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_gated_clk___width 1
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_gated_clk___bit 4
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_inv___lsb 5
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_inv___width 1
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_clk_inv___bit 5
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_delay___lsb 6
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_delay___width 1
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_delay___bit 6
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_logic___lsb 7
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_logic___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_logic_src___lsb 9
#define reg_iop_sap_out_rw_bus_lo_oe___byte0_logic_src___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_sel___lsb 11
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_sel___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_ext___lsb 13
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_ext___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_gated_clk___lsb 15
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_gated_clk___width 1
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_gated_clk___bit 15
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_inv___lsb 16
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_inv___width 1
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_clk_inv___bit 16
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_delay___lsb 17
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_delay___width 1
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_delay___bit 17
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_logic___lsb 18
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_logic___width 2
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_logic_src___lsb 20
#define reg_iop_sap_out_rw_bus_lo_oe___byte1_logic_src___width 2
#define reg_iop_sap_out_rw_bus_lo_oe_offset 8

/* Register rw_bus_hi_oe, scope iop_sap_out, type rw */
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_sel___lsb 0
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_sel___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_ext___lsb 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_ext___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_gated_clk___lsb 4
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_gated_clk___width 1
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_gated_clk___bit 4
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_inv___lsb 5
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_inv___width 1
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_clk_inv___bit 5
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_delay___lsb 6
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_delay___width 1
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_delay___bit 6
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_logic___lsb 7
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_logic___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_logic_src___lsb 9
#define reg_iop_sap_out_rw_bus_hi_oe___byte2_logic_src___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_sel___lsb 11
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_sel___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_ext___lsb 13
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_ext___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_gated_clk___lsb 15
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_gated_clk___width 1
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_gated_clk___bit 15
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_inv___lsb 16
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_inv___width 1
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_clk_inv___bit 16
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_delay___lsb 17
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_delay___width 1
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_delay___bit 17
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_logic___lsb 18
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_logic___width 2
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_logic_src___lsb 20
#define reg_iop_sap_out_rw_bus_hi_oe___byte3_logic_src___width 2
#define reg_iop_sap_out_rw_bus_hi_oe_offset 12

#define STRIDE_iop_sap_out_rw_gio 4
/* Register rw_gio, scope iop_sap_out, type rw */
#define reg_iop_sap_out_rw_gio___out_clk_sel___lsb 0
#define reg_iop_sap_out_rw_gio___out_clk_sel___width 3
#define reg_iop_sap_out_rw_gio___out_clk_ext___lsb 3
#define reg_iop_sap_out_rw_gio___out_clk_ext___width 2
#define reg_iop_sap_out_rw_gio___out_gated_clk___lsb 5
#define reg_iop_sap_out_rw_gio___out_gated_clk___width 1
#define reg_iop_sap_out_rw_gio___out_gated_clk___bit 5
#define reg_iop_sap_out_rw_gio___out_clk_inv___lsb 6
#define reg_iop_sap_out_rw_gio___out_clk_inv___width 1
#define reg_iop_sap_out_rw_gio___out_clk_inv___bit 6
#define reg_iop_sap_out_rw_gio___out_delay___lsb 7
#define reg_iop_sap_out_rw_gio___out_delay___width 1
#define reg_iop_sap_out_rw_gio___out_delay___bit 7
#define reg_iop_sap_out_rw_gio___out_logic___lsb 8
#define reg_iop_sap_out_rw_gio___out_logic___width 2
#define reg_iop_sap_out_rw_gio___out_logic_src___lsb 10
#define reg_iop_sap_out_rw_gio___out_logic_src___width 2
#define reg_iop_sap_out_rw_gio___oe_clk_sel___lsb 12
#define reg_iop_sap_out_rw_gio___oe_clk_sel___width 3
#define reg_iop_sap_out_rw_gio___oe_clk_ext___lsb 15
#define reg_iop_sap_out_rw_gio___oe_clk_ext___width 2
#define reg_iop_sap_out_rw_gio___oe_gated_clk___lsb 17
#define reg_iop_sap_out_rw_gio___oe_gated_clk___width 1
#define reg_iop_sap_out_rw_gio___oe_gated_clk___bit 17
#define reg_iop_sap_out_rw_gio___oe_clk_inv___lsb 18
#define reg_iop_sap_out_rw_gio___oe_clk_inv___width 1
#define reg_iop_sap_out_rw_gio___oe_clk_inv___bit 18
#define reg_iop_sap_out_rw_gio___oe_delay___lsb 19
#define reg_iop_sap_out_rw_gio___oe_delay___width 1
#define reg_iop_sap_out_rw_gio___oe_delay___bit 19
#define reg_iop_sap_out_rw_gio___oe_logic___lsb 20
#define reg_iop_sap_out_rw_gio___oe_logic___width 2
#define reg_iop_sap_out_rw_gio___oe_logic_src___lsb 22
#define reg_iop_sap_out_rw_gio___oe_logic_src___width 2
#define reg_iop_sap_out_rw_gio_offset 16


/* Constants */
#define regk_iop_sap_out_always                   0x00000001
#define regk_iop_sap_out_and                      0x00000002
#define regk_iop_sap_out_clk0                     0x00000000
#define regk_iop_sap_out_clk1                     0x00000001
#define regk_iop_sap_out_clk12                    0x00000004
#define regk_iop_sap_out_clk200                   0x00000000
#define regk_iop_sap_out_ext                      0x00000002
#define regk_iop_sap_out_gated                    0x00000003
#define regk_iop_sap_out_gio0                     0x00000000
#define regk_iop_sap_out_gio1                     0x00000000
#define regk_iop_sap_out_gio16                    0x00000002
#define regk_iop_sap_out_gio17                    0x00000002
#define regk_iop_sap_out_gio24                    0x00000003
#define regk_iop_sap_out_gio25                    0x00000003
#define regk_iop_sap_out_gio8                     0x00000001
#define regk_iop_sap_out_gio9                     0x00000001
#define regk_iop_sap_out_gio_out10                0x00000005
#define regk_iop_sap_out_gio_out18                0x00000006
#define regk_iop_sap_out_gio_out2                 0x00000004
#define regk_iop_sap_out_gio_out26                0x00000007
#define regk_iop_sap_out_inv                      0x00000001
#define regk_iop_sap_out_nand                     0x00000003
#define regk_iop_sap_out_no                       0x00000000
#define regk_iop_sap_out_none                     0x00000000
#define regk_iop_sap_out_one                      0x00000001
#define regk_iop_sap_out_rw_bus_default           0x00000000
#define regk_iop_sap_out_rw_bus_hi_oe_default     0x00000000
#define regk_iop_sap_out_rw_bus_lo_oe_default     0x00000000
#define regk_iop_sap_out_rw_gen_gated_default     0x00000000
#define regk_iop_sap_out_rw_gio_default           0x00000000
#define regk_iop_sap_out_rw_gio_size              0x00000020
#define regk_iop_sap_out_spu_gio6                 0x00000002
#define regk_iop_sap_out_spu_gio7                 0x00000003
#define regk_iop_sap_out_timer_grp0_tmr2          0x00000000
#define regk_iop_sap_out_timer_grp0_tmr3          0x00000001
#define regk_iop_sap_out_timer_grp1_tmr2          0x00000002
#define regk_iop_sap_out_timer_grp1_tmr3          0x00000003
#define regk_iop_sap_out_tmr200                   0x00000001
#define regk_iop_sap_out_yes                      0x00000001
#endif /* __iop_sap_out_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /* Autogenerated Changes here will be lost!
 * generated by ./gen_sw.pl Wed Feb 14 09:27:48 2007 iop_sw.cfg 
 */
#define iop_version 0
#define iop_fifo_in_extra 64
#define iop_fifo_out_extra 128
#define iop_trigger_grp0 192
#define iop_trigger_grp1 256
#define iop_trigger_grp2 320
#define iop_trigger_grp3 384
#define iop_trigger_grp4 448
#define iop_trigger_grp5 512
#define iop_trigger_grp6 576
#define iop_trigger_grp7 640
#define iop_crc_par 768
#define iop_dmc_in 896
#define iop_dmc_out 1024
#define iop_fifo_in 1152
#define iop_fifo_out 1280
#define iop_scrc_in 1408
#define iop_scrc_out 1536
#define iop_timer_grp0 1664
#define iop_timer_grp1 1792
#define iop_sap_in 2048
#define iop_sap_out 2304
#define iop_spu 2560
#define iop_sw_cfg 2816
#define iop_sw_cpu 3072
#define iop_sw_mpu 3328
#define iop_sw_spu 3584
#define iop_mpu 4096
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef __iop_version_defs_asm_h
#define __iop_version_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           iop_version.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile iop_version_defs_asm.h iop_version.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register r_version, scope iop_version, type r */
#define reg_iop_version_r_version___nr___lsb 0
#define reg_iop_version_r_version___nr___width 8
#define reg_iop_version_r_version_offset 0


/* Constants */
#define regk_iop_version_v2_0                     0x00000002
#endif /* __iop_version_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef __iop_sw_spu_defs_asm_h
#define __iop_sw_spu_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           iop_sw_spu.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile iop_sw_spu_defs_asm.h iop_sw_spu.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register r_mpu_trace, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_mpu_trace_offset 0

/* Register rw_mc_ctrl, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_mc_ctrl___keep_owner___lsb 0
#define reg_iop_sw_spu_rw_mc_ctrl___keep_owner___width 1
#define reg_iop_sw_spu_rw_mc_ctrl___keep_owner___bit 0
#define reg_iop_sw_spu_rw_mc_ctrl___cmd___lsb 1
#define reg_iop_sw_spu_rw_mc_ctrl___cmd___width 2
#define reg_iop_sw_spu_rw_mc_ctrl___size___lsb 3
#define reg_iop_sw_spu_rw_mc_ctrl___size___width 3
#define reg_iop_sw_spu_rw_mc_ctrl___wr_spu_mem___lsb 6
#define reg_iop_sw_spu_rw_mc_ctrl___wr_spu_mem___width 1
#define reg_iop_sw_spu_rw_mc_ctrl___wr_spu_mem___bit 6
#define reg_iop_sw_spu_rw_mc_ctrl_offset 4

/* Register rw_mc_data, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_mc_data___val___lsb 0
#define reg_iop_sw_spu_rw_mc_data___val___width 32
#define reg_iop_sw_spu_rw_mc_data_offset 8

/* Register rw_mc_addr, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_mc_addr_offset 12

/* Register rs_mc_data, scope iop_sw_spu, type rs */
#define reg_iop_sw_spu_rs_mc_data_offset 16

/* Register r_mc_data, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_mc_data_offset 20

/* Register r_mc_stat, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_mc_stat___busy_cpu___lsb 0
#define reg_iop_sw_spu_r_mc_stat___busy_cpu___width 1
#define reg_iop_sw_spu_r_mc_stat___busy_cpu___bit 0
#define reg_iop_sw_spu_r_mc_stat___busy_mpu___lsb 1
#define reg_iop_sw_spu_r_mc_stat___busy_mpu___width 1
#define reg_iop_sw_spu_r_mc_stat___busy_mpu___bit 1
#define reg_iop_sw_spu_r_mc_stat___busy_spu___lsb 2
#define reg_iop_sw_spu_r_mc_stat___busy_spu___width 1
#define reg_iop_sw_spu_r_mc_stat___busy_spu___bit 2
#define reg_iop_sw_spu_r_mc_stat___owned_by_cpu___lsb 3
#define reg_iop_sw_spu_r_mc_stat___owned_by_cpu___width 1
#define reg_iop_sw_spu_r_mc_stat___owned_by_cpu___bit 3
#define reg_iop_sw_spu_r_mc_stat___owned_by_mpu___lsb 4
#define reg_iop_sw_spu_r_mc_stat___owned_by_mpu___width 1
#define reg_iop_sw_spu_r_mc_stat___owned_by_mpu___bit 4
#define reg_iop_sw_spu_r_mc_stat___owned_by_spu___lsb 5
#define reg_iop_sw_spu_r_mc_stat___owned_by_spu___width 1
#define reg_iop_sw_spu_r_mc_stat___owned_by_spu___bit 5
#define reg_iop_sw_spu_r_mc_stat_offset 24

/* Register rw_bus_clr_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_clr_mask___byte0___lsb 0
#define reg_iop_sw_spu_rw_bus_clr_mask___byte0___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask___byte1___lsb 8
#define reg_iop_sw_spu_rw_bus_clr_mask___byte1___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask___byte2___lsb 16
#define reg_iop_sw_spu_rw_bus_clr_mask___byte2___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask___byte3___lsb 24
#define reg_iop_sw_spu_rw_bus_clr_mask___byte3___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask_offset 28

/* Register rw_bus_set_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_set_mask___byte0___lsb 0
#define reg_iop_sw_spu_rw_bus_set_mask___byte0___width 8
#define reg_iop_sw_spu_rw_bus_set_mask___byte1___lsb 8
#define reg_iop_sw_spu_rw_bus_set_mask___byte1___width 8
#define reg_iop_sw_spu_rw_bus_set_mask___byte2___lsb 16
#define reg_iop_sw_spu_rw_bus_set_mask___byte2___width 8
#define reg_iop_sw_spu_rw_bus_set_mask___byte3___lsb 24
#define reg_iop_sw_spu_rw_bus_set_mask___byte3___width 8
#define reg_iop_sw_spu_rw_bus_set_mask_offset 32

/* Register rw_bus_oe_clr_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte0___lsb 0
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte0___width 1
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte0___bit 0
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte1___lsb 1
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte1___width 1
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte1___bit 1
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte2___lsb 2
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte2___width 1
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte2___bit 2
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte3___lsb 3
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte3___width 1
#define reg_iop_sw_spu_rw_bus_oe_clr_mask___byte3___bit 3
#define reg_iop_sw_spu_rw_bus_oe_clr_mask_offset 36

/* Register rw_bus_oe_set_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte0___lsb 0
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte0___width 1
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte0___bit 0
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte1___lsb 1
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte1___width 1
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte1___bit 1
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte2___lsb 2
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte2___width 1
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte2___bit 2
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte3___lsb 3
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte3___width 1
#define reg_iop_sw_spu_rw_bus_oe_set_mask___byte3___bit 3
#define reg_iop_sw_spu_rw_bus_oe_set_mask_offset 40

/* Register r_bus_in, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_bus_in_offset 44

/* Register rw_gio_clr_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_clr_mask___val___lsb 0
#define reg_iop_sw_spu_rw_gio_clr_mask___val___width 32
#define reg_iop_sw_spu_rw_gio_clr_mask_offset 48

/* Register rw_gio_set_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_set_mask___val___lsb 0
#define reg_iop_sw_spu_rw_gio_set_mask___val___width 32
#define reg_iop_sw_spu_rw_gio_set_mask_offset 52

/* Register rw_gio_oe_clr_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_oe_clr_mask___val___lsb 0
#define reg_iop_sw_spu_rw_gio_oe_clr_mask___val___width 32
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_offset 56

/* Register rw_gio_oe_set_mask, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_oe_set_mask___val___lsb 0
#define reg_iop_sw_spu_rw_gio_oe_set_mask___val___width 32
#define reg_iop_sw_spu_rw_gio_oe_set_mask_offset 60

/* Register r_gio_in, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_gio_in_offset 64

/* Register rw_bus_clr_mask_lo, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_clr_mask_lo___byte0___lsb 0
#define reg_iop_sw_spu_rw_bus_clr_mask_lo___byte0___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask_lo___byte1___lsb 8
#define reg_iop_sw_spu_rw_bus_clr_mask_lo___byte1___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask_lo_offset 68

/* Register rw_bus_clr_mask_hi, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_clr_mask_hi___byte2___lsb 0
#define reg_iop_sw_spu_rw_bus_clr_mask_hi___byte2___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask_hi___byte3___lsb 8
#define reg_iop_sw_spu_rw_bus_clr_mask_hi___byte3___width 8
#define reg_iop_sw_spu_rw_bus_clr_mask_hi_offset 72

/* Register rw_bus_set_mask_lo, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_set_mask_lo___byte0___lsb 0
#define reg_iop_sw_spu_rw_bus_set_mask_lo___byte0___width 8
#define reg_iop_sw_spu_rw_bus_set_mask_lo___byte1___lsb 8
#define reg_iop_sw_spu_rw_bus_set_mask_lo___byte1___width 8
#define reg_iop_sw_spu_rw_bus_set_mask_lo_offset 76

/* Register rw_bus_set_mask_hi, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_bus_set_mask_hi___byte2___lsb 0
#define reg_iop_sw_spu_rw_bus_set_mask_hi___byte2___width 8
#define reg_iop_sw_spu_rw_bus_set_mask_hi___byte3___lsb 8
#define reg_iop_sw_spu_rw_bus_set_mask_hi___byte3___width 8
#define reg_iop_sw_spu_rw_bus_set_mask_hi_offset 80

/* Register rw_gio_clr_mask_lo, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_clr_mask_lo___val___lsb 0
#define reg_iop_sw_spu_rw_gio_clr_mask_lo___val___width 16
#define reg_iop_sw_spu_rw_gio_clr_mask_lo_offset 84

/* Register rw_gio_clr_mask_hi, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_clr_mask_hi___val___lsb 0
#define reg_iop_sw_spu_rw_gio_clr_mask_hi___val___width 16
#define reg_iop_sw_spu_rw_gio_clr_mask_hi_offset 88

/* Register rw_gio_set_mask_lo, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_set_mask_lo___val___lsb 0
#define reg_iop_sw_spu_rw_gio_set_mask_lo___val___width 16
#define reg_iop_sw_spu_rw_gio_set_mask_lo_offset 92

/* Register rw_gio_set_mask_hi, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_set_mask_hi___val___lsb 0
#define reg_iop_sw_spu_rw_gio_set_mask_hi___val___width 16
#define reg_iop_sw_spu_rw_gio_set_mask_hi_offset 96

/* Register rw_gio_oe_clr_mask_lo, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_lo___val___lsb 0
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_lo___val___width 16
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_lo_offset 100

/* Register rw_gio_oe_clr_mask_hi, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_hi___val___lsb 0
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_hi___val___width 16
#define reg_iop_sw_spu_rw_gio_oe_clr_mask_hi_offset 104

/* Register rw_gio_oe_set_mask_lo, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_oe_set_mask_lo___val___lsb 0
#define reg_iop_sw_spu_rw_gio_oe_set_mask_lo___val___width 16
#define reg_iop_sw_spu_rw_gio_oe_set_mask_lo_offset 108

/* Register rw_gio_oe_set_mask_hi, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_gio_oe_set_mask_hi___val___lsb 0
#define reg_iop_sw_spu_rw_gio_oe_set_mask_hi___val___width 16
#define reg_iop_sw_spu_rw_gio_oe_set_mask_hi_offset 112

/* Register rw_cpu_intr, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_cpu_intr___intr0___lsb 0
#define reg_iop_sw_spu_rw_cpu_intr___intr0___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr0___bit 0
#define reg_iop_sw_spu_rw_cpu_intr___intr1___lsb 1
#define reg_iop_sw_spu_rw_cpu_intr___intr1___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr1___bit 1
#define reg_iop_sw_spu_rw_cpu_intr___intr2___lsb 2
#define reg_iop_sw_spu_rw_cpu_intr___intr2___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr2___bit 2
#define reg_iop_sw_spu_rw_cpu_intr___intr3___lsb 3
#define reg_iop_sw_spu_rw_cpu_intr___intr3___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr3___bit 3
#define reg_iop_sw_spu_rw_cpu_intr___intr4___lsb 4
#define reg_iop_sw_spu_rw_cpu_intr___intr4___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr4___bit 4
#define reg_iop_sw_spu_rw_cpu_intr___intr5___lsb 5
#define reg_iop_sw_spu_rw_cpu_intr___intr5___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr5___bit 5
#define reg_iop_sw_spu_rw_cpu_intr___intr6___lsb 6
#define reg_iop_sw_spu_rw_cpu_intr___intr6___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr6___bit 6
#define reg_iop_sw_spu_rw_cpu_intr___intr7___lsb 7
#define reg_iop_sw_spu_rw_cpu_intr___intr7___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr7___bit 7
#define reg_iop_sw_spu_rw_cpu_intr___intr8___lsb 8
#define reg_iop_sw_spu_rw_cpu_intr___intr8___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr8___bit 8
#define reg_iop_sw_spu_rw_cpu_intr___intr9___lsb 9
#define reg_iop_sw_spu_rw_cpu_intr___intr9___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr9___bit 9
#define reg_iop_sw_spu_rw_cpu_intr___intr10___lsb 10
#define reg_iop_sw_spu_rw_cpu_intr___intr10___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr10___bit 10
#define reg_iop_sw_spu_rw_cpu_intr___intr11___lsb 11
#define reg_iop_sw_spu_rw_cpu_intr___intr11___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr11___bit 11
#define reg_iop_sw_spu_rw_cpu_intr___intr12___lsb 12
#define reg_iop_sw_spu_rw_cpu_intr___intr12___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr12___bit 12
#define reg_iop_sw_spu_rw_cpu_intr___intr13___lsb 13
#define reg_iop_sw_spu_rw_cpu_intr___intr13___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr13___bit 13
#define reg_iop_sw_spu_rw_cpu_intr___intr14___lsb 14
#define reg_iop_sw_spu_rw_cpu_intr___intr14___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr14___bit 14
#define reg_iop_sw_spu_rw_cpu_intr___intr15___lsb 15
#define reg_iop_sw_spu_rw_cpu_intr___intr15___width 1
#define reg_iop_sw_spu_rw_cpu_intr___intr15___bit 15
#define reg_iop_sw_spu_rw_cpu_intr_offset 116

/* Register r_cpu_intr, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_cpu_intr___intr0___lsb 0
#define reg_iop_sw_spu_r_cpu_intr___intr0___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr0___bit 0
#define reg_iop_sw_spu_r_cpu_intr___intr1___lsb 1
#define reg_iop_sw_spu_r_cpu_intr___intr1___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr1___bit 1
#define reg_iop_sw_spu_r_cpu_intr___intr2___lsb 2
#define reg_iop_sw_spu_r_cpu_intr___intr2___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr2___bit 2
#define reg_iop_sw_spu_r_cpu_intr___intr3___lsb 3
#define reg_iop_sw_spu_r_cpu_intr___intr3___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr3___bit 3
#define reg_iop_sw_spu_r_cpu_intr___intr4___lsb 4
#define reg_iop_sw_spu_r_cpu_intr___intr4___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr4___bit 4
#define reg_iop_sw_spu_r_cpu_intr___intr5___lsb 5
#define reg_iop_sw_spu_r_cpu_intr___intr5___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr5___bit 5
#define reg_iop_sw_spu_r_cpu_intr___intr6___lsb 6
#define reg_iop_sw_spu_r_cpu_intr___intr6___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr6___bit 6
#define reg_iop_sw_spu_r_cpu_intr___intr7___lsb 7
#define reg_iop_sw_spu_r_cpu_intr___intr7___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr7___bit 7
#define reg_iop_sw_spu_r_cpu_intr___intr8___lsb 8
#define reg_iop_sw_spu_r_cpu_intr___intr8___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr8___bit 8
#define reg_iop_sw_spu_r_cpu_intr___intr9___lsb 9
#define reg_iop_sw_spu_r_cpu_intr___intr9___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr9___bit 9
#define reg_iop_sw_spu_r_cpu_intr___intr10___lsb 10
#define reg_iop_sw_spu_r_cpu_intr___intr10___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr10___bit 10
#define reg_iop_sw_spu_r_cpu_intr___intr11___lsb 11
#define reg_iop_sw_spu_r_cpu_intr___intr11___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr11___bit 11
#define reg_iop_sw_spu_r_cpu_intr___intr12___lsb 12
#define reg_iop_sw_spu_r_cpu_intr___intr12___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr12___bit 12
#define reg_iop_sw_spu_r_cpu_intr___intr13___lsb 13
#define reg_iop_sw_spu_r_cpu_intr___intr13___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr13___bit 13
#define reg_iop_sw_spu_r_cpu_intr___intr14___lsb 14
#define reg_iop_sw_spu_r_cpu_intr___intr14___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr14___bit 14
#define reg_iop_sw_spu_r_cpu_intr___intr15___lsb 15
#define reg_iop_sw_spu_r_cpu_intr___intr15___width 1
#define reg_iop_sw_spu_r_cpu_intr___intr15___bit 15
#define reg_iop_sw_spu_r_cpu_intr_offset 120

/* Register r_hw_intr, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_hw_intr___trigger_grp0___lsb 0
#define reg_iop_sw_spu_r_hw_intr___trigger_grp0___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp0___bit 0
#define reg_iop_sw_spu_r_hw_intr___trigger_grp1___lsb 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp1___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp1___bit 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp2___lsb 2
#define reg_iop_sw_spu_r_hw_intr___trigger_grp2___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp2___bit 2
#define reg_iop_sw_spu_r_hw_intr___trigger_grp3___lsb 3
#define reg_iop_sw_spu_r_hw_intr___trigger_grp3___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp3___bit 3
#define reg_iop_sw_spu_r_hw_intr___trigger_grp4___lsb 4
#define reg_iop_sw_spu_r_hw_intr___trigger_grp4___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp4___bit 4
#define reg_iop_sw_spu_r_hw_intr___trigger_grp5___lsb 5
#define reg_iop_sw_spu_r_hw_intr___trigger_grp5___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp5___bit 5
#define reg_iop_sw_spu_r_hw_intr___trigger_grp6___lsb 6
#define reg_iop_sw_spu_r_hw_intr___trigger_grp6___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp6___bit 6
#define reg_iop_sw_spu_r_hw_intr___trigger_grp7___lsb 7
#define reg_iop_sw_spu_r_hw_intr___trigger_grp7___width 1
#define reg_iop_sw_spu_r_hw_intr___trigger_grp7___bit 7
#define reg_iop_sw_spu_r_hw_intr___timer_grp0___lsb 8
#define reg_iop_sw_spu_r_hw_intr___timer_grp0___width 1
#define reg_iop_sw_spu_r_hw_intr___timer_grp0___bit 8
#define reg_iop_sw_spu_r_hw_intr___timer_grp1___lsb 9
#define reg_iop_sw_spu_r_hw_intr___timer_grp1___width 1
#define reg_iop_sw_spu_r_hw_intr___timer_grp1___bit 9
#define reg_iop_sw_spu_r_hw_intr___fifo_out___lsb 10
#define reg_iop_sw_spu_r_hw_intr___fifo_out___width 1
#define reg_iop_sw_spu_r_hw_intr___fifo_out___bit 10
#define reg_iop_sw_spu_r_hw_intr___fifo_out_extra___lsb 11
#define reg_iop_sw_spu_r_hw_intr___fifo_out_extra___width 1
#define reg_iop_sw_spu_r_hw_intr___fifo_out_extra___bit 11
#define reg_iop_sw_spu_r_hw_intr___fifo_in___lsb 12
#define reg_iop_sw_spu_r_hw_intr___fifo_in___width 1
#define reg_iop_sw_spu_r_hw_intr___fifo_in___bit 12
#define reg_iop_sw_spu_r_hw_intr___fifo_in_extra___lsb 13
#define reg_iop_sw_spu_r_hw_intr___fifo_in_extra___width 1
#define reg_iop_sw_spu_r_hw_intr___fifo_in_extra___bit 13
#define reg_iop_sw_spu_r_hw_intr___dmc_out___lsb 14
#define reg_iop_sw_spu_r_hw_intr___dmc_out___width 1
#define reg_iop_sw_spu_r_hw_intr___dmc_out___bit 14
#define reg_iop_sw_spu_r_hw_intr___dmc_in___lsb 15
#define reg_iop_sw_spu_r_hw_intr___dmc_in___width 1
#define reg_iop_sw_spu_r_hw_intr___dmc_in___bit 15
#define reg_iop_sw_spu_r_hw_intr_offset 124

/* Register rw_mpu_intr, scope iop_sw_spu, type rw */
#define reg_iop_sw_spu_rw_mpu_intr___intr0___lsb 0
#define reg_iop_sw_spu_rw_mpu_intr___intr0___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr0___bit 0
#define reg_iop_sw_spu_rw_mpu_intr___intr1___lsb 1
#define reg_iop_sw_spu_rw_mpu_intr___intr1___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr1___bit 1
#define reg_iop_sw_spu_rw_mpu_intr___intr2___lsb 2
#define reg_iop_sw_spu_rw_mpu_intr___intr2___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr2___bit 2
#define reg_iop_sw_spu_rw_mpu_intr___intr3___lsb 3
#define reg_iop_sw_spu_rw_mpu_intr___intr3___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr3___bit 3
#define reg_iop_sw_spu_rw_mpu_intr___intr4___lsb 4
#define reg_iop_sw_spu_rw_mpu_intr___intr4___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr4___bit 4
#define reg_iop_sw_spu_rw_mpu_intr___intr5___lsb 5
#define reg_iop_sw_spu_rw_mpu_intr___intr5___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr5___bit 5
#define reg_iop_sw_spu_rw_mpu_intr___intr6___lsb 6
#define reg_iop_sw_spu_rw_mpu_intr___intr6___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr6___bit 6
#define reg_iop_sw_spu_rw_mpu_intr___intr7___lsb 7
#define reg_iop_sw_spu_rw_mpu_intr___intr7___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr7___bit 7
#define reg_iop_sw_spu_rw_mpu_intr___intr8___lsb 8
#define reg_iop_sw_spu_rw_mpu_intr___intr8___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr8___bit 8
#define reg_iop_sw_spu_rw_mpu_intr___intr9___lsb 9
#define reg_iop_sw_spu_rw_mpu_intr___intr9___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr9___bit 9
#define reg_iop_sw_spu_rw_mpu_intr___intr10___lsb 10
#define reg_iop_sw_spu_rw_mpu_intr___intr10___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr10___bit 10
#define reg_iop_sw_spu_rw_mpu_intr___intr11___lsb 11
#define reg_iop_sw_spu_rw_mpu_intr___intr11___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr11___bit 11
#define reg_iop_sw_spu_rw_mpu_intr___intr12___lsb 12
#define reg_iop_sw_spu_rw_mpu_intr___intr12___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr12___bit 12
#define reg_iop_sw_spu_rw_mpu_intr___intr13___lsb 13
#define reg_iop_sw_spu_rw_mpu_intr___intr13___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr13___bit 13
#define reg_iop_sw_spu_rw_mpu_intr___intr14___lsb 14
#define reg_iop_sw_spu_rw_mpu_intr___intr14___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr14___bit 14
#define reg_iop_sw_spu_rw_mpu_intr___intr15___lsb 15
#define reg_iop_sw_spu_rw_mpu_intr___intr15___width 1
#define reg_iop_sw_spu_rw_mpu_intr___intr15___bit 15
#define reg_iop_sw_spu_rw_mpu_intr_offset 128

/* Register r_mpu_intr, scope iop_sw_spu, type r */
#define reg_iop_sw_spu_r_mpu_intr___intr0___lsb 0
#define reg_iop_sw_spu_r_mpu_intr___intr0___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr0___bit 0
#define reg_iop_sw_spu_r_mpu_intr___intr1___lsb 1
#define reg_iop_sw_spu_r_mpu_intr___intr1___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr1___bit 1
#define reg_iop_sw_spu_r_mpu_intr___intr2___lsb 2
#define reg_iop_sw_spu_r_mpu_intr___intr2___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr2___bit 2
#define reg_iop_sw_spu_r_mpu_intr___intr3___lsb 3
#define reg_iop_sw_spu_r_mpu_intr___intr3___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr3___bit 3
#define reg_iop_sw_spu_r_mpu_intr___intr4___lsb 4
#define reg_iop_sw_spu_r_mpu_intr___intr4___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr4___bit 4
#define reg_iop_sw_spu_r_mpu_intr___intr5___lsb 5
#define reg_iop_sw_spu_r_mpu_intr___intr5___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr5___bit 5
#define reg_iop_sw_spu_r_mpu_intr___intr6___lsb 6
#define reg_iop_sw_spu_r_mpu_intr___intr6___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr6___bit 6
#define reg_iop_sw_spu_r_mpu_intr___intr7___lsb 7
#define reg_iop_sw_spu_r_mpu_intr___intr7___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr7___bit 7
#define reg_iop_sw_spu_r_mpu_intr___intr8___lsb 8
#define reg_iop_sw_spu_r_mpu_intr___intr8___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr8___bit 8
#define reg_iop_sw_spu_r_mpu_intr___intr9___lsb 9
#define reg_iop_sw_spu_r_mpu_intr___intr9___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr9___bit 9
#define reg_iop_sw_spu_r_mpu_intr___intr10___lsb 10
#define reg_iop_sw_spu_r_mpu_intr___intr10___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr10___bit 10
#define reg_iop_sw_spu_r_mpu_intr___intr11___lsb 11
#define reg_iop_sw_spu_r_mpu_intr___intr11___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr11___bit 11
#define reg_iop_sw_spu_r_mpu_intr___intr12___lsb 12
#define reg_iop_sw_spu_r_mpu_intr___intr12___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr12___bit 12
#define reg_iop_sw_spu_r_mpu_intr___intr13___lsb 13
#define reg_iop_sw_spu_r_mpu_intr___intr13___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr13___bit 13
#define reg_iop_sw_spu_r_mpu_intr___intr14___lsb 14
#define reg_iop_sw_spu_r_mpu_intr___intr14___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr14___bit 14
#define reg_iop_sw_spu_r_mpu_intr___intr15___lsb 15
#define reg_iop_sw_spu_r_mpu_intr___intr15___width 1
#define reg_iop_sw_spu_r_mpu_intr___intr15___bit 15
#define reg_iop_sw_spu_r_mpu_intr_offset 132


/* Constants */
#define regk_iop_sw_spu_copy                      0x00000000
#define regk_iop_sw_spu_no                        0x00000000
#define regk_iop_sw_spu_nop                       0x00000000
#define regk_iop_sw_spu_rd                        0x00000002
#define regk_iop_sw_spu_reg_copy                  0x00000001
#define regk_iop_sw_spu_rw_bus_clr_mask_default   0x00000000
#define regk_iop_sw_spu_rw_bus_oe_clr_mask_default  0x00000000
#define regk_iop_sw_spu_rw_bus_oe_set_mask_default  0x00000000
#define regk_iop_sw_spu_rw_bus_set_mask_default   0x00000000
#define regk_iop_sw_spu_rw_gio_clr_mask_default   0x00000000
#define regk_iop_sw_spu_rw_gio_oe_clr_mask_default  0x00000000
#define regk_iop_sw_spu_rw_gio_oe_set_mask_default  0x00000000
#define regk_iop_sw_spu_rw_gio_set_mask_default   0x00000000
#define regk_iop_sw_spu_set                       0x00000001
#define regk_iop_sw_spu_wr                        0x00000003
#define regk_iop_sw_spu_yes                       0x00000001
#endif /* __iop_sw_spu_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef __iop_sw_cpu_defs_asm_h
#define __iop_sw_cpu_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           iop_sw_cpu.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile iop_sw_cpu_defs_asm.h iop_sw_cpu.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register r_mpu_trace, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_mpu_trace_offset 0

/* Register r_spu_trace, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_spu_trace_offset 4

/* Register r_spu_fsm_trace, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_spu_fsm_trace_offset 8

/* Register rw_mc_ctrl, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_mc_ctrl___keep_owner___lsb 0
#define reg_iop_sw_cpu_rw_mc_ctrl___keep_owner___width 1
#define reg_iop_sw_cpu_rw_mc_ctrl___keep_owner___bit 0
#define reg_iop_sw_cpu_rw_mc_ctrl___cmd___lsb 1
#define reg_iop_sw_cpu_rw_mc_ctrl___cmd___width 2
#define reg_iop_sw_cpu_rw_mc_ctrl___size___lsb 3
#define reg_iop_sw_cpu_rw_mc_ctrl___size___width 3
#define reg_iop_sw_cpu_rw_mc_ctrl___wr_spu_mem___lsb 6
#define reg_iop_sw_cpu_rw_mc_ctrl___wr_spu_mem___width 1
#define reg_iop_sw_cpu_rw_mc_ctrl___wr_spu_mem___bit 6
#define reg_iop_sw_cpu_rw_mc_ctrl_offset 12

/* Register rw_mc_data, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_mc_data___val___lsb 0
#define reg_iop_sw_cpu_rw_mc_data___val___width 32
#define reg_iop_sw_cpu_rw_mc_data_offset 16

/* Register rw_mc_addr, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_mc_addr_offset 20

/* Register rs_mc_data, scope iop_sw_cpu, type rs */
#define reg_iop_sw_cpu_rs_mc_data_offset 24

/* Register r_mc_data, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_mc_data_offset 28

/* Register r_mc_stat, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_mc_stat___busy_cpu___lsb 0
#define reg_iop_sw_cpu_r_mc_stat___busy_cpu___width 1
#define reg_iop_sw_cpu_r_mc_stat___busy_cpu___bit 0
#define reg_iop_sw_cpu_r_mc_stat___busy_mpu___lsb 1
#define reg_iop_sw_cpu_r_mc_stat___busy_mpu___width 1
#define reg_iop_sw_cpu_r_mc_stat___busy_mpu___bit 1
#define reg_iop_sw_cpu_r_mc_stat___busy_spu___lsb 2
#define reg_iop_sw_cpu_r_mc_stat___busy_spu___width 1
#define reg_iop_sw_cpu_r_mc_stat___busy_spu___bit 2
#define reg_iop_sw_cpu_r_mc_stat___owned_by_cpu___lsb 3
#define reg_iop_sw_cpu_r_mc_stat___owned_by_cpu___width 1
#define reg_iop_sw_cpu_r_mc_stat___owned_by_cpu___bit 3
#define reg_iop_sw_cpu_r_mc_stat___owned_by_mpu___lsb 4
#define reg_iop_sw_cpu_r_mc_stat___owned_by_mpu___width 1
#define reg_iop_sw_cpu_r_mc_stat___owned_by_mpu___bit 4
#define reg_iop_sw_cpu_r_mc_stat___owned_by_spu___lsb 5
#define reg_iop_sw_cpu_r_mc_stat___owned_by_spu___width 1
#define reg_iop_sw_cpu_r_mc_stat___owned_by_spu___bit 5
#define reg_iop_sw_cpu_r_mc_stat_offset 32

/* Register rw_bus_clr_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte0___lsb 0
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte0___width 8
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte1___lsb 8
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte1___width 8
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte2___lsb 16
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte2___width 8
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte3___lsb 24
#define reg_iop_sw_cpu_rw_bus_clr_mask___byte3___width 8
#define reg_iop_sw_cpu_rw_bus_clr_mask_offset 36

/* Register rw_bus_set_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_bus_set_mask___byte0___lsb 0
#define reg_iop_sw_cpu_rw_bus_set_mask___byte0___width 8
#define reg_iop_sw_cpu_rw_bus_set_mask___byte1___lsb 8
#define reg_iop_sw_cpu_rw_bus_set_mask___byte1___width 8
#define reg_iop_sw_cpu_rw_bus_set_mask___byte2___lsb 16
#define reg_iop_sw_cpu_rw_bus_set_mask___byte2___width 8
#define reg_iop_sw_cpu_rw_bus_set_mask___byte3___lsb 24
#define reg_iop_sw_cpu_rw_bus_set_mask___byte3___width 8
#define reg_iop_sw_cpu_rw_bus_set_mask_offset 40

/* Register rw_bus_oe_clr_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte0___lsb 0
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte0___width 1
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte0___bit 0
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte1___lsb 1
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte1___width 1
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte1___bit 1
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte2___lsb 2
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte2___width 1
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte2___bit 2
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte3___lsb 3
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte3___width 1
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask___byte3___bit 3
#define reg_iop_sw_cpu_rw_bus_oe_clr_mask_offset 44

/* Register rw_bus_oe_set_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte0___lsb 0
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte0___width 1
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte0___bit 0
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte1___lsb 1
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte1___width 1
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte1___bit 1
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte2___lsb 2
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte2___width 1
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte2___bit 2
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte3___lsb 3
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte3___width 1
#define reg_iop_sw_cpu_rw_bus_oe_set_mask___byte3___bit 3
#define reg_iop_sw_cpu_rw_bus_oe_set_mask_offset 48

/* Register r_bus_in, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_bus_in_offset 52

/* Register rw_gio_clr_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_gio_clr_mask___val___lsb 0
#define reg_iop_sw_cpu_rw_gio_clr_mask___val___width 32
#define reg_iop_sw_cpu_rw_gio_clr_mask_offset 56

/* Register rw_gio_set_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_gio_set_mask___val___lsb 0
#define reg_iop_sw_cpu_rw_gio_set_mask___val___width 32
#define reg_iop_sw_cpu_rw_gio_set_mask_offset 60

/* Register rw_gio_oe_clr_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_gio_oe_clr_mask___val___lsb 0
#define reg_iop_sw_cpu_rw_gio_oe_clr_mask___val___width 32
#define reg_iop_sw_cpu_rw_gio_oe_clr_mask_offset 64

/* Register rw_gio_oe_set_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_gio_oe_set_mask___val___lsb 0
#define reg_iop_sw_cpu_rw_gio_oe_set_mask___val___width 32
#define reg_iop_sw_cpu_rw_gio_oe_set_mask_offset 68

/* Register r_gio_in, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_gio_in_offset 72

/* Register rw_intr0_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_0___lsb 0
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_0___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_0___bit 0
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_1___lsb 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_1___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_1___bit 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_2___lsb 2
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_2___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_2___bit 2
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_3___lsb 3
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_3___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_3___bit 3
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_4___lsb 4
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_4___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_4___bit 4
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_5___lsb 5
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_5___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_5___bit 5
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_6___lsb 6
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_6___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_6___bit 6
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_7___lsb 7
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_7___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_7___bit 7
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_8___lsb 8
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_8___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_8___bit 8
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_9___lsb 9
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_9___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_9___bit 9
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_10___lsb 10
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_10___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_10___bit 10
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_11___lsb 11
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_11___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_11___bit 11
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_12___lsb 12
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_12___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_12___bit 12
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_13___lsb 13
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_13___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_13___bit 13
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_14___lsb 14
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_14___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_14___bit 14
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_15___lsb 15
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_15___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___mpu_15___bit 15
#define reg_iop_sw_cpu_rw_intr0_mask___spu_0___lsb 16
#define reg_iop_sw_cpu_rw_intr0_mask___spu_0___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_0___bit 16
#define reg_iop_sw_cpu_rw_intr0_mask___spu_1___lsb 17
#define reg_iop_sw_cpu_rw_intr0_mask___spu_1___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_1___bit 17
#define reg_iop_sw_cpu_rw_intr0_mask___spu_2___lsb 18
#define reg_iop_sw_cpu_rw_intr0_mask___spu_2___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_2___bit 18
#define reg_iop_sw_cpu_rw_intr0_mask___spu_3___lsb 19
#define reg_iop_sw_cpu_rw_intr0_mask___spu_3___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_3___bit 19
#define reg_iop_sw_cpu_rw_intr0_mask___spu_4___lsb 20
#define reg_iop_sw_cpu_rw_intr0_mask___spu_4___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_4___bit 20
#define reg_iop_sw_cpu_rw_intr0_mask___spu_5___lsb 21
#define reg_iop_sw_cpu_rw_intr0_mask___spu_5___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_5___bit 21
#define reg_iop_sw_cpu_rw_intr0_mask___spu_6___lsb 22
#define reg_iop_sw_cpu_rw_intr0_mask___spu_6___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_6___bit 22
#define reg_iop_sw_cpu_rw_intr0_mask___spu_7___lsb 23
#define reg_iop_sw_cpu_rw_intr0_mask___spu_7___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_7___bit 23
#define reg_iop_sw_cpu_rw_intr0_mask___spu_8___lsb 24
#define reg_iop_sw_cpu_rw_intr0_mask___spu_8___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_8___bit 24
#define reg_iop_sw_cpu_rw_intr0_mask___spu_9___lsb 25
#define reg_iop_sw_cpu_rw_intr0_mask___spu_9___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_9___bit 25
#define reg_iop_sw_cpu_rw_intr0_mask___spu_10___lsb 26
#define reg_iop_sw_cpu_rw_intr0_mask___spu_10___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_10___bit 26
#define reg_iop_sw_cpu_rw_intr0_mask___spu_11___lsb 27
#define reg_iop_sw_cpu_rw_intr0_mask___spu_11___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_11___bit 27
#define reg_iop_sw_cpu_rw_intr0_mask___spu_12___lsb 28
#define reg_iop_sw_cpu_rw_intr0_mask___spu_12___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_12___bit 28
#define reg_iop_sw_cpu_rw_intr0_mask___spu_13___lsb 29
#define reg_iop_sw_cpu_rw_intr0_mask___spu_13___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_13___bit 29
#define reg_iop_sw_cpu_rw_intr0_mask___spu_14___lsb 30
#define reg_iop_sw_cpu_rw_intr0_mask___spu_14___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_14___bit 30
#define reg_iop_sw_cpu_rw_intr0_mask___spu_15___lsb 31
#define reg_iop_sw_cpu_rw_intr0_mask___spu_15___width 1
#define reg_iop_sw_cpu_rw_intr0_mask___spu_15___bit 31
#define reg_iop_sw_cpu_rw_intr0_mask_offset 76

/* Register rw_ack_intr0, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_0___lsb 0
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_0___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_0___bit 0
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_1___lsb 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_1___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_1___bit 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_2___lsb 2
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_2___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_2___bit 2
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_3___lsb 3
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_3___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_3___bit 3
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_4___lsb 4
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_4___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_4___bit 4
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_5___lsb 5
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_5___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_5___bit 5
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_6___lsb 6
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_6___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_6___bit 6
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_7___lsb 7
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_7___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_7___bit 7
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_8___lsb 8
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_8___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_8___bit 8
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_9___lsb 9
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_9___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_9___bit 9
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_10___lsb 10
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_10___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_10___bit 10
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_11___lsb 11
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_11___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_11___bit 11
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_12___lsb 12
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_12___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_12___bit 12
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_13___lsb 13
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_13___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_13___bit 13
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_14___lsb 14
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_14___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_14___bit 14
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_15___lsb 15
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_15___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___mpu_15___bit 15
#define reg_iop_sw_cpu_rw_ack_intr0___spu_0___lsb 16
#define reg_iop_sw_cpu_rw_ack_intr0___spu_0___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_0___bit 16
#define reg_iop_sw_cpu_rw_ack_intr0___spu_1___lsb 17
#define reg_iop_sw_cpu_rw_ack_intr0___spu_1___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_1___bit 17
#define reg_iop_sw_cpu_rw_ack_intr0___spu_2___lsb 18
#define reg_iop_sw_cpu_rw_ack_intr0___spu_2___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_2___bit 18
#define reg_iop_sw_cpu_rw_ack_intr0___spu_3___lsb 19
#define reg_iop_sw_cpu_rw_ack_intr0___spu_3___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_3___bit 19
#define reg_iop_sw_cpu_rw_ack_intr0___spu_4___lsb 20
#define reg_iop_sw_cpu_rw_ack_intr0___spu_4___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_4___bit 20
#define reg_iop_sw_cpu_rw_ack_intr0___spu_5___lsb 21
#define reg_iop_sw_cpu_rw_ack_intr0___spu_5___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_5___bit 21
#define reg_iop_sw_cpu_rw_ack_intr0___spu_6___lsb 22
#define reg_iop_sw_cpu_rw_ack_intr0___spu_6___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_6___bit 22
#define reg_iop_sw_cpu_rw_ack_intr0___spu_7___lsb 23
#define reg_iop_sw_cpu_rw_ack_intr0___spu_7___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_7___bit 23
#define reg_iop_sw_cpu_rw_ack_intr0___spu_8___lsb 24
#define reg_iop_sw_cpu_rw_ack_intr0___spu_8___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_8___bit 24
#define reg_iop_sw_cpu_rw_ack_intr0___spu_9___lsb 25
#define reg_iop_sw_cpu_rw_ack_intr0___spu_9___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_9___bit 25
#define reg_iop_sw_cpu_rw_ack_intr0___spu_10___lsb 26
#define reg_iop_sw_cpu_rw_ack_intr0___spu_10___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_10___bit 26
#define reg_iop_sw_cpu_rw_ack_intr0___spu_11___lsb 27
#define reg_iop_sw_cpu_rw_ack_intr0___spu_11___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_11___bit 27
#define reg_iop_sw_cpu_rw_ack_intr0___spu_12___lsb 28
#define reg_iop_sw_cpu_rw_ack_intr0___spu_12___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_12___bit 28
#define reg_iop_sw_cpu_rw_ack_intr0___spu_13___lsb 29
#define reg_iop_sw_cpu_rw_ack_intr0___spu_13___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_13___bit 29
#define reg_iop_sw_cpu_rw_ack_intr0___spu_14___lsb 30
#define reg_iop_sw_cpu_rw_ack_intr0___spu_14___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_14___bit 30
#define reg_iop_sw_cpu_rw_ack_intr0___spu_15___lsb 31
#define reg_iop_sw_cpu_rw_ack_intr0___spu_15___width 1
#define reg_iop_sw_cpu_rw_ack_intr0___spu_15___bit 31
#define reg_iop_sw_cpu_rw_ack_intr0_offset 80

/* Register r_intr0, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_intr0___mpu_0___lsb 0
#define reg_iop_sw_cpu_r_intr0___mpu_0___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_0___bit 0
#define reg_iop_sw_cpu_r_intr0___mpu_1___lsb 1
#define reg_iop_sw_cpu_r_intr0___mpu_1___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_1___bit 1
#define reg_iop_sw_cpu_r_intr0___mpu_2___lsb 2
#define reg_iop_sw_cpu_r_intr0___mpu_2___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_2___bit 2
#define reg_iop_sw_cpu_r_intr0___mpu_3___lsb 3
#define reg_iop_sw_cpu_r_intr0___mpu_3___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_3___bit 3
#define reg_iop_sw_cpu_r_intr0___mpu_4___lsb 4
#define reg_iop_sw_cpu_r_intr0___mpu_4___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_4___bit 4
#define reg_iop_sw_cpu_r_intr0___mpu_5___lsb 5
#define reg_iop_sw_cpu_r_intr0___mpu_5___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_5___bit 5
#define reg_iop_sw_cpu_r_intr0___mpu_6___lsb 6
#define reg_iop_sw_cpu_r_intr0___mpu_6___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_6___bit 6
#define reg_iop_sw_cpu_r_intr0___mpu_7___lsb 7
#define reg_iop_sw_cpu_r_intr0___mpu_7___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_7___bit 7
#define reg_iop_sw_cpu_r_intr0___mpu_8___lsb 8
#define reg_iop_sw_cpu_r_intr0___mpu_8___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_8___bit 8
#define reg_iop_sw_cpu_r_intr0___mpu_9___lsb 9
#define reg_iop_sw_cpu_r_intr0___mpu_9___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_9___bit 9
#define reg_iop_sw_cpu_r_intr0___mpu_10___lsb 10
#define reg_iop_sw_cpu_r_intr0___mpu_10___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_10___bit 10
#define reg_iop_sw_cpu_r_intr0___mpu_11___lsb 11
#define reg_iop_sw_cpu_r_intr0___mpu_11___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_11___bit 11
#define reg_iop_sw_cpu_r_intr0___mpu_12___lsb 12
#define reg_iop_sw_cpu_r_intr0___mpu_12___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_12___bit 12
#define reg_iop_sw_cpu_r_intr0___mpu_13___lsb 13
#define reg_iop_sw_cpu_r_intr0___mpu_13___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_13___bit 13
#define reg_iop_sw_cpu_r_intr0___mpu_14___lsb 14
#define reg_iop_sw_cpu_r_intr0___mpu_14___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_14___bit 14
#define reg_iop_sw_cpu_r_intr0___mpu_15___lsb 15
#define reg_iop_sw_cpu_r_intr0___mpu_15___width 1
#define reg_iop_sw_cpu_r_intr0___mpu_15___bit 15
#define reg_iop_sw_cpu_r_intr0___spu_0___lsb 16
#define reg_iop_sw_cpu_r_intr0___spu_0___width 1
#define reg_iop_sw_cpu_r_intr0___spu_0___bit 16
#define reg_iop_sw_cpu_r_intr0___spu_1___lsb 17
#define reg_iop_sw_cpu_r_intr0___spu_1___width 1
#define reg_iop_sw_cpu_r_intr0___spu_1___bit 17
#define reg_iop_sw_cpu_r_intr0___spu_2___lsb 18
#define reg_iop_sw_cpu_r_intr0___spu_2___width 1
#define reg_iop_sw_cpu_r_intr0___spu_2___bit 18
#define reg_iop_sw_cpu_r_intr0___spu_3___lsb 19
#define reg_iop_sw_cpu_r_intr0___spu_3___width 1
#define reg_iop_sw_cpu_r_intr0___spu_3___bit 19
#define reg_iop_sw_cpu_r_intr0___spu_4___lsb 20
#define reg_iop_sw_cpu_r_intr0___spu_4___width 1
#define reg_iop_sw_cpu_r_intr0___spu_4___bit 20
#define reg_iop_sw_cpu_r_intr0___spu_5___lsb 21
#define reg_iop_sw_cpu_r_intr0___spu_5___width 1
#define reg_iop_sw_cpu_r_intr0___spu_5___bit 21
#define reg_iop_sw_cpu_r_intr0___spu_6___lsb 22
#define reg_iop_sw_cpu_r_intr0___spu_6___width 1
#define reg_iop_sw_cpu_r_intr0___spu_6___bit 22
#define reg_iop_sw_cpu_r_intr0___spu_7___lsb 23
#define reg_iop_sw_cpu_r_intr0___spu_7___width 1
#define reg_iop_sw_cpu_r_intr0___spu_7___bit 23
#define reg_iop_sw_cpu_r_intr0___spu_8___lsb 24
#define reg_iop_sw_cpu_r_intr0___spu_8___width 1
#define reg_iop_sw_cpu_r_intr0___spu_8___bit 24
#define reg_iop_sw_cpu_r_intr0___spu_9___lsb 25
#define reg_iop_sw_cpu_r_intr0___spu_9___width 1
#define reg_iop_sw_cpu_r_intr0___spu_9___bit 25
#define reg_iop_sw_cpu_r_intr0___spu_10___lsb 26
#define reg_iop_sw_cpu_r_intr0___spu_10___width 1
#define reg_iop_sw_cpu_r_intr0___spu_10___bit 26
#define reg_iop_sw_cpu_r_intr0___spu_11___lsb 27
#define reg_iop_sw_cpu_r_intr0___spu_11___width 1
#define reg_iop_sw_cpu_r_intr0___spu_11___bit 27
#define reg_iop_sw_cpu_r_intr0___spu_12___lsb 28
#define reg_iop_sw_cpu_r_intr0___spu_12___width 1
#define reg_iop_sw_cpu_r_intr0___spu_12___bit 28
#define reg_iop_sw_cpu_r_intr0___spu_13___lsb 29
#define reg_iop_sw_cpu_r_intr0___spu_13___width 1
#define reg_iop_sw_cpu_r_intr0___spu_13___bit 29
#define reg_iop_sw_cpu_r_intr0___spu_14___lsb 30
#define reg_iop_sw_cpu_r_intr0___spu_14___width 1
#define reg_iop_sw_cpu_r_intr0___spu_14___bit 30
#define reg_iop_sw_cpu_r_intr0___spu_15___lsb 31
#define reg_iop_sw_cpu_r_intr0___spu_15___width 1
#define reg_iop_sw_cpu_r_intr0___spu_15___bit 31
#define reg_iop_sw_cpu_r_intr0_offset 84

/* Register r_masked_intr0, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_masked_intr0___mpu_0___lsb 0
#define reg_iop_sw_cpu_r_masked_intr0___mpu_0___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_0___bit 0
#define reg_iop_sw_cpu_r_masked_intr0___mpu_1___lsb 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_1___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_1___bit 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_2___lsb 2
#define reg_iop_sw_cpu_r_masked_intr0___mpu_2___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_2___bit 2
#define reg_iop_sw_cpu_r_masked_intr0___mpu_3___lsb 3
#define reg_iop_sw_cpu_r_masked_intr0___mpu_3___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_3___bit 3
#define reg_iop_sw_cpu_r_masked_intr0___mpu_4___lsb 4
#define reg_iop_sw_cpu_r_masked_intr0___mpu_4___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_4___bit 4
#define reg_iop_sw_cpu_r_masked_intr0___mpu_5___lsb 5
#define reg_iop_sw_cpu_r_masked_intr0___mpu_5___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_5___bit 5
#define reg_iop_sw_cpu_r_masked_intr0___mpu_6___lsb 6
#define reg_iop_sw_cpu_r_masked_intr0___mpu_6___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_6___bit 6
#define reg_iop_sw_cpu_r_masked_intr0___mpu_7___lsb 7
#define reg_iop_sw_cpu_r_masked_intr0___mpu_7___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_7___bit 7
#define reg_iop_sw_cpu_r_masked_intr0___mpu_8___lsb 8
#define reg_iop_sw_cpu_r_masked_intr0___mpu_8___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_8___bit 8
#define reg_iop_sw_cpu_r_masked_intr0___mpu_9___lsb 9
#define reg_iop_sw_cpu_r_masked_intr0___mpu_9___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_9___bit 9
#define reg_iop_sw_cpu_r_masked_intr0___mpu_10___lsb 10
#define reg_iop_sw_cpu_r_masked_intr0___mpu_10___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_10___bit 10
#define reg_iop_sw_cpu_r_masked_intr0___mpu_11___lsb 11
#define reg_iop_sw_cpu_r_masked_intr0___mpu_11___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_11___bit 11
#define reg_iop_sw_cpu_r_masked_intr0___mpu_12___lsb 12
#define reg_iop_sw_cpu_r_masked_intr0___mpu_12___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_12___bit 12
#define reg_iop_sw_cpu_r_masked_intr0___mpu_13___lsb 13
#define reg_iop_sw_cpu_r_masked_intr0___mpu_13___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_13___bit 13
#define reg_iop_sw_cpu_r_masked_intr0___mpu_14___lsb 14
#define reg_iop_sw_cpu_r_masked_intr0___mpu_14___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_14___bit 14
#define reg_iop_sw_cpu_r_masked_intr0___mpu_15___lsb 15
#define reg_iop_sw_cpu_r_masked_intr0___mpu_15___width 1
#define reg_iop_sw_cpu_r_masked_intr0___mpu_15___bit 15
#define reg_iop_sw_cpu_r_masked_intr0___spu_0___lsb 16
#define reg_iop_sw_cpu_r_masked_intr0___spu_0___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_0___bit 16
#define reg_iop_sw_cpu_r_masked_intr0___spu_1___lsb 17
#define reg_iop_sw_cpu_r_masked_intr0___spu_1___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_1___bit 17
#define reg_iop_sw_cpu_r_masked_intr0___spu_2___lsb 18
#define reg_iop_sw_cpu_r_masked_intr0___spu_2___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_2___bit 18
#define reg_iop_sw_cpu_r_masked_intr0___spu_3___lsb 19
#define reg_iop_sw_cpu_r_masked_intr0___spu_3___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_3___bit 19
#define reg_iop_sw_cpu_r_masked_intr0___spu_4___lsb 20
#define reg_iop_sw_cpu_r_masked_intr0___spu_4___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_4___bit 20
#define reg_iop_sw_cpu_r_masked_intr0___spu_5___lsb 21
#define reg_iop_sw_cpu_r_masked_intr0___spu_5___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_5___bit 21
#define reg_iop_sw_cpu_r_masked_intr0___spu_6___lsb 22
#define reg_iop_sw_cpu_r_masked_intr0___spu_6___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_6___bit 22
#define reg_iop_sw_cpu_r_masked_intr0___spu_7___lsb 23
#define reg_iop_sw_cpu_r_masked_intr0___spu_7___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_7___bit 23
#define reg_iop_sw_cpu_r_masked_intr0___spu_8___lsb 24
#define reg_iop_sw_cpu_r_masked_intr0___spu_8___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_8___bit 24
#define reg_iop_sw_cpu_r_masked_intr0___spu_9___lsb 25
#define reg_iop_sw_cpu_r_masked_intr0___spu_9___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_9___bit 25
#define reg_iop_sw_cpu_r_masked_intr0___spu_10___lsb 26
#define reg_iop_sw_cpu_r_masked_intr0___spu_10___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_10___bit 26
#define reg_iop_sw_cpu_r_masked_intr0___spu_11___lsb 27
#define reg_iop_sw_cpu_r_masked_intr0___spu_11___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_11___bit 27
#define reg_iop_sw_cpu_r_masked_intr0___spu_12___lsb 28
#define reg_iop_sw_cpu_r_masked_intr0___spu_12___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_12___bit 28
#define reg_iop_sw_cpu_r_masked_intr0___spu_13___lsb 29
#define reg_iop_sw_cpu_r_masked_intr0___spu_13___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_13___bit 29
#define reg_iop_sw_cpu_r_masked_intr0___spu_14___lsb 30
#define reg_iop_sw_cpu_r_masked_intr0___spu_14___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_14___bit 30
#define reg_iop_sw_cpu_r_masked_intr0___spu_15___lsb 31
#define reg_iop_sw_cpu_r_masked_intr0___spu_15___width 1
#define reg_iop_sw_cpu_r_masked_intr0___spu_15___bit 31
#define reg_iop_sw_cpu_r_masked_intr0_offset 88

/* Register rw_intr1_mask, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_16___lsb 0
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_16___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_16___bit 0
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_17___lsb 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_17___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_17___bit 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_18___lsb 2
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_18___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_18___bit 2
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_19___lsb 3
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_19___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_19___bit 3
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_20___lsb 4
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_20___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_20___bit 4
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_21___lsb 5
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_21___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_21___bit 5
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_22___lsb 6
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_22___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_22___bit 6
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_23___lsb 7
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_23___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_23___bit 7
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_24___lsb 8
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_24___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_24___bit 8
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_25___lsb 9
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_25___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_25___bit 9
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_26___lsb 10
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_26___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_26___bit 10
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_27___lsb 11
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_27___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_27___bit 11
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_28___lsb 12
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_28___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_28___bit 12
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_29___lsb 13
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_29___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_29___bit 13
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_30___lsb 14
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_30___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_30___bit 14
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_31___lsb 15
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_31___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___mpu_31___bit 15
#define reg_iop_sw_cpu_rw_intr1_mask___dmc_in___lsb 16
#define reg_iop_sw_cpu_rw_intr1_mask___dmc_in___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___dmc_in___bit 16
#define reg_iop_sw_cpu_rw_intr1_mask___dmc_out___lsb 17
#define reg_iop_sw_cpu_rw_intr1_mask___dmc_out___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___dmc_out___bit 17
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_in___lsb 18
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_in___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_in___bit 18
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_out___lsb 19
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_out___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_out___bit 19
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_in_extra___lsb 20
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_in_extra___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_in_extra___bit 20
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_out_extra___lsb 21
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_out_extra___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___fifo_out_extra___bit 21
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp0___lsb 22
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp0___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp0___bit 22
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp1___lsb 23
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp1___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp1___bit 23
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp2___lsb 24
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp2___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp2___bit 24
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp3___lsb 25
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp3___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp3___bit 25
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp4___lsb 26
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp4___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp4___bit 26
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp5___lsb 27
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp5___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp5___bit 27
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp6___lsb 28
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp6___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp6___bit 28
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp7___lsb 29
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp7___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___trigger_grp7___bit 29
#define reg_iop_sw_cpu_rw_intr1_mask___timer_grp0___lsb 30
#define reg_iop_sw_cpu_rw_intr1_mask___timer_grp0___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___timer_grp0___bit 30
#define reg_iop_sw_cpu_rw_intr1_mask___timer_grp1___lsb 31
#define reg_iop_sw_cpu_rw_intr1_mask___timer_grp1___width 1
#define reg_iop_sw_cpu_rw_intr1_mask___timer_grp1___bit 31
#define reg_iop_sw_cpu_rw_intr1_mask_offset 92

/* Register rw_ack_intr1, scope iop_sw_cpu, type rw */
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_16___lsb 0
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_16___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_16___bit 0
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_17___lsb 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_17___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_17___bit 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_18___lsb 2
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_18___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_18___bit 2
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_19___lsb 3
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_19___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_19___bit 3
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_20___lsb 4
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_20___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_20___bit 4
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_21___lsb 5
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_21___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_21___bit 5
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_22___lsb 6
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_22___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_22___bit 6
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_23___lsb 7
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_23___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_23___bit 7
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_24___lsb 8
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_24___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_24___bit 8
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_25___lsb 9
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_25___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_25___bit 9
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_26___lsb 10
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_26___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_26___bit 10
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_27___lsb 11
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_27___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_27___bit 11
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_28___lsb 12
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_28___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_28___bit 12
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_29___lsb 13
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_29___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_29___bit 13
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_30___lsb 14
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_30___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_30___bit 14
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_31___lsb 15
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_31___width 1
#define reg_iop_sw_cpu_rw_ack_intr1___mpu_31___bit 15
#define reg_iop_sw_cpu_rw_ack_intr1_offset 96

/* Register r_intr1, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_intr1___mpu_16___lsb 0
#define reg_iop_sw_cpu_r_intr1___mpu_16___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_16___bit 0
#define reg_iop_sw_cpu_r_intr1___mpu_17___lsb 1
#define reg_iop_sw_cpu_r_intr1___mpu_17___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_17___bit 1
#define reg_iop_sw_cpu_r_intr1___mpu_18___lsb 2
#define reg_iop_sw_cpu_r_intr1___mpu_18___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_18___bit 2
#define reg_iop_sw_cpu_r_intr1___mpu_19___lsb 3
#define reg_iop_sw_cpu_r_intr1___mpu_19___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_19___bit 3
#define reg_iop_sw_cpu_r_intr1___mpu_20___lsb 4
#define reg_iop_sw_cpu_r_intr1___mpu_20___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_20___bit 4
#define reg_iop_sw_cpu_r_intr1___mpu_21___lsb 5
#define reg_iop_sw_cpu_r_intr1___mpu_21___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_21___bit 5
#define reg_iop_sw_cpu_r_intr1___mpu_22___lsb 6
#define reg_iop_sw_cpu_r_intr1___mpu_22___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_22___bit 6
#define reg_iop_sw_cpu_r_intr1___mpu_23___lsb 7
#define reg_iop_sw_cpu_r_intr1___mpu_23___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_23___bit 7
#define reg_iop_sw_cpu_r_intr1___mpu_24___lsb 8
#define reg_iop_sw_cpu_r_intr1___mpu_24___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_24___bit 8
#define reg_iop_sw_cpu_r_intr1___mpu_25___lsb 9
#define reg_iop_sw_cpu_r_intr1___mpu_25___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_25___bit 9
#define reg_iop_sw_cpu_r_intr1___mpu_26___lsb 10
#define reg_iop_sw_cpu_r_intr1___mpu_26___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_26___bit 10
#define reg_iop_sw_cpu_r_intr1___mpu_27___lsb 11
#define reg_iop_sw_cpu_r_intr1___mpu_27___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_27___bit 11
#define reg_iop_sw_cpu_r_intr1___mpu_28___lsb 12
#define reg_iop_sw_cpu_r_intr1___mpu_28___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_28___bit 12
#define reg_iop_sw_cpu_r_intr1___mpu_29___lsb 13
#define reg_iop_sw_cpu_r_intr1___mpu_29___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_29___bit 13
#define reg_iop_sw_cpu_r_intr1___mpu_30___lsb 14
#define reg_iop_sw_cpu_r_intr1___mpu_30___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_30___bit 14
#define reg_iop_sw_cpu_r_intr1___mpu_31___lsb 15
#define reg_iop_sw_cpu_r_intr1___mpu_31___width 1
#define reg_iop_sw_cpu_r_intr1___mpu_31___bit 15
#define reg_iop_sw_cpu_r_intr1___dmc_in___lsb 16
#define reg_iop_sw_cpu_r_intr1___dmc_in___width 1
#define reg_iop_sw_cpu_r_intr1___dmc_in___bit 16
#define reg_iop_sw_cpu_r_intr1___dmc_out___lsb 17
#define reg_iop_sw_cpu_r_intr1___dmc_out___width 1
#define reg_iop_sw_cpu_r_intr1___dmc_out___bit 17
#define reg_iop_sw_cpu_r_intr1___fifo_in___lsb 18
#define reg_iop_sw_cpu_r_intr1___fifo_in___width 1
#define reg_iop_sw_cpu_r_intr1___fifo_in___bit 18
#define reg_iop_sw_cpu_r_intr1___fifo_out___lsb 19
#define reg_iop_sw_cpu_r_intr1___fifo_out___width 1
#define reg_iop_sw_cpu_r_intr1___fifo_out___bit 19
#define reg_iop_sw_cpu_r_intr1___fifo_in_extra___lsb 20
#define reg_iop_sw_cpu_r_intr1___fifo_in_extra___width 1
#define reg_iop_sw_cpu_r_intr1___fifo_in_extra___bit 20
#define reg_iop_sw_cpu_r_intr1___fifo_out_extra___lsb 21
#define reg_iop_sw_cpu_r_intr1___fifo_out_extra___width 1
#define reg_iop_sw_cpu_r_intr1___fifo_out_extra___bit 21
#define reg_iop_sw_cpu_r_intr1___trigger_grp0___lsb 22
#define reg_iop_sw_cpu_r_intr1___trigger_grp0___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp0___bit 22
#define reg_iop_sw_cpu_r_intr1___trigger_grp1___lsb 23
#define reg_iop_sw_cpu_r_intr1___trigger_grp1___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp1___bit 23
#define reg_iop_sw_cpu_r_intr1___trigger_grp2___lsb 24
#define reg_iop_sw_cpu_r_intr1___trigger_grp2___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp2___bit 24
#define reg_iop_sw_cpu_r_intr1___trigger_grp3___lsb 25
#define reg_iop_sw_cpu_r_intr1___trigger_grp3___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp3___bit 25
#define reg_iop_sw_cpu_r_intr1___trigger_grp4___lsb 26
#define reg_iop_sw_cpu_r_intr1___trigger_grp4___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp4___bit 26
#define reg_iop_sw_cpu_r_intr1___trigger_grp5___lsb 27
#define reg_iop_sw_cpu_r_intr1___trigger_grp5___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp5___bit 27
#define reg_iop_sw_cpu_r_intr1___trigger_grp6___lsb 28
#define reg_iop_sw_cpu_r_intr1___trigger_grp6___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp6___bit 28
#define reg_iop_sw_cpu_r_intr1___trigger_grp7___lsb 29
#define reg_iop_sw_cpu_r_intr1___trigger_grp7___width 1
#define reg_iop_sw_cpu_r_intr1___trigger_grp7___bit 29
#define reg_iop_sw_cpu_r_intr1___timer_grp0___lsb 30
#define reg_iop_sw_cpu_r_intr1___timer_grp0___width 1
#define reg_iop_sw_cpu_r_intr1___timer_grp0___bit 30
#define reg_iop_sw_cpu_r_intr1___timer_grp1___lsb 31
#define reg_iop_sw_cpu_r_intr1___timer_grp1___width 1
#define reg_iop_sw_cpu_r_intr1___timer_grp1___bit 31
#define reg_iop_sw_cpu_r_intr1_offset 100

/* Register r_masked_intr1, scope iop_sw_cpu, type r */
#define reg_iop_sw_cpu_r_masked_intr1___mpu_16___lsb 0
#define reg_iop_sw_cpu_r_masked_intr1___mpu_16___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_16___bit 0
#define reg_iop_sw_cpu_r_masked_intr1___mpu_17___lsb 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_17___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_17___bit 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_18___lsb 2
#define reg_iop_sw_cpu_r_masked_intr1___mpu_18___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_18___bit 2
#define reg_iop_sw_cpu_r_masked_intr1___mpu_19___lsb 3
#define reg_iop_sw_cpu_r_masked_intr1___mpu_19___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_19___bit 3
#define reg_iop_sw_cpu_r_masked_intr1___mpu_20___lsb 4
#define reg_iop_sw_cpu_r_masked_intr1___mpu_20___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_20___bit 4
#define reg_iop_sw_cpu_r_masked_intr1___mpu_21___lsb 5
#define reg_iop_sw_cpu_r_masked_intr1___mpu_21___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_21___bit 5
#define reg_iop_sw_cpu_r_masked_intr1___mpu_22___lsb 6
#define reg_iop_sw_cpu_r_masked_intr1___mpu_22___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_22___bit 6
#define reg_iop_sw_cpu_r_masked_intr1___mpu_23___lsb 7
#define reg_iop_sw_cpu_r_masked_intr1___mpu_23___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_23___bit 7
#define reg_iop_sw_cpu_r_masked_intr1___mpu_24___lsb 8
#define reg_iop_sw_cpu_r_masked_intr1___mpu_24___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_24___bit 8
#define reg_iop_sw_cpu_r_masked_intr1___mpu_25___lsb 9
#define reg_iop_sw_cpu_r_masked_intr1___mpu_25___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_25___bit 9
#define reg_iop_sw_cpu_r_masked_intr1___mpu_26___lsb 10
#define reg_iop_sw_cpu_r_masked_intr1___mpu_26___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_26___bit 10
#define reg_iop_sw_cpu_r_masked_intr1___mpu_27___lsb 11
#define reg_iop_sw_cpu_r_masked_intr1___mpu_27___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_27___bit 11
#define reg_iop_sw_cpu_r_masked_intr1___mpu_28___lsb 12
#define reg_iop_sw_cpu_r_masked_intr1___mpu_28___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_28___bit 12
#define reg_iop_sw_cpu_r_masked_intr1___mpu_29___lsb 13
#define reg_iop_sw_cpu_r_masked_intr1___mpu_29___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_29___bit 13
#define reg_iop_sw_cpu_r_masked_intr1___mpu_30___lsb 14
#define reg_iop_sw_cpu_r_masked_intr1___mpu_30___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_30___bit 14
#define reg_iop_sw_cpu_r_masked_intr1___mpu_31___lsb 15
#define reg_iop_sw_cpu_r_masked_intr1___mpu_31___width 1
#define reg_iop_sw_cpu_r_masked_intr1___mpu_31___bit 15
#define reg_iop_sw_cpu_r_masked_intr1___dmc_in___lsb 16
#define reg_iop_sw_cpu_r_masked_intr1___dmc_in___width 1
#define reg_iop_sw_cpu_r_masked_intr1___dmc_in___bit 16
#define reg_iop_sw_cpu_r_masked_intr1___dmc_out___lsb 17
#define reg_iop_sw_cpu_r_masked_intr1___dmc_out___width 1
#define reg_iop_sw_cpu_r_masked_intr1___dmc_out___bit 17
#define reg_iop_sw_cpu_r_masked_intr1___fifo_in___lsb 18
#define reg_iop_sw_cpu_r_masked_intr1___fifo_in___width 1
#define reg_iop_sw_cpu_r_masked_intr1___fifo_in___bit 18
#define reg_iop_sw_cpu_r_masked_intr1___fifo_out___lsb 19
#define reg_iop_sw_cpu_r_masked_intr1___fifo_out___width 1
#define reg_iop_sw_cpu_r_masked_intr1___fifo_out___bit 19
#define reg_iop_sw_cpu_r_masked_intr1___fifo_in_extra___lsb 20
#define reg_iop_sw_cpu_r_masked_intr1___fifo_in_extra___width 1
#define reg_iop_sw_cpu_r_masked_intr1___fifo_in_extra___bit 20
#define reg_iop_sw_cpu_r_masked_intr1___fifo_out_extra___lsb 21
#define reg_iop_sw_cpu_r_masked_intr1___fifo_out_extra___width 1
#define reg_iop_sw_cpu_r_masked_intr1___fifo_out_extra___bit 21
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp0___lsb 22
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp0___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp0___bit 22
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp1___lsb 23
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp1___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp1___bit 23
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp2___lsb 24
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp2___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp2___bit 24
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp3___lsb 25
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp3___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp3___bit 25
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp4___lsb 26
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp4___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp4___bit 26
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp5___lsb 27
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp5___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp5___bit 27
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp6___lsb 28
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp6___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp6___bit 28
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp7___lsb 29
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp7___width 1
#define reg_iop_sw_cpu_r_masked_intr1___trigger_grp7___bit 29
#define reg_iop_sw_cpu_r_masked_intr1___timer_grp0___lsb 30
#define reg_iop_sw_cpu_r_masked_intr1___timer_grp0___width 1
#define reg_iop_sw_cpu_r_masked_intr1___timer_grp0___bit 30
#define reg_iop_sw_cpu_r_masked_intr1___timer_grp1___lsb 31
#define reg_iop_sw_cpu_r_masked_intr1___timer_grp1___width 1
#define reg_iop_sw_cpu_r_masked_intr1___timer_grp1___bit 31
#define reg_iop_sw_cpu_r_masked_intr1_offset 104


/* Constants */
#define regk_iop_sw_cpu_copy                      0x00000000
#define regk_iop_sw_cpu_no                        0x00000000
#define regk_iop_sw_cpu_rd                        0x00000002
#define regk_iop_sw_cpu_reg_copy                  0x00000001
#define regk_iop_sw_cpu_rw_bus_clr_mask_default   0x00000000
#define regk_iop_sw_cpu_rw_bus_oe_clr_mask_default  0x00000000
#define regk_iop_sw_cpu_rw_bus_oe_set_mask_default  0x00000000
#define regk_iop_sw_cpu_rw_bus_set_mask_default   0x00000000
#define regk_iop_sw_cpu_rw_gio_clr_mask_default   0x00000000
#define regk_iop_sw_cpu_rw_gio_oe_clr_mask_default  0x00000000
#define regk_iop_sw_cpu_rw_gio_oe_set_mask_default  0x00000000
#define regk_iop_sw_cpu_rw_gio_set_mask_default   0x00000000
#define regk_iop_sw_cpu_rw_intr0_mask_default     0x00000000
#define regk_iop_sw_cpu_rw_intr1_mask_default     0x00000000
#define regk_iop_sw_cpu_wr                        0x00000003
#define regk_iop_sw_cpu_yes                       0x00000001
#endif /* __iop_sw_cpu_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                             #ifndef __iop_sw_mpu_defs_h
#define __iop_sw_mpu_defs_h

/*
 * This file is autogenerated from
 *   file:           iop_sw_mpu.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile iop_sw_mpu_defs.h iop_sw_mpu.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope iop_sw_mpu */

/* Register rw_sw_cfg_owner, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int cfg : 2;
  unsigned int dummy1 : 30;
} reg_iop_sw_mpu_rw_sw_cfg_owner;
#define REG_RD_ADDR_iop_sw_mpu_rw_sw_cfg_owner 0
#define REG_WR_ADDR_iop_sw_mpu_rw_sw_cfg_owner 0

/* Register r_spu_trace, scope iop_sw_mpu, type r */
typedef unsigned int reg_iop_sw_mpu_r_spu_trace;
#define REG_RD_ADDR_iop_sw_mpu_r_spu_trace 4

/* Register r_spu_fsm_trace, scope iop_sw_mpu, type r */
typedef unsigned int reg_iop_sw_mpu_r_spu_fsm_trace;
#define REG_RD_ADDR_iop_sw_mpu_r_spu_fsm_trace 8

/* Register rw_mc_ctrl, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int keep_owner : 1;
  unsigned int cmd        : 2;
  unsigned int size       : 3;
  unsigned int wr_spu_mem : 1;
  unsigned int dummy1     : 25;
} reg_iop_sw_mpu_rw_mc_ctrl;
#define REG_RD_ADDR_iop_sw_mpu_rw_mc_ctrl 12
#define REG_WR_ADDR_iop_sw_mpu_rw_mc_ctrl 12

/* Register rw_mc_data, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_mpu_rw_mc_data;
#define REG_RD_ADDR_iop_sw_mpu_rw_mc_data 16
#define REG_WR_ADDR_iop_sw_mpu_rw_mc_data 16

/* Register rw_mc_addr, scope iop_sw_mpu, type rw */
typedef unsigned int reg_iop_sw_mpu_rw_mc_addr;
#define REG_RD_ADDR_iop_sw_mpu_rw_mc_addr 20
#define REG_WR_ADDR_iop_sw_mpu_rw_mc_addr 20

/* Register rs_mc_data, scope iop_sw_mpu, type rs */
typedef unsigned int reg_iop_sw_mpu_rs_mc_data;
#define REG_RD_ADDR_iop_sw_mpu_rs_mc_data 24

/* Register r_mc_data, scope iop_sw_mpu, type r */
typedef unsigned int reg_iop_sw_mpu_r_mc_data;
#define REG_RD_ADDR_iop_sw_mpu_r_mc_data 28

/* Register r_mc_stat, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int busy_cpu     : 1;
  unsigned int busy_mpu     : 1;
  unsigned int busy_spu     : 1;
  unsigned int owned_by_cpu : 1;
  unsigned int owned_by_mpu : 1;
  unsigned int owned_by_spu : 1;
  unsigned int dummy1       : 26;
} reg_iop_sw_mpu_r_mc_stat;
#define REG_RD_ADDR_iop_sw_mpu_r_mc_stat 32

/* Register rw_bus_clr_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int byte0 : 8;
  unsigned int byte1 : 8;
  unsigned int byte2 : 8;
  unsigned int byte3 : 8;
} reg_iop_sw_mpu_rw_bus_clr_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_bus_clr_mask 36
#define REG_WR_ADDR_iop_sw_mpu_rw_bus_clr_mask 36

/* Register rw_bus_set_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int byte0 : 8;
  unsigned int byte1 : 8;
  unsigned int byte2 : 8;
  unsigned int byte3 : 8;
} reg_iop_sw_mpu_rw_bus_set_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_bus_set_mask 40
#define REG_WR_ADDR_iop_sw_mpu_rw_bus_set_mask 40

/* Register rw_bus_oe_clr_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int byte0 : 1;
  unsigned int byte1 : 1;
  unsigned int byte2 : 1;
  unsigned int byte3 : 1;
  unsigned int dummy1 : 28;
} reg_iop_sw_mpu_rw_bus_oe_clr_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_bus_oe_clr_mask 44
#define REG_WR_ADDR_iop_sw_mpu_rw_bus_oe_clr_mask 44

/* Register rw_bus_oe_set_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int byte0 : 1;
  unsigned int byte1 : 1;
  unsigned int byte2 : 1;
  unsigned int byte3 : 1;
  unsigned int dummy1 : 28;
} reg_iop_sw_mpu_rw_bus_oe_set_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_bus_oe_set_mask 48
#define REG_WR_ADDR_iop_sw_mpu_rw_bus_oe_set_mask 48

/* Register r_bus_in, scope iop_sw_mpu, type r */
typedef unsigned int reg_iop_sw_mpu_r_bus_in;
#define REG_RD_ADDR_iop_sw_mpu_r_bus_in 52

/* Register rw_gio_clr_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_mpu_rw_gio_clr_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_gio_clr_mask 56
#define REG_WR_ADDR_iop_sw_mpu_rw_gio_clr_mask 56

/* Register rw_gio_set_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_mpu_rw_gio_set_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_gio_set_mask 60
#define REG_WR_ADDR_iop_sw_mpu_rw_gio_set_mask 60

/* Register rw_gio_oe_clr_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_mpu_rw_gio_oe_clr_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_gio_oe_clr_mask 64
#define REG_WR_ADDR_iop_sw_mpu_rw_gio_oe_clr_mask 64

/* Register rw_gio_oe_set_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_mpu_rw_gio_oe_set_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_gio_oe_set_mask 68
#define REG_WR_ADDR_iop_sw_mpu_rw_gio_oe_set_mask 68

/* Register r_gio_in, scope iop_sw_mpu, type r */
typedef unsigned int reg_iop_sw_mpu_r_gio_in;
#define REG_RD_ADDR_iop_sw_mpu_r_gio_in 72

/* Register rw_cpu_intr, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int intr0  : 1;
  unsigned int intr1  : 1;
  unsigned int intr2  : 1;
  unsigned int intr3  : 1;
  unsigned int intr4  : 1;
  unsigned int intr5  : 1;
  unsigned int intr6  : 1;
  unsigned int intr7  : 1;
  unsigned int intr8  : 1;
  unsigned int intr9  : 1;
  unsigned int intr10 : 1;
  unsigned int intr11 : 1;
  unsigned int intr12 : 1;
  unsigned int intr13 : 1;
  unsigned int intr14 : 1;
  unsigned int intr15 : 1;
  unsigned int intr16 : 1;
  unsigned int intr17 : 1;
  unsigned int intr18 : 1;
  unsigned int intr19 : 1;
  unsigned int intr20 : 1;
  unsigned int intr21 : 1;
  unsigned int intr22 : 1;
  unsigned int intr23 : 1;
  unsigned int intr24 : 1;
  unsigned int intr25 : 1;
  unsigned int intr26 : 1;
  unsigned int intr27 : 1;
  unsigned int intr28 : 1;
  unsigned int intr29 : 1;
  unsigned int intr30 : 1;
  unsigned int intr31 : 1;
} reg_iop_sw_mpu_rw_cpu_intr;
#define REG_RD_ADDR_iop_sw_mpu_rw_cpu_intr 76
#define REG_WR_ADDR_iop_sw_mpu_rw_cpu_intr 76

/* Register r_cpu_intr, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int intr0  : 1;
  unsigned int intr1  : 1;
  unsigned int intr2  : 1;
  unsigned int intr3  : 1;
  unsigned int intr4  : 1;
  unsigned int intr5  : 1;
  unsigned int intr6  : 1;
  unsigned int intr7  : 1;
  unsigned int intr8  : 1;
  unsigned int intr9  : 1;
  unsigned int intr10 : 1;
  unsigned int intr11 : 1;
  unsigned int intr12 : 1;
  unsigned int intr13 : 1;
  unsigned int intr14 : 1;
  unsigned int intr15 : 1;
  unsigned int intr16 : 1;
  unsigned int intr17 : 1;
  unsigned int intr18 : 1;
  unsigned int intr19 : 1;
  unsigned int intr20 : 1;
  unsigned int intr21 : 1;
  unsigned int intr22 : 1;
  unsigned int intr23 : 1;
  unsigned int intr24 : 1;
  unsigned int intr25 : 1;
  unsigned int intr26 : 1;
  unsigned int intr27 : 1;
  unsigned int intr28 : 1;
  unsigned int intr29 : 1;
  unsigned int intr30 : 1;
  unsigned int intr31 : 1;
} reg_iop_sw_mpu_r_cpu_intr;
#define REG_RD_ADDR_iop_sw_mpu_r_cpu_intr 80

/* Register rw_intr_grp0_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr0      : 1;
  unsigned int trigger_grp0   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr1      : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int spu_intr2      : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr3      : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_rw_intr_grp0_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_intr_grp0_mask 84
#define REG_WR_ADDR_iop_sw_mpu_rw_intr_grp0_mask 84

/* Register rw_ack_intr_grp0, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr0 : 1;
  unsigned int dummy1    : 3;
  unsigned int spu_intr1 : 1;
  unsigned int dummy2    : 3;
  unsigned int spu_intr2 : 1;
  unsigned int dummy3    : 3;
  unsigned int spu_intr3 : 1;
  unsigned int dummy4    : 19;
} reg_iop_sw_mpu_rw_ack_intr_grp0;
#define REG_RD_ADDR_iop_sw_mpu_rw_ack_intr_grp0 88
#define REG_WR_ADDR_iop_sw_mpu_rw_ack_intr_grp0 88

/* Register r_intr_grp0, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr0      : 1;
  unsigned int trigger_grp0   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr1      : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int spu_intr2      : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr3      : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_intr_grp0;
#define REG_RD_ADDR_iop_sw_mpu_r_intr_grp0 92

/* Register r_masked_intr_grp0, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr0      : 1;
  unsigned int trigger_grp0   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr1      : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int spu_intr2      : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr3      : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_masked_intr_grp0;
#define REG_RD_ADDR_iop_sw_mpu_r_masked_intr_grp0 96

/* Register rw_intr_grp1_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr4      : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr5      : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int spu_intr6      : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr7      : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_rw_intr_grp1_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_intr_grp1_mask 100
#define REG_WR_ADDR_iop_sw_mpu_rw_intr_grp1_mask 100

/* Register rw_ack_intr_grp1, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr4 : 1;
  unsigned int dummy1    : 3;
  unsigned int spu_intr5 : 1;
  unsigned int dummy2    : 3;
  unsigned int spu_intr6 : 1;
  unsigned int dummy3    : 3;
  unsigned int spu_intr7 : 1;
  unsigned int dummy4    : 19;
} reg_iop_sw_mpu_rw_ack_intr_grp1;
#define REG_RD_ADDR_iop_sw_mpu_rw_ack_intr_grp1 104
#define REG_WR_ADDR_iop_sw_mpu_rw_ack_intr_grp1 104

/* Register r_intr_grp1, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr4      : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr5      : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int spu_intr6      : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr7      : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_intr_grp1;
#define REG_RD_ADDR_iop_sw_mpu_r_intr_grp1 108

/* Register r_masked_intr_grp1, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr4      : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr5      : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int spu_intr6      : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr7      : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_masked_intr_grp1;
#define REG_RD_ADDR_iop_sw_mpu_r_masked_intr_grp1 112

/* Register rw_intr_grp2_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr8      : 1;
  unsigned int trigger_grp0   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr9      : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int spu_intr10     : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr11     : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_rw_intr_grp2_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_intr_grp2_mask 116
#define REG_WR_ADDR_iop_sw_mpu_rw_intr_grp2_mask 116

/* Register rw_ack_intr_grp2, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr8  : 1;
  unsigned int dummy1     : 3;
  unsigned int spu_intr9  : 1;
  unsigned int dummy2     : 3;
  unsigned int spu_intr10 : 1;
  unsigned int dummy3     : 3;
  unsigned int spu_intr11 : 1;
  unsigned int dummy4     : 19;
} reg_iop_sw_mpu_rw_ack_intr_grp2;
#define REG_RD_ADDR_iop_sw_mpu_rw_ack_intr_grp2 120
#define REG_WR_ADDR_iop_sw_mpu_rw_ack_intr_grp2 120

/* Register r_intr_grp2, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr8      : 1;
  unsigned int trigger_grp0   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr9      : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int spu_intr10     : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr11     : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_intr_grp2;
#define REG_RD_ADDR_iop_sw_mpu_r_intr_grp2 124

/* Register r_masked_intr_grp2, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr8      : 1;
  unsigned int trigger_grp0   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr9      : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int spu_intr10     : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr11     : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_masked_intr_grp2;
#define REG_RD_ADDR_iop_sw_mpu_r_masked_intr_grp2 128

/* Register rw_intr_grp3_mask, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr12     : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr13     : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int spu_intr14     : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr15     : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_rw_intr_grp3_mask;
#define REG_RD_ADDR_iop_sw_mpu_rw_intr_grp3_mask 132
#define REG_WR_ADDR_iop_sw_mpu_rw_intr_grp3_mask 132

/* Register rw_ack_intr_grp3, scope iop_sw_mpu, type rw */
typedef struct {
  unsigned int spu_intr12 : 1;
  unsigned int dummy1     : 3;
  unsigned int spu_intr13 : 1;
  unsigned int dummy2     : 3;
  unsigned int spu_intr14 : 1;
  unsigned int dummy3     : 3;
  unsigned int spu_intr15 : 1;
  unsigned int dummy4     : 19;
} reg_iop_sw_mpu_rw_ack_intr_grp3;
#define REG_RD_ADDR_iop_sw_mpu_rw_ack_intr_grp3 136
#define REG_WR_ADDR_iop_sw_mpu_rw_ack_intr_grp3 136

/* Register r_intr_grp3, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr12     : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr13     : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int spu_intr14     : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr15     : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_intr_grp3;
#define REG_RD_ADDR_iop_sw_mpu_r_intr_grp3 140

/* Register r_masked_intr_grp3, scope iop_sw_mpu, type r */
typedef struct {
  unsigned int spu_intr12     : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int dmc_out        : 1;
  unsigned int spu_intr13     : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_in         : 1;
  unsigned int spu_intr14     : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int fifo_out       : 1;
  unsigned int spu_intr15     : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_in        : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_mpu_r_masked_intr_grp3;
#define REG_RD_ADDR_iop_sw_mpu_r_masked_intr_grp3 144


/* Constants */
enum {
  regk_iop_sw_mpu_copy                     = 0x00000000,
  regk_iop_sw_mpu_cpu                      = 0x00000000,
  regk_iop_sw_mpu_mpu                      = 0x00000001,
  regk_iop_sw_mpu_no                       = 0x00000000,
  regk_iop_sw_mpu_nop                      = 0x00000000,
  regk_iop_sw_mpu_rd                       = 0x00000002,
  regk_iop_sw_mpu_reg_copy                 = 0x00000001,
  regk_iop_sw_mpu_rw_bus_clr_mask_default  = 0x00000000,
  regk_iop_sw_mpu_rw_bus_oe_clr_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_bus_oe_set_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_bus_set_mask_default  = 0x00000000,
  regk_iop_sw_mpu_rw_gio_clr_mask_default  = 0x00000000,
  regk_iop_sw_mpu_rw_gio_oe_clr_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_gio_oe_set_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_gio_set_mask_default  = 0x00000000,
  regk_iop_sw_mpu_rw_intr_grp0_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_intr_grp1_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_intr_grp2_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_intr_grp3_mask_default = 0x00000000,
  regk_iop_sw_mpu_rw_sw_cfg_owner_default  = 0x00000000,
  regk_iop_sw_mpu_set                      = 0x00000001,
  regk_iop_sw_mpu_spu                      = 0x00000002,
  regk_iop_sw_mpu_wr                       = 0x00000003,
  regk_iop_sw_mpu_yes                      = 0x00000001
};
#endif /* __iop_sw_mpu_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef __iop_sw_spu_defs_h
#define __iop_sw_spu_defs_h

/*
 * This file is autogenerated from
 *   file:           iop_sw_spu.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile iop_sw_spu_defs.h iop_sw_spu.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope iop_sw_spu */

/* Register r_mpu_trace, scope iop_sw_spu, type r */
typedef unsigned int reg_iop_sw_spu_r_mpu_trace;
#define REG_RD_ADDR_iop_sw_spu_r_mpu_trace 0

/* Register rw_mc_ctrl, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int keep_owner : 1;
  unsigned int cmd        : 2;
  unsigned int size       : 3;
  unsigned int wr_spu_mem : 1;
  unsigned int dummy1     : 25;
} reg_iop_sw_spu_rw_mc_ctrl;
#define REG_RD_ADDR_iop_sw_spu_rw_mc_ctrl 4
#define REG_WR_ADDR_iop_sw_spu_rw_mc_ctrl 4

/* Register rw_mc_data, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_spu_rw_mc_data;
#define REG_RD_ADDR_iop_sw_spu_rw_mc_data 8
#define REG_WR_ADDR_iop_sw_spu_rw_mc_data 8

/* Register rw_mc_addr, scope iop_sw_spu, type rw */
typedef unsigned int reg_iop_sw_spu_rw_mc_addr;
#define REG_RD_ADDR_iop_sw_spu_rw_mc_addr 12
#define REG_WR_ADDR_iop_sw_spu_rw_mc_addr 12

/* Register rs_mc_data, scope iop_sw_spu, type rs */
typedef unsigned int reg_iop_sw_spu_rs_mc_data;
#define REG_RD_ADDR_iop_sw_spu_rs_mc_data 16

/* Register r_mc_data, scope iop_sw_spu, type r */
typedef unsigned int reg_iop_sw_spu_r_mc_data;
#define REG_RD_ADDR_iop_sw_spu_r_mc_data 20

/* Register r_mc_stat, scope iop_sw_spu, type r */
typedef struct {
  unsigned int busy_cpu     : 1;
  unsigned int busy_mpu     : 1;
  unsigned int busy_spu     : 1;
  unsigned int owned_by_cpu : 1;
  unsigned int owned_by_mpu : 1;
  unsigned int owned_by_spu : 1;
  unsigned int dummy1       : 26;
} reg_iop_sw_spu_r_mc_stat;
#define REG_RD_ADDR_iop_sw_spu_r_mc_stat 24

/* Register rw_bus_clr_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte0 : 8;
  unsigned int byte1 : 8;
  unsigned int byte2 : 8;
  unsigned int byte3 : 8;
} reg_iop_sw_spu_rw_bus_clr_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_clr_mask 28
#define REG_WR_ADDR_iop_sw_spu_rw_bus_clr_mask 28

/* Register rw_bus_set_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte0 : 8;
  unsigned int byte1 : 8;
  unsigned int byte2 : 8;
  unsigned int byte3 : 8;
} reg_iop_sw_spu_rw_bus_set_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_set_mask 32
#define REG_WR_ADDR_iop_sw_spu_rw_bus_set_mask 32

/* Register rw_bus_oe_clr_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte0 : 1;
  unsigned int byte1 : 1;
  unsigned int byte2 : 1;
  unsigned int byte3 : 1;
  unsigned int dummy1 : 28;
} reg_iop_sw_spu_rw_bus_oe_clr_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_oe_clr_mask 36
#define REG_WR_ADDR_iop_sw_spu_rw_bus_oe_clr_mask 36

/* Register rw_bus_oe_set_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte0 : 1;
  unsigned int byte1 : 1;
  unsigned int byte2 : 1;
  unsigned int byte3 : 1;
  unsigned int dummy1 : 28;
} reg_iop_sw_spu_rw_bus_oe_set_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_oe_set_mask 40
#define REG_WR_ADDR_iop_sw_spu_rw_bus_oe_set_mask 40

/* Register r_bus_in, scope iop_sw_spu, type r */
typedef unsigned int reg_iop_sw_spu_r_bus_in;
#define REG_RD_ADDR_iop_sw_spu_r_bus_in 44

/* Register rw_gio_clr_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_spu_rw_gio_clr_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_clr_mask 48
#define REG_WR_ADDR_iop_sw_spu_rw_gio_clr_mask 48

/* Register rw_gio_set_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_spu_rw_gio_set_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_set_mask 52
#define REG_WR_ADDR_iop_sw_spu_rw_gio_set_mask 52

/* Register rw_gio_oe_clr_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_spu_rw_gio_oe_clr_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_oe_clr_mask 56
#define REG_WR_ADDR_iop_sw_spu_rw_gio_oe_clr_mask 56

/* Register rw_gio_oe_set_mask, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 32;
} reg_iop_sw_spu_rw_gio_oe_set_mask;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_oe_set_mask 60
#define REG_WR_ADDR_iop_sw_spu_rw_gio_oe_set_mask 60

/* Register r_gio_in, scope iop_sw_spu, type r */
typedef unsigned int reg_iop_sw_spu_r_gio_in;
#define REG_RD_ADDR_iop_sw_spu_r_gio_in 64

/* Register rw_bus_clr_mask_lo, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte0 : 8;
  unsigned int byte1 : 8;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_bus_clr_mask_lo;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_clr_mask_lo 68
#define REG_WR_ADDR_iop_sw_spu_rw_bus_clr_mask_lo 68

/* Register rw_bus_clr_mask_hi, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte2 : 8;
  unsigned int byte3 : 8;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_bus_clr_mask_hi;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_clr_mask_hi 72
#define REG_WR_ADDR_iop_sw_spu_rw_bus_clr_mask_hi 72

/* Register rw_bus_set_mask_lo, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte0 : 8;
  unsigned int byte1 : 8;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_bus_set_mask_lo;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_set_mask_lo 76
#define REG_WR_ADDR_iop_sw_spu_rw_bus_set_mask_lo 76

/* Register rw_bus_set_mask_hi, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int byte2 : 8;
  unsigned int byte3 : 8;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_bus_set_mask_hi;
#define REG_RD_ADDR_iop_sw_spu_rw_bus_set_mask_hi 80
#define REG_WR_ADDR_iop_sw_spu_rw_bus_set_mask_hi 80

/* Register rw_gio_clr_mask_lo, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_clr_mask_lo;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_clr_mask_lo 84
#define REG_WR_ADDR_iop_sw_spu_rw_gio_clr_mask_lo 84

/* Register rw_gio_clr_mask_hi, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_clr_mask_hi;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_clr_mask_hi 88
#define REG_WR_ADDR_iop_sw_spu_rw_gio_clr_mask_hi 88

/* Register rw_gio_set_mask_lo, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_set_mask_lo;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_set_mask_lo 92
#define REG_WR_ADDR_iop_sw_spu_rw_gio_set_mask_lo 92

/* Register rw_gio_set_mask_hi, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_set_mask_hi;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_set_mask_hi 96
#define REG_WR_ADDR_iop_sw_spu_rw_gio_set_mask_hi 96

/* Register rw_gio_oe_clr_mask_lo, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_oe_clr_mask_lo;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_oe_clr_mask_lo 100
#define REG_WR_ADDR_iop_sw_spu_rw_gio_oe_clr_mask_lo 100

/* Register rw_gio_oe_clr_mask_hi, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_oe_clr_mask_hi;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_oe_clr_mask_hi 104
#define REG_WR_ADDR_iop_sw_spu_rw_gio_oe_clr_mask_hi 104

/* Register rw_gio_oe_set_mask_lo, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_oe_set_mask_lo;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_oe_set_mask_lo 108
#define REG_WR_ADDR_iop_sw_spu_rw_gio_oe_set_mask_lo 108

/* Register rw_gio_oe_set_mask_hi, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int val : 16;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_gio_oe_set_mask_hi;
#define REG_RD_ADDR_iop_sw_spu_rw_gio_oe_set_mask_hi 112
#define REG_WR_ADDR_iop_sw_spu_rw_gio_oe_set_mask_hi 112

/* Register rw_cpu_intr, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int intr0  : 1;
  unsigned int intr1  : 1;
  unsigned int intr2  : 1;
  unsigned int intr3  : 1;
  unsigned int intr4  : 1;
  unsigned int intr5  : 1;
  unsigned int intr6  : 1;
  unsigned int intr7  : 1;
  unsigned int intr8  : 1;
  unsigned int intr9  : 1;
  unsigned int intr10 : 1;
  unsigned int intr11 : 1;
  unsigned int intr12 : 1;
  unsigned int intr13 : 1;
  unsigned int intr14 : 1;
  unsigned int intr15 : 1;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_cpu_intr;
#define REG_RD_ADDR_iop_sw_spu_rw_cpu_intr 116
#define REG_WR_ADDR_iop_sw_spu_rw_cpu_intr 116

/* Register r_cpu_intr, scope iop_sw_spu, type r */
typedef struct {
  unsigned int intr0  : 1;
  unsigned int intr1  : 1;
  unsigned int intr2  : 1;
  unsigned int intr3  : 1;
  unsigned int intr4  : 1;
  unsigned int intr5  : 1;
  unsigned int intr6  : 1;
  unsigned int intr7  : 1;
  unsigned int intr8  : 1;
  unsigned int intr9  : 1;
  unsigned int intr10 : 1;
  unsigned int intr11 : 1;
  unsigned int intr12 : 1;
  unsigned int intr13 : 1;
  unsigned int intr14 : 1;
  unsigned int intr15 : 1;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_r_cpu_intr;
#define REG_RD_ADDR_iop_sw_spu_r_cpu_intr 120

/* Register r_hw_intr, scope iop_sw_spu, type r */
typedef struct {
  unsigned int trigger_grp0   : 1;
  unsigned int trigger_grp1   : 1;
  unsigned int trigger_grp2   : 1;
  unsigned int trigger_grp3   : 1;
  unsigned int trigger_grp4   : 1;
  unsigned int trigger_grp5   : 1;
  unsigned int trigger_grp6   : 1;
  unsigned int trigger_grp7   : 1;
  unsigned int timer_grp0     : 1;
  unsigned int timer_grp1     : 1;
  unsigned int fifo_out       : 1;
  unsigned int fifo_out_extra : 1;
  unsigned int fifo_in        : 1;
  unsigned int fifo_in_extra  : 1;
  unsigned int dmc_out        : 1;
  unsigned int dmc_in         : 1;
  unsigned int dummy1         : 16;
} reg_iop_sw_spu_r_hw_intr;
#define REG_RD_ADDR_iop_sw_spu_r_hw_intr 124

/* Register rw_mpu_intr, scope iop_sw_spu, type rw */
typedef struct {
  unsigned int intr0  : 1;
  unsigned int intr1  : 1;
  unsigned int intr2  : 1;
  unsigned int intr3  : 1;
  unsigned int intr4  : 1;
  unsigned int intr5  : 1;
  unsigned int intr6  : 1;
  unsigned int intr7  : 1;
  unsigned int intr8  : 1;
  unsigned int intr9  : 1;
  unsigned int intr10 : 1;
  unsigned int intr11 : 1;
  unsigned int intr12 : 1;
  unsigned int intr13 : 1;
  unsigned int intr14 : 1;
  unsigned int intr15 : 1;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_rw_mpu_intr;
#define REG_RD_ADDR_iop_sw_spu_rw_mpu_intr 128
#define REG_WR_ADDR_iop_sw_spu_rw_mpu_intr 128

/* Register r_mpu_intr, scope iop_sw_spu, type r */
typedef struct {
  unsigned int intr0  : 1;
  unsigned int intr1  : 1;
  unsigned int intr2  : 1;
  unsigned int intr3  : 1;
  unsigned int intr4  : 1;
  unsigned int intr5  : 1;
  unsigned int intr6  : 1;
  unsigned int intr7  : 1;
  unsigned int intr8  : 1;
  unsigned int intr9  : 1;
  unsigned int intr10 : 1;
  unsigned int intr11 : 1;
  unsigned int intr12 : 1;
  unsigned int intr13 : 1;
  unsigned int intr14 : 1;
  unsigned int intr15 : 1;
  unsigned int dummy1 : 16;
} reg_iop_sw_spu_r_mpu_intr;
#define REG_RD_ADDR_iop_sw_spu_r_mpu_intr 132


/* Constants */
enum {
  regk_iop_sw_spu_copy                     = 0x00000000,
  regk_iop_sw_spu_no                       = 0x00000000,
  regk_iop_sw_spu_nop                      = 0x00000000,
  regk_iop_sw_spu_rd                       = 0x00000002,
  regk_iop_sw_spu_reg_copy                 = 0x00000001,
  regk_iop_sw_spu_rw_bus_clr_mask_default  = 0x00000000,
  regk_iop_sw_spu_rw_bus_oe_clr_mask_default = 0x00000000,
  regk_iop_sw_spu_rw_bus_oe_set_mask_default = 0x00000000,
  regk_iop_sw_spu_rw_bus_set_mask_default  = 0x00000000,
  regk_iop_sw_spu_rw_gio_clr_mask_default  = 0x00000000,
  regk_iop_sw_spu_rw_gio_oe_clr_mask_default = 0x00000000,
  regk_iop_sw_spu_rw_gio_oe_set_mask_default = 0x00000000,
  regk_iop_sw_spu_rw_gio_set_mask_default  = 0x00000000,
  regk_iop_sw_spu_set                      = 0x00000001,
  regk_iop_sw_spu_wr                       = 0x00000003,
  regk_iop_sw_spu_yes                      = 0x00000001
};
#endif /* __iop_sw_spu_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef __iop_version_defs_h
#define __iop_version_defs_h

/*
 * This file is autogenerated from
 *   file:           iop_version.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile iop_version_defs.h iop_version.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope iop_version */

/* Register r_version, scope iop_version, type r */
typedef struct {
  unsigned int nr : 8;
  unsigned int dummy1 : 24;
} reg_iop_version_r_version;
#define REG_RD_ADDR_iop_version_r_version 0


/* Constants */
enum {
  regk_iop_version_v2_0                    = 0x00000002
};
#endif /* __iop_version_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /* Autogenerated Changes here will be lost!
 * generated by ./gen_sw.pl Wed Feb 14 09:27:48 2007 iop_sw.cfg 
 */
#define regi_iop_version (regi_iop + 0)
#define regi_iop_fifo_in_extra (regi_iop + 64)
#define regi_iop_fifo_out_extra (regi_iop + 128)
#define regi_iop_trigger_grp0 (regi_iop + 192)
#define regi_iop_trigger_grp1 (regi_iop + 256)
#define regi_iop_trigger_grp2 (regi_iop + 320)
#define regi_iop_trigger_grp3 (regi_iop + 384)
#define regi_iop_trigger_grp4 (regi_iop + 448)
#define regi_iop_trigger_grp5 (regi_iop + 512)
#define regi_iop_trigger_grp6 (regi_iop + 576)
#define regi_iop_trigger_grp7 (regi_iop + 640)
#define regi_iop_crc_par (regi_iop + 768)
#define regi_iop_dmc_in (regi_iop + 896)
#define regi_iop_dmc_out (regi_iop + 1024)
#define regi_iop_fifo_in (regi_iop + 1152)
#define regi_iop_fifo_out (regi_iop + 1280)
#define regi_iop_scrc_in (regi_iop + 1408)
#define regi_iop_scrc_out (regi_iop + 1536)
#define regi_iop_timer_grp0 (regi_iop + 1664)
#define regi_iop_timer_grp1 (regi_iop + 1792)
#define regi_iop_sap_in (regi_iop + 2048)
#define regi_iop_sap_out (regi_iop + 2304)
#define regi_iop_spu (regi_iop + 2560)
#define regi_iop_sw_cfg (regi_iop + 2816)
#define regi_iop_sw_cpu (regi_iop + 3072)
#define regi_iop_sw_mpu (regi_iop + 3328)
#define regi_iop_sw_spu (regi_iop + 3584)
#define regi_iop_mpu (regi_iop + 4096)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef __gio_defs_h
#define __gio_defs_h

/*
 * This file is autogenerated from
 *   file:           gio.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile gio_defs.h gio.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope gio */

/* Register r_pa_din, scope gio, type r */
typedef struct {
  unsigned int data : 32;
} reg_gio_r_pa_din;
#define REG_RD_ADDR_gio_r_pa_din 0

/* Register rw_pa_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 32;
} reg_gio_rw_pa_dout;
#define REG_RD_ADDR_gio_rw_pa_dout 4
#define REG_WR_ADDR_gio_rw_pa_dout 4

/* Register rw_pa_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 32;
} reg_gio_rw_pa_oe;
#define REG_RD_ADDR_gio_rw_pa_oe 8
#define REG_WR_ADDR_gio_rw_pa_oe 8

/* Register rw_pa_byte0_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte0_dout;
#define REG_RD_ADDR_gio_rw_pa_byte0_dout 12
#define REG_WR_ADDR_gio_rw_pa_byte0_dout 12

/* Register rw_pa_byte0_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte0_oe;
#define REG_RD_ADDR_gio_rw_pa_byte0_oe 16
#define REG_WR_ADDR_gio_rw_pa_byte0_oe 16

/* Register rw_pa_byte1_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte1_dout;
#define REG_RD_ADDR_gio_rw_pa_byte1_dout 20
#define REG_WR_ADDR_gio_rw_pa_byte1_dout 20

/* Register rw_pa_byte1_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte1_oe;
#define REG_RD_ADDR_gio_rw_pa_byte1_oe 24
#define REG_WR_ADDR_gio_rw_pa_byte1_oe 24

/* Register rw_pa_byte2_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte2_dout;
#define REG_RD_ADDR_gio_rw_pa_byte2_dout 28
#define REG_WR_ADDR_gio_rw_pa_byte2_dout 28

/* Register rw_pa_byte2_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte2_oe;
#define REG_RD_ADDR_gio_rw_pa_byte2_oe 32
#define REG_WR_ADDR_gio_rw_pa_byte2_oe 32

/* Register rw_pa_byte3_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte3_dout;
#define REG_RD_ADDR_gio_rw_pa_byte3_dout 36
#define REG_WR_ADDR_gio_rw_pa_byte3_dout 36

/* Register rw_pa_byte3_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pa_byte3_oe;
#define REG_RD_ADDR_gio_rw_pa_byte3_oe 40
#define REG_WR_ADDR_gio_rw_pa_byte3_oe 40

/* Register r_pb_din, scope gio, type r */
typedef struct {
  unsigned int data : 32;
} reg_gio_r_pb_din;
#define REG_RD_ADDR_gio_r_pb_din 44

/* Register rw_pb_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 32;
} reg_gio_rw_pb_dout;
#define REG_RD_ADDR_gio_rw_pb_dout 48
#define REG_WR_ADDR_gio_rw_pb_dout 48

/* Register rw_pb_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 32;
} reg_gio_rw_pb_oe;
#define REG_RD_ADDR_gio_rw_pb_oe 52
#define REG_WR_ADDR_gio_rw_pb_oe 52

/* Register rw_pb_byte0_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte0_dout;
#define REG_RD_ADDR_gio_rw_pb_byte0_dout 56
#define REG_WR_ADDR_gio_rw_pb_byte0_dout 56

/* Register rw_pb_byte0_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte0_oe;
#define REG_RD_ADDR_gio_rw_pb_byte0_oe 60
#define REG_WR_ADDR_gio_rw_pb_byte0_oe 60

/* Register rw_pb_byte1_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte1_dout;
#define REG_RD_ADDR_gio_rw_pb_byte1_dout 64
#define REG_WR_ADDR_gio_rw_pb_byte1_dout 64

/* Register rw_pb_byte1_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte1_oe;
#define REG_RD_ADDR_gio_rw_pb_byte1_oe 68
#define REG_WR_ADDR_gio_rw_pb_byte1_oe 68

/* Register rw_pb_byte2_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte2_dout;
#define REG_RD_ADDR_gio_rw_pb_byte2_dout 72
#define REG_WR_ADDR_gio_rw_pb_byte2_dout 72

/* Register rw_pb_byte2_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte2_oe;
#define REG_RD_ADDR_gio_rw_pb_byte2_oe 76
#define REG_WR_ADDR_gio_rw_pb_byte2_oe 76

/* Register rw_pb_byte3_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte3_dout;
#define REG_RD_ADDR_gio_rw_pb_byte3_dout 80
#define REG_WR_ADDR_gio_rw_pb_byte3_dout 80

/* Register rw_pb_byte3_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pb_byte3_oe;
#define REG_RD_ADDR_gio_rw_pb_byte3_oe 84
#define REG_WR_ADDR_gio_rw_pb_byte3_oe 84

/* Register r_pc_din, scope gio, type r */
typedef struct {
  unsigned int data : 16;
  unsigned int dummy1 : 16;
} reg_gio_r_pc_din;
#define REG_RD_ADDR_gio_r_pc_din 88

/* Register rw_pc_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 16;
  unsigned int dummy1 : 16;
} reg_gio_rw_pc_dout;
#define REG_RD_ADDR_gio_rw_pc_dout 92
#define REG_WR_ADDR_gio_rw_pc_dout 92

/* Register rw_pc_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 16;
  unsigned int dummy1 : 16;
} reg_gio_rw_pc_oe;
#define REG_RD_ADDR_gio_rw_pc_oe 96
#define REG_WR_ADDR_gio_rw_pc_oe 96

/* Register rw_pc_byte0_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pc_byte0_dout;
#define REG_RD_ADDR_gio_rw_pc_byte0_dout 100
#define REG_WR_ADDR_gio_rw_pc_byte0_dout 100

/* Register rw_pc_byte0_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pc_byte0_oe;
#define REG_RD_ADDR_gio_rw_pc_byte0_oe 104
#define REG_WR_ADDR_gio_rw_pc_byte0_oe 104

/* Register rw_pc_byte1_dout, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pc_byte1_dout;
#define REG_RD_ADDR_gio_rw_pc_byte1_dout 108
#define REG_WR_ADDR_gio_rw_pc_byte1_dout 108

/* Register rw_pc_byte1_oe, scope gio, type rw */
typedef struct {
  unsigned int oe : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pc_byte1_oe;
#define REG_RD_ADDR_gio_rw_pc_byte1_oe 112
#define REG_WR_ADDR_gio_rw_pc_byte1_oe 112

/* Register r_pd_din, scope gio, type r */
typedef struct {
  unsigned int data : 32;
} reg_gio_r_pd_din;
#define REG_RD_ADDR_gio_r_pd_din 116

/* Register rw_intr_cfg, scope gio, type rw */
typedef struct {
  unsigned int intr0 : 3;
  unsigned int intr1 : 3;
  unsigned int intr2 : 3;
  unsigned int intr3 : 3;
  unsigned int intr4 : 3;
  unsigned int intr5 : 3;
  unsigned int intr6 : 3;
  unsigned int intr7 : 3;
  unsigned int dummy1 : 8;
} reg_gio_rw_intr_cfg;
#define REG_RD_ADDR_gio_rw_intr_cfg 120
#define REG_WR_ADDR_gio_rw_intr_cfg 120

/* Register rw_intr_pins, scope gio, type rw */
typedef struct {
  unsigned int intr0 : 4;
  unsigned int intr1 : 4;
  unsigned int intr2 : 4;
  unsigned int intr3 : 4;
  unsigned int intr4 : 4;
  unsigned int intr5 : 4;
  unsigned int intr6 : 4;
  unsigned int intr7 : 4;
} reg_gio_rw_intr_pins;
#define REG_RD_ADDR_gio_rw_intr_pins 124
#define REG_WR_ADDR_gio_rw_intr_pins 124

/* Register rw_intr_mask, scope gio, type rw */
typedef struct {
  unsigned int intr0     : 1;
  unsigned int intr1     : 1;
  unsigned int intr2     : 1;
  unsigned int intr3     : 1;
  unsigned int intr4     : 1;
  unsigned int intr5     : 1;
  unsigned int intr6     : 1;
  unsigned int intr7     : 1;
  unsigned int i2c0_done : 1;
  unsigned int i2c1_done : 1;
  unsigned int dummy1    : 22;
} reg_gio_rw_intr_mask;
#define REG_RD_ADDR_gio_rw_intr_mask 128
#define REG_WR_ADDR_gio_rw_intr_mask 128

/* Register rw_ack_intr, scope gio, type rw */
typedef struct {
  unsigned int intr0     : 1;
  unsigned int intr1     : 1;
  unsigned int intr2     : 1;
  unsigned int intr3     : 1;
  unsigned int intr4     : 1;
  unsigned int intr5     : 1;
  unsigned int intr6     : 1;
  unsigned int intr7     : 1;
  unsigned int i2c0_done : 1;
  unsigned int i2c1_done : 1;
  unsigned int dummy1    : 22;
} reg_gio_rw_ack_intr;
#define REG_RD_ADDR_gio_rw_ack_intr 132
#define REG_WR_ADDR_gio_rw_ack_intr 132

/* Register r_intr, scope gio, type r */
typedef struct {
  unsigned int intr0     : 1;
  unsigned int intr1     : 1;
  unsigned int intr2     : 1;
  unsigned int intr3     : 1;
  unsigned int intr4     : 1;
  unsigned int intr5     : 1;
  unsigned int intr6     : 1;
  unsigned int intr7     : 1;
  unsigned int i2c0_done : 1;
  unsigned int i2c1_done : 1;
  unsigned int dummy1    : 22;
} reg_gio_r_intr;
#define REG_RD_ADDR_gio_r_intr 136

/* Register r_masked_intr, scope gio, type r */
typedef struct {
  unsigned int intr0     : 1;
  unsigned int intr1     : 1;
  unsigned int intr2     : 1;
  unsigned int intr3     : 1;
  unsigned int intr4     : 1;
  unsigned int intr5     : 1;
  unsigned int intr6     : 1;
  unsigned int intr7     : 1;
  unsigned int i2c0_done : 1;
  unsigned int i2c1_done : 1;
  unsigned int dummy1    : 22;
} reg_gio_r_masked_intr;
#define REG_RD_ADDR_gio_r_masked_intr 140

/* Register rw_i2c0_start, scope gio, type rw */
typedef struct {
  unsigned int run : 1;
  unsigned int dummy1 : 31;
} reg_gio_rw_i2c0_start;
#define REG_RD_ADDR_gio_rw_i2c0_start 144
#define REG_WR_ADDR_gio_rw_i2c0_start 144

/* Register rw_i2c0_cfg, scope gio, type rw */
typedef struct {
  unsigned int en        : 1;
  unsigned int bit_order : 1;
  unsigned int scl_io    : 1;
  unsigned int scl_inv   : 1;
  unsigned int sda_io    : 1;
  unsigned int sda_idle  : 1;
  unsigned int dummy1    : 26;
} reg_gio_rw_i2c0_cfg;
#define REG_RD_ADDR_gio_rw_i2c0_cfg 148
#define REG_WR_ADDR_gio_rw_i2c0_cfg 148

/* Register rw_i2c0_ctrl, scope gio, type rw */
typedef struct {
  unsigned int trf_bits    : 6;
  unsigned int switch_dir  : 6;
  unsigned int extra_start : 3;
  unsigned int early_end   : 1;
  unsigned int start_stop  : 1;
  unsigned int ack_dir0    : 1;
  unsigned int ack_dir1    : 1;
  unsigned int ack_dir2    : 1;
  unsigned int ack_dir3    : 1;
  unsigned int ack_dir4    : 1;
  unsigned int ack_dir5    : 1;
  unsigned int ack_bit     : 1;
  unsigned int start_bit   : 1;
  unsigned int freq        : 2;
  unsigned int dummy1      : 5;
} reg_gio_rw_i2c0_ctrl;
#define REG_RD_ADDR_gio_rw_i2c0_ctrl 152
#define REG_WR_ADDR_gio_rw_i2c0_ctrl 152

/* Register rw_i2c0_data, scope gio, type rw */
typedef struct {
  unsigned int data0 : 8;
  unsigned int data1 : 8;
  unsigned int data2 : 8;
  unsigned int data3 : 8;
} reg_gio_rw_i2c0_data;
#define REG_RD_ADDR_gio_rw_i2c0_data 156
#define REG_WR_ADDR_gio_rw_i2c0_data 156

/* Register rw_i2c0_data2, scope gio, type rw */
typedef struct {
  unsigned int data4     : 8;
  unsigned int data5     : 8;
  unsigned int start_val : 6;
  unsigned int ack_val   : 6;
  unsigned int dummy1    : 4;
} reg_gio_rw_i2c0_data2;
#define REG_RD_ADDR_gio_rw_i2c0_data2 160
#define REG_WR_ADDR_gio_rw_i2c0_data2 160

/* Register rw_i2c1_start, scope gio, type rw */
typedef struct {
  unsigned int run : 1;
  unsigned int dummy1 : 31;
} reg_gio_rw_i2c1_start;
#define REG_RD_ADDR_gio_rw_i2c1_start 164
#define REG_WR_ADDR_gio_rw_i2c1_start 164

/* Register rw_i2c1_cfg, scope gio, type rw */
typedef struct {
  unsigned int en        : 1;
  unsigned int bit_order : 1;
  unsigned int scl_io    : 1;
  unsigned int scl_inv   : 1;
  unsigned int sda0_io   : 1;
  unsigned int sda0_idle : 1;
  unsigned int sda1_io   : 1;
  unsigned int sda1_idle : 1;
  unsigned int sda2_io   : 1;
  unsigned int sda2_idle : 1;
  unsigned int sda3_io   : 1;
  unsigned int sda3_idle : 1;
  unsigned int sda_sel   : 2;
  unsigned int sen_idle  : 1;
  unsigned int sen_inv   : 1;
  unsigned int sen_sel   : 2;
  unsigned int dummy1    : 14;
} reg_gio_rw_i2c1_cfg;
#define REG_RD_ADDR_gio_rw_i2c1_cfg 168
#define REG_WR_ADDR_gio_rw_i2c1_cfg 168

/* Register rw_i2c1_ctrl, scope gio, type rw */
typedef struct {
  unsigned int trf_bits    : 6;
  unsigned int switch_dir  : 6;
  unsigned int extra_start : 3;
  unsigned int early_end   : 1;
  unsigned int start_stop  : 1;
  unsigned int ack_dir0    : 1;
  unsigned int ack_dir1    : 1;
  unsigned int ack_dir2    : 1;
  unsigned int ack_dir3    : 1;
  unsigned int ack_dir4    : 1;
  unsigned int ack_dir5    : 1;
  unsigned int ack_bit     : 1;
  unsigned int start_bit   : 1;
  unsigned int freq        : 2;
  unsigned int dummy1      : 5;
} reg_gio_rw_i2c1_ctrl;
#define REG_RD_ADDR_gio_rw_i2c1_ctrl 172
#define REG_WR_ADDR_gio_rw_i2c1_ctrl 172

/* Register rw_i2c1_data, scope gio, type rw */
typedef struct {
  unsigned int data0 : 8;
  unsigned int data1 : 8;
  unsigned int data2 : 8;
  unsigned int data3 : 8;
} reg_gio_rw_i2c1_data;
#define REG_RD_ADDR_gio_rw_i2c1_data 176
#define REG_WR_ADDR_gio_rw_i2c1_data 176

/* Register rw_i2c1_data2, scope gio, type rw */
typedef struct {
  unsigned int data4     : 8;
  unsigned int data5     : 8;
  unsigned int start_val : 6;
  unsigned int ack_val   : 6;
  unsigned int dummy1    : 4;
} reg_gio_rw_i2c1_data2;
#define REG_RD_ADDR_gio_rw_i2c1_data2 180
#define REG_WR_ADDR_gio_rw_i2c1_data2 180

/* Register r_ppwm_stat, scope gio, type r */
typedef struct {
  unsigned int freq : 2;
  unsigned int dummy1 : 30;
} reg_gio_r_ppwm_stat;
#define REG_RD_ADDR_gio_r_ppwm_stat 184

/* Register rw_ppwm_data, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_ppwm_data;
#define REG_RD_ADDR_gio_rw_ppwm_data 188
#define REG_WR_ADDR_gio_rw_ppwm_data 188

/* Register rw_pwm0_ctrl, scope gio, type rw */
typedef struct {
  unsigned int mode         : 2;
  unsigned int ccd_override : 1;
  unsigned int ccd_val      : 1;
  unsigned int dummy1       : 28;
} reg_gio_rw_pwm0_ctrl;
#define REG_RD_ADDR_gio_rw_pwm0_ctrl 192
#define REG_WR_ADDR_gio_rw_pwm0_ctrl 192

/* Register rw_pwm0_var, scope gio, type rw */
typedef struct {
  unsigned int lo : 13;
  unsigned int hi : 13;
  unsigned int dummy1 : 6;
} reg_gio_rw_pwm0_var;
#define REG_RD_ADDR_gio_rw_pwm0_var 196
#define REG_WR_ADDR_gio_rw_pwm0_var 196

/* Register rw_pwm0_data, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pwm0_data;
#define REG_RD_ADDR_gio_rw_pwm0_data 200
#define REG_WR_ADDR_gio_rw_pwm0_data 200

/* Register rw_pwm1_ctrl, scope gio, type rw */
typedef struct {
  unsigned int mode         : 2;
  unsigned int ccd_override : 1;
  unsigned int ccd_val      : 1;
  unsigned int dummy1       : 28;
} reg_gio_rw_pwm1_ctrl;
#define REG_RD_ADDR_gio_rw_pwm1_ctrl 204
#define REG_WR_ADDR_gio_rw_pwm1_ctrl 204

/* Register rw_pwm1_var, scope gio, type rw */
typedef struct {
  unsigned int lo : 13;
  unsigned int hi : 13;
  unsigned int dummy1 : 6;
} reg_gio_rw_pwm1_var;
#define REG_RD_ADDR_gio_rw_pwm1_var 208
#define REG_WR_ADDR_gio_rw_pwm1_var 208

/* Register rw_pwm1_data, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pwm1_data;
#define REG_RD_ADDR_gio_rw_pwm1_data 212
#define REG_WR_ADDR_gio_rw_pwm1_data 212

/* Register rw_pwm2_ctrl, scope gio, type rw */
typedef struct {
  unsigned int mode         : 2;
  unsigned int ccd_override : 1;
  unsigned int ccd_val      : 1;
  unsigned int dummy1       : 28;
} reg_gio_rw_pwm2_ctrl;
#define REG_RD_ADDR_gio_rw_pwm2_ctrl 216
#define REG_WR_ADDR_gio_rw_pwm2_ctrl 216

/* Register rw_pwm2_var, scope gio, type rw */
typedef struct {
  unsigned int lo : 13;
  unsigned int hi : 13;
  unsigned int dummy1 : 6;
} reg_gio_rw_pwm2_var;
#define REG_RD_ADDR_gio_rw_pwm2_var 220
#define REG_WR_ADDR_gio_rw_pwm2_var 220

/* Register rw_pwm2_data, scope gio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_gio_rw_pwm2_data;
#define REG_RD_ADDR_gio_rw_pwm2_data 224
#define REG_WR_ADDR_gio_rw_pwm2_data 224

/* Register rw_pwm_in_cfg, scope gio, type rw */
typedef struct {
  unsigned int pin : 3;
  unsigned int dummy1 : 29;
} reg_gio_rw_pwm_in_cfg;
#define REG_RD_ADDR_gio_rw_pwm_in_cfg 228
#define REG_WR_ADDR_gio_rw_pwm_in_cfg 228

/* Register r_pwm_in_lo, scope gio, type r */
typedef struct {
  unsigned int data : 32;
} reg_gio_r_pwm_in_lo;
#define REG_RD_ADDR_gio_r_pwm_in_lo 232

/* Register r_pwm_in_hi, scope gio, type r */
typedef struct {
  unsigned int data : 32;
} reg_gio_r_pwm_in_hi;
#define REG_RD_ADDR_gio_r_pwm_in_hi 236

/* Register r_pwm_in_cnt, scope gio, type r */
typedef struct {
  unsigned int data : 32;
} reg_gio_r_pwm_in_cnt;
#define REG_RD_ADDR_gio_r_pwm_in_cnt 240


/* Constants */
enum {
  regk_gio_anyedge                         = 0x00000007,
  regk_gio_f100k                           = 0x00000000,
  regk_gio_f1562                           = 0x00000000,
  regk_gio_f195                            = 0x00000003,
  regk_gio_f1m                             = 0x00000002,
  regk_gio_f390                            = 0x00000002,
  regk_gio_f400k                           = 0x00000001,
  regk_gio_f5m                             = 0x00000003,
  regk_gio_f781                            = 0x00000001,
  regk_gio_hi                              = 0x00000001,
  regk_gio_in                              = 0x00000000,
  regk_gio_intr_pa0                        = 0x00000000,
  regk_gio_intr_pa1                        = 0x00000000,
  regk_gio_intr_pa10                       = 0x00000001,
  regk_gio_intr_pa11                       = 0x00000001,
  regk_gio_intr_pa12                       = 0x00000001,
  regk_gio_intr_pa13                       = 0x00000001,
  regk_gio_intr_pa14                       = 0x00000001,
  regk_gio_intr_pa15                       = 0x00000001,
  regk_gio_intr_pa16                       = 0x00000002,
  regk_gio_intr_pa17                       = 0x00000002,
  regk_gio_intr_pa18                       = 0x00000002,
  regk_gio_intr_pa19                       = 0x00000002,
  regk_gio_intr_pa2                        = 0x00000000,
  regk_gio_intr_pa20                       = 0x00000002,
  regk_gio_intr_pa21                       = 0x00000002,
  regk_gio_intr_pa22                       = 0x00000002,
  regk_gio_intr_pa23                       = 0x00000002,
  regk_gio_intr_pa24                       = 0x00000003,
  regk_gio_intr_pa25                       = 0x00000003,
  regk_gio_intr_pa26                       = 0x00000003,
  regk_gio_intr_pa27                       = 0x00000003,
  regk_gio_intr_pa28                       = 0x00000003,
  regk_gio_intr_pa29                       = 0x00000003,
  regk_gio_intr_pa3                        = 0x00000000,
  regk_gio_intr_pa30                       = 0x00000003,
  regk_gio_intr_pa31                       = 0x00000003,
  regk_gio_intr_pa4                        = 0x00000000,
  regk_gio_intr_pa5                        = 0x00000000,
  regk_gio_intr_pa6                        = 0x00000000,
  regk_gio_intr_pa7                        = 0x00000000,
  regk_gio_intr_pa8                        = 0x00000001,
  regk_gio_intr_pa9                        = 0x00000001,
  regk_gio_intr_pb0                        = 0x00000004,
  regk_gio_intr_pb1                        = 0x00000004,
  regk_gio_intr_pb10                       = 0x00000005,
  regk_gio_intr_pb11                       = 0x00000005,
  regk_gio_intr_pb12                       = 0x00000005,
  regk_gio_intr_pb13                       = 0x00000005,
  regk_gio_intr_pb14                       = 0x00000005,
  regk_gio_intr_pb15                       = 0x00000005,
  regk_gio_intr_pb16                       = 0x00000006,
  regk_gio_intr_pb17                       = 0x00000006,
  regk_gio_intr_pb18                       = 0x00000006,
  regk_gio_intr_pb19                       = 0x00000006,
  regk_gio_intr_pb2                        = 0x00000004,
  regk_gio_intr_pb20                       = 0x00000006,
  regk_gio_intr_pb21                       = 0x00000006,
  regk_gio_intr_pb22                       = 0x00000006,
  regk_gio_intr_pb23                       = 0x00000006,
  regk_gio_intr_pb24                       = 0x00000007,
  regk_gio_intr_pb25                       = 0x00000007,
  regk_gio_intr_pb26                       = 0x00000007,
  regk_gio_intr_pb27                       = 0x00000007,
  regk_gio_intr_pb28                       = 0x00000007,
  regk_gio_intr_pb29                       = 0x00000007,
  regk_gio_intr_pb3                        = 0x00000004,
  regk_gio_intr_pb30                       = 0x00000007,
  regk_gio_intr_pb31                       = 0x00000007,
  regk_gio_intr_pb4                        = 0x00000004,
  regk_gio_intr_pb5                        = 0x00000004,
  regk_gio_intr_pb6                        = 0x00000004,
  regk_gio_intr_pb7                        = 0x00000004,
  regk_gio_intr_pb8                        = 0x00000005,
  regk_gio_intr_pb9                        = 0x00000005,
  regk_gio_intr_pc0                        = 0x00000008,
  regk_gio_intr_pc1                        = 0x00000008,
  regk_gio_intr_pc10                       = 0x00000009,
  regk_gio_intr_pc11                       = 0x00000009,
  regk_gio_intr_pc12                       = 0x00000009,
  regk_gio_intr_pc13                       = 0x00000009,
  regk_gio_intr_pc14                       = 0x00000009,
  regk_gio_intr_pc15                       = 0x00000009,
  regk_gio_intr_pc2                        = 0x00000008,
  regk_gio_intr_pc3                        = 0x00000008,
  regk_gio_intr_pc4                        = 0x00000008,
  regk_gio_intr_pc5                        = 0x00000008,
  regk_gio_intr_pc6                        = 0x00000008,
  regk_gio_intr_pc7                        = 0x00000008,
  regk_gio_intr_pc8                        = 0x00000009,
  regk_gio_intr_pc9                        = 0x00000009,
  regk_gio_intr_pd0                        = 0x0000000c,
  regk_gio_intr_pd1                        = 0x0000000c,
  regk_gio_intr_pd10                       = 0x0000000d,
  regk_gio_intr_pd11                       = 0x0000000d,
  regk_gio_intr_pd12                       = 0x0000000d,
  regk_gio_intr_pd13                       = 0x0000000d,
  regk_gio_intr_pd14                       = 0x0000000d,
  regk_gio_intr_pd15                       = 0x0000000d,
  regk_gio_intr_pd16                       = 0x0000000e,
  regk_gio_intr_pd17                       = 0x0000000e,
  regk_gio_intr_pd18                       = 0x0000000e,
  regk_gio_intr_pd19                       = 0x0000000e,
  regk_gio_intr_pd2                        = 0x0000000c,
  regk_gio_intr_pd20                       = 0x0000000e,
  regk_gio_intr_pd21                       = 0x0000000e,
  regk_gio_intr_pd22                       = 0x0000000e,
  regk_gio_intr_pd23                       = 0x0000000e,
  regk_gio_intr_pd24                       = 0x0000000f,
  regk_gio_intr_pd25                       = 0x0000000f,
  regk_gio_intr_pd26                       = 0x0000000f,
  regk_gio_intr_pd27                       = 0x0000000f,
  regk_gio_intr_pd28                       = 0x0000000f,
  regk_gio_intr_pd29                       = 0x0000000f,
  regk_gio_intr_pd3                        = 0x0000000c,
  regk_gio_intr_pd30                       = 0x0000000f,
  regk_gio_intr_pd31                       = 0x0000000f,
  regk_gio_intr_pd4                        = 0x0000000c,
  regk_gio_intr_pd5                        = 0x0000000c,
  regk_gio_intr_pd6                        = 0x0000000c,
  regk_gio_intr_pd7                        = 0x0000000c,
  regk_gio_intr_pd8                        = 0x0000000d,
  regk_gio_intr_pd9                        = 0x0000000d,
  regk_gio_lo                              = 0x00000002,
  regk_gio_lsb                             = 0x00000000,
  regk_gio_msb                             = 0x00000001,
  regk_gio_negedge                         = 0x00000006,
  regk_gio_no                              = 0x00000000,
  regk_gio_no_switch                       = 0x0000003f,
  regk_gio_none                            = 0x00000007,
  regk_gio_off                             = 0x00000000,
  regk_gio_opendrain                       = 0x00000000,
  regk_gio_out                             = 0x00000001,
  regk_gio_posedge                         = 0x00000005,
  regk_gio_pwm_hfp                         = 0x00000002,
  regk_gio_pwm_pa0                         = 0x00000001,
  regk_gio_pwm_pa19                        = 0x00000004,
  regk_gio_pwm_pa6                         = 0x00000002,
  regk_gio_pwm_pa7                         = 0x00000003,
  regk_gio_pwm_pb26                        = 0x00000005,
  regk_gio_pwm_pd23                        = 0x00000006,
  regk_gio_pwm_pd31                        = 0x00000007,
  regk_gio_pwm_std                         = 0x00000001,
  regk_gio_pwm_var                         = 0x00000003,
  regk_gio_rw_i2c0_cfg_default             = 0x00000020,
  regk_gio_rw_i2c0_ctrl_default            = 0x00010000,
  regk_gio_rw_i2c0_start_default           = 0x00000000,
  regk_gio_rw_i2c1_cfg_default             = 0x00000aa0,
  regk_gio_rw_i2c1_ctrl_default            = 0x00010000,
  regk_gio_rw_i2c1_start_default           = 0x00000000,
  regk_gio_rw_intr_cfg_default             = 0x00000000,
  regk_gio_rw_intr_mask_default            = 0x00000000,
  regk_gio_rw_pa_oe_default                = 0x00000000,
  regk_gio_rw_pb_oe_default                = 0x00000000,
  regk_gio_rw_pc_oe_default                = 0x00000000,
  regk_gio_rw_ppwm_data_default            = 0x00000000,
  regk_gio_rw_pwm0_ctrl_default            = 0x00000000,
  regk_gio_rw_pwm1_ctrl_default            = 0x00000000,
  regk_gio_rw_pwm2_ctrl_default            = 0x00000000,
  regk_gio_rw_pwm_in_cfg_default           = 0x00000000,
  regk_gio_sda0                            = 0x00000000,
  regk_gio_sda1                            = 0x00000001,
  regk_gio_sda2                            = 0x00000002,
  regk_gio_sda3                            = 0x00000003,
  regk_gio_sen                             = 0x00000000,
  regk_gio_set                             = 0x00000003,
  regk_gio_yes                             = 0x00000001
};
#endif /* __gio_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef __l2cache_defs_h
#define __l2cache_defs_h

/*
 * This file is autogenerated from
 *   file:           l2cache.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile l2cache_defs.h l2cache.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope l2cache */

/* Register rw_cfg, scope l2cache, type rw */
typedef struct {
  unsigned int en : 1;
  unsigned int dummy1 : 31;
} reg_l2cache_rw_cfg;
#define REG_RD_ADDR_l2cache_rw_cfg 0
#define REG_WR_ADDR_l2cache_rw_cfg 0

/* Register rw_ctrl, scope l2cache, type rw */
typedef struct {
  unsigned int dummy1 : 7;
  unsigned int cbase : 9;
  unsigned int dummy2 : 4;
  unsigned int csize : 10;
  unsigned int dummy3 : 2;
} reg_l2cache_rw_ctrl;
#define REG_RD_ADDR_l2cache_rw_ctrl 4
#define REG_WR_ADDR_l2cache_rw_ctrl 4

/* Register rw_idxop, scope l2cache, type rw */
typedef struct {
  unsigned int idx : 10;
  unsigned int dummy1 : 14;
  unsigned int way : 3;
  unsigned int dummy2 : 2;
  unsigned int cmd : 3;
} reg_l2cache_rw_idxop;
#define REG_RD_ADDR_l2cache_rw_idxop 8
#define REG_WR_ADDR_l2cache_rw_idxop 8

/* Register rw_addrop_addr, scope l2cache, type rw */
typedef struct {
  unsigned int addr : 32;
} reg_l2cache_rw_addrop_addr;
#define REG_RD_ADDR_l2cache_rw_addrop_addr 12
#define REG_WR_ADDR_l2cache_rw_addrop_addr 12

/* Register rw_addrop_ctrl, scope l2cache, type rw */
typedef struct {
  unsigned int size : 16;
  unsigned int dummy1 : 13;
  unsigned int cmd  : 3;
} reg_l2cache_rw_addrop_ctrl;
#define REG_RD_ADDR_l2cache_rw_addrop_ctrl 16
#define REG_WR_ADDR_l2cache_rw_addrop_ctrl 16


/* Constants */
enum {
  regk_l2cache_flush                       = 0x00000001,
  regk_l2cache_no                          = 0x00000000,
  regk_l2cache_rw_addrop_addr_default      = 0x00000000,
  regk_l2cache_rw_addrop_ctrl_default      = 0x00000000,
  regk_l2cache_rw_cfg_default              = 0x00000000,
  regk_l2cache_rw_ctrl_default             = 0x00000000,
  regk_l2cache_rw_idxop_default            = 0x00000000,
  regk_l2cache_yes                         = 0x00000001
};
#endif /* __l2cache_defs_h */
                                                                                                                   #ifndef __pinmux_defs_asm_h
#define __pinmux_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           pinmux.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile pinmux_defs_asm.h pinmux.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register rw_hwprot, scope pinmux, type rw */
#define reg_pinmux_rw_hwprot___eth___lsb 0
#define reg_pinmux_rw_hwprot___eth___width 1
#define reg_pinmux_rw_hwprot___eth___bit 0
#define reg_pinmux_rw_hwprot___eth_mdio___lsb 1
#define reg_pinmux_rw_hwprot___eth_mdio___width 1
#define reg_pinmux_rw_hwprot___eth_mdio___bit 1
#define reg_pinmux_rw_hwprot___geth___lsb 2
#define reg_pinmux_rw_hwprot___geth___width 1
#define reg_pinmux_rw_hwprot___geth___bit 2
#define reg_pinmux_rw_hwprot___tg___lsb 3
#define reg_pinmux_rw_hwprot___tg___width 1
#define reg_pinmux_rw_hwprot___tg___bit 3
#define reg_pinmux_rw_hwprot___tg_clk___lsb 4
#define reg_pinmux_rw_hwprot___tg_clk___width 1
#define reg_pinmux_rw_hwprot___tg_clk___bit 4
#define reg_pinmux_rw_hwprot___vout___lsb 5
#define reg_pinmux_rw_hwprot___vout___width 1
#define reg_pinmux_rw_hwprot___vout___bit 5
#define reg_pinmux_rw_hwprot___vout_sync___lsb 6
#define reg_pinmux_rw_hwprot___vout_sync___width 1
#define reg_pinmux_rw_hwprot___vout_sync___bit 6
#define reg_pinmux_rw_hwprot___ser1___lsb 7
#define reg_pinmux_rw_hwprot___ser1___width 1
#define reg_pinmux_rw_hwprot___ser1___bit 7
#define reg_pinmux_rw_hwprot___ser2___lsb 8
#define reg_pinmux_rw_hwprot___ser2___width 1
#define reg_pinmux_rw_hwprot___ser2___bit 8
#define reg_pinmux_rw_hwprot___ser3___lsb 9
#define reg_pinmux_rw_hwprot___ser3___width 1
#define reg_pinmux_rw_hwprot___ser3___bit 9
#define reg_pinmux_rw_hwprot___ser4___lsb 10
#define reg_pinmux_rw_hwprot___ser4___width 1
#define reg_pinmux_rw_hwprot___ser4___bit 10
#define reg_pinmux_rw_hwprot___sser___lsb 11
#define reg_pinmux_rw_hwprot___sser___width 1
#define reg_pinmux_rw_hwprot___sser___bit 11
#define reg_pinmux_rw_hwprot___pwm0___lsb 12
#define reg_pinmux_rw_hwprot___pwm0___width 1
#define reg_pinmux_rw_hwprot___pwm0___bit 12
#define reg_pinmux_rw_hwprot___pwm1___lsb 13
#define reg_pinmux_rw_hwprot___pwm1___width 1
#define reg_pinmux_rw_hwprot___pwm1___bit 13
#define reg_pinmux_rw_hwprot___pwm2___lsb 14
#define reg_pinmux_rw_hwprot___pwm2___width 1
#define reg_pinmux_rw_hwprot___pwm2___bit 14
#define reg_pinmux_rw_hwprot___timer0___lsb 15
#define reg_pinmux_rw_hwprot___timer0___width 1
#define reg_pinmux_rw_hwprot___timer0___bit 15
#define reg_pinmux_rw_hwprot___timer1___lsb 16
#define reg_pinmux_rw_hwprot___timer1___width 1
#define reg_pinmux_rw_hwprot___timer1___bit 16
#define reg_pinmux_rw_hwprot___pio___lsb 17
#define reg_pinmux_rw_hwprot___pio___width 1
#define reg_pinmux_rw_hwprot___pio___bit 17
#define reg_pinmux_rw_hwprot___i2c0___lsb 18
#define reg_pinmux_rw_hwprot___i2c0___width 1
#define reg_pinmux_rw_hwprot___i2c0___bit 18
#define reg_pinmux_rw_hwprot___i2c1___lsb 19
#define reg_pinmux_rw_hwprot___i2c1___width 1
#define reg_pinmux_rw_hwprot___i2c1___bit 19
#define reg_pinmux_rw_hwprot___i2c1_sda1___lsb 20
#define reg_pinmux_rw_hwprot___i2c1_sda1___width 1
#define reg_pinmux_rw_hwprot___i2c1_sda1___bit 20
#define reg_pinmux_rw_hwprot___i2c1_sda2___lsb 21
#define reg_pinmux_rw_hwprot___i2c1_sda2___width 1
#define reg_pinmux_rw_hwprot___i2c1_sda2___bit 21
#define reg_pinmux_rw_hwprot___i2c1_sda3___lsb 22
#define reg_pinmux_rw_hwprot___i2c1_sda3___width 1
#define reg_pinmux_rw_hwprot___i2c1_sda3___bit 22
#define reg_pinmux_rw_hwprot___i2c1_sen___lsb 23
#define reg_pinmux_rw_hwprot___i2c1_sen___width 1
#define reg_pinmux_rw_hwprot___i2c1_sen___bit 23
#define reg_pinmux_rw_hwprot_offset 0

/* Register rw_gio_pa, scope pinmux, type rw */
#define reg_pinmux_rw_gio_pa___pa0___lsb 0
#define reg_pinmux_rw_gio_pa___pa0___width 1
#define reg_pinmux_rw_gio_pa___pa0___bit 0
#define reg_pinmux_rw_gio_pa___pa1___lsb 1
#define reg_pinmux_rw_gio_pa___pa1___width 1
#define reg_pinmux_rw_gio_pa___pa1___bit 1
#define reg_pinmux_rw_gio_pa___pa2___lsb 2
#define reg_pinmux_rw_gio_pa___pa2___width 1
#define reg_pinmux_rw_gio_pa___pa2___bit 2
#define reg_pinmux_rw_gio_pa___pa3___lsb 3
#define reg_pinmux_rw_gio_pa___pa3___width 1
#define reg_pinmux_rw_gio_pa___pa3___bit 3
#define reg_pinmux_rw_gio_pa___pa4___lsb 4
#define reg_pinmux_rw_gio_pa___pa4___width 1
#define reg_pinmux_rw_gio_pa___pa4___bit 4
#define reg_pinmux_rw_gio_pa___pa5___lsb 5
#define reg_pinmux_rw_gio_pa___pa5___width 1
#define reg_pinmux_rw_gio_pa___pa5___bit 5
#define reg_pinmux_rw_gio_pa___pa6___lsb 6
#define reg_pinmux_rw_gio_pa___pa6___width 1
#define reg_pinmux_rw_gio_pa___pa6___bit 6
#define reg_pinmux_rw_gio_pa___pa7___lsb 7
#define reg_pinmux_rw_gio_pa___pa7___width 1
#define reg_pinmux_rw_gio_pa___pa7___bit 7
#define reg_pinmux_rw_gio_pa___pa8___lsb 8
#define reg_pinmux_rw_gio_pa___pa8___width 1
#define reg_pinmux_rw_gio_pa___pa8___bit 8
#define reg_pinmux_rw_gio_pa___pa9___lsb 9
#define reg_pinmux_rw_gio_pa___pa9___width 1
#define reg_pinmux_rw_gio_pa___pa9___bit 9
#define reg_pinmux_rw_gio_pa___pa10___lsb 10
#define reg_pinmux_rw_gio_pa___pa10___width 1
#define reg_pinmux_rw_gio_pa___pa10___bit 10
#define reg_pinmux_rw_gio_pa___pa11___lsb 11
#define reg_pinmux_rw_gio_pa___pa11___width 1
#define reg_pinmux_rw_gio_pa___pa11___bit 11
#define reg_pinmux_rw_gio_pa___pa12___lsb 12
#define reg_pinmux_rw_gio_pa___pa12___width 1
#define reg_pinmux_rw_gio_pa___pa12___bit 12
#define reg_pinmux_rw_gio_pa___pa13___lsb 13
#define reg_pinmux_rw_gio_pa___pa13___width 1
#define reg_pinmux_rw_gio_pa___pa13___bit 13
#define reg_pinmux_rw_gio_pa___pa14___lsb 14
#define reg_pinmux_rw_gio_pa___pa14___width 1
#define reg_pinmux_rw_gio_pa___pa14___bit 14
#define reg_pinmux_rw_gio_pa___pa15___lsb 15
#define reg_pinmux_rw_gio_pa___pa15___width 1
#define reg_pinmux_rw_gio_pa___pa15___bit 15
#define reg_pinmux_rw_gio_pa___pa16___lsb 16
#define reg_pinmux_rw_gio_pa___pa16___width 1
#define reg_pinmux_rw_gio_pa___pa16___bit 16
#define reg_pinmux_rw_gio_pa___pa17___lsb 17
#define reg_pinmux_rw_gio_pa___pa17___width 1
#define reg_pinmux_rw_gio_pa___pa17___bit 17
#define reg_pinmux_rw_gio_pa___pa18___lsb 18
#define reg_pinmux_rw_gio_pa___pa18___width 1
#define reg_pinmux_rw_gio_pa___pa18___bit 18
#define reg_pinmux_rw_gio_pa___pa19___lsb 19
#define reg_pinmux_rw_gio_pa___pa19___width 1
#define reg_pinmux_rw_gio_pa___pa19___bit 19
#define reg_pinmux_rw_gio_pa___pa20___lsb 20
#define reg_pinmux_rw_gio_pa___pa20___width 1
#define reg_pinmux_rw_gio_pa___pa20___bit 20
#define reg_pinmux_rw_gio_pa___pa21___lsb 21
#define reg_pinmux_rw_gio_pa___pa21___width 1
#define reg_pinmux_rw_gio_pa___pa21___bit 21
#define reg_pinmux_rw_gio_pa___pa22___lsb 22
#define reg_pinmux_rw_gio_pa___pa22___width 1
#define reg_pinmux_rw_gio_pa___pa22___bit 22
#define reg_pinmux_rw_gio_pa___pa23___lsb 23
#define reg_pinmux_rw_gio_pa___pa23___width 1
#define reg_pinmux_rw_gio_pa___pa23___bit 23
#define reg_pinmux_rw_gio_pa___pa24___lsb 24
#define reg_pinmux_rw_gio_pa___pa24___width 1
#define reg_pinmux_rw_gio_pa___pa24___bit 24
#define reg_pinmux_rw_gio_pa___pa25___lsb 25
#define reg_pinmux_rw_gio_pa___pa25___width 1
#define reg_pinmux_rw_gio_pa___pa25___bit 25
#define reg_pinmux_rw_gio_pa___pa26___lsb 26
#define reg_pinmux_rw_gio_pa___pa26___width 1
#define reg_pinmux_rw_gio_pa___pa26___bit 26
#define reg_pinmux_rw_gio_pa___pa27___lsb 27
#define reg_pinmux_rw_gio_pa___pa27___width 1
#define reg_pinmux_rw_gio_pa___pa27___bit 27
#define reg_pinmux_rw_gio_pa___pa28___lsb 28
#define reg_pinmux_rw_gio_pa___pa28___width 1
#define reg_pinmux_rw_gio_pa___pa28___bit 28
#define reg_pinmux_rw_gio_pa___pa29___lsb 29
#define reg_pinmux_rw_gio_pa___pa29___width 1
#define reg_pinmux_rw_gio_pa___pa29___bit 29
#define reg_pinmux_rw_gio_pa___pa30___lsb 30
#define reg_pinmux_rw_gio_pa___pa30___width 1
#define reg_pinmux_rw_gio_pa___pa30___bit 30
#define reg_pinmux_rw_gio_pa___pa31___lsb 31
#define reg_pinmux_rw_gio_pa___pa31___width 1
#define reg_pinmux_rw_gio_pa___pa31___bit 31
#define reg_pinmux_rw_gio_pa_offset 4

/* Register rw_gio_pb, scope pinmux, type rw */
#define reg_pinmux_rw_gio_pb___pb0___lsb 0
#define reg_pinmux_rw_gio_pb___pb0___width 1
#define reg_pinmux_rw_gio_pb___pb0___bit 0
#define reg_pinmux_rw_gio_pb___pb1___lsb 1
#define reg_pinmux_rw_gio_pb___pb1___width 1
#define reg_pinmux_rw_gio_pb___pb1___bit 1
#define reg_pinmux_rw_gio_pb___pb2___lsb 2
#define reg_pinmux_rw_gio_pb___pb2___width 1
#define reg_pinmux_rw_gio_pb___pb2___bit 2
#define reg_pinmux_rw_gio_pb___pb3___lsb 3
#define reg_pinmux_rw_gio_pb___pb3___width 1
#define reg_pinmux_rw_gio_pb___pb3___bit 3
#define reg_pinmux_rw_gio_pb___pb4___lsb 4
#define reg_pinmux_rw_gio_pb___pb4___width 1
#define reg_pinmux_rw_gio_pb___pb4___bit 4
#define reg_pinmux_rw_gio_pb___pb5___lsb 5
#define reg_pinmux_rw_gio_pb___pb5___width 1
#define reg_pinmux_rw_gio_pb___pb5___bit 5
#define reg_pinmux_rw_gio_pb___pb6___lsb 6
#define reg_pinmux_rw_gio_pb___pb6___width 1
#define reg_pinmux_rw_gio_pb___pb6___bit 6
#define reg_pinmux_rw_gio_pb___pb7___lsb 7
#define reg_pinmux_rw_gio_pb___pb7___width 1
#define reg_pinmux_rw_gio_pb___pb7___bit 7
#define reg_pinmux_rw_gio_pb___pb8___lsb 8
#define reg_pinmux_rw_gio_pb___pb8___width 1
#define reg_pinmux_rw_gio_pb___pb8___bit 8
#define reg_pinmux_rw_gio_pb___pb9___lsb 9
#define reg_pinmux_rw_gio_pb___pb9___width 1
#define reg_pinmux_rw_gio_pb___pb9___bit 9
#define reg_pinmux_rw_gio_pb___pb10___lsb 10
#define reg_pinmux_rw_gio_pb___pb10___width 1
#define reg_pinmux_rw_gio_pb___pb10___bit 10
#define reg_pinmux_rw_gio_pb___pb11___lsb 11
#define reg_pinmux_rw_gio_pb___pb11___width 1
#define reg_pinmux_rw_gio_pb___pb11___bit 11
#define reg_pinmux_rw_gio_pb___pb12___lsb 12
#define reg_pinmux_rw_gio_pb___pb12___width 1
#define reg_pinmux_rw_gio_pb___pb12___bit 12
#define reg_pinmux_rw_gio_pb___pb13___lsb 13
#define reg_pinmux_rw_gio_pb___pb13___width 1
#define reg_pinmux_rw_gio_pb___pb13___bit 13
#define reg_pinmux_rw_gio_pb___pb14___lsb 14
#define reg_pinmux_rw_gio_pb___pb14___width 1
#define reg_pinmux_rw_gio_pb___pb14___bit 14
#define reg_pinmux_rw_gio_pb___pb15___lsb 15
#define reg_pinmux_rw_gio_pb___pb15___width 1
#define reg_pinmux_rw_gio_pb___pb15___bit 15
#define reg_pinmux_rw_gio_pb___pb16___lsb 16
#define reg_pinmux_rw_gio_pb___pb16___width 1
#define reg_pinmux_rw_gio_pb___pb16___bit 16
#define reg_pinmux_rw_gio_pb___pb17___lsb 17
#define reg_pinmux_rw_gio_pb___pb17___width 1
#define reg_pinmux_rw_gio_pb___pb17___bit 17
#define reg_pinmux_rw_gio_pb___pb18___lsb 18
#define reg_pinmux_rw_gio_pb___pb18___width 1
#define reg_pinmux_rw_gio_pb___pb18___bit 18
#define reg_pinmux_rw_gio_pb___pb19___lsb 19
#define reg_pinmux_rw_gio_pb___pb19___width 1
#define reg_pinmux_rw_gio_pb___pb19___bit 19
#define reg_pinmux_rw_gio_pb___pb20___lsb 20
#define reg_pinmux_rw_gio_pb___pb20___width 1
#define reg_pinmux_rw_gio_pb___pb20___bit 20
#define reg_pinmux_rw_gio_pb___pb21___lsb 21
#define reg_pinmux_rw_gio_pb___pb21___width 1
#define reg_pinmux_rw_gio_pb___pb21___bit 21
#define reg_pinmux_rw_gio_pb___pb22___lsb 22
#define reg_pinmux_rw_gio_pb___pb22___width 1
#define reg_pinmux_rw_gio_pb___pb22___bit 22
#define reg_pinmux_rw_gio_pb___pb23___lsb 23
#define reg_pinmux_rw_gio_pb___pb23___width 1
#define reg_pinmux_rw_gio_pb___pb23___bit 23
#define reg_pinmux_rw_gio_pb___pb24___lsb 24
#define reg_pinmux_rw_gio_pb___pb24___width 1
#define reg_pinmux_rw_gio_pb___pb24___bit 24
#define reg_pinmux_rw_gio_pb___pb25___lsb 25
#define reg_pinmux_rw_gio_pb___pb25___width 1
#define reg_pinmux_rw_gio_pb___pb25___bit 25
#define reg_pinmux_rw_gio_pb___pb26___lsb 26
#define reg_pinmux_rw_gio_pb___pb26___width 1
#define reg_pinmux_rw_gio_pb___pb26___bit 26
#define reg_pinmux_rw_gio_pb___pb27___lsb 27
#define reg_pinmux_rw_gio_pb___pb27___width 1
#define reg_pinmux_rw_gio_pb___pb27___bit 27
#define reg_pinmux_rw_gio_pb___pb28___lsb 28
#define reg_pinmux_rw_gio_pb___pb28___width 1
#define reg_pinmux_rw_gio_pb___pb28___bit 28
#define reg_pinmux_rw_gio_pb___pb29___lsb 29
#define reg_pinmux_rw_gio_pb___pb29___width 1
#define reg_pinmux_rw_gio_pb___pb29___bit 29
#define reg_pinmux_rw_gio_pb___pb30___lsb 30
#define reg_pinmux_rw_gio_pb___pb30___width 1
#define reg_pinmux_rw_gio_pb___pb30___bit 30
#define reg_pinmux_rw_gio_pb___pb31___lsb 31
#define reg_pinmux_rw_gio_pb___pb31___width 1
#define reg_pinmux_rw_gio_pb___pb31___bit 31
#define reg_pinmux_rw_gio_pb_offset 8

/* Register rw_gio_pc, scope pinmux, type rw */
#define reg_pinmux_rw_gio_pc___pc0___lsb 0
#define reg_pinmux_rw_gio_pc___pc0___width 1
#define reg_pinmux_rw_gio_pc___pc0___bit 0
#define reg_pinmux_rw_gio_pc___pc1___lsb 1
#define reg_pinmux_rw_gio_pc___pc1___width 1
#define reg_pinmux_rw_gio_pc___pc1___bit 1
#define reg_pinmux_rw_gio_pc___pc2___lsb 2
#define reg_pinmux_rw_gio_pc___pc2___width 1
#define reg_pinmux_rw_gio_pc___pc2___bit 2
#define reg_pinmux_rw_gio_pc___pc3___lsb 3
#define reg_pinmux_rw_gio_pc___pc3___width 1
#define reg_pinmux_rw_gio_pc___pc3___bit 3
#define reg_pinmux_rw_gio_pc___pc4___lsb 4
#define reg_pinmux_rw_gio_pc___pc4___width 1
#define reg_pinmux_rw_gio_pc___pc4___bit 4
#define reg_pinmux_rw_gio_pc___pc5___lsb 5
#define reg_pinmux_rw_gio_pc___pc5___width 1
#define reg_pinmux_rw_gio_pc___pc5___bit 5
#define reg_pinmux_rw_gio_pc___pc6___lsb 6
#define reg_pinmux_rw_gio_pc___pc6___width 1
#define reg_pinmux_rw_gio_pc___pc6___bit 6
#define reg_pinmux_rw_gio_pc___pc7___lsb 7
#define reg_pinmux_rw_gio_pc___pc7___width 1
#define reg_pinmux_rw_gio_pc___pc7___bit 7
#define reg_pinmux_rw_gio_pc___pc8___lsb 8
#define reg_pinmux_rw_gio_pc___pc8___width 1
#define reg_pinmux_rw_gio_pc___pc8___bit 8
#define reg_pinmux_rw_gio_pc___pc9___lsb 9
#define reg_pinmux_rw_gio_pc___pc9___width 1
#define reg_pinmux_rw_gio_pc___pc9___bit 9
#define reg_pinmux_rw_gio_pc___pc10___lsb 10
#define reg_pinmux_rw_gio_pc___pc10___width 1
#define reg_pinmux_rw_gio_pc___pc10___bit 10
#define reg_pinmux_rw_gio_pc___pc11___lsb 11
#define reg_pinmux_rw_gio_pc___pc11___width 1
#define reg_pinmux_rw_gio_pc___pc11___bit 11
#define reg_pinmux_rw_gio_pc___pc12___lsb 12
#define reg_pinmux_rw_gio_pc___pc12___width 1
#define reg_pinmux_rw_gio_pc___pc12___bit 12
#define reg_pinmux_rw_gio_pc___pc13___lsb 13
#define reg_pinmux_rw_gio_pc___pc13___width 1
#define reg_pinmux_rw_gio_pc___pc13___bit 13
#define reg_pinmux_rw_gio_pc___pc14___lsb 14
#define reg_pinmux_rw_gio_pc___pc14___width 1
#define reg_pinmux_rw_gio_pc___pc14___bit 14
#define reg_pinmux_rw_gio_pc___pc15___lsb 15
#define reg_pinmux_rw_gio_pc___pc15___width 1
#define reg_pinmux_rw_gio_pc___pc15___bit 15
#define reg_pinmux_rw_gio_pc_offset 12

/* Register rw_iop_pa, scope pinmux, type rw */
#define reg_pinmux_rw_iop_pa___pa0___lsb 0
#define reg_pinmux_rw_iop_pa___pa0___width 1
#define reg_pinmux_rw_iop_pa___pa0___bit 0
#define reg_pinmux_rw_iop_pa___pa1___lsb 1
#define reg_pinmux_rw_iop_pa___pa1___width 1
#define reg_pinmux_rw_iop_pa___pa1___bit 1
#define reg_pinmux_rw_iop_pa___pa2___lsb 2
#define reg_pinmux_rw_iop_pa___pa2___width 1
#define reg_pinmux_rw_iop_pa___pa2___bit 2
#define reg_pinmux_rw_iop_pa___pa3___lsb 3
#define reg_pinmux_rw_iop_pa___pa3___width 1
#define reg_pinmux_rw_iop_pa___pa3___bit 3
#define reg_pinmux_rw_iop_pa___pa4___lsb 4
#define reg_pinmux_rw_iop_pa___pa4___width 1
#define reg_pinmux_rw_iop_pa___pa4___bit 4
#define reg_pinmux_rw_iop_pa___pa5___lsb 5
#define reg_pinmux_rw_iop_pa___pa5___width 1
#define reg_pinmux_rw_iop_pa___pa5___bit 5
#define reg_pinmux_rw_iop_pa___pa6___lsb 6
#define reg_pinmux_rw_iop_pa___pa6___width 1
#define reg_pinmux_rw_iop_pa___pa6___bit 6
#define reg_pinmux_rw_iop_pa___pa7___lsb 7
#define reg_pinmux_rw_iop_pa___pa7___width 1
#define reg_pinmux_rw_iop_pa___pa7___bit 7
#define reg_pinmux_rw_iop_pa___pa8___lsb 8
#define reg_pinmux_rw_iop_pa___pa8___width 1
#define reg_pinmux_rw_iop_pa___pa8___bit 8
#define reg_pinmux_rw_iop_pa___pa9___lsb 9
#define reg_pinmux_rw_iop_pa___pa9___width 1
#define reg_pinmux_rw_iop_pa___pa9___bit 9
#define reg_pinmux_rw_iop_pa___pa10___lsb 10
#define reg_pinmux_rw_iop_pa___pa10___width 1
#define reg_pinmux_rw_iop_pa___pa10___bit 10
#define reg_pinmux_rw_iop_pa___pa11___lsb 11
#define reg_pinmux_rw_iop_pa___pa11___width 1
#define reg_pinmux_rw_iop_pa___pa11___bit 11
#define reg_pinmux_rw_iop_pa___pa12___lsb 12
#define reg_pinmux_rw_iop_pa___pa12___width 1
#define reg_pinmux_rw_iop_pa___pa12___bit 12
#define reg_pinmux_rw_iop_pa___pa13___lsb 13
#define reg_pinmux_rw_iop_pa___pa13___width 1
#define reg_pinmux_rw_iop_pa___pa13___bit 13
#define reg_pinmux_rw_iop_pa___pa14___lsb 14
#define reg_pinmux_rw_iop_pa___pa14___width 1
#define reg_pinmux_rw_iop_pa___pa14___bit 14
#define reg_pinmux_rw_iop_pa___pa15___lsb 15
#define reg_pinmux_rw_iop_pa___pa15___width 1
#define reg_pinmux_rw_iop_pa___pa15___bit 15
#define reg_pinmux_rw_iop_pa___pa16___lsb 16
#define reg_pinmux_rw_iop_pa___pa16___width 1
#define reg_pinmux_rw_iop_pa___pa16___bit 16
#define reg_pinmux_rw_iop_pa___pa17___lsb 17
#define reg_pinmux_rw_iop_pa___pa17___width 1
#define reg_pinmux_rw_iop_pa___pa17___bit 17
#define reg_pinmux_rw_iop_pa___pa18___lsb 18
#define reg_pinmux_rw_iop_pa___pa18___width 1
#define reg_pinmux_rw_iop_pa___pa18___bit 18
#define reg_pinmux_rw_iop_pa___pa19___lsb 19
#define reg_pinmux_rw_iop_pa___pa19___width 1
#define reg_pinmux_rw_iop_pa___pa19___bit 19
#define reg_pinmux_rw_iop_pa___pa20___lsb 20
#define reg_pinmux_rw_iop_pa___pa20___width 1
#define reg_pinmux_rw_iop_pa___pa20___bit 20
#define reg_pinmux_rw_iop_pa___pa21___lsb 21
#define reg_pinmux_rw_iop_pa___pa21___width 1
#define reg_pinmux_rw_iop_pa___pa21___bit 21
#define reg_pinmux_rw_iop_pa___pa22___lsb 22
#define reg_pinmux_rw_iop_pa___pa22___width 1
#define reg_pinmux_rw_iop_pa___pa22___bit 22
#define reg_pinmux_rw_iop_pa___pa23___lsb 23
#define reg_pinmux_rw_iop_pa___pa23___width 1
#define reg_pinmux_rw_iop_pa___pa23___bit 23
#define reg_pinmux_rw_iop_pa___pa24___lsb 24
#define reg_pinmux_rw_iop_pa___pa24___width 1
#define reg_pinmux_rw_iop_pa___pa24___bit 24
#define reg_pinmux_rw_iop_pa___pa25___lsb 25
#define reg_pinmux_rw_iop_pa___pa25___width 1
#define reg_pinmux_rw_iop_pa___pa25___bit 25
#define reg_pinmux_rw_iop_pa___pa26___lsb 26
#define reg_pinmux_rw_iop_pa___pa26___width 1
#define reg_pinmux_rw_iop_pa___pa26___bit 26
#define reg_pinmux_rw_iop_pa___pa27___lsb 27
#define reg_pinmux_rw_iop_pa___pa27___width 1
#define reg_pinmux_rw_iop_pa___pa27___bit 27
#define reg_pinmux_rw_iop_pa___pa28___lsb 28
#define reg_pinmux_rw_iop_pa___pa28___width 1
#define reg_pinmux_rw_iop_pa___pa28___bit 28
#define reg_pinmux_rw_iop_pa___pa29___lsb 29
#define reg_pinmux_rw_iop_pa___pa29___width 1
#define reg_pinmux_rw_iop_pa___pa29___bit 29
#define reg_pinmux_rw_iop_pa___pa30___lsb 30
#define reg_pinmux_rw_iop_pa___pa30___width 1
#define reg_pinmux_rw_iop_pa___pa30___bit 30
#define reg_pinmux_rw_iop_pa___pa31___lsb 31
#define reg_pinmux_rw_iop_pa___pa31___width 1
#define reg_pinmux_rw_iop_pa___pa31___bit 31
#define reg_pinmux_rw_iop_pa_offset 16

/* Register rw_iop_pb, scope pinmux, type rw */
#define reg_pinmux_rw_iop_pb___pb0___lsb 0
#define reg_pinmux_rw_iop_pb___pb0___width 1
#define reg_pinmux_rw_iop_pb___pb0___bit 0
#define reg_pinmux_rw_iop_pb___pb1___lsb 1
#define reg_pinmux_rw_iop_pb___pb1___width 1
#define reg_pinmux_rw_iop_pb___pb1___bit 1
#define reg_pinmux_rw_iop_pb___pb2___lsb 2
#define reg_pinmux_rw_iop_pb___pb2___width 1
#define reg_pinmux_rw_iop_pb___pb2___bit 2
#define reg_pinmux_rw_iop_pb___pb3___lsb 3
#define reg_pinmux_rw_iop_pb___pb3___width 1
#define reg_pinmux_rw_iop_pb___pb3___bit 3
#define reg_pinmux_rw_iop_pb___pb4___lsb 4
#define reg_pinmux_rw_iop_pb___pb4___width 1
#define reg_pinmux_rw_iop_pb___pb4___bit 4
#define reg_pinmux_rw_iop_pb___pb5___lsb 5
#define reg_pinmux_rw_iop_pb___pb5___width 1
#define reg_pinmux_rw_iop_pb___pb5___bit 5
#define reg_pinmux_rw_iop_pb___pb6___lsb 6
#define reg_pinmux_rw_iop_pb___pb6___width 1
#define reg_pinmux_rw_iop_pb___pb6___bit 6
#define reg_pinmux_rw_iop_pb___pb7___lsb 7
#define reg_pinmux_rw_iop_pb___pb7___width 1
#define reg_pinmux_rw_iop_pb___pb7___bit 7
#define reg_pinmux_rw_iop_pb_offset 20

/* Register rw_iop_pio, scope pinmux, type rw */
#define reg_pinmux_rw_iop_pio___d0___lsb 0
#define reg_pinmux_rw_iop_pio___d0___width 1
#define reg_pinmux_rw_iop_pio___d0___bit 0
#define reg_pinmux_rw_iop_pio___d1___lsb 1
#define reg_pinmux_rw_iop_pio___d1___width 1
#define reg_pinmux_rw_iop_pio___d1___bit 1
#define reg_pinmux_rw_iop_pio___d2___lsb 2
#define reg_pinmux_rw_iop_pio___d2___width 1
#define reg_pinmux_rw_iop_pio___d2___bit 2
#define reg_pinmux_rw_iop_pio___d3___lsb 3
#define reg_pinmux_rw_iop_pio___d3___width 1
#define reg_pinmux_rw_iop_pio___d3___bit 3
#define reg_pinmux_rw_iop_pio___d4___lsb 4
#define reg_pinmux_rw_iop_pio___d4___width 1
#define reg_pinmux_rw_iop_pio___d4___bit 4
#define reg_pinmux_rw_iop_pio___d5___lsb 5
#define reg_pinmux_rw_iop_pio___d5___width 1
#define reg_pinmux_rw_iop_pio___d5___bit 5
#define reg_pinmux_rw_iop_pio___d6___lsb 6
#define reg_pinmux_rw_iop_pio___d6___width 1
#define reg_pinmux_rw_iop_pio___d6___bit 6
#define reg_pinmux_rw_iop_pio___d7___lsb 7
#define reg_pinmux_rw_iop_pio___d7___width 1
#define reg_pinmux_rw_iop_pio___d7___bit 7
#define reg_pinmux_rw_iop_pio___rd_n___lsb 8
#define reg_pinmux_rw_iop_pio___rd_n___width 1
#define reg_pinmux_rw_iop_pio___rd_n___bit 8
#define reg_pinmux_rw_iop_pio___wr_n___lsb 9
#define reg_pinmux_rw_iop_pio___wr_n___width 1
#define reg_pinmux_rw_iop_pio___wr_n___bit 9
#define reg_pinmux_rw_iop_pio___a0___lsb 10
#define reg_pinmux_rw_iop_pio___a0___width 1
#define reg_pinmux_rw_iop_pio___a0___bit 10
#define reg_pinmux_rw_iop_pio___a1___lsb 11
#define reg_pinmux_rw_iop_pio___a1___width 1
#define reg_pinmux_rw_iop_pio___a1___bit 11
#define reg_pinmux_rw_iop_pio___ce0_n___lsb 12
#define reg_pinmux_rw_iop_pio___ce0_n___width 1
#define reg_pinmux_rw_iop_pio___ce0_n___bit 12
#define reg_pinmux_rw_iop_pio___ce1_n___lsb 13
#define reg_pinmux_rw_iop_pio___ce1_n___width 1
#define reg_pinmux_rw_iop_pio___ce1_n___bit 13
#define reg_pinmux_rw_iop_pio___ce2_n___lsb 14
#define reg_pinmux_rw_iop_pio___ce2_n___width 1
#define reg_pinmux_rw_iop_pio___ce2_n___bit 14
#define reg_pinmux_rw_iop_pio___rdy___lsb 15
#define reg_pinmux_rw_iop_pio___rdy___width 1
#define reg_pinmux_rw_iop_pio___rdy___bit 15
#define reg_pinmux_rw_iop_pio_offset 24

/* Register rw_iop_usb, scope pinmux, type rw */
#define reg_pinmux_rw_iop_usb___usb0___lsb 0
#define reg_pinmux_rw_iop_usb___usb0___width 1
#define reg_pinmux_rw_iop_usb___usb0___bit 0
#define reg_pinmux_rw_iop_usb_offset 28


/* Constants */
#define regk_pinmux_no                            0x00000000
#define regk_pinmux_rw_gio_pa_default             0x00000000
#define regk_pinmux_rw_gio_pb_default             0x00000000
#define regk_pinmux_rw_gio_pc_default             0x00000000
#define regk_pinmux_rw_hwprot_default             0x00000000
#define regk_pinmux_rw_iop_pa_default             0x00000000
#define regk_pinmux_rw_iop_pb_default             0x00000000
#define regk_pinmux_rw_iop_pio_default            0x00000000
#define regk_pinmux_rw_iop_usb_default            0x00000001
#define regk_pinmux_yes                           0x00000001
#endif /* __pinmux_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef __ddr2_defs_asm_h
#define __ddr2_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           ddr2.r
 *
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile ddr2_defs_asm.h ddr2.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
	REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
	REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
	REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
	REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
	((inst) + offs + (index) * stride)
#endif

/* Register rw_cfg, scope ddr2, type rw */
#define reg_ddr2_rw_cfg___col_width___lsb 0
#define reg_ddr2_rw_cfg___col_width___width 4
#define reg_ddr2_rw_cfg___nr_banks___lsb 4
#define reg_ddr2_rw_cfg___nr_banks___width 1
#define reg_ddr2_rw_cfg___nr_banks___bit 4
#define reg_ddr2_rw_cfg___bw___lsb 5
#define reg_ddr2_rw_cfg___bw___width 1
#define reg_ddr2_rw_cfg___bw___bit 5
#define reg_ddr2_rw_cfg___nr_ref___lsb 6
#define reg_ddr2_rw_cfg___nr_ref___width 4
#define reg_ddr2_rw_cfg___ref_interval___lsb 10
#define reg_ddr2_rw_cfg___ref_interval___width 11
#define reg_ddr2_rw_cfg___odt_ctrl___lsb 21
#define reg_ddr2_rw_cfg___odt_ctrl___width 2
#define reg_ddr2_rw_cfg___odt_mem___lsb 23
#define reg_ddr2_rw_cfg___odt_mem___width 1
#define reg_ddr2_rw_cfg___odt_mem___bit 23
#define reg_ddr2_rw_cfg___imp_strength___lsb 24
#define reg_ddr2_rw_cfg___imp_strength___width 1
#define reg_ddr2_rw_cfg___imp_strength___bit 24
#define reg_ddr2_rw_cfg___auto_imp_cal___lsb 25
#define reg_ddr2_rw_cfg___auto_imp_cal___width 1
#define reg_ddr2_rw_cfg___auto_imp_cal___bit 25
#define reg_ddr2_rw_cfg___imp_cal_override___lsb 26
#define reg_ddr2_rw_cfg___imp_cal_override___width 1
#define reg_ddr2_rw_cfg___imp_cal_override___bit 26
#define reg_ddr2_rw_cfg___dll_override___lsb 27
#define reg_ddr2_rw_cfg___dll_override___width 1
#define reg_ddr2_rw_cfg___dll_override___bit 27
#define reg_ddr2_rw_cfg_offset 0

/* Register rw_timing, scope ddr2, type rw */
#define reg_ddr2_rw_timing___wr___lsb 0
#define reg_ddr2_rw_timing___wr___width 3
#define reg_ddr2_rw_timing___rcd___lsb 3
#define reg_ddr2_rw_timing___rcd___width 3
#define reg_ddr2_rw_timing___rp___lsb 6
#define reg_ddr2_rw_timing___rp___width 3
#define reg_ddr2_rw_timing___ras___lsb 9
#define reg_ddr2_rw_timing___ras___width 4
#define reg_ddr2_rw_timing___rfc___lsb 13
#define reg_ddr2_rw_timing___rfc___width 7
#define reg_ddr2_rw_timing___rc___lsb 20
#define reg_ddr2_rw_timing___rc___width 5
#define reg_ddr2_rw_timing___rtp___lsb 25
#define reg_ddr2_rw_timing___rtp___width 2
#define reg_ddr2_rw_timing___rtw___lsb 27
#define reg_ddr2_rw_timing___rtw___width 3
#define reg_ddr2_rw_timing___wtr___lsb 30
#define reg_ddr2_rw_timing___wtr___width 2
#define reg_ddr2_rw_timing_offset 4

/* Register rw_latency, scope ddr2, type rw */
#define reg_ddr2_rw_latency___cas___lsb 0
#define reg_ddr2_rw_latency___cas___width 3
#define reg_ddr2_rw_latency___additive___lsb 3
#define reg_ddr2_rw_latency___additive___width 3
#define reg_ddr2_rw_latency_offset 8

/* Register rw_phy_cfg, scope ddr2, type rw */
#define reg_ddr2_rw_phy_cfg___en___lsb 0
#define reg_ddr2_rw_phy_cfg___en___width 1
#define reg_ddr2_rw_phy_cfg___en___bit 0
#define reg_ddr2_rw_phy_cfg_offset 12

/* Register rw_phy_ctrl, scope ddr2, type rw */
#define reg_ddr2_rw_phy_ctrl___rst___lsb 0
#define reg_ddr2_rw_phy_ctrl___rst___width 1
#define reg_ddr2_rw_phy_ctrl___rst___bit 0
#define reg_ddr2_rw_phy_ctrl___cal_rst___lsb 1
#define reg_ddr2_rw_phy_ctrl___cal_rst___width 1
#define reg_ddr2_rw_phy_ctrl___cal_rst___bit 1
#define reg_ddr2_rw_phy_ctrl___cal_start___lsb 2
#define reg_ddr2_rw_phy_ctrl___cal_start___width 1
#define reg_ddr2_rw_phy_ctrl___cal_start___bit 2
#define reg_ddr2_rw_phy_ctrl_offset 16

/* Register rw_ctrl, scope ddr2, type rw */
#define reg_ddr2_rw_ctrl___mrs_data___lsb 0
#define reg_ddr2_rw_ctrl___mrs_data___width 16
#define reg_ddr2_rw_ctrl___cmd___lsb 16
#define reg_ddr2_rw_ctrl___cmd___width 8
#define reg_ddr2_rw_ctrl_offset 20

/* Register rw_pwr_down, scope ddr2, type rw */
#define reg_ddr2_rw_pwr_down___self_ref___lsb 0
#define reg_ddr2_rw_pwr_down___self_ref___width 2
#define reg_ddr2_rw_pwr_down___phy_en___lsb 2
#define reg_ddr2_rw_pwr_down___phy_en___width 1
#define reg_ddr2_rw_pwr_down___phy_en___bit 2
#define reg_ddr2_rw_pwr_down_offset 24

/* Register r_stat, scope ddr2, type r */
#define reg_ddr2_r_stat___dll_lock___lsb 0
#define reg_ddr2_r_stat___dll_lock___width 1
#define reg_ddr2_r_stat___dll_lock___bit 0
#define reg_ddr2_r_stat___dll_delay_code___lsb 1
#define reg_ddr2_r_stat___dll_delay_code___width 7
#define reg_ddr2_r_stat___imp_cal_done___lsb 8
#define reg_ddr2_r_stat___imp_cal_done___width 1
#define reg_ddr2_r_stat___imp_cal_done___bit 8
#define reg_ddr2_r_stat___imp_cal_fault___lsb 9
#define reg_ddr2_r_stat___imp_cal_fault___width 1
#define reg_ddr2_r_stat___imp_cal_fault___bit 9
#define reg_ddr2_r_stat___cal_imp_pu___lsb 10
#define reg_ddr2_r_stat___cal_imp_pu___width 4
#define reg_ddr2_r_stat___cal_imp_pd___lsb 14
#define reg_ddr2_r_stat___cal_imp_pd___width 4
#define reg_ddr2_r_stat_offset 28

/* Register rw_imp_ctrl, scope ddr2, type rw */
#define reg_ddr2_rw_imp_ctrl___imp_pu___lsb 0
#define reg_ddr2_rw_imp_ctrl___imp_pu___width 4
#define reg_ddr2_rw_imp_ctrl___imp_pd___lsb 4
#define reg_ddr2_rw_imp_ctrl___imp_pd___width 4
#define reg_ddr2_rw_imp_ctrl_offset 32

#define STRIDE_ddr2_rw_dll_ctrl 4
/* Register rw_dll_ctrl, scope ddr2, type rw */
#define reg_ddr2_rw_dll_ctrl___mode___lsb 0
#define reg_ddr2_rw_dll_ctrl___mode___width 1
#define reg_ddr2_rw_dll_ctrl___mode___bit 0
#define reg_ddr2_rw_dll_ctrl___clk_delay___lsb 1
#define reg_ddr2_rw_dll_ctrl___clk_delay___width 7
#define reg_ddr2_rw_dll_ctrl_offset 36

#define STRIDE_ddr2_rw_dqs_dll_ctrl 4
/* Register rw_dqs_dll_ctrl, scope ddr2, type rw */
#define reg_ddr2_rw_dqs_dll_ctrl___dqs90_delay___lsb 0
#define reg_ddr2_rw_dqs_dll_ctrl___dqs90_delay___width 7
#define reg_ddr2_rw_dqs_dll_ctrl___dqs180_delay___lsb 7
#define reg_ddr2_rw_dqs_dll_ctrl___dqs180_delay___width 7
#define reg_ddr2_rw_dqs_dll_ctrl___dqs270_delay___lsb 14
#define reg_ddr2_rw_dqs_dll_ctrl___dqs270_delay___width 7
#define reg_ddr2_rw_dqs_dll_ctrl___dqs360_delay___lsb 21
#define reg_ddr2_rw_dqs_dll_ctrl___dqs360_delay___width 7
#define reg_ddr2_rw_dqs_dll_ctrl_offset 52


/* Constants */
#define regk_ddr2_al0                             0x00000000
#define regk_ddr2_al1                             0x00000008
#define regk_ddr2_al2                             0x00000010
#define regk_ddr2_al3                             0x00000018
#define regk_ddr2_al4                             0x00000020
#define regk_ddr2_auto                            0x00000003
#define regk_ddr2_bank4                           0x00000000
#define regk_ddr2_bank8                           0x00000001
#define regk_ddr2_bl4                             0x00000002
#define regk_ddr2_bl8                             0x00000003
#define regk_ddr2_bt_il                           0x00000008
#define regk_ddr2_bt_seq                          0x00000000
#define regk_ddr2_bw16                            0x00000001
#define regk_ddr2_bw32                            0x00000000
#define regk_ddr2_cas2                            0x00000020
#define regk_ddr2_cas3                            0x00000030
#define regk_ddr2_cas4                            0x00000040
#define regk_ddr2_cas5                            0x00000050
#define regk_ddr2_deselect                        0x000000c0
#define regk_ddr2_dic_weak                        0x00000002
#define regk_ddr2_direct                          0x00000001
#define regk_ddr2_dis                             0x00000000
#define regk_ddr2_dll_dis                         0x00000001
#define regk_ddr2_dll_en                          0x00000000
#define regk_ddr2_dll_rst                         0x00000100
#define regk_ddr2_emrs                            0x00000081
#define regk_ddr2_emrs2                           0x00000082
#define regk_ddr2_emrs3                           0x00000083
#define regk_ddr2_full                            0x00000001
#define regk_ddr2_hi_ref_rate                     0x00000080
#define regk_ddr2_mrs                             0x00000080
#define regk_ddr2_no                              0x00000000
#define regk_ddr2_nop                             0x000000b8
#define regk_ddr2_ocd_adj                         0x00000200
#define regk_ddr2_ocd_default                     0x00000380
#define regk_ddr2_ocd_drive0                      0x00000100
#define regk_ddr2_ocd_drive1                      0x00000080
#define regk_ddr2_ocd_exit                        0x00000000
#define regk_ddr2_odt_dis                         0x00000000
#define regk_ddr2_offs                            0x00000000
#define regk_ddr2_pre                             0x00000090
#define regk_ddr2_pre_all                         0x00000400
#define regk_ddr2_pwr_down_fast                   0x00000000
#define regk_ddr2_pwr_down_slow                   0x00001000
#define regk_ddr2_ref                             0x00000088
#define regk_ddr2_rtt150                          0x00000040
#define regk_ddr2_rtt50                           0x00000044
#define regk_ddr2_rtt75                           0x00000004
#define regk_ddr2_rw_cfg_default                  0x00186000
#define regk_ddr2_rw_dll_ctrl_default             0x00000000
#define regk_ddr2_rw_dll_ctrl_size                0x00000004
#define regk_ddr2_rw_dqs_dll_ctrl_default         0x00000000
#define regk_ddr2_rw_dqs_dll_ctrl_size            0x00000004
#define regk_ddr2_rw_latency_default              0x00000000
#define regk_ddr2_rw_phy_cfg_default              0x00000000
#define regk_ddr2_rw_pwr_down_default             0x00000000
#define regk_ddr2_rw_timing_default               0x00000000
#define regk_ddr2_s1Gb                            0x0000001a
#define regk_ddr2_s256Mb                          0x0000000f
#define regk_ddr2_s2Gb                            0x00000027
#define regk_ddr2_s4Gb                            0x00000042
#define regk_ddr2_s512Mb                          0x00000015
#define regk_ddr2_temp0_85                        0x00000618
#define regk_ddr2_temp85_95                       0x0000030c
#define regk_ddr2_term150                         0x00000002
#define regk_ddr2_term50                          0x00000003
#define regk_ddr2_term75                          0x00000001
#define regk_ddr2_test                            0x00000080
#define regk_ddr2_weak                            0x00000000
#define regk_ddr2_wr2                             0x00000200
#define regk_ddr2_wr3                             0x00000400
#define regk_ddr2_yes                             0x00000001
#endif /* __ddr2_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef __clkgen_defs_asm_h
#define __clkgen_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           clkgen.r
 *
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile clkgen_defs_asm.h clkgen.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
	REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
	REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
	REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
	REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
	((inst) + offs + (index) * stride)
#endif

/* Register r_bootsel, scope clkgen, type r */
#define reg_clkgen_r_bootsel___boot_mode___lsb 0
#define reg_clkgen_r_bootsel___boot_mode___width 5
#define reg_clkgen_r_bootsel___intern_main_clk___lsb 5
#define reg_clkgen_r_bootsel___intern_main_clk___width 1
#define reg_clkgen_r_bootsel___intern_main_clk___bit 5
#define reg_clkgen_r_bootsel___extern_usb2_clk___lsb 6
#define reg_clkgen_r_bootsel___extern_usb2_clk___width 1
#define reg_clkgen_r_bootsel___extern_usb2_clk___bit 6
#define reg_clkgen_r_bootsel_offset 0

/* Register rw_clk_ctrl, scope clkgen, type rw */
#define reg_clkgen_rw_clk_ctrl___pll___lsb 0
#define reg_clkgen_rw_clk_ctrl___pll___width 1
#define reg_clkgen_rw_clk_ctrl___pll___bit 0
#define reg_clkgen_rw_clk_ctrl___cpu___lsb 1
#define reg_clkgen_rw_clk_ctrl___cpu___width 1
#define reg_clkgen_rw_clk_ctrl___cpu___bit 1
#define reg_clkgen_rw_clk_ctrl___iop_usb___lsb 2
#define reg_clkgen_rw_clk_ctrl___iop_usb___width 1
#define reg_clkgen_rw_clk_ctrl___iop_usb___bit 2
#define reg_clkgen_rw_clk_ctrl___vin___lsb 3
#define reg_clkgen_rw_clk_ctrl___vin___width 1
#define reg_clkgen_rw_clk_ctrl___vin___bit 3
#define reg_clkgen_rw_clk_ctrl___sclr___lsb 4
#define reg_clkgen_rw_clk_ctrl___sclr___width 1
#define reg_clkgen_rw_clk_ctrl___sclr___bit 4
#define reg_clkgen_rw_clk_ctrl___h264___lsb 5
#define reg_clkgen_rw_clk_ctrl___h264___width 1
#define reg_clkgen_rw_clk_ctrl___h264___bit 5
#define reg_clkgen_rw_clk_ctrl___ddr2___lsb 6
#define reg_clkgen_rw_clk_ctrl___ddr2___width 1
#define reg_clkgen_rw_clk_ctrl___ddr2___bit 6
#define reg_clkgen_rw_clk_ctrl___vout_hist___lsb 7
#define reg_clkgen_rw_clk_ctrl___vout_hist___width 1
#define reg_clkgen_rw_clk_ctrl___vout_hist___bit 7
#define reg_clkgen_rw_clk_ctrl___eth___lsb 8
#define reg_clkgen_rw_clk_ctrl___eth___width 1
#define reg_clkgen_rw_clk_ctrl___eth___bit 8
#define reg_clkgen_rw_clk_ctrl___ccd_tg_200___lsb 9
#define reg_clkgen_rw_clk_ctrl___ccd_tg_200___width 1
#define reg_clkgen_rw_clk_ctrl___ccd_tg_200___bit 9
#define reg_clkgen_rw_clk_ctrl___dma0_1_eth___lsb 10
#define reg_clkgen_rw_clk_ctrl___dma0_1_eth___width 1
#define reg_clkgen_rw_clk_ctrl___dma0_1_eth___bit 10
#define reg_clkgen_rw_clk_ctrl___ccd_tg_100___lsb 11
#define reg_clkgen_rw_clk_ctrl___ccd_tg_100___width 1
#define reg_clkgen_rw_clk_ctrl___ccd_tg_100___bit 11
#define reg_clkgen_rw_clk_ctrl___jpeg___lsb 12
#define reg_clkgen_rw_clk_ctrl___jpeg___width 1
#define reg_clkgen_rw_clk_ctrl___jpeg___bit 12
#define reg_clkgen_rw_clk_ctrl___sser_ser_dma6_7___lsb 13
#define reg_clkgen_rw_clk_ctrl___sser_ser_dma6_7___width 1
#define reg_clkgen_rw_clk_ctrl___sser_ser_dma6_7___bit 13
#define reg_clkgen_rw_clk_ctrl___strdma0_2_video___lsb 14
#define reg_clkgen_rw_clk_ctrl___strdma0_2_video___width 1
#define reg_clkgen_rw_clk_ctrl___strdma0_2_video___bit 14
#define reg_clkgen_rw_clk_ctrl___dma2_3_strcop___lsb 15
#define reg_clkgen_rw_clk_ctrl___dma2_3_strcop___width 1
#define reg_clkgen_rw_clk_ctrl___dma2_3_strcop___bit 15
#define reg_clkgen_rw_clk_ctrl___dma4_5_iop___lsb 16
#define reg_clkgen_rw_clk_ctrl___dma4_5_iop___width 1
#define reg_clkgen_rw_clk_ctrl___dma4_5_iop___bit 16
#define reg_clkgen_rw_clk_ctrl___dma9_11___lsb 17
#define reg_clkgen_rw_clk_ctrl___dma9_11___width 1
#define reg_clkgen_rw_clk_ctrl___dma9_11___bit 17
#define reg_clkgen_rw_clk_ctrl___memarb_bar_ddr___lsb 18
#define reg_clkgen_rw_clk_ctrl___memarb_bar_ddr___width 1
#define reg_clkgen_rw_clk_ctrl___memarb_bar_ddr___bit 18
#define reg_clkgen_rw_clk_ctrl___sclr_h264___lsb 19
#define reg_clkgen_rw_clk_ctrl___sclr_h264___width 1
#define reg_clkgen_rw_clk_ctrl___sclr_h264___bit 19
#define reg_clkgen_rw_clk_ctrl_offset 4


/* Constants */
#define regk_clkgen_eth1000_rx                    0x0000000c
#define regk_clkgen_eth1000_tx                    0x0000000e
#define regk_clkgen_eth100_rx                     0x0000001d
#define regk_clkgen_eth100_rx_half                0x0000001c
#define regk_clkgen_eth100_tx                     0x0000001f
#define regk_clkgen_eth100_tx_half                0x0000001e
#define regk_clkgen_nand_3_2                      0x00000000
#define regk_clkgen_nand_3_2_0x30                 0x00000002
#define regk_clkgen_nand_3_2_0x30_pll             0x00000012
#define regk_clkgen_nand_3_2_pll                  0x00000010
#define regk_clkgen_nand_3_3                      0x00000001
#define regk_clkgen_nand_3_3_0x30                 0x00000003
#define regk_clkgen_nand_3_3_0x30_pll             0x00000013
#define regk_clkgen_nand_3_3_pll                  0x00000011
#define regk_clkgen_nand_4_2                      0x00000004
#define regk_clkgen_nand_4_2_0x30                 0x00000006
#define regk_clkgen_nand_4_2_0x30_pll             0x00000016
#define regk_clkgen_nand_4_2_pll                  0x00000014
#define regk_clkgen_nand_4_3                      0x00000005
#define regk_clkgen_nand_4_3_0x30                 0x00000007
#define regk_clkgen_nand_4_3_0x30_pll             0x00000017
#define regk_clkgen_nand_4_3_pll                  0x00000015
#define regk_clkgen_nand_5_2                      0x00000008
#define regk_clkgen_nand_5_2_0x30                 0x0000000a
#define regk_clkgen_nand_5_2_0x30_pll             0x0000001a
#define regk_clkgen_nand_5_2_pll                  0x00000018
#define regk_clkgen_nand_5_3                      0x00000009
#define regk_clkgen_nand_5_3_0x30                 0x0000000b
#define regk_clkgen_nand_5_3_0x30_pll             0x0000001b
#define regk_clkgen_nand_5_3_pll                  0x00000019
#define regk_clkgen_no                            0x00000000
#define regk_clkgen_rw_clk_ctrl_default           0x00000002
#define regk_clkgen_ser                           0x0000000d
#define regk_clkgen_ser_pll                       0x0000000f
#define regk_clkgen_yes                           0x00000001
#endif /* __clkgen_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef __pio_defs_asm_h
#define __pio_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           pio.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile pio_defs_asm.h pio.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register rw_data, scope pio, type rw */
#define reg_pio_rw_data_offset 64

/* Register rw_io_access0, scope pio, type rw */
#define reg_pio_rw_io_access0___data___lsb 0
#define reg_pio_rw_io_access0___data___width 8
#define reg_pio_rw_io_access0_offset 0

/* Register rw_io_access1, scope pio, type rw */
#define reg_pio_rw_io_access1___data___lsb 0
#define reg_pio_rw_io_access1___data___width 8
#define reg_pio_rw_io_access1_offset 4

/* Register rw_io_access2, scope pio, type rw */
#define reg_pio_rw_io_access2___data___lsb 0
#define reg_pio_rw_io_access2___data___width 8
#define reg_pio_rw_io_access2_offset 8

/* Register rw_io_access3, scope pio, type rw */
#define reg_pio_rw_io_access3___data___lsb 0
#define reg_pio_rw_io_access3___data___width 8
#define reg_pio_rw_io_access3_offset 12

/* Register rw_io_access4, scope pio, type rw */
#define reg_pio_rw_io_access4___data___lsb 0
#define reg_pio_rw_io_access4___data___width 8
#define reg_pio_rw_io_access4_offset 16

/* Register rw_io_access5, scope pio, type rw */
#define reg_pio_rw_io_access5___data___lsb 0
#define reg_pio_rw_io_access5___data___width 8
#define reg_pio_rw_io_access5_offset 20

/* Register rw_io_access6, scope pio, type rw */
#define reg_pio_rw_io_access6___data___lsb 0
#define reg_pio_rw_io_access6___data___width 8
#define reg_pio_rw_io_access6_offset 24

/* Register rw_io_access7, scope pio, type rw */
#define reg_pio_rw_io_access7___data___lsb 0
#define reg_pio_rw_io_access7___data___width 8
#define reg_pio_rw_io_access7_offset 28

/* Register rw_io_access8, scope pio, type rw */
#define reg_pio_rw_io_access8___data___lsb 0
#define reg_pio_rw_io_access8___data___width 8
#define reg_pio_rw_io_access8_offset 32

/* Register rw_io_access9, scope pio, type rw */
#define reg_pio_rw_io_access9___data___lsb 0
#define reg_pio_rw_io_access9___data___width 8
#define reg_pio_rw_io_access9_offset 36

/* Register rw_io_access10, scope pio, type rw */
#define reg_pio_rw_io_access10___data___lsb 0
#define reg_pio_rw_io_access10___data___width 8
#define reg_pio_rw_io_access10_offset 40

/* Register rw_io_access11, scope pio, type rw */
#define reg_pio_rw_io_access11___data___lsb 0
#define reg_pio_rw_io_access11___data___width 8
#define reg_pio_rw_io_access11_offset 44

/* Register rw_io_access12, scope pio, type rw */
#define reg_pio_rw_io_access12___data___lsb 0
#define reg_pio_rw_io_access12___data___width 8
#define reg_pio_rw_io_access12_offset 48

/* Register rw_io_access13, scope pio, type rw */
#define reg_pio_rw_io_access13___data___lsb 0
#define reg_pio_rw_io_access13___data___width 8
#define reg_pio_rw_io_access13_offset 52

/* Register rw_io_access14, scope pio, type rw */
#define reg_pio_rw_io_access14___data___lsb 0
#define reg_pio_rw_io_access14___data___width 8
#define reg_pio_rw_io_access14_offset 56

/* Register rw_io_access15, scope pio, type rw */
#define reg_pio_rw_io_access15___data___lsb 0
#define reg_pio_rw_io_access15___data___width 8
#define reg_pio_rw_io_access15_offset 60

/* Register rw_ce0_cfg, scope pio, type rw */
#define reg_pio_rw_ce0_cfg___lw___lsb 0
#define reg_pio_rw_ce0_cfg___lw___width 6
#define reg_pio_rw_ce0_cfg___ew___lsb 6
#define reg_pio_rw_ce0_cfg___ew___width 3
#define reg_pio_rw_ce0_cfg___zw___lsb 9
#define reg_pio_rw_ce0_cfg___zw___width 3
#define reg_pio_rw_ce0_cfg___aw___lsb 12
#define reg_pio_rw_ce0_cfg___aw___width 2
#define reg_pio_rw_ce0_cfg___mode___lsb 14
#define reg_pio_rw_ce0_cfg___mode___width 2
#define reg_pio_rw_ce0_cfg_offset 68

/* Register rw_ce1_cfg, scope pio, type rw */
#define reg_pio_rw_ce1_cfg___lw___lsb 0
#define reg_pio_rw_ce1_cfg___lw___width 6
#define reg_pio_rw_ce1_cfg___ew___lsb 6
#define reg_pio_rw_ce1_cfg___ew___width 3
#define reg_pio_rw_ce1_cfg___zw___lsb 9
#define reg_pio_rw_ce1_cfg___zw___width 3
#define reg_pio_rw_ce1_cfg___aw___lsb 12
#define reg_pio_rw_ce1_cfg___aw___width 2
#define reg_pio_rw_ce1_cfg___mode___lsb 14
#define reg_pio_rw_ce1_cfg___mode___width 2
#define reg_pio_rw_ce1_cfg_offset 72

/* Register rw_ce2_cfg, scope pio, type rw */
#define reg_pio_rw_ce2_cfg___lw___lsb 0
#define reg_pio_rw_ce2_cfg___lw___width 6
#define reg_pio_rw_ce2_cfg___ew___lsb 6
#define reg_pio_rw_ce2_cfg___ew___width 3
#define reg_pio_rw_ce2_cfg___zw___lsb 9
#define reg_pio_rw_ce2_cfg___zw___width 3
#define reg_pio_rw_ce2_cfg___aw___lsb 12
#define reg_pio_rw_ce2_cfg___aw___width 2
#define reg_pio_rw_ce2_cfg___mode___lsb 14
#define reg_pio_rw_ce2_cfg___mode___width 2
#define reg_pio_rw_ce2_cfg_offset 76

/* Register rw_dout, scope pio, type rw */
#define reg_pio_rw_dout___data___lsb 0
#define reg_pio_rw_dout___data___width 8
#define reg_pio_rw_dout___rd_n___lsb 8
#define reg_pio_rw_dout___rd_n___width 1
#define reg_pio_rw_dout___rd_n___bit 8
#define reg_pio_rw_dout___wr_n___lsb 9
#define reg_pio_rw_dout___wr_n___width 1
#define reg_pio_rw_dout___wr_n___bit 9
#define reg_pio_rw_dout___a0___lsb 10
#define reg_pio_rw_dout___a0___width 1
#define reg_pio_rw_dout___a0___bit 10
#define reg_pio_rw_dout___a1___lsb 11
#define reg_pio_rw_dout___a1___width 1
#define reg_pio_rw_dout___a1___bit 11
#define reg_pio_rw_dout___ce0_n___lsb 12
#define reg_pio_rw_dout___ce0_n___width 1
#define reg_pio_rw_dout___ce0_n___bit 12
#define reg_pio_rw_dout___ce1_n___lsb 13
#define reg_pio_rw_dout___ce1_n___width 1
#define reg_pio_rw_dout___ce1_n___bit 13
#define reg_pio_rw_dout___ce2_n___lsb 14
#define reg_pio_rw_dout___ce2_n___width 1
#define reg_pio_rw_dout___ce2_n___bit 14
#define reg_pio_rw_dout___rdy___lsb 15
#define reg_pio_rw_dout___rdy___width 1
#define reg_pio_rw_dout___rdy___bit 15
#define reg_pio_rw_dout_offset 80

/* Register rw_oe, scope pio, type rw */
#define reg_pio_rw_oe___data___lsb 0
#define reg_pio_rw_oe___data___width 8
#define reg_pio_rw_oe___rd_n___lsb 8
#define reg_pio_rw_oe___rd_n___width 1
#define reg_pio_rw_oe___rd_n___bit 8
#define reg_pio_rw_oe___wr_n___lsb 9
#define reg_pio_rw_oe___wr_n___width 1
#define reg_pio_rw_oe___wr_n___bit 9
#define reg_pio_rw_oe___a0___lsb 10
#define reg_pio_rw_oe___a0___width 1
#define reg_pio_rw_oe___a0___bit 10
#define reg_pio_rw_oe___a1___lsb 11
#define reg_pio_rw_oe___a1___width 1
#define reg_pio_rw_oe___a1___bit 11
#define reg_pio_rw_oe___ce0_n___lsb 12
#define reg_pio_rw_oe___ce0_n___width 1
#define reg_pio_rw_oe___ce0_n___bit 12
#define reg_pio_rw_oe___ce1_n___lsb 13
#define reg_pio_rw_oe___ce1_n___width 1
#define reg_pio_rw_oe___ce1_n___bit 13
#define reg_pio_rw_oe___ce2_n___lsb 14
#define reg_pio_rw_oe___ce2_n___width 1
#define reg_pio_rw_oe___ce2_n___bit 14
#define reg_pio_rw_oe___rdy___lsb 15
#define reg_pio_rw_oe___rdy___width 1
#define reg_pio_rw_oe___rdy___bit 15
#define reg_pio_rw_oe_offset 84

/* Register rw_man_ctrl, scope pio, type rw */
#define reg_pio_rw_man_ctrl___data___lsb 0
#define reg_pio_rw_man_ctrl___data___width 8
#define reg_pio_rw_man_ctrl___rd_n___lsb 8
#define reg_pio_rw_man_ctrl___rd_n___width 1
#define reg_pio_rw_man_ctrl___rd_n___bit 8
#define reg_pio_rw_man_ctrl___wr_n___lsb 9
#define reg_pio_rw_man_ctrl___wr_n___width 1
#define reg_pio_rw_man_ctrl___wr_n___bit 9
#define reg_pio_rw_man_ctrl___a0___lsb 10
#define reg_pio_rw_man_ctrl___a0___width 1
#define reg_pio_rw_man_ctrl___a0___bit 10
#define reg_pio_rw_man_ctrl___a1___lsb 11
#define reg_pio_rw_man_ctrl___a1___width 1
#define reg_pio_rw_man_ctrl___a1___bit 11
#define reg_pio_rw_man_ctrl___ce0_n___lsb 12
#define reg_pio_rw_man_ctrl___ce0_n___width 1
#define reg_pio_rw_man_ctrl___ce0_n___bit 12
#define reg_pio_rw_man_ctrl___ce1_n___lsb 13
#define reg_pio_rw_man_ctrl___ce1_n___width 1
#define reg_pio_rw_man_ctrl___ce1_n___bit 13
#define reg_pio_rw_man_ctrl___ce2_n___lsb 14
#define reg_pio_rw_man_ctrl___ce2_n___width 1
#define reg_pio_rw_man_ctrl___ce2_n___bit 14
#define reg_pio_rw_man_ctrl___rdy___lsb 15
#define reg_pio_rw_man_ctrl___rdy___width 1
#define reg_pio_rw_man_ctrl___rdy___bit 15
#define reg_pio_rw_man_ctrl_offset 88

/* Register r_din, scope pio, type r */
#define reg_pio_r_din___data___lsb 0
#define reg_pio_r_din___data___width 8
#define reg_pio_r_din___rd_n___lsb 8
#define reg_pio_r_din___rd_n___width 1
#define reg_pio_r_din___rd_n___bit 8
#define reg_pio_r_din___wr_n___lsb 9
#define reg_pio_r_din___wr_n___width 1
#define reg_pio_r_din___wr_n___bit 9
#define reg_pio_r_din___a0___lsb 10
#define reg_pio_r_din___a0___width 1
#define reg_pio_r_din___a0___bit 10
#define reg_pio_r_din___a1___lsb 11
#define reg_pio_r_din___a1___width 1
#define reg_pio_r_din___a1___bit 11
#define reg_pio_r_din___ce0_n___lsb 12
#define reg_pio_r_din___ce0_n___width 1
#define reg_pio_r_din___ce0_n___bit 12
#define reg_pio_r_din___ce1_n___lsb 13
#define reg_pio_r_din___ce1_n___width 1
#define reg_pio_r_din___ce1_n___bit 13
#define reg_pio_r_din___ce2_n___lsb 14
#define reg_pio_r_din___ce2_n___width 1
#define reg_pio_r_din___ce2_n___bit 14
#define reg_pio_r_din___rdy___lsb 15
#define reg_pio_r_din___rdy___width 1
#define reg_pio_r_din___rdy___bit 15
#define reg_pio_r_din_offset 92

/* Register r_stat, scope pio, type r */
#define reg_pio_r_stat___busy___lsb 0
#define reg_pio_r_stat___busy___width 1
#define reg_pio_r_stat___busy___bit 0
#define reg_pio_r_stat_offset 96

/* Register rw_intr_mask, scope pio, type rw */
#define reg_pio_rw_intr_mask___rdy___lsb 0
#define reg_pio_rw_intr_mask___rdy___width 1
#define reg_pio_rw_intr_mask___rdy___bit 0
#define reg_pio_rw_intr_mask_offset 100

/* Register rw_ack_intr, scope pio, type rw */
#define reg_pio_rw_ack_intr___rdy___lsb 0
#define reg_pio_rw_ack_intr___rdy___width 1
#define reg_pio_rw_ack_intr___rdy___bit 0
#define reg_pio_rw_ack_intr_offset 104

/* Register r_intr, scope pio, type r */
#define reg_pio_r_intr___rdy___lsb 0
#define reg_pio_r_intr___rdy___width 1
#define reg_pio_r_intr___rdy___bit 0
#define reg_pio_r_intr_offset 108

/* Register r_masked_intr, scope pio, type r */
#define reg_pio_r_masked_intr___rdy___lsb 0
#define reg_pio_r_masked_intr___rdy___width 1
#define reg_pio_r_masked_intr___rdy___bit 0
#define reg_pio_r_masked_intr_offset 112


/* Constants */
#define regk_pio_a2                               0x00000003
#define regk_pio_no                               0x00000000
#define regk_pio_normal                           0x00000000
#define regk_pio_rd                               0x00000001
#define regk_pio_rw_ce0_cfg_default               0x00000000
#define regk_pio_rw_ce1_cfg_default               0x00000000
#define regk_pio_rw_ce2_cfg_default               0x00000000
#define regk_pio_rw_intr_mask_default             0x00000000
#define regk_pio_rw_man_ctrl_default              0x00000000
#define regk_pio_rw_oe_default                    0x00000000
#define regk_pio_wr                               0x00000002
#define regk_pio_wr_ce2                           0x00000003
#define regk_pio_yes                              0x00000001
#define regk_pio_yes_all                          0x000000ff
#endif /* __pio_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef __gio_defs_asm_h
#define __gio_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           gio.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile gio_defs_asm.h gio.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register r_pa_din, scope gio, type r */
#define reg_gio_r_pa_din___data___lsb 0
#define reg_gio_r_pa_din___data___width 32
#define reg_gio_r_pa_din_offset 0

/* Register rw_pa_dout, scope gio, type rw */
#define reg_gio_rw_pa_dout___data___lsb 0
#define reg_gio_rw_pa_dout___data___width 32
#define reg_gio_rw_pa_dout_offset 4

/* Register rw_pa_oe, scope gio, type rw */
#define reg_gio_rw_pa_oe___oe___lsb 0
#define reg_gio_rw_pa_oe___oe___width 32
#define reg_gio_rw_pa_oe_offset 8

/* Register rw_pa_byte0_dout, scope gio, type rw */
#define reg_gio_rw_pa_byte0_dout___data___lsb 0
#define reg_gio_rw_pa_byte0_dout___data___width 8
#define reg_gio_rw_pa_byte0_dout_offset 12

/* Register rw_pa_byte0_oe, scope gio, type rw */
#define reg_gio_rw_pa_byte0_oe___oe___lsb 0
#define reg_gio_rw_pa_byte0_oe___oe___width 8
#define reg_gio_rw_pa_byte0_oe_offset 16

/* Register rw_pa_byte1_dout, scope gio, type rw */
#define reg_gio_rw_pa_byte1_dout___data___lsb 0
#define reg_gio_rw_pa_byte1_dout___data___width 8
#define reg_gio_rw_pa_byte1_dout_offset 20

/* Register rw_pa_byte1_oe, scope gio, type rw */
#define reg_gio_rw_pa_byte1_oe___oe___lsb 0
#define reg_gio_rw_pa_byte1_oe___oe___width 8
#define reg_gio_rw_pa_byte1_oe_offset 24

/* Register rw_pa_byte2_dout, scope gio, type rw */
#define reg_gio_rw_pa_byte2_dout___data___lsb 0
#define reg_gio_rw_pa_byte2_dout___data___width 8
#define reg_gio_rw_pa_byte2_dout_offset 28

/* Register rw_pa_byte2_oe, scope gio, type rw */
#define reg_gio_rw_pa_byte2_oe___oe___lsb 0
#define reg_gio_rw_pa_byte2_oe___oe___width 8
#define reg_gio_rw_pa_byte2_oe_offset 32

/* Register rw_pa_byte3_dout, scope gio, type rw */
#define reg_gio_rw_pa_byte3_dout___data___lsb 0
#define reg_gio_rw_pa_byte3_dout___data___width 8
#define reg_gio_rw_pa_byte3_dout_offset 36

/* Register rw_pa_byte3_oe, scope gio, type rw */
#define reg_gio_rw_pa_byte3_oe___oe___lsb 0
#define reg_gio_rw_pa_byte3_oe___oe___width 8
#define reg_gio_rw_pa_byte3_oe_offset 40

/* Register r_pb_din, scope gio, type r */
#define reg_gio_r_pb_din___data___lsb 0
#define reg_gio_r_pb_din___data___width 32
#define reg_gio_r_pb_din_offset 44

/* Register rw_pb_dout, scope gio, type rw */
#define reg_gio_rw_pb_dout___data___lsb 0
#define reg_gio_rw_pb_dout___data___width 32
#define reg_gio_rw_pb_dout_offset 48

/* Register rw_pb_oe, scope gio, type rw */
#define reg_gio_rw_pb_oe___oe___lsb 0
#define reg_gio_rw_pb_oe___oe___width 32
#define reg_gio_rw_pb_oe_offset 52

/* Register rw_pb_byte0_dout, scope gio, type rw */
#define reg_gio_rw_pb_byte0_dout___data___lsb 0
#define reg_gio_rw_pb_byte0_dout___data___width 8
#define reg_gio_rw_pb_byte0_dout_offset 56

/* Register rw_pb_byte0_oe, scope gio, type rw */
#define reg_gio_rw_pb_byte0_oe___oe___lsb 0
#define reg_gio_rw_pb_byte0_oe___oe___width 8
#define reg_gio_rw_pb_byte0_oe_offset 60

/* Register rw_pb_byte1_dout, scope gio, type rw */
#define reg_gio_rw_pb_byte1_dout___data___lsb 0
#define reg_gio_rw_pb_byte1_dout___data___width 8
#define reg_gio_rw_pb_byte1_dout_offset 64

/* Register rw_pb_byte1_oe, scope gio, type rw */
#define reg_gio_rw_pb_byte1_oe___oe___lsb 0
#define reg_gio_rw_pb_byte1_oe___oe___width 8
#define reg_gio_rw_pb_byte1_oe_offset 68

/* Register rw_pb_byte2_dout, scope gio, type rw */
#define reg_gio_rw_pb_byte2_dout___data___lsb 0
#define reg_gio_rw_pb_byte2_dout___data___width 8
#define reg_gio_rw_pb_byte2_dout_offset 72

/* Register rw_pb_byte2_oe, scope gio, type rw */
#define reg_gio_rw_pb_byte2_oe___oe___lsb 0
#define reg_gio_rw_pb_byte2_oe___oe___width 8
#define reg_gio_rw_pb_byte2_oe_offset 76

/* Register rw_pb_byte3_dout, scope gio, type rw */
#define reg_gio_rw_pb_byte3_dout___data___lsb 0
#define reg_gio_rw_pb_byte3_dout___data___width 8
#define reg_gio_rw_pb_byte3_dout_offset 80

/* Register rw_pb_byte3_oe, scope gio, type rw */
#define reg_gio_rw_pb_byte3_oe___oe___lsb 0
#define reg_gio_rw_pb_byte3_oe___oe___width 8
#define reg_gio_rw_pb_byte3_oe_offset 84

/* Register r_pc_din, scope gio, type r */
#define reg_gio_r_pc_din___data___lsb 0
#define reg_gio_r_pc_din___data___width 16
#define reg_gio_r_pc_din_offset 88

/* Register rw_pc_dout, scope gio, type rw */
#define reg_gio_rw_pc_dout___data___lsb 0
#define reg_gio_rw_pc_dout___data___width 16
#define reg_gio_rw_pc_dout_offset 92

/* Register rw_pc_oe, scope gio, type rw */
#define reg_gio_rw_pc_oe___oe___lsb 0
#define reg_gio_rw_pc_oe___oe___width 16
#define reg_gio_rw_pc_oe_offset 96

/* Register rw_pc_byte0_dout, scope gio, type rw */
#define reg_gio_rw_pc_byte0_dout___data___lsb 0
#define reg_gio_rw_pc_byte0_dout___data___width 8
#define reg_gio_rw_pc_byte0_dout_offset 100

/* Register rw_pc_byte0_oe, scope gio, type rw */
#define reg_gio_rw_pc_byte0_oe___oe___lsb 0
#define reg_gio_rw_pc_byte0_oe___oe___width 8
#define reg_gio_rw_pc_byte0_oe_offset 104

/* Register rw_pc_byte1_dout, scope gio, type rw */
#define reg_gio_rw_pc_byte1_dout___data___lsb 0
#define reg_gio_rw_pc_byte1_dout___data___width 8
#define reg_gio_rw_pc_byte1_dout_offset 108

/* Register rw_pc_byte1_oe, scope gio, type rw */
#define reg_gio_rw_pc_byte1_oe___oe___lsb 0
#define reg_gio_rw_pc_byte1_oe___oe___width 8
#define reg_gio_rw_pc_byte1_oe_offset 112

/* Register r_pd_din, scope gio, type r */
#define reg_gio_r_pd_din___data___lsb 0
#define reg_gio_r_pd_din___data___width 32
#define reg_gio_r_pd_din_offset 116

/* Register rw_intr_cfg, scope gio, type rw */
#define reg_gio_rw_intr_cfg___intr0___lsb 0
#define reg_gio_rw_intr_cfg___intr0___width 3
#define reg_gio_rw_intr_cfg___intr1___lsb 3
#define reg_gio_rw_intr_cfg___intr1___width 3
#define reg_gio_rw_intr_cfg___intr2___lsb 6
#define reg_gio_rw_intr_cfg___intr2___width 3
#define reg_gio_rw_intr_cfg___intr3___lsb 9
#define reg_gio_rw_intr_cfg___intr3___width 3
#define reg_gio_rw_intr_cfg___intr4___lsb 12
#define reg_gio_rw_intr_cfg___intr4___width 3
#define reg_gio_rw_intr_cfg___intr5___lsb 15
#define reg_gio_rw_intr_cfg___intr5___width 3
#define reg_gio_rw_intr_cfg___intr6___lsb 18
#define reg_gio_rw_intr_cfg___intr6___width 3
#define reg_gio_rw_intr_cfg___intr7___lsb 21
#define reg_gio_rw_intr_cfg___intr7___width 3
#define reg_gio_rw_intr_cfg_offset 120

/* Register rw_intr_pins, scope gio, type rw */
#define reg_gio_rw_intr_pins___intr0___lsb 0
#define reg_gio_rw_intr_pins___intr0___width 4
#define reg_gio_rw_intr_pins___intr1___lsb 4
#define reg_gio_rw_intr_pins___intr1___width 4
#define reg_gio_rw_intr_pins___intr2___lsb 8
#define reg_gio_rw_intr_pins___intr2___width 4
#define reg_gio_rw_intr_pins___intr3___lsb 12
#define reg_gio_rw_intr_pins___intr3___width 4
#define reg_gio_rw_intr_pins___intr4___lsb 16
#define reg_gio_rw_intr_pins___intr4___width 4
#define reg_gio_rw_intr_pins___intr5___lsb 20
#define reg_gio_rw_intr_pins___intr5___width 4
#define reg_gio_rw_intr_pins___intr6___lsb 24
#define reg_gio_rw_intr_pins___intr6___width 4
#define reg_gio_rw_intr_pins___intr7___lsb 28
#define reg_gio_rw_intr_pins___intr7___width 4
#define reg_gio_rw_intr_pins_offset 124

/* Register rw_intr_mask, scope gio, type rw */
#define reg_gio_rw_intr_mask___intr0___lsb 0
#define reg_gio_rw_intr_mask___intr0___width 1
#define reg_gio_rw_intr_mask___intr0___bit 0
#define reg_gio_rw_intr_mask___intr1___lsb 1
#define reg_gio_rw_intr_mask___intr1___width 1
#define reg_gio_rw_intr_mask___intr1___bit 1
#define reg_gio_rw_intr_mask___intr2___lsb 2
#define reg_gio_rw_intr_mask___intr2___width 1
#define reg_gio_rw_intr_mask___intr2___bit 2
#define reg_gio_rw_intr_mask___intr3___lsb 3
#define reg_gio_rw_intr_mask___intr3___width 1
#define reg_gio_rw_intr_mask___intr3___bit 3
#define reg_gio_rw_intr_mask___intr4___lsb 4
#define reg_gio_rw_intr_mask___intr4___width 1
#define reg_gio_rw_intr_mask___intr4___bit 4
#define reg_gio_rw_intr_mask___intr5___lsb 5
#define reg_gio_rw_intr_mask___intr5___width 1
#define reg_gio_rw_intr_mask___intr5___bit 5
#define reg_gio_rw_intr_mask___intr6___lsb 6
#define reg_gio_rw_intr_mask___intr6___width 1
#define reg_gio_rw_intr_mask___intr6___bit 6
#define reg_gio_rw_intr_mask___intr7___lsb 7
#define reg_gio_rw_intr_mask___intr7___width 1
#define reg_gio_rw_intr_mask___intr7___bit 7
#define reg_gio_rw_intr_mask___i2c0_done___lsb 8
#define reg_gio_rw_intr_mask___i2c0_done___width 1
#define reg_gio_rw_intr_mask___i2c0_done___bit 8
#define reg_gio_rw_intr_mask___i2c1_done___lsb 9
#define reg_gio_rw_intr_mask___i2c1_done___width 1
#define reg_gio_rw_intr_mask___i2c1_done___bit 9
#define reg_gio_rw_intr_mask_offset 128

/* Register rw_ack_intr, scope gio, type rw */
#define reg_gio_rw_ack_intr___intr0___lsb 0
#define reg_gio_rw_ack_intr___intr0___width 1
#define reg_gio_rw_ack_intr___intr0___bit 0
#define reg_gio_rw_ack_intr___intr1___lsb 1
#define reg_gio_rw_ack_intr___intr1___width 1
#define reg_gio_rw_ack_intr___intr1___bit 1
#define reg_gio_rw_ack_intr___intr2___lsb 2
#define reg_gio_rw_ack_intr___intr2___width 1
#define reg_gio_rw_ack_intr___intr2___bit 2
#define reg_gio_rw_ack_intr___intr3___lsb 3
#define reg_gio_rw_ack_intr___intr3___width 1
#define reg_gio_rw_ack_intr___intr3___bit 3
#define reg_gio_rw_ack_intr___intr4___lsb 4
#define reg_gio_rw_ack_intr___intr4___width 1
#define reg_gio_rw_ack_intr___intr4___bit 4
#define reg_gio_rw_ack_intr___intr5___lsb 5
#define reg_gio_rw_ack_intr___intr5___width 1
#define reg_gio_rw_ack_intr___intr5___bit 5
#define reg_gio_rw_ack_intr___intr6___lsb 6
#define reg_gio_rw_ack_intr___intr6___width 1
#define reg_gio_rw_ack_intr___intr6___bit 6
#define reg_gio_rw_ack_intr___intr7___lsb 7
#define reg_gio_rw_ack_intr___intr7___width 1
#define reg_gio_rw_ack_intr___intr7___bit 7
#define reg_gio_rw_ack_intr___i2c0_done___lsb 8
#define reg_gio_rw_ack_intr___i2c0_done___width 1
#define reg_gio_rw_ack_intr___i2c0_done___bit 8
#define reg_gio_rw_ack_intr___i2c1_done___lsb 9
#define reg_gio_rw_ack_intr___i2c1_done___width 1
#define reg_gio_rw_ack_intr___i2c1_done___bit 9
#define reg_gio_rw_ack_intr_offset 132

/* Register r_intr, scope gio, type r */
#define reg_gio_r_intr___intr0___lsb 0
#define reg_gio_r_intr___intr0___width 1
#define reg_gio_r_intr___intr0___bit 0
#define reg_gio_r_intr___intr1___lsb 1
#define reg_gio_r_intr___intr1___width 1
#define reg_gio_r_intr___intr1___bit 1
#define reg_gio_r_intr___intr2___lsb 2
#define reg_gio_r_intr___intr2___width 1
#define reg_gio_r_intr___intr2___bit 2
#define reg_gio_r_intr___intr3___lsb 3
#define reg_gio_r_intr___intr3___width 1
#define reg_gio_r_intr___intr3___bit 3
#define reg_gio_r_intr___intr4___lsb 4
#define reg_gio_r_intr___intr4___width 1
#define reg_gio_r_intr___intr4___bit 4
#define reg_gio_r_intr___intr5___lsb 5
#define reg_gio_r_intr___intr5___width 1
#define reg_gio_r_intr___intr5___bit 5
#define reg_gio_r_intr___intr6___lsb 6
#define reg_gio_r_intr___intr6___width 1
#define reg_gio_r_intr___intr6___bit 6
#define reg_gio_r_intr___intr7___lsb 7
#define reg_gio_r_intr___intr7___width 1
#define reg_gio_r_intr___intr7___bit 7
#define reg_gio_r_intr___i2c0_done___lsb 8
#define reg_gio_r_intr___i2c0_done___width 1
#define reg_gio_r_intr___i2c0_done___bit 8
#define reg_gio_r_intr___i2c1_done___lsb 9
#define reg_gio_r_intr___i2c1_done___width 1
#define reg_gio_r_intr___i2c1_done___bit 9
#define reg_gio_r_intr_offset 136

/* Register r_masked_intr, scope gio, type r */
#define reg_gio_r_masked_intr___intr0___lsb 0
#define reg_gio_r_masked_intr___intr0___width 1
#define reg_gio_r_masked_intr___intr0___bit 0
#define reg_gio_r_masked_intr___intr1___lsb 1
#define reg_gio_r_masked_intr___intr1___width 1
#define reg_gio_r_masked_intr___intr1___bit 1
#define reg_gio_r_masked_intr___intr2___lsb 2
#define reg_gio_r_masked_intr___intr2___width 1
#define reg_gio_r_masked_intr___intr2___bit 2
#define reg_gio_r_masked_intr___intr3___lsb 3
#define reg_gio_r_masked_intr___intr3___width 1
#define reg_gio_r_masked_intr___intr3___bit 3
#define reg_gio_r_masked_intr___intr4___lsb 4
#define reg_gio_r_masked_intr___intr4___width 1
#define reg_gio_r_masked_intr___intr4___bit 4
#define reg_gio_r_masked_intr___intr5___lsb 5
#define reg_gio_r_masked_intr___intr5___width 1
#define reg_gio_r_masked_intr___intr5___bit 5
#define reg_gio_r_masked_intr___intr6___lsb 6
#define reg_gio_r_masked_intr___intr6___width 1
#define reg_gio_r_masked_intr___intr6___bit 6
#define reg_gio_r_masked_intr___intr7___lsb 7
#define reg_gio_r_masked_intr___intr7___width 1
#define reg_gio_r_masked_intr___intr7___bit 7
#define reg_gio_r_masked_intr___i2c0_done___lsb 8
#define reg_gio_r_masked_intr___i2c0_done___width 1
#define reg_gio_r_masked_intr___i2c0_done___bit 8
#define reg_gio_r_masked_intr___i2c1_done___lsb 9
#define reg_gio_r_masked_intr___i2c1_done___width 1
#define reg_gio_r_masked_intr___i2c1_done___bit 9
#define reg_gio_r_masked_intr_offset 140

/* Register rw_i2c0_start, scope gio, type rw */
#define reg_gio_rw_i2c0_start___run___lsb 0
#define reg_gio_rw_i2c0_start___run___width 1
#define reg_gio_rw_i2c0_start___run___bit 0
#define reg_gio_rw_i2c0_start_offset 144

/* Register rw_i2c0_cfg, scope gio, type rw */
#define reg_gio_rw_i2c0_cfg___en___lsb 0
#define reg_gio_rw_i2c0_cfg___en___width 1
#define reg_gio_rw_i2c0_cfg___en___bit 0
#define reg_gio_rw_i2c0_cfg___bit_order___lsb 1
#define reg_gio_rw_i2c0_cfg___bit_order___width 1
#define reg_gio_rw_i2c0_cfg___bit_order___bit 1
#define reg_gio_rw_i2c0_cfg___scl_io___lsb 2
#define reg_gio_rw_i2c0_cfg___scl_io___width 1
#define reg_gio_rw_i2c0_cfg___scl_io___bit 2
#define reg_gio_rw_i2c0_cfg___scl_inv___lsb 3
#define reg_gio_rw_i2c0_cfg___scl_inv___width 1
#define reg_gio_rw_i2c0_cfg___scl_inv___bit 3
#define reg_gio_rw_i2c0_cfg___sda_io___lsb 4
#define reg_gio_rw_i2c0_cfg___sda_io___width 1
#define reg_gio_rw_i2c0_cfg___sda_io___bit 4
#define reg_gio_rw_i2c0_cfg___sda_idle___lsb 5
#define reg_gio_rw_i2c0_cfg___sda_idle___width 1
#define reg_gio_rw_i2c0_cfg___sda_idle___bit 5
#define reg_gio_rw_i2c0_cfg_offset 148

/* Register rw_i2c0_ctrl, scope gio, type rw */
#define reg_gio_rw_i2c0_ctrl___trf_bits___lsb 0
#define reg_gio_rw_i2c0_ctrl___trf_bits___width 6
#define reg_gio_rw_i2c0_ctrl___switch_dir___lsb 6
#define reg_gio_rw_i2c0_ctrl___switch_dir___width 6
#define reg_gio_rw_i2c0_ctrl___extra_start___lsb 12
#define reg_gio_rw_i2c0_ctrl___extra_start___width 3
#define reg_gio_rw_i2c0_ctrl___early_end___lsb 15
#define reg_gio_rw_i2c0_ctrl___early_end___width 1
#define reg_gio_rw_i2c0_ctrl___early_end___bit 15
#define reg_gio_rw_i2c0_ctrl___start_stop___lsb 16
#define reg_gio_rw_i2c0_ctrl___start_stop___width 1
#define reg_gio_rw_i2c0_ctrl___start_stop___bit 16
#define reg_gio_rw_i2c0_ctrl___ack_dir0___lsb 17
#define reg_gio_rw_i2c0_ctrl___ack_dir0___width 1
#define reg_gio_rw_i2c0_ctrl___ack_dir0___bit 17
#define reg_gio_rw_i2c0_ctrl___ack_dir1___lsb 18
#define reg_gio_rw_i2c0_ctrl___ack_dir1___width 1
#define reg_gio_rw_i2c0_ctrl___ack_dir1___bit 18
#define reg_gio_rw_i2c0_ctrl___ack_dir2___lsb 19
#define reg_gio_rw_i2c0_ctrl___ack_dir2___width 1
#define reg_gio_rw_i2c0_ctrl___ack_dir2___bit 19
#define reg_gio_rw_i2c0_ctrl___ack_dir3___lsb 20
#define reg_gio_rw_i2c0_ctrl___ack_dir3___width 1
#define reg_gio_rw_i2c0_ctrl___ack_dir3___bit 20
#define reg_gio_rw_i2c0_ctrl___ack_dir4___lsb 21
#define reg_gio_rw_i2c0_ctrl___ack_dir4___width 1
#define reg_gio_rw_i2c0_ctrl___ack_dir4___bit 21
#define reg_gio_rw_i2c0_ctrl___ack_dir5___lsb 22
#define reg_gio_rw_i2c0_ctrl___ack_dir5___width 1
#define reg_gio_rw_i2c0_ctrl___ack_dir5___bit 22
#define reg_gio_rw_i2c0_ctrl___ack_bit___lsb 23
#define reg_gio_rw_i2c0_ctrl___ack_bit___width 1
#define reg_gio_rw_i2c0_ctrl___ack_bit___bit 23
#define reg_gio_rw_i2c0_ctrl___start_bit___lsb 24
#define reg_gio_rw_i2c0_ctrl___start_bit___width 1
#define reg_gio_rw_i2c0_ctrl___start_bit___bit 24
#define reg_gio_rw_i2c0_ctrl___freq___lsb 25
#define reg_gio_rw_i2c0_ctrl___freq___width 2
#define reg_gio_rw_i2c0_ctrl_offset 152

/* Register rw_i2c0_data, scope gio, type rw */
#define reg_gio_rw_i2c0_data___data0___lsb 0
#define reg_gio_rw_i2c0_data___data0___width 8
#define reg_gio_rw_i2c0_data___data1___lsb 8
#define reg_gio_rw_i2c0_data___data1___width 8
#define reg_gio_rw_i2c0_data___data2___lsb 16
#define reg_gio_rw_i2c0_data___data2___width 8
#define reg_gio_rw_i2c0_data___data3___lsb 24
#define reg_gio_rw_i2c0_data___data3___width 8
#define reg_gio_rw_i2c0_data_offset 156

/* Register rw_i2c0_data2, scope gio, type rw */
#define reg_gio_rw_i2c0_data2___data4___lsb 0
#define reg_gio_rw_i2c0_data2___data4___width 8
#define reg_gio_rw_i2c0_data2___data5___lsb 8
#define reg_gio_rw_i2c0_data2___data5___width 8
#define reg_gio_rw_i2c0_data2___start_val___lsb 16
#define reg_gio_rw_i2c0_data2___start_val___width 6
#define reg_gio_rw_i2c0_data2___ack_val___lsb 22
#define reg_gio_rw_i2c0_data2___ack_val___width 6
#define reg_gio_rw_i2c0_data2_offset 160

/* Register rw_i2c1_start, scope gio, type rw */
#define reg_gio_rw_i2c1_start___run___lsb 0
#define reg_gio_rw_i2c1_start___run___width 1
#define reg_gio_rw_i2c1_start___run___bit 0
#define reg_gio_rw_i2c1_start_offset 164

/* Register rw_i2c1_cfg, scope gio, type rw */
#define reg_gio_rw_i2c1_cfg___en___lsb 0
#define reg_gio_rw_i2c1_cfg___en___width 1
#define reg_gio_rw_i2c1_cfg___en___bit 0
#define reg_gio_rw_i2c1_cfg___bit_order___lsb 1
#define reg_gio_rw_i2c1_cfg___bit_order___width 1
#define reg_gio_rw_i2c1_cfg___bit_order___bit 1
#define reg_gio_rw_i2c1_cfg___scl_io___lsb 2
#define reg_gio_rw_i2c1_cfg___scl_io___width 1
#define reg_gio_rw_i2c1_cfg___scl_io___bit 2
#define reg_gio_rw_i2c1_cfg___scl_inv___lsb 3
#define reg_gio_rw_i2c1_cfg___scl_inv___width 1
#define reg_gio_rw_i2c1_cfg___scl_inv___bit 3
#define reg_gio_rw_i2c1_cfg___sda0_io___lsb 4
#define reg_gio_rw_i2c1_cfg___sda0_io___width 1
#define reg_gio_rw_i2c1_cfg___sda0_io___bit 4
#define reg_gio_rw_i2c1_cfg___sda0_idle___lsb 5
#define reg_gio_rw_i2c1_cfg___sda0_idle___width 1
#define reg_gio_rw_i2c1_cfg___sda0_idle___bit 5
#define reg_gio_rw_i2c1_cfg___sda1_io___lsb 6
#define reg_gio_rw_i2c1_cfg___sda1_io___width 1
#define reg_gio_rw_i2c1_cfg___sda1_io___bit 6
#define reg_gio_rw_i2c1_cfg___sda1_idle___lsb 7
#define reg_gio_rw_i2c1_cfg___sda1_idle___width 1
#define reg_gio_rw_i2c1_cfg___sda1_idle___bit 7
#define reg_gio_rw_i2c1_cfg___sda2_io___lsb 8
#define reg_gio_rw_i2c1_cfg___sda2_io___width 1
#define reg_gio_rw_i2c1_cfg___sda2_io___bit 8
#define reg_gio_rw_i2c1_cfg___sda2_idle___lsb 9
#define reg_gio_rw_i2c1_cfg___sda2_idle___width 1
#define reg_gio_rw_i2c1_cfg___sda2_idle___bit 9
#define reg_gio_rw_i2c1_cfg___sda3_io___lsb 10
#define reg_gio_rw_i2c1_cfg___sda3_io___width 1
#define reg_gio_rw_i2c1_cfg___sda3_io___bit 10
#define reg_gio_rw_i2c1_cfg___sda3_idle___lsb 11
#define reg_gio_rw_i2c1_cfg___sda3_idle___width 1
#define reg_gio_rw_i2c1_cfg___sda3_idle___bit 11
#define reg_gio_rw_i2c1_cfg___sda_sel___lsb 12
#define reg_gio_rw_i2c1_cfg___sda_sel___width 2
#define reg_gio_rw_i2c1_cfg___sen_idle___lsb 14
#define reg_gio_rw_i2c1_cfg___sen_idle___width 1
#define reg_gio_rw_i2c1_cfg___sen_idle___bit 14
#define reg_gio_rw_i2c1_cfg___sen_inv___lsb 15
#define reg_gio_rw_i2c1_cfg___sen_inv___width 1
#define reg_gio_rw_i2c1_cfg___sen_inv___bit 15
#define reg_gio_rw_i2c1_cfg___sen_sel___lsb 16
#define reg_gio_rw_i2c1_cfg___sen_sel___width 2
#define reg_gio_rw_i2c1_cfg_offset 168

/* Register rw_i2c1_ctrl, scope gio, type rw */
#define reg_gio_rw_i2c1_ctrl___trf_bits___lsb 0
#define reg_gio_rw_i2c1_ctrl___trf_bits___width 6
#define reg_gio_rw_i2c1_ctrl___switch_dir___lsb 6
#define reg_gio_rw_i2c1_ctrl___switch_dir___width 6
#define reg_gio_rw_i2c1_ctrl___extra_start___lsb 12
#define reg_gio_rw_i2c1_ctrl___extra_start___width 3
#define reg_gio_rw_i2c1_ctrl___early_end___lsb 15
#define reg_gio_rw_i2c1_ctrl___early_end___width 1
#define reg_gio_rw_i2c1_ctrl___early_end___bit 15
#define reg_gio_rw_i2c1_ctrl___start_stop___lsb 16
#define reg_gio_rw_i2c1_ctrl___start_stop___width 1
#define reg_gio_rw_i2c1_ctrl___start_stop___bit 16
#define reg_gio_rw_i2c1_ctrl___ack_dir0___lsb 17
#define reg_gio_rw_i2c1_ctrl___ack_dir0___width 1
#define reg_gio_rw_i2c1_ctrl___ack_dir0___bit 17
#define reg_gio_rw_i2c1_ctrl___ack_dir1___lsb 18
#define reg_gio_rw_i2c1_ctrl___ack_dir1___width 1
#define reg_gio_rw_i2c1_ctrl___ack_dir1___bit 18
#define reg_gio_rw_i2c1_ctrl___ack_dir2___lsb 19
#define reg_gio_rw_i2c1_ctrl___ack_dir2___width 1
#define reg_gio_rw_i2c1_ctrl___ack_dir2___bit 19
#define reg_gio_rw_i2c1_ctrl___ack_dir3___lsb 20
#define reg_gio_rw_i2c1_ctrl___ack_dir3___width 1
#define reg_gio_rw_i2c1_ctrl___ack_dir3___bit 20
#define reg_gio_rw_i2c1_ctrl___ack_dir4___lsb 21
#define reg_gio_rw_i2c1_ctrl___ack_dir4___width 1
#define reg_gio_rw_i2c1_ctrl___ack_dir4___bit 21
#define reg_gio_rw_i2c1_ctrl___ack_dir5___lsb 22
#define reg_gio_rw_i2c1_ctrl___ack_dir5___width 1
#define reg_gio_rw_i2c1_ctrl___ack_dir5___bit 22
#define reg_gio_rw_i2c1_ctrl___ack_bit___lsb 23
#define reg_gio_rw_i2c1_ctrl___ack_bit___width 1
#define reg_gio_rw_i2c1_ctrl___ack_bit___bit 23
#define reg_gio_rw_i2c1_ctrl___start_bit___lsb 24
#define reg_gio_rw_i2c1_ctrl___start_bit___width 1
#define reg_gio_rw_i2c1_ctrl___start_bit___bit 24
#define reg_gio_rw_i2c1_ctrl___freq___lsb 25
#define reg_gio_rw_i2c1_ctrl___freq___width 2
#define reg_gio_rw_i2c1_ctrl_offset 172

/* Register rw_i2c1_data, scope gio, type rw */
#define reg_gio_rw_i2c1_data___data0___lsb 0
#define reg_gio_rw_i2c1_data___data0___width 8
#define reg_gio_rw_i2c1_data___data1___lsb 8
#define reg_gio_rw_i2c1_data___data1___width 8
#define reg_gio_rw_i2c1_data___data2___lsb 16
#define reg_gio_rw_i2c1_data___data2___width 8
#define reg_gio_rw_i2c1_data___data3___lsb 24
#define reg_gio_rw_i2c1_data___data3___width 8
#define reg_gio_rw_i2c1_data_offset 176

/* Register rw_i2c1_data2, scope gio, type rw */
#define reg_gio_rw_i2c1_data2___data4___lsb 0
#define reg_gio_rw_i2c1_data2___data4___width 8
#define reg_gio_rw_i2c1_data2___data5___lsb 8
#define reg_gio_rw_i2c1_data2___data5___width 8
#define reg_gio_rw_i2c1_data2___start_val___lsb 16
#define reg_gio_rw_i2c1_data2___start_val___width 6
#define reg_gio_rw_i2c1_data2___ack_val___lsb 22
#define reg_gio_rw_i2c1_data2___ack_val___width 6
#define reg_gio_rw_i2c1_data2_offset 180

/* Register r_ppwm_stat, scope gio, type r */
#define reg_gio_r_ppwm_stat___freq___lsb 0
#define reg_gio_r_ppwm_stat___freq___width 2
#define reg_gio_r_ppwm_stat_offset 184

/* Register rw_ppwm_data, scope gio, type rw */
#define reg_gio_rw_ppwm_data___data___lsb 0
#define reg_gio_rw_ppwm_data___data___width 8
#define reg_gio_rw_ppwm_data_offset 188

/* Register rw_pwm0_ctrl, scope gio, type rw */
#define reg_gio_rw_pwm0_ctrl___mode___lsb 0
#define reg_gio_rw_pwm0_ctrl___mode___width 2
#define reg_gio_rw_pwm0_ctrl___ccd_override___lsb 2
#define reg_gio_rw_pwm0_ctrl___ccd_override___width 1
#define reg_gio_rw_pwm0_ctrl___ccd_override___bit 2
#define reg_gio_rw_pwm0_ctrl___ccd_val___lsb 3
#define reg_gio_rw_pwm0_ctrl___ccd_val___width 1
#define reg_gio_rw_pwm0_ctrl___ccd_val___bit 3
#define reg_gio_rw_pwm0_ctrl_offset 192

/* Register rw_pwm0_var, scope gio, type rw */
#define reg_gio_rw_pwm0_var___lo___lsb 0
#define reg_gio_rw_pwm0_var___lo___width 13
#define reg_gio_rw_pwm0_var___hi___lsb 13
#define reg_gio_rw_pwm0_var___hi___width 13
#define reg_gio_rw_pwm0_var_offset 196

/* Register rw_pwm0_data, scope gio, type rw */
#define reg_gio_rw_pwm0_data___data___lsb 0
#define reg_gio_rw_pwm0_data___data___width 8
#define reg_gio_rw_pwm0_data_offset 200

/* Register rw_pwm1_ctrl, scope gio, type rw */
#define reg_gio_rw_pwm1_ctrl___mode___lsb 0
#define reg_gio_rw_pwm1_ctrl___mode___width 2
#define reg_gio_rw_pwm1_ctrl___ccd_override___lsb 2
#define reg_gio_rw_pwm1_ctrl___ccd_override___width 1
#define reg_gio_rw_pwm1_ctrl___ccd_override___bit 2
#define reg_gio_rw_pwm1_ctrl___ccd_val___lsb 3
#define reg_gio_rw_pwm1_ctrl___ccd_val___width 1
#define reg_gio_rw_pwm1_ctrl___ccd_val___bit 3
#define reg_gio_rw_pwm1_ctrl_offset 204

/* Register rw_pwm1_var, scope gio, type rw */
#define reg_gio_rw_pwm1_var___lo___lsb 0
#define reg_gio_rw_pwm1_var___lo___width 13
#define reg_gio_rw_pwm1_var___hi___lsb 13
#define reg_gio_rw_pwm1_var___hi___width 13
#define reg_gio_rw_pwm1_var_offset 208

/* Register rw_pwm1_data, scope gio, type rw */
#define reg_gio_rw_pwm1_data___data___lsb 0
#define reg_gio_rw_pwm1_data___data___width 8
#define reg_gio_rw_pwm1_data_offset 212

/* Register rw_pwm2_ctrl, scope gio, type rw */
#define reg_gio_rw_pwm2_ctrl___mode___lsb 0
#define reg_gio_rw_pwm2_ctrl___mode___width 2
#define reg_gio_rw_pwm2_ctrl___ccd_override___lsb 2
#define reg_gio_rw_pwm2_ctrl___ccd_override___width 1
#define reg_gio_rw_pwm2_ctrl___ccd_override___bit 2
#define reg_gio_rw_pwm2_ctrl___ccd_val___lsb 3
#define reg_gio_rw_pwm2_ctrl___ccd_val___width 1
#define reg_gio_rw_pwm2_ctrl___ccd_val___bit 3
#define reg_gio_rw_pwm2_ctrl_offset 216

/* Register rw_pwm2_var, scope gio, type rw */
#define reg_gio_rw_pwm2_var___lo___lsb 0
#define reg_gio_rw_pwm2_var___lo___width 13
#define reg_gio_rw_pwm2_var___hi___lsb 13
#define reg_gio_rw_pwm2_var___hi___width 13
#define reg_gio_rw_pwm2_var_offset 220

/* Register rw_pwm2_data, scope gio, type rw */
#define reg_gio_rw_pwm2_data___data___lsb 0
#define reg_gio_rw_pwm2_data___data___width 8
#define reg_gio_rw_pwm2_data_offset 224

/* Register rw_pwm_in_cfg, scope gio, type rw */
#define reg_gio_rw_pwm_in_cfg___pin___lsb 0
#define reg_gio_rw_pwm_in_cfg___pin___width 3
#define reg_gio_rw_pwm_in_cfg_offset 228

/* Register r_pwm_in_lo, scope gio, type r */
#define reg_gio_r_pwm_in_lo___data___lsb 0
#define reg_gio_r_pwm_in_lo___data___width 32
#define reg_gio_r_pwm_in_lo_offset 232

/* Register r_pwm_in_hi, scope gio, type r */
#define reg_gio_r_pwm_in_hi___data___lsb 0
#define reg_gio_r_pwm_in_hi___data___width 32
#define reg_gio_r_pwm_in_hi_offset 236

/* Register r_pwm_in_cnt, scope gio, type r */
#define reg_gio_r_pwm_in_cnt___data___lsb 0
#define reg_gio_r_pwm_in_cnt___data___width 32
#define reg_gio_r_pwm_in_cnt_offset 240


/* Constants */
#define regk_gio_anyedge                          0x00000007
#define regk_gio_f100k                            0x00000000
#define regk_gio_f1562                            0x00000000
#define regk_gio_f195                             0x00000003
#define regk_gio_f1m                              0x00000002
#define regk_gio_f390                             0x00000002
#define regk_gio_f400k                            0x00000001
#define regk_gio_f5m                              0x00000003
#define regk_gio_f781                             0x00000001
#define regk_gio_hi                               0x00000001
#define regk_gio_in                               0x00000000
#define regk_gio_intr_pa0                         0x00000000
#define regk_gio_intr_pa1                         0x00000000
#define regk_gio_intr_pa10                        0x00000001
#define regk_gio_intr_pa11                        0x00000001
#define regk_gio_intr_pa12                        0x00000001
#define regk_gio_intr_pa13                        0x00000001
#define regk_gio_intr_pa14                        0x00000001
#define regk_gio_intr_pa15                        0x00000001
#define regk_gio_intr_pa16                        0x00000002
#define regk_gio_intr_pa17                        0x00000002
#define regk_gio_intr_pa18                        0x00000002
#define regk_gio_intr_pa19                        0x00000002
#define regk_gio_intr_pa2                         0x00000000
#define regk_gio_intr_pa20                        0x00000002
#define regk_gio_intr_pa21                        0x00000002
#define regk_gio_intr_pa22                        0x00000002
#define regk_gio_intr_pa23                        0x00000002
#define regk_gio_intr_pa24                        0x00000003
#define regk_gio_intr_pa25                        0x00000003
#define regk_gio_intr_pa26                        0x00000003
#define regk_gio_intr_pa27                        0x00000003
#define regk_gio_intr_pa28                        0x00000003
#define regk_gio_intr_pa29                        0x00000003
#define regk_gio_intr_pa3                         0x00000000
#define regk_gio_intr_pa30                        0x00000003
#define regk_gio_intr_pa31                        0x00000003
#define regk_gio_intr_pa4                         0x00000000
#define regk_gio_intr_pa5                         0x00000000
#define regk_gio_intr_pa6                         0x00000000
#define regk_gio_intr_pa7                         0x00000000
#define regk_gio_intr_pa8                         0x00000001
#define regk_gio_intr_pa9                         0x00000001
#define regk_gio_intr_pb0                         0x00000004
#define regk_gio_intr_pb1                         0x00000004
#define regk_gio_intr_pb10                        0x00000005
#define regk_gio_intr_pb11                        0x00000005
#define regk_gio_intr_pb12                        0x00000005
#define regk_gio_intr_pb13                        0x00000005
#define regk_gio_intr_pb14                        0x00000005
#define regk_gio_intr_pb15                        0x00000005
#define regk_gio_intr_pb16                        0x00000006
#define regk_gio_intr_pb17                        0x00000006
#define regk_gio_intr_pb18                        0x00000006
#define regk_gio_intr_pb19                        0x00000006
#define regk_gio_intr_pb2                         0x00000004
#define regk_gio_intr_pb20                        0x00000006
#define regk_gio_intr_pb21                        0x00000006
#define regk_gio_intr_pb22                        0x00000006
#define regk_gio_intr_pb23                        0x00000006
#define regk_gio_intr_pb24                        0x00000007
#define regk_gio_intr_pb25                        0x00000007
#define regk_gio_intr_pb26                        0x00000007
#define regk_gio_intr_pb27                        0x00000007
#define regk_gio_intr_pb28                        0x00000007
#define regk_gio_intr_pb29                        0x00000007
#define regk_gio_intr_pb3                         0x00000004
#define regk_gio_intr_pb30                        0x00000007
#define regk_gio_intr_pb31                        0x00000007
#define regk_gio_intr_pb4                         0x00000004
#define regk_gio_intr_pb5                         0x00000004
#define regk_gio_intr_pb6                         0x00000004
#define regk_gio_intr_pb7                         0x00000004
#define regk_gio_intr_pb8                         0x00000005
#define regk_gio_intr_pb9                         0x00000005
#define regk_gio_intr_pc0                         0x00000008
#define regk_gio_intr_pc1                         0x00000008
#define regk_gio_intr_pc10                        0x00000009
#define regk_gio_intr_pc11                        0x00000009
#define regk_gio_intr_pc12                        0x00000009
#define regk_gio_intr_pc13                        0x00000009
#define regk_gio_intr_pc14                        0x00000009
#define regk_gio_intr_pc15                        0x00000009
#define regk_gio_intr_pc2                         0x00000008
#define regk_gio_intr_pc3                         0x00000008
#define regk_gio_intr_pc4                         0x00000008
#define regk_gio_intr_pc5                         0x00000008
#define regk_gio_intr_pc6                         0x00000008
#define regk_gio_intr_pc7                         0x00000008
#define regk_gio_intr_pc8                         0x00000009
#define regk_gio_intr_pc9                         0x00000009
#define regk_gio_intr_pd0                         0x0000000c
#define regk_gio_intr_pd1                         0x0000000c
#define regk_gio_intr_pd10                        0x0000000d
#define regk_gio_intr_pd11                        0x0000000d
#define regk_gio_intr_pd12                        0x0000000d
#define regk_gio_intr_pd13                        0x0000000d
#define regk_gio_intr_pd14                        0x0000000d
#define regk_gio_intr_pd15                        0x0000000d
#define regk_gio_intr_pd16                        0x0000000e
#define regk_gio_intr_pd17                        0x0000000e
#define regk_gio_intr_pd18                        0x0000000e
#define regk_gio_intr_pd19                        0x0000000e
#define regk_gio_intr_pd2                         0x0000000c
#define regk_gio_intr_pd20                        0x0000000e
#define regk_gio_intr_pd21                        0x0000000e
#define regk_gio_intr_pd22                        0x0000000e
#define regk_gio_intr_pd23                        0x0000000e
#define regk_gio_intr_pd24                        0x0000000f
#define regk_gio_intr_pd25                        0x0000000f
#define regk_gio_intr_pd26                        0x0000000f
#define regk_gio_intr_pd27                        0x0000000f
#define regk_gio_intr_pd28                        0x0000000f
#define regk_gio_intr_pd29                        0x0000000f
#define regk_gio_intr_pd3                         0x0000000c
#define regk_gio_intr_pd30                        0x0000000f
#define regk_gio_intr_pd31                        0x0000000f
#define regk_gio_intr_pd4                         0x0000000c
#define regk_gio_intr_pd5                         0x0000000c
#define regk_gio_intr_pd6                         0x0000000c
#define regk_gio_intr_pd7                         0x0000000c
#define regk_gio_intr_pd8                         0x0000000d
#define regk_gio_intr_pd9                         0x0000000d
#define regk_gio_lo                               0x00000002
#define regk_gio_lsb                              0x00000000
#define regk_gio_msb                              0x00000001
#define regk_gio_negedge                          0x00000006
#define regk_gio_no                               0x00000000
#define regk_gio_no_switch                        0x0000003f
#define regk_gio_none                             0x00000007
#define regk_gio_off                              0x00000000
#define regk_gio_opendrain                        0x00000000
#define regk_gio_out                              0x00000001
#define regk_gio_posedge                          0x00000005
#define regk_gio_pwm_hfp                          0x00000002
#define regk_gio_pwm_pa0                          0x00000001
#define regk_gio_pwm_pa19                         0x00000004
#define regk_gio_pwm_pa6                          0x00000002
#define regk_gio_pwm_pa7                          0x00000003
#define regk_gio_pwm_pb26                         0x00000005
#define regk_gio_pwm_pd23                         0x00000006
#define regk_gio_pwm_pd31                         0x00000007
#define regk_gio_pwm_std                          0x00000001
#define regk_gio_pwm_var                          0x00000003
#define regk_gio_rw_i2c0_cfg_default              0x00000020
#define regk_gio_rw_i2c0_ctrl_default             0x00010000
#define regk_gio_rw_i2c0_start_default            0x00000000
#define regk_gio_rw_i2c1_cfg_default              0x00000aa0
#define regk_gio_rw_i2c1_ctrl_default             0x00010000
#define regk_gio_rw_i2c1_start_default            0x00000000
#define regk_gio_rw_intr_cfg_default              0x00000000
#define regk_gio_rw_intr_mask_default             0x00000000
#define regk_gio_rw_pa_oe_default                 0x00000000
#define regk_gio_rw_pb_oe_default                 0x00000000
#define regk_gio_rw_pc_oe_default                 0x00000000
#define regk_gio_rw_ppwm_data_default             0x00000000
#define regk_gio_rw_pwm0_ctrl_default             0x00000000
#define regk_gio_rw_pwm1_ctrl_default             0x00000000
#define regk_gio_rw_pwm2_ctrl_default             0x00000000
#define regk_gio_rw_pwm_in_cfg_default            0x00000000
#define regk_gio_sda0                             0x00000000
#define regk_gio_sda1                             0x00000001
#define regk_gio_sda2                             0x00000002
#define regk_gio_sda3                             0x00000003
#define regk_gio_sen                              0x00000000
#define regk_gio_set                              0x00000003
#define regk_gio_yes                              0x00000001
#endif /* __gio_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef __timer_defs_asm_h
#define __timer_defs_asm_h

/*
 * This file is autogenerated from
 *   file:           timer.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -outfile timer_defs_asm.h timer.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */

#ifndef REG_FIELD
#define REG_FIELD( scope, reg, field, value ) \
  REG_FIELD_X_( value, reg_##scope##_##reg##___##field##___lsb )
#define REG_FIELD_X_( value, shift ) ((value) << shift)
#endif

#ifndef REG_STATE
#define REG_STATE( scope, reg, field, symbolic_value ) \
  REG_STATE_X_( regk_##scope##_##symbolic_value, reg_##scope##_##reg##___##field##___lsb )
#define REG_STATE_X_( k, shift ) (k << shift)
#endif

#ifndef REG_MASK
#define REG_MASK( scope, reg, field ) \
  REG_MASK_X_( reg_##scope##_##reg##___##field##___width, reg_##scope##_##reg##___##field##___lsb )
#define REG_MASK_X_( width, lsb ) (((1 << width)-1) << lsb)
#endif

#ifndef REG_LSB
#define REG_LSB( scope, reg, field ) reg_##scope##_##reg##___##field##___lsb
#endif

#ifndef REG_BIT
#define REG_BIT( scope, reg, field ) reg_##scope##_##reg##___##field##___bit
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) REG_ADDR_X_(inst, reg_##scope##_##reg##_offset)
#define REG_ADDR_X_( inst, offs ) ((inst) + offs)
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
         REG_ADDR_VECT_X_(inst, reg_##scope##_##reg##_offset, index, \
			 STRIDE_##scope##_##reg )
#define REG_ADDR_VECT_X_( inst, offs, index, stride ) \
                          ((inst) + offs + (index) * stride)
#endif

/* Register rw_tmr0_div, scope timer, type rw */
#define reg_timer_rw_tmr0_div_offset 0

/* Register r_tmr0_data, scope timer, type r */
#define reg_timer_r_tmr0_data_offset 4

/* Register rw_tmr0_ctrl, scope timer, type rw */
#define reg_timer_rw_tmr0_ctrl___op___lsb 0
#define reg_timer_rw_tmr0_ctrl___op___width 2
#define reg_timer_rw_tmr0_ctrl___freq___lsb 2
#define reg_timer_rw_tmr0_ctrl___freq___width 3
#define reg_timer_rw_tmr0_ctrl_offset 8

/* Register rw_tmr1_div, scope timer, type rw */
#define reg_timer_rw_tmr1_div_offset 16

/* Register r_tmr1_data, scope timer, type r */
#define reg_timer_r_tmr1_data_offset 20

/* Register rw_tmr1_ctrl, scope timer, type rw */
#define reg_timer_rw_tmr1_ctrl___op___lsb 0
#define reg_timer_rw_tmr1_ctrl___op___width 2
#define reg_timer_rw_tmr1_ctrl___freq___lsb 2
#define reg_timer_rw_tmr1_ctrl___freq___width 3
#define reg_timer_rw_tmr1_ctrl_offset 24

/* Register rs_cnt_data, scope timer, type rs */
#define reg_timer_rs_cnt_data___tmr___lsb 0
#define reg_timer_rs_cnt_data___tmr___width 24
#define reg_timer_rs_cnt_data___cnt___lsb 24
#define reg_timer_rs_cnt_data___cnt___width 8
#define reg_timer_rs_cnt_data_offset 32

/* Register r_cnt_data, scope timer, type r */
#define reg_timer_r_cnt_data___tmr___lsb 0
#define reg_timer_r_cnt_data___tmr___width 24
#define reg_timer_r_cnt_data___cnt___lsb 24
#define reg_timer_r_cnt_data___cnt___width 8
#define reg_timer_r_cnt_data_offset 36

/* Register rw_cnt_cfg, scope timer, type rw */
#define reg_timer_rw_cnt_cfg___clk___lsb 0
#define reg_timer_rw_cnt_cfg___clk___width 2
#define reg_timer_rw_cnt_cfg_offset 40

/* Register rw_trig, scope timer, type rw */
#define reg_timer_rw_trig_offset 48

/* Register rw_trig_cfg, scope timer, type rw */
#define reg_timer_rw_trig_cfg___tmr___lsb 0
#define reg_timer_rw_trig_cfg___tmr___width 2
#define reg_timer_rw_trig_cfg_offset 52

/* Register r_time, scope timer, type r */
#define reg_timer_r_time_offset 56

/* Register rw_out, scope timer, type rw */
#define reg_timer_rw_out___tmr___lsb 0
#define reg_timer_rw_out___tmr___width 2
#define reg_timer_rw_out_offset 60

/* Register rw_wd_ctrl, scope timer, type rw */
#define reg_timer_rw_wd_ctrl___cnt___lsb 0
#define reg_timer_rw_wd_ctrl___cnt___width 8
#define reg_timer_rw_wd_ctrl___cmd___lsb 8
#define reg_timer_rw_wd_ctrl___cmd___width 1
#define reg_timer_rw_wd_ctrl___cmd___bit 8
#define reg_timer_rw_wd_ctrl___key___lsb 9
#define reg_timer_rw_wd_ctrl___key___width 7
#define reg_timer_rw_wd_ctrl_offset 64

/* Register r_wd_stat, scope timer, type r */
#define reg_timer_r_wd_stat___cnt___lsb 0
#define reg_timer_r_wd_stat___cnt___width 8
#define reg_timer_r_wd_stat___cmd___lsb 8
#define reg_timer_r_wd_stat___cmd___width 1
#define reg_timer_r_wd_stat___cmd___bit 8
#define reg_timer_r_wd_stat_offset 68

/* Register rw_intr_mask, scope timer, type rw */
#define reg_timer_rw_intr_mask___tmr0___lsb 0
#define reg_timer_rw_intr_mask___tmr0___width 1
#define reg_timer_rw_intr_mask___tmr0___bit 0
#define reg_timer_rw_intr_mask___tmr1___lsb 1
#define reg_timer_rw_intr_mask___tmr1___width 1
#define reg_timer_rw_intr_mask___tmr1___bit 1
#define reg_timer_rw_intr_mask___cnt___lsb 2
#define reg_timer_rw_intr_mask___cnt___width 1
#define reg_timer_rw_intr_mask___cnt___bit 2
#define reg_timer_rw_intr_mask___trig___lsb 3
#define reg_timer_rw_intr_mask___trig___width 1
#define reg_timer_rw_intr_mask___trig___bit 3
#define reg_timer_rw_intr_mask_offset 72

/* Register rw_ack_intr, scope timer, type rw */
#define reg_timer_rw_ack_intr___tmr0___lsb 0
#define reg_timer_rw_ack_intr___tmr0___width 1
#define reg_timer_rw_ack_intr___tmr0___bit 0
#define reg_timer_rw_ack_intr___tmr1___lsb 1
#define reg_timer_rw_ack_intr___tmr1___width 1
#define reg_timer_rw_ack_intr___tmr1___bit 1
#define reg_timer_rw_ack_intr___cnt___lsb 2
#define reg_timer_rw_ack_intr___cnt___width 1
#define reg_timer_rw_ack_intr___cnt___bit 2
#define reg_timer_rw_ack_intr___trig___lsb 3
#define reg_timer_rw_ack_intr___trig___width 1
#define reg_timer_rw_ack_intr___trig___bit 3
#define reg_timer_rw_ack_intr_offset 76

/* Register r_intr, scope timer, type r */
#define reg_timer_r_intr___tmr0___lsb 0
#define reg_timer_r_intr___tmr0___width 1
#define reg_timer_r_intr___tmr0___bit 0
#define reg_timer_r_intr___tmr1___lsb 1
#define reg_timer_r_intr___tmr1___width 1
#define reg_timer_r_intr___tmr1___bit 1
#define reg_timer_r_intr___cnt___lsb 2
#define reg_timer_r_intr___cnt___width 1
#define reg_timer_r_intr___cnt___bit 2
#define reg_timer_r_intr___trig___lsb 3
#define reg_timer_r_intr___trig___width 1
#define reg_timer_r_intr___trig___bit 3
#define reg_timer_r_intr_offset 80

/* Register r_masked_intr, scope timer, type r */
#define reg_timer_r_masked_intr___tmr0___lsb 0
#define reg_timer_r_masked_intr___tmr0___width 1
#define reg_timer_r_masked_intr___tmr0___bit 0
#define reg_timer_r_masked_intr___tmr1___lsb 1
#define reg_timer_r_masked_intr___tmr1___width 1
#define reg_timer_r_masked_intr___tmr1___bit 1
#define reg_timer_r_masked_intr___cnt___lsb 2
#define reg_timer_r_masked_intr___cnt___width 1
#define reg_timer_r_masked_intr___cnt___bit 2
#define reg_timer_r_masked_intr___trig___lsb 3
#define reg_timer_r_masked_intr___trig___width 1
#define reg_timer_r_masked_intr___trig___bit 3
#define reg_timer_r_masked_intr_offset 84

/* Register rw_test, scope timer, type rw */
#define reg_timer_rw_test___dis___lsb 0
#define reg_timer_rw_test___dis___width 1
#define reg_timer_rw_test___dis___bit 0
#define reg_timer_rw_test___en___lsb 1
#define reg_timer_rw_test___en___width 1
#define reg_timer_rw_test___en___bit 1
#define reg_timer_rw_test_offset 88


/* Constants */
#define regk_timer_ext                            0x00000001
#define regk_timer_f100                           0x00000007
#define regk_timer_f29_493                        0x00000004
#define regk_timer_f32                            0x00000005
#define regk_timer_f32_768                        0x00000006
#define regk_timer_f90                            0x00000003
#define regk_timer_hold                           0x00000001
#define regk_timer_ld                             0x00000000
#define regk_timer_no                             0x00000000
#define regk_timer_off                            0x00000000
#define regk_timer_run                            0x00000002
#define regk_timer_rw_cnt_cfg_default             0x00000000
#define regk_timer_rw_intr_mask_default           0x00000000
#define regk_timer_rw_out_default                 0x00000000
#define regk_timer_rw_test_default                0x00000000
#define regk_timer_rw_tmr0_ctrl_default           0x00000000
#define regk_timer_rw_tmr1_ctrl_default           0x00000000
#define regk_timer_rw_trig_cfg_default            0x00000000
#define regk_timer_start                          0x00000001
#define regk_timer_stop                           0x00000000
#define regk_timer_time                           0x00000001
#define regk_timer_tmr0                           0x00000002
#define regk_timer_tmr1                           0x00000003
#define regk_timer_vclk                           0x00000002
#define regk_timer_yes                            0x00000001
#endif /* __timer_defs_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef __reg_map_asm_h
#define __reg_map_asm_h

/*
 * This file is autogenerated from
 *   file:            reg.rmap
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -asm -base 0xb0000000 -map marb_bar.r marb_foo.r ccd_top.r ccd_stat.r ccd_tg.r ccd_dp.r ccd.r iop_sap_in.r iop_sap_out.r iop_sw_cfg.r iop_sw_cpu.r iop_sw_mpu.r iop_sw_spu.r iop_version.r iop_crc_par.r iop_dmc_in.r iop_dmc_out.r iop_fifo_in_extra.r iop_fifo_in.r iop_fifo_out_extra.r iop_fifo_out.r iop_mc.r iop_mpu.r iop_scrc_in.r iop_scrc_out.r iop_spu.r iop_timer_grp.r iop_trigger_grp.r iop.r -outfile reg_map_asm.h reg.rmap
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
#define regi_ccd                                  0xb0000000
#define regi_ccd_top                              0xb0000000
#define regi_ccd_dp                               0xb0000400
#define regi_ccd_stat                             0xb0000800
#define regi_ccd_tg                               0xb0001000
#define regi_cfg                                  0xb0002000
#define regi_clkgen                               0xb0004000
#define regi_ddr2_ctrl                            0xb0006000
#define regi_dma0                                 0xb0008000
#define regi_dma1                                 0xb000a000
#define regi_dma11                                0xb000c000
#define regi_dma2                                 0xb000e000
#define regi_dma3                                 0xb0010000
#define regi_dma4                                 0xb0012000
#define regi_dma5                                 0xb0014000
#define regi_dma6                                 0xb0016000
#define regi_dma7                                 0xb0018000
#define regi_dma9                                 0xb001a000
#define regi_eth                                  0xb001c000
#define regi_gio                                  0xb0020000
#define regi_h264                                 0xb0022000
#define regi_hist                                 0xb0026000
#define regi_iop                                  0xb0028000
#define regi_iop_version                          0xb0028000
#define regi_iop_fifo_in_extra                    0xb0028040
#define regi_iop_fifo_out_extra                   0xb0028080
#define regi_iop_trigger_grp0                     0xb00280c0
#define regi_iop_trigger_grp1                     0xb0028100
#define regi_iop_trigger_grp2                     0xb0028140
#define regi_iop_trigger_grp3                     0xb0028180
#define regi_iop_trigger_grp4                     0xb00281c0
#define regi_iop_trigger_grp5                     0xb0028200
#define regi_iop_trigger_grp6                     0xb0028240
#define regi_iop_trigger_grp7                     0xb0028280
#define regi_iop_crc_par                          0xb0028300
#define regi_iop_dmc_in                           0xb0028380
#define regi_iop_dmc_out                          0xb0028400
#define regi_iop_fifo_in                          0xb0028480
#define regi_iop_fifo_out                         0xb0028500
#define regi_iop_scrc_in                          0xb0028580
#define regi_iop_scrc_out                         0xb0028600
#define regi_iop_timer_grp0                       0xb0028680
#define regi_iop_timer_grp1                       0xb0028700
#define regi_iop_sap_in                           0xb0028800
#define regi_iop_sap_out                          0xb0028900
#define regi_iop_spu                              0xb0028a00
#define regi_iop_sw_cfg                           0xb0028b00
#define regi_iop_sw_cpu                           0xb0028c00
#define regi_iop_sw_mpu                           0xb0028d00
#define regi_iop_sw_spu                           0xb0028e00
#define regi_iop_mpu                              0xb0029000
#define regi_irq                                  0xb002a000
#define regi_jpeg                                 0xb002c000
#define regi_l2cache                              0xb0030000
#define regi_marb_bar                             0xb0032000
#define regi_marb_bar_bp0                         0xb0032140
#define regi_marb_bar_bp1                         0xb0032180
#define regi_marb_bar_bp2                         0xb00321c0
#define regi_marb_bar_bp3                         0xb0032200
#define regi_marb_foo                             0xb0034000
#define regi_marb_foo_bp0                         0xb0034280
#define regi_marb_foo_bp1                         0xb00342c0
#define regi_marb_foo_bp2                         0xb0034300
#define regi_marb_foo_bp3                         0xb0034340
#define regi_pinmux                               0xb0038000
#define regi_pio                                  0xb0036000
#define regi_sclr                                 0xb003a000
#define regi_sclr_fifo                            0xb003c000
#define regi_ser0                                 0xb003e000
#define regi_ser1                                 0xb0040000
#define regi_ser2                                 0xb0042000
#define regi_ser3                                 0xb0044000
#define regi_ser4                                 0xb0046000
#define regi_sser                                 0xb0048000
#define regi_strcop                               0xb004a000
#define regi_strdma0                              0xb004e000
#define regi_strdma1                              0xb0050000
#define regi_strdma2                              0xb0052000
#define regi_strdma3                              0xb0054000
#define regi_strdma5                              0xb0056000
#define regi_strmux                               0xb004c000
#define regi_timer0                               0xb0058000
#define regi_timer1                               0xb005a000
#define regi_trace                                0xb005c000
#define regi_vin                                  0xb005e000
#define regi_vout                                 0xb0060000
#endif /* __reg_map_asm_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef __intr_vect_defs_h
#define __intr_vect_defs_h

/*
 * This file is autogenerated from
 *   file:           intr_vect.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile intr_vect_defs.h intr_vect.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope intr_vect */


#define STRIDE_intr_vect_rw_mask 4
/* Register rw_mask0, scope intr_vect, type rw */
typedef struct {
  unsigned int timer0  : 1;
  unsigned int timer1  : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int gio     : 1;
  unsigned int iop0    : 1;
  unsigned int iop1    : 1;
  unsigned int ser0    : 1;
  unsigned int ser1    : 1;
  unsigned int ser2    : 1;
  unsigned int ser3    : 1;
  unsigned int ser4    : 1;
  unsigned int sser    : 1;
  unsigned int strdma0 : 1;
  unsigned int strdma1 : 1;
  unsigned int strdma2 : 1;
  unsigned int strdma3 : 1;
  unsigned int strdma5 : 1;
  unsigned int vin     : 1;
  unsigned int vout    : 1;
  unsigned int jpeg    : 1;
  unsigned int h264    : 1;
  unsigned int histo   : 1;
  unsigned int ccd     : 1;
} reg_intr_vect_rw_mask0;
#define reg_intr_vect_rw_mask reg_intr_vect_rw_mask0
#define REG_RD_ADDR_intr_vect_rw_mask 0
#define REG_WR_ADDR_intr_vect_rw_mask 0
#define REG_RD_ADDR_intr_vect_rw_mask0 0
#define REG_WR_ADDR_intr_vect_rw_mask0 0

#define STRIDE_intr_vect_r_vect 4
/* Register r_vect0, scope intr_vect, type r */
typedef struct {
  unsigned int timer0  : 1;
  unsigned int timer1  : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int gio     : 1;
  unsigned int iop0    : 1;
  unsigned int iop1    : 1;
  unsigned int ser0    : 1;
  unsigned int ser1    : 1;
  unsigned int ser2    : 1;
  unsigned int ser3    : 1;
  unsigned int ser4    : 1;
  unsigned int sser    : 1;
  unsigned int strdma0 : 1;
  unsigned int strdma1 : 1;
  unsigned int strdma2 : 1;
  unsigned int strdma3 : 1;
  unsigned int strdma5 : 1;
  unsigned int vin     : 1;
  unsigned int vout    : 1;
  unsigned int jpeg    : 1;
  unsigned int h264    : 1;
  unsigned int histo   : 1;
  unsigned int ccd     : 1;
} reg_intr_vect_r_vect0;
#define reg_intr_vect_r_vect reg_intr_vect_r_vect0
#define REG_RD_ADDR_intr_vect_r_vect 8
#define REG_RD_ADDR_intr_vect_r_vect0 8

#define STRIDE_intr_vect_r_masked_vect 4
/* Register r_masked_vect0, scope intr_vect, type r */
typedef struct {
  unsigned int timer0  : 1;
  unsigned int timer1  : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int gio     : 1;
  unsigned int iop0    : 1;
  unsigned int iop1    : 1;
  unsigned int ser0    : 1;
  unsigned int ser1    : 1;
  unsigned int ser2    : 1;
  unsigned int ser3    : 1;
  unsigned int ser4    : 1;
  unsigned int sser    : 1;
  unsigned int strdma0 : 1;
  unsigned int strdma1 : 1;
  unsigned int strdma2 : 1;
  unsigned int strdma3 : 1;
  unsigned int strdma5 : 1;
  unsigned int vin     : 1;
  unsigned int vout    : 1;
  unsigned int jpeg    : 1;
  unsigned int h264    : 1;
  unsigned int histo   : 1;
  unsigned int ccd     : 1;
} reg_intr_vect_r_masked_vect0;
#define reg_intr_vect_r_masked_vect reg_intr_masked_vect_r_vect0
#define REG_RD_ADDR_intr_vect_r_masked_vect0 16
#define REG_RD_ADDR_intr_vect_r_masked_vect 16

#define STRIDE_intr_vect_rw_xmask 4
/* Register rw_xmask0, scope intr_vect, type rw */
typedef struct {
  unsigned int timer0  : 1;
  unsigned int timer1  : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int gio     : 1;
  unsigned int iop0    : 1;
  unsigned int iop1    : 1;
  unsigned int ser0    : 1;
  unsigned int ser1    : 1;
  unsigned int ser2    : 1;
  unsigned int ser3    : 1;
  unsigned int ser4    : 1;
  unsigned int sser    : 1;
  unsigned int strdma0 : 1;
  unsigned int strdma1 : 1;
  unsigned int strdma2 : 1;
  unsigned int strdma3 : 1;
  unsigned int strdma5 : 1;
  unsigned int vin     : 1;
  unsigned int vout    : 1;
  unsigned int jpeg    : 1;
  unsigned int h264    : 1;
  unsigned int histo   : 1;
  unsigned int ccd     : 1;
} reg_intr_vect_rw_xmask0;
#define reg_intr_vect_rw_xmask reg_intr_vect_rw_xmask0
#define REG_RD_ADDR_intr_vect_rw_xmask0 24
#define REG_WR_ADDR_intr_vect_rw_xmask0 24
#define REG_RD_ADDR_intr_vect_rw_xmask 24
#define REG_WR_ADDR_intr_vect_rw_xmask 24

/* Register rw_mask1, scope intr_vect, type rw */
typedef struct {
  unsigned int eth        : 1;
  unsigned int memarb_bar : 1;
  unsigned int memarb_foo : 1;
  unsigned int pio        : 1;
  unsigned int sclr       : 1;
  unsigned int sclr_fifo  : 1;
  unsigned int dummy1     : 26;
} reg_intr_vect_rw_mask1;
#define REG_RD_ADDR_intr_vect_rw_mask1 4
#define REG_WR_ADDR_intr_vect_rw_mask1 4

/* Register r_vect1, scope intr_vect, type r */
typedef struct {
  unsigned int eth        : 1;
  unsigned int memarb_bar : 1;
  unsigned int memarb_foo : 1;
  unsigned int pio        : 1;
  unsigned int sclr       : 1;
  unsigned int sclr_fifo  : 1;
  unsigned int dummy1     : 26;
} reg_intr_vect_r_vect1;
#define REG_RD_ADDR_intr_vect_r_vect1 12

/* Register r_masked_vect1, scope intr_vect, type r */
typedef struct {
  unsigned int eth        : 1;
  unsigned int memarb_bar : 1;
  unsigned int memarb_foo : 1;
  unsigned int pio        : 1;
  unsigned int sclr       : 1;
  unsigned int sclr_fifo  : 1;
  unsigned int dummy1     : 26;
} reg_intr_vect_r_masked_vect1;
#define REG_RD_ADDR_intr_vect_r_masked_vect1 20

/* Register rw_xmask1, scope intr_vect, type rw */
typedef struct {
  unsigned int eth        : 1;
  unsigned int memarb_bar : 1;
  unsigned int memarb_foo : 1;
  unsigned int pio        : 1;
  unsigned int sclr       : 1;
  unsigned int sclr_fifo  : 1;
  unsigned int dummy1     : 26;
} reg_intr_vect_rw_xmask1;
#define REG_RD_ADDR_intr_vect_rw_xmask1 28
#define REG_WR_ADDR_intr_vect_rw_xmask1 28

/* Register rw_xmask_ctrl, scope intr_vect, type rw */
typedef struct {
  unsigned int en : 1;
  unsigned int dummy1 : 31;
} reg_intr_vect_rw_xmask_ctrl;
#define REG_RD_ADDR_intr_vect_rw_xmask_ctrl 32
#define REG_WR_ADDR_intr_vect_rw_xmask_ctrl 32

/* Register r_nmi, scope intr_vect, type r */
typedef struct {
  unsigned int watchdog0 : 1;
  unsigned int watchdog1 : 1;
  unsigned int dummy1    : 30;
} reg_intr_vect_r_nmi;
#define REG_RD_ADDR_intr_vect_r_nmi 64

/* Register r_guru, scope intr_vect, type r */
typedef struct {
  unsigned int jtag : 1;
  unsigned int dummy1 : 31;
} reg_intr_vect_r_guru;
#define REG_RD_ADDR_intr_vect_r_guru 68


/* Register rw_ipi, scope intr_vect, type rw */
typedef struct 
{
  unsigned int vector;
} reg_intr_vect_rw_ipi;
#define REG_RD_ADDR_intr_vect_rw_ipi 72
#define REG_WR_ADDR_intr_vect_rw_ipi 72

/* Constants */
enum {
  regk_intr_vect_no                        = 0x00000000,
  regk_intr_vect_rw_mask0_default          = 0x00000000,
  regk_intr_vect_rw_mask1_default          = 0x00000000,
  regk_intr_vect_rw_xmask0_default         = 0x00000000,
  regk_intr_vect_rw_xmask1_default         = 0x00000000,
  regk_intr_vect_rw_xmask_ctrl_default     = 0x00000000,
  regk_intr_vect_yes                       = 0x00000001
};
#endif /* __intr_vect_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef __marb_foo_defs_h
#define __marb_foo_defs_h

/*
 * This file is autogenerated from
 *   file:           marb_foo.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile marb_foo_defs.h marb_foo.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope marb_foo */

#define STRIDE_marb_foo_rw_intm_slots 4
/* Register rw_intm_slots, scope marb_foo, type rw */
typedef struct {
  unsigned int owner : 4;
  unsigned int dummy1 : 28;
} reg_marb_foo_rw_intm_slots;
#define REG_RD_ADDR_marb_foo_rw_intm_slots 0
#define REG_WR_ADDR_marb_foo_rw_intm_slots 0

#define STRIDE_marb_foo_rw_l2_slots 4
/* Register rw_l2_slots, scope marb_foo, type rw */
typedef struct {
  unsigned int owner : 4;
  unsigned int dummy1 : 28;
} reg_marb_foo_rw_l2_slots;
#define REG_RD_ADDR_marb_foo_rw_l2_slots 256
#define REG_WR_ADDR_marb_foo_rw_l2_slots 256

#define STRIDE_marb_foo_rw_regs_slots 4
/* Register rw_regs_slots, scope marb_foo, type rw */
typedef struct {
  unsigned int owner : 4;
  unsigned int dummy1 : 28;
} reg_marb_foo_rw_regs_slots;
#define REG_RD_ADDR_marb_foo_rw_regs_slots 512
#define REG_WR_ADDR_marb_foo_rw_regs_slots 512

/* Register rw_sclr_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_sclr_burst;
#define REG_RD_ADDR_marb_foo_rw_sclr_burst 528
#define REG_WR_ADDR_marb_foo_rw_sclr_burst 528

/* Register rw_dma0_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma0_burst;
#define REG_RD_ADDR_marb_foo_rw_dma0_burst 532
#define REG_WR_ADDR_marb_foo_rw_dma0_burst 532

/* Register rw_dma1_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma1_burst;
#define REG_RD_ADDR_marb_foo_rw_dma1_burst 536
#define REG_WR_ADDR_marb_foo_rw_dma1_burst 536

/* Register rw_dma2_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma2_burst;
#define REG_RD_ADDR_marb_foo_rw_dma2_burst 540
#define REG_WR_ADDR_marb_foo_rw_dma2_burst 540

/* Register rw_dma3_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma3_burst;
#define REG_RD_ADDR_marb_foo_rw_dma3_burst 544
#define REG_WR_ADDR_marb_foo_rw_dma3_burst 544

/* Register rw_dma4_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma4_burst;
#define REG_RD_ADDR_marb_foo_rw_dma4_burst 548
#define REG_WR_ADDR_marb_foo_rw_dma4_burst 548

/* Register rw_dma5_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma5_burst;
#define REG_RD_ADDR_marb_foo_rw_dma5_burst 552
#define REG_WR_ADDR_marb_foo_rw_dma5_burst 552

/* Register rw_dma6_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma6_burst;
#define REG_RD_ADDR_marb_foo_rw_dma6_burst 556
#define REG_WR_ADDR_marb_foo_rw_dma6_burst 556

/* Register rw_dma7_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma7_burst;
#define REG_RD_ADDR_marb_foo_rw_dma7_burst 560
#define REG_WR_ADDR_marb_foo_rw_dma7_burst 560

/* Register rw_dma9_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma9_burst;
#define REG_RD_ADDR_marb_foo_rw_dma9_burst 564
#define REG_WR_ADDR_marb_foo_rw_dma9_burst 564

/* Register rw_dma11_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_dma11_burst;
#define REG_RD_ADDR_marb_foo_rw_dma11_burst 568
#define REG_WR_ADDR_marb_foo_rw_dma11_burst 568

/* Register rw_cpui_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_cpui_burst;
#define REG_RD_ADDR_marb_foo_rw_cpui_burst 572
#define REG_WR_ADDR_marb_foo_rw_cpui_burst 572

/* Register rw_cpud_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_cpud_burst;
#define REG_RD_ADDR_marb_foo_rw_cpud_burst 576
#define REG_WR_ADDR_marb_foo_rw_cpud_burst 576

/* Register rw_iop_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_iop_burst;
#define REG_RD_ADDR_marb_foo_rw_iop_burst 580
#define REG_WR_ADDR_marb_foo_rw_iop_burst 580

/* Register rw_ccdstat_burst, scope marb_foo, type rw */
typedef struct {
  unsigned int intm_bsize : 2;
  unsigned int l2_bsize   : 2;
  unsigned int dummy1     : 28;
} reg_marb_foo_rw_ccdstat_burst;
#define REG_RD_ADDR_marb_foo_rw_ccdstat_burst 584
#define REG_WR_ADDR_marb_foo_rw_ccdstat_burst 584

/* Register rw_intr_mask, scope marb_foo, type rw */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_foo_rw_intr_mask;
#define REG_RD_ADDR_marb_foo_rw_intr_mask 588
#define REG_WR_ADDR_marb_foo_rw_intr_mask 588

/* Register rw_ack_intr, scope marb_foo, type rw */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_foo_rw_ack_intr;
#define REG_RD_ADDR_marb_foo_rw_ack_intr 592
#define REG_WR_ADDR_marb_foo_rw_ack_intr 592

/* Register r_intr, scope marb_foo, type r */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_foo_r_intr;
#define REG_RD_ADDR_marb_foo_r_intr 596

/* Register r_masked_intr, scope marb_foo, type r */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_foo_r_masked_intr;
#define REG_RD_ADDR_marb_foo_r_masked_intr 600

/* Register rw_stop_mask, scope marb_foo, type rw */
typedef struct {
  unsigned int sclr    : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int cpui    : 1;
  unsigned int cpud    : 1;
  unsigned int iop     : 1;
  unsigned int ccdstat : 1;
  unsigned int dummy1  : 17;
} reg_marb_foo_rw_stop_mask;
#define REG_RD_ADDR_marb_foo_rw_stop_mask 604
#define REG_WR_ADDR_marb_foo_rw_stop_mask 604

/* Register r_stopped, scope marb_foo, type r */
typedef struct {
  unsigned int sclr    : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int cpui    : 1;
  unsigned int cpud    : 1;
  unsigned int iop     : 1;
  unsigned int ccdstat : 1;
  unsigned int dummy1  : 17;
} reg_marb_foo_r_stopped;
#define REG_RD_ADDR_marb_foo_r_stopped 608

/* Register rw_no_snoop, scope marb_foo, type rw */
typedef struct {
  unsigned int sclr    : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int cpui    : 1;
  unsigned int cpud    : 1;
  unsigned int iop     : 1;
  unsigned int ccdstat : 1;
  unsigned int dummy1  : 17;
} reg_marb_foo_rw_no_snoop;
#define REG_RD_ADDR_marb_foo_rw_no_snoop 896
#define REG_WR_ADDR_marb_foo_rw_no_snoop 896

/* Register rw_no_snoop_rq, scope marb_foo, type rw */
typedef struct {
  unsigned int dummy1 : 11;
  unsigned int cpui : 1;
  unsigned int cpud : 1;
  unsigned int dummy2 : 19;
} reg_marb_foo_rw_no_snoop_rq;
#define REG_RD_ADDR_marb_foo_rw_no_snoop_rq 900
#define REG_WR_ADDR_marb_foo_rw_no_snoop_rq 900


/* Constants */
enum {
  regk_marb_foo_ccdstat                    = 0x0000000e,
  regk_marb_foo_cpud                       = 0x0000000c,
  regk_marb_foo_cpui                       = 0x0000000b,
  regk_marb_foo_dma0                       = 0x00000001,
  regk_marb_foo_dma1                       = 0x00000002,
  regk_marb_foo_dma11                      = 0x0000000a,
  regk_marb_foo_dma2                       = 0x00000003,
  regk_marb_foo_dma3                       = 0x00000004,
  regk_marb_foo_dma4                       = 0x00000005,
  regk_marb_foo_dma5                       = 0x00000006,
  regk_marb_foo_dma6                       = 0x00000007,
  regk_marb_foo_dma7                       = 0x00000008,
  regk_marb_foo_dma9                       = 0x00000009,
  regk_marb_foo_iop                        = 0x0000000d,
  regk_marb_foo_no                         = 0x00000000,
  regk_marb_foo_r_stopped_default          = 0x00000000,
  regk_marb_foo_rw_ccdstat_burst_default   = 0x00000000,
  regk_marb_foo_rw_cpud_burst_default      = 0x00000000,
  regk_marb_foo_rw_cpui_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma0_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma11_burst_default     = 0x00000000,
  regk_marb_foo_rw_dma1_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma2_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma3_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma4_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma5_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma6_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma7_burst_default      = 0x00000000,
  regk_marb_foo_rw_dma9_burst_default      = 0x00000000,
  regk_marb_foo_rw_intm_slots_default      = 0x00000000,
  regk_marb_foo_rw_intm_slots_size         = 0x00000040,
  regk_marb_foo_rw_intr_mask_default       = 0x00000000,
  regk_marb_foo_rw_iop_burst_default       = 0x00000000,
  regk_marb_foo_rw_l2_slots_default        = 0x00000000,
  regk_marb_foo_rw_l2_slots_size           = 0x00000040,
  regk_marb_foo_rw_no_snoop_default        = 0x00000000,
  regk_marb_foo_rw_no_snoop_rq_default     = 0x00000000,
  regk_marb_foo_rw_regs_slots_default      = 0x00000000,
  regk_marb_foo_rw_regs_slots_size         = 0x00000004,
  regk_marb_foo_rw_sclr_burst_default      = 0x00000000,
  regk_marb_foo_rw_stop_mask_default       = 0x00000000,
  regk_marb_foo_sclr                       = 0x00000000,
  regk_marb_foo_yes                        = 0x00000001
};
#endif /* __marb_foo_defs_h */
#ifndef __marb_foo_bp_defs_h
#define __marb_foo_bp_defs_h

/*
 * This file is autogenerated from
 *   file:           marb_foo.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile marb_foo_defs.h marb_foo.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope marb_foo_bp */

/* Register rw_first_addr, scope marb_foo_bp, type rw */
typedef unsigned int reg_marb_foo_bp_rw_first_addr;
#define REG_RD_ADDR_marb_foo_bp_rw_first_addr 0
#define REG_WR_ADDR_marb_foo_bp_rw_first_addr 0

/* Register rw_last_addr, scope marb_foo_bp, type rw */
typedef unsigned int reg_marb_foo_bp_rw_last_addr;
#define REG_RD_ADDR_marb_foo_bp_rw_last_addr 4
#define REG_WR_ADDR_marb_foo_bp_rw_last_addr 4

/* Register rw_op, scope marb_foo_bp, type rw */
typedef struct {
  unsigned int rd         : 1;
  unsigned int wr         : 1;
  unsigned int rd_excl    : 1;
  unsigned int pri_wr     : 1;
  unsigned int us_rd      : 1;
  unsigned int us_wr      : 1;
  unsigned int us_rd_excl : 1;
  unsigned int us_pri_wr  : 1;
  unsigned int dummy1     : 24;
} reg_marb_foo_bp_rw_op;
#define REG_RD_ADDR_marb_foo_bp_rw_op 8
#define REG_WR_ADDR_marb_foo_bp_rw_op 8

/* Register rw_clients, scope marb_foo_bp, type rw */
typedef struct {
  unsigned int sclr    : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int cpui    : 1;
  unsigned int cpud    : 1;
  unsigned int iop     : 1;
  unsigned int ccdstat : 1;
  unsigned int dummy1  : 17;
} reg_marb_foo_bp_rw_clients;
#define REG_RD_ADDR_marb_foo_bp_rw_clients 12
#define REG_WR_ADDR_marb_foo_bp_rw_clients 12

/* Register rw_options, scope marb_foo_bp, type rw */
typedef struct {
  unsigned int wrap : 1;
  unsigned int dummy1 : 31;
} reg_marb_foo_bp_rw_options;
#define REG_RD_ADDR_marb_foo_bp_rw_options 16
#define REG_WR_ADDR_marb_foo_bp_rw_options 16

/* Register r_brk_addr, scope marb_foo_bp, type r */
typedef unsigned int reg_marb_foo_bp_r_brk_addr;
#define REG_RD_ADDR_marb_foo_bp_r_brk_addr 20

/* Register r_brk_op, scope marb_foo_bp, type r */
typedef struct {
  unsigned int rd         : 1;
  unsigned int wr         : 1;
  unsigned int rd_excl    : 1;
  unsigned int pri_wr     : 1;
  unsigned int us_rd      : 1;
  unsigned int us_wr      : 1;
  unsigned int us_rd_excl : 1;
  unsigned int us_pri_wr  : 1;
  unsigned int dummy1     : 24;
} reg_marb_foo_bp_r_brk_op;
#define REG_RD_ADDR_marb_foo_bp_r_brk_op 24

/* Register r_brk_clients, scope marb_foo_bp, type r */
typedef struct {
  unsigned int sclr    : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int cpui    : 1;
  unsigned int cpud    : 1;
  unsigned int iop     : 1;
  unsigned int ccdstat : 1;
  unsigned int dummy1  : 17;
} reg_marb_foo_bp_r_brk_clients;
#define REG_RD_ADDR_marb_foo_bp_r_brk_clients 28

/* Register r_brk_first_client, scope marb_foo_bp, type r */
typedef struct {
  unsigned int sclr    : 1;
  unsigned int dma0    : 1;
  unsigned int dma1    : 1;
  unsigned int dma2    : 1;
  unsigned int dma3    : 1;
  unsigned int dma4    : 1;
  unsigned int dma5    : 1;
  unsigned int dma6    : 1;
  unsigned int dma7    : 1;
  unsigned int dma9    : 1;
  unsigned int dma11   : 1;
  unsigned int cpui    : 1;
  unsigned int cpud    : 1;
  unsigned int iop     : 1;
  unsigned int ccdstat : 1;
  unsigned int dummy1  : 17;
} reg_marb_foo_bp_r_brk_first_client;
#define REG_RD_ADDR_marb_foo_bp_r_brk_first_client 32

/* Register r_brk_size, scope marb_foo_bp, type r */
typedef unsigned int reg_marb_foo_bp_r_brk_size;
#define REG_RD_ADDR_marb_foo_bp_r_brk_size 36

/* Register rw_ack, scope marb_foo_bp, type rw */
typedef unsigned int reg_marb_foo_bp_rw_ack;
#define REG_RD_ADDR_marb_foo_bp_rw_ack 40
#define REG_WR_ADDR_marb_foo_bp_rw_ack 40


/* Constants */
enum {
  regk_marb_foo_bp_no                      = 0x00000000,
  regk_marb_foo_bp_rw_op_default           = 0x00000000,
  regk_marb_foo_bp_rw_options_default      = 0x00000000,
  regk_marb_foo_bp_yes                     = 0x00000001
};
#endif /* __marb_foo_bp_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef __pinmux_defs_h
#define __pinmux_defs_h

/*
 * This file is autogenerated from
 *   file:           pinmux.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile pinmux_defs.h pinmux.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope pinmux */

/* Register rw_hwprot, scope pinmux, type rw */
typedef struct {
  unsigned int eth       : 1;
  unsigned int eth_mdio  : 1;
  unsigned int geth      : 1;
  unsigned int tg        : 1;
  unsigned int tg_clk    : 1;
  unsigned int vout      : 1;
  unsigned int vout_sync : 1;
  unsigned int ser1      : 1;
  unsigned int ser2      : 1;
  unsigned int ser3      : 1;
  unsigned int ser4      : 1;
  unsigned int sser      : 1;
  unsigned int pwm0      : 1;
  unsigned int pwm1      : 1;
  unsigned int pwm2      : 1;
  unsigned int timer0    : 1;
  unsigned int timer1    : 1;
  unsigned int pio       : 1;
  unsigned int i2c0      : 1;
  unsigned int i2c1      : 1;
  unsigned int i2c1_sda1 : 1;
  unsigned int i2c1_sda2 : 1;
  unsigned int i2c1_sda3 : 1;
  unsigned int i2c1_sen  : 1;
  unsigned int dummy1    : 8;
} reg_pinmux_rw_hwprot;
#define REG_RD_ADDR_pinmux_rw_hwprot 0
#define REG_WR_ADDR_pinmux_rw_hwprot 0

/* Register rw_gio_pa, scope pinmux, type rw */
typedef struct {
  unsigned int pa0  : 1;
  unsigned int pa1  : 1;
  unsigned int pa2  : 1;
  unsigned int pa3  : 1;
  unsigned int pa4  : 1;
  unsigned int pa5  : 1;
  unsigned int pa6  : 1;
  unsigned int pa7  : 1;
  unsigned int pa8  : 1;
  unsigned int pa9  : 1;
  unsigned int pa10 : 1;
  unsigned int pa11 : 1;
  unsigned int pa12 : 1;
  unsigned int pa13 : 1;
  unsigned int pa14 : 1;
  unsigned int pa15 : 1;
  unsigned int pa16 : 1;
  unsigned int pa17 : 1;
  unsigned int pa18 : 1;
  unsigned int pa19 : 1;
  unsigned int pa20 : 1;
  unsigned int pa21 : 1;
  unsigned int pa22 : 1;
  unsigned int pa23 : 1;
  unsigned int pa24 : 1;
  unsigned int pa25 : 1;
  unsigned int pa26 : 1;
  unsigned int pa27 : 1;
  unsigned int pa28 : 1;
  unsigned int pa29 : 1;
  unsigned int pa30 : 1;
  unsigned int pa31 : 1;
} reg_pinmux_rw_gio_pa;
#define REG_RD_ADDR_pinmux_rw_gio_pa 4
#define REG_WR_ADDR_pinmux_rw_gio_pa 4

/* Register rw_gio_pb, scope pinmux, type rw */
typedef struct {
  unsigned int pb0  : 1;
  unsigned int pb1  : 1;
  unsigned int pb2  : 1;
  unsigned int pb3  : 1;
  unsigned int pb4  : 1;
  unsigned int pb5  : 1;
  unsigned int pb6  : 1;
  unsigned int pb7  : 1;
  unsigned int pb8  : 1;
  unsigned int pb9  : 1;
  unsigned int pb10 : 1;
  unsigned int pb11 : 1;
  unsigned int pb12 : 1;
  unsigned int pb13 : 1;
  unsigned int pb14 : 1;
  unsigned int pb15 : 1;
  unsigned int pb16 : 1;
  unsigned int pb17 : 1;
  unsigned int pb18 : 1;
  unsigned int pb19 : 1;
  unsigned int pb20 : 1;
  unsigned int pb21 : 1;
  unsigned int pb22 : 1;
  unsigned int pb23 : 1;
  unsigned int pb24 : 1;
  unsigned int pb25 : 1;
  unsigned int pb26 : 1;
  unsigned int pb27 : 1;
  unsigned int pb28 : 1;
  unsigned int pb29 : 1;
  unsigned int pb30 : 1;
  unsigned int pb31 : 1;
} reg_pinmux_rw_gio_pb;
#define REG_RD_ADDR_pinmux_rw_gio_pb 8
#define REG_WR_ADDR_pinmux_rw_gio_pb 8

/* Register rw_gio_pc, scope pinmux, type rw */
typedef struct {
  unsigned int pc0  : 1;
  unsigned int pc1  : 1;
  unsigned int pc2  : 1;
  unsigned int pc3  : 1;
  unsigned int pc4  : 1;
  unsigned int pc5  : 1;
  unsigned int pc6  : 1;
  unsigned int pc7  : 1;
  unsigned int pc8  : 1;
  unsigned int pc9  : 1;
  unsigned int pc10 : 1;
  unsigned int pc11 : 1;
  unsigned int pc12 : 1;
  unsigned int pc13 : 1;
  unsigned int pc14 : 1;
  unsigned int pc15 : 1;
  unsigned int dummy1 : 16;
} reg_pinmux_rw_gio_pc;
#define REG_RD_ADDR_pinmux_rw_gio_pc 12
#define REG_WR_ADDR_pinmux_rw_gio_pc 12

/* Register rw_iop_pa, scope pinmux, type rw */
typedef struct {
  unsigned int pa0  : 1;
  unsigned int pa1  : 1;
  unsigned int pa2  : 1;
  unsigned int pa3  : 1;
  unsigned int pa4  : 1;
  unsigned int pa5  : 1;
  unsigned int pa6  : 1;
  unsigned int pa7  : 1;
  unsigned int pa8  : 1;
  unsigned int pa9  : 1;
  unsigned int pa10 : 1;
  unsigned int pa11 : 1;
  unsigned int pa12 : 1;
  unsigned int pa13 : 1;
  unsigned int pa14 : 1;
  unsigned int pa15 : 1;
  unsigned int pa16 : 1;
  unsigned int pa17 : 1;
  unsigned int pa18 : 1;
  unsigned int pa19 : 1;
  unsigned int pa20 : 1;
  unsigned int pa21 : 1;
  unsigned int pa22 : 1;
  unsigned int pa23 : 1;
  unsigned int pa24 : 1;
  unsigned int pa25 : 1;
  unsigned int pa26 : 1;
  unsigned int pa27 : 1;
  unsigned int pa28 : 1;
  unsigned int pa29 : 1;
  unsigned int pa30 : 1;
  unsigned int pa31 : 1;
} reg_pinmux_rw_iop_pa;
#define REG_RD_ADDR_pinmux_rw_iop_pa 16
#define REG_WR_ADDR_pinmux_rw_iop_pa 16

/* Register rw_iop_pb, scope pinmux, type rw */
typedef struct {
  unsigned int pb0 : 1;
  unsigned int pb1 : 1;
  unsigned int pb2 : 1;
  unsigned int pb3 : 1;
  unsigned int pb4 : 1;
  unsigned int pb5 : 1;
  unsigned int pb6 : 1;
  unsigned int pb7 : 1;
  unsigned int dummy1 : 24;
} reg_pinmux_rw_iop_pb;
#define REG_RD_ADDR_pinmux_rw_iop_pb 20
#define REG_WR_ADDR_pinmux_rw_iop_pb 20

/* Register rw_iop_pio, scope pinmux, type rw */
typedef struct {
  unsigned int d0    : 1;
  unsigned int d1    : 1;
  unsigned int d2    : 1;
  unsigned int d3    : 1;
  unsigned int d4    : 1;
  unsigned int d5    : 1;
  unsigned int d6    : 1;
  unsigned int d7    : 1;
  unsigned int rd_n  : 1;
  unsigned int wr_n  : 1;
  unsigned int a0    : 1;
  unsigned int a1    : 1;
  unsigned int ce0_n : 1;
  unsigned int ce1_n : 1;
  unsigned int ce2_n : 1;
  unsigned int rdy   : 1;
  unsigned int dummy1 : 16;
} reg_pinmux_rw_iop_pio;
#define REG_RD_ADDR_pinmux_rw_iop_pio 24
#define REG_WR_ADDR_pinmux_rw_iop_pio 24

/* Register rw_iop_usb, scope pinmux, type rw */
typedef struct {
  unsigned int usb0 : 1;
  unsigned int dummy1 : 31;
} reg_pinmux_rw_iop_usb;
#define REG_RD_ADDR_pinmux_rw_iop_usb 28
#define REG_WR_ADDR_pinmux_rw_iop_usb 28


/* Constants */
enum {
  regk_pinmux_no                           = 0x00000000,
  regk_pinmux_rw_gio_pa_default            = 0x00000000,
  regk_pinmux_rw_gio_pb_default            = 0x00000000,
  regk_pinmux_rw_gio_pc_default            = 0x00000000,
  regk_pinmux_rw_hwprot_default            = 0x00000000,
  regk_pinmux_rw_iop_pa_default            = 0x00000000,
  regk_pinmux_rw_iop_pb_default            = 0x00000000,
  regk_pinmux_rw_iop_pio_default           = 0x00000000,
  regk_pinmux_rw_iop_usb_default           = 0x00000001,
  regk_pinmux_yes                          = 0x00000001
};
#endif /* __pinmux_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef __marb_bar_defs_h
#define __marb_bar_defs_h

/*
 * This file is autogenerated from
 *   file:           marb_bar.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile marb_bar_defs.h marb_bar.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope marb_bar */

#define STRIDE_marb_bar_rw_ddr2_slots 4
/* Register rw_ddr2_slots, scope marb_bar, type rw */
typedef struct {
  unsigned int owner : 4;
  unsigned int dummy1 : 28;
} reg_marb_bar_rw_ddr2_slots;
#define REG_RD_ADDR_marb_bar_rw_ddr2_slots 0
#define REG_WR_ADDR_marb_bar_rw_ddr2_slots 0

/* Register rw_h264_rd_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_h264_rd_burst;
#define REG_RD_ADDR_marb_bar_rw_h264_rd_burst 256
#define REG_WR_ADDR_marb_bar_rw_h264_rd_burst 256

/* Register rw_h264_wr_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_h264_wr_burst;
#define REG_RD_ADDR_marb_bar_rw_h264_wr_burst 260
#define REG_WR_ADDR_marb_bar_rw_h264_wr_burst 260

/* Register rw_ccd_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_ccd_burst;
#define REG_RD_ADDR_marb_bar_rw_ccd_burst 264
#define REG_WR_ADDR_marb_bar_rw_ccd_burst 264

/* Register rw_vin_wr_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_vin_wr_burst;
#define REG_RD_ADDR_marb_bar_rw_vin_wr_burst 268
#define REG_WR_ADDR_marb_bar_rw_vin_wr_burst 268

/* Register rw_vin_rd_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_vin_rd_burst;
#define REG_RD_ADDR_marb_bar_rw_vin_rd_burst 272
#define REG_WR_ADDR_marb_bar_rw_vin_rd_burst 272

/* Register rw_sclr_rd_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_sclr_rd_burst;
#define REG_RD_ADDR_marb_bar_rw_sclr_rd_burst 276
#define REG_WR_ADDR_marb_bar_rw_sclr_rd_burst 276

/* Register rw_vout_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_vout_burst;
#define REG_RD_ADDR_marb_bar_rw_vout_burst 280
#define REG_WR_ADDR_marb_bar_rw_vout_burst 280

/* Register rw_sclr_fifo_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_sclr_fifo_burst;
#define REG_RD_ADDR_marb_bar_rw_sclr_fifo_burst 284
#define REG_WR_ADDR_marb_bar_rw_sclr_fifo_burst 284

/* Register rw_l2cache_burst, scope marb_bar, type rw */
typedef struct {
  unsigned int ddr2_bsize : 2;
  unsigned int dummy1     : 30;
} reg_marb_bar_rw_l2cache_burst;
#define REG_RD_ADDR_marb_bar_rw_l2cache_burst 288
#define REG_WR_ADDR_marb_bar_rw_l2cache_burst 288

/* Register rw_intr_mask, scope marb_bar, type rw */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_bar_rw_intr_mask;
#define REG_RD_ADDR_marb_bar_rw_intr_mask 292
#define REG_WR_ADDR_marb_bar_rw_intr_mask 292

/* Register rw_ack_intr, scope marb_bar, type rw */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_bar_rw_ack_intr;
#define REG_RD_ADDR_marb_bar_rw_ack_intr 296
#define REG_WR_ADDR_marb_bar_rw_ack_intr 296

/* Register r_intr, scope marb_bar, type r */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_bar_r_intr;
#define REG_RD_ADDR_marb_bar_r_intr 300

/* Register r_masked_intr, scope marb_bar, type r */
typedef struct {
  unsigned int bp0 : 1;
  unsigned int bp1 : 1;
  unsigned int bp2 : 1;
  unsigned int bp3 : 1;
  unsigned int dummy1 : 28;
} reg_marb_bar_r_masked_intr;
#define REG_RD_ADDR_marb_bar_r_masked_intr 304

/* Register rw_stop_mask, scope marb_bar, type rw */
typedef struct {
  unsigned int h264_rd   : 1;
  unsigned int h264_wr   : 1;
  unsigned int ccd       : 1;
  unsigned int vin_wr    : 1;
  unsigned int vin_rd    : 1;
  unsigned int sclr_rd   : 1;
  unsigned int vout      : 1;
  unsigned int sclr_fifo : 1;
  unsigned int l2cache   : 1;
  unsigned int dummy1    : 23;
} reg_marb_bar_rw_stop_mask;
#define REG_RD_ADDR_marb_bar_rw_stop_mask 308
#define REG_WR_ADDR_marb_bar_rw_stop_mask 308

/* Register r_stopped, scope marb_bar, type r */
typedef struct {
  unsigned int h264_rd   : 1;
  unsigned int h264_wr   : 1;
  unsigned int ccd       : 1;
  unsigned int vin_wr    : 1;
  unsigned int vin_rd    : 1;
  unsigned int sclr_rd   : 1;
  unsigned int vout      : 1;
  unsigned int sclr_fifo : 1;
  unsigned int l2cache   : 1;
  unsigned int dummy1    : 23;
} reg_marb_bar_r_stopped;
#define REG_RD_ADDR_marb_bar_r_stopped 312

/* Register rw_no_snoop, scope marb_bar, type rw */
typedef struct {
  unsigned int h264_rd   : 1;
  unsigned int h264_wr   : 1;
  unsigned int ccd       : 1;
  unsigned int vin_wr    : 1;
  unsigned int vin_rd    : 1;
  unsigned int sclr_rd   : 1;
  unsigned int vout      : 1;
  unsigned int sclr_fifo : 1;
  unsigned int l2cache   : 1;
  unsigned int dummy1    : 23;
} reg_marb_bar_rw_no_snoop;
#define REG_RD_ADDR_marb_bar_rw_no_snoop 576
#define REG_WR_ADDR_marb_bar_rw_no_snoop 576


/* Constants */
enum {
  regk_marb_bar_ccd                        = 0x00000002,
  regk_marb_bar_h264_rd                    = 0x00000000,
  regk_marb_bar_h264_wr                    = 0x00000001,
  regk_marb_bar_l2cache                    = 0x00000008,
  regk_marb_bar_no                         = 0x00000000,
  regk_marb_bar_r_stopped_default          = 0x00000000,
  regk_marb_bar_rw_ccd_burst_default       = 0x00000000,
  regk_marb_bar_rw_ddr2_slots_default      = 0x00000000,
  regk_marb_bar_rw_ddr2_slots_size         = 0x00000040,
  regk_marb_bar_rw_h264_rd_burst_default   = 0x00000000,
  regk_marb_bar_rw_h264_wr_burst_default   = 0x00000000,
  regk_marb_bar_rw_intr_mask_default       = 0x00000000,
  regk_marb_bar_rw_l2cache_burst_default   = 0x00000000,
  regk_marb_bar_rw_no_snoop_default        = 0x00000000,
  regk_marb_bar_rw_sclr_fifo_burst_default = 0x00000000,
  regk_marb_bar_rw_sclr_rd_burst_default   = 0x00000000,
  regk_marb_bar_rw_stop_mask_default       = 0x00000000,
  regk_marb_bar_rw_vin_rd_burst_default    = 0x00000000,
  regk_marb_bar_rw_vin_wr_burst_default    = 0x00000000,
  regk_marb_bar_rw_vout_burst_default      = 0x00000000,
  regk_marb_bar_sclr_fifo                  = 0x00000007,
  regk_marb_bar_sclr_rd                    = 0x00000005,
  regk_marb_bar_vin_rd                     = 0x00000004,
  regk_marb_bar_vin_wr                     = 0x00000003,
  regk_marb_bar_vout                       = 0x00000006,
  regk_marb_bar_yes                        = 0x00000001
};
#endif /* __marb_bar_defs_h */
#ifndef __marb_bar_bp_defs_h
#define __marb_bar_bp_defs_h

/*
 * This file is autogenerated from
 *   file:           marb_bar.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile marb_bar_defs.h marb_bar.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope marb_bar_bp */

/* Register rw_first_addr, scope marb_bar_bp, type rw */
typedef unsigned int reg_marb_bar_bp_rw_first_addr;
#define REG_RD_ADDR_marb_bar_bp_rw_first_addr 0
#define REG_WR_ADDR_marb_bar_bp_rw_first_addr 0

/* Register rw_last_addr, scope marb_bar_bp, type rw */
typedef unsigned int reg_marb_bar_bp_rw_last_addr;
#define REG_RD_ADDR_marb_bar_bp_rw_last_addr 4
#define REG_WR_ADDR_marb_bar_bp_rw_last_addr 4

/* Register rw_op, scope marb_bar_bp, type rw */
typedef struct {
  unsigned int rd         : 1;
  unsigned int wr         : 1;
  unsigned int rd_excl    : 1;
  unsigned int pri_wr     : 1;
  unsigned int us_rd      : 1;
  unsigned int us_wr      : 1;
  unsigned int us_rd_excl : 1;
  unsigned int us_pri_wr  : 1;
  unsigned int dummy1     : 24;
} reg_marb_bar_bp_rw_op;
#define REG_RD_ADDR_marb_bar_bp_rw_op 8
#define REG_WR_ADDR_marb_bar_bp_rw_op 8

/* Register rw_clients, scope marb_bar_bp, type rw */
typedef struct {
  unsigned int h264_rd   : 1;
  unsigned int h264_wr   : 1;
  unsigned int ccd       : 1;
  unsigned int vin_wr    : 1;
  unsigned int vin_rd    : 1;
  unsigned int sclr_rd   : 1;
  unsigned int vout      : 1;
  unsigned int sclr_fifo : 1;
  unsigned int l2cache   : 1;
  unsigned int dummy1    : 23;
} reg_marb_bar_bp_rw_clients;
#define REG_RD_ADDR_marb_bar_bp_rw_clients 12
#define REG_WR_ADDR_marb_bar_bp_rw_clients 12

/* Register rw_options, scope marb_bar_bp, type rw */
typedef struct {
  unsigned int wrap : 1;
  unsigned int dummy1 : 31;
} reg_marb_bar_bp_rw_options;
#define REG_RD_ADDR_marb_bar_bp_rw_options 16
#define REG_WR_ADDR_marb_bar_bp_rw_options 16

/* Register r_brk_addr, scope marb_bar_bp, type r */
typedef unsigned int reg_marb_bar_bp_r_brk_addr;
#define REG_RD_ADDR_marb_bar_bp_r_brk_addr 20

/* Register r_brk_op, scope marb_bar_bp, type r */
typedef struct {
  unsigned int rd         : 1;
  unsigned int wr         : 1;
  unsigned int rd_excl    : 1;
  unsigned int pri_wr     : 1;
  unsigned int us_rd      : 1;
  unsigned int us_wr      : 1;
  unsigned int us_rd_excl : 1;
  unsigned int us_pri_wr  : 1;
  unsigned int dummy1     : 24;
} reg_marb_bar_bp_r_brk_op;
#define REG_RD_ADDR_marb_bar_bp_r_brk_op 24

/* Register r_brk_clients, scope marb_bar_bp, type r */
typedef struct {
  unsigned int h264_rd   : 1;
  unsigned int h264_wr   : 1;
  unsigned int ccd       : 1;
  unsigned int vin_wr    : 1;
  unsigned int vin_rd    : 1;
  unsigned int sclr_rd   : 1;
  unsigned int vout      : 1;
  unsigned int sclr_fifo : 1;
  unsigned int l2cache   : 1;
  unsigned int dummy1    : 23;
} reg_marb_bar_bp_r_brk_clients;
#define REG_RD_ADDR_marb_bar_bp_r_brk_clients 28

/* Register r_brk_first_client, scope marb_bar_bp, type r */
typedef struct {
  unsigned int h264_rd   : 1;
  unsigned int h264_wr   : 1;
  unsigned int ccd       : 1;
  unsigned int vin_wr    : 1;
  unsigned int vin_rd    : 1;
  unsigned int sclr_rd   : 1;
  unsigned int vout      : 1;
  unsigned int sclr_fifo : 1;
  unsigned int l2cache   : 1;
  unsigned int dummy1    : 23;
} reg_marb_bar_bp_r_brk_first_client;
#define REG_RD_ADDR_marb_bar_bp_r_brk_first_client 32

/* Register r_brk_size, scope marb_bar_bp, type r */
typedef unsigned int reg_marb_bar_bp_r_brk_size;
#define REG_RD_ADDR_marb_bar_bp_r_brk_size 36

/* Register rw_ack, scope marb_bar_bp, type rw */
typedef unsigned int reg_marb_bar_bp_rw_ack;
#define REG_RD_ADDR_marb_bar_bp_rw_ack 40
#define REG_WR_ADDR_marb_bar_bp_rw_ack 40


/* Constants */
enum {
  regk_marb_bar_bp_no                      = 0x00000000,
  regk_marb_bar_bp_rw_op_default           = 0x00000000,
  regk_marb_bar_bp_rw_options_default      = 0x00000000,
  regk_marb_bar_bp_yes                     = 0x00000001
};
#endif /* __marb_bar_bp_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #ifndef __pio_defs_h
#define __pio_defs_h

/*
 * This file is autogenerated from
 *   file:           pio.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile pio_defs.h pio.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope pio */

/* Register rw_data, scope pio, type rw */
typedef unsigned int reg_pio_rw_data;
#define REG_RD_ADDR_pio_rw_data 64
#define REG_WR_ADDR_pio_rw_data 64

/* Register rw_io_access0, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access0;
#define REG_RD_ADDR_pio_rw_io_access0 0
#define REG_WR_ADDR_pio_rw_io_access0 0

/* Register rw_io_access1, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access1;
#define REG_RD_ADDR_pio_rw_io_access1 4
#define REG_WR_ADDR_pio_rw_io_access1 4

/* Register rw_io_access2, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access2;
#define REG_RD_ADDR_pio_rw_io_access2 8
#define REG_WR_ADDR_pio_rw_io_access2 8

/* Register rw_io_access3, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access3;
#define REG_RD_ADDR_pio_rw_io_access3 12
#define REG_WR_ADDR_pio_rw_io_access3 12

/* Register rw_io_access4, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access4;
#define REG_RD_ADDR_pio_rw_io_access4 16
#define REG_WR_ADDR_pio_rw_io_access4 16

/* Register rw_io_access5, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access5;
#define REG_RD_ADDR_pio_rw_io_access5 20
#define REG_WR_ADDR_pio_rw_io_access5 20

/* Register rw_io_access6, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access6;
#define REG_RD_ADDR_pio_rw_io_access6 24
#define REG_WR_ADDR_pio_rw_io_access6 24

/* Register rw_io_access7, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access7;
#define REG_RD_ADDR_pio_rw_io_access7 28
#define REG_WR_ADDR_pio_rw_io_access7 28

/* Register rw_io_access8, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access8;
#define REG_RD_ADDR_pio_rw_io_access8 32
#define REG_WR_ADDR_pio_rw_io_access8 32

/* Register rw_io_access9, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access9;
#define REG_RD_ADDR_pio_rw_io_access9 36
#define REG_WR_ADDR_pio_rw_io_access9 36

/* Register rw_io_access10, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access10;
#define REG_RD_ADDR_pio_rw_io_access10 40
#define REG_WR_ADDR_pio_rw_io_access10 40

/* Register rw_io_access11, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access11;
#define REG_RD_ADDR_pio_rw_io_access11 44
#define REG_WR_ADDR_pio_rw_io_access11 44

/* Register rw_io_access12, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access12;
#define REG_RD_ADDR_pio_rw_io_access12 48
#define REG_WR_ADDR_pio_rw_io_access12 48

/* Register rw_io_access13, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access13;
#define REG_RD_ADDR_pio_rw_io_access13 52
#define REG_WR_ADDR_pio_rw_io_access13 52

/* Register rw_io_access14, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access14;
#define REG_RD_ADDR_pio_rw_io_access14 56
#define REG_WR_ADDR_pio_rw_io_access14 56

/* Register rw_io_access15, scope pio, type rw */
typedef struct {
  unsigned int data : 8;
  unsigned int dummy1 : 24;
} reg_pio_rw_io_access15;
#define REG_RD_ADDR_pio_rw_io_access15 60
#define REG_WR_ADDR_pio_rw_io_access15 60

/* Register rw_ce0_cfg, scope pio, type rw */
typedef struct {
  unsigned int lw   : 6;
  unsigned int ew   : 3;
  unsigned int zw   : 3;
  unsigned int aw   : 2;
  unsigned int mode : 2;
  unsigned int dummy1 : 16;
} reg_pio_rw_ce0_cfg;
#define REG_RD_ADDR_pio_rw_ce0_cfg 68
#define REG_WR_ADDR_pio_rw_ce0_cfg 68

/* Register rw_ce1_cfg, scope pio, type rw */
typedef struct {
  unsigned int lw   : 6;
  unsigned int ew   : 3;
  unsigned int zw   : 3;
  unsigned int aw   : 2;
  unsigned int mode : 2;
  unsigned int dummy1 : 16;
} reg_pio_rw_ce1_cfg;
#define REG_RD_ADDR_pio_rw_ce1_cfg 72
#define REG_WR_ADDR_pio_rw_ce1_cfg 72

/* Register rw_ce2_cfg, scope pio, type rw */
typedef struct {
  unsigned int lw   : 6;
  unsigned int ew   : 3;
  unsigned int zw   : 3;
  unsigned int aw   : 2;
  unsigned int mode : 2;
  unsigned int dummy1 : 16;
} reg_pio_rw_ce2_cfg;
#define REG_RD_ADDR_pio_rw_ce2_cfg 76
#define REG_WR_ADDR_pio_rw_ce2_cfg 76

/* Register rw_dout, scope pio, type rw */
typedef struct {
  unsigned int data  : 8;
  unsigned int rd_n  : 1;
  unsigned int wr_n  : 1;
  unsigned int a0    : 1;
  unsigned int a1    : 1;
  unsigned int ce0_n : 1;
  unsigned int ce1_n : 1;
  unsigned int ce2_n : 1;
  unsigned int rdy   : 1;
  unsigned int dummy1 : 16;
} reg_pio_rw_dout;
#define REG_RD_ADDR_pio_rw_dout 80
#define REG_WR_ADDR_pio_rw_dout 80

/* Register rw_oe, scope pio, type rw */
typedef struct {
  unsigned int data  : 8;
  unsigned int rd_n  : 1;
  unsigned int wr_n  : 1;
  unsigned int a0    : 1;
  unsigned int a1    : 1;
  unsigned int ce0_n : 1;
  unsigned int ce1_n : 1;
  unsigned int ce2_n : 1;
  unsigned int rdy   : 1;
  unsigned int dummy1 : 16;
} reg_pio_rw_oe;
#define REG_RD_ADDR_pio_rw_oe 84
#define REG_WR_ADDR_pio_rw_oe 84

/* Register rw_man_ctrl, scope pio, type rw */
typedef struct {
  unsigned int data  : 8;
  unsigned int rd_n  : 1;
  unsigned int wr_n  : 1;
  unsigned int a0    : 1;
  unsigned int a1    : 1;
  unsigned int ce0_n : 1;
  unsigned int ce1_n : 1;
  unsigned int ce2_n : 1;
  unsigned int rdy   : 1;
  unsigned int dummy1 : 16;
} reg_pio_rw_man_ctrl;
#define REG_RD_ADDR_pio_rw_man_ctrl 88
#define REG_WR_ADDR_pio_rw_man_ctrl 88

/* Register r_din, scope pio, type r */
typedef struct {
  unsigned int data  : 8;
  unsigned int rd_n  : 1;
  unsigned int wr_n  : 1;
  unsigned int a0    : 1;
  unsigned int a1    : 1;
  unsigned int ce0_n : 1;
  unsigned int ce1_n : 1;
  unsigned int ce2_n : 1;
  unsigned int rdy   : 1;
  unsigned int dummy1 : 16;
} reg_pio_r_din;
#define REG_RD_ADDR_pio_r_din 92

/* Register r_stat, scope pio, type r */
typedef struct {
  unsigned int busy : 1;
  unsigned int dummy1 : 31;
} reg_pio_r_stat;
#define REG_RD_ADDR_pio_r_stat 96

/* Register rw_intr_mask, scope pio, type rw */
typedef struct {
  unsigned int rdy : 1;
  unsigned int dummy1 : 31;
} reg_pio_rw_intr_mask;
#define REG_RD_ADDR_pio_rw_intr_mask 100
#define REG_WR_ADDR_pio_rw_intr_mask 100

/* Register rw_ack_intr, scope pio, type rw */
typedef struct {
  unsigned int rdy : 1;
  unsigned int dummy1 : 31;
} reg_pio_rw_ack_intr;
#define REG_RD_ADDR_pio_rw_ack_intr 104
#define REG_WR_ADDR_pio_rw_ack_intr 104

/* Register r_intr, scope pio, type r */
typedef struct {
  unsigned int rdy : 1;
  unsigned int dummy1 : 31;
} reg_pio_r_intr;
#define REG_RD_ADDR_pio_r_intr 108

/* Register r_masked_intr, scope pio, type r */
typedef struct {
  unsigned int rdy : 1;
  unsigned int dummy1 : 31;
} reg_pio_r_masked_intr;
#define REG_RD_ADDR_pio_r_masked_intr 112


/* Constants */
enum {
  regk_pio_a2                              = 0x00000003,
  regk_pio_no                              = 0x00000000,
  regk_pio_normal                          = 0x00000000,
  regk_pio_rd                              = 0x00000001,
  regk_pio_rw_ce0_cfg_default              = 0x00000000,
  regk_pio_rw_ce1_cfg_default              = 0x00000000,
  regk_pio_rw_ce2_cfg_default              = 0x00000000,
  regk_pio_rw_intr_mask_default            = 0x00000000,
  regk_pio_rw_man_ctrl_default             = 0x00000000,
  regk_pio_rw_oe_default                   = 0x00000000,
  regk_pio_wr                              = 0x00000002,
  regk_pio_wr_ce2                          = 0x00000003,
  regk_pio_yes                             = 0x00000001,
  regk_pio_yes_all                         = 0x000000ff
};
#endif /* __pio_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef __strmux_defs_h
#define __strmux_defs_h

/*
 * This file is autogenerated from
 *   file:           strmux.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile strmux_defs.h strmux.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope strmux */

/* Register rw_cfg, scope strmux, type rw */
typedef struct {
  unsigned int dma0  : 2;
  unsigned int dma1  : 2;
  unsigned int dma2  : 2;
  unsigned int dma3  : 2;
  unsigned int dma4  : 2;
  unsigned int dma5  : 2;
  unsigned int dma6  : 2;
  unsigned int dma7  : 2;
  unsigned int dummy1 : 2;
  unsigned int dma9  : 2;
  unsigned int dummy2 : 2;
  unsigned int dma11 : 2;
  unsigned int dummy3 : 8;
} reg_strmux_rw_cfg;
#define REG_RD_ADDR_strmux_rw_cfg 0
#define REG_WR_ADDR_strmux_rw_cfg 0


/* Constants */
enum {
  regk_strmux_eth                          = 0x00000001,
  regk_strmux_h264                         = 0x00000001,
  regk_strmux_iop                          = 0x00000001,
  regk_strmux_jpeg                         = 0x00000001,
  regk_strmux_off                          = 0x00000000,
  regk_strmux_rw_cfg_default               = 0x00000000,
  regk_strmux_ser0                         = 0x00000002,
  regk_strmux_ser1                         = 0x00000002,
  regk_strmux_ser2                         = 0x00000002,
  regk_strmux_ser3                         = 0x00000002,
  regk_strmux_ser4                         = 0x00000002,
  regk_strmux_sser                         = 0x00000001,
  regk_strmux_strcop                       = 0x00000001
};
#endif /* __strmux_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef __ddr2_defs_h
#define __ddr2_defs_h

/*
 * This file is autogenerated from
 *   file:           ddr2.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile ddr2_defs.h ddr2.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope ddr2 */

/* Register rw_cfg, scope ddr2, type rw */
typedef struct {
  unsigned int col_width        : 4;
  unsigned int nr_banks         : 1;
  unsigned int bw               : 1;
  unsigned int nr_ref           : 4;
  unsigned int ref_interval     : 11;
  unsigned int odt_ctrl         : 2;
  unsigned int odt_mem          : 1;
  unsigned int imp_strength     : 1;
  unsigned int auto_imp_cal     : 1;
  unsigned int imp_cal_override : 1;
  unsigned int dll_override     : 1;
  unsigned int dummy1           : 4;
} reg_ddr2_rw_cfg;
#define REG_RD_ADDR_ddr2_rw_cfg 0
#define REG_WR_ADDR_ddr2_rw_cfg 0

/* Register rw_timing, scope ddr2, type rw */
typedef struct {
  unsigned int wr  : 3;
  unsigned int rcd : 3;
  unsigned int rp  : 3;
  unsigned int ras : 4;
  unsigned int rfc : 7;
  unsigned int rc  : 5;
  unsigned int rtp : 2;
  unsigned int rtw : 3;
  unsigned int wtr : 2;
} reg_ddr2_rw_timing;
#define REG_RD_ADDR_ddr2_rw_timing 4
#define REG_WR_ADDR_ddr2_rw_timing 4

/* Register rw_latency, scope ddr2, type rw */
typedef struct {
  unsigned int cas      : 3;
  unsigned int additive : 3;
  unsigned int dummy1   : 26;
} reg_ddr2_rw_latency;
#define REG_RD_ADDR_ddr2_rw_latency 8
#define REG_WR_ADDR_ddr2_rw_latency 8

/* Register rw_phy_cfg, scope ddr2, type rw */
typedef struct {
  unsigned int en : 1;
  unsigned int dummy1 : 31;
} reg_ddr2_rw_phy_cfg;
#define REG_RD_ADDR_ddr2_rw_phy_cfg 12
#define REG_WR_ADDR_ddr2_rw_phy_cfg 12

/* Register rw_phy_ctrl, scope ddr2, type rw */
typedef struct {
  unsigned int rst       : 1;
  unsigned int cal_rst   : 1;
  unsigned int cal_start : 1;
  unsigned int dummy1    : 29;
} reg_ddr2_rw_phy_ctrl;
#define REG_RD_ADDR_ddr2_rw_phy_ctrl 16
#define REG_WR_ADDR_ddr2_rw_phy_ctrl 16

/* Register rw_ctrl, scope ddr2, type rw */
typedef struct {
  unsigned int mrs_data : 16;
  unsigned int cmd      : 8;
  unsigned int dummy1   : 8;
} reg_ddr2_rw_ctrl;
#define REG_RD_ADDR_ddr2_rw_ctrl 20
#define REG_WR_ADDR_ddr2_rw_ctrl 20

/* Register rw_pwr_down, scope ddr2, type rw */
typedef struct {
  unsigned int self_ref : 2;
  unsigned int phy_en   : 1;
  unsigned int dummy1   : 29;
} reg_ddr2_rw_pwr_down;
#define REG_RD_ADDR_ddr2_rw_pwr_down 24
#define REG_WR_ADDR_ddr2_rw_pwr_down 24

/* Register r_stat, scope ddr2, type r */
typedef struct {
  unsigned int dll_lock       : 1;
  unsigned int dll_delay_code : 7;
  unsigned int imp_cal_done   : 1;
  unsigned int imp_cal_fault  : 1;
  unsigned int cal_imp_pu     : 4;
  unsigned int cal_imp_pd     : 4;
  unsigned int dummy1         : 14;
} reg_ddr2_r_stat;
#define REG_RD_ADDR_ddr2_r_stat 28

/* Register rw_imp_ctrl, scope ddr2, type rw */
typedef struct {
  unsigned int imp_pu : 4;
  unsigned int imp_pd : 4;
  unsigned int dummy1 : 24;
} reg_ddr2_rw_imp_ctrl;
#define REG_RD_ADDR_ddr2_rw_imp_ctrl 32
#define REG_WR_ADDR_ddr2_rw_imp_ctrl 32

#define STRIDE_ddr2_rw_dll_ctrl 4
/* Register rw_dll_ctrl, scope ddr2, type rw */
typedef struct {
  unsigned int mode      : 1;
  unsigned int clk_delay : 7;
  unsigned int dummy1    : 24;
} reg_ddr2_rw_dll_ctrl;
#define REG_RD_ADDR_ddr2_rw_dll_ctrl 36
#define REG_WR_ADDR_ddr2_rw_dll_ctrl 36

#define STRIDE_ddr2_rw_dqs_dll_ctrl 4
/* Register rw_dqs_dll_ctrl, scope ddr2, type rw */
typedef struct {
  unsigned int dqs90_delay  : 7;
  unsigned int dqs180_delay : 7;
  unsigned int dqs270_delay : 7;
  unsigned int dqs360_delay : 7;
  unsigned int dummy1       : 4;
} reg_ddr2_rw_dqs_dll_ctrl;
#define REG_RD_ADDR_ddr2_rw_dqs_dll_ctrl 52
#define REG_WR_ADDR_ddr2_rw_dqs_dll_ctrl 52


/* Constants */
enum {
  regk_ddr2_al0                            = 0x00000000,
  regk_ddr2_al1                            = 0x00000008,
  regk_ddr2_al2                            = 0x00000010,
  regk_ddr2_al3                            = 0x00000018,
  regk_ddr2_al4                            = 0x00000020,
  regk_ddr2_auto                           = 0x00000003,
  regk_ddr2_bank4                          = 0x00000000,
  regk_ddr2_bank8                          = 0x00000001,
  regk_ddr2_bl4                            = 0x00000002,
  regk_ddr2_bl8                            = 0x00000003,
  regk_ddr2_bt_il                          = 0x00000008,
  regk_ddr2_bt_seq                         = 0x00000000,
  regk_ddr2_bw16                           = 0x00000001,
  regk_ddr2_bw32                           = 0x00000000,
  regk_ddr2_cas2                           = 0x00000020,
  regk_ddr2_cas3                           = 0x00000030,
  regk_ddr2_cas4                           = 0x00000040,
  regk_ddr2_cas5                           = 0x00000050,
  regk_ddr2_deselect                       = 0x000000c0,
  regk_ddr2_dic_weak                       = 0x00000002,
  regk_ddr2_direct                         = 0x00000001,
  regk_ddr2_dis                            = 0x00000000,
  regk_ddr2_dll_dis                        = 0x00000001,
  regk_ddr2_dll_en                         = 0x00000000,
  regk_ddr2_dll_rst                        = 0x00000100,
  regk_ddr2_emrs                           = 0x00000081,
  regk_ddr2_emrs2                          = 0x00000082,
  regk_ddr2_emrs3                          = 0x00000083,
  regk_ddr2_full                           = 0x00000001,
  regk_ddr2_hi_ref_rate                    = 0x00000080,
  regk_ddr2_mrs                            = 0x00000080,
  regk_ddr2_no                             = 0x00000000,
  regk_ddr2_nop                            = 0x000000b8,
  regk_ddr2_ocd_adj                        = 0x00000200,
  regk_ddr2_ocd_default                    = 0x00000380,
  regk_ddr2_ocd_drive0                     = 0x00000100,
  regk_ddr2_ocd_drive1                     = 0x00000080,
  regk_ddr2_ocd_exit                       = 0x00000000,
  regk_ddr2_odt_dis                        = 0x00000000,
  regk_ddr2_offs                           = 0x00000000,
  regk_ddr2_pre                            = 0x00000090,
  regk_ddr2_pre_all                        = 0x00000400,
  regk_ddr2_pwr_down_fast                  = 0x00000000,
  regk_ddr2_pwr_down_slow                  = 0x00001000,
  regk_ddr2_ref                            = 0x00000088,
  regk_ddr2_rtt150                         = 0x00000040,
  regk_ddr2_rtt50                          = 0x00000044,
  regk_ddr2_rtt75                          = 0x00000004,
  regk_ddr2_rw_cfg_default                 = 0x00186000,
  regk_ddr2_rw_dll_ctrl_default            = 0x00000000,
  regk_ddr2_rw_dll_ctrl_size               = 0x00000004,
  regk_ddr2_rw_dqs_dll_ctrl_default        = 0x00000000,
  regk_ddr2_rw_dqs_dll_ctrl_size           = 0x00000004,
  regk_ddr2_rw_latency_default             = 0x00000000,
  regk_ddr2_rw_phy_cfg_default             = 0x00000000,
  regk_ddr2_rw_pwr_down_default            = 0x00000000,
  regk_ddr2_rw_timing_default              = 0x00000000,
  regk_ddr2_s1Gb                           = 0x0000001a,
  regk_ddr2_s256Mb                         = 0x0000000f,
  regk_ddr2_s2Gb                           = 0x00000027,
  regk_ddr2_s4Gb                           = 0x00000042,
  regk_ddr2_s512Mb                         = 0x00000015,
  regk_ddr2_temp0_85                       = 0x00000618,
  regk_ddr2_temp85_95                      = 0x0000030c,
  regk_ddr2_term150                        = 0x00000002,
  regk_ddr2_term50                         = 0x00000003,
  regk_ddr2_term75                         = 0x00000001,
  regk_ddr2_test                           = 0x00000080,
  regk_ddr2_weak                           = 0x00000000,
  regk_ddr2_wr2                            = 0x00000200,
  regk_ddr2_wr3                            = 0x00000400,
  regk_ddr2_yes                            = 0x00000001
};
#endif /* __ddr2_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef __reg_map_h
#define __reg_map_h

/*
 * This file is autogenerated from
 *   file:            reg.rmap
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -base 0xb0000000 -map marb_bar.r marb_foo.r ccd_top.r ccd_stat.r ccd_tg.r ccd_dp.r ccd.r iop_sap_in.r iop_sap_out.r iop_sw_cfg.r iop_sw_cpu.r iop_sw_mpu.r iop_sw_spu.r iop_version.r iop_crc_par.r iop_dmc_in.r iop_dmc_out.r iop_fifo_in_extra.r iop_fifo_in.r iop_fifo_out_extra.r iop_fifo_out.r iop_mc.r iop_mpu.r iop_scrc_in.r iop_scrc_out.r iop_spu.r iop_timer_grp.r iop_trigger_grp.r iop.r -outfile reg_map.h reg.rmap
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
typedef enum {
  regi_ccd                                 = 0xb0000000,
  regi_ccd_top                             = 0xb0000000,
  regi_ccd_dp                              = 0xb0000400,
  regi_ccd_stat                            = 0xb0000800,
  regi_ccd_tg                              = 0xb0001000,
  regi_cfg                                 = 0xb0002000,
  regi_clkgen                              = 0xb0004000,
  regi_ddr2_ctrl                           = 0xb0006000,
  regi_dma0                                = 0xb0008000,
  regi_dma1                                = 0xb000a000,
  regi_dma11                               = 0xb000c000,
  regi_dma2                                = 0xb000e000,
  regi_dma3                                = 0xb0010000,
  regi_dma4                                = 0xb0012000,
  regi_dma5                                = 0xb0014000,
  regi_dma6                                = 0xb0016000,
  regi_dma7                                = 0xb0018000,
  regi_dma9                                = 0xb001a000,
  regi_eth                                 = 0xb001c000,
  regi_gio                                 = 0xb0020000,
  regi_h264                                = 0xb0022000,
  regi_hist                                = 0xb0026000,
  regi_iop                                 = 0xb0028000,
  regi_iop_version                         = 0xb0028000,
  regi_iop_fifo_in_extra                   = 0xb0028040,
  regi_iop_fifo_out_extra                  = 0xb0028080,
  regi_iop_trigger_grp0                    = 0xb00280c0,
  regi_iop_trigger_grp1                    = 0xb0028100,
  regi_iop_trigger_grp2                    = 0xb0028140,
  regi_iop_trigger_grp3                    = 0xb0028180,
  regi_iop_trigger_grp4                    = 0xb00281c0,
  regi_iop_trigger_grp5                    = 0xb0028200,
  regi_iop_trigger_grp6                    = 0xb0028240,
  regi_iop_trigger_grp7                    = 0xb0028280,
  regi_iop_crc_par                         = 0xb0028300,
  regi_iop_dmc_in                          = 0xb0028380,
  regi_iop_dmc_out                         = 0xb0028400,
  regi_iop_fifo_in                         = 0xb0028480,
  regi_iop_fifo_out                        = 0xb0028500,
  regi_iop_scrc_in                         = 0xb0028580,
  regi_iop_scrc_out                        = 0xb0028600,
  regi_iop_timer_grp0                      = 0xb0028680,
  regi_iop_timer_grp1                      = 0xb0028700,
  regi_iop_sap_in                          = 0xb0028800,
  regi_iop_sap_out                         = 0xb0028900,
  regi_iop_spu                             = 0xb0028a00,
  regi_iop_sw_cfg                          = 0xb0028b00,
  regi_iop_sw_cpu                          = 0xb0028c00,
  regi_iop_sw_mpu                          = 0xb0028d00,
  regi_iop_sw_spu                          = 0xb0028e00,
  regi_iop_mpu                             = 0xb0029000,
  regi_irq                                 = 0xb002a000,
  regi_irq2                                = 0xb006a000,
  regi_jpeg                                = 0xb002c000,
  regi_l2cache                             = 0xb0030000,
  regi_marb_bar                            = 0xb0032000,
  regi_marb_bar_bp0                        = 0xb0032140,
  regi_marb_bar_bp1                        = 0xb0032180,
  regi_marb_bar_bp2                        = 0xb00321c0,
  regi_marb_bar_bp3                        = 0xb0032200,
  regi_marb_foo                            = 0xb0034000,
  regi_marb_foo_bp0                        = 0xb0034280,
  regi_marb_foo_bp1                        = 0xb00342c0,
  regi_marb_foo_bp2                        = 0xb0034300,
  regi_marb_foo_bp3                        = 0xb0034340,
  regi_pinmux                              = 0xb0038000,
  regi_pio                                 = 0xb0036000,
  regi_sclr                                = 0xb003a000,
  regi_sclr_fifo                           = 0xb003c000,
  regi_ser0                                = 0xb003e000,
  regi_ser1                                = 0xb0040000,
  regi_ser2                                = 0xb0042000,
  regi_ser3                                = 0xb0044000,
  regi_ser4                                = 0xb0046000,
  regi_sser                                = 0xb0048000,
  regi_strcop                              = 0xb004a000,
  regi_strdma0                             = 0xb004e000,
  regi_strdma1                             = 0xb0050000,
  regi_strdma2                             = 0xb0052000,
  regi_strdma3                             = 0xb0054000,
  regi_strdma5                             = 0xb0056000,
  regi_strmux                              = 0xb004c000,
  regi_timer0                              = 0xb0058000,
  regi_timer1                              = 0xb005a000,
  regi_timer2                              = 0xb006e000,
  regi_trace                               = 0xb005c000,
  regi_vin                                 = 0xb005e000,
  regi_vout                                = 0xb0060000
} reg_scope_instances;
#endif /* __reg_map_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef __clkgen_defs_h
#define __clkgen_defs_h

/*
 * This file is autogenerated from
 *   file:           clkgen.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile clkgen_defs.h clkgen.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope clkgen */

/* Register r_bootsel, scope clkgen, type r */
typedef struct {
  unsigned int boot_mode       : 5;
  unsigned int intern_main_clk : 1;
  unsigned int extern_usb2_clk : 1;
  unsigned int dummy1          : 25;
} reg_clkgen_r_bootsel;
#define REG_RD_ADDR_clkgen_r_bootsel 0

/* Register rw_clk_ctrl, scope clkgen, type rw */
typedef struct {
  unsigned int pll             : 1;
  unsigned int cpu             : 1;
  unsigned int iop_usb         : 1;
  unsigned int vin             : 1;
  unsigned int sclr            : 1;
  unsigned int h264            : 1;
  unsigned int ddr2            : 1;
  unsigned int vout_hist       : 1;
  unsigned int eth             : 1;
  unsigned int ccd_tg_200      : 1;
  unsigned int dma0_1_eth      : 1;
  unsigned int ccd_tg_100      : 1;
  unsigned int jpeg            : 1;
  unsigned int sser_ser_dma6_7 : 1;
  unsigned int strdma0_2_video : 1;
  unsigned int dma2_3_strcop   : 1;
  unsigned int dma4_5_iop      : 1;
  unsigned int dma9_11         : 1;
  unsigned int memarb_bar_ddr  : 1;
  unsigned int sclr_h264       : 1;
  unsigned int dummy1          : 12;
} reg_clkgen_rw_clk_ctrl;
#define REG_RD_ADDR_clkgen_rw_clk_ctrl 4
#define REG_WR_ADDR_clkgen_rw_clk_ctrl 4


/* Constants */
enum {
  regk_clkgen_eth1000_rx                   = 0x0000000c,
  regk_clkgen_eth1000_tx                   = 0x0000000e,
  regk_clkgen_eth100_rx                    = 0x0000001d,
  regk_clkgen_eth100_rx_half               = 0x0000001c,
  regk_clkgen_eth100_tx                    = 0x0000001f,
  regk_clkgen_eth100_tx_half               = 0x0000001e,
  regk_clkgen_nand_3_2                     = 0x00000000,
  regk_clkgen_nand_3_2_0x30                = 0x00000002,
  regk_clkgen_nand_3_2_0x30_pll            = 0x00000012,
  regk_clkgen_nand_3_2_pll                 = 0x00000010,
  regk_clkgen_nand_3_3                     = 0x00000001,
  regk_clkgen_nand_3_3_0x30                = 0x00000003,
  regk_clkgen_nand_3_3_0x30_pll            = 0x00000013,
  regk_clkgen_nand_3_3_pll                 = 0x00000011,
  regk_clkgen_nand_4_2                     = 0x00000004,
  regk_clkgen_nand_4_2_0x30                = 0x00000006,
  regk_clkgen_nand_4_2_0x30_pll            = 0x00000016,
  regk_clkgen_nand_4_2_pll                 = 0x00000014,
  regk_clkgen_nand_4_3                     = 0x00000005,
  regk_clkgen_nand_4_3_0x30                = 0x00000007,
  regk_clkgen_nand_4_3_0x30_pll            = 0x00000017,
  regk_clkgen_nand_4_3_pll                 = 0x00000015,
  regk_clkgen_nand_5_2                     = 0x00000008,
  regk_clkgen_nand_5_2_0x30                = 0x0000000a,
  regk_clkgen_nand_5_2_0x30_pll            = 0x0000001a,
  regk_clkgen_nand_5_2_pll                 = 0x00000018,
  regk_clkgen_nand_5_3                     = 0x00000009,
  regk_clkgen_nand_5_3_0x30                = 0x0000000b,
  regk_clkgen_nand_5_3_0x30_pll            = 0x0000001b,
  regk_clkgen_nand_5_3_pll                 = 0x00000019,
  regk_clkgen_no                           = 0x00000000,
  regk_clkgen_rw_clk_ctrl_default          = 0x00000002,
  regk_clkgen_ser                          = 0x0000000d,
  regk_clkgen_ser_pll                      = 0x0000000f,
  regk_clkgen_yes                          = 0x00000001
};
#endif /* __clkgen_defs_h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifndef __timer_defs_h
#define __timer_defs_h

/*
 * This file is autogenerated from
 *   file:           timer.r
 * 
 *   by ../../../tools/rdesc/bin/rdes2c -outfile timer_defs.h timer.r
 * Any changes here will be lost.
 *
 * -*- buffer-read-only: t -*-
 */
/* Main access macros */
#ifndef REG_RD
#define REG_RD( scope, inst, reg ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR
#define REG_WR( scope, inst, reg, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_VECT
#define REG_RD_VECT( scope, inst, reg, index ) \
  REG_READ( reg_##scope##_##reg, \
            (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_VECT
#define REG_WR_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( reg_##scope##_##reg, \
             (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT
#define REG_RD_INT( scope, inst, reg ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_WR_INT
#define REG_WR_INT( scope, inst, reg, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg, (val) )
#endif

#ifndef REG_RD_INT_VECT
#define REG_RD_INT_VECT( scope, inst, reg, index ) \
  REG_READ( int, (inst) + REG_RD_ADDR_##scope##_##reg + \
	    (index) * STRIDE_##scope##_##reg )
#endif

#ifndef REG_WR_INT_VECT
#define REG_WR_INT_VECT( scope, inst, reg, index, val ) \
  REG_WRITE( int, (inst) + REG_WR_ADDR_##scope##_##reg + \
	     (index) * STRIDE_##scope##_##reg, (val) )
#endif

#ifndef REG_TYPE_CONV
#define REG_TYPE_CONV( type, orgtype, val ) \
  ( { union { orgtype o; type n; } r; r.o = val; r.n; } )
#endif

#ifndef reg_page_size
#define reg_page_size 8192
#endif

#ifndef REG_ADDR
#define REG_ADDR( scope, inst, reg ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg )
#endif

#ifndef REG_ADDR_VECT
#define REG_ADDR_VECT( scope, inst, reg, index ) \
  ( (inst) + REG_RD_ADDR_##scope##_##reg + \
    (index) * STRIDE_##scope##_##reg )
#endif

/* C-code for register scope timer */

/* Register rw_tmr0_div, scope timer, type rw */
typedef unsigned int reg_timer_rw_tmr0_div;
#define REG_RD_ADDR_timer_rw_tmr0_div 0
#define REG_WR_ADDR_timer_rw_tmr0_div 0

/* Register r_tmr0_data, scope timer, type r */
typedef unsigned int reg_timer_r_tmr0_data;
#define REG_RD_ADDR_timer_r_tmr0_data 4

/* Register rw_tmr0_ctrl, scope timer, type rw */
typedef struct {
  unsigned int op   : 2;
  unsigned int freq : 3;
  unsigned int dummy1 : 27;
} reg_timer_rw_tmr0_ctrl;
#define REG_RD_ADDR_timer_rw_tmr0_ctrl 8
#define REG_WR_ADDR_timer_rw_tmr0_ctrl 8

/* Register rw_tmr1_div, scope timer, type rw */
typedef unsigned int reg_timer_rw_tmr1_div;
#define REG_RD_ADDR_timer_rw_tmr1_div 16
#define REG_WR_ADDR_timer_rw_tmr1_div 16

/* Register r_tmr1_data, scope timer, type r */
typedef unsigned int reg_timer_r_tmr1_data;
#define REG_RD_ADDR_timer_r_tmr1_data 20

/* Register rw_tmr1_ctrl, scope timer, type rw */
typedef struct {
  unsigned int op   : 2;
  unsigned int freq : 3;
  unsigned int dummy1 : 27;
} reg_timer_rw_tmr1_ctrl;
#define REG_RD_ADDR_timer_rw_tmr1_ctrl 24
#define REG_WR_ADDR_timer_rw_tmr1_ctrl 24

/* Register rs_cnt_data, scope timer, type rs */
typedef struct {
  unsigned int tmr : 24;
  unsigned int cnt : 8;
} reg_timer_rs_cnt_data;
#define REG_RD_ADDR_timer_rs_cnt_data 32

/* Register r_cnt_data, scope timer, type r */
typedef struct {
  unsigned int tmr : 24;
  unsigned int cnt : 8;
} reg_timer_r_cnt_data;
#define REG_RD_ADDR_timer_r_cnt_data 36

/* Register rw_cnt_cfg, scope timer, type rw */
typedef struct {
  unsigned int clk : 2;
  unsigned int dummy1 : 30;
} reg_timer_rw_cnt_cfg;
#define REG_RD_ADDR_timer_rw_cnt_cfg 40
#define REG_WR_ADDR_timer_rw_cnt_cfg 40

/* Register rw_trig, scope timer, type rw */
typedef unsigned int reg_timer_rw_trig;
#define REG_RD_ADDR_timer_rw_trig 48
#define REG_WR_ADDR_timer_rw_trig 48

/* Register rw_trig_cfg, scope timer, type rw */
typedef struct {
  unsigned int tmr : 2;
  unsigned int dummy1 : 30;
} reg_timer_rw_trig_cfg;
#define REG_RD_ADDR_timer_rw_trig_cfg 52
#define REG_WR_ADDR_timer_rw_trig_cfg 52

/* Register r_time, scope timer, type r */
typedef unsigned int reg_timer_r_time;
#define REG_RD_ADDR_timer_r_time 56

/* Register rw_out, scope timer, type rw */
typedef struct {
  unsigned int tmr : 2;
  unsigned int dummy1 : 30;
} reg_timer_rw_out;
#define REG_RD_ADDR_timer_rw_out 60
#define REG_WR_ADDR_timer_rw_out 60

/* Register rw_wd_ctrl, scope timer, type rw */
typedef struct {
  unsigned int cnt : 8;
  unsigned int cmd : 1;
  unsigned int key : 7;
  unsigned int dummy1 : 16;
} reg_timer_rw_wd_ctrl;
#define REG_RD_ADDR_timer_rw_wd_ctrl 64
#define REG_WR_ADDR_timer_rw_wd_ctrl 64

/* Register r_wd_stat, scope timer, type r */
typedef struct {
  unsigned int cnt : 8;
  unsigned int cmd : 1;
  unsigned int dummy1 : 23;
} reg_timer_r_wd_stat;
#define REG_RD_ADDR_timer_r_wd_stat 68

/* Register rw_intr_mask, scope timer, type rw */
typedef struct {
  unsigned int tmr0 : 1;
  unsigned int tmr1 : 1;
  unsigned int cnt  : 1;
  unsigned int trig : 1;
  unsigned int dummy1 : 28;
} reg_timer_rw_intr_mask;
#define REG_RD_ADDR_timer_rw_intr_mask 72
#define REG_WR_ADDR_timer_rw_intr_mask 72

/* Register rw_ack_intr, scope timer, type rw */
typedef struct {
  unsigned int tmr0 : 1;
  unsigned int tmr1 : 1;
  unsigned int cnt  : 1;
  unsigned int trig : 1;
  unsigned int dummy1 : 28;
} reg_timer_rw_ack_intr;
#define REG_RD_ADDR_timer_rw_ack_intr 76
#define REG_WR_ADDR_timer_rw_ack_intr 76

/* Register r_intr, scope timer, type r */
typedef struct {
  unsigned int tmr0 : 1;
  unsigned int tmr1 : 1;
  unsigned int cnt  : 1;
  unsigned int trig : 1;
  unsigned int dummy1 : 28;
} reg_timer_r_intr;
#define REG_RD_ADDR_timer_r_intr 80

/* Register r_masked_intr, scope timer, type r */
typedef struct {
  unsigned int tmr0 : 1;
  unsigned int tmr1 : 1;
  unsigned int cnt  : 1;
  unsigned int trig : 1;
  unsigned int dummy1 : 28;
} reg_timer_r_masked_intr;
#define REG_RD_ADDR_timer_r_masked_intr 84

/* Register rw_test, scope timer, type rw */
typedef struct {
  unsigned int dis : 1;
  unsigned int en  : 1;
  unsigned int dummy1 : 30;
} reg_timer_rw_test;
#define REG_RD_ADDR_timer_rw_test 88
#define REG_WR_ADDR_timer_rw_test 88


/* Constants */
enum {
  regk_timer_ext                           = 0x00000001,
  regk_timer_f100                          = 0x00000007,
  regk_timer_f29_493                       = 0x00000004,
  regk_timer_f32                           = 0x00000005,
  regk_timer_f32_768                       = 0x00000006,
  regk_timer_f90                           = 0x00000003,
  regk_timer_hold                          = 0x00000001,
  regk_timer_ld                            = 0x00000000,
  regk_timer_no                            = 0x00000000,
  regk_timer_off                           = 0x00000000,
  regk_timer_run                           = 0x00000002,
  regk_timer_rw_cnt_cfg_default            = 0x00000000,
  regk_timer_rw_intr_mask_default          = 0x00000000,
  regk_timer_rw_out_default                = 0x00000000,
  regk_timer_rw_test_default               = 0x00000000,
  regk_timer_rw_tmr0_ctrl_default          = 0x00000000,
  regk_timer_rw_tmr1_ctrl_default          = 0x00000000,
  regk_timer_rw_trig_cfg_default           = 0x00000000,
  regk_timer_start                         = 0x00000001,
  regk_timer_stop                          = 0x00000000,
  regk_timer_time                          = 0x00000001,
  regk_timer_tmr0                          = 0x00000002,
  regk_timer_tmr1                          = 0x00000003,
  regk_timer_vclk                          = 0x00000002,
  regk_timer_yes                           = 0x00000001
};
#endif /* __timer_defs_h */
                                                                                                                                                                                                                                                                                                                     #ifndef _ASM_ARCH_MEMMAP_H
#define _ASM_ARCH_MEMMAP_H

#define MEM_INTMEM_START (0x38000000)
#define MEM_INTMEM_SIZE (0x00018000)
#define MEM_DRAM_START (0x40000000)

#define MEM_NON_CACHEABLE (0x80000000)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #ifndef _ASM_CRIS_SHMPARAM_H
#define _ASM_CRIS_SHMPARAM_H

/* same as asm-i386/ version.. */

#define	SHMLBA PAGE_SIZE		 /* attach addr a multiple of this */

#endif /* _ASM_CRIS_SHMPARAM_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef __ASM_AXISFLASHMAP_H
#define __ASM_AXISFLASHMAP_H

/* Bootblock parameters are stored at 0xc000 and has the FLASH_BOOT_MAGIC 
 * as start, it ends with 0xFFFFFFFF */
#define FLASH_BOOT_MAGIC 0xbeefcace
#define BOOTPARAM_OFFSET 0xc000
/* apps/bootblocktool is used to read and write the parameters,
 * and it has nothing to do with the partition table. 
 */

#define PARTITION_TABLE_OFFSET 10
#define PARTITION_TABLE_MAGIC 0xbeef	/* Not a good magic */

/* The partitiontable_head is located at offset +10: */
struct partitiontable_head {
	__u16 magic;	/* PARTITION_TABLE_MAGIC */
	__u16 size;	/* Length of ptable block (entries + end marker) */
	__u32 checksum;	/* simple longword sum, over entries + end marker  */
};

/* And followed by partition table entries */
struct partitiontable_entry {
	__u32 offset;		/* relative to the sector the ptable is in */
	__u32 size;		/* in bytes */
	__u32 checksum;		/* simple longword sum */
	__u16 type;		/* see type codes below */
	__u16 flags;		/* bit 0: ro/rw = 1/0 */
	__u32 future0;		/* 16 bytes reserved for future use */
	__u32 future1;
	__u32 future2;
	__u32 future3;
};
/* ended by an end marker: */
#define PARTITIONTABLE_END_MARKER 0xFFFFFFFF
#define PARTITIONTABLE_END_MARKER_SIZE 4

#define PARTITIONTABLE_END_PAD	10

/* Complete structure for whole partition table */
/* note that table may end before CONFIG_ETRAX_PTABLE_ENTRIES by setting
 * offset of the last entry + 1 to PARTITIONTABLE_END_MARKER.
 */
struct partitiontable {
	__u8 skip[PARTITION_TABLE_OFFSET];
	struct partitiontable_head head;
	struct partitiontable_entry entries[];
};

#define PARTITION_TYPE_PARAM  0x0001
#define PARTITION_TYPE_KERNEL 0x0002
#define PARTITION_TYPE_JFFS   0x0003
#define PARTITION_TYPE_JFFS2  0x0000

#define	PARTITION_FLAGS_READONLY_MASK	0x0001
#define	PARTITION_FLAGS_READONLY	0x0001

/* The master mtd for the entire flash. */
extern struct mtd_info *axisflash_mtd;

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_IRQ_H
#define _ASM_IRQ_H

#include <arch/irq.h>

static inline int irq_canonicalize(int irq)
{  
  return irq; 
}

#endif  /* _ASM_IRQ_H */


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * linux/include/asm-cris/timex.h
 *
 * CRIS architecture timex specifications
 */

#ifndef _ASM_CRIS_TIMEX_H
#define _ASM_CRIS_TIMEX_H

#include <arch/timex.h>

/*
 * We don't have a cycle-counter.. but we do not support SMP anyway where this is
 * used so it does not matter.
 */

typedef unsigned long long cycles_t;

static inline cycles_t get_cycles(void)
{
        return 0;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #ifndef __ASM_CRIS_PCI_H
#define __ASM_CRIS_PCI_H


#ifdef __KERNEL__
#include <linux/mm.h>		/* for struct page */

/* Can be used to override the logic in pci_scan_bus for skipping
   already-configured bus numbers - to be used for buggy BIOSes
   or architectures with incomplete PCI setup by the loader */

#define pcibios_assign_all_busses(void) 1

#define PCIBIOS_MIN_IO		0x1000
#define PCIBIOS_MIN_MEM		0x10000000

#define PCIBIOS_MIN_CARDBUS_IO	0x4000

void pcibios_config_init(void);
struct pci_bus * pcibios_scan_root(int bus);

void pcibios_set_master(struct pci_dev *dev);
struct irq_routing_table *pcibios_get_irq_routing_table(void);
int pcibios_set_irq_routing(struct pci_dev *dev, int pin, int irq);

/* Dynamic DMA mapping stuff.
 * i386 has everything mapped statically.
 */

#include <linux/types.h>
#include <linux/slab.h>
#include <linux/scatterlist.h>
#include <linux/string.h>
#include <asm/io.h>

struct pci_dev;

/* The PCI address space does equal the physical memory
 * address space.  The networking and block device layers use
 * this boolean for bounce buffer decisions.
 */
#define PCI_DMA_BUS_IS_PHYS	(1)

#define HAVE_PCI_MMAP
extern int pci_mmap_page_range(struct pci_dev *dev, struct vm_area_struct *vma,
			       enum pci_mmap_state mmap_state, int write_combine);


#endif /* __KERNEL__ */

/* generic pci stuff */
#include <asm-generic/pci.h>

#endif /* __ASM_CRIS_PCI_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef _ASM_FB_H_
#define _ASM_FB_H_
#include <linux/fb.h>

#define fb_pgprotect(...) do {} while (0)

static inline int fb_is_primary_device(struct fb_info *info)
{
	return 0;
}

#endif /* _ASM_FB_H_ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifndef __ASM_CRIS_SWITCH_TO_H
#define __ASM_CRIS_SWITCH_TO_H

/* the switch_to macro calls resume, an asm function in entry.S which does the actual
 * task switching.
 */

extern struct task_struct *resume(struct task_struct *prev, struct task_struct *next, int);
#define switch_to(prev,next,last) last = resume(prev,next, \
					 (int)&((struct task_struct *)0)->thread)

#endif /* __ASM_CRIS_SWITCH_TO_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /* empty */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_CRIS_STRING_H
#define _ASM_CRIS_STRING_H

/* the optimized memcpy is in arch/cris/lib/string.c */

#define __HAVE_ARCH_MEMCPY
extern void *memcpy(void *, const void *, size_t);

/* New and improved.  In arch/cris/lib/memset.c */

#define __HAVE_ARCH_MEMSET
extern void *memset(void *, int, size_t);

#ifdef CONFIG_ETRAX_ARCH_V32
/* For v32 we provide strcmp.  */
#define __HAVE_ARCH_STRCMP
extern int strcmp(const char *s1, const char *s2);
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _CRIS_PAGE_H
#define _CRIS_PAGE_H

#include <arch/page.h>
#include <linux/const.h>

/* PAGE_SHIFT determines the page size */
#define PAGE_SHIFT	13
#define PAGE_SIZE	(_AC(1, UL) << PAGE_SHIFT)
#define PAGE_MASK	(~(PAGE_SIZE-1))

#define clear_page(page)        memset((void *)(page), 0, PAGE_SIZE)
#define copy_page(to,from)      memcpy((void *)(to), (void *)(from), PAGE_SIZE)

#define clear_user_page(page, vaddr, pg)    clear_page(page)
#define copy_user_page(to, from, vaddr, pg) copy_page(to, from)

#define __alloc_zeroed_user_highpage(movableflags, vma, vaddr) \
	alloc_page_vma(GFP_HIGHUSER | __GFP_ZERO | movableflags, vma, vaddr)
#define __HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE

/*
 * These are used to make use of C type-checking..
 */
#ifndef __ASSEMBLY__
typedef struct { unsigned long pte; } pte_t;
typedef struct { unsigned long pgd; } pgd_t;
typedef struct { unsigned long pgprot; } pgprot_t;
typedef struct page *pgtable_t;
#endif

#define pte_val(x)	((x).pte)
#define pgd_val(x)	((x).pgd)
#define pgprot_val(x)	((x).pgprot)

#define __pte(x)	((pte_t) { (x) } )
#define __pgd(x)	((pgd_t) { (x) } )
#define __pgprot(x)	((pgprot_t) { (x) } )

/* On CRIS the PFN numbers doesn't start at 0 so we have to compensate */
/* for that before indexing into the page table starting at mem_map    */
#define ARCH_PFN_OFFSET		(PAGE_OFFSET >> PAGE_SHIFT)
#define pfn_valid(pfn)		(((pfn) - (PAGE_OFFSET >> PAGE_SHIFT)) < max_mapnr)

/* to index into the page map. our pages all start at physical addr PAGE_OFFSET so
 * we can let the map start there. notice that we subtract PAGE_OFFSET because
 * we start our mem_map there - in other ports they map mem_map physically and
 * use __pa instead. in our system both the physical and virtual address of DRAM
 * is too high to let mem_map start at 0, so we do it this way instead (similar
 * to arm and m68k I think)
 */ 

#define virt_to_page(kaddr)    (mem_map + (((unsigned long)(kaddr) - PAGE_OFFSET) >> PAGE_SHIFT))
#define virt_addr_valid(kaddr)	pfn_valid((unsigned)(kaddr) >> PAGE_SHIFT)

/* convert a page (based on mem_map and forward) to a physical address
 * do this by figuring out the virtual address and then use __pa
 */

#define page_to_phys(page)     __pa((((page) - mem_map) << PAGE_SHIFT) + PAGE_OFFSET)

#ifndef __ASSEMBLY__

#endif /* __ASSEMBLY__ */

#define VM_DATA_DEFAULT_FLAGS	(VM_READ | VM_WRITE | VM_EXEC | \
				 VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)

#include <asm-generic/memory_model.h>
#include <asm-generic/getorder.h>

#endif /* _CRIS_PAGE_H */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #ifndef _CRIS_TERMIOS_H
#define _CRIS_TERMIOS_H

#include <uapi/asm/termios.h>


/*	intr=^C		quit=^\		erase=del	kill=^U
	eof=^D		vtime=\0	vmin=\1		sxtc=\0
	start=^Q	stop=^S		susp=^Z		eol=\0
	reprint=^R	discard=^U	werase=^W	lnext=^V
	eol2=\0
*/
#define INIT_C_CC "\003\034\177\025\004\0\1\0\021\023\032\0\022\017\027\026\0"

/*
 * Translate a "termio" structure into a "termios". Ugh.
 */
#define SET_LOW_TERMIOS_BITS(termios, termio, x) { \
	unsigned short __tmp; \
	get_user(__tmp,&(termio)->x); \
	*(unsigned short *) &(termios)->x = __tmp; \
}

#define user_termio_to_kernel_termios(termios, termio) \
({ \
	SET_LOW_TERMIOS_BITS(termios, termio, c_iflag); \
	SET_LOW_TERMIOS_BITS(termios, termio, c_oflag); \
	SET_LOW_TERMIOS_BITS(termios, termio, c_cflag); \
	SET_LOW_TERMIOS_BITS(termios, termio, c_lflag); \
	copy_from_user((termios)->c_cc, (termio)->c_cc, NCC); \
})

/*
 * Translate a "termios" structure into a "termio". Ugh.
 */
#define kernel_termios_to_user_termio(termio, termios) \
({ \
	put_user((termios)->c_iflag, &(termio)->c_iflag); \
	put_user((termios)->c_oflag, &(termio)->c_oflag); \
	put_user((termios)->c_cflag, &(termio)->c_cflag); \
	put_user((termios)->c_lflag, &(termio)->c_lflag); \
	put_user((termios)->c_line,  &(termio)->c_line); \
	copy_to_user((termio)->c_cc, (termios)->c_cc, NCC); \
})

#define user_termios_to_kernel_termios(k, u) copy_from_user(k, u, sizeof(struct termios2))
#define kernel_termios_to_user_termios(u, k) copy_to_user(u, k, sizeof(struct termios2))
#define user_termios_to_kernel_termios_1(k, u) copy_from_user(k, u, sizeof(struct termios))
#define kernel_termios_to_user_termios_1(u, k) copy_to_user(u, k, sizeof(struct termios))

#endif	/* _CRIS_TERMIOS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * CRIS pgtable.h - macros and functions to manipulate page tables.
 */

#ifndef _CRIS_PGTABLE_H
#define _CRIS_PGTABLE_H

#include <asm/page.h>
#include <asm-generic/pgtable-nopmd.h>

#ifndef __ASSEMBLY__
#include <linux/sched.h>
#include <asm/mmu.h>
#endif
#include <arch/pgtable.h>

/*
 * The Linux memory management assumes a three-level page table setup. On
 * CRIS, we use that, but "fold" the mid level into the top-level page
 * table. Since the MMU TLB is software loaded through an interrupt, it
 * supports any page table structure, so we could have used a three-level
 * setup, but for the amounts of memory we normally use, a two-level is
 * probably more efficient.
 *
 * This file contains the functions and defines necessary to modify and use
 * the CRIS page table tree.
 */
#ifndef __ASSEMBLY__
extern void paging_init(void);
#endif

/* Certain architectures need to do special things when pte's
 * within a page table are directly modified.  Thus, the following
 * hook is made available.
 */
#define set_pte(pteptr, pteval) ((*(pteptr)) = (pteval))
#define set_pte_at(mm,addr,ptep,pteval) set_pte(ptep,pteval)

/*
 * (pmds are folded into pgds so this doesn't get actually called,
 * but the define is needed for a generic inline function.)
 */
#define set_pmd(pmdptr, pmdval) (*(pmdptr) = pmdval)
#define set_pgu(pudptr, pudval) (*(pudptr) = pudval)

/* PGDIR_SHIFT determines the size of the area a second-level page table can
 * map. It is equal to the page size times the number of PTE's that fit in
 * a PMD page. A PTE is 4-bytes in CRIS. Hence the following number.
 */

#define PGDIR_SHIFT	(PAGE_SHIFT + (PAGE_SHIFT-2))
#define PGDIR_SIZE	(1UL << PGDIR_SHIFT)
#define PGDIR_MASK	(~(PGDIR_SIZE-1))

/*
 * entries per page directory level: we use a two-level, so
 * we don't really have any PMD directory physically.
 * pointers are 4 bytes so we can use the page size and 
 * divide it by 4 (shift by 2).
 */
#define PTRS_PER_PTE	(1UL << (PAGE_SHIFT-2))
#define PTRS_PER_PGD	(1UL << (PAGE_SHIFT-2))

/* calculate how many PGD entries a user-level program can use
 * the first mappable virtual address is 0
 * (TASK_SIZE is the maximum virtual address space)
 */

#define USER_PTRS_PER_PGD       (TASK_SIZE/PGDIR_SIZE)
#define FIRST_USER_ADDRESS      0UL

/* zero page used for uninitialized stuff */
#ifndef __ASSEMBLY__
extern unsigned long empty_zero_page;
#define ZERO_PAGE(vaddr) (virt_to_page(empty_zero_page))
#endif

/* number of bits that fit into a memory pointer */
#define BITS_PER_PTR			(8*sizeof(unsigned long))

/* to align the pointer to a pointer address */
#define PTR_MASK			(~(sizeof(void*)-1))

/* sizeof(void*)==1<<SIZEOF_PTR_LOG2 */
/* 64-bit machines, beware!  SRB. */
#define SIZEOF_PTR_LOG2			2

/* to find an entry in a page-table */
#define PAGE_PTR(address) \
((unsigned long)(address)>>(PAGE_SHIFT-SIZEOF_PTR_LOG2)&PTR_MASK&~PAGE_MASK)

/* to set the page-dir */
#define SET_PAGE_DIR(tsk,pgdir)

#define pte_none(x)	(!pte_val(x))
#define pte_present(x)	(pte_val(x) & _PAGE_PRESENT)
#define pte_clear(mm,addr,xp)	do { pte_val(*(xp)) = 0; } while (0)

#define pmd_none(x)     (!pmd_val(x))
/* by removing the _PAGE_KERNEL bit from the comparison, the same pmd_bad
 * works for both _PAGE_TABLE and _KERNPG_TABLE pmd entries.
 */
#define	pmd_bad(x)	((pmd_val(x) & (~PAGE_MASK & ~_PAGE_KERNEL)) != _PAGE_TABLE)
#define pmd_present(x)	(pmd_val(x) & _PAGE_PRESENT)
#define pmd_clear(xp)	do { pmd_val(*(xp)) = 0; } while (0)

#ifndef __ASSEMBLY__

/*
 * The following only work if pte_present() is true.
 * Undefined behaviour if not..
 */

static inline int pte_write(pte_t pte)          { return pte_val(pte) & _PAGE_WRITE; }
static inline int pte_dirty(pte_t pte)          { return pte_val(pte) & _PAGE_MODIFIED; }
static inline int pte_young(pte_t pte)          { return pte_val(pte) & _PAGE_ACCESSED; }
static inline int pte_special(pte_t pte)	{ return 0; }

static inline pte_t pte_wrprotect(pte_t pte)
{
        pte_val(pte) &= ~(_PAGE_WRITE | _PAGE_SILENT_WRITE);
        return pte;
}

static inline pte_t pte_mkclean(pte_t pte)
{
	pte_val(pte) &= ~(_PAGE_MODIFIED | _PAGE_SILENT_WRITE); 
	return pte; 
}

static inline pte_t pte_mkold(pte_t pte)
{
	pte_val(pte) &= ~(_PAGE_ACCESSED | _PAGE_SILENT_READ);
	return pte;
}

static inline pte_t pte_mkwrite(pte_t pte)
{
        pte_val(pte) |= _PAGE_WRITE;
        if (pte_val(pte) & _PAGE_MODIFIED)
                pte_val(pte) |= _PAGE_SILENT_WRITE;
        return pte;
}

static inline pte_t pte_mkdirty(pte_t pte)
{
        pte_val(pte) |= _PAGE_MODIFIED;
        if (pte_val(pte) & _PAGE_WRITE)
                pte_val(pte) |= _PAGE_SILENT_WRITE;
        return pte;
}

static inline pte_t pte_mkyoung(pte_t pte)
{
        pte_val(pte) |= _PAGE_ACCESSED;
        if (pte_val(pte) & _PAGE_READ)
        {
                pte_val(pte) |= _PAGE_SILENT_READ;
                if ((pte_val(pte) & (_PAGE_WRITE | _PAGE_MODIFIED)) ==
		    (_PAGE_WRITE | _PAGE_MODIFIED))
                        pte_val(pte) |= _PAGE_SILENT_WRITE;
        }
        return pte;
}
static inline pte_t pte_mkspecial(pte_t pte)	{ return pte; }

/*
 * Conversion functions: convert a page and protection to a page entry,
 * and a page entry and page directory to the page they refer to.
 */

/* What actually goes as arguments to the various functions is less than
 * obvious, but a rule of thumb is that struct page's goes as struct page *,
 * really physical DRAM addresses are unsigned long's, and DRAM "virtual"
 * addresses (the 0xc0xxxxxx's) goes as void *'s.
 */

static inline pte_t __mk_pte(void * page, pgprot_t pgprot)
{
	pte_t pte;
	/* the PTE needs a physical address */
	pte_val(pte) = __pa(page) | pgprot_val(pgprot);
	return pte;
}

#define mk_pte(page, pgprot) __mk_pte(page_address(page), (pgprot))

#define mk_pte_phys(physpage, pgprot) \
({                                                                      \
        pte_t __pte;                                                    \
                                                                        \
        pte_val(__pte) = (physpage) + pgprot_val(pgprot);               \
        __pte;                                                          \
})

static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
{ pte_val(pte) = (pte_val(pte) & _PAGE_CHG_MASK) | pgprot_val(newprot); return pte; }

#define pgprot_noncached(prot) __pgprot((pgprot_val(prot) | _PAGE_NO_CACHE))


/* pte_val refers to a page in the 0x4xxxxxxx physical DRAM interval
 * __pte_page(pte_val) refers to the "virtual" DRAM interval
 * pte_pagenr refers to the page-number counted starting from the virtual DRAM start
 */

static inline unsigned long __pte_page(pte_t pte)
{
	/* the PTE contains a physical address */
	return (unsigned long)__va(pte_val(pte) & PAGE_MASK);
}

#define pte_pagenr(pte)         ((__pte_page(pte) - PAGE_OFFSET) >> PAGE_SHIFT)

/* permanent address of a page */

#define __page_address(page)    (PAGE_OFFSET + (((page) - mem_map) << PAGE_SHIFT))
#define pte_page(pte)           (mem_map+pte_pagenr(pte))

/* only the pte's themselves need to point to physical DRAM (see above)
 * the pagetable links are purely handled within the kernel SW and thus
 * don't need the __pa and __va transformations.
 */

static inline void pmd_set(pmd_t * pmdp, pte_t * ptep)
{ pmd_val(*pmdp) = _PAGE_TABLE | (unsigned long) ptep; }

#define pmd_page(pmd)		(pfn_to_page(pmd_val(pmd) >> PAGE_SHIFT))
#define pmd_page_vaddr(pmd)	((unsigned long) __va(pmd_val(pmd) & PAGE_MASK))

/* to find an entry in a page-table-directory. */
#define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD-1))

/* to find an entry in a page-table-directory */
static inline pgd_t * pgd_offset(const struct mm_struct *mm, unsigned long address)
{
	return mm->pgd + pgd_index(address);
}

/* to find an entry in a kernel page-table-directory */
#define pgd_offset_k(address) pgd_offset(&init_mm, address)

/* Find an entry in the third-level page table.. */
#define __pte_offset(address) \
	(((address) >> PAGE_SHIFT) & (PTRS_PER_PTE - 1))
#define pte_offset_kernel(dir, address) \
	((pte_t *) pmd_page_vaddr(*(dir)) +  __pte_offset(address))
#define pte_offset_map(dir, address) \
	((pte_t *)page_address(pmd_page(*(dir))) + __pte_offset(address))

#define pte_unmap(pte) do { } while (0)
#define pte_pfn(x)		((unsigned long)(__va((x).pte)) >> PAGE_SHIFT)
#define pfn_pte(pfn, prot)	__pte(((pfn) << PAGE_SHIFT) | pgprot_val(prot))

#define pte_ERROR(e) \
        printk("%s:%d: bad pte %p(%08lx).\n", __FILE__, __LINE__, &(e), pte_val(e))
#define pgd_ERROR(e) \
        printk("%s:%d: bad pgd %p(%08lx).\n", __FILE__, __LINE__, &(e), pgd_val(e))


extern pgd_t swapper_pg_dir[PTRS_PER_PGD]; /* defined in head.S */

/*
 * CRIS doesn't have any external MMU info: the kernel page
 * tables contain all the necessary information.
 * 
 * Actually I am not sure on what this could be used for.
 */
static inline void update_mmu_cache(struct vm_area_struct * vma,
	unsigned long address, pte_t *ptep)
{
}

/* Encode and de-code a swap entry (must be !pte_none(e) && !pte_present(e)) */
/* Since the PAGE_PRESENT bit is bit 4, we can use the bits above */

#define __swp_type(x)			(((x).val >> 5) & 0x7f)
#define __swp_offset(x)			((x).val >> 12)
#define __swp_entry(type, offset)	((swp_entry_t) { ((type) << 5) | ((offset) << 12) })
#define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val(pte) })
#define __swp_entry_to_pte(x)		((pte_t) { (x).val })

#define kern_addr_valid(addr)   (1)

#include <asm-generic/pgtable.h>

/*
 * No page table caches to initialise
 */
#define pgtable_cache_init()   do { } while (0)

typedef pte_t *pte_addr_t;

#endif /* __ASSEMBLY__ */
#endif /* _CRIS_PGTABLE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef __CRIS_MMU_CONTEXT_H
#define __CRIS_MMU_CONTEXT_H

#include <asm-generic/mm_hooks.h>

extern int init_new_context(struct task_struct *tsk, struct mm_struct *mm);
extern void get_mmu_context(struct mm_struct *mm);
extern void destroy_context(struct mm_struct *mm);
extern void switch_mm(struct mm_struct *prev, struct mm_struct *next,
		      struct task_struct *tsk);

#define deactivate_mm(tsk,mm)	do { } while (0)

static inline void activate_mm(struct mm_struct *prev, struct mm_struct *next)
{
	unsigned long flags;

	local_irq_save(flags);
	switch_mm(prev, next, NULL);
	local_irq_restore(flags);
}

/* current active pgd - this is similar to other processors pgd 
 * registers like cr3 on the i386
 */

/* defined in arch/cris/mm/fault.c */
DECLARE_PER_CPU(pgd_t *, current_pgd);

static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
{
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*!**************************************************************************
*!
*! FILE NAME  : eshlibld.h
*!
*! DESCRIPTION: Prototypes for exported shared library functions
*!
*! FUNCTIONS  : perform_cris_aout_relocations, shlibmod_fork, shlibmod_exit
*! (EXPORTED)
*!
*!---------------------------------------------------------------------------
*!
*! (C) Copyright 1998, 1999 Axis Communications AB, LUND, SWEDEN
*!
*!**************************************************************************/
/* $Id: eshlibld.h,v 1.2 2001/02/23 13:47:33 bjornw Exp $ */

#ifndef _cris_relocate_h
#define _cris_relocate_h

/* Please note that this file is also compiled into the xsim simulator.
   Try to avoid breaking its double use (only works on a little-endian
   32-bit machine such as the i386 anyway).

   Use __KERNEL__ when you're about to use kernel functions,
       (which you should not do here anyway, since this file is
       used by glibc).
   Use defined(__KERNEL__) || defined(__elinux__) when doing
       things that only makes sense on an elinux system.
   Use __CRIS__ when you're about to do (really) CRIS-specific code.
*/

/* We have dependencies all over the place for the host system
   for xsim being a linux system, so let's not pretend anything
   else with #ifdef:s here until fixed.  */
#include <linux/limits.h>

/* Maybe do sanity checking if file input. */
#undef SANITYCHECK_RELOC

/* Maybe output debug messages. */
#undef RELOC_DEBUG

/* Maybe we want to share core as well as disk space.
   Mainly depends on the config macro CONFIG_SHARE_SHLIB_CORE, but it is
   assumed that we want to share code when debugging (exposes more
   trouble). */
#ifndef SHARE_LIB_CORE
# if (defined(__KERNEL__) || !defined(RELOC_DEBUG))
#  define SHARE_LIB_CORE 0
# else
#  define SHARE_LIB_CORE 1
# endif /* __KERNEL__ etc */
#endif /* SHARE_LIB_CORE */


/* Main exported function; supposed to be called when the program a.out
   has been read in. */
extern int
perform_cris_aout_relocations(unsigned long text, unsigned long tlength,
			      unsigned long data, unsigned long dlength,
			      unsigned long baddr, unsigned long blength,

			      /* These may be zero when there's "perfect"
				 position-independent code. */
			      unsigned char *trel, unsigned long tsrel,
			      unsigned long dsrel,

			      /* These will be zero at a first try, to see
				 if code is statically linked.  Else a
				 second try, with the symbol table and
				 string table nonzero should be done. */
			      unsigned char *symbols, unsigned long symlength,
			      unsigned char *strings, unsigned long stringlength,

			      /* These will only be used when symbol table
			       information is present. */
			      char **env, int envc,
			      int euid, int is_suid);


#ifdef RELOC_DEBUG
/* Task-specific debug stuff. */
struct task_reloc_debug {
	struct memdebug *alloclast;
	unsigned long alloc_total;
	unsigned long export_total;
};
#endif /* RELOC_DEBUG */

#if SHARE_LIB_CORE

/* When code (and some very specific data) is shared and not just
   dynamically linked, we need to export hooks for exec beginning and
   end. */

struct shlibdep;

extern void
shlibmod_exit(struct shlibdep **deps);

/* Returns 0 if failure, nonzero for ok. */
extern int
shlibmod_fork(struct shlibdep **deps);

#else  /* ! SHARE_LIB_CORE */
# define shlibmod_exit(x)
# define shlibmod_fork(x) 1
#endif /* ! SHARE_LIB_CORE */

#endif _cris_relocate_h
/********************** END OF FILE eshlibld.h *****************************/

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef _CRIS_BUG_H
#define _CRIS_BUG_H
#include <arch/bug.h>
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _ASM_CRIS_UCONTEXT_H
#define _ASM_CRIS_UCONTEXT_H

struct ucontext {
	unsigned long	  uc_flags;
	struct ucontext  *uc_link;
	stack_t		  uc_stack;
	struct sigcontext uc_mcontext;
	sigset_t	  uc_sigmask;	/* mask last for extensibility */
};

#endif /* !_ASM_CRIS_UCONTEXT_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /* $Id: dma.h,v 1.2 2001/05/09 12:17:42 johana Exp $ */

#ifndef _ASM_DMA_H
#define _ASM_DMA_H

#include <arch/dma.h>

/* it's useless on the Etrax, but unfortunately needed by the new
   bootmem allocator (but this should do it for this) */

#define MAX_DMA_ADDRESS PAGE_OFFSET

/* From PCI */

#ifdef CONFIG_PCI
extern int isa_dma_bridge_buggy;
#else
#define isa_dma_bridge_buggy 	(0)
#endif

#endif /* _ASM_DMA_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * linux/include/asm-cris/fasttimer.h
 *
 * Fast timers for ETRAX100LX
 * Copyright (C) 2000-2007 Axis Communications AB
 */
#include <linux/time.h> /* struct timeval */
#include <linux/timex.h>

#ifdef CONFIG_ETRAX_FAST_TIMER

typedef void fast_timer_function_type(unsigned long);

struct fasttime_t {
	unsigned long tv_jiff;  /* jiffies */
	unsigned long tv_usec;  /* microseconds */
};

struct fast_timer{ /* Close to timer_list */
  struct fast_timer *next;
  struct fast_timer *prev;
	struct fasttime_t tv_set;
	struct fasttime_t tv_expires;
  unsigned long delay_us;
  fast_timer_function_type *function;
  unsigned long data;
  const char *name;
};

extern struct fast_timer *fast_timer_list;

void start_one_shot_timer(struct fast_timer *t,
                          fast_timer_function_type *function,
                          unsigned long data,
                          unsigned long delay_us,
                          const char *name);

int del_fast_timer(struct fast_timer * t);
/* return 1 if deleted */


void schedule_usleep(unsigned long us);


int fast_timer_init(void);

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef _ASM_CRIS_IO_H
#define _ASM_CRIS_IO_H

#include <asm/page.h>   /* for __va, __pa */
#ifdef CONFIG_ETRAX_ARCH_V10
#include <arch/io.h>
#endif
#include <asm-generic/iomap.h>
#include <linux/kernel.h>

extern void __iomem * __ioremap(unsigned long offset, unsigned long size, unsigned long flags);
extern void __iomem * __ioremap_prot(unsigned long phys_addr, unsigned long size, pgprot_t prot);

static inline void __iomem * ioremap (unsigned long offset, unsigned long size)
{
	return __ioremap(offset, size, 0);
}

extern void iounmap(volatile void * __iomem addr);

extern void __iomem * ioremap_nocache(unsigned long offset, unsigned long size);

#include <asm-generic/io.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _CRIS_DELAY_H
#define _CRIS_DELAY_H

/*
 * Copyright (C) 1998-2002 Axis Communications AB
 *
 * Delay routines, using a pre-computed "loops_per_second" value.
 */

#include <arch/delay.h>

/* Use only for very small delays ( < 1 msec).  */

extern unsigned long loops_per_usec; /* arch/cris/mm/init.c */

/* May be defined by arch/delay.h. */
#ifndef udelay
static inline void udelay(unsigned long usecs)
{
	__delay(usecs * loops_per_usec);
}
#endif

#endif /* defined(_CRIS_DELAY_H) */



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef _ASM_HW_IRQ_H
#define _ASM_HW_IRQ_H

#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _CRIS_SWAB_H
#define _CRIS_SWAB_H

#include <arch/swab.h>
#include <uapi/asm/swab.h>

#endif /* _CRIS_SWAB_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /* thread_info.h: CRIS low-level thread information
 *
 * Copyright (C) 2002  David Howells (dhowells@redhat.com)
 * - Incorporating suggestions made by Linus Torvalds and Dave Miller
 * 
 * CRIS port by Axis Communications
 */

#ifndef _ASM_THREAD_INFO_H
#define _ASM_THREAD_INFO_H

#ifdef __KERNEL__

#ifndef __ASSEMBLY__
#include <asm/types.h>
#include <asm/processor.h>
#include <arch/thread_info.h>
#include <asm/segment.h>
#endif


/*
 * low level task data that entry.S needs immediate access to
 * - this struct should fit entirely inside of one cache line
 * - this struct shares the supervisor stack pages
 * - if the contents of this structure are changed, the assembly constants must also be changed
 */
#ifndef __ASSEMBLY__
struct thread_info {
	struct task_struct	*task;		/* main task structure */
	unsigned long		flags;		/* low level flags */
	__u32			cpu;		/* current CPU */
	int			preempt_count;	/* 0 => preemptable, <0 => BUG */
	__u32			tls;		/* TLS for this thread */

	mm_segment_t		addr_limit;	/* thread address space:
					 	   0-0xBFFFFFFF for user-thead
						   0-0xFFFFFFFF for kernel-thread
						*/
	__u8			supervisor_stack[0];
};

#endif

/*
 * macros/functions for gaining access to the thread information structure
 */
#ifndef __ASSEMBLY__
#define INIT_THREAD_INFO(tsk)				\
{							\
	.task		= &tsk,				\
	.flags		= 0,				\
	.cpu		= 0,				\
	.preempt_count	= INIT_PREEMPT_COUNT,		\
	.addr_limit	= KERNEL_DS,			\
}

#define init_thread_info	(init_thread_union.thread_info)

#endif /* !__ASSEMBLY__ */

/*
 * thread information flags
 * - these are process state flags that various assembly files may need to access
 * - pending work-to-be-done flags are in LSW
 * - other flags in MSW
 */
#define TIF_SYSCALL_TRACE	0	/* syscall trace active */
#define TIF_NOTIFY_RESUME	1	/* resumption notification requested */
#define TIF_SIGPENDING		2	/* signal pending */
#define TIF_NEED_RESCHED	3	/* rescheduling necessary */
#define TIF_RESTORE_SIGMASK	9	/* restore signal mask in do_signal() */
#define TIF_MEMDIE		17	/* is terminating due to OOM killer */

#define _TIF_SYSCALL_TRACE	(1<<TIF_SYSCALL_TRACE)
#define _TIF_NOTIFY_RESUME	(1<<TIF_NOTIFY_RESUME)
#define _TIF_SIGPENDING		(1<<TIF_SIGPENDING)
#define _TIF_NEED_RESCHED	(1<<TIF_NEED_RESCHED)

#define _TIF_WORK_MASK		0x0000FFFE	/* work to do on interrupt/exception return */
#define _TIF_ALLWORK_MASK	0x0000FFFF	/* work to do on any return to u-space */

#endif /* __KERNEL__ */

#endif /* _ASM_THREAD_INFO_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef _CRIS_TLB_H
#define _CRIS_TLB_H

#include <linux/pagemap.h>

#include <arch/tlb.h>

/*
 * cris doesn't need any special per-pte or
 * per-vma handling..
 */
#define tlb_start_vma(tlb, vma) do { } while (0)
#define tlb_end_vma(tlb, vma) do { } while (0)
#define __tlb_remove_tlb_entry(tlb, ptep, address) do { } while (0)

#define tlb_flush(tlb) flush_tlb_mm((tlb)->mm)
#include <asm-generic/tlb.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef _CRIS_CURRENT_H
#define _CRIS_CURRENT_H

#include <linux/thread_info.h>

struct task_struct;

static inline struct task_struct * get_current(void)
{
        return current_thread_info()->task;
}
 
#define current get_current()

#endif /* !(_CRIS_CURRENT_H) */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_CRIS_DMA_MAPPING_H
#define _ASM_CRIS_DMA_MAPPING_H

#ifdef CONFIG_PCI
extern struct dma_map_ops v32_dma_ops;

static inline struct dma_map_ops *get_dma_ops(struct device *dev)
{
	return &v32_dma_ops;
}
#else
static inline struct dma_map_ops *get_dma_ops(struct device *dev)
{
	BUG();
	return NULL;
}
#endif

static inline void
dma_cache_sync(struct device *dev, void *vaddr, size_t size,
	       enum dma_data_direction direction)
{
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef _ASM_CRIS_SIGNAL_H
#define _ASM_CRIS_SIGNAL_H

#include <uapi/asm/signal.h>

/* Most things should be clean enough to redefine this at will, if care
   is taken to make libc match.  */

#define _NSIG		64
#define _NSIG_BPW	32
#define _NSIG_WORDS	(_NSIG / _NSIG_BPW)

typedef unsigned long old_sigset_t;		/* at least 32 bits */

typedef struct {
	unsigned long sig[_NSIG_WORDS];
} sigset_t;

#define __ARCH_HAS_SA_RESTORER

#include <asm/sigcontext.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef __CRIS_STACKTRACE_H
#define __CRIS_STACKTRACE_H

void walk_stackframe(unsigned long sp,
		     int (*fn)(unsigned long addr, void *data),
		     void *data);

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef _CRIS_PGALLOC_H
#define _CRIS_PGALLOC_H

#include <linux/threads.h>
#include <linux/mm.h>

#define pmd_populate_kernel(mm, pmd, pte) pmd_set(pmd, pte)
#define pmd_populate(mm, pmd, pte) pmd_set(pmd, page_address(pte))
#define pmd_pgtable(pmd) pmd_page(pmd)

/*
 * Allocate and free page tables.
 */

static inline pgd_t *pgd_alloc (struct mm_struct *mm)
{
	return (pgd_t *)get_zeroed_page(GFP_KERNEL);
}

static inline void pgd_free(struct mm_struct *mm, pgd_t *pgd)
{
	free_page((unsigned long)pgd);
}

static inline pte_t *pte_alloc_one_kernel(struct mm_struct *mm, unsigned long address)
{
	pte_t *pte = (pte_t *)__get_free_page(GFP_KERNEL|__GFP_ZERO);
 	return pte;
}

static inline pgtable_t pte_alloc_one(struct mm_struct *mm, unsigned long address)
{
	struct page *pte;
	pte = alloc_pages(GFP_KERNEL|__GFP_ZERO, 0);
	if (!pte)
		return NULL;
	if (!pgtable_page_ctor(pte)) {
		__free_page(pte);
		return NULL;
	}
	return pte;
}

static inline void pte_free_kernel(struct mm_struct *mm, pte_t *pte)
{
	free_page((unsigned long)pte);
}

static inline void pte_free(struct mm_struct *mm, pgtable_t pte)
{
	pgtable_page_dtor(pte);
	__free_page(pte);
}

#define __pte_free_tlb(tlb,pte,address)			\
do {							\
	pgtable_page_dtor(pte);				\
	tlb_remove_page((tlb), pte);			\
} while (0)

#define check_pgt_cache()          do { } while (0)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #include <arch/irqflags.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef _CRIS_CACHEFLUSH_H
#define _CRIS_CACHEFLUSH_H

/* Keep includes the same across arches.  */
#include <linux/mm.h>

/* The cache doesn't need to be flushed when TLB entries change because 
 * the cache is mapped to physical memory, not virtual memory
 */
#define flush_cache_all()			do { } while (0)
#define flush_cache_mm(mm)			do { } while (0)
#define flush_cache_dup_mm(mm)			do { } while (0)
#define flush_cache_range(vma, start, end)	do { } while (0)
#define flush_cache_page(vma, vmaddr, pfn)	do { } while (0)
#define ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE 0
#define flush_dcache_page(page)			do { } while (0)
#define flush_dcache_mmap_lock(mapping)		do { } while (0)
#define flush_dcache_mmap_unlock(mapping)	do { } while (0)
#define flush_icache_range(start, end)		do { } while (0)
#define flush_icache_page(vma,pg)		do { } while (0)
#define flush_icache_user_range(vma,pg,adr,len)	do { } while (0)
#define flush_cache_vmap(start, end)		do { } while (0)
#define flush_cache_vunmap(start, end)		do { } while (0)

#define copy_to_user_page(vma, page, vaddr, dst, src, len) \
	memcpy(dst, src, len)
#define copy_from_user_page(vma, page, vaddr, dst, src, len) \
	memcpy(dst, src, len)

int change_page_attr(struct page *page, int numpages, pgprot_t prot);

#endif /* _CRIS_CACHEFLUSH_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef _CRIS_TLBFLUSH_H
#define _CRIS_TLBFLUSH_H

#include <linux/mm.h>
#include <asm/processor.h>
#include <asm/pgtable.h>
#include <asm/pgalloc.h>

/*
 * TLB flushing (implemented in arch/cris/mm/tlb.c):
 *
 *  - flush_tlb() flushes the current mm struct TLBs
 *  - flush_tlb_all() flushes all processes TLBs
 *  - flush_tlb_mm(mm) flushes the specified mm context TLB's
 *  - flush_tlb_page(vma, vmaddr) flushes one page
 *  - flush_tlb_range(mm, start, end) flushes a range of pages
 *
 */

extern void __flush_tlb_all(void);
extern void __flush_tlb_mm(struct mm_struct *mm);
extern void __flush_tlb_page(struct vm_area_struct *vma,
			   unsigned long addr);

#define flush_tlb_all __flush_tlb_all
#define flush_tlb_mm __flush_tlb_mm
#define flush_tlb_page __flush_tlb_page

static inline void flush_tlb_range(struct vm_area_struct * vma, unsigned long start, unsigned long end)
{
	flush_tlb_mm(vma->vm_mm);
}

static inline void flush_tlb(void)
{
	flush_tlb_mm(current->mm);
}

#define flush_tlb_kernel_range(start, end) flush_tlb_all()

#endif /* _CRIS_TLBFLUSH_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * CRIS MMU constants and PTE layout
 */

#ifndef _CRIS_MMU_H
#define _CRIS_MMU_H

#include <arch/mmu.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /* $Id: bugs.h,v 1.2 2001/01/17 17:03:18 bjornw Exp $
 *
 *  include/asm-cris/bugs.h
 *
 *  Copyright (C) 2001 Axis Communications AB
 */

/*
 * This is included by init/main.c to check for architecture-dependent bugs.
 *
 * Needs:
 *	void check_bugs(void);
 */

static void check_bugs(void)
{
}




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /* asm/bitops.h for Linux/CRIS
 *
 * TODO: asm versions if speed is needed
 *
 * All bit operations return 0 if the bit was cleared before the
 * operation and != 0 if it was not.
 *
 * bit 0 is the LSB of addr; bit 32 is the LSB of (addr+1).
 */

#ifndef _CRIS_BITOPS_H
#define _CRIS_BITOPS_H

/* Currently this is unsuitable for consumption outside the kernel.  */
#ifdef __KERNEL__ 

#ifndef _LINUX_BITOPS_H
#error only <linux/bitops.h> can be included directly
#endif

#include <arch/bitops.h>
#include <linux/compiler.h>
#include <asm/barrier.h>

#include <asm-generic/bitops/atomic.h>
#include <asm-generic/bitops/non-atomic.h>

/*
 * Since we define it "external", it collides with the built-in
 * definition, which doesn't have the same semantics.  We don't want to
 * use -fno-builtin, so just hide the name ffs.
 */
#define ffs(x) kernel_ffs(x)

#include <asm-generic/bitops/fls.h>
#include <asm-generic/bitops/__fls.h>
#include <asm-generic/bitops/fls64.h>
#include <asm-generic/bitops/hweight.h>
#include <asm-generic/bitops/find.h>
#include <asm-generic/bitops/lock.h>

#include <asm-generic/bitops/le.h>

#include <asm-generic/bitops/ext2-atomic-setbit.h>

#include <asm-generic/bitops/sched.h>

#endif /* __KERNEL__ */

#endif /* _CRIS_BITOPS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * Authors:    Bjorn Wesen (bjornw@axis.com)
 *	       Hans-Peter Nilsson (hp@axis.com)
 */

/* Asm:s have been tweaked (within the domain of correctness) to give
   satisfactory results for "gcc version 2.96 20000427 (experimental)".

   Check regularly...

   Register $r9 is chosen for temporaries, being a call-clobbered register
   first in line to be used (notably for local blocks), not colliding with
   parameter registers.  */

#ifndef _CRIS_UACCESS_H
#define _CRIS_UACCESS_H

#ifndef __ASSEMBLY__
#include <linux/sched.h>
#include <linux/errno.h>
#include <asm/processor.h>
#include <asm/page.h>

#define VERIFY_READ	0
#define VERIFY_WRITE	1

/*
 * The fs value determines whether argument validity checking should be
 * performed or not.  If get_fs() == USER_DS, checking is performed, with
 * get_fs() == KERNEL_DS, checking is bypassed.
 *
 * For historical reasons, these macros are grossly misnamed.
 */

#define MAKE_MM_SEG(s)	((mm_segment_t) { (s) })

/* addr_limit is the maximum accessible address for the task. we misuse
 * the KERNEL_DS and USER_DS values to both assign and compare the
 * addr_limit values through the equally misnamed get/set_fs macros.
 * (see above)
 */

#define KERNEL_DS	MAKE_MM_SEG(0xFFFFFFFF)
#define USER_DS		MAKE_MM_SEG(TASK_SIZE)

#define get_ds()	(KERNEL_DS)
#define get_fs()	(current_thread_info()->addr_limit)
#define set_fs(x)	(current_thread_info()->addr_limit = (x))

#define segment_eq(a, b)	((a).seg == (b).seg)

#define __kernel_ok (segment_eq(get_fs(), KERNEL_DS))
#define __user_ok(addr, size) \
	(((size) <= TASK_SIZE) && ((addr) <= TASK_SIZE-(size)))
#define __access_ok(addr, size) (__kernel_ok || __user_ok((addr), (size)))
#define access_ok(type, addr, size) __access_ok((unsigned long)(addr), (size))

#include <arch/uaccess.h>

/*
 * The exception table consists of pairs of addresses: the first is the
 * address of an instruction that is allowed to fault, and the second is
 * the address at which the program should continue.  No registers are
 * modified, so it is entirely up to the continuation code to figure out
 * what to do.
 *
 * All the routines below use bits of fixup code that are out of line
 * with the main instruction path.  This means when everything is well,
 * we don't even have to jump over them.  Further, they do not intrude
 * on our cache or tlb entries.
 */

struct exception_table_entry {
	unsigned long insn, fixup;
};

/*
 * These are the main single-value transfer routines.  They automatically
 * use the right size if we just have the right pointer type.
 *
 * This gets kind of ugly. We want to return _two_ values in "get_user()"
 * and yet we don't want to do any pointers, because that is too much
 * of a performance impact. Thus we have a few rather ugly macros here,
 * and hide all the ugliness from the user.
 *
 * The "__xxx" versions of the user access functions are versions that
 * do not verify the address space, that must have been done previously
 * with a separate "access_ok()" call (this is used when we do multiple
 * accesses to the same area of user memory).
 *
 * As we use the same address space for kernel and user data on
 * CRIS, we can just do these as direct assignments.  (Of course, the
 * exception handling means that it's no longer "just"...)
 */
#define get_user(x, ptr) \
	__get_user_check((x), (ptr), sizeof(*(ptr)))
#define put_user(x, ptr) \
	__put_user_check((__typeof__(*(ptr)))(x), (ptr), sizeof(*(ptr)))

#define __get_user(x, ptr) \
	__get_user_nocheck((x), (ptr), sizeof(*(ptr)))
#define __put_user(x, ptr) \
	__put_user_nocheck((__typeof__(*(ptr)))(x), (ptr), sizeof(*(ptr)))

extern long __put_user_bad(void);

#define __put_user_size(x, ptr, size, retval)				\
do {									\
	retval = 0;							\
	switch (size) {							\
	case 1:								\
		__put_user_asm(x, ptr, retval, "move.b");		\
		break;							\
	case 2:								\
		__put_user_asm(x, ptr, retval, "move.w");		\
		break;							\
	case 4:								\
		__put_user_asm(x, ptr, retval, "move.d");		\
		break;							\
	case 8:								\
		__put_user_asm_64(x, ptr, retval);			\
		break;							\
	default:							\
		__put_user_bad();					\
	}								\
} while (0)

#define __get_user_size(x, ptr, size, retval)				\
do {									\
	retval = 0;							\
	switch (size) {							\
	case 1:								\
		__get_user_asm(x, ptr, retval, "move.b");		\
		break;							\
	case 2:								\
		__get_user_asm(x, ptr, retval, "move.w");		\
		break;							\
	case 4:								\
		__get_user_asm(x, ptr, retval, "move.d");		\
		break;							\
	case 8:								\
		__get_user_asm_64(x, ptr, retval);			\
		break;							\
	default:							\
		(x) = __get_user_bad();					\
	}								\
} while (0)

#define __put_user_nocheck(x, ptr, size)		\
({							\
	long __pu_err;					\
	__put_user_size((x), (ptr), (size), __pu_err);	\
	__pu_err;					\
})

#define __put_user_check(x, ptr, size)					\
({									\
	long __pu_err = -EFAULT;					\
	__typeof__(*(ptr)) *__pu_addr = (ptr);				\
	if (access_ok(VERIFY_WRITE, __pu_addr, size))			\
		__put_user_size((x), __pu_addr, (size), __pu_err);	\
	__pu_err;							\
})

struct __large_struct { unsigned long buf[100]; };
#define __m(x) (*(struct __large_struct *)(x))



#define __get_user_nocheck(x, ptr, size)			\
({								\
	long __gu_err, __gu_val;				\
	__get_user_size(__gu_val, (ptr), (size), __gu_err);	\
	(x) = (__force __typeof__(*(ptr)))__gu_val;		\
	__gu_err;						\
})

#define __get_user_check(x, ptr, size)					\
({									\
	long __gu_err = -EFAULT, __gu_val = 0;				\
	const __typeof__(*(ptr)) *__gu_addr = (ptr);			\
	if (access_ok(VERIFY_READ, __gu_addr, size))			\
		__get_user_size(__gu_val, __gu_addr, (size), __gu_err);	\
	(x) = (__force __typeof__(*(ptr)))__gu_val;			\
	__gu_err;							\
})

extern long __get_user_bad(void);

/* More complex functions.  Most are inline, but some call functions that
   live in lib/usercopy.c  */

extern unsigned long __copy_user(void __user *to, const void *from, unsigned long n);
extern unsigned long __copy_user_zeroing(void *to, const void __user *from, unsigned long n);
extern unsigned long __do_clear_user(void __user *to, unsigned long n);

static inline long
__strncpy_from_user(char *dst, const char __user *src, long count)
{
	return __do_strncpy_from_user(dst, src, count);
}

static inline long
strncpy_from_user(char *dst, const char __user *src, long count)
{
	long res = -EFAULT;

	if (access_ok(VERIFY_READ, src, 1))
		res = __do_strncpy_from_user(dst, src, count);
	return res;
}


/* Note that these expand awfully if made into switch constructs, so
   don't do that.  */

static inline unsigned long
__constant_copy_from_user(void *to, const void __user *from, unsigned long n)
{
	unsigned long ret = 0;

	if (n == 0)
		;
	else if (n == 1)
		__asm_copy_from_user_1(to, from, ret);
	else if (n == 2)
		__asm_copy_from_user_2(to, from, ret);
	else if (n == 3)
		__asm_copy_from_user_3(to, from, ret);
	else if (n == 4)
		__asm_copy_from_user_4(to, from, ret);
	else if (n == 5)
		__asm_copy_from_user_5(to, from, ret);
	else if (n == 6)
		__asm_copy_from_user_6(to, from, ret);
	else if (n == 7)
		__asm_copy_from_user_7(to, from, ret);
	else if (n == 8)
		__asm_copy_from_user_8(to, from, ret);
	else if (n == 9)
		__asm_copy_from_user_9(to, from, ret);
	else if (n == 10)
		__asm_copy_from_user_10(to, from, ret);
	else if (n == 11)
		__asm_copy_from_user_11(to, from, ret);
	else if (n == 12)
		__asm_copy_from_user_12(to, from, ret);
	else if (n == 13)
		__asm_copy_from_user_13(to, from, ret);
	else if (n == 14)
		__asm_copy_from_user_14(to, from, ret);
	else if (n == 15)
		__asm_copy_from_user_15(to, from, ret);
	else if (n == 16)
		__asm_copy_from_user_16(to, from, ret);
	else if (n == 20)
		__asm_copy_from_user_20(to, from, ret);
	else if (n == 24)
		__asm_copy_from_user_24(to, from, ret);
	else
		ret = __copy_user_zeroing(to, from, n);

	return ret;
}

/* Ditto, don't make a switch out of this.  */

static inline unsigned long
__constant_copy_to_user(void __user *to, const void *from, unsigned long n)
{
	unsigned long ret = 0;

	if (n == 0)
		;
	else if (n == 1)
		__asm_copy_to_user_1(to, from, ret);
	else if (n == 2)
		__asm_copy_to_user_2(to, from, ret);
	else if (n == 3)
		__asm_copy_to_user_3(to, from, ret);
	else if (n == 4)
		__asm_copy_to_user_4(to, from, ret);
	else if (n == 5)
		__asm_copy_to_user_5(to, from, ret);
	else if (n == 6)
		__asm_copy_to_user_6(to, from, ret);
	else if (n == 7)
		__asm_copy_to_user_7(to, from, ret);
	else if (n == 8)
		__asm_copy_to_user_8(to, from, ret);
	else if (n == 9)
		__asm_copy_to_user_9(to, from, ret);
	else if (n == 10)
		__asm_copy_to_user_10(to, from, ret);
	else if (n == 11)
		__asm_copy_to_user_11(to, from, ret);
	else if (n == 12)
		__asm_copy_to_user_12(to, from, ret);
	else if (n == 13)
		__asm_copy_to_user_13(to, from, ret);
	else if (n == 14)
		__asm_copy_to_user_14(to, from, ret);
	else if (n == 15)
		__asm_copy_to_user_15(to, from, ret);
	else if (n == 16)
		__asm_copy_to_user_16(to, from, ret);
	else if (n == 20)
		__asm_copy_to_user_20(to, from, ret);
	else if (n == 24)
		__asm_copy_to_user_24(to, from, ret);
	else
		ret = __copy_user(to, from, n);

	return ret;
}

/* No switch, please.  */

static inline unsigned long
__constant_clear_user(void __user *to, unsigned long n)
{
	unsigned long ret = 0;

	if (n == 0)
		;
	else if (n == 1)
		__asm_clear_1(to, ret);
	else if (n == 2)
		__asm_clear_2(to, ret);
	else if (n == 3)
		__asm_clear_3(to, ret);
	else if (n == 4)
		__asm_clear_4(to, ret);
	else if (n == 8)
		__asm_clear_8(to, ret);
	else if (n == 12)
		__asm_clear_12(to, ret);
	else if (n == 16)
		__asm_clear_16(to, ret);
	else if (n == 20)
		__asm_clear_20(to, ret);
	else if (n == 24)
		__asm_clear_24(to, ret);
	else
		ret = __do_clear_user(to, n);

	return ret;
}


static inline size_t clear_user(void __user *to, size_t n)
{
	if (unlikely(!access_ok(VERIFY_WRITE, to, n)))
		return n;
	if (__builtin_constant_p(n))
		return __constant_clear_user(to, n);
	else
		return __do_clear_user(to, n);
}

static inline size_t copy_from_user(void *to, const void __user *from, size_t n)
{
	if (unlikely(!access_ok(VERIFY_READ, from, n))) {
		memset(to, 0, n);
		return n;
	}
	if (__builtin_constant_p(n))
		return __constant_copy_from_user(to, from, n);
	else
		return __copy_user_zeroing(to, from, n);
}

static inline size_t copy_to_user(void __user *to, const void *from, size_t n)
{
	if (unlikely(!access_ok(VERIFY_WRITE, to, n)))
		return n;
	if (__builtin_constant_p(n))
		return __constant_copy_to_user(to, from, n);
	else
		return __copy_user(to, from, n);
}

/* We let the __ versions of copy_from/to_user inline, because they're often
 * used in fast paths and have only a small space overhead.
 */

static inline unsigned long
__generic_copy_from_user_nocheck(void *to, const void __user *from,
				 unsigned long n)
{
	return __copy_user_zeroing(to, from, n);
}

static inline unsigned long
__generic_copy_to_user_nocheck(void __user *to, const void *from,
			       unsigned long n)
{
	return __copy_user(to, from, n);
}

static inline unsigned long
__generic_clear_user_nocheck(void __user *to, unsigned long n)
{
	return __do_clear_user(to, n);
}

/* without checking */

#define __copy_to_user(to, from, n) \
	__generic_copy_to_user_nocheck((to), (from), (n))
#define __copy_from_user(to, from, n) \
	__generic_copy_from_user_nocheck((to), (from), (n))
#define __copy_to_user_inatomic __copy_to_user
#define __copy_from_user_inatomic __copy_from_user
#define __clear_user(to, n) __generic_clear_user_nocheck((to), (n))

#define strlen_user(str)	strnlen_user((str), 0x7ffffffe)

#endif  /* __ASSEMBLY__ */

#endif	/* _CRIS_UACCESS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #ifndef _ASM_SEGMENT_H
#define _ASM_SEGMENT_H

typedef struct {
  unsigned long seg;
} mm_segment_t;

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   generic-y += atomic.h
generic-y += auxvec.h
generic-y += barrier.h
generic-y += bitsperlong.h
generic-y += clkdev.h
generic-y += cmpxchg.h
generic-y += cputime.h
generic-y += device.h
generic-y += div64.h
generic-y += errno.h
generic-y += exec.h
generic-y += emergency-restart.h
generic-y += fcntl.h
generic-y += futex.h
generic-y += hardirq.h
generic-y += ioctl.h
generic-y += ipcbuf.h
generic-y += irq_regs.h
generic-y += irq_work.h
generic-y += kdebug.h
generic-y += kmap_types.h
generic-y += kvm_para.h
generic-y += linkage.h
generic-y += local.h
generic-y += local64.h
generic-y += mcs_spinlock.h
generic-y += mm-arch-hooks.h
generic-y += mman.h
generic-y += module.h
generic-y += msgbuf.h
generic-y += percpu.h
generic-y += poll.h
generic-y += preempt.h
generic-y += resource.h
generic-y += sections.h
generic-y += sembuf.h
generic-y += shmbuf.h
generic-y += siginfo.h
generic-y += socket.h
generic-y += sockios.h
generic-y += statfs.h
generic-y += topology.h
generic-y += trace_clock.h
generic-y += types.h
generic-y += vga.h
generic-y += word-at-a-time.h
generic-y += xor.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /* TODO: csum_tcpudp_magic could be speeded up, and csum_fold as well */

#ifndef _CRIS_CHECKSUM_H
#define _CRIS_CHECKSUM_H

#include <arch/checksum.h>

/*
 * computes the checksum of a memory block at buff, length len,
 * and adds in "sum" (32-bit)
 *
 * returns a 32-bit number suitable for feeding into itself
 * or csum_tcpudp_magic
 *
 * this function must be called with even lengths, except
 * for the last fragment, which may be odd
 *
 * it's best to have buff aligned on a 32-bit boundary
 */
__wsum csum_partial(const void *buff, int len, __wsum sum);

/*
 * the same as csum_partial, but copies from src while it
 * checksums
 *
 * here even more important to align src and dst on a 32-bit (or even
 * better 64-bit) boundary
 */

__wsum csum_partial_copy_nocheck(const void *src, void *dst,
				       int len, __wsum sum);

/*
 *	Fold a partial checksum into a word
 */

static inline __sum16 csum_fold(__wsum csum)
{
	u32 sum = (__force u32)csum;
	sum = (sum & 0xffff) + (sum >> 16); /* add in end-around carry */
	sum = (sum & 0xffff) + (sum >> 16); /* add in end-around carry */
	return (__force __sum16)~sum;
}

extern __wsum csum_partial_copy_from_user(const void __user *src, void *dst,
						int len, __wsum sum,
						int *errptr);

/*
 *	This is a version of ip_compute_csum() optimized for IP headers,
 *	which always checksum on 4 octet boundaries.
 *
 */

static inline __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
{
	return csum_fold(csum_partial(iph, ihl * 4, 0));
}
 
/*
 * computes the checksum of the TCP/UDP pseudo-header
 * returns a 16-bit checksum, already complemented
 */

static inline __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr,
					__u32 len, __u8 proto,
					__wsum sum)
{
	return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,proto,sum));
}

/*
 * this routine is used for miscellaneous IP-like checksums, mainly
 * in icmp.c
 */

static inline __sum16 ip_compute_csum(const void *buff, int len)
{
	return csum_fold (csum_partial(buff, len, 0));
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef _CRIS_PTRACE_H
#define _CRIS_PTRACE_H

#include <uapi/asm/ptrace.h>


/* Arbitrarily choose the same ptrace numbers as used by the Sparc code. */
#define PTRACE_GETREGS            12
#define PTRACE_SETREGS            13

#define profile_pc(regs) instruction_pointer(regs)
#define current_user_stack_pointer() rdusp()

#endif /* _CRIS_PTRACE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef _ASM_CRIS_UNALIGNED_H
#define _ASM_CRIS_UNALIGNED_H

/*
 * CRIS can do unaligned accesses itself. 
 */
#include <linux/unaligned/access_ok.h>
#include <linux/unaligned/generic.h>

#define get_unaligned	__get_unaligned_le
#define put_unaligned	__put_unaligned_le

#endif /* _ASM_CRIS_UNALIGNED_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /* $Id: etraxi2c.h,v 1.1 2001/01/18 15:49:57 bjornw Exp $ */

#ifndef _LINUX_ETRAXI2C_H
#define _LINUX_ETRAXI2C_H

/* etraxi2c _IOC_TYPE, bits 8 to 15 in ioctl cmd */

#define ETRAXI2C_IOCTYPE 44

/* supported ioctl _IOC_NR's */

/* in write operations, the argument contains both i2c
 * slave, register and value.
 */

#define I2C_WRITEARG(slave, reg, value) (((slave) << 16) | ((reg) << 8) | (value))
#define I2C_READARG(slave, reg) (((slave) << 16) | ((reg) << 8))

#define I2C_ARGSLAVE(arg) ((arg) >> 16)
#define I2C_ARGREG(arg) (((arg) >> 8) & 0xff)
#define I2C_ARGVALUE(arg) ((arg) & 0xff)

#define I2C_WRITEREG 0x1   /* write to an i2c register */
#define I2C_READREG  0x2   /* read from an i2c register */

/*
EXAMPLE usage:

    i2c_arg = I2C_WRITEARG(STA013_WRITE_ADDR, reg, val);
    ioctl(fd, _IO(ETRAXI2C_IOCTYPE, I2C_WRITEREG), i2c_arg);

    i2c_arg = I2C_READARG(STA013_READ_ADDR, reg);
    val = ioctl(fd, _IO(ETRAXI2C_IOCTYPE, I2C_READREG), i2c_arg);

*/
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * Pull in the generic implementation for the mutex fastpath.
 *
 * TODO: implement optimized primitives instead, or leave the generic
 * implementation in place, or pick the atomic_xchg() based generic
 * implementation. (see asm-generic/mutex-xchg.h for details)
 */

#include <asm-generic/mutex-dec.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef __ASM_CRIS_USER_H
#define __ASM_CRIS_USER_H

#include <linux/types.h>
#include <asm/ptrace.h>
#include <asm/page.h>
#include <arch/user.h>

/*
 * Core file format: The core file is written in such a way that gdb
 * can understand it and provide useful information to the user (under
 * linux we use the `trad-core' bfd).  The file contents are as follows:
 *
 *  upage: 1 page consisting of a user struct that tells gdb
 *	what is present in the file.  Directly after this is a
 *	copy of the task_struct, which is currently not used by gdb,
 *	but it may come in handy at some point.  All of the registers
 *	are stored as part of the upage.  The upage should always be
 *	only one page long.
 *  data: The data segment follows next.  We use current->end_text to
 *	current->brk to pick up all of the user variables, plus any memory
 *	that may have been sbrk'ed.  No attempt is made to determine if a
 *	page is demand-zero or if a page is totally unused, we just cover
 *	the entire range.  All of the addresses are rounded in such a way
 *	that an integral number of pages is written.
 *  stack: We need the stack information in order to get a meaningful
 *	backtrace.  We need to write the data from usp to
 *	current->start_stack, so we round each of these in order to be able
 *	to write an integer number of pages.
 */
        
struct user {
	struct user_regs_struct	regs;		/* entire machine state */
	size_t		u_tsize;		/* text size (pages) */
	size_t		u_dsize;		/* data size (pages) */
	size_t		u_ssize;		/* stack size (pages) */
	unsigned long	start_code;		/* text starting address */
	unsigned long	start_data;		/* data starting address */
	unsigned long	start_stack;		/* stack starting address */
	long int	signal;			/* signal causing core dump */
	unsigned long	u_ar0;			/* help gdb find registers */
	unsigned long	magic;			/* identifies a core file */
	char		u_comm[32];		/* user command name */
};

#define NBPG			PAGE_SIZE
#define UPAGES			1
#define HOST_TEXT_START_ADDR	(u.start_code)
#define HOST_DATA_START_ADDR	(u.start_data)
#define HOST_STACK_END_ADDR	(u.start_stack + u.u_ssize * NBPG)

#endif /* __ASM_CRIS_USER_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #include <generated/asm-offsets.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef _ASM_CRIS_UNISTD_H_
#define _ASM_CRIS_UNISTD_H_

#include <uapi/asm/unistd.h>


#define NR_syscalls 365

#include <arch/unistd.h>

#define __ARCH_WANT_OLD_READDIR
#define __ARCH_WANT_OLD_STAT
#define __ARCH_WANT_STAT64
#define __ARCH_WANT_SYS_ALARM
#define __ARCH_WANT_SYS_GETHOSTNAME
#define __ARCH_WANT_SYS_IPC
#define __ARCH_WANT_SYS_PAUSE
#define __ARCH_WANT_SYS_SIGNAL
#define __ARCH_WANT_SYS_TIME
#define __ARCH_WANT_SYS_UTIME
#define __ARCH_WANT_SYS_WAITPID
#define __ARCH_WANT_SYS_SOCKETCALL
#define __ARCH_WANT_SYS_FADVISE64
#define __ARCH_WANT_SYS_GETPGRP
#define __ARCH_WANT_SYS_LLSEEK
#define __ARCH_WANT_SYS_NICE
#define __ARCH_WANT_SYS_OLD_GETRLIMIT
#define __ARCH_WANT_SYS_OLD_MMAP
#define __ARCH_WANT_SYS_OLDUMOUNT
#define __ARCH_WANT_SYS_SIGPENDING
#define __ARCH_WANT_SYS_SIGPROCMASK
#define __ARCH_WANT_SYS_FORK
#define __ARCH_WANT_SYS_VFORK
#define __ARCH_WANT_SYS_CLONE

#endif /* _ASM_CRIS_UNISTD_H_ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _ASM_CACHE_H
#define _ASM_CACHE_H

#include <arch/cache.h>

#endif /* _ASM_CACHE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /*
 * include/asm-cris/processor.h
 *
 * Copyright (C) 2000, 2001 Axis Communications AB
 *
 * Authors:         Bjorn Wesen        Initial version
 *
 */

#ifndef __ASM_CRIS_PROCESSOR_H
#define __ASM_CRIS_PROCESSOR_H

#include <asm/page.h>
#include <asm/ptrace.h>
#include <arch/processor.h>
#include <arch/system.h>

struct task_struct;

#define STACK_TOP	TASK_SIZE
#define STACK_TOP_MAX	STACK_TOP

/* This decides where the kernel will search for a free chunk of vm
 * space during mmap's.
 */
#define TASK_UNMAPPED_BASE      (PAGE_ALIGN(TASK_SIZE / 3))

/* THREAD_SIZE is the size of the thread_info/kernel_stack combo.
 * normally, the stack is found by doing something like p + THREAD_SIZE
 * in CRIS, a page is 8192 bytes, which seems like a sane size
 */
#define THREAD_SIZE       PAGE_SIZE
#define THREAD_SIZE_ORDER (0)

/*
 * At user->kernel entry, the pt_regs struct is stacked on the top of the kernel-stack.
 * This macro allows us to find those regs for a task.
 * Notice that subsequent pt_regs stackings, like recursive interrupts occurring while
 * we're in the kernel, won't affect this - only the first user->kernel transition
 * registers are reached by this.
 */

#define user_regs(thread_info) (((struct pt_regs *)((unsigned long)(thread_info) + THREAD_SIZE)) - 1)

/*
 * Dito but for the currently running task
 */

#define task_pt_regs(task) user_regs(task_thread_info(task))

unsigned long get_wchan(struct task_struct *p);

#define KSTK_ESP(tsk)   ((tsk) == current ? rdusp() : (tsk)->thread.usp)

extern unsigned long thread_saved_pc(struct task_struct *tsk);

/* Free all resources held by a thread. */
static inline void release_thread(struct task_struct *dead_task)
{
        /* Nothing needs to be done.  */
}

#define init_stack      (init_thread_union.stack)

#define cpu_relax()     barrier()
#define cpu_relax_lowlatency() cpu_relax()

void default_idle(void);

#endif /* __ASM_CRIS_PROCESSOR_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_SERIAL_H
#define _ASM_SERIAL_H

/*
 * This assumes you have a 1.8432 MHz clock for your UART.
 */
#define BASE_BAUD (1843200 / 16)

#endif /* _ASM_SERIAL_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*
 * Interrupt handling assembler and defines for Linux/CRISv10
 */

#ifndef _ASM_ARCH_IRQ_H
#define _ASM_ARCH_IRQ_H

#include <arch/sv_addr_ag.h>

#define NR_IRQS 32

/* The first vector number used for IRQs in v10 is really 0x20 */
/* but all the code and constants are offseted to make 0 the first */
#define FIRST_IRQ 0

#define SOME_IRQ_NBR        IO_BITNR(R_VECT_MASK_RD, some)   /* 0 ? */
#define NMI_IRQ_NBR         IO_BITNR(R_VECT_MASK_RD, nmi)    /* 1 */
#define TIMER0_IRQ_NBR      IO_BITNR(R_VECT_MASK_RD, timer0) /* 2 */
#define TIMER1_IRQ_NBR      IO_BITNR(R_VECT_MASK_RD, timer1) /* 3 */
/* mio, ata, par0, scsi0 on 4 */
/* par1, scsi1 on 5 */
#define NETWORK_STATUS_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, network) /* 6 */

#define SERIAL_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, serial) /* 8 */
#define PA_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, pa) /* 11 */
/* extdma0 and extdma1 is at irq 12 and 13 and/or same as dma5 and dma6 ? */
#define EXTDMA0_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, ext_dma0)
#define EXTDMA1_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, ext_dma1)

/* dma0-9 is irq 16..25 */
/* 16,17: network */
#define DMA0_TX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma0)
#define DMA1_RX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma1)
#define NETWORK_DMA_TX_IRQ_NBR DMA0_TX_IRQ_NBR
#define NETWORK_DMA_RX_IRQ_NBR DMA1_RX_IRQ_NBR

/* 18,19: dma2 and dma3 shared by par0, scsi0, ser2 and ata */
#define DMA2_TX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma2)
#define DMA3_RX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma3)
#define SER2_DMA_TX_IRQ_NBR DMA2_TX_IRQ_NBR
#define SER2_DMA_RX_IRQ_NBR DMA3_RX_IRQ_NBR

/* 20,21: dma4 and dma5 shared by par1, scsi1, ser3 and extdma0 */
#define DMA4_TX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma4)
#define DMA5_RX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma5)
#define SER3_DMA_TX_IRQ_NBR DMA4_TX_IRQ_NBR
#define SER3_DMA_RX_IRQ_NBR DMA5_RX_IRQ_NBR

/* 22,23: dma6 and dma7 shared by ser0, extdma1 and mem2mem */
#define DMA6_TX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma6)
#define DMA7_RX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma7)
#define SER0_DMA_TX_IRQ_NBR DMA6_TX_IRQ_NBR
#define SER0_DMA_RX_IRQ_NBR DMA7_RX_IRQ_NBR
#define MEM2MEM_DMA_TX_IRQ_NBR DMA6_TX_IRQ_NBR
#define MEM2MEM_DMA_RX_IRQ_NBR DMA7_RX_IRQ_NBR

/* 24,25: dma8 and dma9 shared by ser1 and usb */
#define DMA8_TX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma8)
#define DMA9_RX_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, dma9)
#define SER1_DMA_TX_IRQ_NBR DMA8_TX_IRQ_NBR
#define SER1_DMA_RX_IRQ_NBR DMA9_RX_IRQ_NBR
#define USB_DMA_TX_IRQ_NBR DMA8_TX_IRQ_NBR
#define USB_DMA_RX_IRQ_NBR DMA9_RX_IRQ_NBR

/* usb: controller at irq 31 + uses DMA8 and DMA9 */
#define USB_HC_IRQ_NBR IO_BITNR(R_VECT_MASK_RD, usb)

/* our fine, global, etrax irq vector! the pointer lives in the head.S file. */

typedef void (*irqvectptr)(void);

struct etrax_interrupt_vector {
	irqvectptr v[256];
};

extern struct etrax_interrupt_vector *etrax_irv;
void set_int_vector(int n, irqvectptr addr);
void set_break_vector(int n, irqvectptr addr);

#define __STR(x) #x
#define STR(x) __STR(x)
 
/* SAVE_ALL saves registers so they match pt_regs */

#define SAVE_ALL \
  "move $irp,[$sp=$sp-16]\n\t" /* push instruction pointer and fake SBFS struct */ \
  "push $srp\n\t"       /* push subroutine return pointer */ \
  "push $dccr\n\t"      /* push condition codes */ \
  "push $mof\n\t"       /* push multiply overflow reg */ \
  "di\n\t"             /* need to disable irq's at this point */\
  "subq 14*4,$sp\n\t"   /* make room for r0-r13 */ \
  "movem $r13,[$sp]\n\t" /* push the r0-r13 registers */ \
  "push $r10\n\t"       /* push orig_r10 */ \
  "clear.d [$sp=$sp-4]\n\t"  /* frametype - this is a normal stackframe */

/* BLOCK_IRQ and UNBLOCK_IRQ do the same as
 * crisv10_mask_irq and crisv10_unmask_irq */

#define BLOCK_IRQ(mask,nr) \
  "move.d " #mask ",$r0\n\t" \
  "move.d $r0,[0xb00000d8]\n\t"

#define UNBLOCK_IRQ(mask) \
  "move.d " #mask ",$r0\n\t" \
  "move.d $r0,[0xb00000dc]\n\t"

#define IRQ_NAME2(nr) nr##_interrupt(void)
#define IRQ_NAME(nr) IRQ_NAME2(IRQ##nr)
#define sIRQ_NAME(nr) IRQ_NAME2(sIRQ##nr)
#define BAD_IRQ_NAME(nr) IRQ_NAME2(bad_IRQ##nr)

  /* the asm IRQ handler makes sure the causing IRQ is blocked, then it calls
   * do_IRQ (with irq disabled still). after that it unblocks and jumps to
   * ret_from_intr (entry.S)
   *
   * The reason the IRQ is blocked is to allow an sti() before the handler which
   * will acknowledge the interrupt is run.
   */

#define BUILD_IRQ(nr,mask) \
void IRQ_NAME(nr); \
__asm__ ( \
          ".text\n\t" \
          "IRQ" #nr "_interrupt:\n\t" \
	  SAVE_ALL \
	  BLOCK_IRQ(mask,nr) /* this must be done to prevent irq loops when we ei later */ \
	  "moveq "#nr",$r10\n\t" \
	  "move.d $sp,$r11\n\t" \
	  "jsr do_IRQ\n\t" /* irq.c, r10 and r11 are arguments */ \
	  UNBLOCK_IRQ(mask) \
	  "moveq 0,$r9\n\t" /* make ret_from_intr realise we came from an irq */ \
	  "jump ret_from_intr\n\t");

/* This is subtle. The timer interrupt is crucial and it should not be disabled for 
 * too long. However, if it had been a normal interrupt as per BUILD_IRQ, it would
 * have been BLOCK'ed, and then softirq's are run before we return here to UNBLOCK.
 * If the softirq's take too much time to run, the timer irq won't run and the 
 * watchdog will kill us.
 *
 * Furthermore, if a lot of other irq's occur before we return here, the multiple_irq
 * handler is run and it prioritizes the timer interrupt. However if we had BLOCK'ed
 * it here, we would not get the multiple_irq at all.
 *
 * The non-blocking here is based on the knowledge that the timer interrupt runs
 * with interrupts disabled, and therefore there will not be an sti() before the
 * timer irq handler is run to acknowledge the interrupt.
 */

#define BUILD_TIMER_IRQ(nr,mask) \
void IRQ_NAME(nr); \
__asm__ ( \
          ".text\n\t" \
          "IRQ" #nr "_interrupt:\n\t" \
	  SAVE_ALL \
	  "moveq "#nr",$r10\n\t" \
	  "move.d $sp,$r11\n\t" \
	  "jsr do_IRQ\n\t" /* irq.c, r10 and r11 are arguments */ \
	  "moveq 0,$r9\n\t" /* make ret_from_intr realise we came from an irq */ \
	  "jump ret_from_intr\n\t");

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * Use prescale timer at 25000 Hz instead of the baudrate timer at 
 * 19200 to get rid of the 64ppm to fast timer (and we get better 
 * resolution within a jiffie as well. 
 */
#ifndef _ASM_CRIS_ARCH_TIMEX_H
#define _ASM_CRIS_ARCH_TIMEX_H

/* The prescaler clock runs at 25MHz, we divide it by 1000 in the prescaler */
/* If you change anything here you must check time.c as well... */
#define PRESCALE_FREQ 25000000
#define PRESCALE_VALUE 1000
#define CLOCK_TICK_RATE 25000 /* Underlying frequency of the HZ timer */
/* The timer0 values gives 40us resolution (1/25000) but interrupts at HZ*/
#define TIMER0_FREQ (CLOCK_TICK_RATE)
#define TIMER0_CLKSEL flexible
#define TIMER0_DIV (TIMER0_FREQ/(HZ))


#define GET_JIFFIES_USEC() \
  ( (TIMER0_DIV - *R_TIMER0_DATA) * (1000000/HZ)/TIMER0_DIV )

unsigned long get_ns_in_jiffie(void);

static inline unsigned long get_us_in_jiffie_highres(void)
{
	return get_ns_in_jiffie()/1000;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef __ASM_CRIS_ARCH_SYSTEM_H
#define __ASM_CRIS_ARCH_SYSTEM_H


/* read the CPU version register */

static inline unsigned long rdvr(void) {
	unsigned char vr;
	__asm__ volatile ("move $vr,%0" : "=rm" (vr));
	return vr;
}

#define cris_machine_name "cris"

/* read/write the user-mode stackpointer */

static inline unsigned long rdusp(void) {
	unsigned long usp;
	__asm__ __volatile__("move $usp,%0" : "=rm" (usp));
	return usp;
}

#define wrusp(usp) \
	__asm__ __volatile__("move %0,$usp" : /* no outputs */ : "rm" (usp))

/* read the current stackpointer */

static inline unsigned long rdsp(void) {
	unsigned long sp;
	__asm__ __volatile__("move.d $sp,%0" : "=rm" (sp));
	return sp;
}

static inline unsigned long _get_base(char * addr)
{
  return 0;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /* IO interface mux allocator for ETRAX100LX.
 * Copyright 2004, Axis Communications AB
 * $Id: io_interface_mux.h,v 1.1 2004/12/13 12:21:53 starvik Exp $
 */


#ifndef _IO_INTERFACE_MUX_H
#define _IO_INTERFACE_MUX_H


/* C.f. ETRAX100LX Designer's Reference 20.9 */

/* The order in enum must match the order of interfaces[] in
 * io_interface_mux.c */
enum cris_io_interface {
	/* Begin Non-multiplexed interfaces */
	if_eth = 0,
	if_serial_0,
	/* End Non-multiplexed interfaces */
	if_serial_1,
	if_serial_2,
	if_serial_3,
	if_sync_serial_1,
	if_sync_serial_3,
	if_shared_ram,
	if_shared_ram_w,
	if_par_0,
	if_par_1,
	if_par_w,
	if_scsi8_0,
	if_scsi8_1,
	if_scsi_w,
	if_ata,
	if_csp,
	if_i2c,
	if_usb_1,
	if_usb_2,
	/* GPIO pins */
	if_gpio_grp_a,
	if_gpio_grp_b,
	if_gpio_grp_c,
	if_gpio_grp_d,
	if_gpio_grp_e,
	if_gpio_grp_f,
	if_max_interfaces,
	if_unclaimed
};

int cris_request_io_interface(enum cris_io_interface ioif, const char *device_id);

void cris_free_io_interface(enum cris_io_interface ioif);

/* port can be 'a', 'b' or 'g' */
int cris_io_interface_allocate_pins(const enum cris_io_interface ioif,
				    const char port,
				    const unsigned start_bit,
				    const unsigned stop_bit);

/* port can be 'a', 'b' or 'g' */
int cris_io_interface_free_pins(const enum cris_io_interface ioif,
                                const char port,
                                const unsigned start_bit,
                                const unsigned stop_bit);

int cris_io_interface_register_watcher(void (*notify)(const unsigned int gpio_in_available,
						      const unsigned int gpio_out_available,
						      const unsigned char pa_available,
						      const unsigned char pb_available));

void cris_io_interface_delete_watcher(void (*notify)(const unsigned int gpio_in_available,
						     const unsigned int gpio_out_available,
                                                     const unsigned char pa_available,
						     const unsigned char pb_available));

#endif /* _IO_INTERFACE_MUX_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef _CRIS_ARCH_PAGE_H
#define _CRIS_ARCH_PAGE_H


#ifdef __KERNEL__

/* This handles the memory map.. */
#ifdef CONFIG_CRIS_LOW_MAP
#define PAGE_OFFSET		KSEG_6   /* kseg_6 is mapped to physical ram */
#else
#define PAGE_OFFSET		KSEG_C   /* kseg_c is mapped to physical ram */
#endif

/* macros to convert between really physical and virtual addresses
 * by stripping a selected bit, we can convert between KSEG_x and
 * 0x40000000 where the DRAM really resides
 */

#ifdef CONFIG_CRIS_LOW_MAP
/* we have DRAM virtually at 0x6 */
#define __pa(x)                 ((unsigned long)(x) & 0xdfffffff)
#define __va(x)                 ((void *)((unsigned long)(x) | 0x20000000))
#else
/* we have DRAM virtually at 0xc */
#define __pa(x)                 ((unsigned long)(x) & 0x7fffffff)
#define __va(x)                 ((void *)((unsigned long)(x) | 0x80000000))
#endif

#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef _CRIS_ARCH_PGTABLE_H
#define _CRIS_ARCH_PGTABLE_H

/*
 * Kernels own virtual memory area. 
 */

#ifdef CONFIG_CRIS_LOW_MAP
#define VMALLOC_START     KSEG_7
#define VMALLOC_END       KSEG_8
#else
#define VMALLOC_START     KSEG_D
#define VMALLOC_END       KSEG_E
#endif

#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifndef __ASM_OFFSETS_H__
#define __ASM_OFFSETS_H__
/*
 * DO NOT MODIFY.
 *
 * This file was generated by arch/cris/Makefile
 *
 */

#define PT_orig_r10 4 /* offsetof(struct pt_regs, orig_r10) */
#define PT_r13 8 /* offsetof(struct pt_regs, r13) */
#define PT_r12 12 /* offsetof(struct pt_regs, r12) */
#define PT_r11 16 /* offsetof(struct pt_regs, r11) */
#define PT_r10 20 /* offsetof(struct pt_regs, r10) */
#define PT_r9 24 /* offsetof(struct pt_regs, r9) */
#define PT_mof 64 /* offsetof(struct pt_regs, mof) */
#define PT_dccr 68 /* offsetof(struct pt_regs, dccr) */
#define PT_srp 72 /* offsetof(struct pt_regs, srp) */

#define TI_task 0 /* offsetof(struct thread_info, task) */
#define TI_flags 8 /* offsetof(struct thread_info, flags) */
#define TI_preempt_count 16 /* offsetof(struct thread_info, preempt_count) */

#define THREAD_ksp 0 /* offsetof(struct thread_struct, ksp) */
#define THREAD_usp 4 /* offsetof(struct thread_struct, usp) */
#define THREAD_dccr 8 /* offsetof(struct thread_struct, dccr) */

#define TASK_pid 141 /* offsetof(struct task_struct, pid) */

#define LCLONE_VM 256 /* CLONE_VM */
#define LCLONE_UNTRACED 8388608 /* CLONE_UNTRACED */

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef __ASM_CRISv10_ARCH_BUG_H
#define __ASM_CRISv10_ARCH_BUG_H

#include <linux/stringify.h>

#ifdef CONFIG_BUG
#ifdef CONFIG_DEBUG_BUGVERBOSE
/* The BUG() macro is used for marking obviously incorrect code paths.
 * It will cause a message with the file name and line number to be printed,
 * and then cause an oops.  The message is actually printed by handle_BUG()
 * in arch/cris/kernel/traps.c, and the reason we use this method of storing
 * the file name and line number is that we do not want to affect the registers
 * by calling printk() before causing the oops.
 */

#define BUG_PREFIX 0x0D7F
#define BUG_MAGIC  0x00001234

struct bug_frame {
	unsigned short prefix;
	unsigned int magic;
	unsigned short clear;
	unsigned short movu;
	unsigned short line;
	unsigned short jump;
	unsigned char *filename;
};

#if 0
/* Unfortunately this version of the macro does not work due to a problem
 * with the compiler (aka a bug) when compiling with -O2, which sometimes
 * erroneously causes the second input to be stored in a register...
 */
#define BUG()								\
	__asm__ __volatile__ ("clear.d [" __stringify(BUG_MAGIC) "]\n\t"\
				"movu.w %0,$r0\n\t"			\
				"jump %1\n\t"				\
				: : "i" (__LINE__), "i" (__FILE__))
#else
/* This version will have to do for now, until the compiler is fixed.
 * The drawbacks of this version are that the file name will appear multiple
 * times in the .rodata section, and that __LINE__ and __FILE__ can probably
 * not be used like this with newer versions of gcc.
 */
#define BUG()								\
	__asm__ __volatile__ ("clear.d [" __stringify(BUG_MAGIC) "]\n\t"\
			      "movu.w " __stringify(__LINE__) ",$r0\n\t"\
			      "jump 0f\n\t"				\
			      ".section .rodata\n"			\
			      "0:\t.string \"" __FILE__ "\"\n\t"	\
			      ".previous")
#endif

#else

/* This just causes an oops. */
#define BUG() (*(int *)0 = 0)

#endif

#define HAVE_ARCH_BUG
#endif

#include <asm-generic/bug.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /* Defines for using and allocating dma channels. */

#ifndef _ASM_ARCH_DMA_H
#define _ASM_ARCH_DMA_H

#define MAX_DMA_CHANNELS	10

/* dma0 and dma1 used for network (ethernet) */
#define NETWORK_TX_DMA_NBR 0
#define NETWORK_RX_DMA_NBR 1

/* dma2 and dma3 shared by par0, scsi0, ser2 and ata */
#define PAR0_TX_DMA_NBR 2
#define PAR0_RX_DMA_NBR 3
#define SCSI0_TX_DMA_NBR 2
#define SCSI0_RX_DMA_NBR 3
#define SER2_TX_DMA_NBR 2
#define SER2_RX_DMA_NBR 3
#define ATA_TX_DMA_NBR 2
#define ATA_RX_DMA_NBR 3

/* dma4 and dma5 shared by par1, scsi1, ser3 and extdma0 */
#define PAR1_TX_DMA_NBR 4
#define PAR1_RX_DMA_NBR 5
#define SCSI1_TX_DMA_NBR 4
#define SCSI1_RX_DMA_NBR 5
#define SER3_TX_DMA_NBR 4
#define SER3_RX_DMA_NBR 5
#define EXTDMA0_TX_DMA_NBR 4
#define EXTDMA0_RX_DMA_NBR 5

/* dma6 and dma7 shared by ser0, extdma1 and mem2mem */
#define SER0_TX_DMA_NBR 6
#define SER0_RX_DMA_NBR 7
#define EXTDMA1_TX_DMA_NBR 6
#define EXTDMA1_RX_DMA_NBR 7
#define MEM2MEM_TX_DMA_NBR 6
#define MEM2MEM_RX_DMA_NBR 7

/* dma8 and dma9 shared by ser1 and usb */
#define SER1_TX_DMA_NBR 8
#define SER1_RX_DMA_NBR 9
#define USB_TX_DMA_NBR 8
#define USB_RX_DMA_NBR 9

#endif

enum dma_owner
{
  dma_eth,
  dma_ser0,
  dma_ser1, /* Async and sync */
  dma_ser2,
  dma_ser3, /* Async and sync */
  dma_ata,
  dma_par0,
  dma_par1,
  dma_ext0,
  dma_ext1,
  dma_int6,
  dma_int7,
  dma_usb,
  dma_scsi0,
  dma_scsi1
};

/* Masks used by cris_request_dma options: */
#define DMA_VERBOSE_ON_ERROR    (1<<0)
#define DMA_PANIC_ON_ERROR     ((1<<1)|DMA_VERBOSE_ON_ERROR)

int cris_request_dma(unsigned int dmanr, const char * device_id,
                     unsigned options, enum dma_owner owner);

void cris_free_dma(unsigned int dmanr, const char * device_id);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_ARCH_CRIS_IO_H
#define _ASM_ARCH_CRIS_IO_H

/* Etrax shadow registers - which live in arch/cris/kernel/shadows.c */

extern unsigned long gen_config_ii_shadow;
extern unsigned long port_g_data_shadow;
extern unsigned char port_pa_dir_shadow;
extern unsigned char port_pa_data_shadow;
extern unsigned char port_pb_i2c_shadow;
extern unsigned char port_pb_config_shadow;
extern unsigned char port_pb_dir_shadow;
extern unsigned char port_pb_data_shadow;
extern unsigned long r_timer_ctrl_shadow;

extern unsigned long port_cse1_shadow;
extern unsigned long port_csp0_shadow;
extern unsigned long port_csp4_shadow;

extern volatile unsigned long *port_cse1_addr;
extern volatile unsigned long *port_csp0_addr;
extern volatile unsigned long *port_csp4_addr;

/* macro for setting regs through a shadow -
 * r = register name (like R_PORT_PA_DATA)
 * s = shadow name (like port_pa_data_shadow)
 * b = bit number
 * v = value (0 or 1)
 */

#define REG_SHADOW_SET(r,s,b,v) *r = s = (s & ~(1 << (b))) | ((v) << (b))

/* The LED's on various Etrax-based products are set differently. */

#if defined(CONFIG_ETRAX_NO_LEDS)
#undef CONFIG_ETRAX_PA_LEDS
#undef CONFIG_ETRAX_PB_LEDS
#undef CONFIG_ETRAX_CSP0_LEDS
#define CRIS_LED_NETWORK_SET_G(x)
#define CRIS_LED_NETWORK_SET_R(x)
#define CRIS_LED_ACTIVE_SET_G(x)
#define CRIS_LED_ACTIVE_SET_R(x)
#define CRIS_LED_DISK_WRITE(x)
#define CRIS_LED_DISK_READ(x)
#endif

#if !defined(CONFIG_ETRAX_CSP0_LEDS)
#define CRIS_LED_BIT_SET(x)
#define CRIS_LED_BIT_CLR(x)
#endif

#define CRIS_LED_OFF    0x00
#define CRIS_LED_GREEN  0x01
#define CRIS_LED_RED    0x02
#define CRIS_LED_ORANGE (CRIS_LED_GREEN | CRIS_LED_RED)

#if defined(CONFIG_ETRAX_NO_LEDS)
#define CRIS_LED_NETWORK_SET(x)
#else
#if CONFIG_ETRAX_LED1G == CONFIG_ETRAX_LED1R
#define CRIS_LED_NETWORK_SET(x)                          \
	do {                                        \
		CRIS_LED_NETWORK_SET_G((x) & CRIS_LED_GREEN); \
	} while (0)
#else
#define CRIS_LED_NETWORK_SET(x)                          \
	do {                                        \
		CRIS_LED_NETWORK_SET_G((x) & CRIS_LED_GREEN); \
		CRIS_LED_NETWORK_SET_R((x) & CRIS_LED_RED);   \
	} while (0)
#endif
#if CONFIG_ETRAX_LED2G == CONFIG_ETRAX_LED2R
#define CRIS_LED_ACTIVE_SET(x)                           \
	do {                                        \
		CRIS_LED_ACTIVE_SET_G((x) & CRIS_LED_GREEN);  \
	} while (0)
#else
#define CRIS_LED_ACTIVE_SET(x)                           \
	do {                                        \
		CRIS_LED_ACTIVE_SET_G((x) & CRIS_LED_GREEN);  \
		CRIS_LED_ACTIVE_SET_R((x) & CRIS_LED_RED);    \
	} while (0)
#endif
#endif

#ifdef CONFIG_ETRAX_PA_LEDS
#define CRIS_LED_NETWORK_SET_G(x) \
         REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, CONFIG_ETRAX_LED1G, !(x))
#define CRIS_LED_NETWORK_SET_R(x) \
         REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, CONFIG_ETRAX_LED1R, !(x))
#define CRIS_LED_ACTIVE_SET_G(x) \
         REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, CONFIG_ETRAX_LED2G, !(x))
#define CRIS_LED_ACTIVE_SET_R(x) \
         REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, CONFIG_ETRAX_LED2R, !(x))
#define CRIS_LED_DISK_WRITE(x) \
         do{\
                REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, CONFIG_ETRAX_LED3G, !(x));\
                REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, CONFIG_ETRAX_LED3R, !(x));\
        }while(0)
#define CRIS_LED_DISK_READ(x) \
	REG_SHADOW_SET(R_PORT_PA_DATA, port_pa_data_shadow, \
		CONFIG_ETRAX_LED3G, !(x))
#endif

#ifdef CONFIG_ETRAX_PB_LEDS
#define CRIS_LED_NETWORK_SET_G(x) \
         REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, CONFIG_ETRAX_LED1G, !(x))
#define CRIS_LED_NETWORK_SET_R(x) \
         REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, CONFIG_ETRAX_LED1R, !(x))
#define CRIS_LED_ACTIVE_SET_G(x) \
         REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, CONFIG_ETRAX_LED2G, !(x))
#define CRIS_LED_ACTIVE_SET_R(x) \
         REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, CONFIG_ETRAX_LED2R, !(x))
#define CRIS_LED_DISK_WRITE(x) \
        do{\
                REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, CONFIG_ETRAX_LED3G, !(x));\
                REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, CONFIG_ETRAX_LED3R, !(x));\
        }while(0)
#define CRIS_LED_DISK_READ(x) \
	REG_SHADOW_SET(R_PORT_PB_DATA, port_pb_data_shadow, \
		CONFIG_ETRAX_LED3G, !(x))
#endif

#ifdef CONFIG_ETRAX_CSP0_LEDS
#define CONFIGURABLE_LEDS\
        ((1 << CONFIG_ETRAX_LED1G ) | (1 << CONFIG_ETRAX_LED1R ) |\
         (1 << CONFIG_ETRAX_LED2G ) | (1 << CONFIG_ETRAX_LED2R ) |\
         (1 << CONFIG_ETRAX_LED3G ) | (1 << CONFIG_ETRAX_LED3R ) |\
         (1 << CONFIG_ETRAX_LED4G ) | (1 << CONFIG_ETRAX_LED4R ) |\
         (1 << CONFIG_ETRAX_LED5G ) | (1 << CONFIG_ETRAX_LED5R ) |\
         (1 << CONFIG_ETRAX_LED6G ) | (1 << CONFIG_ETRAX_LED6R ) |\
         (1 << CONFIG_ETRAX_LED7G ) | (1 << CONFIG_ETRAX_LED7R ) |\
         (1 << CONFIG_ETRAX_LED8Y ) | (1 << CONFIG_ETRAX_LED9Y ) |\
         (1 << CONFIG_ETRAX_LED10Y ) |(1 << CONFIG_ETRAX_LED11Y )|\
         (1 << CONFIG_ETRAX_LED12R ))

#define CRIS_LED_NETWORK_SET_G(x) \
         REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED1G, !(x))
#define CRIS_LED_NETWORK_SET_R(x) \
         REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED1R, !(x))
#define CRIS_LED_ACTIVE_SET_G(x) \
         REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED2G, !(x))
#define CRIS_LED_ACTIVE_SET_R(x) \
         REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED2R, !(x))
#define CRIS_LED_DISK_WRITE(x) \
        do{\
                REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED3G, !(x));\
                REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED3R, !(x));\
        }while(0)
#define CRIS_LED_DISK_READ(x) \
         REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_LED3G, !(x))
#define CRIS_LED_BIT_SET(x)\
        do{\
                if((( 1 << x) & CONFIGURABLE_LEDS)  != 0)\
                       REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, x, 1);\
        }while(0)
#define CRIS_LED_BIT_CLR(x)\
        do{\
                if((( 1 << x) & CONFIGURABLE_LEDS)  != 0)\
                       REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, x, 0);\
        }while(0)
#endif

#
#ifdef CONFIG_ETRAX_SOFT_SHUTDOWN
#define SOFT_SHUTDOWN() \
          REG_SHADOW_SET(port_csp0_addr, port_csp0_shadow, CONFIG_ETRAX_SHUTDOWN_BIT, 1)
#else
#define SOFT_SHUTDOWN()
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _CRIS_ARCH_DELAY_H
#define _CRIS_ARCH_DELAY_H

static inline void __delay(int loops)
{
	__asm__ __volatile__ (
			      "move.d %0,$r9\n\t"
			      "beq 2f\n\t"
			      "subq 1,$r9\n\t"
			      "1:\n\t"
			      "bne 1b\n\t"
			      "subq 1,$r9\n"
			      "2:"
			      : : "g" (loops) : "r9");
}

#endif /* defined(_CRIS_ARCH_DELAY_H) */



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef _CRIS_ARCH_SWAB_H
#define _CRIS_ARCH_SWAB_H

#include <asm/types.h>
#include <linux/compiler.h>

#define __SWAB_64_THRU_32__

/* we just define these two (as we can do the swap in a single
 * asm instruction in CRIS) and the arch-independent files will put
 * them together into ntohl etc.
 */

static inline __attribute_const__ __u32 __arch_swab32(__u32 x)
{
	__asm__ ("swapwb %0" : "=r" (x) : "0" (x));

	return(x);
}
#define __arch_swab32 __arch_swab32

static inline __attribute_const__ __u16 __arch_swab16(__u16 x)
{
	__asm__ ("swapb %0" : "=r" (x) : "0" (x));

	return(x);
}
#define __arch_swab16 __arch_swab16

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef _ASM_ARCH_THREAD_INFO_H
#define _ASM_ARCH_THREAD_INFO_H

/* how to get the thread information struct from C */
static inline struct thread_info *current_thread_info(void)
{
	struct thread_info *ti;
        __asm__("and.d $sp,%0; ":"=r" (ti) : "0" (~8191UL));
        return ti;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef _CRIS_ARCH_TLB_H
#define _CRIS_ARCH_TLB_H

/* The TLB can host up to 64 different mm contexts at the same time.
 * The last page_id is never running - it is used as an invalid page_id
 * so we can make TLB entries that will never match. 
 */
#define NUM_TLB_ENTRIES 64
#define NUM_PAGEID 64
#define INVALID_PAGEID 63
#define NO_CONTEXT -1

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef __ASM_CRIS_ARCH_IRQFLAGS_H
#define __ASM_CRIS_ARCH_IRQFLAGS_H

#include <linux/types.h>

static inline unsigned long arch_local_save_flags(void)
{
	unsigned long flags;
	asm volatile("move $ccr,%0" : "=rm" (flags) : : "memory");
	return flags;
}

static inline void arch_local_irq_disable(void)
{
	asm volatile("di" : : : "memory");
}

static inline void arch_local_irq_enable(void)
{
	asm volatile("ei" : : : "memory");
}

static inline unsigned long arch_local_irq_save(void)
{
	unsigned long flags = arch_local_save_flags();
	arch_local_irq_disable();
	return flags;
}

static inline void arch_local_irq_restore(unsigned long flags)
{
	asm volatile("move %0,$ccr" : : "rm" (flags) : "memory");
}

static inline bool arch_irqs_disabled_flags(unsigned long flags)
{
	return !(flags & (1 << 5));
}

static inline bool arch_irqs_disabled(void)
{
	return arch_irqs_disabled_flags(arch_local_save_flags());
}

#endif /* __ASM_CRIS_ARCH_IRQFLAGS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * CRIS MMU constants and PTE layout
 */

#ifndef _CRIS_ARCH_MMU_H
#define _CRIS_ARCH_MMU_H

/* type used in struct mm to couple an MMU context to an active mm */

typedef struct
{
  unsigned int page_id;
} mm_context_t;

/* kernel memory segments */

#define KSEG_F 0xf0000000UL
#define KSEG_E 0xe0000000UL
#define KSEG_D 0xd0000000UL
#define KSEG_C 0xc0000000UL
#define KSEG_B 0xb0000000UL
#define KSEG_A 0xa0000000UL
#define KSEG_9 0x90000000UL
#define KSEG_8 0x80000000UL
#define KSEG_7 0x70000000UL
#define KSEG_6 0x60000000UL
#define KSEG_5 0x50000000UL
#define KSEG_4 0x40000000UL
#define KSEG_3 0x30000000UL
#define KSEG_2 0x20000000UL
#define KSEG_1 0x10000000UL
#define KSEG_0 0x00000000UL

/* CRIS PTE bits (see R_TLB_LO in the register description)
 *
 *   Bit:  31     30-13 12-------4    3        2       1       0
 *         _______________________________________________________
 *        | cache |pfn | reserved | global | valid | kernel | we  |
 *        |_______|____|__________|________|_______|________|_____|
 *
 * (pfn = physical frame number)
 */

/* Real HW-based PTE bits. We use some synonym names so that
 * things become less confusing in combination with the SW-based
 * bits further below.
 *
 */

#define _PAGE_WE	   (1<<0) /* page is write-enabled */
#define _PAGE_SILENT_WRITE (1<<0) /* synonym */
#define _PAGE_KERNEL	   (1<<1) /* page is kernel only */
#define _PAGE_VALID	   (1<<2) /* page is valid */
#define _PAGE_SILENT_READ  (1<<2) /* synonym */
#define _PAGE_GLOBAL       (1<<3) /* global page - context is ignored */
#define _PAGE_NO_CACHE	   (1<<31) /* part of the uncached memory map */

/* Bits the HW doesn't care about but the kernel uses them in SW */

#define _PAGE_PRESENT   (1<<4)  /* page present in memory */
#define _PAGE_ACCESSED	(1<<5)  /* simulated in software using valid bit */
#define _PAGE_MODIFIED	(1<<6)  /* simulated in software using we bit */
#define _PAGE_READ      (1<<7)  /* read-enabled */
#define _PAGE_WRITE     (1<<8)  /* write-enabled */

/* Define some higher level generic page attributes. */

#define __READABLE      (_PAGE_READ | _PAGE_SILENT_READ | _PAGE_ACCESSED)
#define __WRITEABLE     (_PAGE_WRITE | _PAGE_SILENT_WRITE | _PAGE_MODIFIED)

#define _PAGE_TABLE     (_PAGE_PRESENT | __READABLE | __WRITEABLE)
#define _PAGE_CHG_MASK  (PAGE_MASK | _PAGE_ACCESSED | _PAGE_MODIFIED)

#define PAGE_NONE       __pgprot(_PAGE_PRESENT | _PAGE_ACCESSED)
#define PAGE_SHARED     __pgprot(_PAGE_PRESENT | __READABLE | _PAGE_WRITE | \
				 _PAGE_ACCESSED)
#define PAGE_COPY       __pgprot(_PAGE_PRESENT | __READABLE)  // | _PAGE_COW
#define PAGE_READONLY   __pgprot(_PAGE_PRESENT | __READABLE)
#define PAGE_KERNEL     __pgprot(_PAGE_GLOBAL | _PAGE_KERNEL | \
				 _PAGE_PRESENT | __READABLE | __WRITEABLE)
#define _KERNPG_TABLE   (_PAGE_TABLE | _PAGE_KERNEL)

/*
 * CRIS can't do page protection for execute, and considers read the same.
 * Also, write permissions imply read permissions. This is the closest we can
 * get..
 */

#define __P000	PAGE_NONE
#define __P001	PAGE_READONLY
#define __P010	PAGE_COPY
#define __P011	PAGE_COPY
#define __P100	PAGE_READONLY
#define __P101	PAGE_READONLY
#define __P110	PAGE_COPY
#define __P111	PAGE_COPY

#define __S000	PAGE_NONE
#define __S001	PAGE_READONLY
#define __S010	PAGE_SHARED
#define __S011	PAGE_SHARED
#define __S100	PAGE_READONLY
#define __S101	PAGE_READONLY
#define __S110	PAGE_SHARED
#define __S111	PAGE_SHARED

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /* asm/arch/bitops.h for Linux/CRISv10 */

#ifndef _CRIS_ARCH_BITOPS_H
#define _CRIS_ARCH_BITOPS_H

/*
 * Helper functions for the core of the ff[sz] functions, wrapping the
 * syntactically awkward asms.  The asms compute the number of leading
 * zeroes of a bits-in-byte and byte-in-word and word-in-dword-swapped
 * number.  They differ in that the first function also inverts all bits
 * in the input.
 */
static inline unsigned long cris_swapnwbrlz(unsigned long w)
{
	/* Let's just say we return the result in the same register as the
	   input.  Saying we clobber the input but can return the result
	   in another register:
	   !  __asm__ ("swapnwbr %2\n\tlz %2,%0"
	   !	      : "=r,r" (res), "=r,X" (dummy) : "1,0" (w));
	   confuses gcc (core.c, gcc from cris-dist-1.14).  */

	unsigned long res;
	__asm__ ("swapnwbr %0 \n\t"
		 "lz %0,%0"
		 : "=r" (res) : "0" (w));
	return res;
}

static inline unsigned long cris_swapwbrlz(unsigned long w)
{
	unsigned res;
	__asm__ ("swapwbr %0 \n\t"
		 "lz %0,%0"
		 : "=r" (res)
		 : "0" (w));
	return res;
}

/*
 * ffz = Find First Zero in word. Undefined if no zero exists,
 * so code should check against ~0UL first..
 */
static inline unsigned long ffz(unsigned long w)
{
	return cris_swapnwbrlz(w);
}

/**
 * __ffs - find first bit in word.
 * @word: The word to search
 *
 * Undefined if no bit exists, so code should check against 0 first.
 */
static inline unsigned long __ffs(unsigned long word)
{
	return cris_swapnwbrlz(~word);
}

/**
 * ffs - find first bit set
 * @x: the word to search
 *
 * This is defined the same way as
 * the libc and compiler builtin ffs routines, therefore
 * differs in spirit from the above ffz (man ffs).
 */

static inline unsigned long kernel_ffs(unsigned long w)
{
	return w ? cris_swapwbrlz (w) + 1 : 0;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /* 
 * Authors:    Bjorn Wesen (bjornw@axis.com)
 *	       Hans-Peter Nilsson (hp@axis.com)
 *
 */
#ifndef _CRIS_ARCH_UACCESS_H
#define _CRIS_ARCH_UACCESS_H

/*
 * We don't tell gcc that we are accessing memory, but this is OK
 * because we do not write to any memory gcc knows about, so there
 * are no aliasing issues.
 *
 * Note that PC at a fault is the address *after* the faulting
 * instruction.
 */
#define __put_user_asm(x, addr, err, op)			\
	__asm__ __volatile__(					\
		"	"op" %1,[%2]\n"				\
		"2:\n"						\
		"	.section .fixup,\"ax\"\n"		\
		"3:	move.d %3,%0\n"				\
		"	jump 2b\n"				\
		"	.previous\n"				\
		"	.section __ex_table,\"a\"\n"		\
		"	.dword 2b,3b\n"				\
		"	.previous\n"				\
		: "=r" (err)					\
		: "r" (x), "r" (addr), "g" (-EFAULT), "0" (err))

#define __put_user_asm_64(x, addr, err)				\
	__asm__ __volatile__(					\
		"	move.d %M1,[%2]\n"			\
		"2:	move.d %H1,[%2+4]\n"			\
		"4:\n"						\
		"	.section .fixup,\"ax\"\n"		\
		"3:	move.d %3,%0\n"				\
		"	jump 4b\n"				\
		"	.previous\n"				\
		"	.section __ex_table,\"a\"\n"		\
		"	.dword 2b,3b\n"				\
		"	.dword 4b,3b\n"				\
		"	.previous\n"				\
		: "=r" (err)					\
		: "r" (x), "r" (addr), "g" (-EFAULT), "0" (err))

/* See comment before __put_user_asm.  */

#define __get_user_asm(x, addr, err, op)		\
	__asm__ __volatile__(				\
		"	"op" [%2],%1\n"			\
		"2:\n"					\
		"	.section .fixup,\"ax\"\n"	\
		"3:	move.d %3,%0\n"			\
		"	moveq 0,%1\n"			\
		"	jump 2b\n"			\
		"	.previous\n"			\
		"	.section __ex_table,\"a\"\n"	\
		"	.dword 2b,3b\n"			\
		"	.previous\n"			\
		: "=r" (err), "=r" (x)			\
		: "r" (addr), "g" (-EFAULT), "0" (err))

#define __get_user_asm_64(x, addr, err)			\
	__asm__ __volatile__(				\
		"	move.d [%2],%M1\n"		\
		"2:	move.d [%2+4],%H1\n"		\
		"4:\n"					\
		"	.section .fixup,\"ax\"\n"	\
		"3:	move.d %3,%0\n"			\
		"	moveq 0,%1\n"			\
		"	jump 4b\n"			\
		"	.previous\n"			\
		"	.section __ex_table,\"a\"\n"	\
		"	.dword 2b,3b\n"			\
		"	.dword 4b,3b\n"			\
		"	.previous\n"			\
		: "=r" (err), "=r" (x)			\
		: "r" (addr), "g" (-EFAULT), "0" (err))

/*
 * Copy a null terminated string from userspace.
 *
 * Must return:
 * -EFAULT		for an exception
 * count		if we hit the buffer limit
 * bytes copied		if we hit a null byte
 * (without the null byte)
 */
static inline long
__do_strncpy_from_user(char *dst, const char *src, long count)
{
	long res;

	if (count == 0)
		return 0;

	/*
	 * Currently, in 2.4.0-test9, most ports use a simple byte-copy loop.
	 *  So do we.
	 *
	 *  This code is deduced from:
	 *
	 *	char tmp2;
	 *	long tmp1, tmp3	
	 *	tmp1 = count;
	 *	while ((*dst++ = (tmp2 = *src++)) != 0
	 *	       && --tmp1)
	 *	  ;
	 *
	 *	res = count - tmp1;
	 *
	 *  with tweaks.
	 */

	__asm__ __volatile__ (
		"	move.d %3,%0\n"
		"	move.b [%2+],$r9\n"
		"1:	beq 2f\n"
		"	move.b $r9,[%1+]\n"

		"	subq 1,%0\n"
		"	bne 1b\n"
		"	move.b [%2+],$r9\n"

		"2:	sub.d %3,%0\n"
		"	neg.d %0,%0\n"
		"3:\n"
		"	.section .fixup,\"ax\"\n"
		"4:	move.d %7,%0\n"
		"	jump 3b\n"

		/* There's one address for a fault at the first move, and
		   two possible PC values for a fault at the second move,
		   being a delay-slot filler.  However, the branch-target
		   for the second move is the same as the first address.
		   Just so you don't get confused...  */
		"	.previous\n"
		"	.section __ex_table,\"a\"\n"
		"	.dword 1b,4b\n"
		"	.dword 2b,4b\n"
		"	.previous"
		: "=r" (res), "=r" (dst), "=r" (src), "=r" (count)
		: "3" (count), "1" (dst), "2" (src), "g" (-EFAULT)
		: "r9");

	return res;
}

/* A few copy asms to build up the more complex ones from.

   Note again, a post-increment is performed regardless of whether a bus
   fault occurred in that instruction, and PC for a faulted insn is the
   address *after* the insn.  */

#define __asm_copy_user_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm__ __volatile__ (				\
			COPY				\
		"1:\n"					\
		"	.section .fixup,\"ax\"\n"	\
			FIXUP				\
		"	jump 1b\n"			\
		"	.previous\n"			\
		"	.section __ex_table,\"a\"\n"	\
			TENTRY				\
		"	.previous\n"			\
		: "=r" (to), "=r" (from), "=r" (ret)	\
		: "0" (to), "1" (from), "2" (ret)	\
		: "r9", "memory")

#define __asm_copy_from_user_1(to, from, ret) \
	__asm_copy_user_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"	\
		"2:	move.b $r9,[%0+]\n",	\
		"3:	addq 1,%2\n"		\
		"	clear.b [%0+]\n",	\
		"	.dword 2b,3b\n")

#define __asm_copy_from_user_2x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_user_cont(to, from, ret,		\
		"	move.w [%1+],$r9\n"		\
		"2:	move.w $r9,[%0+]\n" COPY,	\
		"3:	addq 2,%2\n"			\
		"	clear.w [%0+]\n" FIXUP,		\
		"	.dword 2b,3b\n" TENTRY)

#define __asm_copy_from_user_2(to, from, ret) \
	__asm_copy_from_user_2x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_3(to, from, ret)		\
	__asm_copy_from_user_2x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"4:	move.b $r9,[%0+]\n",		\
		"5:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 4b,5b\n")

#define __asm_copy_from_user_4x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_user_cont(to, from, ret,		\
		"	move.d [%1+],$r9\n"		\
		"2:	move.d $r9,[%0+]\n" COPY,	\
		"3:	addq 4,%2\n"			\
		"	clear.d [%0+]\n" FIXUP,		\
		"	.dword 2b,3b\n" TENTRY)

#define __asm_copy_from_user_4(to, from, ret) \
	__asm_copy_from_user_4x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_5(to, from, ret) \
	__asm_copy_from_user_4x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"4:	move.b $r9,[%0+]\n",		\
		"5:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 4b,5b\n")

#define __asm_copy_from_user_6x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_4x_cont(to, from, ret,	\
		"	move.w [%1+],$r9\n"		\
		"4:	move.w $r9,[%0+]\n" COPY,	\
		"5:	addq 2,%2\n"			\
		"	clear.w [%0+]\n" FIXUP,		\
		"	.dword 4b,5b\n" TENTRY)

#define __asm_copy_from_user_6(to, from, ret) \
	__asm_copy_from_user_6x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_7(to, from, ret) \
	__asm_copy_from_user_6x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"6:	move.b $r9,[%0+]\n",		\
		"7:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 6b,7b\n")

#define __asm_copy_from_user_8x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_4x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"4:	move.d $r9,[%0+]\n" COPY,	\
		"5:	addq 4,%2\n"			\
		"	clear.d [%0+]\n" FIXUP,		\
		"	.dword 4b,5b\n" TENTRY)

#define __asm_copy_from_user_8(to, from, ret) \
	__asm_copy_from_user_8x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_9(to, from, ret) \
	__asm_copy_from_user_8x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"6:	move.b $r9,[%0+]\n",		\
		"7:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 6b,7b\n")

#define __asm_copy_from_user_10x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_8x_cont(to, from, ret,	\
		"	move.w [%1+],$r9\n"		\
		"6:	move.w $r9,[%0+]\n" COPY,	\
		"7:	addq 2,%2\n"			\
		"	clear.w [%0+]\n" FIXUP,		\
		"	.dword 6b,7b\n" TENTRY)

#define __asm_copy_from_user_10(to, from, ret) \
	__asm_copy_from_user_10x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_11(to, from, ret)		\
	__asm_copy_from_user_10x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"8:	move.b $r9,[%0+]\n",		\
		"9:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 8b,9b\n")

#define __asm_copy_from_user_12x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_8x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"6:	move.d $r9,[%0+]\n" COPY,	\
		"7:	addq 4,%2\n"			\
		"	clear.d [%0+]\n" FIXUP,		\
		"	.dword 6b,7b\n" TENTRY)

#define __asm_copy_from_user_12(to, from, ret) \
	__asm_copy_from_user_12x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_13(to, from, ret) \
	__asm_copy_from_user_12x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"8:	move.b $r9,[%0+]\n",		\
		"9:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 8b,9b\n")

#define __asm_copy_from_user_14x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_12x_cont(to, from, ret,	\
		"	move.w [%1+],$r9\n"		\
		"8:	move.w $r9,[%0+]\n" COPY,	\
		"9:	addq 2,%2\n"			\
		"	clear.w [%0+]\n" FIXUP,		\
		"	.dword 8b,9b\n" TENTRY)

#define __asm_copy_from_user_14(to, from, ret) \
	__asm_copy_from_user_14x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_15(to, from, ret) \
	__asm_copy_from_user_14x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"10:	move.b $r9,[%0+]\n",		\
		"11:	addq 1,%2\n"			\
		"	clear.b [%0+]\n",		\
		"	.dword 10b,11b\n")

#define __asm_copy_from_user_16x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_12x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"8:	move.d $r9,[%0+]\n" COPY,	\
		"9:	addq 4,%2\n"			\
		"	clear.d [%0+]\n" FIXUP,		\
		"	.dword 8b,9b\n" TENTRY)

#define __asm_copy_from_user_16(to, from, ret) \
	__asm_copy_from_user_16x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_20x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_16x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"10:	move.d $r9,[%0+]\n" COPY,	\
		"11:	addq 4,%2\n"			\
		"	clear.d [%0+]\n" FIXUP,		\
		"	.dword 10b,11b\n" TENTRY)

#define __asm_copy_from_user_20(to, from, ret) \
	__asm_copy_from_user_20x_cont(to, from, ret, "", "", "")

#define __asm_copy_from_user_24x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_from_user_20x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"12:	move.d $r9,[%0+]\n" COPY,	\
		"13:	addq 4,%2\n"			\
		"	clear.d [%0+]\n" FIXUP,		\
		"	.dword 12b,13b\n" TENTRY)

#define __asm_copy_from_user_24(to, from, ret) \
	__asm_copy_from_user_24x_cont(to, from, ret, "", "", "")

/* And now, the to-user ones.  */

#define __asm_copy_to_user_1(to, from, ret)	\
	__asm_copy_user_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"	\
		"	move.b $r9,[%0+]\n2:\n",	\
		"3:	addq 1,%2\n",		\
		"	.dword 2b,3b\n")

#define __asm_copy_to_user_2x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_user_cont(to, from, ret,		\
		"	move.w [%1+],$r9\n"		\
		"	move.w $r9,[%0+]\n2:\n" COPY,	\
		"3:	addq 2,%2\n" FIXUP,		\
		"	.dword 2b,3b\n" TENTRY)

#define __asm_copy_to_user_2(to, from, ret) \
	__asm_copy_to_user_2x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_3(to, from, ret) \
	__asm_copy_to_user_2x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n4:\n",		\
		"5:	addq 1,%2\n",			\
		"	.dword 4b,5b\n")

#define __asm_copy_to_user_4x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_user_cont(to, from, ret,		\
		"	move.d [%1+],$r9\n"		\
		"	move.d $r9,[%0+]\n2:\n" COPY,	\
		"3:	addq 4,%2\n" FIXUP,		\
		"	.dword 2b,3b\n" TENTRY)

#define __asm_copy_to_user_4(to, from, ret) \
	__asm_copy_to_user_4x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_5(to, from, ret) \
	__asm_copy_to_user_4x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n4:\n",		\
		"5:	addq 1,%2\n",			\
		"	.dword 4b,5b\n")

#define __asm_copy_to_user_6x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_4x_cont(to, from, ret,	\
		"	move.w [%1+],$r9\n"		\
		"	move.w $r9,[%0+]\n4:\n" COPY,	\
		"5:	addq 2,%2\n" FIXUP,		\
		"	.dword 4b,5b\n" TENTRY)

#define __asm_copy_to_user_6(to, from, ret) \
	__asm_copy_to_user_6x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_7(to, from, ret) \
	__asm_copy_to_user_6x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n6:\n",		\
		"7:	addq 1,%2\n",			\
		"	.dword 6b,7b\n")

#define __asm_copy_to_user_8x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_4x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"	move.d $r9,[%0+]\n4:\n" COPY,	\
		"5:	addq 4,%2\n"  FIXUP,		\
		"	.dword 4b,5b\n" TENTRY)

#define __asm_copy_to_user_8(to, from, ret) \
	__asm_copy_to_user_8x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_9(to, from, ret) \
	__asm_copy_to_user_8x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n6:\n",		\
		"7:	addq 1,%2\n",			\
		"	.dword 6b,7b\n")

#define __asm_copy_to_user_10x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_8x_cont(to, from, ret,	\
		"	move.w [%1+],$r9\n"		\
		"	move.w $r9,[%0+]\n6:\n" COPY,	\
		"7:	addq 2,%2\n" FIXUP,		\
		"	.dword 6b,7b\n" TENTRY)

#define __asm_copy_to_user_10(to, from, ret) \
	__asm_copy_to_user_10x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_11(to, from, ret) \
	__asm_copy_to_user_10x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n8:\n",		\
		"9:	addq 1,%2\n",			\
		"	.dword 8b,9b\n")

#define __asm_copy_to_user_12x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_8x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"	move.d $r9,[%0+]\n6:\n" COPY,	\
		"7:	addq 4,%2\n" FIXUP,		\
		"	.dword 6b,7b\n" TENTRY)

#define __asm_copy_to_user_12(to, from, ret) \
	__asm_copy_to_user_12x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_13(to, from, ret) \
	__asm_copy_to_user_12x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n8:\n",		\
		"9:	addq 1,%2\n",			\
		"	.dword 8b,9b\n")

#define __asm_copy_to_user_14x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_12x_cont(to, from, ret,	\
		"	move.w [%1+],$r9\n"		\
		"	move.w $r9,[%0+]\n8:\n" COPY,	\
		"9:	addq 2,%2\n" FIXUP,		\
		"	.dword 8b,9b\n" TENTRY)

#define __asm_copy_to_user_14(to, from, ret)	\
	__asm_copy_to_user_14x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_15(to, from, ret) \
	__asm_copy_to_user_14x_cont(to, from, ret,	\
		"	move.b [%1+],$r9\n"		\
		"	move.b $r9,[%0+]\n10:\n",		\
		"11:	addq 1,%2\n",			\
		"	.dword 10b,11b\n")

#define __asm_copy_to_user_16x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_12x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"	move.d $r9,[%0+]\n8:\n" COPY,	\
		"9:	addq 4,%2\n" FIXUP,		\
		"	.dword 8b,9b\n" TENTRY)

#define __asm_copy_to_user_16(to, from, ret) \
	__asm_copy_to_user_16x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_20x_cont(to, from, ret, COPY, FIXUP, TENTRY) \
	__asm_copy_to_user_16x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"	move.d $r9,[%0+]\n10:\n" COPY,	\
		"11:	addq 4,%2\n" FIXUP,		\
		"	.dword 10b,11b\n" TENTRY)

#define __asm_copy_to_user_20(to, from, ret) \
	__asm_copy_to_user_20x_cont(to, from, ret, "", "", "")

#define __asm_copy_to_user_24x_cont(to, from, ret, COPY, FIXUP, TENTRY)	\
	__asm_copy_to_user_20x_cont(to, from, ret,	\
		"	move.d [%1+],$r9\n"		\
		"	move.d $r9,[%0+]\n12:\n" COPY,	\
		"13:	addq 4,%2\n" FIXUP,		\
		"	.dword 12b,13b\n" TENTRY)

#define __asm_copy_to_user_24(to, from, ret)	\
	__asm_copy_to_user_24x_cont(to, from, ret, "", "", "")

/* Define a few clearing asms with exception handlers.  */

/* This frame-asm is like the __asm_copy_user_cont one, but has one less
   input.  */

#define __asm_clear(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm__ __volatile__ (				\
			CLEAR				\
		"1:\n"					\
		"	.section .fixup,\"ax\"\n"	\
			FIXUP				\
		"	jump 1b\n"			\
		"	.previous\n"			\
		"	.section __ex_table,\"a\"\n"	\
			TENTRY				\
		"	.previous"			\
		: "=r" (to), "=r" (ret)			\
		: "0" (to), "1" (ret)			\
		: "memory")

#define __asm_clear_1(to, ret) \
	__asm_clear(to, ret,			\
		"	clear.b [%0+]\n2:\n",	\
		"3:	addq 1,%1\n",		\
		"	.dword 2b,3b\n")

#define __asm_clear_2(to, ret) \
	__asm_clear(to, ret,			\
		"	clear.w [%0+]\n2:\n",	\
		"3:	addq 2,%1\n",		\
		"	.dword 2b,3b\n")

#define __asm_clear_3(to, ret) \
     __asm_clear(to, ret,			\
		 "	clear.w [%0+]\n"	\
		 "2:	clear.b [%0+]\n3:\n",	\
		 "4:	addq 2,%1\n"		\
		 "5:	addq 1,%1\n",		\
		 "	.dword 2b,4b\n"		\
		 "	.dword 3b,5b\n")

#define __asm_clear_4x_cont(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm_clear(to, ret,				\
		"	clear.d [%0+]\n2:\n" CLEAR,	\
		"3:	addq 4,%1\n" FIXUP,		\
		"	.dword 2b,3b\n" TENTRY)

#define __asm_clear_4(to, ret) \
	__asm_clear_4x_cont(to, ret, "", "", "")

#define __asm_clear_8x_cont(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm_clear_4x_cont(to, ret,			\
		"	clear.d [%0+]\n4:\n" CLEAR,	\
		"5:	addq 4,%1\n" FIXUP,		\
		"	.dword 4b,5b\n" TENTRY)

#define __asm_clear_8(to, ret) \
	__asm_clear_8x_cont(to, ret, "", "", "")

#define __asm_clear_12x_cont(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm_clear_8x_cont(to, ret,			\
		"	clear.d [%0+]\n6:\n" CLEAR,	\
		"7:	addq 4,%1\n" FIXUP,		\
		"	.dword 6b,7b\n" TENTRY)

#define __asm_clear_12(to, ret) \
	__asm_clear_12x_cont(to, ret, "", "", "")

#define __asm_clear_16x_cont(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm_clear_12x_cont(to, ret,			\
		"	clear.d [%0+]\n8:\n" CLEAR,	\
		"9:	addq 4,%1\n" FIXUP,		\
		"	.dword 8b,9b\n" TENTRY)

#define __asm_clear_16(to, ret) \
	__asm_clear_16x_cont(to, ret, "", "", "")

#define __asm_clear_20x_cont(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm_clear_16x_cont(to, ret,			\
		"	clear.d [%0+]\n10:\n" CLEAR,	\
		"11:	addq 4,%1\n" FIXUP,		\
		"	.dword 10b,11b\n" TENTRY)

#define __asm_clear_20(to, ret) \
	__asm_clear_20x_cont(to, ret, "", "", "")

#define __asm_clear_24x_cont(to, ret, CLEAR, FIXUP, TENTRY) \
	__asm_clear_20x_cont(to, ret,			\
		"	clear.d [%0+]\n12:\n" CLEAR,	\
		"13:	addq 4,%1\n" FIXUP,		\
		"	.dword 12b,13b\n" TENTRY)

#define __asm_clear_24(to, ret) \
	__asm_clear_24x_cont(to, ret, "", "", "")

/*
 * Return the size of a string (including the ending 0)
 *
 * Return length of string in userspace including terminating 0
 * or 0 for error.  Return a value greater than N if too long.
 */

static inline long
strnlen_user(const char *s, long n)
{
	long res, tmp1;

	if (!access_ok(VERIFY_READ, s, 0))
		return 0;

	/*
	 * This code is deduced from:
	 *
	 *	tmp1 = n;
	 *	while (tmp1-- > 0 && *s++)
	 *	  ;
	 *
	 *	res = n - tmp1;
	 *
	 *  (with tweaks).
	 */

	__asm__ __volatile__ (
		"	move.d %1,$r9\n"
		"0:\n"
		"	ble 1f\n"
		"	subq 1,$r9\n"

		"	test.b [%0+]\n"
		"	bne 0b\n"
		"	test.d $r9\n"
		"1:\n"
		"	move.d %1,%0\n"
		"	sub.d $r9,%0\n"
		"2:\n"
		"	.section .fixup,\"ax\"\n"

		"3:	clear.d %0\n"
		"	jump 2b\n"

		/* There's one address for a fault at the first move, and
		   two possible PC values for a fault at the second move,
		   being a delay-slot filler.  However, the branch-target
		   for the second move is the same as the first address.
		   Just so you don't get confused...  */
		"	.previous\n"
		"	.section __ex_table,\"a\"\n"
		"	.dword 0b,3b\n"
		"	.dword 1b,3b\n"
		"	.previous\n"
		: "=r" (res), "=r" (tmp1)
		: "0" (s), "1" (n)
		: "r9");

	return res;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              # CRISv10 arch
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef _CRIS_ARCH_CHECKSUM_H
#define _CRIS_ARCH_CHECKSUM_H

/* Checksum some values used in TCP/UDP headers.
 *
 * The gain by doing this in asm is that C will not generate carry-additions
 * for the 32-bit components of the checksum, so otherwise we would have had
 * to split all of those into 16-bit components, then add.
 */

static inline __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
		   __u8 proto, __wsum sum)
{
	__wsum res;
	__asm__ ("add.d %2, %0\n\t"
		 "ax\n\t"
		 "add.d %3, %0\n\t"
		 "ax\n\t"
		 "add.d %4, %0\n\t"
		 "ax\n\t"
		 "addq 0, %0\n"
	: "=r" (res)
	: "0" (sum), "r" (daddr), "r" (saddr), "r" ((len + proto) << 8));

	return res;
}	

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef _ASM_CRIS_ARCH_UNISTD_H_
#define _ASM_CRIS_ARCH_UNISTD_H_

/* XXX - _foo needs to be __foo, while __NR_bar could be _NR_bar. */
/*
 * Don't remove the .ifnc tests; they are an insurance against
 * any hard-to-spot gcc register allocation bugs.
 */
#define _syscall0(type,name) \
type name(void) \
{ \
  register long __a __asm__ ("r10"); \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1,$r10$r9\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_)); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
}

#define _syscall1(type,name,type1,arg1) \
type name(type1 arg1) \
{ \
  register long __a __asm__ ("r10") = (long) arg1; \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1,$r10$r9\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_), "0" (__a)); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
}

#define _syscall2(type,name,type1,arg1,type2,arg2) \
type name(type1 arg1,type2 arg2) \
{ \
  register long __a __asm__ ("r10") = (long) arg1; \
  register long __b __asm__ ("r11") = (long) arg2; \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1%3,$r10$r9$r11\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_), "0" (__a), "r" (__b)); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
}

#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
type name(type1 arg1,type2 arg2,type3 arg3) \
{ \
  register long __a __asm__ ("r10") = (long) arg1; \
  register long __b __asm__ ("r11") = (long) arg2; \
  register long __c __asm__ ("r12") = (long) arg3; \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1%3%4,$r10$r9$r11$r12\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_), "0" (__a), "r" (__b), "r" (__c)); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
}

#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
{ \
  register long __a __asm__ ("r10") = (long) arg1; \
  register long __b __asm__ ("r11") = (long) arg2; \
  register long __c __asm__ ("r12") = (long) arg3; \
  register long __d __asm__ ("r13") = (long) arg4; \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1%3%4%5,$r10$r9$r11$r12$r13\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_), "0" (__a), "r" (__b), \
			  "r" (__c), "r" (__d)); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
} 

#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
	  type5,arg5) \
type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
{ \
  register long __a __asm__ ("r10") = (long) arg1; \
  register long __b __asm__ ("r11") = (long) arg2; \
  register long __c __asm__ ("r12") = (long) arg3; \
  register long __d __asm__ ("r13") = (long) arg4; \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1%3%4%5,$r10$r9$r11$r12$r13\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"move %6,$mof\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_), "0" (__a), "r" (__b), \
			  "r" (__c), "r" (__d), "g" (arg5)); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
}

#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
	  type5,arg5,type6,arg6) \
type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
{ \
  register long __a __asm__ ("r10") = (long) arg1; \
  register long __b __asm__ ("r11") = (long) arg2; \
  register long __c __asm__ ("r12") = (long) arg3; \
  register long __d __asm__ ("r13") = (long) arg4; \
  register long __n_ __asm__ ("r9") = (__NR_##name); \
  __asm__ __volatile__ (".ifnc %0%1%3%4%5,$r10$r9$r11$r12$r13\n\t" \
			".err\n\t" \
			".endif\n\t" \
			"move %6,$mof\n\tmove %7,$srp\n\t" \
			"break 13" \
			: "=r" (__a) \
			: "r" (__n_), "0" (__a), "r" (__b), \
			  "r" (__c), "r" (__d), "g" (arg5), "g" (arg6)\
			: "srp"); \
  if (__a >= 0) \
     return (type) __a; \
  errno = -__a; \
  return (type) -1; \
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef _ASM_ARCH_CACHE_H
#define _ASM_ARCH_CACHE_H

/* Etrax 100LX have 32-byte cache-lines. */
#define L1_CACHE_BYTES 32
#define L1_CACHE_SHIFT 5

#endif /* _ASM_ARCH_CACHE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef _ASM_ARCH_MEMMAP_H
#define _ASM_ARCH_MEMMAP_H

#define MEM_CSE0_START (0x00000000)
#define MEM_CSE0_SIZE (0x04000000)
#define MEM_CSE1_START (0x04000000)
#define MEM_CSE1_SIZE (0x04000000)
#define MEM_CSR0_START (0x08000000)
#define MEM_CSR1_START (0x0c000000)
#define MEM_CSP0_START (0x10000000)
#define MEM_CSP1_START (0x14000000)
#define MEM_CSP2_START (0x18000000)
#define MEM_CSP3_START (0x1c000000)
#define MEM_CSP4_START (0x20000000)
#define MEM_CSP5_START (0x24000000)
#define MEM_CSP6_START (0x28000000)
#define MEM_CSP7_START (0x2c000000)
#define MEM_DRAM_START (0x40000000)

#define MEM_NON_CACHEABLE (0x80000000)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef __ASM_CRIS_ARCH_PROCESSOR_H
#define __ASM_CRIS_ARCH_PROCESSOR_H

/*
 * Default implementation of macro that returns current
 * instruction pointer ("program counter").
 */
#define current_text_addr() ({void *pc; __asm__ ("move.d $pc,%0" : "=rm" (pc)); pc; })

/* CRIS has no problems with write protection */
#define wp_works_ok 1

/* CRIS thread_struct. this really has nothing to do with the processor itself, since
 * CRIS does not do any hardware task-switching, but it's here for legacy reasons.
 * The thread_struct here is used when task-switching using _resume defined in entry.S.
 * The offsets here are hardcoded into _resume - if you change this struct, you need to
 * change them as well!!!
*/

struct thread_struct {
	unsigned long ksp;     /* kernel stack pointer */
	unsigned long usp;     /* user stack pointer */
	unsigned long dccr;    /* saved flag register */
};

/*
 * User space process size. This is hardcoded into a few places,
 * so don't change it unless you know what you are doing.
 */

#ifdef CONFIG_CRIS_LOW_MAP
#define TASK_SIZE       (0x50000000UL)   /* 1.25 GB */
#else
#define TASK_SIZE       (0xA0000000UL)   /* 2.56 GB */
#endif

#define INIT_THREAD  { \
   0, 0, 0x20 }  /* ccr = int enable, nothing else */

#define KSTK_EIP(tsk)	\
({			\
	unsigned long eip = 0;   \
	unsigned long regs = (unsigned long)task_pt_regs(tsk); \
	if (regs > PAGE_SIZE && \
		virt_addr_valid(regs)) \
	eip = ((struct pt_regs *)regs)->irp; \
	eip; \
})

/* give the thread a program location
 * set user-mode (The 'U' flag (User mode flag) is CCR/DCCR bit 8) 
 * switch user-stackpointer
 */

#define start_thread(regs, ip, usp) do { \
	regs->irp = ip;       \
	regs->dccr |= 1 << U_DCCR_BITNR; \
	wrusp(usp);           \
} while(0)

/* Called when handling a kernel bus fault fixup.
 *
 * After a fixup we do not want to return by restoring the CPU-state
 * anymore, so switch frame-types (see ptrace.h)
 */
#define arch_fixup(regs) \
   regs->frametype = CRIS_FRAME_NORMAL;

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*
 * The device /dev/cryptocop is accessible using this driver using
 * CRYPTOCOP_MAJOR (254) and minor number 0.
 */

#ifndef _UAPICRYPTOCOP_H
#define _UAPICRYPTOCOP_H

#include <linux/uio.h>


#define CRYPTOCOP_SESSION_ID_NONE (0)

typedef unsigned long long int cryptocop_session_id;

/* cryptocop ioctls */
#define ETRAXCRYPTOCOP_IOCTYPE         (250)

#define CRYPTOCOP_IO_CREATE_SESSION    _IOWR(ETRAXCRYPTOCOP_IOCTYPE, 1, struct strcop_session_op)
#define CRYPTOCOP_IO_CLOSE_SESSION     _IOW(ETRAXCRYPTOCOP_IOCTYPE, 2, struct strcop_session_op)
#define CRYPTOCOP_IO_PROCESS_OP        _IOWR(ETRAXCRYPTOCOP_IOCTYPE, 3, struct strcop_crypto_op)
#define CRYPTOCOP_IO_MAXNR             (3)

typedef enum {
	cryptocop_cipher_des = 0,
	cryptocop_cipher_3des = 1,
	cryptocop_cipher_aes = 2,
	cryptocop_cipher_m2m = 3, /* mem2mem is essentially a NULL cipher with blocklength=1 */
	cryptocop_cipher_none
} cryptocop_cipher_type;

typedef enum {
	cryptocop_digest_sha1 = 0,
	cryptocop_digest_md5 = 1,
	cryptocop_digest_none
} cryptocop_digest_type;

typedef enum {
	cryptocop_csum_le = 0,
	cryptocop_csum_be = 1,
	cryptocop_csum_none
} cryptocop_csum_type;

typedef enum {
	cryptocop_cipher_mode_ecb = 0,
	cryptocop_cipher_mode_cbc,
	cryptocop_cipher_mode_none
} cryptocop_cipher_mode;

typedef enum {
	cryptocop_3des_eee = 0,
	cryptocop_3des_eed = 1,
	cryptocop_3des_ede = 2,
	cryptocop_3des_edd = 3,
	cryptocop_3des_dee = 4,
	cryptocop_3des_ded = 5,
	cryptocop_3des_dde = 6,
	cryptocop_3des_ddd = 7
} cryptocop_3des_mode;

/* Usermode accessible (ioctl) operations. */
struct strcop_session_op{
	cryptocop_session_id    ses_id;

	cryptocop_cipher_type   cipher; /* AES, DES, 3DES, m2m, none */

	cryptocop_cipher_mode   cmode; /* ECB, CBC, none */
	cryptocop_3des_mode     des3_mode;

	cryptocop_digest_type   digest; /* MD5, SHA1, none */

	cryptocop_csum_type     csum;   /* BE, LE, none */

	unsigned char           *key;
	size_t                  keylen;
};

#define CRYPTOCOP_CSUM_LENGTH         (2)
#define CRYPTOCOP_MAX_DIGEST_LENGTH   (20)  /* SHA-1 20, MD5 16 */
#define CRYPTOCOP_MAX_IV_LENGTH       (16)  /* (3)DES==8, AES == 16 */
#define CRYPTOCOP_MAX_KEY_LENGTH      (32)

struct strcop_crypto_op{
	cryptocop_session_id ses_id;

	/* Indata. */
	unsigned char            *indata;
	size_t                   inlen; /* Total indata length. */

	/* Cipher configuration. */
	unsigned char            do_cipher:1;
	unsigned char            decrypt:1; /* 1 == decrypt, 0 == encrypt */
	unsigned char            cipher_explicit:1;
	size_t                   cipher_start;
	size_t                   cipher_len;
	/* cipher_iv is used if do_cipher and cipher_explicit and the cipher
	   mode is CBC.  The length is controlled by the type of cipher,
	   e.g. DES/3DES 8 octets and AES 16 octets. */
	unsigned char            cipher_iv[CRYPTOCOP_MAX_IV_LENGTH];
	/* Outdata. */
	unsigned char            *cipher_outdata;
	size_t                   cipher_outlen;

	/* digest configuration. */
	unsigned char            do_digest:1;
	size_t                   digest_start;
	size_t                   digest_len;
	/* Outdata.  The actual length is determined by the type of the digest. */
	unsigned char            digest[CRYPTOCOP_MAX_DIGEST_LENGTH];

	/* Checksum configuration. */
	unsigned char            do_csum:1;
	size_t                   csum_start;
	size_t                   csum_len;
	/* Outdata. */
	unsigned char            csum[CRYPTOCOP_CSUM_LENGTH];
};




#endif /* _UAPICRYPTOCOP_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # UAPI Header export list
header-y += cryptocop.h
header-y += user.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _ASM_CRIS_ARCH_USER_H
#define _ASM_CRIS_ARCH_USER_H

/* User-mode register used for core dumps. */

struct user_regs_struct {
	unsigned long r0;	/* General registers. */
	unsigned long r1;
	unsigned long r2;
	unsigned long r3;
	unsigned long r4;
	unsigned long r5;
	unsigned long r6;
	unsigned long r7;
	unsigned long r8;
	unsigned long r9;
	unsigned long r10;
	unsigned long r11;
	unsigned long r12;
	unsigned long r13;
	unsigned long sp;	/* R14, Stack pointer. */
	unsigned long acr;	/* R15, Address calculation register. */
	unsigned long bz;	/* P0, Constant zero (8-bits). */
	unsigned long vr;	/* P1, Version register (8-bits). */
	unsigned long pid;	/* P2, Process ID (8-bits). */
	unsigned long srs;	/* P3, Support register select (8-bits). */
	unsigned long wz;	/* P4, Constant zero (16-bits). */
	unsigned long exs;	/* P5, Exception status. */
	unsigned long eda;	/* P6, Exception data address. */
	unsigned long mof;	/* P7, Multiply overflow regiter. */
	unsigned long dz;	/* P8, Constant zero (32-bits). */
	unsigned long ebp;	/* P9, Exception base pointer. */
	unsigned long erp;	/* P10, Exception return pointer. */
	unsigned long srp;	/* P11, Subroutine return pointer. */
	unsigned long nrp;	/* P12, NMI return pointer. */
	unsigned long ccs;	/* P13, Condition code stack. */
	unsigned long usp;	/* P14, User mode stack pointer. */
	unsigned long spc;	/* P15, Single step PC. */
};

#endif /* _ASM_CRIS_ARCH_USER_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef __ARCH_CRIS_IOCTLS_H__
#define __ARCH_CRIS_IOCTLS_H__

#define TIOCSERGSTRUCT	0x5458 /* For debugging only */
#define TIOCSERSETRS485	0x5461  /* enable rs-485 (deprecated) */
#define TIOCSERWRRS485	0x5462  /* write rs-485 */
#define TIOCSRS485	0x5463  /* enable rs-485 */

#include <asm-generic/ioctls.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef __ASMCRIS_ELF_H
#define __ASMCRIS_ELF_H

/*
 * ELF register definitions..
 */

#ifdef __arch_v32
#include <asm/elf_v32.h>
#else
#include <asm/elf_v10.h>
#endif

#define R_CRIS_NONE             0
#define R_CRIS_8                1
#define R_CRIS_16               2
#define R_CRIS_32               3
#define R_CRIS_8_PCREL          4
#define R_CRIS_16_PCREL         5
#define R_CRIS_32_PCREL         6
#define R_CRIS_GNU_VTINHERIT    7
#define R_CRIS_GNU_VTENTRY      8
#define R_CRIS_COPY             9
#define R_CRIS_GLOB_DAT         10
#define R_CRIS_JUMP_SLOT        11
#define R_CRIS_RELATIVE         12
#define R_CRIS_16_GOT           13
#define R_CRIS_32_GOT           14
#define R_CRIS_16_GOTPLT        15
#define R_CRIS_32_GOTPLT        16
#define R_CRIS_32_GOTREL        17
#define R_CRIS_32_PLT_GOTREL    18
#define R_CRIS_32_PLT_PCREL     19

typedef unsigned long elf_greg_t;

/* Note that NGREG is defined to ELF_NGREG in include/linux/elfcore.h, and is
   thus exposed to user-space. */
typedef elf_greg_t elf_gregset_t[ELF_NGREG];

/* A placeholder; CRIS does not have any fp regs.  */
typedef unsigned long elf_fpregset_t;

/*
 * These are used to set parameters in the core dumps.
 */
#define ELF_CLASS	ELFCLASS32
#define ELF_DATA	ELFDATA2LSB
#define ELF_ARCH	EM_CRIS

/* The master for these definitions is {binutils}/include/elf/cris.h:  */
/* User symbols in this file have a leading underscore.  */
#define EF_CRIS_UNDERSCORE		0x00000001

/* This is a mask for different incompatible machine variants.  */
#define EF_CRIS_VARIANT_MASK		0x0000000e

/* Variant 0; may contain v0..10 object.  */
#define EF_CRIS_VARIANT_ANY_V0_V10	0x00000000

/* Variant 1; contains v32 object.  */
#define EF_CRIS_VARIANT_V32		0x00000002

/* Variant 2; contains object compatible with v32 and v10.  */
#define EF_CRIS_VARIANT_COMMON_V10_V32	0x00000004
/* End of excerpt from {binutils}/include/elf/cris.h.  */

#define ELF_EXEC_PAGESIZE	8192

/* This is the location that an ET_DYN program is loaded if exec'ed.  Typical
   use of this is to invoke "./ld.so someprog" to test out a new version of
   the loader.  We need to make sure that it is out of the way of the program
   that it will "exec", and that there is sufficient room for the brk.  */

#define ELF_ET_DYN_BASE         (TASK_SIZE / 3 * 2)

/* This yields a mask that user programs can use to figure out what
   instruction set this CPU supports.  This could be done in user space,
   but it's not easy, and we've already done it here.  */

#define ELF_HWCAP       (0)

/* This yields a string that ld.so will use to load implementation
   specific libraries for optimization.  This is more specific in
   intent than poking at uname or /proc/cpuinfo.
*/

#define ELF_PLATFORM  (NULL)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _CRIS_ARCH_PTRACE_H
#define _CRIS_ARCH_PTRACE_H

/* Frame types */

#define CRIS_FRAME_NORMAL   0 /* normal frame without SBFS stacking */
#define CRIS_FRAME_BUSFAULT 1 /* frame stacked using SBFS, need RBF return
				 path */

/* Register numbers in the ptrace system call interface */

#define PT_FRAMETYPE 0
#define PT_ORIG_R10  1
#define PT_R13       2
#define PT_R12       3
#define PT_R11       4
#define PT_R10       5
#define PT_R9        6
#define PT_R8        7
#define PT_R7        8
#define PT_R6        9
#define PT_R5        10
#define PT_R4        11
#define PT_R3        12
#define PT_R2        13
#define PT_R1        14
#define PT_R0        15
#define PT_MOF       16
#define PT_DCCR      17
#define PT_SRP       18
#define PT_IRP       19    /* This is actually the debugged process' PC */
#define PT_CSRINSTR  20    /* CPU Status record remnants -
			      valid if frametype == busfault */
#define PT_CSRADDR   21
#define PT_CSRDATA   22
#define PT_USP       23    /* special case - USP is not in the pt_regs */
#define PT_MAX       23

/* Condition code bit numbers.  The same numbers apply to CCR of course,
   but we use DCCR everywhere else, so let's try and be consistent.  */
#define C_DCCR_BITNR 0
#define V_DCCR_BITNR 1
#define Z_DCCR_BITNR 2
#define N_DCCR_BITNR 3
#define X_DCCR_BITNR 4
#define I_DCCR_BITNR 5
#define B_DCCR_BITNR 6
#define M_DCCR_BITNR 7
#define U_DCCR_BITNR 8
#define P_DCCR_BITNR 9
#define F_DCCR_BITNR 10

/* pt_regs not only specifices the format in the user-struct during
 * ptrace but is also the frame format used in the kernel prologue/epilogues 
 * themselves
 */

struct pt_regs {
	unsigned long frametype;  /* type of stackframe */
	unsigned long orig_r10;
	/* pushed by movem r13, [sp] in SAVE_ALL, movem pushes backwards */
	unsigned long r13;
	unsigned long r12;
	unsigned long r11;
	unsigned long r10;
	unsigned long r9;
	unsigned long r8;
	unsigned long r7;
	unsigned long r6;
	unsigned long r5;
	unsigned long r4;
	unsigned long r3;
	unsigned long r2;
	unsigned long r1;
	unsigned long r0;
	unsigned long mof;
	unsigned long dccr;
	unsigned long srp;
	unsigned long irp; /* This is actually the debugged process' PC */
	unsigned long csrinstr;
	unsigned long csraddr;
	unsigned long csrdata;
};

/* switch_stack is the extra stuff pushed onto the stack in _resume (entry.S)
 * when doing a context-switch. it is used (apart from in resume) when a new
 * thread is made and we need to make _resume (which is starting it for the
 * first time) realise what is going on.
 *
 * Actually, the use is very close to the thread struct (TSS) in that both the
 * switch_stack and the TSS are used to keep thread stuff when switching in
 * _resume.
 */

struct switch_stack {
	unsigned long r9;
	unsigned long r8;
	unsigned long r7;
	unsigned long r6;
	unsigned long r5;
	unsigned long r4;
	unsigned long r3;
	unsigned long r2;
	unsigned long r1;
	unsigned long r0;
	unsigned long return_ip; /* ip that _resume will return to */
};

#ifdef __KERNEL__

/* bit 8 is user-mode flag */
#define user_mode(regs) (((regs)->dccr & 0x100) != 0)
#define instruction_pointer(regs) ((regs)->irp)
#define profile_pc(regs) instruction_pointer(regs)

#endif  /*  __KERNEL__  */

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef _UAPI_CRIS_TERMIOS_H
#define _UAPI_CRIS_TERMIOS_H

#include <asm/termbits.h>
#include <asm/ioctls.h>
#include <asm/rs485.h>
#include <linux/serial.h>

struct winsize {
	unsigned short ws_row;
	unsigned short ws_col;
	unsigned short ws_xpixel;
	unsigned short ws_ypixel;
};

#define NCC 8
struct termio {
	unsigned short c_iflag;		/* input mode flags */
	unsigned short c_oflag;		/* output mode flags */
	unsigned short c_cflag;		/* control mode flags */
	unsigned short c_lflag;		/* local mode flags */
	unsigned char c_line;		/* line discipline */
	unsigned char c_cc[NCC];	/* control characters */
};

/* modem lines */
#define TIOCM_LE	0x001
#define TIOCM_DTR	0x002
#define TIOCM_RTS	0x004
#define TIOCM_ST	0x008
#define TIOCM_SR	0x010
#define TIOCM_CTS	0x020
#define TIOCM_CAR	0x040
#define TIOCM_RNG	0x080
#define TIOCM_DSR	0x100
#define TIOCM_CD	TIOCM_CAR
#define TIOCM_RI	TIOCM_RNG
#define TIOCM_OUT1	0x2000
#define TIOCM_OUT2	0x4000
#define TIOCM_LOOP	0x8000

/* ioctl (fd, TIOCSERGETLSR, &result) where result may be as below */


#endif /* _UAPI_CRIS_TERMIOS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #ifndef _CRIS_BYTEORDER_H
#define _CRIS_BYTEORDER_H

#include <linux/byteorder/little_endian.h>

#endif


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #ifndef __ASMCRIS_ARCH_ELF_H
#define __ASMCRIS_ARCH_ELF_H

#define ELF_MACH EF_CRIS_VARIANT_ANY_V0_V10

/* Matches struct user_regs_struct */
#define ELF_NGREG 35

/*
 * This is used to ensure we don't load something for the wrong architecture.
 */
#define elf_check_arch(x)			\
 ((x)->e_machine == EM_CRIS			\
  && ((((x)->e_flags & EF_CRIS_VARIANT_MASK) == EF_CRIS_VARIANT_ANY_V0_V10	\
      || (((x)->e_flags & EF_CRIS_VARIANT_MASK) == EF_CRIS_VARIANT_COMMON_V10_V32))))

/*
 * ELF register definitions..
 */

#include <asm/ptrace.h>

/* SVR4/i386 ABI (pages 3-31, 3-32) says that when the program
   starts (a register; assume first param register for CRIS)
   contains a pointer to a function which might be
   registered using `atexit'.  This provides a mean for the
   dynamic linker to call DT_FINI functions for shared libraries
   that have been loaded before the code runs.

   A value of 0 tells we have no such handler.  */

/* Explicitly set registers to 0 to increase determinism.  */
#define ELF_PLAT_INIT(_r, load_addr)	do { \
	(_r)->r13 = 0; (_r)->r12 = 0; (_r)->r11 = 0; (_r)->r10 = 0; \
	(_r)->r9 = 0;  (_r)->r8 = 0;  (_r)->r7 = 0;  (_r)->r6 = 0;  \
	(_r)->r5 = 0;  (_r)->r4 = 0;  (_r)->r3 = 0;  (_r)->r2 = 0;  \
	(_r)->r1 = 0;  (_r)->r0 = 0;  (_r)->mof = 0; (_r)->srp = 0; \
} while (0)

/* The additional layer below is because the stack pointer is missing in 
   the pt_regs struct, but needed in a core dump. pr_reg is a elf_gregset_t,
   and should be filled in according to the layout of the user_regs_struct
   struct; regs is a pt_regs struct. We dump all registers, though several are
   obviously unnecessary. That way there's less need for intelligence at 
   the receiving end (i.e. gdb). */
#define ELF_CORE_COPY_REGS(pr_reg, regs)                   \
	pr_reg[0] = regs->r0;                              \
	pr_reg[1] = regs->r1;                              \
	pr_reg[2] = regs->r2;                              \
	pr_reg[3] = regs->r3;                              \
	pr_reg[4] = regs->r4;                              \
	pr_reg[5] = regs->r5;                              \
	pr_reg[6] = regs->r6;                              \
	pr_reg[7] = regs->r7;                              \
	pr_reg[8] = regs->r8;                              \
	pr_reg[9] = regs->r9;                              \
	pr_reg[10] = regs->r10;                            \
	pr_reg[11] = regs->r11;                            \
	pr_reg[12] = regs->r12;                            \
	pr_reg[13] = regs->r13;                            \
	pr_reg[14] = rdusp();               /* sp */       \
	pr_reg[15] = regs->irp;             /* pc */       \
	pr_reg[16] = 0;                     /* p0 */       \
	pr_reg[17] = rdvr();                /* vr */       \
	pr_reg[18] = 0;                     /* p2 */       \
	pr_reg[19] = 0;                     /* p3 */       \
	pr_reg[20] = 0;                     /* p4 */       \
	pr_reg[21] = (regs->dccr & 0xffff); /* ccr */      \
	pr_reg[22] = 0;                     /* p6 */       \
	pr_reg[23] = regs->mof;             /* mof */      \
	pr_reg[24] = 0;                     /* p8 */       \
	pr_reg[25] = 0;                     /* ibr */      \
	pr_reg[26] = 0;                     /* irp */      \
	pr_reg[27] = regs->srp;             /* srp */      \
	pr_reg[28] = 0;                     /* bar */      \
	pr_reg[29] = regs->dccr;            /* dccr */     \
	pr_reg[30] = 0;                     /* brp */      \
	pr_reg[31] = rdusp();               /* usp */      \
	pr_reg[32] = 0;                     /* csrinstr */ \
	pr_reg[33] = 0;                     /* csraddr */  \
	pr_reg[34] = 0;                     /* csrdata */


#endif
                                                                                                                                                                                                                                                                                                                                                                                                                               /* RS-485 structures */

/* Used with ioctl() TIOCSERSETRS485 for backward compatibility!
 * XXX: Do not use it for new code!
 */
struct rs485_control {
        unsigned short rts_on_send;
        unsigned short rts_after_sent;
        unsigned long delay_rts_before_send;
        unsigned short enabled;
};

/* Used with ioctl() TIOCSERWRRS485 */
struct rs485_write {
        unsigned short outc_size;
        unsigned char *outc;
};

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /* $Id: sigcontext.h,v 1.1 2000/07/10 16:32:31 bjornw Exp $ */

#ifndef _ASM_CRIS_SIGCONTEXT_H
#define _ASM_CRIS_SIGCONTEXT_H

#include <asm/ptrace.h>

/* This struct is saved by setup_frame in signal.c, to keep the current context while
   a signal handler is executed. It's restored by sys_sigreturn.
   
   To keep things simple, we use pt_regs here even though normally you just specify
   the list of regs to save. Then we can use copy_from_user on the entire regs instead
   of a bunch of get_user's as well...

*/

struct sigcontext {
	struct pt_regs regs;  /* needs to be first */
	unsigned long oldmask;
	unsigned long usp;    /* usp before stacking this gunk on it */
};

#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef _ASM_CRIS_ELF_H
#define _ASM_CRIS_ELF_H

#define ELF_CORE_EFLAGS EF_CRIS_VARIANT_V32

/* Matches struct user_regs_struct */
#define ELF_NGREG 32

/*
 * This is used to ensure we don't load something for the wrong architecture.
 */
#define elf_check_arch(x)			\
 ((x)->e_machine == EM_CRIS			\
  && ((((x)->e_flags & EF_CRIS_VARIANT_MASK) == EF_CRIS_VARIANT_V32	\
      || (((x)->e_flags & EF_CRIS_VARIANT_MASK) == EF_CRIS_VARIANT_COMMON_V10_V32))))

/* CRISv32 ELF register definitions. */

#include <asm/ptrace.h>

/* Explicitly zero out registers to increase determinism. */
#define ELF_PLAT_INIT(_r, load_addr)    do { \
        (_r)->r13 = 0; (_r)->r12 = 0; (_r)->r11 = 0; (_r)->r10 = 0; \
        (_r)->r9 = 0;  (_r)->r8 = 0;  (_r)->r7 = 0;  (_r)->r6 = 0;  \
        (_r)->r5 = 0;  (_r)->r4 = 0;  (_r)->r3 = 0;  (_r)->r2 = 0;  \
        (_r)->r1 = 0;  (_r)->r0 = 0;  (_r)->mof = 0; (_r)->srp = 0; \
        (_r)->acr = 0; \
} while (0)

/*
 * An executable for which elf_read_implies_exec() returns TRUE will
 * have the READ_IMPLIES_EXEC personality flag set automatically.
 */
#define elf_read_implies_exec_binary(ex, have_pt_gnu_stack)	(!(have_pt_gnu_stack))

/*
 * This is basically a pt_regs with the additional definition
 * of the stack pointer since it's needed in a core dump.
 * pr_regs is a elf_gregset_t and should be filled according
 * to the layout of user_regs_struct.
 */
#define ELF_CORE_COPY_REGS(pr_reg, regs)                   \
        pr_reg[0] = regs->r0;                              \
        pr_reg[1] = regs->r1;                              \
        pr_reg[2] = regs->r2;                              \
        pr_reg[3] = regs->r3;                              \
        pr_reg[4] = regs->r4;                              \
        pr_reg[5] = regs->r5;                              \
        pr_reg[6] = regs->r6;                              \
        pr_reg[7] = regs->r7;                              \
        pr_reg[8] = regs->r8;                              \
        pr_reg[9] = regs->r9;                              \
        pr_reg[10] = regs->r10;                            \
        pr_reg[11] = regs->r11;                            \
        pr_reg[12] = regs->r12;                            \
        pr_reg[13] = regs->r13;                            \
        pr_reg[14] = rdusp();               /* SP */       \
        pr_reg[15] = regs->acr;             /* ACR */      \
        pr_reg[16] = 0;                     /* BZ */       \
        pr_reg[17] = rdvr();                /* VR */       \
        pr_reg[18] = 0;                     /* PID */      \
        pr_reg[19] = regs->srs;             /* SRS */      \
        pr_reg[20] = 0;                     /* WZ */       \
        pr_reg[21] = regs->exs;             /* EXS */      \
        pr_reg[22] = regs->eda;             /* EDA */      \
        pr_reg[23] = regs->mof;             /* MOF */      \
        pr_reg[24] = 0;                     /* DZ */       \
        pr_reg[25] = 0;                     /* EBP */      \
        pr_reg[26] = regs->erp;             /* ERP */      \
        pr_reg[27] = regs->srp;             /* SRP */      \
        pr_reg[28] = 0;                     /* NRP */      \
        pr_reg[29] = regs->ccs;             /* CCS */      \
        pr_reg[30] = rdusp();               /* USP */      \
        pr_reg[31] = regs->spc;             /* SPC */      \

#endif /* _ASM_CRIS_ELF_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * CRIS byte swapping.
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef _UAPI_ASM_CRIS_SIGNAL_H
#define _UAPI_ASM_CRIS_SIGNAL_H

#include <linux/types.h>

/* Avoid too many header ordering problems.  */
struct siginfo;

#ifndef __KERNEL__
/* Here we must cater to libcs that poke about in kernel headers.  */

#define NSIG		32
typedef unsigned long sigset_t;

#endif /* __KERNEL__ */

#define SIGHUP		 1
#define SIGINT		 2
#define SIGQUIT		 3
#define SIGILL		 4
#define SIGTRAP		 5
#define SIGABRT		 6
#define SIGIOT		 6
#define SIGBUS		 7
#define SIGFPE		 8
#define SIGKILL		 9
#define SIGUSR1		10
#define SIGSEGV		11
#define SIGUSR2		12
#define SIGPIPE		13
#define SIGALRM		14
#define SIGTERM		15
#define SIGSTKFLT	16
#define SIGCHLD		17
#define SIGCONT		18
#define SIGSTOP		19
#define SIGTSTP		20
#define SIGTTIN		21
#define SIGTTOU		22
#define SIGURG		23
#define SIGXCPU		24
#define SIGXFSZ		25
#define SIGVTALRM	26
#define SIGPROF		27
#define SIGWINCH	28
#define SIGIO		29
#define SIGPOLL		SIGIO
/*
#define SIGLOST		29
*/
#define SIGPWR		30
#define SIGSYS          31
#define	SIGUNUSED	31

/* These should not be considered constants from userland.  */
#define SIGRTMIN        32
#define SIGRTMAX        _NSIG

/*
 * SA_FLAGS values:
 *
 * SA_ONSTACK indicates that a registered stack_t will be used.
 * SA_RESTART flag to get restarting signals (which were the default long ago)
 * SA_NOCLDSTOP flag to turn off SIGCHLD when children stop.
 * SA_RESETHAND clears the handler when the signal is delivered.
 * SA_NOCLDWAIT flag on SIGCHLD to inhibit zombies.
 * SA_NODEFER prevents the current signal from being masked in the handler.
 *
 * SA_ONESHOT and SA_NOMASK are the historical Linux names for the Single
 * Unix names RESETHAND and NODEFER respectively.
 */

#define SA_NOCLDSTOP	0x00000001u
#define SA_NOCLDWAIT	0x00000002u
#define SA_SIGINFO	0x00000004u
#define SA_ONSTACK	0x08000000u
#define SA_RESTART	0x10000000u
#define SA_NODEFER	0x40000000u
#define SA_RESETHAND	0x80000000u

#define SA_NOMASK	SA_NODEFER
#define SA_ONESHOT	SA_RESETHAND

#define SA_RESTORER	0x04000000

#define MINSIGSTKSZ	2048
#define SIGSTKSZ	8192

#include <asm-generic/signal-defs.h>

#ifndef __KERNEL__
/* Here we must cater to libcs that poke about in kernel headers.  */

struct sigaction {
	union {
	  __sighandler_t _sa_handler;
	  void (*_sa_sigaction)(int, struct siginfo *, void *);
	} _u;
	sigset_t sa_mask;
	unsigned long sa_flags;
	void (*sa_restorer)(void);
};

#define sa_handler	_u._sa_handler
#define sa_sigaction	_u._sa_sigaction

#endif /* __KERNEL__ */

typedef struct sigaltstack {
	void *ss_sp;
	int ss_flags;
	size_t ss_size;
} stack_t;


#endif /* _UAPI_ASM_CRIS_SIGNAL_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * The following devices are accessible using this driver using
 * GPIO_MAJOR (120) and a couple of minor numbers.
 *
 * For ETRAX 100LX (CONFIG_ETRAX_ARCH_V10):
 * /dev/gpioa  minor 0, 8 bit GPIO, each bit can change direction
 * /dev/gpiob  minor 1, 8 bit GPIO, each bit can change direction
 * /dev/leds   minor 2, Access to leds depending on kernelconfig
 * /dev/gpiog  minor 3
 *       g0dir, g8_15dir, g16_23dir, g24 dir configurable in R_GEN_CONFIG
 *       g1-g7 and g25-g31 is both input and outputs but on different pins
 *       Also note that some bits change pins depending on what interfaces
 *       are enabled.
 */
#ifndef _ASM_ETRAXGPIO_H
#define _ASM_ETRAXGPIO_H

#define GPIO_MINOR_FIRST 0

#define ETRAXGPIO_IOCTYPE 43

/* etraxgpio _IOC_TYPE, bits 8 to 15 in ioctl cmd */
#define GPIO_MINOR_A 0
#define GPIO_MINOR_B 1
#define GPIO_MINOR_LEDS 2
#define GPIO_MINOR_G 3
#define GPIO_MINOR_LAST 3
#define GPIO_MINOR_LAST_REAL GPIO_MINOR_LAST


/* supported ioctl _IOC_NR's */

#define IO_READBITS  0x1  /* read and return current port bits (obsolete) */
#define IO_SETBITS   0x2  /* set the bits marked by 1 in the argument */
#define IO_CLRBITS   0x3  /* clear the bits marked by 1 in the argument */

/* the alarm is waited for by select() */

#define IO_HIGHALARM 0x4  /* set alarm on high for bits marked by 1 */
#define IO_LOWALARM  0x5  /* set alarm on low for bits marked by 1 */
#define IO_CLRALARM  0x6  /* clear alarm for bits marked by 1 */

/* LED ioctl */
#define IO_LEDACTIVE_SET 0x7 /* set active led
                              * 0=off, 1=green, 2=red, 3=yellow */

/* GPIO direction ioctl's */
#define IO_READDIR    0x8  /* Read direction 0=input 1=output  (obsolete) */
#define IO_SETINPUT   0x9  /* Set direction for bits set, 0=unchanged 1=input,
                              returns mask with current inputs (obsolete) */
#define IO_SETOUTPUT  0xA  /* Set direction for bits set, 0=unchanged 1=output,
                              returns mask with current outputs (obsolete)*/

/* LED ioctl extended */
#define IO_LED_SETBIT 0xB
#define IO_LED_CLRBIT 0xC

/* SHUTDOWN ioctl */
#define IO_SHUTDOWN   0xD
#define IO_GET_PWR_BT 0xE

/* Bit toggling in driver settings */
/* bit set in low byte0 is CLK mask (0x00FF),
   bit set in byte1 is DATA mask    (0xFF00)
   msb, data_mask[7:0] , clk_mask[7:0]
 */
#define IO_CFG_WRITE_MODE 0xF
#define IO_CFG_WRITE_MODE_VALUE(msb, data_mask, clk_mask) \
	( (((msb)&1) << 16) | (((data_mask) &0xFF) << 8) | ((clk_mask) & 0xFF) )

/* The following 4 ioctl's take a pointer as argument and handles
 * 32 bit ports (port G) properly.
 * These replaces IO_READBITS,IO_SETINPUT AND IO_SETOUTPUT
 */
#define IO_READ_INBITS   0x10 /* *arg is result of reading the input pins */
#define IO_READ_OUTBITS  0x11 /* *arg is result of reading the output shadow */
#define IO_SETGET_INPUT  0x12 /* bits set in *arg is set to input, */
			      /* *arg updated with current input pins. */
#define IO_SETGET_OUTPUT 0x13 /* bits set in *arg is set to output, */
			      /* *arg updated with current output pins. */

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # UAPI Header export list
include include/uapi/asm-generic/Kbuild.asm

header-y += ../arch-v10/arch/
header-y += ../arch-v32/arch/
header-y += auxvec.h
header-y += bitsperlong.h
header-y += byteorder.h
header-y += elf.h
header-y += elf_v10.h
header-y += elf_v32.h
header-y += errno.h
header-y += ethernet.h
header-y += etraxgpio.h
header-y += fcntl.h
header-y += ioctl.h
header-y += ioctls.h
header-y += ipcbuf.h
header-y += mman.h
header-y += msgbuf.h
header-y += param.h
header-y += poll.h
header-y += posix_types.h
header-y += ptrace.h
header-y += ptrace_v10.h
header-y += ptrace_v32.h
header-y += resource.h
header-y += rs485.h
header-y += sembuf.h
header-y += setup.h
header-y += shmbuf.h
header-y += sigcontext.h
header-y += siginfo.h
header-y += signal.h
header-y += socket.h
header-y += sockios.h
header-y += stat.h
header-y += statfs.h
header-y += swab.h
header-y += sync_serial.h
header-y += termbits.h
header-y += termios.h
header-y += types.h
header-y += unistd.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef _ASMCRIS_PARAM_H
#define _ASMCRIS_PARAM_H

/* Currently we assume that HZ=100 is good for CRIS. */

#define EXEC_PAGESIZE	8192

#include <asm-generic/param.h>

#endif /* _ASMCRIS_PARAM_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #ifndef _CRIS_STAT_H
#define _CRIS_STAT_H

/* Keep this a verbatim copy of i386 version; tweak CRIS-specific bits in
   the kernel if necessary.  */

struct __old_kernel_stat {
	unsigned short st_dev;
	unsigned short st_ino;
	unsigned short st_mode;
	unsigned short st_nlink;
	unsigned short st_uid;
	unsigned short st_gid;
	unsigned short st_rdev;
	unsigned long  st_size;
	unsigned long  st_atime;
	unsigned long  st_mtime;
	unsigned long  st_ctime;
};

#define STAT_HAVE_NSEC 1

struct stat {
	unsigned long  st_dev;
	unsigned long  st_ino;
	unsigned short st_mode;
	unsigned short st_nlink;
	unsigned short st_uid;
	unsigned short st_gid;
	unsigned long  st_rdev;
	unsigned long  st_size;
	unsigned long  st_blksize;
	unsigned long  st_blocks;
	unsigned long  st_atime;
	unsigned long  st_atime_nsec;
	unsigned long  st_mtime;
	unsigned long  st_mtime_nsec;
	unsigned long  st_ctime;
	unsigned long  st_ctime_nsec;
	unsigned long  __unused4;
	unsigned long  __unused5;
};

/* This matches struct stat64 in glibc2.1, hence the absolutely
 * insane amounts of padding around dev_t's.
 */
struct stat64 {
	unsigned long long	st_dev;
	unsigned char	__pad0[4];

#define STAT64_HAS_BROKEN_ST_INO	1
	unsigned long	__st_ino;

	unsigned int	st_mode;
	unsigned int	st_nlink;

	unsigned long	st_uid;
	unsigned long	st_gid;

	unsigned long long	st_rdev;
	unsigned char	__pad3[4];

	long long	st_size;
	unsigned long	st_blksize;

	unsigned long	st_blocks;	/* Number 512-byte blocks allocated. */
	unsigned long	__pad4;		/* future possible st_blocks high bits */

	unsigned long	st_atime;
	unsigned long	st_atime_nsec;

	unsigned long	st_mtime;
	unsigned long	st_mtime_nsec;

	unsigned long	st_ctime;
	unsigned long	st_ctime_nsec;	/* will be high 32 bits of ctime someday */

	unsigned long long	st_ino;
};

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifdef __arch_v32
#include <asm/ptrace_v32.h>
#else
#include <asm/ptrace_v10.h>
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*  
 * ioctl defines for ethernet driver
 *
 * Copyright (c) 2001 Axis Communications AB
 * 
 * Author: Mikael Starvik 
 *
 */

#ifndef _CRIS_ETHERNET_H
#define _CRIS_ETHERNET_H
#define SET_ETH_SPEED_AUTO      SIOCDEVPRIVATE          /* Auto neg speed */
#define SET_ETH_SPEED_10        SIOCDEVPRIVATE+1        /* 10 Mbps */
#define SET_ETH_SPEED_100       SIOCDEVPRIVATE+2        /* 100 Mbps. */
#define SET_ETH_DUPLEX_AUTO     SIOCDEVPRIVATE+3        /* Auto neg duplex */
#define SET_ETH_DUPLEX_HALF     SIOCDEVPRIVATE+4        /* Full duplex */
#define SET_ETH_DUPLEX_FULL     SIOCDEVPRIVATE+5        /* Half duplex */
#define SET_ETH_ENABLE_LEDS     SIOCDEVPRIVATE+6        /* Enable net LEDs */
#define SET_ETH_DISABLE_LEDS    SIOCDEVPRIVATE+7        /* Disable net LEDs */
#define SET_ETH_AUTONEG         SIOCDEVPRIVATE+8
#endif /* _CRIS_ETHERNET_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*
 * ioctl defines for synchronous serial port driver
 *
 * Copyright (c) 2001-2003 Axis Communications AB
 *
 * Author: Mikael Starvik
 *
 */

#ifndef SYNC_SERIAL_H
#define SYNC_SERIAL_H

#include <linux/ioctl.h>

#define SSP_SPEED      _IOR('S', 0, unsigned int)
#define SSP_MODE       _IOR('S', 1, unsigned int)
#define SSP_FRAME_SYNC _IOR('S', 2, unsigned int)
#define SSP_IPOLARITY  _IOR('S', 3, unsigned int)
#define SSP_OPOLARITY  _IOR('S', 4, unsigned int)
#define SSP_SPI        _IOR('S', 5, unsigned int)
#define SSP_INBUFCHUNK _IOR('S', 6, unsigned int)
#define SSP_INPUT      _IOR('S', 7, unsigned int)

/* Values for SSP_SPEED */
#define SSP150        0
#define SSP300        1
#define SSP600        2
#define SSP1200       3
#define SSP2400       4
#define SSP4800       5
#define SSP9600       6
#define SSP19200      7
#define SSP28800      8
#define SSP57600      9
#define SSP115200    10
#define SSP230400    11
#define SSP460800    12
#define SSP921600    13
#define SSP3125000   14
#define CODEC        15
#define CODEC_f32768 16

#define FREQ_4MHz   0
#define FREQ_2MHz   1
#define FREQ_1MHz   2
#define FREQ_512kHz 3
#define FREQ_256kHz 4
#define FREQ_128kHz 5
#define FREQ_64kHz  6
#define FREQ_32kHz  7
/* FREQ_* with values where bit (value & 0x10) is set are */
/* used for CODEC_f32768 */
#define FREQ_4096kHz 16 /* CODEC_f32768 */

/* Used by application to set CODEC divider, word rate and frame rate */
#define CODEC_VAL(freq, clk_per_sync, sync_per_frame) \
	((CODEC + ((freq & 0x10) >> 4)) | (freq << 8) | \
		   (clk_per_sync << 16) | (sync_per_frame << 28))

/* Used by driver to extract speed */
#define GET_SPEED(x) (x & 0xff)
#define GET_FREQ(x) ((x & 0xff00) >> 8)
#define GET_WORD_RATE(x) (((x & 0x0fff0000) >> 16) - 1)
#define GET_FRAME_RATE(x) (((x & 0xf0000000) >> 28) - 1)

/* Values for SSP_MODE */
#define MASTER_OUTPUT 0
#define SLAVE_OUTPUT  1
#define MASTER_INPUT  2
#define SLAVE_INPUT   3
#define MASTER_BIDIR  4
#define SLAVE_BIDIR   5

/* Values for SSP_FRAME_SYNC */
#define NORMAL_SYNC                1
#define EARLY_SYNC                 2
#define SECOND_WORD_SYNC     0x40000
#define LATE_SYNC            0x80000

#define BIT_SYNC                   4
#define WORD_SYNC                  8
#define EXTENDED_SYNC           0x10

#define SYNC_OFF                0x20
#define SYNC_ON                 0x40
#define WORD_SIZE_8             0x80
#define WORD_SIZE_12           0x100
#define WORD_SIZE_16           0x200
#define WORD_SIZE_24           0x400
#define WORD_SIZE_32           0x800
#define BIT_ORDER_LSB         0x1000
#define BIT_ORDER_MSB         0x2000
#define FLOW_CONTROL_ENABLE   0x4000
#define FLOW_CONTROL_DISABLE  0x8000
#define CLOCK_GATED          0x10000
#define CLOCK_NOT_GATED      0x20000

/* Values for SSP_IPOLARITY and SSP_OPOLARITY */
#define CLOCK_NORMAL         1
#define CLOCK_INVERT         2
#define CLOCK_INEGEDGE       CLOCK_NORMAL
#define CLOCK_IPOSEDGE       CLOCK_INVERT
#define FRAME_NORMAL         4
#define FRAME_INVERT         8
#define STATUS_NORMAL      0x10
#define STATUS_INVERT      0x20

/* Values for SSP_SPI */
#define SPI_MASTER           0
#define SPI_SLAVE            1

/* Values for SSP_INBUFCHUNK */
/* plain integer with the size of DMA chunks */

/* To ensure that the timestamps are aligned with the data being read
 * the read length MUST be a multiple of the length of the DMA buffers.
 *
 * Use a multiple of SSP_INPUT_CHUNK_SIZE defined below.
 */
#define SSP_INPUT_CHUNK_SIZE  256

/* Request struct to pass through the ioctl interface to read
 * data with timestamps.
 */
struct ssp_request {
	char __user *buf;	/* Where to put the data. */
	size_t len;		/* Size of buf. MUST be a multiple of */
				/* SSP_INPUT_CHUNK_SIZE! */
	struct timespec ts;	/* The time the data was sampled. */
};

#endif
                                                                                                                                                                                                                                                                                           /* $Id: posix_types.h,v 1.1 2000/07/10 16:32:31 bjornw Exp $ */

/* We cheat a bit and use our C-coded bitops functions from asm/bitops.h */
/* I guess we should write these in assembler because they are used often. */

#ifndef __ARCH_CRIS_POSIX_TYPES_H
#define __ARCH_CRIS_POSIX_TYPES_H

/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.  Also, we cannot
 * assume GCC is being used.
 */

typedef unsigned short	__kernel_mode_t;
#define __kernel_mode_t __kernel_mode_t

typedef unsigned short  __kernel_ipc_pid_t;
#define __kernel_ipc_pid_t __kernel_ipc_pid_t

typedef unsigned short	__kernel_uid_t;
typedef unsigned short	__kernel_gid_t;
#define __kernel_uid_t __kernel_uid_t

typedef unsigned short	__kernel_old_dev_t;
#define __kernel_old_dev_t __kernel_old_dev_t

#include <asm-generic/posix_types.h>

#endif /* __ARCH_CRIS_POSIX_TYPES_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /* $Id: termbits.h,v 1.1 2000/07/10 16:32:31 bjornw Exp $ */

#ifndef __ARCH_ETRAX100_TERMBITS_H__
#define __ARCH_ETRAX100_TERMBITS_H__

#include <linux/posix_types.h>

typedef unsigned char	cc_t;
typedef unsigned int	speed_t;
typedef unsigned int	tcflag_t;

#define NCCS 19
struct termios {
	tcflag_t c_iflag;		/* input mode flags */
	tcflag_t c_oflag;		/* output mode flags */
	tcflag_t c_cflag;		/* control mode flags */
	tcflag_t c_lflag;		/* local mode flags */
	cc_t c_line;			/* line discipline */
	cc_t c_cc[NCCS];		/* control characters */
};

struct termios2 {
	tcflag_t c_iflag;		/* input mode flags */
	tcflag_t c_oflag;		/* output mode flags */
	tcflag_t c_cflag;		/* control mode flags */
	tcflag_t c_lflag;		/* local mode flags */
	cc_t c_line;			/* line discipline */
	cc_t c_cc[NCCS];		/* control characters */
	speed_t c_ispeed;		/* input speed */
	speed_t c_ospeed;		/* output speed */
};

struct ktermios {
	tcflag_t c_iflag;		/* input mode flags */
	tcflag_t c_oflag;		/* output mode flags */
	tcflag_t c_cflag;		/* control mode flags */
	tcflag_t c_lflag;		/* local mode flags */
	cc_t c_line;			/* line discipline */
	cc_t c_cc[NCCS];		/* control characters */
	speed_t c_ispeed;		/* input speed */
	speed_t c_ospeed;		/* output speed */
};

/* c_cc characters */
#define VINTR 0
#define VQUIT 1
#define VERASE 2
#define VKILL 3
#define VEOF 4
#define VTIME 5
#define VMIN 6
#define VSWTC 7
#define VSTART 8
#define VSTOP 9
#define VSUSP 10
#define VEOL 11
#define VREPRINT 12
#define VDISCARD 13
#define VWERASE 14
#define VLNEXT 15
#define VEOL2 16

/* c_iflag bits */
#define IGNBRK	0000001
#define BRKINT	0000002
#define IGNPAR	0000004
#define PARMRK	0000010
#define INPCK	0000020
#define ISTRIP	0000040
#define INLCR	0000100
#define IGNCR	0000200
#define ICRNL	0000400
#define IUCLC	0001000
#define IXON	0002000
#define IXANY	0004000
#define IXOFF	0010000
#define IMAXBEL	0020000
#define IUTF8	0040000

/* c_oflag bits */
#define OPOST	0000001
#define OLCUC	0000002
#define ONLCR	0000004
#define OCRNL	0000010
#define ONOCR	0000020
#define ONLRET	0000040
#define OFILL	0000100
#define OFDEL	0000200
#define NLDLY	0000400
#define   NL0	0000000
#define   NL1	0000400
#define CRDLY	0003000
#define   CR0	0000000
#define   CR1	0001000
#define   CR2	0002000
#define   CR3	0003000
#define TABDLY	0014000
#define   TAB0	0000000
#define   TAB1	0004000
#define   TAB2	0010000
#define   TAB3	0014000
#define   XTABS	0014000
#define BSDLY	0020000
#define   BS0	0000000
#define   BS1	0020000
#define VTDLY	0040000
#define   VT0	0000000
#define   VT1	0040000
#define FFDLY	0100000
#define   FF0	0000000
#define   FF1	0100000

/* c_cflag bit meaning */
/*
 *     3             2            1
 *    10 987 654 321 098 765 432 109 876 543 210
 *                             |           | ||| CBAUD
 *                                         obaud    
 *
 *                                       ||CSIZE
 *
 *                                     |CSTOP
 *                                    |CREAD
 *                                   |CPARENB
 *
 *                                 |CPARODD 
 *                                |HUPCL
 *                               |CLOCAL
 *                             |CBAUDEX
 *    10 987 654 321 098 765 432 109 876 543 210
 *        |           || ||   CIBAUD, IBSHIFT=16
 *                    ibaud
 *     |CMSPAR
 *    | CRTSCTS
 *       x x xxx xxx x     x xx Free bits
 */

#define CBAUD	0010017
#define  B0	0000000		/* hang up */
#define  B50	0000001
#define  B75	0000002
#define  B110	0000003
#define  B134	0000004
#define  B150	0000005
#define  B200	0000006
#define  B300	0000007
#define  B600	0000010
#define  B1200	0000011
#define  B1800	0000012
#define  B2400	0000013
#define  B4800	0000014
#define  B9600	0000015
#define  B19200	0000016
#define  B38400	0000017
#define EXTA B19200
#define EXTB B38400
#define CSIZE	0000060
#define   CS5	0000000
#define   CS6	0000020
#define   CS7	0000040
#define   CS8	0000060
#define CSTOPB	0000100
#define CREAD	0000200
#define PARENB	0000400
#define PARODD	0001000
#define HUPCL	0002000
#define CLOCAL	0004000
#define CBAUDEX 0010000
#define  BOTHER  0010000
#define  B57600  0010001
#define  B115200 0010002
#define  B230400 0010003
#define  B460800 0010004

/* Unsupported rates, but needed to avoid compile error. */
#define   B500000 0010005
#define   B576000 0010006
#define  B1000000 0010010
#define  B1152000 0010011
#define  B1500000 0010012
#define  B2000000 0010013
#define  B2500000 0010014
#define  B3000000 0010015
#define  B3500000 0010016
#define  B4000000 0010017

/* etrax supports these additional three baud rates */
#define  B921600   0010005
#define  B1843200  0010006
#define  B6250000  0010007
/* ETRAX FS supports this as well */
#define  B12500000 0010010
#define CIBAUD	  002003600000	/* input baud rate (used in v32) */
/* The values for CIBAUD bits are the same as the values for CBAUD and CBAUDEX
 * shifted left IBSHIFT bits.
 */
#define IBSHIFT   16
#define CMSPAR    010000000000 /* mark or space (stick) parity - PARODD=space*/
#define CRTSCTS	  020000000000		/* flow control */

/* c_lflag bits */
#define ISIG	0000001
#define ICANON	0000002
#define XCASE	0000004
#define ECHO	0000010
#define ECHOE	0000020
#define ECHOK	0000040
#define ECHONL	0000100
#define NOFLSH	0000200
#define TOSTOP	0000400
#define ECHOCTL	0001000
#define ECHOPRT	0002000
#define ECHOKE	0004000
#define FLUSHO	0010000
#define PENDIN	0040000
#define IEXTEN	0100000
#define EXTPROC	0200000

/* tcflow() and TCXONC use these */
#define	TCOOFF		0
#define	TCOON		1
#define	TCIOFF		2
#define	TCION		3

/* tcflush() and TCFLSH use these */
#define	TCIFLUSH	0
#define	TCOFLUSH	1
#define	TCIOFLUSH	2

/* tcsetattr uses these */
#define	TCSANOW		0
#define	TCSADRAIN	1
#define	TCSAFLUSH	2

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef _CRIS_SETUP_H
#define _CRIS_SETUP_H

#define COMMAND_LINE_SIZE	256

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef _CRIS_ARCH_PTRACE_H
#define _CRIS_ARCH_PTRACE_H

/* Register numbers in the ptrace system call interface */

#define PT_ORIG_R10  0
#define PT_R0        1
#define PT_R1        2
#define PT_R2        3
#define PT_R3        4
#define PT_R4        5
#define PT_R5        6
#define PT_R6        7
#define PT_R7        8
#define PT_R8        9
#define PT_R9        10
#define PT_R10       11
#define PT_R11       12
#define PT_R12       13
#define PT_R13       14
#define PT_ACR       15
#define PT_SRS       16
#define PT_MOF       17
#define PT_SPC       18
#define PT_CCS       19
#define PT_SRP       20
#define PT_ERP       21    /* This is actually the debugged process' PC */
#define PT_EXS       22
#define PT_EDA       23
#define PT_USP       24    /* special case - USP is not in the pt_regs */
#define PT_PPC       25    /* special case - pseudo PC */
#define PT_BP        26    /* Base number for BP registers. */
#define PT_BP_CTRL   26    /* BP control register. */
#define PT_MAX       40

/* Condition code bit numbers. */
#define C_CCS_BITNR 0
#define V_CCS_BITNR 1
#define Z_CCS_BITNR 2
#define N_CCS_BITNR 3
#define X_CCS_BITNR 4
#define I_CCS_BITNR 5
#define U_CCS_BITNR 6
#define P_CCS_BITNR 7
#define R_CCS_BITNR 8
#define S_CCS_BITNR 9
#define M_CCS_BITNR 30
#define Q_CCS_BITNR 31
#define CCS_SHIFT   10 /* Shift count for each level in CCS */

/* pt_regs not only specifices the format in the user-struct during
 * ptrace but is also the frame format used in the kernel prologue/epilogues
 * themselves
 */

struct pt_regs {
	unsigned long orig_r10;
	/* pushed by movem r13, [sp] in SAVE_ALL. */
	unsigned long r0;
	unsigned long r1;
	unsigned long r2;
	unsigned long r3;
	unsigned long r4;
	unsigned long r5;
	unsigned long r6;
	unsigned long r7;
	unsigned long r8;
	unsigned long r9;
	unsigned long r10;
	unsigned long r11;
	unsigned long r12;
	unsigned long r13;
	unsigned long acr;
	unsigned long srs;
	unsigned long mof;
	unsigned long spc;
	unsigned long ccs;
	unsigned long srp;
	unsigned long erp; /* This is actually the debugged process' PC */
	/* For debugging purposes; saved only when needed. */
	unsigned long exs;
	unsigned long eda;
};

/* switch_stack is the extra stuff pushed onto the stack in _resume (entry.S)
 * when doing a context-switch. it is used (apart from in resume) when a new
 * thread is made and we need to make _resume (which is starting it for the
 * first time) realise what is going on.
 *
 * Actually, the use is very close to the thread struct (TSS) in that both the
 * switch_stack and the TSS are used to keep thread stuff when switching in
 * _resume.
 */

struct switch_stack {
	unsigned long r0;
	unsigned long r1;
	unsigned long r2;
	unsigned long r3;
	unsigned long r4;
	unsigned long r5;
	unsigned long r6;
	unsigned long r7;
	unsigned long r8;
	unsigned long r9;
	unsigned long return_ip; /* ip that _resume will return to */
};

#ifdef __KERNEL__

#define arch_has_single_step() (1)
#define user_mode(regs) (((regs)->ccs & (1 << (U_CCS_BITNR + CCS_SHIFT))) != 0)
#define instruction_pointer(regs) ((regs)->erp)
#define profile_pc(regs) instruction_pointer(regs)

#endif  /*  __KERNEL__  */

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef _UAPI_ASM_CRIS_UNISTD_H_
#define _UAPI_ASM_CRIS_UNISTD_H_

/*
 * This file contains the system call numbers, and stub macros for libc.
 */

#define __NR_restart_syscall      0
#define __NR_exit		  1
#define __NR_fork		  2
#define __NR_read		  3
#define __NR_write		  4
#define __NR_open		  5
#define __NR_close		  6
#define __NR_waitpid		  7
#define __NR_creat		  8
#define __NR_link		  9
#define __NR_unlink		 10
#define __NR_execve		 11
#define __NR_chdir		 12
#define __NR_time		 13
#define __NR_mknod		 14
#define __NR_chmod		 15
#define __NR_lchown		 16
#define __NR_break		 17
#define __NR_oldstat		 18
#define __NR_lseek		 19
#define __NR_getpid		 20
#define __NR_mount		 21
#define __NR_umount		 22
#define __NR_setuid		 23
#define __NR_getuid		 24
#define __NR_stime		 25
#define __NR_ptrace		 26
#define __NR_alarm		 27
#define __NR_oldfstat		 28
#define __NR_pause		 29
#define __NR_utime		 30
#define __NR_stty		 31
#define __NR_gtty		 32
#define __NR_access		 33
#define __NR_nice		 34
#define __NR_ftime		 35
#define __NR_sync		 36
#define __NR_kill		 37
#define __NR_rename		 38
#define __NR_mkdir		 39
#define __NR_rmdir		 40
#define __NR_dup		 41
#define __NR_pipe		 42
#define __NR_times		 43
#define __NR_prof		 44
#define __NR_brk		 45
#define __NR_setgid		 46
#define __NR_getgid		 47
#define __NR_signal		 48
#define __NR_geteuid		 49
#define __NR_getegid		 50
#define __NR_acct		 51
#define __NR_umount2		 52
#define __NR_lock		 53
#define __NR_ioctl		 54
#define __NR_fcntl		 55
#define __NR_mpx		 56
#define __NR_setpgid		 57
#define __NR_ulimit		 58
#define __NR_oldolduname	 59
#define __NR_umask		 60
#define __NR_chroot		 61
#define __NR_ustat		 62
#define __NR_dup2		 63
#define __NR_getppid		 64
#define __NR_getpgrp		 65
#define __NR_setsid		 66
#define __NR_sigaction		 67
#define __NR_sgetmask		 68
#define __NR_ssetmask		 69
#define __NR_setreuid		 70
#define __NR_setregid		 71
#define __NR_sigsuspend		 72
#define __NR_sigpending		 73
#define __NR_sethostname	 74
#define __NR_setrlimit		 75
#define __NR_getrlimit		 76
#define __NR_getrusage		 77
#define __NR_gettimeofday	 78
#define __NR_settimeofday	 79
#define __NR_getgroups		 80
#define __NR_setgroups		 81
#define __NR_select		 82
#define __NR_symlink		 83
#define __NR_oldlstat		 84
#define __NR_readlink		 85
#define __NR_uselib		 86
#define __NR_swapon		 87
#define __NR_reboot		 88
#define __NR_readdir		 89
#define __NR_mmap		 90
#define __NR_munmap		 91
#define __NR_truncate		 92
#define __NR_ftruncate		 93
#define __NR_fchmod		 94
#define __NR_fchown		 95
#define __NR_getpriority	 96
#define __NR_setpriority	 97
#define __NR_profil		 98
#define __NR_statfs		 99
#define __NR_fstatfs		100
#define __NR_ioperm		101
#define __NR_socketcall		102
#define __NR_syslog		103
#define __NR_setitimer		104
#define __NR_getitimer		105
#define __NR_stat		106
#define __NR_lstat		107
#define __NR_fstat		108
#define __NR_olduname		109
#define __NR_iopl		110
#define __NR_vhangup		111
#define __NR_idle		112
#define __NR_vm86		113
#define __NR_wait4		114
#define __NR_swapoff		115
#define __NR_sysinfo		116
#define __NR_ipc		117
#define __NR_fsync		118
#define __NR_sigreturn		119
#define __NR_clone		120
#define __NR_setdomainname	121
#define __NR_uname		122
#define __NR_modify_ldt		123
#define __NR_adjtimex		124
#define __NR_mprotect		125
#define __NR_sigprocmask	126
#define __NR_create_module	127
#define __NR_init_module	128
#define __NR_delete_module	129
#define __NR_get_kernel_syms	130
#define __NR_quotactl		131
#define __NR_getpgid		132
#define __NR_fchdir		133
#define __NR_bdflush		134
#define __NR_sysfs		135
#define __NR_personality	136
#define __NR_afs_syscall	137 /* Syscall for Andrew File System */
#define __NR_setfsuid		138
#define __NR_setfsgid		139
#define __NR__llseek		140
#define __NR_getdents		141
#define __NR__newselect		142
#define __NR_flock		143
#define __NR_msync		144
#define __NR_readv		145
#define __NR_writev		146
#define __NR_getsid		147
#define __NR_fdatasync		148
#define __NR__sysctl		149
#define __NR_mlock		150
#define __NR_munlock		151
#define __NR_mlockall		152
#define __NR_munlockall		153
#define __NR_sched_setparam		154
#define __NR_sched_getparam		155
#define __NR_sched_setscheduler		156
#define __NR_sched_getscheduler		157
#define __NR_sched_yield		158
#define __NR_sched_get_priority_max	159
#define __NR_sched_get_priority_min	160
#define __NR_sched_rr_get_interval	161
#define __NR_nanosleep		162
#define __NR_mremap		163
#define __NR_setresuid		164
#define __NR_getresuid		165

#define __NR_query_module	167
#define __NR_poll		168
#define __NR_nfsservctl		169
#define __NR_setresgid		170
#define __NR_getresgid		171
#define __NR_prctl              172
#define __NR_rt_sigreturn	173
#define __NR_rt_sigaction	174
#define __NR_rt_sigprocmask	175
#define __NR_rt_sigpending	176
#define __NR_rt_sigtimedwait	177
#define __NR_rt_sigqueueinfo	178
#define __NR_rt_sigsuspend	179
#define __NR_pread64		180
#define __NR_pwrite64		181
#define __NR_chown		182
#define __NR_getcwd		183
#define __NR_capget		184
#define __NR_capset		185
#define __NR_sigaltstack	186
#define __NR_sendfile		187
#define __NR_getpmsg		188	/* some people actually want streams */
#define __NR_putpmsg		189	/* some people actually want streams */
#define __NR_vfork		190
#define __NR_ugetrlimit		191	/* SuS compliant getrlimit */
#define __NR_mmap2		192
#define __NR_truncate64		193
#define __NR_ftruncate64	194
#define __NR_stat64		195
#define __NR_lstat64		196
#define __NR_fstat64		197
#define __NR_lchown32		198
#define __NR_getuid32		199
#define __NR_getgid32		200
#define __NR_geteuid32		201
#define __NR_getegid32		202
#define __NR_setreuid32		203
#define __NR_setregid32		204
#define __NR_getgroups32	205
#define __NR_setgroups32	206
#define __NR_fchown32		207
#define __NR_setresuid32	208
#define __NR_getresuid32	209
#define __NR_setresgid32	210
#define __NR_getresgid32	211
#define __NR_chown32		212
#define __NR_setuid32		213
#define __NR_setgid32		214
#define __NR_setfsuid32		215
#define __NR_setfsgid32		216
#define __NR_pivot_root		217
#define __NR_mincore		218
#define __NR_madvise		219
#define __NR_getdents64		220
#define __NR_fcntl64		221
/* 223 is unused */
#define __NR_gettid             224
#define __NR_readahead          225
#define __NR_setxattr		226
#define __NR_lsetxattr		227
#define __NR_fsetxattr		228
#define __NR_getxattr		229
#define __NR_lgetxattr		230
#define __NR_fgetxattr		231
#define __NR_listxattr		232
#define __NR_llistxattr		233
#define __NR_flistxattr		234
#define __NR_removexattr	235
#define __NR_lremovexattr	236
#define __NR_fremovexattr	237
#define __NR_tkill		238
#define __NR_sendfile64		239
#define __NR_futex		240
#define __NR_sched_setaffinity	241
#define __NR_sched_getaffinity	242
#define __NR_set_thread_area	243
#define __NR_get_thread_area	244
#define __NR_io_setup		245
#define __NR_io_destroy		246
#define __NR_io_getevents	247
#define __NR_io_submit		248
#define __NR_io_cancel		249
#define __NR_fadvise64		250
/* 251 is available for reuse (was briefly sys_set_zone_reclaim) */
#define __NR_exit_group		252
#define __NR_lookup_dcookie	253
#define __NR_epoll_create	254
#define __NR_epoll_ctl		255
#define __NR_epoll_wait		256
#define __NR_remap_file_pages	257
#define __NR_set_tid_address	258
#define __NR_timer_create	259
#define __NR_timer_settime	(__NR_timer_create+1)
#define __NR_timer_gettime	(__NR_timer_create+2)
#define __NR_timer_getoverrun	(__NR_timer_create+3)
#define __NR_timer_delete	(__NR_timer_create+4)
#define __NR_clock_settime	(__NR_timer_create+5)
#define __NR_clock_gettime	(__NR_timer_create+6)
#define __NR_clock_getres	(__NR_timer_create+7)
#define __NR_clock_nanosleep	(__NR_timer_create+8)
#define __NR_statfs64		268
#define __NR_fstatfs64		269
#define __NR_tgkill		270
#define __NR_utimes		271
#define __NR_fadvise64_64	272
#define __NR_vserver		273
#define __NR_mbind		274
#define __NR_get_mempolicy	275
#define __NR_set_mempolicy	276
#define __NR_mq_open		277
#define __NR_mq_unlink		(__NR_mq_open+1)
#define __NR_mq_timedsend	(__NR_mq_open+2)
#define __NR_mq_timedreceive	(__NR_mq_open+3)
#define __NR_mq_notify		(__NR_mq_open+4)
#define __NR_mq_getsetattr	(__NR_mq_open+5)
#define __NR_kexec_load		283
#define __NR_waitid		284
/* #define __NR_sys_setaltroot	285 */
#define __NR_add_key		286
#define __NR_request_key	287
#define __NR_keyctl		288
#define __NR_ioprio_set		289
#define __NR_ioprio_get		290
#define __NR_inotify_init	291
#define __NR_inotify_add_watch	292
#define __NR_inotify_rm_watch	293
#define __NR_migrate_pages	294
#define __NR_openat		295
#define __NR_mkdirat		296
#define __NR_mknodat		297
#define __NR_fchownat		298
#define __NR_futimesat		299
#define __NR_fstatat64		300
#define __NR_unlinkat		301
#define __NR_renameat		302
#define __NR_linkat		303
#define __NR_symlinkat		304
#define __NR_readlinkat		305
#define __NR_fchmodat		306
#define __NR_faccessat		307
#define __NR_pselect6		308
#define __NR_ppoll		309
#define __NR_unshare		310
#define __NR_set_robust_list	311
#define __NR_get_robust_list	312
#define __NR_splice		313
#define __NR_sync_file_range	314
#define __NR_tee		315
#define __NR_vmsplice		316
#define __NR_move_pages		317
#define __NR_getcpu		318
#define __NR_epoll_pwait	319
#define __NR_utimensat		320
#define __NR_signalfd		321
#define __NR_timerfd_create	322
#define __NR_eventfd		323
#define __NR_fallocate		324
#define __NR_timerfd_settime	325
#define __NR_timerfd_gettime	326
#define __NR_signalfd4		327
#define __NR_eventfd2		328
#define __NR_epoll_create1	329
#define __NR_dup3		330
#define __NR_pipe2		331
#define __NR_inotify_init1	332
#define __NR_preadv		333
#define __NR_pwritev		334
#define __NR_setns		335
#define __NR_name_to_handle_at	336
#define __NR_open_by_handle_at	337
#define __NR_rt_tgsigqueueinfo 338
#define __NR_perf_event_open	339
#define __NR_recvmmsg		340
#define __NR_accept4		341
#define __NR_fanotify_init	342
#define __NR_fanotify_mark	343
#define __NR_prlimit64		344
#define __NR_clock_adjtime	345
#define __NR_syncfs		346
#define __NR_sendmmsg		347
#define __NR_process_vm_readv	348
#define __NR_process_vm_writev	349
#define __NR_kcmp		350
#define __NR_finit_module	351
#define __NR_sched_setattr	352
#define __NR_sched_getattr	353
#define __NR_renameat2		354
#define __NR_seccomp		355
#define __NR_getrandom		356
#define __NR_memfd_create	357
#define __NR_bpf		358
#define __NR_execveat		359

#endif /* _UAPI_ASM_CRIS_UNISTD_H_ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef _ASM_CRIS_SVINTO_H
#define _ASM_CRIS_SVINTO_H

#include <arch/sv_addr_ag.h>

extern unsigned int genconfig_shadow; /* defined and set in head.S */

/* dma stuff */

enum {                          /* Available in:  */
	d_eol      = (1 << 0),  /* flags          */
	d_eop      = (1 << 1),  /* flags & status */
	d_wait     = (1 << 2),  /* flags          */
	d_int      = (1 << 3),  /* flags          */
	d_txerr    = (1 << 4),  /* flags          */
	d_stop     = (1 << 4),  /*         status */
	d_ecp      = (1 << 4),  /* flags & status */
	d_pri      = (1 << 5),  /* flags & status */
	d_alignerr = (1 << 6),  /*         status */
	d_crcerr   = (1 << 7)   /*         status */
};

/* Do remember that DMA does not go through the MMU and needs
 * a real physical address, not an address virtually mapped or
 * paged. Therefore the buf/next ptrs below are unsigned long instead
 * of void * to give a warning if you try to put a pointer directly
 * to them instead of going through virt_to_phys/phys_to_virt.
 */

typedef struct etrax_dma_descr {
	unsigned short sw_len;                /* 0-1 */
	unsigned short ctrl;                  /* 2-3 */
	unsigned long  next;                  /* 4-7 */
	unsigned long  buf;                   /* 8-11 */
	unsigned short hw_len;                /* 12-13 */
	unsigned char  status;                /* 14 */
	unsigned char  fifo_len;              /* 15 */
} etrax_dma_descr;


/* Use this for constant numbers only */
#define RESET_DMA_NUM( n ) \
  *R_DMA_CH##n##_CMD = IO_STATE( R_DMA_CH0_CMD, cmd, reset )

/* Use this for constant numbers or symbols, 
 * having two macros makes it possible to use constant expressions. 
 */
#define RESET_DMA( n ) RESET_DMA_NUM( n )


/* Use this for constant numbers only */
#define WAIT_DMA_NUM( n ) \
  while( (*R_DMA_CH##n##_CMD & IO_MASK( R_DMA_CH0_CMD, cmd )) != \
         IO_STATE( R_DMA_CH0_CMD, cmd, hold ) )

/* Use this for constant numbers or symbols 
 * having two macros makes it possible to use constant expressions. 
 */
#define WAIT_DMA( n ) WAIT_DMA_NUM( n )

extern void prepare_rx_descriptor(struct etrax_dma_descr *desc);
extern void flush_etrax_cache(void);

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # UAPI Header export list
header-y += sv_addr.agh
header-y += sv_addr_ag.h
header-y += svinto.h
header-y += user.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*!**************************************************************************
*!                                                            
*! MACROS:
*!   IO_MASK(reg,field)
*!   IO_STATE(reg,field,state)
*!   IO_EXTRACT(reg,field,val)
*!   IO_STATE_VALUE(reg,field,state)
*!   IO_BITNR(reg,field)
*!   IO_WIDTH(reg,field)
*!   IO_FIELD(reg,field,val)
*!   IO_RD(reg)
*!   All moderegister addresses and fields of these.
*!
*!**************************************************************************/

#ifndef __sv_addr_ag_h__
#define __sv_addr_ag_h__


#define __test_sv_addr__ 0

/*------------------------------------------------------------
!* General macros to manipulate moderegisters.
!*-----------------------------------------------------------*/

/* IO_MASK returns a mask for a specified bitfield in a register.
   Note that this macro doesn't work when field width is 32 bits. */
#define IO_MASK(reg, field) IO_MASK_ (reg##_, field##_)
#define IO_MASK_(reg_, field_) \
    ( ( ( 1 << reg_##_##field_##_WIDTH ) - 1 ) << reg_##_##field_##_BITNR )

/* IO_STATE returns a constant corresponding to a one of the symbolic
   states that the bitfield can have. (Shifted to correct position)  */
#define IO_STATE(reg, field, state) IO_STATE_ (reg##_, field##_, _##state)
#define IO_STATE_(reg_, field_, _state) \
    ( reg_##_##field_##_state << reg_##_##field_##_BITNR )

/* IO_EXTRACT returns the masked and shifted value corresponding to the
   bitfield can have. */
#define IO_EXTRACT(reg, field, val) IO_EXTRACT_ (reg##_, field##_, val)
#define IO_EXTRACT_(reg_, field_, val) ( (( ( ( 1 << reg_##_##field_##_WIDTH ) \
     - 1 ) << reg_##_##field_##_BITNR ) & (val)) >> reg_##_##field_##_BITNR )

/* IO_STATE_VALUE returns a constant corresponding to a one of the symbolic
   states that the bitfield can have. (Not shifted)  */
#define IO_STATE_VALUE(reg, field, state) \
    IO_STATE_VALUE_ (reg##_, field##_, _##state)
#define IO_STATE_VALUE_(reg_, field_, _state) ( reg_##_##field_##_state )

/* IO_FIELD shifts the val parameter to be aligned with the bitfield
   specified. */
#define IO_FIELD(reg, field, val) IO_FIELD_ (reg##_, field##_, val)
#define IO_FIELD_(reg_, field_, val) ((val) << reg_##_##field_##_BITNR)

/* IO_BITNR returns the starting bitnumber of a bitfield. Bit 0 is
   LSB and the returned bitnumber is LSB of the field. */
#define IO_BITNR(reg, field) IO_BITNR_ (reg##_, field##_)
#define IO_BITNR_(reg_, field_) (reg_##_##field_##_BITNR)

/* IO_WIDTH returns the width, in bits, of a bitfield. */
#define IO_WIDTH(reg, field) IO_WIDTH_ (reg##_, field##_)
#define IO_WIDTH_(reg_, field_) (reg_##_##field_##_WIDTH)

/*--- Obsolete. Kept for backward compatibility. ---*/
/* Reads (or writes) a byte/uword/udword from the specified mode
   register. */
#define IO_RD(reg) (*(volatile u32*)(reg))
#define IO_RD_B(reg) (*(volatile u8*)(reg))
#define IO_RD_W(reg) (*(volatile u16*)(reg))
#define IO_RD_D(reg) (*(volatile u32*)(reg))

/*------------------------------------------------------------
!* Start addresses of the different memory areas.
!*-----------------------------------------------------------*/

#define MEM_CSE0_START (0x00000000)
#define MEM_CSE0_SIZE (0x04000000)
#define MEM_CSE1_START (0x04000000)
#define MEM_CSE1_SIZE (0x04000000)
#define MEM_CSR0_START (0x08000000)
#define MEM_CSR1_START (0x0c000000)
#define MEM_CSP0_START (0x10000000)
#define MEM_CSP1_START (0x14000000)
#define MEM_CSP2_START (0x18000000)
#define MEM_CSP3_START (0x1c000000)
#define MEM_CSP4_START (0x20000000)
#define MEM_CSP5_START (0x24000000)
#define MEM_CSP6_START (0x28000000)
#define MEM_CSP7_START (0x2c000000)
#define MEM_DRAM_START (0x40000000)

#define MEM_NON_CACHEABLE (0x80000000)

/*------------------------------------------------------------
!* Type casts used in mode register macros, making pointer
!* dereferencing possible. Empty in assembler.
!*-----------------------------------------------------------*/

#ifndef __ASSEMBLER__
# define  IO_TYPECAST_UDWORD  (volatile u32*)
# define  IO_TYPECAST_RO_UDWORD  (const volatile u32*)
# define  IO_TYPECAST_UWORD  (volatile u16*)
# define  IO_TYPECAST_RO_UWORD  (const volatile u16*)
# define  IO_TYPECAST_BYTE  (volatile u8*)
# define  IO_TYPECAST_RO_BYTE  (const volatile u8*)
#else
# define  IO_TYPECAST_UDWORD
# define  IO_TYPECAST_RO_UDWORD
# define  IO_TYPECAST_UWORD
# define  IO_TYPECAST_RO_UWORD
# define  IO_TYPECAST_BYTE
# define  IO_TYPECAST_RO_BYTE
#endif

/*------------------------------------------------------------*/

#include <arch/sv_addr.agh>

#if __test_sv_addr__
/* IO_MASK( R_BUS_CONFIG , CE ) */
IO_MASK( R_WAITSTATES , SRAM_WS )
IO_MASK( R_TEST , W32 )

IO_STATE( R_BUS_CONFIG, CE, DISABLE )
IO_STATE( R_BUS_CONFIG, CE, ENABLE )

IO_STATE( R_DRAM_TIMING, REF, IVAL2 )

IO_MASK( R_DRAM_TIMING, REF )

IO_MASK( R_EXT_DMA_0_STAT, TFR_COUNT ) >> IO_BITNR( R_EXT_DMA_0_STAT, TFR_COUNT )

IO_RD(R_EXT_DMA_0_STAT) & IO_MASK( R_EXT_DMA_0_STAT, S ) 
   == IO_STATE( R_EXT_DMA_0_STAT, S, STARTED )
#endif


#endif  /* ifndef __sv_addr_ag_h__ */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef __ASM_CRIS_ARCH_USER_H
#define __ASM_CRIS_ARCH_USER_H

/* User mode registers, used for core dumps. In order to keep ELF_NGREG
   sensible we let all registers be 32 bits. The csr registers are included
   for future use. */
struct user_regs_struct {
        unsigned long r0;       /* General registers. */
        unsigned long r1;
        unsigned long r2;
        unsigned long r3;
        unsigned long r4;
        unsigned long r5;
        unsigned long r6;
        unsigned long r7;
        unsigned long r8;
        unsigned long r9;
        unsigned long r10;
        unsigned long r11;
        unsigned long r12;
        unsigned long r13;
        unsigned long sp;       /* Stack pointer. */
        unsigned long pc;       /* Program counter. */
        unsigned long p0;       /* Constant zero (only 8 bits). */
        unsigned long vr;       /* Version register (only 8 bits). */
        unsigned long p2;       /* Reserved. */
        unsigned long p3;       /* Reserved. */
        unsigned long p4;       /* Constant zero (only 16 bits). */
        unsigned long ccr;      /* Condition code register (only 16 bits). */
        unsigned long p6;       /* Reserved. */
        unsigned long mof;      /* Multiply overflow register. */
        unsigned long p8;       /* Constant zero. */
        unsigned long ibr;      /* Not accessible. */
        unsigned long irp;      /* Not accessible. */
        unsigned long srp;      /* Subroutine return pointer. */
        unsigned long bar;      /* Not accessible. */
        unsigned long dccr;     /* Dword condition code register. */
        unsigned long brp;      /* Not accessible. */
        unsigned long usp;      /* User-mode stack pointer. Same as sp when 
                                   in user mode. */
        unsigned long csrinstr; /* Internal status registers. */
        unsigned long csraddr;
        unsigned long csrdata;
};

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #
# Makefile for the linux cris-specific parts of the memory manager.
#

obj-y	 := init.o fault.o tlb.o ioremap.o

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             BUILTIN_DTB := $(patsubst "%",%,$(CONFIG_BUILTIN_DTB)).dtb.o
ifneq ($(CONFIG_BUILTIN_DTB),"")
obj-$(CONFIG_OF) += $(BUILTIN_DTB)
endif

clean-files := *.dtb.S
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #
# arch/cris/boot/Makefile
#

objcopyflags-$(CONFIG_ETRAX_ARCH_V10) += -R .note -R .comment
objcopyflags-$(CONFIG_ETRAX_ARCH_V32) += --remove-section=.bss --remove-section=.note.gnu.build-id

OBJCOPYFLAGS = -O binary $(objcopyflags-y)


subdir- := compressed rescue
targets := Image

$(obj)/Image: vmlinux FORCE
	$(call if_changed,objcopy)
	@echo '  Kernel: $@ is ready'

$(obj)/compressed/vmlinux: $(obj)/Image FORCE
	$(Q)$(MAKE) $(build)=$(obj)/compressed $@
	$(Q)$(MAKE) $(build)=$(obj)/rescue $(obj)/rescue/rescue.bin

$(obj)/zImage:  $(obj)/compressed/vmlinux
	@cp $< $@
	@echo '  Kernel: $@ is ready'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #
# Makefile for rescue (bootstrap) code
#

# CC = gcc-cris -mlinux -march=v32 $(LINUXINCLUDE)
# ccflags-$(CONFIG_ETRAX_ARCH_V32) += -I$(srctree)/include/asm/arch/mach/ \
# 				    -I$(srctree)/include/asm/arch
# asflags-y += -I $(srctree)/include/asm/arch/mach/ -I $(srctree)/include/asm/arch
# LD = gcc-cris -mlinux -march=v32 -nostdlib

asflags-y += $(LINUXINCLUDE)
ccflags-y += -O2 $(LINUXINCLUDE)

ifdef CONFIG_ETRAX_AXISFLASHMAP

arch-$(CONFIG_ETRAX_ARCH_V10) = v10
arch-$(CONFIG_ETRAX_ARCH_V32) = v32

ldflags-y += -T $(srctree)/$(src)/rescue_$(arch-y).lds
OBJCOPYFLAGS = -O binary --remove-section=.bss
obj-$(CONFIG_ETRAX_ARCH_V32) = $(obj)/head_v32.o
obj-$(CONFIG_ETRAX_ARCH_V10) = $(obj)/head_v10.o
OBJECTS := $(obj-y)

targets := rescue.o rescue.bin

$(obj)/rescue.o: $(OBJECTS) FORCE
	$(call if_changed,ld)

$(obj)/rescue.bin: $(obj)/rescue.o FORCE
	$(call if_changed,objcopy)
	cp -p $(obj)/rescue.bin $(objtree)

else
$(obj)/rescue.bin:

endif

$(obj)/testrescue.bin: $(obj)/testrescue.o
	$(OBJCOPY) $(OBJCOPYFLAGS) $(obj)/testrescue.o tr.bin
# Pad it to 784 bytes
	dd if=/dev/zero of=tmp2423 bs=1 count=784
	cat tr.bin tmp2423 >testrescue_tmp.bin
	dd if=testrescue_tmp.bin of=$(obj)/testrescue.bin bs=1 count=784
	rm tr.bin tmp2423 testrescue_tmp.bin


$(obj)/kimagerescue.bin: $(obj)/kimagerescue.o
	$(OBJCOPY) $(OBJCOPYFLAGS) $(obj)/kimagerescue.o ktr.bin
# Pad it to 784 bytes, that's what the rescue loader expects
	dd if=/dev/zero of=tmp2423 bs=1 count=784
	cat ktr.bin tmp2423 >kimagerescue_tmp.bin
	dd if=kimagerescue_tmp.bin of=$(obj)/kimagerescue.bin bs=1 count=784
	rm ktr.bin tmp2423 kimagerescue_tmp.bin

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #
# arch/cris/boot/compressed/Makefile
#

asflags-y += $(LINUXINCLUDE)
ccflags-y += -O2 $(LINUXINCLUDE)

# asflags-$(CONFIG_ETRAX_ARCH_V32) += -I$(srctree)/include/asm/mach \
# 				    -I$(srctree)/include/asm/arch
# ccflags-$(CONFIG_ETRAX_ARCH_V32) += -O2 -I$(srctree)/include/asm/mach
# 					-I$(srctree)/include/asm/arch

arch-$(CONFIG_ETRAX_ARCH_V10) = v10
arch-$(CONFIG_ETRAX_ARCH_V32) = v32

ldflags-y += -T $(srctree)/$(src)/decompress_$(arch-y).lds

OBJECTS-$(CONFIG_ETRAX_ARCH_V32) = $(obj)/head_v32.o
OBJECTS-$(CONFIG_ETRAX_ARCH_V10) = $(obj)/head_v10.o
OBJECTS= $(OBJECTS-y) $(obj)/misc.o
OBJCOPYFLAGS = -O binary --remove-section=.bss

quiet_cmd_image = BUILD   $@
cmd_image = cat $(obj)/decompress.bin $(obj)/piggy.gz > $@

targets := vmlinux piggy.gz decompress.o decompress.bin

$(obj)/decompress.o: $(OBJECTS) FORCE
	$(call if_changed,ld)

$(obj)/decompress.bin: $(obj)/decompress.o FORCE
	$(call if_changed,objcopy)

$(obj)/vmlinux: $(obj)/piggy.gz $(obj)/decompress.bin FORCE
	$(call if_changed,image)

$(obj)/piggy.gz: $(obj)/../Image FORCE
	$(call if_changed,gzip)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #
# Makefile for Meta-specific library files.
#

lib-y += usercopy.o
lib-y += copy_page.o
lib-y += clear_page.o
lib-y += memcpy.o
lib-y += memmove.o
lib-y += memset.o
lib-y += delay.o
lib-y += div64.o
lib-y += muldi3.o
lib-y += ashrdi3.o
lib-y += ashldi3.o
lib-y += lshrdi3.o
lib-y += divsi3.o
lib-y += modsi3.o
lib-y += cmpdi2.o
lib-y += ucmpdi2.o
lib-y += ip_fast_csum.o
lib-y += checksum.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #
# Makefile for the Linux/Meta kernel.
#

extra-y	+= head.o
extra-y	+= vmlinux.lds

obj-y	+= cachepart.o
obj-y	+= clock.o
obj-y	+= core_reg.o
obj-y	+= devtree.o
obj-y	+= dma.o
obj-y	+= irq.o
obj-y	+= kick.o
obj-y	+= machines.o
obj-y	+= process.o
obj-y	+= ptrace.o
obj-y	+= setup.o
obj-y	+= signal.o
obj-y	+= stacktrace.o
obj-y	+= sys_metag.o
obj-y	+= tbiunexp.o
obj-y	+= time.o
obj-y	+= topology.o
obj-y	+= traps.o
obj-y	+= user_gateway.o

obj-$(CONFIG_PERF_EVENTS)		+= perf/

obj-$(CONFIG_METAG_COREMEM)		+= coremem.o
obj-$(CONFIG_METAG_DA)			+= da.o
obj-$(CONFIG_DYNAMIC_FTRACE)		+= ftrace.o
obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace_stub.o
obj-$(CONFIG_MODULES)			+= metag_ksyms.o
obj-$(CONFIG_MODULES)			+= module.o
obj-$(CONFIG_PERF_EVENTS)		+= perf_callchain.o
obj-$(CONFIG_SMP)			+= smp.o
obj-$(CONFIG_METAG_SUSPEND_MEM)		+= suspend.o
obj-$(CONFIG_METAG_USER_TCM)		+= tcm.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Makefile for performance event core

obj-y += perf_event.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   