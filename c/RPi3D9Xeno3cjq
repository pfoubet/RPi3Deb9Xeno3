/*
!* This file was automatically generated by /n/asic/bin/reg_macro_gen
!* from the file `/n/asic/projects/etrax_ng/doc/work/etrax_ng_regs.rd'.
!* Editing within this file is thus not recommended,
!* make the changes in `/n/asic/projects/etrax_ng/doc/work/etrax_ng_regs.rd' instead.
!*/


/*
!* Bus interface configuration registers
!*/

#define R_WAITSTATES (IO_TYPECAST_UDWORD 0xb0000000)
#define R_WAITSTATES__pcs4_7_zw__BITNR 30
#define R_WAITSTATES__pcs4_7_zw__WIDTH 2
#define R_WAITSTATES__pcs4_7_ew__BITNR 28
#define R_WAITSTATES__pcs4_7_ew__WIDTH 2
#define R_WAITSTATES__pcs4_7_lw__BITNR 24
#define R_WAITSTATES__pcs4_7_lw__WIDTH 4
#define R_WAITSTATES__pcs0_3_zw__BITNR 22
#define R_WAITSTATES__pcs0_3_zw__WIDTH 2
#define R_WAITSTATES__pcs0_3_ew__BITNR 20
#define R_WAITSTATES__pcs0_3_ew__WIDTH 2
#define R_WAITSTATES__pcs0_3_lw__BITNR 16
#define R_WAITSTATES__pcs0_3_lw__WIDTH 4
#define R_WAITSTATES__sram_zw__BITNR 14
#define R_WAITSTATES__sram_zw__WIDTH 2
#define R_WAITSTATES__sram_ew__BITNR 12
#define R_WAITSTATES__sram_ew__WIDTH 2
#define R_WAITSTATES__sram_lw__BITNR 8
#define R_WAITSTATES__sram_lw__WIDTH 4
#define R_WAITSTATES__flash_zw__BITNR 6
#define R_WAITSTATES__flash_zw__WIDTH 2
#define R_WAITSTATES__flash_ew__BITNR 4
#define R_WAITSTATES__flash_ew__WIDTH 2
#define R_WAITSTATES__flash_lw__BITNR 0
#define R_WAITSTATES__flash_lw__WIDTH 4

#define R_BUS_CONFIG (IO_TYPECAST_UDWORD 0xb0000004)
#define R_BUS_CONFIG__sram_type__BITNR 9
#define R_BUS_CONFIG__sram_type__WIDTH 1
#define R_BUS_CONFIG__sram_type__cwe 1
#define R_BUS_CONFIG__sram_type__bwe 0
#define R_BUS_CONFIG__dma_burst__BITNR 8
#define R_BUS_CONFIG__dma_burst__WIDTH 1
#define R_BUS_CONFIG__dma_burst__burst16 1
#define R_BUS_CONFIG__dma_burst__burst32 0
#define R_BUS_CONFIG__pcs4_7_wr__BITNR 7
#define R_BUS_CONFIG__pcs4_7_wr__WIDTH 1
#define R_BUS_CONFIG__pcs4_7_wr__ext 1
#define R_BUS_CONFIG__pcs4_7_wr__norm 0
#define R_BUS_CONFIG__pcs0_3_wr__BITNR 6
#define R_BUS_CONFIG__pcs0_3_wr__WIDTH 1
#define R_BUS_CONFIG__pcs0_3_wr__ext 1
#define R_BUS_CONFIG__pcs0_3_wr__norm 0
#define R_BUS_CONFIG__sram_wr__BITNR 5
#define R_BUS_CONFIG__sram_wr__WIDTH 1
#define R_BUS_CONFIG__sram_wr__ext 1
#define R_BUS_CONFIG__sram_wr__norm 0
#define R_BUS_CONFIG__flash_wr__BITNR 4
#define R_BUS_CONFIG__flash_wr__WIDTH 1
#define R_BUS_CONFIG__flash_wr__ext 1
#define R_BUS_CONFIG__flash_wr__norm 0
#define R_BUS_CONFIG__pcs4_7_bw__BITNR 3
#define R_BUS_CONFIG__pcs4_7_bw__WIDTH 1
#define R_BUS_CONFIG__pcs4_7_bw__bw32 1
#define R_BUS_CONFIG__pcs4_7_bw__bw16 0
#define R_BUS_CONFIG__pcs0_3_bw__BITNR 2
#define R_BUS_CONFIG__pcs0_3_bw__WIDTH 1
#define R_BUS_CONFIG__pcs0_3_bw__bw32 1
#define R_BUS_CONFIG__pcs0_3_bw__bw16 0
#define R_BUS_CONFIG__sram_bw__BITNR 1
#define R_BUS_CONFIG__sram_bw__WIDTH 1
#define R_BUS_CONFIG__sram_bw__bw32 1
#define R_BUS_CONFIG__sram_bw__bw16 0
#define R_BUS_CONFIG__flash_bw__BITNR 0
#define R_BUS_CONFIG__flash_bw__WIDTH 1
#define R_BUS_CONFIG__flash_bw__bw32 1
#define R_BUS_CONFIG__flash_bw__bw16 0

#define R_BUS_STATUS (IO_TYPECAST_RO_UDWORD 0xb0000004)
#define R_BUS_STATUS__pll_lock_tm__BITNR 5
#define R_BUS_STATUS__pll_lock_tm__WIDTH 1
#define R_BUS_STATUS__pll_lock_tm__expired 0
#define R_BUS_STATUS__pll_lock_tm__counting 1
#define R_BUS_STATUS__both_faults__BITNR 4
#define R_BUS_STATUS__both_faults__WIDTH 1
#define R_BUS_STATUS__both_faults__no 0
#define R_BUS_STATUS__both_faults__yes 1
#define R_BUS_STATUS__bsen___BITNR 3
#define R_BUS_STATUS__bsen___WIDTH 1
#define R_BUS_STATUS__bsen___enable 0
#define R_BUS_STATUS__bsen___disable 1
#define R_BUS_STATUS__boot__BITNR 1
#define R_BUS_STATUS__boot__WIDTH 2
#define R_BUS_STATUS__boot__uncached 0
#define R_BUS_STATUS__boot__serial 1
#define R_BUS_STATUS__boot__network 2
#define R_BUS_STATUS__boot__parallel 3
#define R_BUS_STATUS__flashw__BITNR 0
#define R_BUS_STATUS__flashw__WIDTH 1
#define R_BUS_STATUS__flashw__bw32 1
#define R_BUS_STATUS__flashw__bw16 0

#define R_DRAM_TIMING (IO_TYPECAST_UDWORD 0xb0000008)
#define R_DRAM_TIMING__sdram__BITNR 31
#define R_DRAM_TIMING__sdram__WIDTH 1
#define R_DRAM_TIMING__sdram__enable 1
#define R_DRAM_TIMING__sdram__disable 0
#define R_DRAM_TIMING__ref__BITNR 14
#define R_DRAM_TIMING__ref__WIDTH 2
#define R_DRAM_TIMING__ref__e52us 0
#define R_DRAM_TIMING__ref__e13us 1
#define R_DRAM_TIMING__ref__e8700ns 2
#define R_DRAM_TIMING__ref__disable 3
#define R_DRAM_TIMING__rp__BITNR 12
#define R_DRAM_TIMING__rp__WIDTH 2
#define R_DRAM_TIMING__rs__BITNR 10
#define R_DRAM_TIMING__rs__WIDTH 2
#define R_DRAM_TIMING__rh__BITNR 8
#define R_DRAM_TIMING__rh__WIDTH 2
#define R_DRAM_TIMING__w__BITNR 7
#define R_DRAM_TIMING__w__WIDTH 1
#define R_DRAM_TIMING__w__norm 0
#define R_DRAM_TIMING__w__ext 1
#define R_DRAM_TIMING__c__BITNR 6
#define R_DRAM_TIMING__c__WIDTH 1
#define R_DRAM_TIMING__c__norm 0
#define R_DRAM_TIMING__c__ext 1
#define R_DRAM_TIMING__cz__BITNR 4
#define R_DRAM_TIMING__cz__WIDTH 2
#define R_DRAM_TIMING__cp__BITNR 2
#define R_DRAM_TIMING__cp__WIDTH 2
#define R_DRAM_TIMING__cw__BITNR 0
#define R_DRAM_TIMING__cw__WIDTH 2

#define R_SDRAM_TIMING (IO_TYPECAST_UDWORD 0xb0000008)
#define R_SDRAM_TIMING__sdram__BITNR 31
#define R_SDRAM_TIMING__sdram__WIDTH 1
#define R_SDRAM_TIMING__sdram__enable 1
#define R_SDRAM_TIMING__sdram__disable 0
#define R_SDRAM_TIMING__mrs_data__BITNR 16
#define R_SDRAM_TIMING__mrs_data__WIDTH 15
#define R_SDRAM_TIMING__ref__BITNR 14
#define R_SDRAM_TIMING__ref__WIDTH 2
#define R_SDRAM_TIMING__ref__e52us 0
#define R_SDRAM_TIMING__ref__e13us 1
#define R_SDRAM_TIMING__ref__e6500ns 2
#define R_SDRAM_TIMING__ref__disable 3
#define R_SDRAM_TIMING__ddr__BITNR 13
#define R_SDRAM_TIMING__ddr__WIDTH 1
#define R_SDRAM_TIMING__ddr__on 1
#define R_SDRAM_TIMING__ddr__off 0
#define R_SDRAM_TIMING__clk100__BITNR 12
#define R_SDRAM_TIMING__clk100__WIDTH 1
#define R_SDRAM_TIMING__clk100__on 1
#define R_SDRAM_TIMING__clk100__off 0
#define R_SDRAM_TIMING__ps__BITNR 11
#define R_SDRAM_TIMING__ps__WIDTH 1
#define R_SDRAM_TIMING__ps__on 1
#define R_SDRAM_TIMING__ps__off 0
#define R_SDRAM_TIMING__cmd__BITNR 9
#define R_SDRAM_TIMING__cmd__WIDTH 2
#define R_SDRAM_TIMING__cmd__pre 3
#define R_SDRAM_TIMING__cmd__ref 2
#define R_SDRAM_TIMING__cmd__mrs 1
#define R_SDRAM_TIMING__cmd__nop 0
#define R_SDRAM_TIMING__pde__BITNR 8
#define R_SDRAM_TIMING__pde__WIDTH 1
#define R_SDRAM_TIMING__rc__BITNR 6
#define R_SDRAM_TIMING__rc__WIDTH 2
#define R_SDRAM_TIMING__rp__BITNR 4
#define R_SDRAM_TIMING__rp__WIDTH 2
#define R_SDRAM_TIMING__rcd__BITNR 2
#define R_SDRAM_TIMING__rcd__WIDTH 2
#define R_SDRAM_TIMING__cl__BITNR 0
#define R_SDRAM_TIMING__cl__WIDTH 2

#define R_DRAM_CONFIG (IO_TYPECAST_UDWORD 0xb000000c)
#define R_DRAM_CONFIG__wmm1__BITNR 31
#define R_DRAM_CONFIG__wmm1__WIDTH 1
#define R_DRAM_CONFIG__wmm1__wmm 1
#define R_DRAM_CONFIG__wmm1__norm 0
#define R_DRAM_CONFIG__wmm0__BITNR 30
#define R_DRAM_CONFIG__wmm0__WIDTH 1
#define R_DRAM_CONFIG__wmm0__wmm 1
#define R_DRAM_CONFIG__wmm0__norm 0
#define R_DRAM_CONFIG__sh1__BITNR 27
#define R_DRAM_CONFIG__sh1__WIDTH 3
#define R_DRAM_CONFIG__sh0__BITNR 24
#define R_DRAM_CONFIG__sh0__WIDTH 3
#define R_DRAM_CONFIG__w__BITNR 23
#define R_DRAM_CONFIG__w__WIDTH 1
#define R_DRAM_CONFIG__w__bw16 0
#define R_DRAM_CONFIG__w__bw32 1
#define R_DRAM_CONFIG__c__BITNR 22
#define R_DRAM_CONFIG__c__WIDTH 1
#define R_DRAM_CONFIG__c__byte 0
#define R_DRAM_CONFIG__c__bank 1
#define R_DRAM_CONFIG__e__BITNR 21
#define R_DRAM_CONFIG__e__WIDTH 1
#define R_DRAM_CONFIG__e__fast 0
#define R_DRAM_CONFIG__e__edo 1
#define R_DRAM_CONFIG__group_sel__BITNR 16
#define R_DRAM_CONFIG__group_sel__WIDTH 5
#define R_DRAM_CONFIG__group_sel__grp0 0
#define R_DRAM_CONFIG__group_sel__grp1 1
#define R_DRAM_CONFIG__group_sel__bit9 9
#define R_DRAM_CONFIG__group_sel__bit10 10
#define R_DRAM_CONFIG__group_sel__bit11 11
#define R_DRAM_CONFIG__group_sel__bit12 12
#define R_DRAM_CONFIG__group_sel__bit13 13
#define R_DRAM_CONFIG__group_sel__bit14 14
#define R_DRAM_CONFIG__group_sel__bit15 15
#define R_DRAM_CONFIG__group_sel__bit16 16
#define R_DRAM_CONFIG__group_sel__bit17 17
#define R_DRAM_CONFIG__group_sel__bit18 18
#define R_DRAM_CONFIG__group_sel__bit19 19
#define R_DRAM_CONFIG__group_sel__bit20 20
#define R_DRAM_CONFIG__group_sel__bit21 21
#define R_DRAM_CONFIG__group_sel__bit22 22
#define R_DRAM_CONFIG__group_sel__bit23 23
#define R_DRAM_CONFIG__group_sel__bit24 24
#define R_DRAM_CONFIG__group_sel__bit25 25
#define R_DRAM_CONFIG__group_sel__bit26 26
#define R_DRAM_CONFIG__group_sel__bit27 27
#define R_DRAM_CONFIG__group_sel__bit28 28
#define R_DRAM_CONFIG__group_sel__bit29 29
#define R_DRAM_CONFIG__ca1__BITNR 13
#define R_DRAM_CONFIG__ca1__WIDTH 3
#define R_DRAM_CONFIG__bank23sel__BITNR 8
#define R_DRAM_CONFIG__bank23sel__WIDTH 5
#define R_DRAM_CONFIG__bank23sel__bank0 0
#define R_DRAM_CONFIG__bank23sel__bank1 1
#define R_DRAM_CONFIG__bank23sel__bit9 9
#define R_DRAM_CONFIG__bank23sel__bit10 10
#define R_DRAM_CONFIG__bank23sel__bit11 11
#define R_DRAM_CONFIG__bank23sel__bit12 12
#define R_DRAM_CONFIG__bank23sel__bit13 13
#define R_DRAM_CONFIG__bank23sel__bit14 14
#define R_DRAM_CONFIG__bank23sel__bit15 15
#define R_DRAM_CONFIG__bank23sel__bit16 16
#define R_DRAM_CONFIG__bank23sel__bit17 17
#define R_DRAM_CONFIG__bank23sel__bit18 18
#define R_DRAM_CONFIG__bank23sel__bit19 19
#define R_DRAM_CONFIG__bank23sel__bit20 20
#define R_DRAM_CONFIG__bank23sel__bit21 21
#define R_DRAM_CONFIG__bank23sel__bit22 22
#define R_DRAM_CONFIG__bank23sel__bit23 23
#define R_DRAM_CONFIG__bank23sel__bit24 24
#define R_DRAM_CONFIG__bank23sel__bit25 25
#define R_DRAM_CONFIG__bank23sel__bit26 26
#define R_DRAM_CONFIG__bank23sel__bit27 27
#define R_DRAM_CONFIG__bank23sel__bit28 28
#define R_DRAM_CONFIG__bank23sel__bit29 29
#define R_DRAM_CONFIG__ca0__BITNR 5
#define R_DRAM_CONFIG__ca0__WIDTH 3
#define R_DRAM_CONFIG__bank01sel__BITNR 0
#define R_DRAM_CONFIG__bank01sel__WIDTH 5
#define R_DRAM_CONFIG__bank01sel__bank0 0
#define R_DRAM_CONFIG__bank01sel__bank1 1
#define R_DRAM_CONFIG__bank01sel__bit9 9
#define R_DRAM_CONFIG__bank01sel__bit10 10
#define R_DRAM_CONFIG__bank01sel__bit11 11
#define R_DRAM_CONFIG__bank01sel__bit12 12
#define R_DRAM_CONFIG__bank01sel__bit13 13
#define R_DRAM_CONFIG__bank01sel__bit14 14
#define R_DRAM_CONFIG__bank01sel__bit15 15
#define R_DRAM_CONFIG__bank01sel__bit16 16
#define R_DRAM_CONFIG__bank01sel__bit17 17
#define R_DRAM_CONFIG__bank01sel__bit18 18
#define R_DRAM_CONFIG__bank01sel__bit19 19
#define R_DRAM_CONFIG__bank01sel__bit20 20
#define R_DRAM_CONFIG__bank01sel__bit21 21
#define R_DRAM_CONFIG__bank01sel__bit22 22
#define R_DRAM_CONFIG__bank01sel__bit23 23
#define R_DRAM_CONFIG__bank01sel__bit24 24
#define R_DRAM_CONFIG__bank01sel__bit25 25
#define R_DRAM_CONFIG__bank01sel__bit26 26
#define R_DRAM_CONFIG__bank01sel__bit27 27
#define R_DRAM_CONFIG__bank01sel__bit28 28
#define R_DRAM_CONFIG__bank01sel__bit29 29

#define R_SDRAM_CONFIG (IO_TYPECAST_UDWORD 0xb000000c)
#define R_SDRAM_CONFIG__wmm1__BITNR 31
#define R_SDRAM_CONFIG__wmm1__WIDTH 1
#define R_SDRAM_CONFIG__wmm1__wmm 1
#define R_SDRAM_CONFIG__wmm1__norm 0
#define R_SDRAM_CONFIG__wmm0__BITNR 30
#define R_SDRAM_CONFIG__wmm0__WIDTH 1
#define R_SDRAM_CONFIG__wmm0__wmm 1
#define R_SDRAM_CONFIG__wmm0__norm 0
#define R_SDRAM_CONFIG__sh1__BITNR 27
#define R_SDRAM_CONFIG__sh1__WIDTH 3
#define R_SDRAM_CONFIG__sh0__BITNR 24
#define R_SDRAM_CONFIG__sh0__WIDTH 3
#define R_SDRAM_CONFIG__w__BITNR 23
#define R_SDRAM_CONFIG__w__WIDTH 1
#define R_SDRAM_CONFIG__w__bw16 0
#define R_SDRAM_CONFIG__w__bw32 1
#define R_SDRAM_CONFIG__type1__BITNR 22
#define R_SDRAM_CONFIG__type1__WIDTH 1
#define R_SDRAM_CONFIG__type1__bank2 0
#define R_SDRAM_CONFIG__type1__bank4 1
#define R_SDRAM_CONFIG__type0__BITNR 21
#define R_SDRAM_CONFIG__type0__WIDTH 1
#define R_SDRAM_CONFIG__type0__bank2 0
#define R_SDRAM_CONFIG__type0__bank4 1
#define R_SDRAM_CONFIG__group_sel__BITNR 16
#define R_SDRAM_CONFIG__group_sel__WIDTH 5
#define R_SDRAM_CONFIG__group_sel__grp0 0
#define R_SDRAM_CONFIG__group_sel__grp1 1
#define R_SDRAM_CONFIG__group_sel__bit9 9
#define R_SDRAM_CONFIG__group_sel__bit10 10
#define R_SDRAM_CONFIG__group_sel__bit11 11
#define R_SDRAM_CONFIG__group_sel__bit12 12
#define R_SDRAM_CONFIG__group_sel__bit13 13
#define R_SDRAM_CONFIG__group_sel__bit14 14
#define R_SDRAM_CONFIG__group_sel__bit15 15
#define R_SDRAM_CONFIG__group_sel__bit16 16
#define R_SDRAM_CONFIG__group_sel__bit17 17
#define R_SDRAM_CONFIG__group_sel__bit18 18
#define R_SDRAM_CONFIG__group_sel__bit19 19
#define R_SDRAM_CONFIG__group_sel__bit20 20
#define R_SDRAM_CONFIG__group_sel__bit21 21
#define R_SDRAM_CONFIG__group_sel__bit22 22
#define R_SDRAM_CONFIG__group_sel__bit23 23
#define R_SDRAM_CONFIG__group_sel__bit24 24
#define R_SDRAM_CONFIG__group_sel__bit25 25
#define R_SDRAM_CONFIG__group_sel__bit26 26
#define R_SDRAM_CONFIG__group_sel__bit27 27
#define R_SDRAM_CONFIG__group_sel__bit28 28
#define R_SDRAM_CONFIG__group_sel__bit29 29
#define R_SDRAM_CONFIG__ca1__BITNR 13
#define R_SDRAM_CONFIG__ca1__WIDTH 3
#define R_SDRAM_CONFIG__bank_sel1__BITNR 8
#define R_SDRAM_CONFIG__bank_sel1__WIDTH 5
#define R_SDRAM_CONFIG__bank_sel1__bit9 9
#define R_SDRAM_CONFIG__bank_sel1__bit10 10
#define R_SDRAM_CONFIG__bank_sel1__bit11 11
#define R_SDRAM_CONFIG__bank_sel1__bit12 12
#define R_SDRAM_CONFIG__bank_sel1__bit13 13
#define R_SDRAM_CONFIG__bank_sel1__bit14 14
#define R_SDRAM_CONFIG__bank_sel1__bit15 15
#define R_SDRAM_CONFIG__bank_sel1__bit16 16
#define R_SDRAM_CONFIG__bank_sel1__bit17 17
#define R_SDRAM_CONFIG__bank_sel1__bit18 18
#define R_SDRAM_CONFIG__bank_sel1__bit19 19
#define R_SDRAM_CONFIG__bank_sel1__bit20 20
#define R_SDRAM_CONFIG__bank_sel1__bit21 21
#define R_SDRAM_CONFIG__bank_sel1__bit22 22
#define R_SDRAM_CONFIG__bank_sel1__bit23 23
#define R_SDRAM_CONFIG__bank_sel1__bit24 24
#define R_SDRAM_CONFIG__bank_sel1__bit25 25
#define R_SDRAM_CONFIG__bank_sel1__bit26 26
#define R_SDRAM_CONFIG__bank_sel1__bit27 27
#define R_SDRAM_CONFIG__bank_sel1__bit28 28
#define R_SDRAM_CONFIG__bank_sel1__bit29 29
#define R_SDRAM_CONFIG__ca0__BITNR 5
#define R_SDRAM_CONFIG__ca0__WIDTH 3
#define R_SDRAM_CONFIG__bank_sel0__BITNR 0
#define R_SDRAM_CONFIG__bank_sel0__WIDTH 5
#define R_SDRAM_CONFIG__bank_sel0__bit9 9
#define R_SDRAM_CONFIG__bank_sel0__bit10 10
#define R_SDRAM_CONFIG__bank_sel0__bit11 11
#define R_SDRAM_CONFIG__bank_sel0__bit12 12
#define R_SDRAM_CONFIG__bank_sel0__bit13 13
#define R_SDRAM_CONFIG__bank_sel0__bit14 14
#define R_SDRAM_CONFIG__bank_sel0__bit15 15
#define R_SDRAM_CONFIG__bank_sel0__bit16 16
#define R_SDRAM_CONFIG__bank_sel0__bit17 17
#define R_SDRAM_CONFIG__bank_sel0__bit18 18
#define R_SDRAM_CONFIG__bank_sel0__bit19 19
#define R_SDRAM_CONFIG__bank_sel0__bit20 20
#define R_SDRAM_CONFIG__bank_sel0__bit21 21
#define R_SDRAM_CONFIG__bank_sel0__bit22 22
#define R_SDRAM_CONFIG__bank_sel0__bit23 23
#define R_SDRAM_CONFIG__bank_sel0__bit24 24
#define R_SDRAM_CONFIG__bank_sel0__bit25 25
#define R_SDRAM_CONFIG__bank_sel0__bit26 26
#define R_SDRAM_CONFIG__bank_sel0__bit27 27
#define R_SDRAM_CONFIG__bank_sel0__bit28 28
#define R_SDRAM_CONFIG__bank_sel0__bit29 29

/*
!* External DMA registers
!*/

#define R_EXT_DMA_0_CMD (IO_TYPECAST_UDWORD 0xb0000010)
#define R_EXT_DMA_0_CMD__cnt__BITNR 23
#define R_EXT_DMA_0_CMD__cnt__WIDTH 1
#define R_EXT_DMA_0_CMD__cnt__enable 1
#define R_EXT_DMA_0_CMD__cnt__disable 0
#define R_EXT_DMA_0_CMD__rqpol__BITNR 22
#define R_EXT_DMA_0_CMD__rqpol__WIDTH 1
#define R_EXT_DMA_0_CMD__rqpol__ahigh 0
#define R_EXT_DMA_0_CMD__rqpol__alow 1
#define R_EXT_DMA_0_CMD__apol__BITNR 21
#define R_EXT_DMA_0_CMD__apol__WIDTH 1
#define R_EXT_DMA_0_CMD__apol__ahigh 0
#define R_EXT_DMA_0_CMD__apol__alow 1
#define R_EXT_DMA_0_CMD__rq_ack__BITNR 20
#define R_EXT_DMA_0_CMD__rq_ack__WIDTH 1
#define R_EXT_DMA_0_CMD__rq_ack__burst 0
#define R_EXT_DMA_0_CMD__rq_ack__handsh 1
#define R_EXT_DMA_0_CMD__wid__BITNR 18
#define R_EXT_DMA_0_CMD__wid__WIDTH 2
#define R_EXT_DMA_0_CMD__wid__byte 0
#define R_EXT_DMA_0_CMD__wid__word 1
#define R_EXT_DMA_0_CMD__wid__dword 2
#define R_EXT_DMA_0_CMD__dir__BITNR 17
#define R_EXT_DMA_0_CMD__dir__WIDTH 1
#define R_EXT_DMA_0_CMD__dir__input 0
#define R_EXT_DMA_0_CMD__dir__output 1
#define R_EXT_DMA_0_CMD__run__BITNR 16
#define R_EXT_DMA_0_CMD__run__WIDTH 1
#define R_EXT_DMA_0_CMD__run__start 1
#define R_EXT_DMA_0_CMD__run__stop 0
#define R_EXT_DMA_0_CMD__trf_count__BITNR 0
#define R_EXT_DMA_0_CMD__trf_count__WIDTH 16

#define R_EXT_DMA_0_STAT (IO_TYPECAST_RO_UDWORD 0xb0000010)
#define R_EXT_DMA_0_STAT__run__BITNR 16
#define R_EXT_DMA_0_STAT__run__WIDTH 1
#define R_EXT_DMA_0_STAT__run__start 1
#define R_EXT_DMA_0_STAT__run__stop 0
#define R_EXT_DMA_0_STAT__trf_count__BITNR 0
#define R_EXT_DMA_0_STAT__trf_count__WIDTH 16

#define R_EXT_DMA_0_ADDR (IO_TYPECAST_UDWORD 0xb0000014)
#define R_EXT_DMA_0_ADDR__ext0_addr__BITNR 2
#define R_EXT_DMA_0_ADDR__ext0_addr__WIDTH 28

#define R_EXT_DMA_1_CMD (IO_TYPECAST_UDWORD 0xb0000018)
#define R_EXT_DMA_1_CMD__cnt__BITNR 23
#define R_EXT_DMA_1_CMD__cnt__WIDTH 1
#define R_EXT_DMA_1_CMD__cnt__enable 1
#define R_EXT_DMA_1_CMD__cnt__disable 0
#define R_EXT_DMA_1_CMD__rqpol__BITNR 22
#define R_EXT_DMA_1_CMD__rqpol__WIDTH 1
#define R_EXT_DMA_1_CMD__rqpol__ahigh 0
#define R_EXT_DMA_1_CMD__rqpol__alow 1
#define R_EXT_DMA_1_CMD__apol__BITNR 21
#define R_EXT_DMA_1_CMD__apol__WIDTH 1
#define R_EXT_DMA_1_CMD__apol__ahigh 0
#define R_EXT_DMA_1_CMD__apol__alow 1
#define R_EXT_DMA_1_CMD__rq_ack__BITNR 20
#define R_EXT_DMA_1_CMD__rq_ack__WIDTH 1
#define R_EXT_DMA_1_CMD__rq_ack__burst 0
#define R_EXT_DMA_1_CMD__rq_ack__handsh 1
#define R_EXT_DMA_1_CMD__wid__BITNR 18
#define R_EXT_DMA_1_CMD__wid__WIDTH 2
#define R_EXT_DMA_1_CMD__wid__byte 0
#define R_EXT_DMA_1_CMD__wid__word 1
#define R_EXT_DMA_1_CMD__wid__dword 2
#define R_EXT_DMA_1_CMD__dir__BITNR 17
#define R_EXT_DMA_1_CMD__dir__WIDTH 1
#define R_EXT_DMA_1_CMD__dir__input 0
#define R_EXT_DMA_1_CMD__dir__output 1
#define R_EXT_DMA_1_CMD__run__BITNR 16
#define R_EXT_DMA_1_CMD__run__WIDTH 1
#define R_EXT_DMA_1_CMD__run__start 1
#define R_EXT_DMA_1_CMD__run__stop 0
#define R_EXT_DMA_1_CMD__trf_count__BITNR 0
#define R_EXT_DMA_1_CMD__trf_count__WIDTH 16

#define R_EXT_DMA_1_STAT (IO_TYPECAST_RO_UDWORD 0xb0000018)
#define R_EXT_DMA_1_STAT__run__BITNR 16
#define R_EXT_DMA_1_STAT__run__WIDTH 1
#define R_EXT_DMA_1_STAT__run__start 1
#define R_EXT_DMA_1_STAT__run__stop 0
#define R_EXT_DMA_1_STAT__trf_count__BITNR 0
#define R_EXT_DMA_1_STAT__trf_count__WIDTH 16

#define R_EXT_DMA_1_ADDR (IO_TYPECAST_UDWORD 0xb000001c)
#define R_EXT_DMA_1_ADDR__ext0_addr__BITNR 2
#define R_EXT_DMA_1_ADDR__ext0_addr__WIDTH 28

/*
!* Timer registers
!*/

#define R_TIMER_CTRL (IO_TYPECAST_UDWORD 0xb0000020)
#define R_TIMER_CTRL__timerdiv1__BITNR 24
#define R_TIMER_CTRL__timerdiv1__WIDTH 8
#define R_TIMER_CTRL__timerdiv0__BITNR 16
#define R_TIMER_CTRL__timerdiv0__WIDTH 8
#define R_TIMER_CTRL__presc_timer1__BITNR 15
#define R_TIMER_CTRL__presc_timer1__WIDTH 1
#define R_TIMER_CTRL__presc_timer1__normal 0
#define R_TIMER_CTRL__presc_timer1__prescale 1
#define R_TIMER_CTRL__i1__BITNR 14
#define R_TIMER_CTRL__i1__WIDTH 1
#define R_TIMER_CTRL__i1__clr 1
#define R_TIMER_CTRL__i1__nop 0
#define R_TIMER_CTRL__tm1__BITNR 12
#define R_TIMER_CTRL__tm1__WIDTH 2
#define R_TIMER_CTRL__tm1__stop_ld 0
#define R_TIMER_CTRL__tm1__freeze 1
#define R_TIMER_CTRL__tm1__run 2
#define R_TIMER_CTRL__tm1__reserved 3
#define R_TIMER_CTRL__clksel1__BITNR 8
#define R_TIMER_CTRL__clksel1__WIDTH 4
#define R_TIMER_CTRL__clksel1__c300Hz 0
#define R_TIMER_CTRL__clksel1__c600Hz 1
#define R_TIMER_CTRL__clksel1__c1200Hz 2
#define R_TIMER_CTRL__clksel1__c2400Hz 3
#define R_TIMER_CTRL__clksel1__c4800Hz 4
#define R_TIMER_CTRL__clksel1__c9600Hz 5
#define R_TIMER_CTRL__clksel1__c19k2Hz 6
#define R_TIMER_CTRL__clksel1__c38k4Hz 7
#define R_TIMER_CTRL__clksel1__c57k6Hz 8
#define R_TIMER_CTRL__clksel1__c115k2Hz 9
#define R_TIMER_CTRL__clksel1__c230k4Hz 10
#define R_TIMER_CTRL__clksel1__c460k8Hz 11
#define R_TIMER_CTRL__clksel1__c921k6Hz 12
#define R_TIMER_CTRL__clksel1__c1843k2Hz 13
#define R_TIMER_CTRL__clksel1__c6250kHz 14
#define R_TIMER_CTRL__clksel1__cascade0 15
#define R_TIMER_CTRL__presc_ext__BITNR 7
#define R_TIMER_CTRL__presc_ext__WIDTH 1
#define R_TIMER_CTRL__presc_ext__prescale 0
#define R_TIMER_CTRL__presc_ext__external 1
#define R_TIMER_CTRL__i0__BITNR 6
#define R_TIMER_CTRL__i0__WIDTH 1
#define R_TIMER_CTRL__i0__clr 1
#define R_TIMER_CTRL__i0__nop 0
#define R_TIMER_CTRL__tm0__BITNR 4
#define R_TIMER_CTRL__tm0__WIDTH 2
#define R_TIMER_CTRL__tm0__stop_ld 0
#define R_TIMER_CTRL__tm0__freeze 1
#define R_TIMER_CTRL__tm0__run 2
#define R_TIMER_CTRL__tm0__reserved 3
#define R_TIMER_CTRL__clksel0__BITNR 0
#define R_TIMER_CTRL__clksel0__WIDTH 4
#define R_TIMER_CTRL__clksel0__c300Hz 0
#define R_TIMER_CTRL__clksel0__c600Hz 1
#define R_TIMER_CTRL__clksel0__c1200Hz 2
#define R_TIMER_CTRL__clksel0__c2400Hz 3
#define R_TIMER_CTRL__clksel0__c4800Hz 4
#define R_TIMER_CTRL__clksel0__c9600Hz 5
#define R_TIMER_CTRL__clksel0__c19k2Hz 6
#define R_TIMER_CTRL__clksel0__c38k4Hz 7
#define R_TIMER_CTRL__clksel0__c57k6Hz 8
#define R_TIMER_CTRL__clksel0__c115k2Hz 9
#define R_TIMER_CTRL__clksel0__c230k4Hz 10
#define R_TIMER_CTRL__clksel0__c460k8Hz 11
#define R_TIMER_CTRL__clksel0__c921k6Hz 12
#define R_TIMER_CTRL__clksel0__c1843k2Hz 13
#define R_TIMER_CTRL__clksel0__c6250kHz 14
#define R_TIMER_CTRL__clksel0__flexible 15

#define R_TIMER_DATA (IO_TYPECAST_RO_UDWORD 0xb0000020)
#define R_TIMER_DATA__timer1__BITNR 24
#define R_TIMER_DATA__timer1__WIDTH 8
#define R_TIMER_DATA__timer0__BITNR 16
#define R_TIMER_DATA__timer0__WIDTH 8
#define R_TIMER_DATA__clkdiv_high__BITNR 8
#define R_TIMER_DATA__clkdiv_high__WIDTH 8
#define R_TIMER_DATA__clkdiv_low__BITNR 0
#define R_TIMER_DATA__clkdiv_low__WIDTH 8

#define R_TIMER01_DATA (IO_TYPECAST_RO_UWORD 0xb0000022)
#define R_TIMER01_DATA__count__BITNR 0
#define R_TIMER01_DATA__count__WIDTH 16

#define R_TIMER0_DATA (IO_TYPECAST_RO_BYTE 0xb0000022)
#define R_TIMER0_DATA__count__BITNR 0
#define R_TIMER0_DATA__count__WIDTH 8

#define R_TIMER1_DATA (IO_TYPECAST_RO_BYTE 0xb0000023)
#define R_TIMER1_DATA__count__BITNR 0
#define R_TIMER1_DATA__count__WIDTH 8

#define R_WATCHDOG (IO_TYPECAST_UDWORD 0xb0000024)
#define R_WATCHDOG__key__BITNR 1
#define R_WATCHDOG__key__WIDTH 3
#define R_WATCHDOG__enable__BITNR 0
#define R_WATCHDOG__enable__WIDTH 1
#define R_WATCHDOG__enable__stop 0
#define R_WATCHDOG__enable__start 1

#define R_CLOCK_PRESCALE (IO_TYPECAST_UDWORD 0xb00000f0)
#define R_CLOCK_PRESCALE__ser_presc__BITNR 16
#define R_CLOCK_PRESCALE__ser_presc__WIDTH 16
#define R_CLOCK_PRESCALE__tim_presc__BITNR 0
#define R_CLOCK_PRESCALE__tim_presc__WIDTH 16

#define R_SERIAL_PRESCALE (IO_TYPECAST_UWORD 0xb00000f2)
#define R_SERIAL_PRESCALE__ser_presc__BITNR 0
#define R_SERIAL_PRESCALE__ser_presc__WIDTH 16

#define R_TIMER_PRESCALE (IO_TYPECAST_UWORD 0xb00000f0)
#define R_TIMER_PRESCALE__tim_presc__BITNR 0
#define R_TIMER_PRESCALE__tim_presc__WIDTH 16

#define R_PRESCALE_STATUS (IO_TYPECAST_RO_UDWORD 0xb00000f0)
#define R_PRESCALE_STATUS__ser_status__BITNR 16
#define R_PRESCALE_STATUS__ser_status__WIDTH 16
#define R_PRESCALE_STATUS__tim_status__BITNR 0
#define R_PRESCALE_STATUS__tim_status__WIDTH 16

#define R_SER_PRESC_STATUS (IO_TYPECAST_RO_UWORD 0xb00000f2)
#define R_SER_PRESC_STATUS__ser_status__BITNR 0
#define R_SER_PRESC_STATUS__ser_status__WIDTH 16

#define R_TIM_PRESC_STATUS (IO_TYPECAST_RO_UWORD 0xb00000f0)
#define R_TIM_PRESC_STATUS__tim_status__BITNR 0
#define R_TIM_PRESC_STATUS__tim_status__WIDTH 16

#define R_SYNC_SERIAL_PRESCALE (IO_TYPECAST_UDWORD 0xb00000f4)
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u3__BITNR 23
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u3__WIDTH 1
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u3__codec 0
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u3__baudrate 1
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u3__BITNR 22
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u3__WIDTH 1
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u3__external 0
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u3__internal 1
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u1__BITNR 21
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u1__WIDTH 1
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u1__codec 0
#define R_SYNC_SERIAL_PRESCALE__clk_sel_u1__baudrate 1
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u1__BITNR 20
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u1__WIDTH 1
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u1__external 0
#define R_SYNC_SERIAL_PRESCALE__word_stb_sel_u1__internal 1
#define R_SYNC_SERIAL_PRESCALE__prescaler__BITNR 16
#define R_SYNC_SERIAL_PRESCALE__prescaler__WIDTH 3
#define R_SYNC_SERIAL_PRESCALE__prescaler__div1 0
#define R_SYNC_SERIAL_PRESCALE__prescaler__div2 1
#define R_SYNC_SERIAL_PRESCALE__prescaler__div4 2
#define R_SYNC_SERIAL_PRESCALE__prescaler__div8 3
#define R_SYNC_SERIAL_PRESCALE__prescaler__div16 4
#define R_SYNC_SERIAL_PRESCALE__prescaler__div32 5
#define R_SYNC_SERIAL_PRESCALE__prescaler__div64 6
#define R_SYNC_SERIAL_PRESCALE__prescaler__div128 7
#define R_SYNC_SERIAL_PRESCALE__warp_mode__BITNR 15
#define R_SYNC_SERIAL_PRESCALE__warp_mode__WIDTH 1
#define R_SYNC_SERIAL_PRESCALE__warp_mode__normal 0
#define R_SYNC_SERIAL_PRESCALE__warp_mode__enabled 1
#define R_SYNC_SERIAL_PRESCALE__frame_rate__BITNR 11
#define R_SYNC_SERIAL_PRESCALE__frame_rate__WIDTH 4
#define R_SYNC_SERIAL_PRESCALE__word_rate__BITNR 0
#define R_SYNC_SERIAL_PRESCALE__word_rate__WIDTH 10

/*
!* Shared RAM interface registers
!*/

#define R_SHARED_RAM_CONFIG (IO_TYPECAST_UDWORD 0xb0000040)
#define R_SHARED_RAM_CONFIG__width__BITNR 3
#define R_SHARED_RAM_CONFIG__width__WIDTH 1
#define R_SHARED_RAM_CONFIG__width__byte 0
#define R_SHARED_RAM_CONFIG__width__word 1
#define R_SHARED_RAM_CONFIG__enable__BITNR 2
#define R_SHARED_RAM_CONFIG__enable__WIDTH 1
#define R_SHARED_RAM_CONFIG__enable__yes 1
#define R_SHARED_RAM_CONFIG__enable__no 0
#define R_SHARED_RAM_CONFIG__pint__BITNR 1
#define R_SHARED_RAM_CONFIG__pint__WIDTH 1
#define R_SHARED_RAM_CONFIG__pint__int 1
#define R_SHARED_RAM_CONFIG__pint__nop 0
#define R_SHARED_RAM_CONFIG__clri__BITNR 0
#define R_SHARED_RAM_CONFIG__clri__WIDTH 1
#define R_SHARED_RAM_CONFIG__clri__clr 1
#define R_SHARED_RAM_CONFIG__clri__nop 0

#define R_SHARED_RAM_ADDR (IO_TYPECAST_UDWORD 0xb0000044)
#define R_SHARED_RAM_ADDR__base_addr__BITNR 8
#define R_SHARED_RAM_ADDR__base_addr__WIDTH 22

/*
!* General config registers
!*/

#define R_GEN_CONFIG (IO_TYPECAST_UDWORD 0xb000002c)
#define R_GEN_CONFIG__par_w__BITNR 31
#define R_GEN_CONFIG__par_w__WIDTH 1
#define R_GEN_CONFIG__par_w__select 1
#define R_GEN_CONFIG__par_w__disable 0
#define R_GEN_CONFIG__usb2__BITNR 30
#define R_GEN_CONFIG__usb2__WIDTH 1
#define R_GEN_CONFIG__usb2__select 1
#define R_GEN_CONFIG__usb2__disable 0
#define R_GEN_CONFIG__usb1__BITNR 29
#define R_GEN_CONFIG__usb1__WIDTH 1
#define R_GEN_CONFIG__usb1__select 1
#define R_GEN_CONFIG__usb1__disable 0
#define R_GEN_CONFIG__g24dir__BITNR 27
#define R_GEN_CONFIG__g24dir__WIDTH 1
#define R_GEN_CONFIG__g24dir__in 0
#define R_GEN_CONFIG__g24dir__out 1
#define R_GEN_CONFIG__g16_23dir__BITNR 26
#define R_GEN_CONFIG__g16_23dir__WIDTH 1
#define R_GEN_CONFIG__g16_23dir__in 0
#define R_GEN_CONFIG__g16_23dir__out 1
#define R_GEN_CONFIG__g8_15dir__BITNR 25
#define R_GEN_CONFIG__g8_15dir__WIDTH 1
#define R_GEN_CONFIG__g8_15dir__in 0
#define R_GEN_CONFIG__g8_15dir__out 1
#define R_GEN_CONFIG__g0dir__BITNR 24
#define R_GEN_CONFIG__g0dir__WIDTH 1
#define R_GEN_CONFIG__g0dir__in 0
#define R_GEN_CONFIG__g0dir__out 1
#define R_GEN_CONFIG__dma9__BITNR 23
#define R_GEN_CONFIG__dma9__WIDTH 1
#define R_GEN_CONFIG__dma9__usb 0
#define R_GEN_CONFIG__dma9__serial1 1
#define R_GEN_CONFIG__dma8__BITNR 22
#define R_GEN_CONFIG__dma8__WIDTH 1
#define R_GEN_CONFIG__dma8__usb 0
#define R_GEN_CONFIG__dma8__serial1 1
#define R_GEN_CONFIG__dma7__BITNR 20
#define R_GEN_CONFIG__dma7__WIDTH 2
#define R_GEN_CONFIG__dma7__unused 0
#define R_GEN_CONFIG__dma7__serial0 1
#define R_GEN_CONFIG__dma7__extdma1 2
#define R_GEN_CONFIG__dma7__intdma6 3
#define R_GEN_CONFIG__dma6__BITNR 18
#define R_GEN_CONFIG__dma6__WIDTH 2
#define R_GEN_CONFIG__dma6__unused 0
#define R_GEN_CONFIG__dma6__serial0 1
#define R_GEN_CONFIG__dma6__extdma1 2
#define R_GEN_CONFIG__dma6__intdma7 3
#define R_GEN_CONFIG__dma5__BITNR 16
#define R_GEN_CONFIG__dma5__WIDTH 2
#define R_GEN_CONFIG__dma5__par1 0
#define R_GEN_CONFIG__dma5__scsi1 1
#define R_GEN_CONFIG__dma5__serial3 2
#define R_GEN_CONFIG__dma5__extdma0 3
#define R_GEN_CONFIG__dma4__BITNR 14
#define R_GEN_CONFIG__dma4__WIDTH 2
#define R_GEN_CONFIG__dma4__par1 0
#define R_GEN_CONFIG__dma4__scsi1 1
#define R_GEN_CONFIG__dma4__serial3 2
#define R_GEN_CONFIG__dma4__extdma0 3
#define R_GEN_CONFIG__dma3__BITNR 12
#define R_GEN_CONFIG__dma3__WIDTH 2
#define R_GEN_CONFIG__dma3__par0 0
#define R_GEN_CONFIG__dma3__scsi0 1
#define R_GEN_CONFIG__dma3__serial2 2
#define R_GEN_CONFIG__dma3__ata 3
#define R_GEN_CONFIG__dma2__BITNR 10
#define R_GEN_CONFIG__dma2__WIDTH 2
#define R_GEN_CONFIG__dma2__par0 0
#define R_GEN_CONFIG__dma2__scsi0 1
#define R_GEN_CONFIG__dma2__serial2 2
#define R_GEN_CONFIG__dma2__ata 3
#define R_GEN_CONFIG__mio_w__BITNR 9
#define R_GEN_CONFIG__mio_w__WIDTH 1
#define R_GEN_CONFIG__mio_w__select 1
#define R_GEN_CONFIG__mio_w__disable 0
#define R_GEN_CONFIG__ser3__BITNR 8
#define R_GEN_CONFIG__ser3__WIDTH 1
#define R_GEN_CONFIG__ser3__select 1
#define R_GEN_CONFIG__ser3__disable 0
#define R_GEN_CONFIG__par1__BITNR 7
#define R_GEN_CONFIG__par1__WIDTH 1
#define R_GEN_CONFIG__par1__select 1
#define R_GEN_CONFIG__par1__disable 0
#define R_GEN_CONFIG__scsi0w__BITNR 6
#define R_GEN_CONFIG__scsi0w__WIDTH 1
#define R_GEN_CONFIG__scsi0w__select 1
#define R_GEN_CONFIG__scsi0w__disable 0
#define R_GEN_CONFIG__scsi1__BITNR 5
#define R_GEN_CONFIG__scsi1__WIDTH 1
#define R_GEN_CONFIG__scsi1__select 1
#define R_GEN_CONFIG__scsi1__disable 0
#define R_GEN_CONFIG__mio__BITNR 4
#define R_GEN_CONFIG__mio__WIDTH 1
#define R_GEN_CONFIG__mio__select 1
#define R_GEN_CONFIG__mio__disable 0
#define R_GEN_CONFIG__ser2__BITNR 3
#define R_GEN_CONFIG__ser2__WIDTH 1
#define R_GEN_CONFIG__ser2__select 1
#define R_GEN_CONFIG__ser2__disable 0
#define R_GEN_CONFIG__par0__BITNR 2
#define R_GEN_CONFIG__par0__WIDTH 1
#define R_GEN_CONFIG__par0__select 1
#define R_GEN_CONFIG__par0__disable 0
#define R_GEN_CONFIG__ata__BITNR 1
#define R_GEN_CONFIG__ata__WIDTH 1
#define R_GEN_CONFIG__ata__select 1
#define R_GEN_CONFIG__ata__disable 0
#define R_GEN_CONFIG__scsi0__BITNR 0
#define R_GEN_CONFIG__scsi0__WIDTH 1
#define R_GEN_CONFIG__scsi0__select 1
#define R_GEN_CONFIG__scsi0__disable 0

#define R_GEN_CONFIG_II (IO_TYPECAST_UDWORD 0xb0000034)
#define R_GEN_CONFIG_II__sermode3__BITNR 6
#define R_GEN_CONFIG_II__sermode3__WIDTH 1
#define R_GEN_CONFIG_II__sermode3__async 0
#define R_GEN_CONFIG_II__sermode3__sync 1
#define R_GEN_CONFIG_II__sermode1__BITNR 4
#define R_GEN_CONFIG_II__sermode1__WIDTH 1
#define R_GEN_CONFIG_II__sermode1__async 0
#define R_GEN_CONFIG_II__sermode1__sync 1
#define R_GEN_CONFIG_II__ext_clk__BITNR 2
#define R_GEN_CONFIG_II__ext_clk__WIDTH 1
#define R_GEN_CONFIG_II__ext_clk__select 1
#define R_GEN_CONFIG_II__ext_clk__disable 0
#define R_GEN_CONFIG_II__ser2__BITNR 1
#define R_GEN_CONFIG_II__ser2__WIDTH 1
#define R_GEN_CONFIG_II__ser2__select 1
#define R_GEN_CONFIG_II__ser2__disable 0
#define R_GEN_CONFIG_II__ser3__BITNR 0
#define R_GEN_CONFIG_II__ser3__WIDTH 1
#define R_GEN_CONFIG_II__ser3__select 1
#define R_GEN_CONFIG_II__ser3__disable 0

#define R_PORT_G_DATA (IO_TYPECAST_UDWORD 0xb0000028)
#define R_PORT_G_DATA__data__BITNR 0
#define R_PORT_G_DATA__data__WIDTH 32

/*
!* General port configuration registers
!*/

#define R_PORT_PA_SET (IO_TYPECAST_UDWORD 0xb0000030)
#define R_PORT_PA_SET__dir7__BITNR 15
#define R_PORT_PA_SET__dir7__WIDTH 1
#define R_PORT_PA_SET__dir7__input 0
#define R_PORT_PA_SET__dir7__output 1
#define R_PORT_PA_SET__dir6__BITNR 14
#define R_PORT_PA_SET__dir6__WIDTH 1
#define R_PORT_PA_SET__dir6__input 0
#define R_PORT_PA_SET__dir6__output 1
#define R_PORT_PA_SET__dir5__BITNR 13
#define R_PORT_PA_SET__dir5__WIDTH 1
#define R_PORT_PA_SET__dir5__input 0
#define R_PORT_PA_SET__dir5__output 1
#define R_PORT_PA_SET__dir4__BITNR 12
#define R_PORT_PA_SET__dir4__WIDTH 1
#define R_PORT_PA_SET__dir4__input 0
#define R_PORT_PA_SET__dir4__output 1
#define R_PORT_PA_SET__dir3__BITNR 11
#define R_PORT_PA_SET__dir3__WIDTH 1
#define R_PORT_PA_SET__dir3__input 0
#define R_PORT_PA_SET__dir3__output 1
#define R_PORT_PA_SET__dir2__BITNR 10
#define R_PORT_PA_SET__dir2__WIDTH 1
#define R_PORT_PA_SET__dir2__input 0
#define R_PORT_PA_SET__dir2__output 1
#define R_PORT_PA_SET__dir1__BITNR 9
#define R_PORT_PA_SET__dir1__WIDTH 1
#define R_PORT_PA_SET__dir1__input 0
#define R_PORT_PA_SET__dir1__output 1
#define R_PORT_PA_SET__dir0__BITNR 8
#define R_PORT_PA_SET__dir0__WIDTH 1
#define R_PORT_PA_SET__dir0__input 0
#define R_PORT_PA_SET__dir0__output 1
#define R_PORT_PA_SET__data_out__BITNR 0
#define R_PORT_PA_SET__data_out__WIDTH 8

#define R_PORT_PA_DATA (IO_TYPECAST_BYTE 0xb0000030)
#define R_PORT_PA_DATA__data_out__BITNR 0
#define R_PORT_PA_DATA__data_out__WIDTH 8

#define R_PORT_PA_DIR (IO_TYPECAST_BYTE 0xb0000031)
#define R_PORT_PA_DIR__dir7__BITNR 7
#define R_PORT_PA_DIR__dir7__WIDTH 1
#define R_PORT_PA_DIR__dir7__input 0
#define R_PORT_PA_DIR__dir7__output 1
#define R_PORT_PA_DIR__dir6__BITNR 6
#define R_PORT_PA_DIR__dir6__WIDTH 1
#define R_PORT_PA_DIR__dir6__input 0
#define R_PORT_PA_DIR__dir6__output 1
#define R_PORT_PA_DIR__dir5__BITNR 5
#define R_PORT_PA_DIR__dir5__WIDTH 1
#define R_PORT_PA_DIR__dir5__input 0
#define R_PORT_PA_DIR__dir5__output 1
#define R_PORT_PA_DIR__dir4__BITNR 4
#define R_PORT_PA_DIR__dir4__WIDTH 1
#define R_PORT_PA_DIR__dir4__input 0
#define R_PORT_PA_DIR__dir4__output 1
#define R_PORT_PA_DIR__dir3__BITNR 3
#define R_PORT_PA_DIR__dir3__WIDTH 1
#define R_PORT_PA_DIR__dir3__input 0
#define R_PORT_PA_DIR__dir3__output 1
#define R_PORT_PA_DIR__dir2__BITNR 2
#define R_PORT_PA_DIR__dir2__WIDTH 1
#define R_PORT_PA_DIR__dir2__input 0
#define R_PORT_PA_DIR__dir2__output 1
#define R_PORT_PA_DIR__dir1__BITNR 1
#define R_PORT_PA_DIR__dir1__WIDTH 1
#define R_PORT_PA_DIR__dir1__input 0
#define R_PORT_PA_DIR__dir1__output 1
#define R_PORT_PA_DIR__dir0__BITNR 0
#define R_PORT_PA_DIR__dir0__WIDTH 1
#define R_PORT_PA_DIR__dir0__input 0
#define R_PORT_PA_DIR__dir0__output 1

#define R_PORT_PA_READ (IO_TYPECAST_RO_UDWORD 0xb0000030)
#define R_PORT_PA_READ__data_in__BITNR 0
#define R_PORT_PA_READ__data_in__WIDTH 8

#define R_PORT_PB_SET (IO_TYPECAST_UDWORD 0xb0000038)
#define R_PORT_PB_SET__syncser3__BITNR 29
#define R_PORT_PB_SET__syncser3__WIDTH 1
#define R_PORT_PB_SET__syncser3__port_cs 0
#define R_PORT_PB_SET__syncser3__ss3extra 1
#define R_PORT_PB_SET__syncser1__BITNR 28
#define R_PORT_PB_SET__syncser1__WIDTH 1
#define R_PORT_PB_SET__syncser1__port_cs 0
#define R_PORT_PB_SET__syncser1__ss1extra 1
#define R_PORT_PB_SET__i2c_en__BITNR 27
#define R_PORT_PB_SET__i2c_en__WIDTH 1
#define R_PORT_PB_SET__i2c_en__off 0
#define R_PORT_PB_SET__i2c_en__on 1
#define R_PORT_PB_SET__i2c_d__BITNR 26
#define R_PORT_PB_SET__i2c_d__WIDTH 1
#define R_PORT_PB_SET__i2c_clk__BITNR 25
#define R_PORT_PB_SET__i2c_clk__WIDTH 1
#define R_PORT_PB_SET__i2c_oe___BITNR 24
#define R_PORT_PB_SET__i2c_oe___WIDTH 1
#define R_PORT_PB_SET__i2c_oe___enable 0
#define R_PORT_PB_SET__i2c_oe___disable 1
#define R_PORT_PB_SET__cs7__BITNR 23
#define R_PORT_PB_SET__cs7__WIDTH 1
#define R_PORT_PB_SET__cs7__port 0
#define R_PORT_PB_SET__cs7__cs 1
#define R_PORT_PB_SET__cs6__BITNR 22
#define R_PORT_PB_SET__cs6__WIDTH 1
#define R_PORT_PB_SET__cs6__port 0
#define R_PORT_PB_SET__cs6__cs 1
#define R_PORT_PB_SET__cs5__BITNR 21
#define R_PORT_PB_SET__cs5__WIDTH 1
#define R_PORT_PB_SET__cs5__port 0
#define R_PORT_PB_SET__cs5__cs 1
#define R_PORT_PB_SET__cs4__BITNR 20
#define R_PORT_PB_SET__cs4__WIDTH 1
#define R_PORT_PB_SET__cs4__port 0
#define R_PORT_PB_SET__cs4__cs 1
#define R_PORT_PB_SET__cs3__BITNR 19
#define R_PORT_PB_SET__cs3__WIDTH 1
#define R_PORT_PB_SET__cs3__port 0
#define R_PORT_PB_SET__cs3__cs 1
#define R_PORT_PB_SET__cs2__BITNR 18
#define R_PORT_PB_SET__cs2__WIDTH 1
#define R_PORT_PB_SET__cs2__port 0
#define R_PORT_PB_SET__cs2__cs 1
#define R_PORT_PB_SET__scsi1__BITNR 17
#define R_PORT_PB_SET__scsi1__WIDTH 1
#define R_PORT_PB_SET__scsi1__port_cs 0
#define R_PORT_PB_SET__scsi1__enph 1
#define R_PORT_PB_SET__scsi0__BITNR 16
#define R_PORT_PB_SET__scsi0__WIDTH 1
#define R_PORT_PB_SET__scsi0__port_cs 0
#define R_PORT_PB_SET__scsi0__enph 1
#define R_PORT_PB_SET__dir7__BITNR 15
#define R_PORT_PB_SET__dir7__WIDTH 1
#define R_PORT_PB_SET__dir7__input 0
#define R_PORT_PB_SET__dir7__output 1
#define R_PORT_PB_SET__dir6__BITNR 14
#define R_PORT_PB_SET__dir6__WIDTH 1
#define R_PORT_PB_SET__dir6__input 0
#define R_PORT_PB_SET__dir6__output 1
#define R_PORT_PB_SET__dir5__BITNR 13
#define R_PORT_PB_SET__dir5__WIDTH 1
#define R_PORT_PB_SET__dir5__input 0
#define R_PORT_PB_SET__dir5__output 1
#define R_PORT_PB_SET__dir4__BITNR 12
#define R_PORT_PB_SET__dir4__WIDTH 1
#define R_PORT_PB_SET__dir4__input 0
#define R_PORT_PB_SET__dir4__output 1
#define R_PORT_PB_SET__dir3__BITNR 11
#define R_PORT_PB_SET__dir3__WIDTH 1
#define R_PORT_PB_SET__dir3__input 0
#define R_PORT_PB_SET__dir3__output 1
#define R_PORT_PB_SET__dir2__BITNR 10
#define R_PORT_PB_SET__dir2__WIDTH 1
#define R_PORT_PB_SET__dir2__input 0
#define R_PORT_PB_SET__dir2__output 1
#define R_PORT_PB_SET__dir1__BITNR 9
#define R_PORT_PB_SET__dir1__WIDTH 1
#define R_PORT_PB_SET__dir1__input 0
#define R_PORT_PB_SET__dir1__output 1
#define R_PORT_PB_SET__dir0__BITNR 8
#define R_PORT_PB_SET__dir0__WIDTH 1
#define R_PORT_PB_SET__dir0__input 0
#define R_PORT_PB_SET__dir0__output 1
#define R_PORT_PB_SET__data_out__BITNR 0
#define R_PORT_PB_SET__data_out__WIDTH 8

#define R_PORT_PB_DATA (IO_TYPECAST_BYTE 0xb0000038)
#define R_PORT_PB_DATA__data_out__BITNR 0
#define R_PORT_PB_DATA__data_out__WIDTH 8

#define R_PORT_PB_DIR (IO_TYPECAST_BYTE 0xb0000039)
#define R_PORT_PB_DIR__dir7__BITNR 7
#define R_PORT_PB_DIR__dir7__WIDTH 1
#define R_PORT_PB_DIR__dir7__input 0
#define R_PORT_PB_DIR__dir7__output 1
#define R_PORT_PB_DIR__dir6__BITNR 6
#define R_PORT_PB_DIR__dir6__WIDTH 1
#define R_PORT_PB_DIR__dir6__input 0
#define R_PORT_PB_DIR__dir6__output 1
#define R_PORT_PB_DIR__dir5__BITNR 5
#define R_PORT_PB_DIR__dir5__WIDTH 1
#define R_PORT_PB_DIR__dir5__input 0
#define R_PORT_PB_DIR__dir5__output 1
#define R_PORT_PB_DIR__dir4__BITNR 4
#define R_PORT_PB_DIR__dir4__WIDTH 1
#define R_PORT_PB_DIR__dir4__input 0
#define R_PORT_PB_DIR__dir4__output 1
#define R_PORT_PB_DIR__dir3__BITNR 3
#define R_PORT_PB_DIR__dir3__WIDTH 1
#define R_PORT_PB_DIR__dir3__input 0
#define R_PORT_PB_DIR__dir3__output 1
#define R_PORT_PB_DIR__dir2__BITNR 2
#define R_PORT_PB_DIR__dir2__WIDTH 1
#define R_PORT_PB_DIR__dir2__input 0
#define R_PORT_PB_DIR__dir2__output 1
#define R_PORT_PB_DIR__dir1__BITNR 1
#define R_PORT_PB_DIR__dir1__WIDTH 1
#define R_PORT_PB_DIR__dir1__input 0
#define R_PORT_PB_DIR__dir1__output 1
#define R_PORT_PB_DIR__dir0__BITNR 0
#define R_PORT_PB_DIR__dir0__WIDTH 1
#define R_PORT_PB_DIR__dir0__input 0
#define R_PORT_PB_DIR__dir0__output 1

#define R_PORT_PB_CONFIG (IO_TYPECAST_BYTE 0xb000003a)
#define R_PORT_PB_CONFIG__cs7__BITNR 7
#define R_PORT_PB_CONFIG__cs7__WIDTH 1
#define R_PORT_PB_CONFIG__cs7__port 0
#define R_PORT_PB_CONFIG__cs7__cs 1
#define R_PORT_PB_CONFIG__cs6__BITNR 6
#define R_PORT_PB_CONFIG__cs6__WIDTH 1
#define R_PORT_PB_CONFIG__cs6__port 0
#define R_PORT_PB_CONFIG__cs6__cs 1
#define R_PORT_PB_CONFIG__cs5__BITNR 5
#define R_PORT_PB_CONFIG__cs5__WIDTH 1
#define R_PORT_PB_CONFIG__cs5__port 0
#define R_PORT_PB_CONFIG__cs5__cs 1
#define R_PORT_PB_CONFIG__cs4__BITNR 4
#define R_PORT_PB_CONFIG__cs4__WIDTH 1
#define R_PORT_PB_CONFIG__cs4__port 0
#define R_PORT_PB_CONFIG__cs4__cs 1
#define R_PORT_PB_CONFIG__cs3__BITNR 3
#define R_PORT_PB_CONFIG__cs3__WIDTH 1
#define R_PORT_PB_CONFIG__cs3__port 0
#define R_PORT_PB_CONFIG__cs3__cs 1
#define R_PORT_PB_CONFIG__cs2__BITNR 2
#define R_PORT_PB_CONFIG__cs2__WIDTH 1
#define R_PORT_PB_CONFIG__cs2__port 0
#define R_PORT_PB_CONFIG__cs2__cs 1
#define R_PORT_PB_CONFIG__scsi1__BITNR 1
#define R_PORT_PB_CONFIG__scsi1__WIDTH 1
#define R_PORT_PB_CONFIG__scsi1__port_cs 0
#define R_PORT_PB_CONFIG__scsi1__enph 1
#define R_PORT_PB_CONFIG__scsi0__BITNR 0
#define R_PORT_PB_CONFIG__scsi0__WIDTH 1
#define R_PORT_PB_CONFIG__scsi0__port_cs 0
#define R_PORT_PB_CONFIG__scsi0__enph 1

#define R_PORT_PB_I2C (IO_TYPECAST_BYTE 0xb000003b)
#define R_PORT_PB_I2C__syncser3__BITNR 5
#define R_PORT_PB_I2C__syncser3__WIDTH 1
#define R_PORT_PB_I2C__syncser3__port_cs 0
#define R_PORT_PB_I2C__syncser3__ss3extra 1
#define R_PORT_PB_I2C__syncser1__BITNR 4
#define R_PORT_PB_I2C__syncser1__WIDTH 1
#define R_PORT_PB_I2C__syncser1__port_cs 0
#define R_PORT_PB_I2C__syncser1__ss1extra 1
#define R_PORT_PB_I2C__i2c_en__BITNR 3
#define R_PORT_PB_I2C__i2c_en__WIDTH 1
#define R_PORT_PB_I2C__i2c_en__off 0
#define R_PORT_PB_I2C__i2c_en__on 1
#define R_PORT_PB_I2C__i2c_d__BITNR 2
#define R_PORT_PB_I2C__i2c_d__WIDTH 1
#define R_PORT_PB_I2C__i2c_clk__BITNR 1
#define R_PORT_PB_I2C__i2c_clk__WIDTH 1
#define R_PORT_PB_I2C__i2c_oe___BITNR 0
#define R_PORT_PB_I2C__i2c_oe___WIDTH 1
#define R_PORT_PB_I2C__i2c_oe___enable 0
#define R_PORT_PB_I2C__i2c_oe___disable 1

#define R_PORT_PB_READ (IO_TYPECAST_RO_UDWORD 0xb0000038)
#define R_PORT_PB_READ__data_in__BITNR 0
#define R_PORT_PB_READ__data_in__WIDTH 8

/*
!* Serial port registers
!*/

#define R_SERIAL0_CTRL (IO_TYPECAST_UDWORD 0xb0000060)
#define R_SERIAL0_CTRL__tr_baud__BITNR 28
#define R_SERIAL0_CTRL__tr_baud__WIDTH 4
#define R_SERIAL0_CTRL__tr_baud__c300Hz 0
#define R_SERIAL0_CTRL__tr_baud__c600Hz 1
#define R_SERIAL0_CTRL__tr_baud__c1200Hz 2
#define R_SERIAL0_CTRL__tr_baud__c2400Hz 3
#define R_SERIAL0_CTRL__tr_baud__c4800Hz 4
#define R_SERIAL0_CTRL__tr_baud__c9600Hz 5
#define R_SERIAL0_CTRL__tr_baud__c19k2Hz 6
#define R_SERIAL0_CTRL__tr_baud__c38k4Hz 7
#define R_SERIAL0_CTRL__tr_baud__c57k6Hz 8
#define R_SERIAL0_CTRL__tr_baud__c115k2Hz 9
#define R_SERIAL0_CTRL__tr_baud__c230k4Hz 10
#define R_SERIAL0_CTRL__tr_baud__c460k8Hz 11
#define R_SERIAL0_CTRL__tr_baud__c921k6Hz 12
#define R_SERIAL0_CTRL__tr_baud__c1843k2Hz 13
#define R_SERIAL0_CTRL__tr_baud__c6250kHz 14
#define R_SERIAL0_CTRL__tr_baud__reserved 15
#define R_SERIAL0_CTRL__rec_baud__BITNR 24
#define R_SERIAL0_CTRL__rec_baud__WIDTH 4
#define R_SERIAL0_CTRL__rec_baud__c300Hz 0
#define R_SERIAL0_CTRL__rec_baud__c600Hz 1
#define R_SERIAL0_CTRL__rec_baud__c1200Hz 2
#define R_SERIAL0_CTRL__rec_baud__c2400Hz 3
#define R_SERIAL0_CTRL__rec_baud__c4800Hz 4
#define R_SERIAL0_CTRL__rec_baud__c9600Hz 5
#define R_SERIAL0_CTRL__rec_baud__c19k2Hz 6
#define R_SERIAL0_CTRL__rec_baud__c38k4Hz 7
#define R_SERIAL0_CTRL__rec_baud__c57k6Hz 8
#define R_SERIAL0_CTRL__rec_baud__c115k2Hz 9
#define R_SERIAL0_CTRL__rec_baud__c230k4Hz 10
#define R_SERIAL0_CTRL__rec_baud__c460k8Hz 11
#define R_SERIAL0_CTRL__rec_baud__c921k6Hz 12
#define R_SERIAL0_CTRL__rec_baud__c1843k2Hz 13
#define R_SERIAL0_CTRL__rec_baud__c6250kHz 14
#define R_SERIAL0_CTRL__rec_baud__reserved 15
#define R_SERIAL0_CTRL__dma_err__BITNR 23
#define R_SERIAL0_CTRL__dma_err__WIDTH 1
#define R_SERIAL0_CTRL__dma_err__stop 0
#define R_SERIAL0_CTRL__dma_err__ignore 1
#define R_SERIAL0_CTRL__rec_enable__BITNR 22
#define R_SERIAL0_CTRL__rec_enable__WIDTH 1
#define R_SERIAL0_CTRL__rec_enable__disable 0
#define R_SERIAL0_CTRL__rec_enable__enable 1
#define R_SERIAL0_CTRL__rts___BITNR 21
#define R_SERIAL0_CTRL__rts___WIDTH 1
#define R_SERIAL0_CTRL__rts___active 0
#define R_SERIAL0_CTRL__rts___inactive 1
#define R_SERIAL0_CTRL__sampling__BITNR 20
#define R_SERIAL0_CTRL__sampling__WIDTH 1
#define R_SERIAL0_CTRL__sampling__middle 0
#define R_SERIAL0_CTRL__sampling__majority 1
#define R_SERIAL0_CTRL__rec_stick_par__BITNR 19
#define R_SERIAL0_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL0_CTRL__rec_stick_par__normal 0
#define R_SERIAL0_CTRL__rec_stick_par__stick 1
#define R_SERIAL0_CTRL__rec_par__BITNR 18
#define R_SERIAL0_CTRL__rec_par__WIDTH 1
#define R_SERIAL0_CTRL__rec_par__even 0
#define R_SERIAL0_CTRL__rec_par__odd 1
#define R_SERIAL0_CTRL__rec_par_en__BITNR 17
#define R_SERIAL0_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL0_CTRL__rec_par_en__disable 0
#define R_SERIAL0_CTRL__rec_par_en__enable 1
#define R_SERIAL0_CTRL__rec_bitnr__BITNR 16
#define R_SERIAL0_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL0_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL0_CTRL__rec_bitnr__rec_7bit 1
#define R_SERIAL0_CTRL__txd__BITNR 15
#define R_SERIAL0_CTRL__txd__WIDTH 1
#define R_SERIAL0_CTRL__tr_enable__BITNR 14
#define R_SERIAL0_CTRL__tr_enable__WIDTH 1
#define R_SERIAL0_CTRL__tr_enable__disable 0
#define R_SERIAL0_CTRL__tr_enable__enable 1
#define R_SERIAL0_CTRL__auto_cts__BITNR 13
#define R_SERIAL0_CTRL__auto_cts__WIDTH 1
#define R_SERIAL0_CTRL__auto_cts__disabled 0
#define R_SERIAL0_CTRL__auto_cts__active 1
#define R_SERIAL0_CTRL__stop_bits__BITNR 12
#define R_SERIAL0_CTRL__stop_bits__WIDTH 1
#define R_SERIAL0_CTRL__stop_bits__one_bit 0
#define R_SERIAL0_CTRL__stop_bits__two_bits 1
#define R_SERIAL0_CTRL__tr_stick_par__BITNR 11
#define R_SERIAL0_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL0_CTRL__tr_stick_par__normal 0
#define R_SERIAL0_CTRL__tr_stick_par__stick 1
#define R_SERIAL0_CTRL__tr_par__BITNR 10
#define R_SERIAL0_CTRL__tr_par__WIDTH 1
#define R_SERIAL0_CTRL__tr_par__even 0
#define R_SERIAL0_CTRL__tr_par__odd 1
#define R_SERIAL0_CTRL__tr_par_en__BITNR 9
#define R_SERIAL0_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL0_CTRL__tr_par_en__disable 0
#define R_SERIAL0_CTRL__tr_par_en__enable 1
#define R_SERIAL0_CTRL__tr_bitnr__BITNR 8
#define R_SERIAL0_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL0_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL0_CTRL__tr_bitnr__tr_7bit 1
#define R_SERIAL0_CTRL__data_out__BITNR 0
#define R_SERIAL0_CTRL__data_out__WIDTH 8

#define R_SERIAL0_BAUD (IO_TYPECAST_BYTE 0xb0000063)
#define R_SERIAL0_BAUD__tr_baud__BITNR 4
#define R_SERIAL0_BAUD__tr_baud__WIDTH 4
#define R_SERIAL0_BAUD__tr_baud__c300Hz 0
#define R_SERIAL0_BAUD__tr_baud__c600Hz 1
#define R_SERIAL0_BAUD__tr_baud__c1200Hz 2
#define R_SERIAL0_BAUD__tr_baud__c2400Hz 3
#define R_SERIAL0_BAUD__tr_baud__c4800Hz 4
#define R_SERIAL0_BAUD__tr_baud__c9600Hz 5
#define R_SERIAL0_BAUD__tr_baud__c19k2Hz 6
#define R_SERIAL0_BAUD__tr_baud__c38k4Hz 7
#define R_SERIAL0_BAUD__tr_baud__c57k6Hz 8
#define R_SERIAL0_BAUD__tr_baud__c115k2Hz 9
#define R_SERIAL0_BAUD__tr_baud__c230k4Hz 10
#define R_SERIAL0_BAUD__tr_baud__c460k8Hz 11
#define R_SERIAL0_BAUD__tr_baud__c921k6Hz 12
#define R_SERIAL0_BAUD__tr_baud__c1843k2Hz 13
#define R_SERIAL0_BAUD__tr_baud__c6250kHz 14
#define R_SERIAL0_BAUD__tr_baud__reserved 15
#define R_SERIAL0_BAUD__rec_baud__BITNR 0
#define R_SERIAL0_BAUD__rec_baud__WIDTH 4
#define R_SERIAL0_BAUD__rec_baud__c300Hz 0
#define R_SERIAL0_BAUD__rec_baud__c600Hz 1
#define R_SERIAL0_BAUD__rec_baud__c1200Hz 2
#define R_SERIAL0_BAUD__rec_baud__c2400Hz 3
#define R_SERIAL0_BAUD__rec_baud__c4800Hz 4
#define R_SERIAL0_BAUD__rec_baud__c9600Hz 5
#define R_SERIAL0_BAUD__rec_baud__c19k2Hz 6
#define R_SERIAL0_BAUD__rec_baud__c38k4Hz 7
#define R_SERIAL0_BAUD__rec_baud__c57k6Hz 8
#define R_SERIAL0_BAUD__rec_baud__c115k2Hz 9
#define R_SERIAL0_BAUD__rec_baud__c230k4Hz 10
#define R_SERIAL0_BAUD__rec_baud__c460k8Hz 11
#define R_SERIAL0_BAUD__rec_baud__c921k6Hz 12
#define R_SERIAL0_BAUD__rec_baud__c1843k2Hz 13
#define R_SERIAL0_BAUD__rec_baud__c6250kHz 14
#define R_SERIAL0_BAUD__rec_baud__reserved 15

#define R_SERIAL0_REC_CTRL (IO_TYPECAST_BYTE 0xb0000062)
#define R_SERIAL0_REC_CTRL__dma_err__BITNR 7
#define R_SERIAL0_REC_CTRL__dma_err__WIDTH 1
#define R_SERIAL0_REC_CTRL__dma_err__stop 0
#define R_SERIAL0_REC_CTRL__dma_err__ignore 1
#define R_SERIAL0_REC_CTRL__rec_enable__BITNR 6
#define R_SERIAL0_REC_CTRL__rec_enable__WIDTH 1
#define R_SERIAL0_REC_CTRL__rec_enable__disable 0
#define R_SERIAL0_REC_CTRL__rec_enable__enable 1
#define R_SERIAL0_REC_CTRL__rts___BITNR 5
#define R_SERIAL0_REC_CTRL__rts___WIDTH 1
#define R_SERIAL0_REC_CTRL__rts___active 0
#define R_SERIAL0_REC_CTRL__rts___inactive 1
#define R_SERIAL0_REC_CTRL__sampling__BITNR 4
#define R_SERIAL0_REC_CTRL__sampling__WIDTH 1
#define R_SERIAL0_REC_CTRL__sampling__middle 0
#define R_SERIAL0_REC_CTRL__sampling__majority 1
#define R_SERIAL0_REC_CTRL__rec_stick_par__BITNR 3
#define R_SERIAL0_REC_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL0_REC_CTRL__rec_stick_par__normal 0
#define R_SERIAL0_REC_CTRL__rec_stick_par__stick 1
#define R_SERIAL0_REC_CTRL__rec_par__BITNR 2
#define R_SERIAL0_REC_CTRL__rec_par__WIDTH 1
#define R_SERIAL0_REC_CTRL__rec_par__even 0
#define R_SERIAL0_REC_CTRL__rec_par__odd 1
#define R_SERIAL0_REC_CTRL__rec_par_en__BITNR 1
#define R_SERIAL0_REC_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL0_REC_CTRL__rec_par_en__disable 0
#define R_SERIAL0_REC_CTRL__rec_par_en__enable 1
#define R_SERIAL0_REC_CTRL__rec_bitnr__BITNR 0
#define R_SERIAL0_REC_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL0_REC_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL0_REC_CTRL__rec_bitnr__rec_7bit 1

#define R_SERIAL0_TR_CTRL (IO_TYPECAST_BYTE 0xb0000061)
#define R_SERIAL0_TR_CTRL__txd__BITNR 7
#define R_SERIAL0_TR_CTRL__txd__WIDTH 1
#define R_SERIAL0_TR_CTRL__tr_enable__BITNR 6
#define R_SERIAL0_TR_CTRL__tr_enable__WIDTH 1
#define R_SERIAL0_TR_CTRL__tr_enable__disable 0
#define R_SERIAL0_TR_CTRL__tr_enable__enable 1
#define R_SERIAL0_TR_CTRL__auto_cts__BITNR 5
#define R_SERIAL0_TR_CTRL__auto_cts__WIDTH 1
#define R_SERIAL0_TR_CTRL__auto_cts__disabled 0
#define R_SERIAL0_TR_CTRL__auto_cts__active 1
#define R_SERIAL0_TR_CTRL__stop_bits__BITNR 4
#define R_SERIAL0_TR_CTRL__stop_bits__WIDTH 1
#define R_SERIAL0_TR_CTRL__stop_bits__one_bit 0
#define R_SERIAL0_TR_CTRL__stop_bits__two_bits 1
#define R_SERIAL0_TR_CTRL__tr_stick_par__BITNR 3
#define R_SERIAL0_TR_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL0_TR_CTRL__tr_stick_par__normal 0
#define R_SERIAL0_TR_CTRL__tr_stick_par__stick 1
#define R_SERIAL0_TR_CTRL__tr_par__BITNR 2
#define R_SERIAL0_TR_CTRL__tr_par__WIDTH 1
#define R_SERIAL0_TR_CTRL__tr_par__even 0
#define R_SERIAL0_TR_CTRL__tr_par__odd 1
#define R_SERIAL0_TR_CTRL__tr_par_en__BITNR 1
#define R_SERIAL0_TR_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL0_TR_CTRL__tr_par_en__disable 0
#define R_SERIAL0_TR_CTRL__tr_par_en__enable 1
#define R_SERIAL0_TR_CTRL__tr_bitnr__BITNR 0
#define R_SERIAL0_TR_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL0_TR_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL0_TR_CTRL__tr_bitnr__tr_7bit 1

#define R_SERIAL0_TR_DATA (IO_TYPECAST_BYTE 0xb0000060)
#define R_SERIAL0_TR_DATA__data_out__BITNR 0
#define R_SERIAL0_TR_DATA__data_out__WIDTH 8

#define R_SERIAL0_READ (IO_TYPECAST_RO_UDWORD 0xb0000060)
#define R_SERIAL0_READ__xoff_detect__BITNR 15
#define R_SERIAL0_READ__xoff_detect__WIDTH 1
#define R_SERIAL0_READ__xoff_detect__no_xoff 0
#define R_SERIAL0_READ__xoff_detect__xoff 1
#define R_SERIAL0_READ__cts___BITNR 14
#define R_SERIAL0_READ__cts___WIDTH 1
#define R_SERIAL0_READ__cts___active 0
#define R_SERIAL0_READ__cts___inactive 1
#define R_SERIAL0_READ__tr_ready__BITNR 13
#define R_SERIAL0_READ__tr_ready__WIDTH 1
#define R_SERIAL0_READ__tr_ready__full 0
#define R_SERIAL0_READ__tr_ready__ready 1
#define R_SERIAL0_READ__rxd__BITNR 12
#define R_SERIAL0_READ__rxd__WIDTH 1
#define R_SERIAL0_READ__overrun__BITNR 11
#define R_SERIAL0_READ__overrun__WIDTH 1
#define R_SERIAL0_READ__overrun__no 0
#define R_SERIAL0_READ__overrun__yes 1
#define R_SERIAL0_READ__par_err__BITNR 10
#define R_SERIAL0_READ__par_err__WIDTH 1
#define R_SERIAL0_READ__par_err__no 0
#define R_SERIAL0_READ__par_err__yes 1
#define R_SERIAL0_READ__framing_err__BITNR 9
#define R_SERIAL0_READ__framing_err__WIDTH 1
#define R_SERIAL0_READ__framing_err__no 0
#define R_SERIAL0_READ__framing_err__yes 1
#define R_SERIAL0_READ__data_avail__BITNR 8
#define R_SERIAL0_READ__data_avail__WIDTH 1
#define R_SERIAL0_READ__data_avail__no 0
#define R_SERIAL0_READ__data_avail__yes 1
#define R_SERIAL0_READ__data_in__BITNR 0
#define R_SERIAL0_READ__data_in__WIDTH 8

#define R_SERIAL0_STATUS (IO_TYPECAST_RO_BYTE 0xb0000061)
#define R_SERIAL0_STATUS__xoff_detect__BITNR 7
#define R_SERIAL0_STATUS__xoff_detect__WIDTH 1
#define R_SERIAL0_STATUS__xoff_detect__no_xoff 0
#define R_SERIAL0_STATUS__xoff_detect__xoff 1
#define R_SERIAL0_STATUS__cts___BITNR 6
#define R_SERIAL0_STATUS__cts___WIDTH 1
#define R_SERIAL0_STATUS__cts___active 0
#define R_SERIAL0_STATUS__cts___inactive 1
#define R_SERIAL0_STATUS__tr_ready__BITNR 5
#define R_SERIAL0_STATUS__tr_ready__WIDTH 1
#define R_SERIAL0_STATUS__tr_ready__full 0
#define R_SERIAL0_STATUS__tr_ready__ready 1
#define R_SERIAL0_STATUS__rxd__BITNR 4
#define R_SERIAL0_STATUS__rxd__WIDTH 1
#define R_SERIAL0_STATUS__overrun__BITNR 3
#define R_SERIAL0_STATUS__overrun__WIDTH 1
#define R_SERIAL0_STATUS__overrun__no 0
#define R_SERIAL0_STATUS__overrun__yes 1
#define R_SERIAL0_STATUS__par_err__BITNR 2
#define R_SERIAL0_STATUS__par_err__WIDTH 1
#define R_SERIAL0_STATUS__par_err__no 0
#define R_SERIAL0_STATUS__par_err__yes 1
#define R_SERIAL0_STATUS__framing_err__BITNR 1
#define R_SERIAL0_STATUS__framing_err__WIDTH 1
#define R_SERIAL0_STATUS__framing_err__no 0
#define R_SERIAL0_STATUS__framing_err__yes 1
#define R_SERIAL0_STATUS__data_avail__BITNR 0
#define R_SERIAL0_STATUS__data_avail__WIDTH 1
#define R_SERIAL0_STATUS__data_avail__no 0
#define R_SERIAL0_STATUS__data_avail__yes 1

#define R_SERIAL0_REC_DATA (IO_TYPECAST_RO_BYTE 0xb0000060)
#define R_SERIAL0_REC_DATA__data_in__BITNR 0
#define R_SERIAL0_REC_DATA__data_in__WIDTH 8

#define R_SERIAL0_XOFF (IO_TYPECAST_UDWORD 0xb0000064)
#define R_SERIAL0_XOFF__tx_stop__BITNR 9
#define R_SERIAL0_XOFF__tx_stop__WIDTH 1
#define R_SERIAL0_XOFF__tx_stop__enable 0
#define R_SERIAL0_XOFF__tx_stop__stop 1
#define R_SERIAL0_XOFF__auto_xoff__BITNR 8
#define R_SERIAL0_XOFF__auto_xoff__WIDTH 1
#define R_SERIAL0_XOFF__auto_xoff__disable 0
#define R_SERIAL0_XOFF__auto_xoff__enable 1
#define R_SERIAL0_XOFF__xoff_char__BITNR 0
#define R_SERIAL0_XOFF__xoff_char__WIDTH 8

#define R_SERIAL1_CTRL (IO_TYPECAST_UDWORD 0xb0000068)
#define R_SERIAL1_CTRL__tr_baud__BITNR 28
#define R_SERIAL1_CTRL__tr_baud__WIDTH 4
#define R_SERIAL1_CTRL__tr_baud__c300Hz 0
#define R_SERIAL1_CTRL__tr_baud__c600Hz 1
#define R_SERIAL1_CTRL__tr_baud__c1200Hz 2
#define R_SERIAL1_CTRL__tr_baud__c2400Hz 3
#define R_SERIAL1_CTRL__tr_baud__c4800Hz 4
#define R_SERIAL1_CTRL__tr_baud__c9600Hz 5
#define R_SERIAL1_CTRL__tr_baud__c19k2Hz 6
#define R_SERIAL1_CTRL__tr_baud__c38k4Hz 7
#define R_SERIAL1_CTRL__tr_baud__c57k6Hz 8
#define R_SERIAL1_CTRL__tr_baud__c115k2Hz 9
#define R_SERIAL1_CTRL__tr_baud__c230k4Hz 10
#define R_SERIAL1_CTRL__tr_baud__c460k8Hz 11
#define R_SERIAL1_CTRL__tr_baud__c921k6Hz 12
#define R_SERIAL1_CTRL__tr_baud__c1843k2Hz 13
#define R_SERIAL1_CTRL__tr_baud__c6250kHz 14
#define R_SERIAL1_CTRL__tr_baud__reserved 15
#define R_SERIAL1_CTRL__rec_baud__BITNR 24
#define R_SERIAL1_CTRL__rec_baud__WIDTH 4
#define R_SERIAL1_CTRL__rec_baud__c300Hz 0
#define R_SERIAL1_CTRL__rec_baud__c600Hz 1
#define R_SERIAL1_CTRL__rec_baud__c1200Hz 2
#define R_SERIAL1_CTRL__rec_baud__c2400Hz 3
#define R_SERIAL1_CTRL__rec_baud__c4800Hz 4
#define R_SERIAL1_CTRL__rec_baud__c9600Hz 5
#define R_SERIAL1_CTRL__rec_baud__c19k2Hz 6
#define R_SERIAL1_CTRL__rec_baud__c38k4Hz 7
#define R_SERIAL1_CTRL__rec_baud__c57k6Hz 8
#define R_SERIAL1_CTRL__rec_baud__c115k2Hz 9
#define R_SERIAL1_CTRL__rec_baud__c230k4Hz 10
#define R_SERIAL1_CTRL__rec_baud__c460k8Hz 11
#define R_SERIAL1_CTRL__rec_baud__c921k6Hz 12
#define R_SERIAL1_CTRL__rec_baud__c1843k2Hz 13
#define R_SERIAL1_CTRL__rec_baud__c6250kHz 14
#define R_SERIAL1_CTRL__rec_baud__reserved 15
#define R_SERIAL1_CTRL__dma_err__BITNR 23
#define R_SERIAL1_CTRL__dma_err__WIDTH 1
#define R_SERIAL1_CTRL__dma_err__stop 0
#define R_SERIAL1_CTRL__dma_err__ignore 1
#define R_SERIAL1_CTRL__rec_enable__BITNR 22
#define R_SERIAL1_CTRL__rec_enable__WIDTH 1
#define R_SERIAL1_CTRL__rec_enable__disable 0
#define R_SERIAL1_CTRL__rec_enable__enable 1
#define R_SERIAL1_CTRL__rts___BITNR 21
#define R_SERIAL1_CTRL__rts___WIDTH 1
#define R_SERIAL1_CTRL__rts___active 0
#define R_SERIAL1_CTRL__rts___inactive 1
#define R_SERIAL1_CTRL__sampling__BITNR 20
#define R_SERIAL1_CTRL__sampling__WIDTH 1
#define R_SERIAL1_CTRL__sampling__middle 0
#define R_SERIAL1_CTRL__sampling__majority 1
#define R_SERIAL1_CTRL__rec_stick_par__BITNR 19
#define R_SERIAL1_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL1_CTRL__rec_stick_par__normal 0
#define R_SERIAL1_CTRL__rec_stick_par__stick 1
#define R_SERIAL1_CTRL__rec_par__BITNR 18
#define R_SERIAL1_CTRL__rec_par__WIDTH 1
#define R_SERIAL1_CTRL__rec_par__even 0
#define R_SERIAL1_CTRL__rec_par__odd 1
#define R_SERIAL1_CTRL__rec_par_en__BITNR 17
#define R_SERIAL1_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL1_CTRL__rec_par_en__disable 0
#define R_SERIAL1_CTRL__rec_par_en__enable 1
#define R_SERIAL1_CTRL__rec_bitnr__BITNR 16
#define R_SERIAL1_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL1_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL1_CTRL__rec_bitnr__rec_7bit 1
#define R_SERIAL1_CTRL__txd__BITNR 15
#define R_SERIAL1_CTRL__txd__WIDTH 1
#define R_SERIAL1_CTRL__tr_enable__BITNR 14
#define R_SERIAL1_CTRL__tr_enable__WIDTH 1
#define R_SERIAL1_CTRL__tr_enable__disable 0
#define R_SERIAL1_CTRL__tr_enable__enable 1
#define R_SERIAL1_CTRL__auto_cts__BITNR 13
#define R_SERIAL1_CTRL__auto_cts__WIDTH 1
#define R_SERIAL1_CTRL__auto_cts__disabled 0
#define R_SERIAL1_CTRL__auto_cts__active 1
#define R_SERIAL1_CTRL__stop_bits__BITNR 12
#define R_SERIAL1_CTRL__stop_bits__WIDTH 1
#define R_SERIAL1_CTRL__stop_bits__one_bit 0
#define R_SERIAL1_CTRL__stop_bits__two_bits 1
#define R_SERIAL1_CTRL__tr_stick_par__BITNR 11
#define R_SERIAL1_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL1_CTRL__tr_stick_par__normal 0
#define R_SERIAL1_CTRL__tr_stick_par__stick 1
#define R_SERIAL1_CTRL__tr_par__BITNR 10
#define R_SERIAL1_CTRL__tr_par__WIDTH 1
#define R_SERIAL1_CTRL__tr_par__even 0
#define R_SERIAL1_CTRL__tr_par__odd 1
#define R_SERIAL1_CTRL__tr_par_en__BITNR 9
#define R_SERIAL1_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL1_CTRL__tr_par_en__disable 0
#define R_SERIAL1_CTRL__tr_par_en__enable 1
#define R_SERIAL1_CTRL__tr_bitnr__BITNR 8
#define R_SERIAL1_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL1_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL1_CTRL__tr_bitnr__tr_7bit 1
#define R_SERIAL1_CTRL__data_out__BITNR 0
#define R_SERIAL1_CTRL__data_out__WIDTH 8

#define R_SERIAL1_BAUD (IO_TYPECAST_BYTE 0xb000006b)
#define R_SERIAL1_BAUD__tr_baud__BITNR 4
#define R_SERIAL1_BAUD__tr_baud__WIDTH 4
#define R_SERIAL1_BAUD__tr_baud__c300Hz 0
#define R_SERIAL1_BAUD__tr_baud__c600Hz 1
#define R_SERIAL1_BAUD__tr_baud__c1200Hz 2
#define R_SERIAL1_BAUD__tr_baud__c2400Hz 3
#define R_SERIAL1_BAUD__tr_baud__c4800Hz 4
#define R_SERIAL1_BAUD__tr_baud__c9600Hz 5
#define R_SERIAL1_BAUD__tr_baud__c19k2Hz 6
#define R_SERIAL1_BAUD__tr_baud__c38k4Hz 7
#define R_SERIAL1_BAUD__tr_baud__c57k6Hz 8
#define R_SERIAL1_BAUD__tr_baud__c115k2Hz 9
#define R_SERIAL1_BAUD__tr_baud__c230k4Hz 10
#define R_SERIAL1_BAUD__tr_baud__c460k8Hz 11
#define R_SERIAL1_BAUD__tr_baud__c921k6Hz 12
#define R_SERIAL1_BAUD__tr_baud__c1843k2Hz 13
#define R_SERIAL1_BAUD__tr_baud__c6250kHz 14
#define R_SERIAL1_BAUD__tr_baud__reserved 15
#define R_SERIAL1_BAUD__rec_baud__BITNR 0
#define R_SERIAL1_BAUD__rec_baud__WIDTH 4
#define R_SERIAL1_BAUD__rec_baud__c300Hz 0
#define R_SERIAL1_BAUD__rec_baud__c600Hz 1
#define R_SERIAL1_BAUD__rec_baud__c1200Hz 2
#define R_SERIAL1_BAUD__rec_baud__c2400Hz 3
#define R_SERIAL1_BAUD__rec_baud__c4800Hz 4
#define R_SERIAL1_BAUD__rec_baud__c9600Hz 5
#define R_SERIAL1_BAUD__rec_baud__c19k2Hz 6
#define R_SERIAL1_BAUD__rec_baud__c38k4Hz 7
#define R_SERIAL1_BAUD__rec_baud__c57k6Hz 8
#define R_SERIAL1_BAUD__rec_baud__c115k2Hz 9
#define R_SERIAL1_BAUD__rec_baud__c230k4Hz 10
#define R_SERIAL1_BAUD__rec_baud__c460k8Hz 11
#define R_SERIAL1_BAUD__rec_baud__c921k6Hz 12
#define R_SERIAL1_BAUD__rec_baud__c1843k2Hz 13
#define R_SERIAL1_BAUD__rec_baud__c6250kHz 14
#define R_SERIAL1_BAUD__rec_baud__reserved 15

#define R_SERIAL1_REC_CTRL (IO_TYPECAST_BYTE 0xb000006a)
#define R_SERIAL1_REC_CTRL__dma_err__BITNR 7
#define R_SERIAL1_REC_CTRL__dma_err__WIDTH 1
#define R_SERIAL1_REC_CTRL__dma_err__stop 0
#define R_SERIAL1_REC_CTRL__dma_err__ignore 1
#define R_SERIAL1_REC_CTRL__rec_enable__BITNR 6
#define R_SERIAL1_REC_CTRL__rec_enable__WIDTH 1
#define R_SERIAL1_REC_CTRL__rec_enable__disable 0
#define R_SERIAL1_REC_CTRL__rec_enable__enable 1
#define R_SERIAL1_REC_CTRL__rts___BITNR 5
#define R_SERIAL1_REC_CTRL__rts___WIDTH 1
#define R_SERIAL1_REC_CTRL__rts___active 0
#define R_SERIAL1_REC_CTRL__rts___inactive 1
#define R_SERIAL1_REC_CTRL__sampling__BITNR 4
#define R_SERIAL1_REC_CTRL__sampling__WIDTH 1
#define R_SERIAL1_REC_CTRL__sampling__middle 0
#define R_SERIAL1_REC_CTRL__sampling__majority 1
#define R_SERIAL1_REC_CTRL__rec_stick_par__BITNR 3
#define R_SERIAL1_REC_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL1_REC_CTRL__rec_stick_par__normal 0
#define R_SERIAL1_REC_CTRL__rec_stick_par__stick 1
#define R_SERIAL1_REC_CTRL__rec_par__BITNR 2
#define R_SERIAL1_REC_CTRL__rec_par__WIDTH 1
#define R_SERIAL1_REC_CTRL__rec_par__even 0
#define R_SERIAL1_REC_CTRL__rec_par__odd 1
#define R_SERIAL1_REC_CTRL__rec_par_en__BITNR 1
#define R_SERIAL1_REC_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL1_REC_CTRL__rec_par_en__disable 0
#define R_SERIAL1_REC_CTRL__rec_par_en__enable 1
#define R_SERIAL1_REC_CTRL__rec_bitnr__BITNR 0
#define R_SERIAL1_REC_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL1_REC_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL1_REC_CTRL__rec_bitnr__rec_7bit 1

#define R_SERIAL1_TR_CTRL (IO_TYPECAST_BYTE 0xb0000069)
#define R_SERIAL1_TR_CTRL__txd__BITNR 7
#define R_SERIAL1_TR_CTRL__txd__WIDTH 1
#define R_SERIAL1_TR_CTRL__tr_enable__BITNR 6
#define R_SERIAL1_TR_CTRL__tr_enable__WIDTH 1
#define R_SERIAL1_TR_CTRL__tr_enable__disable 0
#define R_SERIAL1_TR_CTRL__tr_enable__enable 1
#define R_SERIAL1_TR_CTRL__auto_cts__BITNR 5
#define R_SERIAL1_TR_CTRL__auto_cts__WIDTH 1
#define R_SERIAL1_TR_CTRL__auto_cts__disabled 0
#define R_SERIAL1_TR_CTRL__auto_cts__active 1
#define R_SERIAL1_TR_CTRL__stop_bits__BITNR 4
#define R_SERIAL1_TR_CTRL__stop_bits__WIDTH 1
#define R_SERIAL1_TR_CTRL__stop_bits__one_bit 0
#define R_SERIAL1_TR_CTRL__stop_bits__two_bits 1
#define R_SERIAL1_TR_CTRL__tr_stick_par__BITNR 3
#define R_SERIAL1_TR_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL1_TR_CTRL__tr_stick_par__normal 0
#define R_SERIAL1_TR_CTRL__tr_stick_par__stick 1
#define R_SERIAL1_TR_CTRL__tr_par__BITNR 2
#define R_SERIAL1_TR_CTRL__tr_par__WIDTH 1
#define R_SERIAL1_TR_CTRL__tr_par__even 0
#define R_SERIAL1_TR_CTRL__tr_par__odd 1
#define R_SERIAL1_TR_CTRL__tr_par_en__BITNR 1
#define R_SERIAL1_TR_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL1_TR_CTRL__tr_par_en__disable 0
#define R_SERIAL1_TR_CTRL__tr_par_en__enable 1
#define R_SERIAL1_TR_CTRL__tr_bitnr__BITNR 0
#define R_SERIAL1_TR_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL1_TR_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL1_TR_CTRL__tr_bitnr__tr_7bit 1

#define R_SERIAL1_TR_DATA (IO_TYPECAST_BYTE 0xb0000068)
#define R_SERIAL1_TR_DATA__data_out__BITNR 0
#define R_SERIAL1_TR_DATA__data_out__WIDTH 8

#define R_SERIAL1_READ (IO_TYPECAST_RO_UDWORD 0xb0000068)
#define R_SERIAL1_READ__xoff_detect__BITNR 15
#define R_SERIAL1_READ__xoff_detect__WIDTH 1
#define R_SERIAL1_READ__xoff_detect__no_xoff 0
#define R_SERIAL1_READ__xoff_detect__xoff 1
#define R_SERIAL1_READ__cts___BITNR 14
#define R_SERIAL1_READ__cts___WIDTH 1
#define R_SERIAL1_READ__cts___active 0
#define R_SERIAL1_READ__cts___inactive 1
#define R_SERIAL1_READ__tr_ready__BITNR 13
#define R_SERIAL1_READ__tr_ready__WIDTH 1
#define R_SERIAL1_READ__tr_ready__full 0
#define R_SERIAL1_READ__tr_ready__ready 1
#define R_SERIAL1_READ__rxd__BITNR 12
#define R_SERIAL1_READ__rxd__WIDTH 1
#define R_SERIAL1_READ__overrun__BITNR 11
#define R_SERIAL1_READ__overrun__WIDTH 1
#define R_SERIAL1_READ__overrun__no 0
#define R_SERIAL1_READ__overrun__yes 1
#define R_SERIAL1_READ__par_err__BITNR 10
#define R_SERIAL1_READ__par_err__WIDTH 1
#define R_SERIAL1_READ__par_err__no 0
#define R_SERIAL1_READ__par_err__yes 1
#define R_SERIAL1_READ__framing_err__BITNR 9
#define R_SERIAL1_READ__framing_err__WIDTH 1
#define R_SERIAL1_READ__framing_err__no 0
#define R_SERIAL1_READ__framing_err__yes 1
#define R_SERIAL1_READ__data_avail__BITNR 8
#define R_SERIAL1_READ__data_avail__WIDTH 1
#define R_SERIAL1_READ__data_avail__no 0
#define R_SERIAL1_READ__data_avail__yes 1
#define R_SERIAL1_READ__data_in__BITNR 0
#define R_SERIAL1_READ__data_in__WIDTH 8

#define R_SERIAL1_STATUS (IO_TYPECAST_RO_BYTE 0xb0000069)
#define R_SERIAL1_STATUS__xoff_detect__BITNR 7
#define R_SERIAL1_STATUS__xoff_detect__WIDTH 1
#define R_SERIAL1_STATUS__xoff_detect__no_xoff 0
#define R_SERIAL1_STATUS__xoff_detect__xoff 1
#define R_SERIAL1_STATUS__cts___BITNR 6
#define R_SERIAL1_STATUS__cts___WIDTH 1
#define R_SERIAL1_STATUS__cts___active 0
#define R_SERIAL1_STATUS__cts___inactive 1
#define R_SERIAL1_STATUS__tr_ready__BITNR 5
#define R_SERIAL1_STATUS__tr_ready__WIDTH 1
#define R_SERIAL1_STATUS__tr_ready__full 0
#define R_SERIAL1_STATUS__tr_ready__ready 1
#define R_SERIAL1_STATUS__rxd__BITNR 4
#define R_SERIAL1_STATUS__rxd__WIDTH 1
#define R_SERIAL1_STATUS__overrun__BITNR 3
#define R_SERIAL1_STATUS__overrun__WIDTH 1
#define R_SERIAL1_STATUS__overrun__no 0
#define R_SERIAL1_STATUS__overrun__yes 1
#define R_SERIAL1_STATUS__par_err__BITNR 2
#define R_SERIAL1_STATUS__par_err__WIDTH 1
#define R_SERIAL1_STATUS__par_err__no 0
#define R_SERIAL1_STATUS__par_err__yes 1
#define R_SERIAL1_STATUS__framing_err__BITNR 1
#define R_SERIAL1_STATUS__framing_err__WIDTH 1
#define R_SERIAL1_STATUS__framing_err__no 0
#define R_SERIAL1_STATUS__framing_err__yes 1
#define R_SERIAL1_STATUS__data_avail__BITNR 0
#define R_SERIAL1_STATUS__data_avail__WIDTH 1
#define R_SERIAL1_STATUS__data_avail__no 0
#define R_SERIAL1_STATUS__data_avail__yes 1

#define R_SERIAL1_REC_DATA (IO_TYPECAST_RO_BYTE 0xb0000068)
#define R_SERIAL1_REC_DATA__data_in__BITNR 0
#define R_SERIAL1_REC_DATA__data_in__WIDTH 8

#define R_SERIAL1_XOFF (IO_TYPECAST_UDWORD 0xb000006c)
#define R_SERIAL1_XOFF__tx_stop__BITNR 9
#define R_SERIAL1_XOFF__tx_stop__WIDTH 1
#define R_SERIAL1_XOFF__tx_stop__enable 0
#define R_SERIAL1_XOFF__tx_stop__stop 1
#define R_SERIAL1_XOFF__auto_xoff__BITNR 8
#define R_SERIAL1_XOFF__auto_xoff__WIDTH 1
#define R_SERIAL1_XOFF__auto_xoff__disable 0
#define R_SERIAL1_XOFF__auto_xoff__enable 1
#define R_SERIAL1_XOFF__xoff_char__BITNR 0
#define R_SERIAL1_XOFF__xoff_char__WIDTH 8

#define R_SERIAL2_CTRL (IO_TYPECAST_UDWORD 0xb0000070)
#define R_SERIAL2_CTRL__tr_baud__BITNR 28
#define R_SERIAL2_CTRL__tr_baud__WIDTH 4
#define R_SERIAL2_CTRL__tr_baud__c300Hz 0
#define R_SERIAL2_CTRL__tr_baud__c600Hz 1
#define R_SERIAL2_CTRL__tr_baud__c1200Hz 2
#define R_SERIAL2_CTRL__tr_baud__c2400Hz 3
#define R_SERIAL2_CTRL__tr_baud__c4800Hz 4
#define R_SERIAL2_CTRL__tr_baud__c9600Hz 5
#define R_SERIAL2_CTRL__tr_baud__c19k2Hz 6
#define R_SERIAL2_CTRL__tr_baud__c38k4Hz 7
#define R_SERIAL2_CTRL__tr_baud__c57k6Hz 8
#define R_SERIAL2_CTRL__tr_baud__c115k2Hz 9
#define R_SERIAL2_CTRL__tr_baud__c230k4Hz 10
#define R_SERIAL2_CTRL__tr_baud__c460k8Hz 11
#define R_SERIAL2_CTRL__tr_baud__c921k6Hz 12
#define R_SERIAL2_CTRL__tr_baud__c1843k2Hz 13
#define R_SERIAL2_CTRL__tr_baud__c6250kHz 14
#define R_SERIAL2_CTRL__tr_baud__reserved 15
#define R_SERIAL2_CTRL__rec_baud__BITNR 24
#define R_SERIAL2_CTRL__rec_baud__WIDTH 4
#define R_SERIAL2_CTRL__rec_baud__c300Hz 0
#define R_SERIAL2_CTRL__rec_baud__c600Hz 1
#define R_SERIAL2_CTRL__rec_baud__c1200Hz 2
#define R_SERIAL2_CTRL__rec_baud__c2400Hz 3
#define R_SERIAL2_CTRL__rec_baud__c4800Hz 4
#define R_SERIAL2_CTRL__rec_baud__c9600Hz 5
#define R_SERIAL2_CTRL__rec_baud__c19k2Hz 6
#define R_SERIAL2_CTRL__rec_baud__c38k4Hz 7
#define R_SERIAL2_CTRL__rec_baud__c57k6Hz 8
#define R_SERIAL2_CTRL__rec_baud__c115k2Hz 9
#define R_SERIAL2_CTRL__rec_baud__c230k4Hz 10
#define R_SERIAL2_CTRL__rec_baud__c460k8Hz 11
#define R_SERIAL2_CTRL__rec_baud__c921k6Hz 12
#define R_SERIAL2_CTRL__rec_baud__c1843k2Hz 13
#define R_SERIAL2_CTRL__rec_baud__c6250kHz 14
#define R_SERIAL2_CTRL__rec_baud__reserved 15
#define R_SERIAL2_CTRL__dma_err__BITNR 23
#define R_SERIAL2_CTRL__dma_err__WIDTH 1
#define R_SERIAL2_CTRL__dma_err__stop 0
#define R_SERIAL2_CTRL__dma_err__ignore 1
#define R_SERIAL2_CTRL__rec_enable__BITNR 22
#define R_SERIAL2_CTRL__rec_enable__WIDTH 1
#define R_SERIAL2_CTRL__rec_enable__disable 0
#define R_SERIAL2_CTRL__rec_enable__enable 1
#define R_SERIAL2_CTRL__rts___BITNR 21
#define R_SERIAL2_CTRL__rts___WIDTH 1
#define R_SERIAL2_CTRL__rts___active 0
#define R_SERIAL2_CTRL__rts___inactive 1
#define R_SERIAL2_CTRL__sampling__BITNR 20
#define R_SERIAL2_CTRL__sampling__WIDTH 1
#define R_SERIAL2_CTRL__sampling__middle 0
#define R_SERIAL2_CTRL__sampling__majority 1
#define R_SERIAL2_CTRL__rec_stick_par__BITNR 19
#define R_SERIAL2_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL2_CTRL__rec_stick_par__normal 0
#define R_SERIAL2_CTRL__rec_stick_par__stick 1
#define R_SERIAL2_CTRL__rec_par__BITNR 18
#define R_SERIAL2_CTRL__rec_par__WIDTH 1
#define R_SERIAL2_CTRL__rec_par__even 0
#define R_SERIAL2_CTRL__rec_par__odd 1
#define R_SERIAL2_CTRL__rec_par_en__BITNR 17
#define R_SERIAL2_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL2_CTRL__rec_par_en__disable 0
#define R_SERIAL2_CTRL__rec_par_en__enable 1
#define R_SERIAL2_CTRL__rec_bitnr__BITNR 16
#define R_SERIAL2_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL2_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL2_CTRL__rec_bitnr__rec_7bit 1
#define R_SERIAL2_CTRL__txd__BITNR 15
#define R_SERIAL2_CTRL__txd__WIDTH 1
#define R_SERIAL2_CTRL__tr_enable__BITNR 14
#define R_SERIAL2_CTRL__tr_enable__WIDTH 1
#define R_SERIAL2_CTRL__tr_enable__disable 0
#define R_SERIAL2_CTRL__tr_enable__enable 1
#define R_SERIAL2_CTRL__auto_cts__BITNR 13
#define R_SERIAL2_CTRL__auto_cts__WIDTH 1
#define R_SERIAL2_CTRL__auto_cts__disabled 0
#define R_SERIAL2_CTRL__auto_cts__active 1
#define R_SERIAL2_CTRL__stop_bits__BITNR 12
#define R_SERIAL2_CTRL__stop_bits__WIDTH 1
#define R_SERIAL2_CTRL__stop_bits__one_bit 0
#define R_SERIAL2_CTRL__stop_bits__two_bits 1
#define R_SERIAL2_CTRL__tr_stick_par__BITNR 11
#define R_SERIAL2_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL2_CTRL__tr_stick_par__normal 0
#define R_SERIAL2_CTRL__tr_stick_par__stick 1
#define R_SERIAL2_CTRL__tr_par__BITNR 10
#define R_SERIAL2_CTRL__tr_par__WIDTH 1
#define R_SERIAL2_CTRL__tr_par__even 0
#define R_SERIAL2_CTRL__tr_par__odd 1
#define R_SERIAL2_CTRL__tr_par_en__BITNR 9
#define R_SERIAL2_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL2_CTRL__tr_par_en__disable 0
#define R_SERIAL2_CTRL__tr_par_en__enable 1
#define R_SERIAL2_CTRL__tr_bitnr__BITNR 8
#define R_SERIAL2_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL2_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL2_CTRL__tr_bitnr__tr_7bit 1
#define R_SERIAL2_CTRL__data_out__BITNR 0
#define R_SERIAL2_CTRL__data_out__WIDTH 8

#define R_SERIAL2_BAUD (IO_TYPECAST_BYTE 0xb0000073)
#define R_SERIAL2_BAUD__tr_baud__BITNR 4
#define R_SERIAL2_BAUD__tr_baud__WIDTH 4
#define R_SERIAL2_BAUD__tr_baud__c300Hz 0
#define R_SERIAL2_BAUD__tr_baud__c600Hz 1
#define R_SERIAL2_BAUD__tr_baud__c1200Hz 2
#define R_SERIAL2_BAUD__tr_baud__c2400Hz 3
#define R_SERIAL2_BAUD__tr_baud__c4800Hz 4
#define R_SERIAL2_BAUD__tr_baud__c9600Hz 5
#define R_SERIAL2_BAUD__tr_baud__c19k2Hz 6
#define R_SERIAL2_BAUD__tr_baud__c38k4Hz 7
#define R_SERIAL2_BAUD__tr_baud__c57k6Hz 8
#define R_SERIAL2_BAUD__tr_baud__c115k2Hz 9
#define R_SERIAL2_BAUD__tr_baud__c230k4Hz 10
#define R_SERIAL2_BAUD__tr_baud__c460k8Hz 11
#define R_SERIAL2_BAUD__tr_baud__c921k6Hz 12
#define R_SERIAL2_BAUD__tr_baud__c1843k2Hz 13
#define R_SERIAL2_BAUD__tr_baud__c6250kHz 14
#define R_SERIAL2_BAUD__tr_baud__reserved 15
#define R_SERIAL2_BAUD__rec_baud__BITNR 0
#define R_SERIAL2_BAUD__rec_baud__WIDTH 4
#define R_SERIAL2_BAUD__rec_baud__c300Hz 0
#define R_SERIAL2_BAUD__rec_baud__c600Hz 1
#define R_SERIAL2_BAUD__rec_baud__c1200Hz 2
#define R_SERIAL2_BAUD__rec_baud__c2400Hz 3
#define R_SERIAL2_BAUD__rec_baud__c4800Hz 4
#define R_SERIAL2_BAUD__rec_baud__c9600Hz 5
#define R_SERIAL2_BAUD__rec_baud__c19k2Hz 6
#define R_SERIAL2_BAUD__rec_baud__c38k4Hz 7
#define R_SERIAL2_BAUD__rec_baud__c57k6Hz 8
#define R_SERIAL2_BAUD__rec_baud__c115k2Hz 9
#define R_SERIAL2_BAUD__rec_baud__c230k4Hz 10
#define R_SERIAL2_BAUD__rec_baud__c460k8Hz 11
#define R_SERIAL2_BAUD__rec_baud__c921k6Hz 12
#define R_SERIAL2_BAUD__rec_baud__c1843k2Hz 13
#define R_SERIAL2_BAUD__rec_baud__c6250kHz 14
#define R_SERIAL2_BAUD__rec_baud__reserved 15

#define R_SERIAL2_REC_CTRL (IO_TYPECAST_BYTE 0xb0000072)
#define R_SERIAL2_REC_CTRL__dma_err__BITNR 7
#define R_SERIAL2_REC_CTRL__dma_err__WIDTH 1
#define R_SERIAL2_REC_CTRL__dma_err__stop 0
#define R_SERIAL2_REC_CTRL__dma_err__ignore 1
#define R_SERIAL2_REC_CTRL__rec_enable__BITNR 6
#define R_SERIAL2_REC_CTRL__rec_enable__WIDTH 1
#define R_SERIAL2_REC_CTRL__rec_enable__disable 0
#define R_SERIAL2_REC_CTRL__rec_enable__enable 1
#define R_SERIAL2_REC_CTRL__rts___BITNR 5
#define R_SERIAL2_REC_CTRL__rts___WIDTH 1
#define R_SERIAL2_REC_CTRL__rts___active 0
#define R_SERIAL2_REC_CTRL__rts___inactive 1
#define R_SERIAL2_REC_CTRL__sampling__BITNR 4
#define R_SERIAL2_REC_CTRL__sampling__WIDTH 1
#define R_SERIAL2_REC_CTRL__sampling__middle 0
#define R_SERIAL2_REC_CTRL__sampling__majority 1
#define R_SERIAL2_REC_CTRL__rec_stick_par__BITNR 3
#define R_SERIAL2_REC_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL2_REC_CTRL__rec_stick_par__normal 0
#define R_SERIAL2_REC_CTRL__rec_stick_par__stick 1
#define R_SERIAL2_REC_CTRL__rec_par__BITNR 2
#define R_SERIAL2_REC_CTRL__rec_par__WIDTH 1
#define R_SERIAL2_REC_CTRL__rec_par__even 0
#define R_SERIAL2_REC_CTRL__rec_par__odd 1
#define R_SERIAL2_REC_CTRL__rec_par_en__BITNR 1
#define R_SERIAL2_REC_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL2_REC_CTRL__rec_par_en__disable 0
#define R_SERIAL2_REC_CTRL__rec_par_en__enable 1
#define R_SERIAL2_REC_CTRL__rec_bitnr__BITNR 0
#define R_SERIAL2_REC_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL2_REC_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL2_REC_CTRL__rec_bitnr__rec_7bit 1

#define R_SERIAL2_TR_CTRL (IO_TYPECAST_BYTE 0xb0000071)
#define R_SERIAL2_TR_CTRL__txd__BITNR 7
#define R_SERIAL2_TR_CTRL__txd__WIDTH 1
#define R_SERIAL2_TR_CTRL__tr_enable__BITNR 6
#define R_SERIAL2_TR_CTRL__tr_enable__WIDTH 1
#define R_SERIAL2_TR_CTRL__tr_enable__disable 0
#define R_SERIAL2_TR_CTRL__tr_enable__enable 1
#define R_SERIAL2_TR_CTRL__auto_cts__BITNR 5
#define R_SERIAL2_TR_CTRL__auto_cts__WIDTH 1
#define R_SERIAL2_TR_CTRL__auto_cts__disabled 0
#define R_SERIAL2_TR_CTRL__auto_cts__active 1
#define R_SERIAL2_TR_CTRL__stop_bits__BITNR 4
#define R_SERIAL2_TR_CTRL__stop_bits__WIDTH 1
#define R_SERIAL2_TR_CTRL__stop_bits__one_bit 0
#define R_SERIAL2_TR_CTRL__stop_bits__two_bits 1
#define R_SERIAL2_TR_CTRL__tr_stick_par__BITNR 3
#define R_SERIAL2_TR_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL2_TR_CTRL__tr_stick_par__normal 0
#define R_SERIAL2_TR_CTRL__tr_stick_par__stick 1
#define R_SERIAL2_TR_CTRL__tr_par__BITNR 2
#define R_SERIAL2_TR_CTRL__tr_par__WIDTH 1
#define R_SERIAL2_TR_CTRL__tr_par__even 0
#define R_SERIAL2_TR_CTRL__tr_par__odd 1
#define R_SERIAL2_TR_CTRL__tr_par_en__BITNR 1
#define R_SERIAL2_TR_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL2_TR_CTRL__tr_par_en__disable 0
#define R_SERIAL2_TR_CTRL__tr_par_en__enable 1
#define R_SERIAL2_TR_CTRL__tr_bitnr__BITNR 0
#define R_SERIAL2_TR_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL2_TR_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL2_TR_CTRL__tr_bitnr__tr_7bit 1

#define R_SERIAL2_TR_DATA (IO_TYPECAST_BYTE 0xb0000070)
#define R_SERIAL2_TR_DATA__data_out__BITNR 0
#define R_SERIAL2_TR_DATA__data_out__WIDTH 8

#define R_SERIAL2_READ (IO_TYPECAST_RO_UDWORD 0xb0000070)
#define R_SERIAL2_READ__xoff_detect__BITNR 15
#define R_SERIAL2_READ__xoff_detect__WIDTH 1
#define R_SERIAL2_READ__xoff_detect__no_xoff 0
#define R_SERIAL2_READ__xoff_detect__xoff 1
#define R_SERIAL2_READ__cts___BITNR 14
#define R_SERIAL2_READ__cts___WIDTH 1
#define R_SERIAL2_READ__cts___active 0
#define R_SERIAL2_READ__cts___inactive 1
#define R_SERIAL2_READ__tr_ready__BITNR 13
#define R_SERIAL2_READ__tr_ready__WIDTH 1
#define R_SERIAL2_READ__tr_ready__full 0
#define R_SERIAL2_READ__tr_ready__ready 1
#define R_SERIAL2_READ__rxd__BITNR 12
#define R_SERIAL2_READ__rxd__WIDTH 1
#define R_SERIAL2_READ__overrun__BITNR 11
#define R_SERIAL2_READ__overrun__WIDTH 1
#define R_SERIAL2_READ__overrun__no 0
#define R_SERIAL2_READ__overrun__yes 1
#define R_SERIAL2_READ__par_err__BITNR 10
#define R_SERIAL2_READ__par_err__WIDTH 1
#define R_SERIAL2_READ__par_err__no 0
#define R_SERIAL2_READ__par_err__yes 1
#define R_SERIAL2_READ__framing_err__BITNR 9
#define R_SERIAL2_READ__framing_err__WIDTH 1
#define R_SERIAL2_READ__framing_err__no 0
#define R_SERIAL2_READ__framing_err__yes 1
#define R_SERIAL2_READ__data_avail__BITNR 8
#define R_SERIAL2_READ__data_avail__WIDTH 1
#define R_SERIAL2_READ__data_avail__no 0
#define R_SERIAL2_READ__data_avail__yes 1
#define R_SERIAL2_READ__data_in__BITNR 0
#define R_SERIAL2_READ__data_in__WIDTH 8

#define R_SERIAL2_STATUS (IO_TYPECAST_RO_BYTE 0xb0000071)
#define R_SERIAL2_STATUS__xoff_detect__BITNR 7
#define R_SERIAL2_STATUS__xoff_detect__WIDTH 1
#define R_SERIAL2_STATUS__xoff_detect__no_xoff 0
#define R_SERIAL2_STATUS__xoff_detect__xoff 1
#define R_SERIAL2_STATUS__cts___BITNR 6
#define R_SERIAL2_STATUS__cts___WIDTH 1
#define R_SERIAL2_STATUS__cts___active 0
#define R_SERIAL2_STATUS__cts___inactive 1
#define R_SERIAL2_STATUS__tr_ready__BITNR 5
#define R_SERIAL2_STATUS__tr_ready__WIDTH 1
#define R_SERIAL2_STATUS__tr_ready__full 0
#define R_SERIAL2_STATUS__tr_ready__ready 1
#define R_SERIAL2_STATUS__rxd__BITNR 4
#define R_SERIAL2_STATUS__rxd__WIDTH 1
#define R_SERIAL2_STATUS__overrun__BITNR 3
#define R_SERIAL2_STATUS__overrun__WIDTH 1
#define R_SERIAL2_STATUS__overrun__no 0
#define R_SERIAL2_STATUS__overrun__yes 1
#define R_SERIAL2_STATUS__par_err__BITNR 2
#define R_SERIAL2_STATUS__par_err__WIDTH 1
#define R_SERIAL2_STATUS__par_err__no 0
#define R_SERIAL2_STATUS__par_err__yes 1
#define R_SERIAL2_STATUS__framing_err__BITNR 1
#define R_SERIAL2_STATUS__framing_err__WIDTH 1
#define R_SERIAL2_STATUS__framing_err__no 0
#define R_SERIAL2_STATUS__framing_err__yes 1
#define R_SERIAL2_STATUS__data_avail__BITNR 0
#define R_SERIAL2_STATUS__data_avail__WIDTH 1
#define R_SERIAL2_STATUS__data_avail__no 0
#define R_SERIAL2_STATUS__data_avail__yes 1

#define R_SERIAL2_REC_DATA (IO_TYPECAST_RO_BYTE 0xb0000070)
#define R_SERIAL2_REC_DATA__data_in__BITNR 0
#define R_SERIAL2_REC_DATA__data_in__WIDTH 8

#define R_SERIAL2_XOFF (IO_TYPECAST_UDWORD 0xb0000074)
#define R_SERIAL2_XOFF__tx_stop__BITNR 9
#define R_SERIAL2_XOFF__tx_stop__WIDTH 1
#define R_SERIAL2_XOFF__tx_stop__enable 0
#define R_SERIAL2_XOFF__tx_stop__stop 1
#define R_SERIAL2_XOFF__auto_xoff__BITNR 8
#define R_SERIAL2_XOFF__auto_xoff__WIDTH 1
#define R_SERIAL2_XOFF__auto_xoff__disable 0
#define R_SERIAL2_XOFF__auto_xoff__enable 1
#define R_SERIAL2_XOFF__xoff_char__BITNR 0
#define R_SERIAL2_XOFF__xoff_char__WIDTH 8

#define R_SERIAL3_CTRL (IO_TYPECAST_UDWORD 0xb0000078)
#define R_SERIAL3_CTRL__tr_baud__BITNR 28
#define R_SERIAL3_CTRL__tr_baud__WIDTH 4
#define R_SERIAL3_CTRL__tr_baud__c300Hz 0
#define R_SERIAL3_CTRL__tr_baud__c600Hz 1
#define R_SERIAL3_CTRL__tr_baud__c1200Hz 2
#define R_SERIAL3_CTRL__tr_baud__c2400Hz 3
#define R_SERIAL3_CTRL__tr_baud__c4800Hz 4
#define R_SERIAL3_CTRL__tr_baud__c9600Hz 5
#define R_SERIAL3_CTRL__tr_baud__c19k2Hz 6
#define R_SERIAL3_CTRL__tr_baud__c38k4Hz 7
#define R_SERIAL3_CTRL__tr_baud__c57k6Hz 8
#define R_SERIAL3_CTRL__tr_baud__c115k2Hz 9
#define R_SERIAL3_CTRL__tr_baud__c230k4Hz 10
#define R_SERIAL3_CTRL__tr_baud__c460k8Hz 11
#define R_SERIAL3_CTRL__tr_baud__c921k6Hz 12
#define R_SERIAL3_CTRL__tr_baud__c1843k2Hz 13
#define R_SERIAL3_CTRL__tr_baud__c6250kHz 14
#define R_SERIAL3_CTRL__tr_baud__reserved 15
#define R_SERIAL3_CTRL__rec_baud__BITNR 24
#define R_SERIAL3_CTRL__rec_baud__WIDTH 4
#define R_SERIAL3_CTRL__rec_baud__c300Hz 0
#define R_SERIAL3_CTRL__rec_baud__c600Hz 1
#define R_SERIAL3_CTRL__rec_baud__c1200Hz 2
#define R_SERIAL3_CTRL__rec_baud__c2400Hz 3
#define R_SERIAL3_CTRL__rec_baud__c4800Hz 4
#define R_SERIAL3_CTRL__rec_baud__c9600Hz 5
#define R_SERIAL3_CTRL__rec_baud__c19k2Hz 6
#define R_SERIAL3_CTRL__rec_baud__c38k4Hz 7
#define R_SERIAL3_CTRL__rec_baud__c57k6Hz 8
#define R_SERIAL3_CTRL__rec_baud__c115k2Hz 9
#define R_SERIAL3_CTRL__rec_baud__c230k4Hz 10
#define R_SERIAL3_CTRL__rec_baud__c460k8Hz 11
#define R_SERIAL3_CTRL__rec_baud__c921k6Hz 12
#define R_SERIAL3_CTRL__rec_baud__c1843k2Hz 13
#define R_SERIAL3_CTRL__rec_baud__c6250kHz 14
#define R_SERIAL3_CTRL__rec_baud__reserved 15
#define R_SERIAL3_CTRL__dma_err__BITNR 23
#define R_SERIAL3_CTRL__dma_err__WIDTH 1
#define R_SERIAL3_CTRL__dma_err__stop 0
#define R_SERIAL3_CTRL__dma_err__ignore 1
#define R_SERIAL3_CTRL__rec_enable__BITNR 22
#define R_SERIAL3_CTRL__rec_enable__WIDTH 1
#define R_SERIAL3_CTRL__rec_enable__disable 0
#define R_SERIAL3_CTRL__rec_enable__enable 1
#define R_SERIAL3_CTRL__rts___BITNR 21
#define R_SERIAL3_CTRL__rts___WIDTH 1
#define R_SERIAL3_CTRL__rts___active 0
#define R_SERIAL3_CTRL__rts___inactive 1
#define R_SERIAL3_CTRL__sampling__BITNR 20
#define R_SERIAL3_CTRL__sampling__WIDTH 1
#define R_SERIAL3_CTRL__sampling__middle 0
#define R_SERIAL3_CTRL__sampling__majority 1
#define R_SERIAL3_CTRL__rec_stick_par__BITNR 19
#define R_SERIAL3_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL3_CTRL__rec_stick_par__normal 0
#define R_SERIAL3_CTRL__rec_stick_par__stick 1
#define R_SERIAL3_CTRL__rec_par__BITNR 18
#define R_SERIAL3_CTRL__rec_par__WIDTH 1
#define R_SERIAL3_CTRL__rec_par__even 0
#define R_SERIAL3_CTRL__rec_par__odd 1
#define R_SERIAL3_CTRL__rec_par_en__BITNR 17
#define R_SERIAL3_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL3_CTRL__rec_par_en__disable 0
#define R_SERIAL3_CTRL__rec_par_en__enable 1
#define R_SERIAL3_CTRL__rec_bitnr__BITNR 16
#define R_SERIAL3_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL3_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL3_CTRL__rec_bitnr__rec_7bit 1
#define R_SERIAL3_CTRL__txd__BITNR 15
#define R_SERIAL3_CTRL__txd__WIDTH 1
#define R_SERIAL3_CTRL__tr_enable__BITNR 14
#define R_SERIAL3_CTRL__tr_enable__WIDTH 1
#define R_SERIAL3_CTRL__tr_enable__disable 0
#define R_SERIAL3_CTRL__tr_enable__enable 1
#define R_SERIAL3_CTRL__auto_cts__BITNR 13
#define R_SERIAL3_CTRL__auto_cts__WIDTH 1
#define R_SERIAL3_CTRL__auto_cts__disabled 0
#define R_SERIAL3_CTRL__auto_cts__active 1
#define R_SERIAL3_CTRL__stop_bits__BITNR 12
#define R_SERIAL3_CTRL__stop_bits__WIDTH 1
#define R_SERIAL3_CTRL__stop_bits__one_bit 0
#define R_SERIAL3_CTRL__stop_bits__two_bits 1
#define R_SERIAL3_CTRL__tr_stick_par__BITNR 11
#define R_SERIAL3_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL3_CTRL__tr_stick_par__normal 0
#define R_SERIAL3_CTRL__tr_stick_par__stick 1
#define R_SERIAL3_CTRL__tr_par__BITNR 10
#define R_SERIAL3_CTRL__tr_par__WIDTH 1
#define R_SERIAL3_CTRL__tr_par__even 0
#define R_SERIAL3_CTRL__tr_par__odd 1
#define R_SERIAL3_CTRL__tr_par_en__BITNR 9
#define R_SERIAL3_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL3_CTRL__tr_par_en__disable 0
#define R_SERIAL3_CTRL__tr_par_en__enable 1
#define R_SERIAL3_CTRL__tr_bitnr__BITNR 8
#define R_SERIAL3_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL3_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL3_CTRL__tr_bitnr__tr_7bit 1
#define R_SERIAL3_CTRL__data_out__BITNR 0
#define R_SERIAL3_CTRL__data_out__WIDTH 8

#define R_SERIAL3_BAUD (IO_TYPECAST_BYTE 0xb000007b)
#define R_SERIAL3_BAUD__tr_baud__BITNR 4
#define R_SERIAL3_BAUD__tr_baud__WIDTH 4
#define R_SERIAL3_BAUD__tr_baud__c300Hz 0
#define R_SERIAL3_BAUD__tr_baud__c600Hz 1
#define R_SERIAL3_BAUD__tr_baud__c1200Hz 2
#define R_SERIAL3_BAUD__tr_baud__c2400Hz 3
#define R_SERIAL3_BAUD__tr_baud__c4800Hz 4
#define R_SERIAL3_BAUD__tr_baud__c9600Hz 5
#define R_SERIAL3_BAUD__tr_baud__c19k2Hz 6
#define R_SERIAL3_BAUD__tr_baud__c38k4Hz 7
#define R_SERIAL3_BAUD__tr_baud__c57k6Hz 8
#define R_SERIAL3_BAUD__tr_baud__c115k2Hz 9
#define R_SERIAL3_BAUD__tr_baud__c230k4Hz 10
#define R_SERIAL3_BAUD__tr_baud__c460k8Hz 11
#define R_SERIAL3_BAUD__tr_baud__c921k6Hz 12
#define R_SERIAL3_BAUD__tr_baud__c1843k2Hz 13
#define R_SERIAL3_BAUD__tr_baud__c6250kHz 14
#define R_SERIAL3_BAUD__tr_baud__reserved 15
#define R_SERIAL3_BAUD__rec_baud__BITNR 0
#define R_SERIAL3_BAUD__rec_baud__WIDTH 4
#define R_SERIAL3_BAUD__rec_baud__c300Hz 0
#define R_SERIAL3_BAUD__rec_baud__c600Hz 1
#define R_SERIAL3_BAUD__rec_baud__c1200Hz 2
#define R_SERIAL3_BAUD__rec_baud__c2400Hz 3
#define R_SERIAL3_BAUD__rec_baud__c4800Hz 4
#define R_SERIAL3_BAUD__rec_baud__c9600Hz 5
#define R_SERIAL3_BAUD__rec_baud__c19k2Hz 6
#define R_SERIAL3_BAUD__rec_baud__c38k4Hz 7
#define R_SERIAL3_BAUD__rec_baud__c57k6Hz 8
#define R_SERIAL3_BAUD__rec_baud__c115k2Hz 9
#define R_SERIAL3_BAUD__rec_baud__c230k4Hz 10
#define R_SERIAL3_BAUD__rec_baud__c460k8Hz 11
#define R_SERIAL3_BAUD__rec_baud__c921k6Hz 12
#define R_SERIAL3_BAUD__rec_baud__c1843k2Hz 13
#define R_SERIAL3_BAUD__rec_baud__c6250kHz 14
#define R_SERIAL3_BAUD__rec_baud__reserved 15

#define R_SERIAL3_REC_CTRL (IO_TYPECAST_BYTE 0xb000007a)
#define R_SERIAL3_REC_CTRL__dma_err__BITNR 7
#define R_SERIAL3_REC_CTRL__dma_err__WIDTH 1
#define R_SERIAL3_REC_CTRL__dma_err__stop 0
#define R_SERIAL3_REC_CTRL__dma_err__ignore 1
#define R_SERIAL3_REC_CTRL__rec_enable__BITNR 6
#define R_SERIAL3_REC_CTRL__rec_enable__WIDTH 1
#define R_SERIAL3_REC_CTRL__rec_enable__disable 0
#define R_SERIAL3_REC_CTRL__rec_enable__enable 1
#define R_SERIAL3_REC_CTRL__rts___BITNR 5
#define R_SERIAL3_REC_CTRL__rts___WIDTH 1
#define R_SERIAL3_REC_CTRL__rts___active 0
#define R_SERIAL3_REC_CTRL__rts___inactive 1
#define R_SERIAL3_REC_CTRL__sampling__BITNR 4
#define R_SERIAL3_REC_CTRL__sampling__WIDTH 1
#define R_SERIAL3_REC_CTRL__sampling__middle 0
#define R_SERIAL3_REC_CTRL__sampling__majority 1
#define R_SERIAL3_REC_CTRL__rec_stick_par__BITNR 3
#define R_SERIAL3_REC_CTRL__rec_stick_par__WIDTH 1
#define R_SERIAL3_REC_CTRL__rec_stick_par__normal 0
#define R_SERIAL3_REC_CTRL__rec_stick_par__stick 1
#define R_SERIAL3_REC_CTRL__rec_par__BITNR 2
#define R_SERIAL3_REC_CTRL__rec_par__WIDTH 1
#define R_SERIAL3_REC_CTRL__rec_par__even 0
#define R_SERIAL3_REC_CTRL__rec_par__odd 1
#define R_SERIAL3_REC_CTRL__rec_par_en__BITNR 1
#define R_SERIAL3_REC_CTRL__rec_par_en__WIDTH 1
#define R_SERIAL3_REC_CTRL__rec_par_en__disable 0
#define R_SERIAL3_REC_CTRL__rec_par_en__enable 1
#define R_SERIAL3_REC_CTRL__rec_bitnr__BITNR 0
#define R_SERIAL3_REC_CTRL__rec_bitnr__WIDTH 1
#define R_SERIAL3_REC_CTRL__rec_bitnr__rec_8bit 0
#define R_SERIAL3_REC_CTRL__rec_bitnr__rec_7bit 1

#define R_SERIAL3_TR_CTRL (IO_TYPECAST_BYTE 0xb0000079)
#define R_SERIAL3_TR_CTRL__txd__BITNR 7
#define R_SERIAL3_TR_CTRL__txd__WIDTH 1
#define R_SERIAL3_TR_CTRL__tr_enable__BITNR 6
#define R_SERIAL3_TR_CTRL__tr_enable__WIDTH 1
#define R_SERIAL3_TR_CTRL__tr_enable__disable 0
#define R_SERIAL3_TR_CTRL__tr_enable__enable 1
#define R_SERIAL3_TR_CTRL__auto_cts__BITNR 5
#define R_SERIAL3_TR_CTRL__auto_cts__WIDTH 1
#define R_SERIAL3_TR_CTRL__auto_cts__disabled 0
#define R_SERIAL3_TR_CTRL__auto_cts__active 1
#define R_SERIAL3_TR_CTRL__stop_bits__BITNR 4
#define R_SERIAL3_TR_CTRL__stop_bits__WIDTH 1
#define R_SERIAL3_TR_CTRL__stop_bits__one_bit 0
#define R_SERIAL3_TR_CTRL__stop_bits__two_bits 1
#define R_SERIAL3_TR_CTRL__tr_stick_par__BITNR 3
#define R_SERIAL3_TR_CTRL__tr_stick_par__WIDTH 1
#define R_SERIAL3_TR_CTRL__tr_stick_par__normal 0
#define R_SERIAL3_TR_CTRL__tr_stick_par__stick 1
#define R_SERIAL3_TR_CTRL__tr_par__BITNR 2
#define R_SERIAL3_TR_CTRL__tr_par__WIDTH 1
#define R_SERIAL3_TR_CTRL__tr_par__even 0
#define R_SERIAL3_TR_CTRL__tr_par__odd 1
#define R_SERIAL3_TR_CTRL__tr_par_en__BITNR 1
#define R_SERIAL3_TR_CTRL__tr_par_en__WIDTH 1
#define R_SERIAL3_TR_CTRL__tr_par_en__disable 0
#define R_SERIAL3_TR_CTRL__tr_par_en__enable 1
#define R_SERIAL3_TR_CTRL__tr_bitnr__BITNR 0
#define R_SERIAL3_TR_CTRL__tr_bitnr__WIDTH 1
#define R_SERIAL3_TR_CTRL__tr_bitnr__tr_8bit 0
#define R_SERIAL3_TR_CTRL__tr_bitnr__tr_7bit 1

#define R_SERIAL3_TR_DATA (IO_TYPECAST_BYTE 0xb0000078)
#define R_SERIAL3_TR_DATA__data_out__BITNR 0
#define R_SERIAL3_TR_DATA__data_out__WIDTH 8

#define R_SERIAL3_READ (IO_TYPECAST_RO_UDWORD 0xb0000078)
#define R_SERIAL3_READ__xoff_detect__BITNR 15
#define R_SERIAL3_READ__xoff_detect__WIDTH 1
#define R_SERIAL3_READ__xoff_detect__no_xoff 0
#define R_SERIAL3_READ__xoff_detect__xoff 1
#define R_SERIAL3_READ__cts___BITNR 14
#define R_SERIAL3_READ__cts___WIDTH 1
#define R_SERIAL3_READ__cts___active 0
#define R_SERIAL3_READ__cts___inactive 1
#define R_SERIAL3_READ__tr_ready__BITNR 13
#define R_SERIAL3_READ__tr_ready__WIDTH 1
#define R_SERIAL3_READ__tr_ready__full 0
#define R_SERIAL3_READ__tr_ready__ready 1
#define R_SERIAL3_READ__rxd__BITNR 12
#define R_SERIAL3_READ__rxd__WIDTH 1
#define R_SERIAL3_READ__overrun__BITNR 11
#define R_SERIAL3_READ__overrun__WIDTH 1
#define R_SERIAL3_READ__overrun__no 0
#define R_SERIAL3_READ__overrun__yes 1
#define R_SERIAL3_READ__par_err__BITNR 10
#define R_SERIAL3_READ__par_err__WIDTH 1
#define R_SERIAL3_READ__par_err__no 0
#define R_SERIAL3_READ__par_err__yes 1
#define R_SERIAL3_READ__framing_err__BITNR 9
#define R_SERIAL3_READ__framing_err__WIDTH 1
#define R_SERIAL3_READ__framing_err__no 0
#define R_SERIAL3_READ__framing_err__yes 1
#define R_SERIAL3_READ__data_avail__BITNR 8
#define R_SERIAL3_READ__data_avail__WIDTH 1
#define R_SERIAL3_READ__data_avail__no 0
#define R_SERIAL3_READ__data_avail__yes 1
#define R_SERIAL3_READ__data_in__BITNR 0
#define R_SERIAL3_READ__data_in__WIDTH 8

#define R_SERIAL3_STATUS (IO_TYPECAST_RO_BYTE 0xb0000079)
#define R_SERIAL3_STATUS__xoff_detect__BITNR 7
#define R_SERIAL3_STATUS__xoff_detect__WIDTH 1
#define R_SERIAL3_STATUS__xoff_detect__no_xoff 0
#define R_SERIAL3_STATUS__xoff_detect__xoff 1
#define R_SERIAL3_STATUS__cts___BITNR 6
#define R_SERIAL3_STATUS__cts___WIDTH 1
#define R_SERIAL3_STATUS__cts___active 0
#define R_SERIAL3_STATUS__cts___inactive 1
#define R_SERIAL3_STATUS__tr_ready__BITNR 5
#define R_SERIAL3_STATUS__tr_ready__WIDTH 1
#define R_SERIAL3_STATUS__tr_ready__full 0
#define R_SERIAL3_STATUS__tr_ready__ready 1
#define R_SERIAL3_STATUS__rxd__BITNR 4
#define R_SERIAL3_STATUS__rxd__WIDTH 1
#define R_SERIAL3_STATUS__overrun__BITNR 3
#define R_SERIAL3_STATUS__overrun__WIDTH 1
#define R_SERIAL3_STATUS__overrun__no 0
#define R_SERIAL3_STATUS__overrun__yes 1
#define R_SERIAL3_STATUS__par_err__BITNR 2
#define R_SERIAL3_STATUS__par_err__WIDTH 1
#define R_SERIAL3_STATUS__par_err__no 0
#define R_SERIAL3_STATUS__par_err__yes 1
#define R_SERIAL3_STATUS__framing_err__BITNR 1
#define R_SERIAL3_STATUS__framing_err__WIDTH 1
#define R_SERIAL3_STATUS__framing_err__no 0
#define R_SERIAL3_STATUS__framing_err__yes 1
#define R_SERIAL3_STATUS__data_avail__BITNR 0
#define R_SERIAL3_STATUS__data_avail__WIDTH 1
#define R_SERIAL3_STATUS__data_avail__no 0
#define R_SERIAL3_STATUS__data_avail__yes 1

#define R_SERIAL3_REC_DATA (IO_TYPECAST_RO_BYTE 0xb0000078)
#define R_SERIAL3_REC_DATA__data_in__BITNR 0
#define R_SERIAL3_REC_DATA__data_in__WIDTH 8

#define R_SERIAL3_XOFF (IO_TYPECAST_UDWORD 0xb000007c)
#define R_SERIAL3_XOFF__tx_stop__BITNR 9
#define R_SERIAL3_XOFF__tx_stop__WIDTH 1
#define R_SERIAL3_XOFF__tx_stop__enable 0
#define R_SERIAL3_XOFF__tx_stop__stop 1
#define R_SERIAL3_XOFF__auto_xoff__BITNR 8
#define R_SERIAL3_XOFF__auto_xoff__WIDTH 1
#define R_SERIAL3_XOFF__auto_xoff__disable 0
#define R_SERIAL3_XOFF__auto_xoff__enable 1
#define R_SERIAL3_XOFF__xoff_char__BITNR 0
#define R_SERIAL3_XOFF__xoff_char__WIDTH 8

#define R_ALT_SER_BAUDRATE (IO_TYPECAST_UDWORD 0xb000005c)
#define R_ALT_SER_BAUDRATE__ser3_tr__BITNR 28
#define R_ALT_SER_BAUDRATE__ser3_tr__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser3_tr__normal 0
#define R_ALT_SER_BAUDRATE__ser3_tr__prescale 1
#define R_ALT_SER_BAUDRATE__ser3_tr__extern 2
#define R_ALT_SER_BAUDRATE__ser3_tr__timer 3
#define R_ALT_SER_BAUDRATE__ser3_rec__BITNR 24
#define R_ALT_SER_BAUDRATE__ser3_rec__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser3_rec__normal 0
#define R_ALT_SER_BAUDRATE__ser3_rec__prescale 1
#define R_ALT_SER_BAUDRATE__ser3_rec__extern 2
#define R_ALT_SER_BAUDRATE__ser3_rec__timer 3
#define R_ALT_SER_BAUDRATE__ser2_tr__BITNR 20
#define R_ALT_SER_BAUDRATE__ser2_tr__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser2_tr__normal 0
#define R_ALT_SER_BAUDRATE__ser2_tr__prescale 1
#define R_ALT_SER_BAUDRATE__ser2_tr__extern 2
#define R_ALT_SER_BAUDRATE__ser2_tr__timer 3
#define R_ALT_SER_BAUDRATE__ser2_rec__BITNR 16
#define R_ALT_SER_BAUDRATE__ser2_rec__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser2_rec__normal 0
#define R_ALT_SER_BAUDRATE__ser2_rec__prescale 1
#define R_ALT_SER_BAUDRATE__ser2_rec__extern 2
#define R_ALT_SER_BAUDRATE__ser2_rec__timer 3
#define R_ALT_SER_BAUDRATE__ser1_tr__BITNR 12
#define R_ALT_SER_BAUDRATE__ser1_tr__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser1_tr__normal 0
#define R_ALT_SER_BAUDRATE__ser1_tr__prescale 1
#define R_ALT_SER_BAUDRATE__ser1_tr__extern 2
#define R_ALT_SER_BAUDRATE__ser1_tr__timer 3
#define R_ALT_SER_BAUDRATE__ser1_rec__BITNR 8
#define R_ALT_SER_BAUDRATE__ser1_rec__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser1_rec__normal 0
#define R_ALT_SER_BAUDRATE__ser1_rec__prescale 1
#define R_ALT_SER_BAUDRATE__ser1_rec__extern 2
#define R_ALT_SER_BAUDRATE__ser1_rec__timer 3
#define R_ALT_SER_BAUDRATE__ser0_tr__BITNR 4
#define R_ALT_SER_BAUDRATE__ser0_tr__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser0_tr__normal 0
#define R_ALT_SER_BAUDRATE__ser0_tr__prescale 1
#define R_ALT_SER_BAUDRATE__ser0_tr__extern 2
#define R_ALT_SER_BAUDRATE__ser0_tr__timer 3
#define R_ALT_SER_BAUDRATE__ser0_rec__BITNR 0
#define R_ALT_SER_BAUDRATE__ser0_rec__WIDTH 2
#define R_ALT_SER_BAUDRATE__ser0_rec__normal 0
#define R_ALT_SER_BAUDRATE__ser0_rec__prescale 1
#define R_ALT_SER_BAUDRATE__ser0_rec__extern 2
#define R_ALT_SER_BAUDRATE__ser0_rec__timer 3

/*
!* Network interface registers
!*/

#define R_NETWORK_SA_0 (IO_TYPECAST_UDWORD 0xb0000080)
#define R_NETWORK_SA_0__ma0_low__BITNR 0
#define R_NETWORK_SA_0__ma0_low__WIDTH 32

#define R_NETWORK_SA_1 (IO_TYPECAST_UDWORD 0xb0000084)
#define R_NETWORK_SA_1__ma1_low__BITNR 16
#define R_NETWORK_SA_1__ma1_low__WIDTH 16
#define R_NETWORK_SA_1__ma0_high__BITNR 0
#define R_NETWORK_SA_1__ma0_high__WIDTH 16

#define R_NETWORK_SA_2 (IO_TYPECAST_UDWORD 0xb0000088)
#define R_NETWORK_SA_2__ma1_high__BITNR 0
#define R_NETWORK_SA_2__ma1_high__WIDTH 32

#define R_NETWORK_GA_0 (IO_TYPECAST_UDWORD 0xb000008c)
#define R_NETWORK_GA_0__ga_low__BITNR 0
#define R_NETWORK_GA_0__ga_low__WIDTH 32

#define R_NETWORK_GA_1 (IO_TYPECAST_UDWORD 0xb0000090)
#define R_NETWORK_GA_1__ga_high__BITNR 0
#define R_NETWORK_GA_1__ga_high__WIDTH 32

#define R_NETWORK_REC_CONFIG (IO_TYPECAST_UDWORD 0xb0000094)
#define R_NETWORK_REC_CONFIG__max_size__BITNR 10
#define R_NETWORK_REC_CONFIG__max_size__WIDTH 1
#define R_NETWORK_REC_CONFIG__max_size__size1518 0
#define R_NETWORK_REC_CONFIG__max_size__size1522 1
#define R_NETWORK_REC_CONFIG__duplex__BITNR 9
#define R_NETWORK_REC_CONFIG__duplex__WIDTH 1
#define R_NETWORK_REC_CONFIG__duplex__full 1
#define R_NETWORK_REC_CONFIG__duplex__half 0
#define R_NETWORK_REC_CONFIG__bad_crc__BITNR 8
#define R_NETWORK_REC_CONFIG__bad_crc__WIDTH 1
#define R_NETWORK_REC_CONFIG__bad_crc__receive 1
#define R_NETWORK_REC_CONFIG__bad_crc__discard 0
#define R_NETWORK_REC_CONFIG__oversize__BITNR 7
#define R_NETWORK_REC_CONFIG__oversize__WIDTH 1
#define R_NETWORK_REC_CONFIG__oversize__receive 1
#define R_NETWORK_REC_CONFIG__oversize__discard 0
#define R_NETWORK_REC_CONFIG__undersize__BITNR 6
#define R_NETWORK_REC_CONFIG__undersize__WIDTH 1
#define R_NETWORK_REC_CONFIG__undersize__receive 1
#define R_NETWORK_REC_CONFIG__undersize__discard 0
#define R_NETWORK_REC_CONFIG__all_roots__BITNR 5
#define R_NETWORK_REC_CONFIG__all_roots__WIDTH 1
#define R_NETWORK_REC_CONFIG__all_roots__receive 1
#define R_NETWORK_REC_CONFIG__all_roots__discard 0
#define R_NETWORK_REC_CONFIG__tr_broadcast__BITNR 4
#define R_NETWORK_REC_CONFIG__tr_broadcast__WIDTH 1
#define R_NETWORK_REC_CONFIG__tr_broadcast__receive 1
#define R_NETWORK_REC_CONFIG__tr_broadcast__discard 0
#define R_NETWORK_REC_CONFIG__broadcast__BITNR 3
#define R_NETWORK_REC_CONFIG__broadcast__WIDTH 1
#define R_NETWORK_REC_CONFIG__broadcast__receive 1
#define R_NETWORK_REC_CONFIG__broadcast__discard 0
#define R_NETWORK_REC_CONFIG__individual__BITNR 2
#define R_NETWORK_REC_CONFIG__individual__WIDTH 1
#define R_NETWORK_REC_CONFIG__individual__receive 1
#define R_NETWORK_REC_CONFIG__individual__discard 0
#define R_NETWORK_REC_CONFIG__ma1__BITNR 1
#define R_NETWORK_REC_CONFIG__ma1__WIDTH 1
#define R_NETWORK_REC_CONFIG__ma1__enable 1
#define R_NETWORK_REC_CONFIG__ma1__disable 0
#define R_NETWORK_REC_CONFIG__ma0__BITNR 0
#define R_NETWORK_REC_CONFIG__ma0__WIDTH 1
#define R_NETWORK_REC_CONFIG__ma0__enable 1
#define R_NETWORK_REC_CONFIG__ma0__disable 0

#define R_NETWORK_GEN_CONFIG (IO_TYPECAST_UDWORD 0xb0000098)
#define R_NETWORK_GEN_CONFIG__loopback__BITNR 5
#define R_NETWORK_GEN_CONFIG__loopback__WIDTH 1
#define R_NETWORK_GEN_CONFIG__loopback__on 1
#define R_NETWORK_GEN_CONFIG__loopback__off 0
#define R_NETWORK_GEN_CONFIG__frame__BITNR 4
#define R_NETWORK_GEN_CONFIG__frame__WIDTH 1
#define R_NETWORK_GEN_CONFIG__frame__tokenr 1
#define R_NETWORK_GEN_CONFIG__frame__ether 0
#define R_NETWORK_GEN_CONFIG__vg__BITNR 3
#define R_NETWORK_GEN_CONFIG__vg__WIDTH 1
#define R_NETWORK_GEN_CONFIG__vg__on 1
#define R_NETWORK_GEN_CONFIG__vg__off 0
#define R_NETWORK_GEN_CONFIG__phy__BITNR 1
#define R_NETWORK_GEN_CONFIG__phy__WIDTH 2
#define R_NETWORK_GEN_CONFIG__phy__sni 0
#define R_NETWORK_GEN_CONFIG__phy__mii_clk 1
#define R_NETWORK_GEN_CONFIG__phy__mii_err 2
#define R_NETWORK_GEN_CONFIG__phy__mii_req 3
#define R_NETWORK_GEN_CONFIG__enable__BITNR 0
#define R_NETWORK_GEN_CONFIG__enable__WIDTH 1
#define R_NETWORK_GEN_CONFIG__enable__on 1
#define R_NETWORK_GEN_CONFIG__enable__off 0

#define R_NETWORK_TR_CTRL (IO_TYPECAST_UDWORD 0xb000009c)
#define R_NETWORK_TR_CTRL__clr_error__BITNR 8
#define R_NETWORK_TR_CTRL__clr_error__WIDTH 1
#define R_NETWORK_TR_CTRL__clr_error__clr 1
#define R_NETWORK_TR_CTRL__clr_error__nop 0
#define R_NETWORK_TR_CTRL__delay__BITNR 5
#define R_NETWORK_TR_CTRL__delay__WIDTH 1
#define R_NETWORK_TR_CTRL__delay__d2us 1
#define R_NETWORK_TR_CTRL__delay__none 0
#define R_NETWORK_TR_CTRL__cancel__BITNR 4
#define R_NETWORK_TR_CTRL__cancel__WIDTH 1
#define R_NETWORK_TR_CTRL__cancel__do 1
#define R_NETWORK_TR_CTRL__cancel__dont 0
#define R_NETWORK_TR_CTRL__cd__BITNR 3
#define R_NETWORK_TR_CTRL__cd__WIDTH 1
#define R_NETWORK_TR_CTRL__cd__enable 0
#define R_NETWORK_TR_CTRL__cd__disable 1
#define R_NETWORK_TR_CTRL__cd__ack_col 0
#define R_NETWORK_TR_CTRL__cd__ack_crs 1
#define R_NETWORK_TR_CTRL__retry__BITNR 2
#define R_NETWORK_TR_CTRL__retry__WIDTH 1
#define R_NETWORK_TR_CTRL__retry__enable 0
#define R_NETWORK_TR_CTRL__retry__disable 1
#define R_NETWORK_TR_CTRL__pad__BITNR 1
#define R_NETWORK_TR_CTRL__pad__WIDTH 1
#define R_NETWORK_TR_CTRL__pad__enable 1
#define R_NETWORK_TR_CTRL__pad__disable 0
#define R_NETWORK_TR_CTRL__crc__BITNR 0
#define R_NETWORK_TR_CTRL__crc__WIDTH 1
#define R_NETWORK_TR_CTRL__crc__enable 0
#define R_NETWORK_TR_CTRL__crc__disable 1

#define R_NETWORK_MGM_CTRL (IO_TYPECAST_UDWORD 0xb00000a0)
#define R_NETWORK_MGM_CTRL__txd_pins__BITNR 4
#define R_NETWORK_MGM_CTRL__txd_pins__WIDTH 4
#define R_NETWORK_MGM_CTRL__txer_pin__BITNR 3
#define R_NETWORK_MGM_CTRL__txer_pin__WIDTH 1
#define R_NETWORK_MGM_CTRL__mdck__BITNR 2
#define R_NETWORK_MGM_CTRL__mdck__WIDTH 1
#define R_NETWORK_MGM_CTRL__mdoe__BITNR 1
#define R_NETWORK_MGM_CTRL__mdoe__WIDTH 1
#define R_NETWORK_MGM_CTRL__mdoe__enable 1
#define R_NETWORK_MGM_CTRL__mdoe__disable 0
#define R_NETWORK_MGM_CTRL__mdio__BITNR 0
#define R_NETWORK_MGM_CTRL__mdio__WIDTH 1

#define R_NETWORK_STAT (IO_TYPECAST_RO_UDWORD 0xb00000a0)
#define R_NETWORK_STAT__rxd_pins__BITNR 4
#define R_NETWORK_STAT__rxd_pins__WIDTH 4
#define R_NETWORK_STAT__rxer__BITNR 3
#define R_NETWORK_STAT__rxer__WIDTH 1
#define R_NETWORK_STAT__underrun__BITNR 2
#define R_NETWORK_STAT__underrun__WIDTH 1
#define R_NETWORK_STAT__underrun__yes 1
#define R_NETWORK_STAT__underrun__no 0
#define R_NETWORK_STAT__exc_col__BITNR 1
#define R_NETWORK_STAT__exc_col__WIDTH 1
#define R_NETWORK_STAT__exc_col__yes 1
#define R_NETWORK_STAT__exc_col__no 0
#define R_NETWORK_STAT__mdio__BITNR 0
#define R_NETWORK_STAT__mdio__WIDTH 1

#define R_REC_COUNTERS (IO_TYPECAST_RO_UDWORD 0xb00000a4)
#define R_REC_COUNTERS__congestion__BITNR 24
#define R_REC_COUNTERS__congestion__WIDTH 8
#define R_REC_COUNTERS__oversize__BITNR 16
#define R_REC_COUNTERS__oversize__WIDTH 8
#define R_REC_COUNTERS__alignment_error__BITNR 8
#define R_REC_COUNTERS__alignment_error__WIDTH 8
#define R_REC_COUNTERS__crc_error__BITNR 0
#define R_REC_COUNTERS__crc_error__WIDTH 8

#define R_TR_COUNTERS (IO_TYPECAST_RO_UDWORD 0xb00000a8)
#define R_TR_COUNTERS__deferred__BITNR 24
#define R_TR_COUNTERS__deferred__WIDTH 8
#define R_TR_COUNTERS__late_col__BITNR 16
#define R_TR_COUNTERS__late_col__WIDTH 8
#define R_TR_COUNTERS__multiple_col__BITNR 8
#define R_TR_COUNTERS__multiple_col__WIDTH 8
#define R_TR_COUNTERS__single_col__BITNR 0
#define R_TR_COUNTERS__single_col__WIDTH 8

#define R_PHY_COUNTERS (IO_TYPECAST_RO_UDWORD 0xb00000ac)
#define R_PHY_COUNTERS__sqe_test_error__BITNR 8
#define R_PHY_COUNTERS__sqe_test_error__WIDTH 8
#define R_PHY_COUNTERS__carrier_loss__BITNR 0
#define R_PHY_COUNTERS__carrier_loss__WIDTH 8

/*
!* Parallel printer port registers
!*/

#define R_PAR0_CTRL_DATA (IO_TYPECAST_UDWORD 0xb0000040)
#define R_PAR0_CTRL_DATA__peri_int__BITNR 24
#define R_PAR0_CTRL_DATA__peri_int__WIDTH 1
#define R_PAR0_CTRL_DATA__peri_int__ack 1
#define R_PAR0_CTRL_DATA__peri_int__nop 0
#define R_PAR0_CTRL_DATA__oe__BITNR 20
#define R_PAR0_CTRL_DATA__oe__WIDTH 1
#define R_PAR0_CTRL_DATA__oe__enable 1
#define R_PAR0_CTRL_DATA__oe__disable 0
#define R_PAR0_CTRL_DATA__seli__BITNR 19
#define R_PAR0_CTRL_DATA__seli__WIDTH 1
#define R_PAR0_CTRL_DATA__seli__active 1
#define R_PAR0_CTRL_DATA__seli__inactive 0
#define R_PAR0_CTRL_DATA__autofd__BITNR 18
#define R_PAR0_CTRL_DATA__autofd__WIDTH 1
#define R_PAR0_CTRL_DATA__autofd__active 1
#define R_PAR0_CTRL_DATA__autofd__inactive 0
#define R_PAR0_CTRL_DATA__strb__BITNR 17
#define R_PAR0_CTRL_DATA__strb__WIDTH 1
#define R_PAR0_CTRL_DATA__strb__active 1
#define R_PAR0_CTRL_DATA__strb__inactive 0
#define R_PAR0_CTRL_DATA__init__BITNR 16
#define R_PAR0_CTRL_DATA__init__WIDTH 1
#define R_PAR0_CTRL_DATA__init__active 1
#define R_PAR0_CTRL_DATA__init__inactive 0
#define R_PAR0_CTRL_DATA__ecp_cmd__BITNR 8
#define R_PAR0_CTRL_DATA__ecp_cmd__WIDTH 1
#define R_PAR0_CTRL_DATA__ecp_cmd__command 1
#define R_PAR0_CTRL_DATA__ecp_cmd__data 0
#define R_PAR0_CTRL_DATA__data__BITNR 0
#define R_PAR0_CTRL_DATA__data__WIDTH 8

#define R_PAR0_CTRL (IO_TYPECAST_BYTE 0xb0000042)
#define R_PAR0_CTRL__ctrl__BITNR 0
#define R_PAR0_CTRL__ctrl__WIDTH 5

#define R_PAR0_STATUS_DATA (IO_TYPECAST_RO_UDWORD 0xb0000040)
#define R_PAR0_STATUS_DATA__mode__BITNR 29
#define R_PAR0_STATUS_DATA__mode__WIDTH 3
#define R_PAR0_STATUS_DATA__mode__manual 0
#define R_PAR0_STATUS_DATA__mode__centronics 1
#define R_PAR0_STATUS_DATA__mode__fastbyte 2
#define R_PAR0_STATUS_DATA__mode__nibble 3
#define R_PAR0_STATUS_DATA__mode__byte 4
#define R_PAR0_STATUS_DATA__mode__ecp_fwd 5
#define R_PAR0_STATUS_DATA__mode__ecp_rev 6
#define R_PAR0_STATUS_DATA__mode__off 7
#define R_PAR0_STATUS_DATA__mode__epp_wr1 5
#define R_PAR0_STATUS_DATA__mode__epp_wr2 6
#define R_PAR0_STATUS_DATA__mode__epp_wr3 7
#define R_PAR0_STATUS_DATA__mode__epp_rd 0
#define R_PAR0_STATUS_DATA__perr__BITNR 28
#define R_PAR0_STATUS_DATA__perr__WIDTH 1
#define R_PAR0_STATUS_DATA__perr__active 1
#define R_PAR0_STATUS_DATA__perr__inactive 0
#define R_PAR0_STATUS_DATA__ack__BITNR 27
#define R_PAR0_STATUS_DATA__ack__WIDTH 1
#define R_PAR0_STATUS_DATA__ack__active 0
#define R_PAR0_STATUS_DATA__ack__inactive 1
#define R_PAR0_STATUS_DATA__busy__BITNR 26
#define R_PAR0_STATUS_DATA__busy__WIDTH 1
#define R_PAR0_STATUS_DATA__busy__active 1
#define R_PAR0_STATUS_DATA__busy__inactive 0
#define R_PAR0_STATUS_DATA__fault__BITNR 25
#define R_PAR0_STATUS_DATA__fault__WIDTH 1
#define R_PAR0_STATUS_DATA__fault__active 0
#define R_PAR0_STATUS_DATA__fault__inactive 1
#define R_PAR0_STATUS_DATA__sel__BITNR 24
#define R_PAR0_STATUS_DATA__sel__WIDTH 1
#define R_PAR0_STATUS_DATA__sel__active 1
#define R_PAR0_STATUS_DATA__sel__inactive 0
#define R_PAR0_STATUS_DATA__ext_mode__BITNR 23
#define R_PAR0_STATUS_DATA__ext_mode__WIDTH 1
#define R_PAR0_STATUS_DATA__ext_mode__enable 1
#define R_PAR0_STATUS_DATA__ext_mode__disable 0
#define R_PAR0_STATUS_DATA__ecp_16__BITNR 22
#define R_PAR0_STATUS_DATA__ecp_16__WIDTH 1
#define R_PAR0_STATUS_DATA__ecp_16__active 1
#define R_PAR0_STATUS_DATA__ecp_16__inactive 0
#define R_PAR0_STATUS_DATA__tr_rdy__BITNR 17
#define R_PAR0_STATUS_DATA__tr_rdy__WIDTH 1
#define R_PAR0_STATUS_DATA__tr_rdy__ready 1
#define R_PAR0_STATUS_DATA__tr_rdy__busy 0
#define R_PAR0_STATUS_DATA__dav__BITNR 16
#define R_PAR0_STATUS_DATA__dav__WIDTH 1
#define R_PAR0_STATUS_DATA__dav__data 1
#define R_PAR0_STATUS_DATA__dav__nodata 0
#define R_PAR0_STATUS_DATA__ecp_cmd__BITNR 8
#define R_PAR0_STATUS_DATA__ecp_cmd__WIDTH 1
#define R_PAR0_STATUS_DATA__ecp_cmd__command 1
#define R_PAR0_STATUS_DATA__ecp_cmd__data 0
#define R_PAR0_STATUS_DATA__data__BITNR 0
#define R_PAR0_STATUS_DATA__data__WIDTH 8

#define R_PAR0_STATUS (IO_TYPECAST_RO_UWORD 0xb0000042)
#define R_PAR0_STATUS__mode__BITNR 13
#define R_PAR0_STATUS__mode__WIDTH 3
#define R_PAR0_STATUS__mode__manual 0
#define R_PAR0_STATUS__mode__centronics 1
#define R_PAR0_STATUS__mode__fastbyte 2
#define R_PAR0_STATUS__mode__nibble 3
#define R_PAR0_STATUS__mode__byte 4
#define R_PAR0_STATUS__mode__ecp_fwd 5
#define R_PAR0_STATUS__mode__ecp_rev 6
#define R_PAR0_STATUS__mode__off 7
#define R_PAR0_STATUS__mode__epp_wr1 5
#define R_PAR0_STATUS__mode__epp_wr2 6
#define R_PAR0_STATUS__mode__epp_wr3 7
#define R_PAR0_STATUS__mode__epp_rd 0
#define R_PAR0_STATUS__perr__BITNR 12
#define R_PAR0_STATUS__perr__WIDTH 1
#define R_PAR0_STATUS__perr__active 1
#define R_PAR0_STATUS__perr__inactive 0
#define R_PAR0_STATUS__ack__BITNR 11
#define R_PAR0_STATUS__ack__WIDTH 1
#define R_PAR0_STATUS__ack__active 0
#define R_PAR0_STATUS__ack__inactive 1
#define R_PAR0_STATUS__busy__BITNR 10
#define R_PAR0_STATUS__busy__WIDTH 1
#define R_PAR0_STATUS__busy__active 1
#define R_PAR0_STATUS__busy__inactive 0
#define R_PAR0_STATUS__fault__BITNR 9
#define R_PAR0_STATUS__fault__WIDTH 1
#define R_PAR0_STATUS__fault__active 0
#define R_PAR0_STATUS__fault__inactive 1
#define R_PAR0_STATUS__sel__BITNR 8
#define R_PAR0_STATUS__sel__WIDTH 1
#define R_PAR0_STATUS__sel__active 1
#define R_PAR0_STATUS__sel__inactive 0
#define R_PAR0_STATUS__ext_mode__BITNR 7
#define R_PAR0_STATUS__ext_mode__WIDTH 1
#define R_PAR0_STATUS__ext_mode__enable 1
#define R_PAR0_STATUS__ext_mode__disable 0
#define R_PAR0_STATUS__ecp_16__BITNR 6
#define R_PAR0_STATUS__ecp_16__WIDTH 1
#define R_PAR0_STATUS__ecp_16__active 1
#define R_PAR0_STATUS__ecp_16__inactive 0
#define R_PAR0_STATUS__tr_rdy__BITNR 1
#define R_PAR0_STATUS__tr_rdy__WIDTH 1
#define R_PAR0_STATUS__tr_rdy__ready 1
#define R_PAR0_STATUS__tr_rdy__busy 0
#define R_PAR0_STATUS__dav__BITNR 0
#define R_PAR0_STATUS__dav__WIDTH 1
#define R_PAR0_STATUS__dav__data 1
#define R_PAR0_STATUS__dav__nodata 0

#define R_PAR_ECP16_DATA (IO_TYPECAST_UWORD 0xb0000040)
#define R_PAR_ECP16_DATA__data__BITNR 0
#define R_PAR_ECP16_DATA__data__WIDTH 16

#define R_PAR0_CONFIG (IO_TYPECAST_UDWORD 0xb0000044)
#define R_PAR0_CONFIG__ioe__BITNR 25
#define R_PAR0_CONFIG__ioe__WIDTH 1
#define R_PAR0_CONFIG__ioe__inv 1
#define R_PAR0_CONFIG__ioe__noninv 0
#define R_PAR0_CONFIG__iseli__BITNR 24
#define R_PAR0_CONFIG__iseli__WIDTH 1
#define R_PAR0_CONFIG__iseli__inv 1
#define R_PAR0_CONFIG__iseli__noninv 0
#define R_PAR0_CONFIG__iautofd__BITNR 23
#define R_PAR0_CONFIG__iautofd__WIDTH 1
#define R_PAR0_CONFIG__iautofd__inv 1
#define R_PAR0_CONFIG__iautofd__noninv 0
#define R_PAR0_CONFIG__istrb__BITNR 22
#define R_PAR0_CONFIG__istrb__WIDTH 1
#define R_PAR0_CONFIG__istrb__inv 1
#define R_PAR0_CONFIG__istrb__noninv 0
#define R_PAR0_CONFIG__iinit__BITNR 21
#define R_PAR0_CONFIG__iinit__WIDTH 1
#define R_PAR0_CONFIG__iinit__inv 1
#define R_PAR0_CONFIG__iinit__noninv 0
#define R_PAR0_CONFIG__iperr__BITNR 20
#define R_PAR0_CONFIG__iperr__WIDTH 1
#define R_PAR0_CONFIG__iperr__inv 1
#define R_PAR0_CONFIG__iperr__noninv 0
#define R_PAR0_CONFIG__iack__BITNR 19
#define R_PAR0_CONFIG__iack__WIDTH 1
#define R_PAR0_CONFIG__iack__inv 1
#define R_PAR0_CONFIG__iack__noninv 0
#define R_PAR0_CONFIG__ibusy__BITNR 18
#define R_PAR0_CONFIG__ibusy__WIDTH 1
#define R_PAR0_CONFIG__ibusy__inv 1
#define R_PAR0_CONFIG__ibusy__noninv 0
#define R_PAR0_CONFIG__ifault__BITNR 17
#define R_PAR0_CONFIG__ifault__WIDTH 1
#define R_PAR0_CONFIG__ifault__inv 1
#define R_PAR0_CONFIG__ifault__noninv 0
#define R_PAR0_CONFIG__isel__BITNR 16
#define R_PAR0_CONFIG__isel__WIDTH 1
#define R_PAR0_CONFIG__isel__inv 1
#define R_PAR0_CONFIG__isel__noninv 0
#define R_PAR0_CONFIG__ext_mode__BITNR 11
#define R_PAR0_CONFIG__ext_mode__WIDTH 1
#define R_PAR0_CONFIG__ext_mode__enable 1
#define R_PAR0_CONFIG__ext_mode__disable 0
#define R_PAR0_CONFIG__wide__BITNR 10
#define R_PAR0_CONFIG__wide__WIDTH 1
#define R_PAR0_CONFIG__wide__enable 1
#define R_PAR0_CONFIG__wide__disable 0
#define R_PAR0_CONFIG__dma__BITNR 9
#define R_PAR0_CONFIG__dma__WIDTH 1
#define R_PAR0_CONFIG__dma__enable 1
#define R_PAR0_CONFIG__dma__disable 0
#define R_PAR0_CONFIG__rle_in__BITNR 8
#define R_PAR0_CONFIG__rle_in__WIDTH 1
#define R_PAR0_CONFIG__rle_in__enable 1
#define R_PAR0_CONFIG__rle_in__disable 0
#define R_PAR0_CONFIG__rle_out__BITNR 7
#define R_PAR0_CONFIG__rle_out__WIDTH 1
#define R_PAR0_CONFIG__rle_out__enable 1
#define R_PAR0_CONFIG__rle_out__disable 0
#define R_PAR0_CONFIG__enable__BITNR 6
#define R_PAR0_CONFIG__enable__WIDTH 1
#define R_PAR0_CONFIG__enable__on 1
#define R_PAR0_CONFIG__enable__reset 0
#define R_PAR0_CONFIG__force__BITNR 5
#define R_PAR0_CONFIG__force__WIDTH 1
#define R_PAR0_CONFIG__force__on 1
#define R_PAR0_CONFIG__force__off 0
#define R_PAR0_CONFIG__ign_ack__BITNR 4
#define R_PAR0_CONFIG__ign_ack__WIDTH 1
#define R_PAR0_CONFIG__ign_ack__ignore 1
#define R_PAR0_CONFIG__ign_ack__wait 0
#define R_PAR0_CONFIG__oe_ack__BITNR 3
#define R_PAR0_CONFIG__oe_ack__WIDTH 1
#define R_PAR0_CONFIG__oe_ack__wait_oe 1
#define R_PAR0_CONFIG__oe_ack__dont_wait 0
#define R_PAR0_CONFIG__oe_ack__epp_addr 1
#define R_PAR0_CONFIG__oe_ack__epp_data 0
#define R_PAR0_CONFIG__epp_addr_data__BITNR 3
#define R_PAR0_CONFIG__epp_addr_data__WIDTH 1
#define R_PAR0_CONFIG__epp_addr_data__wait_oe 1
#define R_PAR0_CONFIG__epp_addr_data__dont_wait 0
#define R_PAR0_CONFIG__epp_addr_data__epp_addr 1
#define R_PAR0_CONFIG__epp_addr_data__epp_data 0
#define R_PAR0_CONFIG__mode__BITNR 0
#define R_PAR0_CONFIG__mode__WIDTH 3
#define R_PAR0_CONFIG__mode__manual 0
#define R_PAR0_CONFIG__mode__centronics 1
#define R_PAR0_CONFIG__mode__fastbyte 2
#define R_PAR0_CONFIG__mode__nibble 3
#define R_PAR0_CONFIG__mode__byte 4
#define R_PAR0_CONFIG__mode__ecp_fwd 5
#define R_PAR0_CONFIG__mode__ecp_rev 6
#define R_PAR0_CONFIG__mode__off 7
#define R_PAR0_CONFIG__mode__epp_wr1 5
#define R_PAR0_CONFIG__mode__epp_wr2 6
#define R_PAR0_CONFIG__mode__epp_wr3 7
#define R_PAR0_CONFIG__mode__epp_rd 0

#define R_PAR0_DELAY (IO_TYPECAST_UDWORD 0xb0000048)
#define R_PAR0_DELAY__fine_hold__BITNR 21
#define R_PAR0_DELAY__fine_hold__WIDTH 3
#define R_PAR0_DELAY__hold__BITNR 16
#define R_PAR0_DELAY__hold__WIDTH 5
#define R_PAR0_DELAY__fine_strb__BITNR 13
#define R_PAR0_DELAY__fine_strb__WIDTH 3
#define R_PAR0_DELAY__strobe__BITNR 8
#define R_PAR0_DELAY__strobe__WIDTH 5
#define R_PAR0_DELAY__fine_setup__BITNR 5
#define R_PAR0_DELAY__fine_setup__WIDTH 3
#define R_PAR0_DELAY__setup__BITNR 0
#define R_PAR0_DELAY__setup__WIDTH 5

#define R_PAR1_CTRL_DATA (IO_TYPECAST_UDWORD 0xb0000050)
#define R_PAR1_CTRL_DATA__peri_int__BITNR 24
#define R_PAR1_CTRL_DATA__peri_int__WIDTH 1
#define R_PAR1_CTRL_DATA__peri_int__ack 1
#define R_PAR1_CTRL_DATA__peri_int__nop 0
#define R_PAR1_CTRL_DATA__oe__BITNR 20
#define R_PAR1_CTRL_DATA__oe__WIDTH 1
#define R_PAR1_CTRL_DATA__oe__enable 1
#define R_PAR1_CTRL_DATA__oe__disable 0
#define R_PAR1_CTRL_DATA__seli__BITNR 19
#define R_PAR1_CTRL_DATA__seli__WIDTH 1
#define R_PAR1_CTRL_DATA__seli__active 1
#define R_PAR1_CTRL_DATA__seli__inactive 0
#define R_PAR1_CTRL_DATA__autofd__BITNR 18
#define R_PAR1_CTRL_DATA__autofd__WIDTH 1
#define R_PAR1_CTRL_DATA__autofd__active 1
#define R_PAR1_CTRL_DATA__autofd__inactive 0
#define R_PAR1_CTRL_DATA__strb__BITNR 17
#define R_PAR1_CTRL_DATA__strb__WIDTH 1
#define R_PAR1_CTRL_DATA__strb__active 1
#define R_PAR1_CTRL_DATA__strb__inactive 0
#define R_PAR1_CTRL_DATA__init__BITNR 16
#define R_PAR1_CTRL_DATA__init__WIDTH 1
#define R_PAR1_CTRL_DATA__init__active 1
#define R_PAR1_CTRL_DATA__init__inactive 0
#define R_PAR1_CTRL_DATA__ecp_cmd__BITNR 8
#define R_PAR1_CTRL_DATA__ecp_cmd__WIDTH 1
#define R_PAR1_CTRL_DATA__ecp_cmd__command 1
#define R_PAR1_CTRL_DATA__ecp_cmd__data 0
#define R_PAR1_CTRL_DATA__data__BITNR 0
#define R_PAR1_CTRL_DATA__data__WIDTH 8

#define R_PAR1_CTRL (IO_TYPECAST_BYTE 0xb0000052)
#define R_PAR1_CTRL__ctrl__BITNR 0
#define R_PAR1_CTRL__ctrl__WIDTH 5

#define R_PAR1_STATUS_DATA (IO_TYPECAST_RO_UDWORD 0xb0000050)
#define R_PAR1_STATUS_DATA__mode__BITNR 29
#define R_PAR1_STATUS_DATA__mode__WIDTH 3
#define R_PAR1_STATUS_DATA__mode__manual 0
#define R_PAR1_STATUS_DATA__mode__centronics 1
#define R_PAR1_STATUS_DATA__mode__fastbyte 2
#define R_PAR1_STATUS_DATA__mode__nibble 3
#define R_PAR1_STATUS_DATA__mode__byte 4
#define R_PAR1_STATUS_DATA__mode__ecp_fwd 5
#define R_PAR1_STATUS_DATA__mode__ecp_rev 6
#define R_PAR1_STATUS_DATA__mode__off 7
#define R_PAR1_STATUS_DATA__mode__epp_wr1 5
#define R_PAR1_STATUS_DATA__mode__epp_wr2 6
#define R_PAR1_STATUS_DATA__mode__epp_wr3 7
#define R_PAR1_STATUS_DATA__mode__epp_rd 0
#define R_PAR1_STATUS_DATA__perr__BITNR 28
#define R_PAR1_STATUS_DATA__perr__WIDTH 1
#define R_PAR1_STATUS_DATA__perr__active 1
#define R_PAR1_STATUS_DATA__perr__inactive 0
#define R_PAR1_STATUS_DATA__ack__BITNR 27
#define R_PAR1_STATUS_DATA__ack__WIDTH 1
#define R_PAR1_STATUS_DATA__ack__active 0
#define R_PAR1_STATUS_DATA__ack__inactive 1
#define R_PAR1_STATUS_DATA__busy__BITNR 26
#define R_PAR1_STATUS_DATA__busy__WIDTH 1
#define R_PAR1_STATUS_DATA__busy__active 1
#define R_PAR1_STATUS_DATA__busy__inactive 0
#define R_PAR1_STATUS_DATA__fault__BITNR 25
#define R_PAR1_STATUS_DATA__fault__WIDTH 1
#define R_PAR1_STATUS_DATA__fault__active 0
#define R_PAR1_STATUS_DATA__fault__inactive 1
#define R_PAR1_STATUS_DATA__sel__BITNR 24
#define R_PAR1_STATUS_DATA__sel__WIDTH 1
#define R_PAR1_STATUS_DATA__sel__active 1
#define R_PAR1_STATUS_DATA__sel__inactive 0
#define R_PAR1_STATUS_DATA__ext_mode__BITNR 23
#define R_PAR1_STATUS_DATA__ext_mode__WIDTH 1
#define R_PAR1_STATUS_DATA__ext_mode__enable 1
#define R_PAR1_STATUS_DATA__ext_mode__disable 0
#define R_PAR1_STATUS_DATA__tr_rdy__BITNR 17
#define R_PAR1_STATUS_DATA__tr_rdy__WIDTH 1
#define R_PAR1_STATUS_DATA__tr_rdy__ready 1
#define R_PAR1_STATUS_DATA__tr_rdy__busy 0
#define R_PAR1_STATUS_DATA__dav__BITNR 16
#define R_PAR1_STATUS_DATA__dav__WIDTH 1
#define R_PAR1_STATUS_DATA__dav__data 1
#define R_PAR1_STATUS_DATA__dav__nodata 0
#define R_PAR1_STATUS_DATA__ecp_cmd__BITNR 8
#define R_PAR1_STATUS_DATA__ecp_cmd__WIDTH 1
#define R_PAR1_STATUS_DATA__ecp_cmd__command 1
#define R_PAR1_STATUS_DATA__ecp_cmd__data 0
#define R_PAR1_STATUS_DATA__data__BITNR 0
#define R_PAR1_STATUS_DATA__data__WIDTH 8

#define R_PAR1_STATUS (IO_TYPECAST_RO_UWORD 0xb0000052)
#define R_PAR1_STATUS__mode__BITNR 13
#define R_PAR1_STATUS__mode__WIDTH 3
#define R_PAR1_STATUS__mode__manual 0
#define R_PAR1_STATUS__mode__centronics 1
#define R_PAR1_STATUS__mode__fastbyte 2
#define R_PAR1_STATUS__mode__nibble 3
#define R_PAR1_STATUS__mode__byte 4
#define R_PAR1_STATUS__mode__ecp_fwd 5
#define R_PAR1_STATUS__mode__ecp_rev 6
#define R_PAR1_STATUS__mode__off 7
#define R_PAR1_STATUS__mode__epp_wr1 5
#define R_PAR1_STATUS__mode__epp_wr2 6
#define R_PAR1_STATUS__mode__epp_wr3 7
#define R_PAR1_STATUS__mode__epp_rd 0
#define R_PAR1_STATUS__perr__BITNR 12
#define R_PAR1_STATUS__perr__WIDTH 1
#define R_PAR1_STATUS__perr__active 1
#define R_PAR1_STATUS__perr__inactive 0
#define R_PAR1_STATUS__ack__BITNR 11
#define R_PAR1_STATUS__ack__WIDTH 1
#define R_PAR1_STATUS__ack__active 0
#define R_PAR1_STATUS__ack__inactive 1
#define R_PAR1_STATUS__busy__BITNR 10
#define R_PAR1_STATUS__busy__WIDTH 1
#define R_PAR1_STATUS__busy__active 1
#define R_PAR1_STATUS__busy__inactive 0
#define R_PAR1_STATUS__fault__BITNR 9
#define R_PAR1_STATUS__fault__WIDTH 1
#define R_PAR1_STATUS__fault__active 0
#define R_PAR1_STATUS__fault__inactive 1
#define R_PAR1_STATUS__sel__BITNR 8
#define R_PAR1_STATUS__sel__WIDTH 1
#define R_PAR1_STATUS__sel__active 1
#define R_PAR1_STATUS__sel__inactive 0
#define R_PAR1_STATUS__ext_mode__BITNR 7
#define R_PAR1_STATUS__ext_mode__WIDTH 1
#define R_PAR1_STATUS__ext_mode__enable 1
#define R_PAR1_STATUS__ext_mode__disable 0
#define R_PAR1_STATUS__tr_rdy__BITNR 1
#define R_PAR1_STATUS__tr_rdy__WIDTH 1
#define R_PAR1_STATUS__tr_rdy__ready 1
#define R_PAR1_STATUS__tr_rdy__busy 0
#define R_PAR1_STATUS__dav__BITNR 0
#define R_PAR1_STATUS__dav__WIDTH 1
#define R_PAR1_STATUS__dav__data 1
#define R_PAR1_STATUS__dav__nodata 0

#define R_PAR1_CONFIG (IO_TYPECAST_UDWORD 0xb0000054)
#define R_PAR1_CONFIG__ioe__BITNR 25
#define R_PAR1_CONFIG__ioe__WIDTH 1
#define R_PAR1_CONFIG__ioe__inv 1
#define R_PAR1_CONFIG__ioe__noninv 0
#define R_PAR1_CONFIG__iseli__BITNR 24
#define R_PAR1_CONFIG__iseli__WIDTH 1
#define R_PAR1_CONFIG__iseli__inv 1
#define R_PAR1_CONFIG__iseli__noninv 0
#define R_PAR1_CONFIG__iautofd__BITNR 23
#define R_PAR1_CONFIG__iautofd__WIDTH 1
#define R_PAR1_CONFIG__iautofd__inv 1
#define R_PAR1_CONFIG__iautofd__noninv 0
#define R_PAR1_CONFIG__istrb__BITNR 22
#define R_PAR1_CONFIG__istrb__WIDTH 1
#define R_PAR1_CONFIG__istrb__inv 1
#define R_PAR1_CONFIG__istrb__noninv 0
#define R_PAR1_CONFIG__iinit__BITNR 21
#define R_PAR1_CONFIG__iinit__WIDTH 1
#define R_PAR1_CONFIG__iinit__inv 1
#define R_PAR1_CONFIG__iinit__noninv 0
#define R_PAR1_CONFIG__iperr__BITNR 20
#define R_PAR1_CONFIG__iperr__WIDTH 1
#define R_PAR1_CONFIG__iperr__inv 1
#define R_PAR1_CONFIG__iperr__noninv 0
#define R_PAR1_CONFIG__iack__BITNR 19
#define R_PAR1_CONFIG__iack__WIDTH 1
#define R_PAR1_CONFIG__iack__inv 1
#define R_PAR1_CONFIG__iack__noninv 0
#define R_PAR1_CONFIG__ibusy__BITNR 18
#define R_PAR1_CONFIG__ibusy__WIDTH 1
#define R_PAR1_CONFIG__ibusy__inv 1
#define R_PAR1_CONFIG__ibusy__noninv 0
#define R_PAR1_CONFIG__ifault__BITNR 17
#define R_PAR1_CONFIG__ifault__WIDTH 1
#define R_PAR1_CONFIG__ifault__inv 1
#define R_PAR1_CONFIG__ifault__noninv 0
#define R_PAR1_CONFIG__isel__BITNR 16
#define R_PAR1_CONFIG__isel__WIDTH 1
#define R_PAR1_CONFIG__isel__inv 1
#define R_PAR1_CONFIG__isel__noninv 0
#define R_PAR1_CONFIG__ext_mode__BITNR 11
#define R_PAR1_CONFIG__ext_mode__WIDTH 1
#define R_PAR1_CONFIG__ext_mode__enable 1
#define R_PAR1_CONFIG__ext_mode__disable 0
#define R_PAR1_CONFIG__dma__BITNR 9
#define R_PAR1_CONFIG__dma__WIDTH 1
#define R_PAR1_CONFIG__dma__enable 1
#define R_PAR1_CONFIG__dma__disable 0
#define R_PAR1_CONFIG__rle_in__BITNR 8
#define R_PAR1_CONFIG__rle_in__WIDTH 1
#define R_PAR1_CONFIG__rle_in__enable 1
#define R_PAR1_CONFIG__rle_in__disable 0
#define R_PAR1_CONFIG__rle_out__BITNR 7
#define R_PAR1_CONFIG__rle_out__WIDTH 1
#define R_PAR1_CONFIG__rle_out__enable 1
#define R_PAR1_CONFIG__rle_out__disable 0
#define R_PAR1_CONFIG__enable__BITNR 6
#define R_PAR1_CONFIG__enable__WIDTH 1
#define R_PAR1_CONFIG__enable__on 1
#define R_PAR1_CONFIG__enable__reset 0
#define R_PAR1_CONFIG__force__BITNR 5
#define R_PAR1_CONFIG__force__WIDTH 1
#define R_PAR1_CONFIG__force__on 1
#define R_PAR1_CONFIG__force__off 0
#define R_PAR1_CONFIG__ign_ack__BITNR 4
#define R_PAR1_CONFIG__ign_ack__WIDTH 1
#define R_PAR1_CONFIG__ign_ack__ignore 1
#define R_PAR1_CONFIG__ign_ack__wait 0
#define R_PAR1_CONFIG__oe_ack__BITNR 3
#define R_PAR1_CONFIG__oe_ack__WIDTH 1
#define R_PAR1_CONFIG__oe_ack__wait_oe 1
#define R_PAR1_CONFIG__oe_ack__dont_wait 0
#define R_PAR1_CONFIG__oe_ack__epp_addr 1
#define R_PAR1_CONFIG__oe_ack__epp_data 0
#define R_PAR1_CONFIG__epp_addr_data__BITNR 3
#define R_PAR1_CONFIG__epp_addr_data__WIDTH 1
#define R_PAR1_CONFIG__epp_addr_data__wait_oe 1
#define R_PAR1_CONFIG__epp_addr_data__dont_wait 0
#define R_PAR1_CONFIG__epp_addr_data__epp_addr 1
#define R_PAR1_CONFIG__epp_addr_data__epp_data 0
#define R_PAR1_CONFIG__mode__BITNR 0
#define R_PAR1_CONFIG__mode__WIDTH 3
#define R_PAR1_CONFIG__mode__manual 0
#define R_PAR1_CONFIG__mode__centronics 1
#define R_PAR1_CONFIG__mode__fastbyte 2
#define R_PAR1_CONFIG__mode__nibble 3
#define R_PAR1_CONFIG__mode__byte 4
#define R_PAR1_CONFIG__mode__ecp_fwd 5
#define R_PAR1_CONFIG__mode__ecp_rev 6
#define R_PAR1_CONFIG__mode__off 7
#define R_PAR1_CONFIG__mode__epp_wr1 5
#define R_PAR1_CONFIG__mode__epp_wr2 6
#define R_PAR1_CONFIG__mode__epp_wr3 7
#define R_PAR1_CONFIG__mode__epp_rd 0

#define R_PAR1_DELAY (IO_TYPECAST_UDWORD 0xb0000058)
#define R_PAR1_DELAY__fine_hold__BITNR 21
#define R_PAR1_DELAY__fine_hold__WIDTH 3
#define R_PAR1_DELAY__hold__BITNR 16
#define R_PAR1_DELAY__hold__WIDTH 5
#define R_PAR1_DELAY__fine_strb__BITNR 13
#define R_PAR1_DELAY__fine_strb__WIDTH 3
#define R_PAR1_DELAY__strobe__BITNR 8
#define R_PAR1_DELAY__strobe__WIDTH 5
#define R_PAR1_DELAY__fine_setup__BITNR 5
#define R_PAR1_DELAY__fine_setup__WIDTH 3
#define R_PAR1_DELAY__setup__BITNR 0
#define R_PAR1_DELAY__setup__WIDTH 5

/*
!* ATA interface registers
!*/

#define R_ATA_CTRL_DATA (IO_TYPECAST_UDWORD 0xb0000040)
#define R_ATA_CTRL_DATA__sel__BITNR 30
#define R_ATA_CTRL_DATA__sel__WIDTH 2
#define R_ATA_CTRL_DATA__cs1__BITNR 29
#define R_ATA_CTRL_DATA__cs1__WIDTH 1
#define R_ATA_CTRL_DATA__cs1__active 1
#define R_ATA_CTRL_DATA__cs1__inactive 0
#define R_ATA_CTRL_DATA__cs0__BITNR 28
#define R_ATA_CTRL_DATA__cs0__WIDTH 1
#define R_ATA_CTRL_DATA__cs0__active 1
#define R_ATA_CTRL_DATA__cs0__inactive 0
#define R_ATA_CTRL_DATA__addr__BITNR 25
#define R_ATA_CTRL_DATA__addr__WIDTH 3
#define R_ATA_CTRL_DATA__rw__BITNR 24
#define R_ATA_CTRL_DATA__rw__WIDTH 1
#define R_ATA_CTRL_DATA__rw__read 1
#define R_ATA_CTRL_DATA__rw__write 0
#define R_ATA_CTRL_DATA__src_dst__BITNR 23
#define R_ATA_CTRL_DATA__src_dst__WIDTH 1
#define R_ATA_CTRL_DATA__src_dst__dma 1
#define R_ATA_CTRL_DATA__src_dst__register 0
#define R_ATA_CTRL_DATA__handsh__BITNR 22
#define R_ATA_CTRL_DATA__handsh__WIDTH 1
#define R_ATA_CTRL_DATA__handsh__dma 1
#define R_ATA_CTRL_DATA__handsh__pio 0
#define R_ATA_CTRL_DATA__multi__BITNR 21
#define R_ATA_CTRL_DATA__multi__WIDTH 1
#define R_ATA_CTRL_DATA__multi__on 1
#define R_ATA_CTRL_DATA__multi__off 0
#define R_ATA_CTRL_DATA__dma_size__BITNR 20
#define R_ATA_CTRL_DATA__dma_size__WIDTH 1
#define R_ATA_CTRL_DATA__dma_size__byte 1
#define R_ATA_CTRL_DATA__dma_size__word 0
#define R_ATA_CTRL_DATA__data__BITNR 0
#define R_ATA_CTRL_DATA__data__WIDTH 16

#define R_ATA_STATUS_DATA (IO_TYPECAST_RO_UDWORD 0xb0000040)
#define R_ATA_STATUS_DATA__busy__BITNR 18
#define R_ATA_STATUS_DATA__busy__WIDTH 1
#define R_ATA_STATUS_DATA__busy__yes 1
#define R_ATA_STATUS_DATA__busy__no 0
#define R_ATA_STATUS_DATA__tr_rdy__BITNR 17
#define R_ATA_STATUS_DATA__tr_rdy__WIDTH 1
#define R_ATA_STATUS_DATA__tr_rdy__ready 1
#define R_ATA_STATUS_DATA__tr_rdy__busy 0
#define R_ATA_STATUS_DATA__dav__BITNR 16
#define R_ATA_STATUS_DATA__dav__WIDTH 1
#define R_ATA_STATUS_DATA__dav__data 1
#define R_ATA_STATUS_DATA__dav__nodata 0
#define R_ATA_STATUS_DATA__data__BITNR 0
#define R_ATA_STATUS_DATA__data__WIDTH 16

#define R_ATA_CONFIG (IO_TYPECAST_UDWORD 0xb0000044)
#define R_ATA_CONFIG__enable__BITNR 25
#define R_ATA_CONFIG__enable__WIDTH 1
#define R_ATA_CONFIG__enable__on 1
#define R_ATA_CONFIG__enable__off 0
#define R_ATA_CONFIG__dma_strobe__BITNR 20
#define R_ATA_CONFIG__dma_strobe__WIDTH 5
#define R_ATA_CONFIG__dma_hold__BITNR 15
#define R_ATA_CONFIG__dma_hold__WIDTH 5
#define R_ATA_CONFIG__pio_setup__BITNR 10
#define R_ATA_CONFIG__pio_setup__WIDTH 5
#define R_ATA_CONFIG__pio_strobe__BITNR 5
#define R_ATA_CONFIG__pio_strobe__WIDTH 5
#define R_ATA_CONFIG__pio_hold__BITNR 0
#define R_ATA_CONFIG__pio_hold__WIDTH 5

#define R_ATA_TRANSFER_CNT (IO_TYPECAST_UDWORD 0xb0000048)
#define R_ATA_TRANSFER_CNT__count__BITNR 0
#define R_ATA_TRANSFER_CNT__count__WIDTH 17

/*
!* SCSI registers
!*/

#define R_SCSI0_CTRL (IO_TYPECAST_UDWORD 0xb0000044)
#define R_SCSI0_CTRL__id_type__BITNR 31
#define R_SCSI0_CTRL__id_type__WIDTH 1
#define R_SCSI0_CTRL__id_type__software 1
#define R_SCSI0_CTRL__id_type__hardware 0
#define R_SCSI0_CTRL__sel_timeout__BITNR 24
#define R_SCSI0_CTRL__sel_timeout__WIDTH 7
#define R_SCSI0_CTRL__synch_per__BITNR 16
#define R_SCSI0_CTRL__synch_per__WIDTH 8
#define R_SCSI0_CTRL__rst__BITNR 15
#define R_SCSI0_CTRL__rst__WIDTH 1
#define R_SCSI0_CTRL__rst__yes 1
#define R_SCSI0_CTRL__rst__no 0
#define R_SCSI0_CTRL__atn__BITNR 14
#define R_SCSI0_CTRL__atn__WIDTH 1
#define R_SCSI0_CTRL__atn__yes 1
#define R_SCSI0_CTRL__atn__no 0
#define R_SCSI0_CTRL__my_id__BITNR 9
#define R_SCSI0_CTRL__my_id__WIDTH 4
#define R_SCSI0_CTRL__target_id__BITNR 4
#define R_SCSI0_CTRL__target_id__WIDTH 4
#define R_SCSI0_CTRL__fast_20__BITNR 3
#define R_SCSI0_CTRL__fast_20__WIDTH 1
#define R_SCSI0_CTRL__fast_20__yes 1
#define R_SCSI0_CTRL__fast_20__no 0
#define R_SCSI0_CTRL__bus_width__BITNR 2
#define R_SCSI0_CTRL__bus_width__WIDTH 1
#define R_SCSI0_CTRL__bus_width__wide 1
#define R_SCSI0_CTRL__bus_width__narrow 0
#define R_SCSI0_CTRL__synch__BITNR 1
#define R_SCSI0_CTRL__synch__WIDTH 1
#define R_SCSI0_CTRL__synch__synch 1
#define R_SCSI0_CTRL__synch__asynch 0
#define R_SCSI0_CTRL__enable__BITNR 0
#define R_SCSI0_CTRL__enable__WIDTH 1
#define R_SCSI0_CTRL__enable__on 1
#define R_SCSI0_CTRL__enable__off 0

#define R_SCSI0_CMD_DATA (IO_TYPECAST_UDWORD 0xb0000040)
#define R_SCSI0_CMD_DATA__parity_in__BITNR 26
#define R_SCSI0_CMD_DATA__parity_in__WIDTH 1
#define R_SCSI0_CMD_DATA__parity_in__on 0
#define R_SCSI0_CMD_DATA__parity_in__off 1
#define R_SCSI0_CMD_DATA__skip__BITNR 25
#define R_SCSI0_CMD_DATA__skip__WIDTH 1
#define R_SCSI0_CMD_DATA__skip__on 1
#define R_SCSI0_CMD_DATA__skip__off 0
#define R_SCSI0_CMD_DATA__clr_status__BITNR 24
#define R_SCSI0_CMD_DATA__clr_status__WIDTH 1
#define R_SCSI0_CMD_DATA__clr_status__yes 1
#define R_SCSI0_CMD_DATA__clr_status__nop 0
#define R_SCSI0_CMD_DATA__asynch_setup__BITNR 20
#define R_SCSI0_CMD_DATA__asynch_setup__WIDTH 4
#define R_SCSI0_CMD_DATA__command__BITNR 16
#define R_SCSI0_CMD_DATA__command__WIDTH 4
#define R_SCSI0_CMD_DATA__command__full_din_1 0
#define R_SCSI0_CMD_DATA__command__full_dout_1 1
#define R_SCSI0_CMD_DATA__command__full_stat_1 2
#define R_SCSI0_CMD_DATA__command__resel_din 3
#define R_SCSI0_CMD_DATA__command__resel_dout 4
#define R_SCSI0_CMD_DATA__command__resel_stat 5
#define R_SCSI0_CMD_DATA__command__arb_only 6
#define R_SCSI0_CMD_DATA__command__full_din_3 8
#define R_SCSI0_CMD_DATA__command__full_dout_3 9
#define R_SCSI0_CMD_DATA__command__full_stat_3 10
#define R_SCSI0_CMD_DATA__command__man_data_in 11
#define R_SCSI0_CMD_DATA__command__man_data_out 12
#define R_SCSI0_CMD_DATA__command__man_rat 13
#define R_SCSI0_CMD_DATA__data_out__BITNR 0
#define R_SCSI0_CMD_DATA__data_out__WIDTH 16

#define R_SCSI0_DATA (IO_TYPECAST_UWORD 0xb0000040)
#define R_SCSI0_DATA__data_out__BITNR 0
#define R_SCSI0_DATA__data_out__WIDTH 16

#define R_SCSI0_CMD (IO_TYPECAST_BYTE 0xb0000042)
#define R_SCSI0_CMD__asynch_setup__BITNR 4
#define R_SCSI0_CMD__asynch_setup__WIDTH 4
#define R_SCSI0_CMD__command__BITNR 0
#define R_SCSI0_CMD__command__WIDTH 4
#define R_SCSI0_CMD__command__full_din_1 0
#define R_SCSI0_CMD__command__full_dout_1 1
#define R_SCSI0_CMD__command__full_stat_1 2
#define R_SCSI0_CMD__command__resel_din 3
#define R_SCSI0_CMD__command__resel_dout 4
#define R_SCSI0_CMD__command__resel_stat 5
#define R_SCSI0_CMD__command__arb_only 6
#define R_SCSI0_CMD__command__full_din_3 8
#define R_SCSI0_CMD__command__full_dout_3 9
#define R_SCSI0_CMD__command__full_stat_3 10
#define R_SCSI0_CMD__command__man_data_in 11
#define R_SCSI0_CMD__command__man_data_out 12
#define R_SCSI0_CMD__command__man_rat 13

#define R_SCSI0_STATUS_CTRL (IO_TYPECAST_BYTE 0xb0000043)
#define R_SCSI0_STATUS_CTRL__parity_in__BITNR 2
#define R_SCSI0_STATUS_CTRL__parity_in__WIDTH 1
#define R_SCSI0_STATUS_CTRL__parity_in__on 0
#define R_SCSI0_STATUS_CTRL__parity_in__off 1
#define R_SCSI0_STATUS_CTRL__skip__BITNR 1
#define R_SCSI0_STATUS_CTRL__skip__WIDTH 1
#define R_SCSI0_STATUS_CTRL__skip__on 1
#define R_SCSI0_STATUS_CTRL__skip__off 0
#define R_SCSI0_STATUS_CTRL__clr_status__BITNR 0
#define R_SCSI0_STATUS_CTRL__clr_status__WIDTH 1
#define R_SCSI0_STATUS_CTRL__clr_status__yes 1
#define R_SCSI0_STATUS_CTRL__clr_status__nop 0

#define R_SCSI0_STATUS (IO_TYPECAST_RO_UDWORD 0xb0000048)
#define R_SCSI0_STATUS__tst_arb_won__BITNR 23
#define R_SCSI0_STATUS__tst_arb_won__WIDTH 1
#define R_SCSI0_STATUS__tst_resel__BITNR 22
#define R_SCSI0_STATUS__tst_resel__WIDTH 1
#define R_SCSI0_STATUS__parity_error__BITNR 21
#define R_SCSI0_STATUS__parity_error__WIDTH 1
#define R_SCSI0_STATUS__bus_reset__BITNR 20
#define R_SCSI0_STATUS__bus_reset__WIDTH 1
#define R_SCSI0_STATUS__bus_reset__yes 1
#define R_SCSI0_STATUS__bus_reset__no 0
#define R_SCSI0_STATUS__resel_target__BITNR 15
#define R_SCSI0_STATUS__resel_target__WIDTH 4
#define R_SCSI0_STATUS__resel__BITNR 14
#define R_SCSI0_STATUS__resel__WIDTH 1
#define R_SCSI0_STATUS__resel__yes 1
#define R_SCSI0_STATUS__resel__no 0
#define R_SCSI0_STATUS__curr_phase__BITNR 11
#define R_SCSI0_STATUS__curr_phase__WIDTH 3
#define R_SCSI0_STATUS__curr_phase__ph_undef 0
#define R_SCSI0_STATUS__curr_phase__ph_msg_in 7
#define R_SCSI0_STATUS__curr_phase__ph_msg_out 6
#define R_SCSI0_STATUS__curr_phase__ph_status 3
#define R_SCSI0_STATUS__curr_phase__ph_command 2
#define R_SCSI0_STATUS__curr_phase__ph_data_in 5
#define R_SCSI0_STATUS__curr_phase__ph_data_out 4
#define R_SCSI0_STATUS__curr_phase__ph_resel 1
#define R_SCSI0_STATUS__last_seq_step__BITNR 6
#define R_SCSI0_STATUS__last_seq_step__WIDTH 5
#define R_SCSI0_STATUS__last_seq_step__st_bus_free 24
#define R_SCSI0_STATUS__last_seq_step__st_arbitrate 8
#define R_SCSI0_STATUS__last_seq_step__st_resel_req 29
#define R_SCSI0_STATUS__last_seq_step__st_msg_1 2
#define R_SCSI0_STATUS__last_seq_step__st_manual 28
#define R_SCSI0_STATUS__last_seq_step__st_transf_cmd 30
#define R_SCSI0_STATUS__last_seq_step__st_msg_2 6
#define R_SCSI0_STATUS__last_seq_step__st_msg_3 22
#define R_SCSI0_STATUS__last_seq_step__st_answer 3
#define R_SCSI0_STATUS__last_seq_step__st_synch_din_perr 1
#define R_SCSI0_STATUS__last_seq_step__st_transfer_done 15
#define R_SCSI0_STATUS__last_seq_step__st_synch_dout 0
#define R_SCSI0_STATUS__last_seq_step__st_asynch_dout 25
#define R_SCSI0_STATUS__last_seq_step__st_synch_din 13
#define R_SCSI0_STATUS__last_seq_step__st_asynch_din 9
#define R_SCSI0_STATUS__last_seq_step__st_synch_dout_ack 4
#define R_SCSI0_STATUS__last_seq_step__st_synch_din_ack 12
#define R_SCSI0_STATUS__last_seq_step__st_synch_din_ack_perr 5
#define R_SCSI0_STATUS__last_seq_step__st_asynch_dout_end 11
#define R_SCSI0_STATUS__last_seq_step__st_iwr 27
#define R_SCSI0_STATUS__last_seq_step__st_wait_free_disc 21
#define R_SCSI0_STATUS__last_seq_step__st_sdp_disc 7
#define R_SCSI0_STATUS__last_seq_step__st_cc 31
#define R_SCSI0_STATUS__last_seq_step__st_iwr_good 14
#define R_SCSI0_STATUS__last_seq_step__st_iwr_cc 23
#define R_SCSI0_STATUS__last_seq_step__st_wait_free_iwr_cc 17
#define R_SCSI0_STATUS__last_seq_step__st_wait_free_cc 20
#define R_SCSI0_STATUS__last_seq_step__st_wait_free_sdp_disc 16
#define R_SCSI0_STATUS__last_seq_step__st_manual_req 10
#define R_SCSI0_STATUS__last_seq_step__st_manual_din_prot 18
#define R_SCSI0_STATUS__valid_status__BITNR 5
#define R_SCSI0_STATUS__valid_status__WIDTH 1
#define R_SCSI0_STATUS__valid_status__yes 1
#define R_SCSI0_STATUS__valid_status__no 0
#define R_SCSI0_STATUS__seq_status__BITNR 0
#define R_SCSI0_STATUS__seq_status__WIDTH 5
#define R_SCSI0_STATUS__seq_status__info_seq_complete 0
#define R_SCSI0_STATUS__seq_status__info_parity_error 1
#define R_SCSI0_STATUS__seq_status__info_unhandled_msg_in 2
#define R_SCSI0_STATUS__seq_status__info_unexp_ph_change 3
#define R_SCSI0_STATUS__seq_status__info_arb_lost 4
#define R_SCSI0_STATUS__seq_status__info_sel_timeout 5
#define R_SCSI0_STATUS__seq_status__info_unexp_bf 6
#define R_SCSI0_STATUS__seq_status__info_illegal_op 7
#define R_SCSI0_STATUS__seq_status__info_rec_recvd 8
#define R_SCSI0_STATUS__seq_status__info_reselected 9
#define R_SCSI0_STATUS__seq_status__info_unhandled_status 10
#define R_SCSI0_STATUS__seq_status__info_bus_reset 11
#define R_SCSI0_STATUS__seq_status__info_illegal_bf 12
#define R_SCSI0_STATUS__seq_status__info_bus_free 13

#define R_SCSI0_DATA_IN (IO_TYPECAST_RO_UWORD 0xb0000040)
#define R_SCSI0_DATA_IN__data_in__BITNR 0
#define R_SCSI0_DATA_IN__data_in__WIDTH 16

#define R_SCSI1_CTRL (IO_TYPECAST_UDWORD 0xb0000054)
#define R_SCSI1_CTRL__id_type__BITNR 31
#define R_SCSI1_CTRL__id_type__WIDTH 1
#define R_SCSI1_CTRL__id_type__software 1
#define R_SCSI1_CTRL__id_type__hardware 0
#define R_SCSI1_CTRL__sel_timeout__BITNR 24
#define R_SCSI1_CTRL__sel_timeout__WIDTH 7
#define R_SCSI1_CTRL__synch_per__BITNR 16
#define R_SCSI1_CTRL__synch_per__WIDTH 8
#define R_SCSI1_CTRL__rst__BITNR 15
#define R_SCSI1_CTRL__rst__WIDTH 1
#define R_SCSI1_CTRL__rst__yes 1
#define R_SCSI1_CTRL__rst__no 0
#define R_SCSI1_CTRL__atn__BITNR 14
#define R_SCSI1_CTRL__atn__WIDTH 1
#define R_SCSI1_CTRL__atn__yes 1
#define R_SCSI1_CTRL__atn__no 0
#define R_SCSI1_CTRL__my_id__BITNR 9
#define R_SCSI1_CTRL__my_id__WIDTH 4
#define R_SCSI1_CTRL__target_id__BITNR 4
#define R_SCSI1_CTRL__target_id__WIDTH 4
#define R_SCSI1_CTRL__fast_20__BITNR 3
#define R_SCSI1_CTRL__fast_20__WIDTH 1
#define R_SCSI1_CTRL__fast_20__yes 1
#define R_SCSI1_CTRL__fast_20__no 0
#define R_SCSI1_CTRL__bus_width__BITNR 2
#define R_SCSI1_CTRL__bus_width__WIDTH 1
#define R_SCSI1_CTRL__bus_width__wide 1
#define R_SCSI1_CTRL__bus_width__narrow 0
#define R_SCSI1_CTRL__synch__BITNR 1
#define R_SCSI1_CTRL__synch__WIDTH 1
#define R_SCSI1_CTRL__synch__synch 1
#define R_SCSI1_CTRL__synch__asynch 0
#define R_SCSI1_CTRL__enable__BITNR 0
#define R_SCSI1_CTRL__enable__WIDTH 1
#define R_SCSI1_CTRL__enable__on 1
#define R_SCSI1_CTRL__enable__off 0

#define R_SCSI1_CMD_DATA (IO_TYPECAST_UDWORD 0xb0000050)
#define R_SCSI1_CMD_DATA__parity_in__BITNR 26
#define R_SCSI1_CMD_DATA__parity_in__WIDTH 1
#define R_SCSI1_CMD_DATA__parity_in__on 0
#define R_SCSI1_CMD_DATA__parity_in__off 1
#define R_SCSI1_CMD_DATA__skip__BITNR 25
#define R_SCSI1_CMD_DATA__skip__WIDTH 1
#define R_SCSI1_CMD_DATA__skip__on 1
#define R_SCSI1_CMD_DATA__skip__off 0
#define R_SCSI1_CMD_DATA__clr_status__BITNR 24
#define R_SCSI1_CMD_DATA__clr_status__WIDTH 1
#define R_SCSI1_CMD_DATA__clr_status__yes 1
#define R_SCSI1_CMD_DATA__clr_status__nop 0
#define R_SCSI1_CMD_DATA__asynch_setup__BITNR 20
#define R_SCSI1_CMD_DATA__asynch_setup__WIDTH 4
#define R_SCSI1_CMD_DATA__command__BITNR 16
#define R_SCSI1_CMD_DATA__command__WIDTH 4
#define R_SCSI1_CMD_DATA__command__full_din_1 0
#define R_SCSI1_CMD_DATA__command__full_dout_1 1
#define R_SCSI1_CMD_DATA__command__full_stat_1 2
#define R_SCSI1_CMD_DATA__command__resel_din 3
#define R_SCSI1_CMD_DATA__command__resel_dout 4
#define R_SCSI1_CMD_DATA__command__resel_stat 5
#define R_SCSI1_CMD_DATA__command__arb_only 6
#define R_SCSI1_CMD_DATA__command__full_din_3 8
#define R_SCSI1_CMD_DATA__command__full_dout_3 9
#define R_SCSI1_CMD_DATA__command__full_stat_3 10
#define R_SCSI1_CMD_DATA__command__man_data_in 11
#define R_SCSI1_CMD_DATA__command__man_data_out 12
#define R_SCSI1_CMD_DATA__command__man_rat 13
#define R_SCSI1_CMD_DATA__data_out__BITNR 0
#define R_SCSI1_CMD_DATA__data_out__WIDTH 16

#define R_SCSI1_DATA (IO_TYPECAST_UWORD 0xb0000050)
#define R_SCSI1_DATA__data_out__BITNR 0
#define R_SCSI1_DATA__data_out__WIDTH 16

#define R_SCSI1_CMD (IO_TYPECAST_BYTE 0xb0000052)
#define R_SCSI1_CMD__asynch_setup__BITNR 4
#define R_SCSI1_CMD__asynch_setup__WIDTH 4
#define R_SCSI1_CMD__command__BITNR 0
#define R_SCSI1_CMD__command__WIDTH 4
#define R_SCSI1_CMD__command__full_din_1 0
#define R_SCSI1_CMD__command__full_dout_1 1
#define R_SCSI1_CMD__command__full_stat_1 2
#define R_SCSI1_CMD__command__resel_din 3
#define R_SCSI1_CMD__command__resel_dout 4
#define R_SCSI1_CMD__command__resel_stat 5
#define R_SCSI1_CMD__command__arb_only 6
#define R_SCSI1_CMD__command__full_din_3 8
#define R_SCSI1_CMD__command__full_dout_3 9
#define R_SCSI1_CMD__command__full_stat_3 10
#define R_SCSI1_CMD__command__man_data_in 11
#define R_SCSI1_CMD__command__man_data_out 12
#define R_SCSI1_CMD__command__man_rat 13

#define R_SCSI1_STATUS_CTRL (IO_TYPECAST_BYTE 0xb0000053)
#define R_SCSI1_STATUS_CTRL__parity_in__BITNR 2
#define R_SCSI1_STATUS_CTRL__parity_in__WIDTH 1
#define R_SCSI1_STATUS_CTRL__parity_in__on 0
#define R_SCSI1_STATUS_CTRL__parity_in__off 1
#define R_SCSI1_STATUS_CTRL__skip__BITNR 1
#define R_SCSI1_STATUS_CTRL__skip__WIDTH 1
#define R_SCSI1_STATUS_CTRL__skip__on 1
#define R_SCSI1_STATUS_CTRL__skip__off 0
#define R_SCSI1_STATUS_CTRL__clr_status__BITNR 0
#define R_SCSI1_STATUS_CTRL__clr_status__WIDTH 1
#define R_SCSI1_STATUS_CTRL__clr_status__yes 1
#define R_SCSI1_STATUS_CTRL__clr_status__nop 0

#define R_SCSI1_STATUS (IO_TYPECAST_RO_UDWORD 0xb0000058)
#define R_SCSI1_STATUS__tst_arb_won__BITNR 23
#define R_SCSI1_STATUS__tst_arb_won__WIDTH 1
#define R_SCSI1_STATUS__tst_resel__BITNR 22
#define R_SCSI1_STATUS__tst_resel__WIDTH 1
#define R_SCSI1_STATUS__parity_error__BITNR 21
#define R_SCSI1_STATUS__parity_error__WIDTH 1
#define R_SCSI1_STATUS__bus_reset__BITNR 20
#define R_SCSI1_STATUS__bus_reset__WIDTH 1
#define R_SCSI1_STATUS__bus_reset__yes 1
#define R_SCSI1_STATUS__bus_reset__no 0
#define R_SCSI1_STATUS__resel_target__BITNR 15
#define R_SCSI1_STATUS__resel_target__WIDTH 4
#define R_SCSI1_STATUS__resel__BITNR 14
#define R_SCSI1_STATUS__resel__WIDTH 1
#define R_SCSI1_STATUS__resel__yes 1
#define R_SCSI1_STATUS__resel__no 0
#define R_SCSI1_STATUS__curr_phase__BITNR 11
#define R_SCSI1_STATUS__curr_phase__WIDTH 3
#define R_SCSI1_STATUS__curr_phase__ph_undef 0
#define R_SCSI1_STATUS__curr_phase__ph_msg_in 7
#define R_SCSI1_STATUS__curr_phase__ph_msg_out 6
#define R_SCSI1_STATUS__curr_phase__ph_status 3
#define R_SCSI1_STATUS__curr_phase__ph_command 2
#define R_SCSI1_STATUS__curr_phase__ph_data_in 5
#define R_SCSI1_STATUS__curr_phase__ph_data_out 4
#define R_SCSI1_STATUS__curr_phase__ph_resel 1
#define R_SCSI1_STATUS__last_seq_step__BITNR 6
#define R_SCSI1_STATUS__last_seq_step__WIDTH 5
#define R_SCSI1_STATUS__last_seq_step__st_bus_free 24
#define R_SCSI1_STATUS__last_seq_step__st_arbitrate 8
#define R_SCSI1_STATUS__last_seq_step__st_resel_req 29
#define R_SCSI1_STATUS__last_seq_step__st_msg_1 2
#define R_SCSI1_STATUS__last_seq_step__st_manual 28
#define R_SCSI1_STATUS__last_seq_step__st_transf_cmd 30
#define R_SCSI1_STATUS__last_seq_step__st_msg_2 6
#define R_SCSI1_STATUS__last_seq_step__st_msg_3 22
#define R_SCSI1_STATUS__last_seq_step__st_answer 3
#define R_SCSI1_STATUS__last_seq_step__st_synch_din_perr 1
#define R_SCSI1_STATUS__last_seq_step__st_transfer_done 15
#define R_SCSI1_STATUS__last_seq_step__st_synch_dout 0
#define R_SCSI1_STATUS__last_seq_step__st_asynch_dout 25
#define R_SCSI1_STATUS__last_seq_step__st_synch_din 13
#define R_SCSI1_STATUS__last_seq_step__st_asynch_din 9
#define R_SCSI1_STATUS__last_seq_step__st_synch_dout_ack 4
#define R_SCSI1_STATUS__last_seq_step__st_synch_din_ack 12
#define R_SCSI1_STATUS__last_seq_step__st_synch_din_ack_perr 5
#define R_SCSI1_STATUS__last_seq_step__st_asynch_dout_end 11
#define R_SCSI1_STATUS__last_seq_step__st_iwr 27
#define R_SCSI1_STATUS__last_seq_step__st_wait_free_disc 21
#define R_SCSI1_STATUS__last_seq_step__st_sdp_disc 7
#define R_SCSI1_STATUS__last_seq_step__st_cc 31
#define R_SCSI1_STATUS__last_seq_step__st_iwr_good 14
#define R_SCSI1_STATUS__last_seq_step__st_iwr_cc 23
#define R_SCSI1_STATUS__last_seq_step__st_wait_free_iwr_cc 17
#define R_SCSI1_STATUS__last_seq_step__st_wait_free_cc 20
#define R_SCSI1_STATUS__last_seq_step__st_wait_free_sdp_disc 16
#define R_SCSI1_STATUS__last_seq_step__st_manual_req 10
#define R_SCSI1_STATUS__last_seq_step__st_manual_din_prot 18
#define R_SCSI1_STATUS__valid_status__BITNR 5
#define R_SCSI1_STATUS__valid_status__WIDTH 1
#define R_SCSI1_STATUS__valid_status__yes 1
#define R_SCSI1_STATUS__valid_status__no 0
#define R_SCSI1_STATUS__seq_status__BITNR 0
#define R_SCSI1_STATUS__seq_status__WIDTH 5
#define R_SCSI1_STATUS__seq_status__info_seq_complete 0
#define R_SCSI1_STATUS__seq_status__info_parity_error 1
#define R_SCSI1_STATUS__seq_status__info_unhandled_msg_in 2
#define R_SCSI1_STATUS__seq_status__info_unexp_ph_change 3
#define R_SCSI1_STATUS__seq_status__info_arb_lost 4
#define R_SCSI1_STATUS__seq_status__info_sel_timeout 5
#define R_SCSI1_STATUS__seq_status__info_unexp_bf 6
#define R_SCSI1_STATUS__seq_status__info_illegal_op 7
#define R_SCSI1_STATUS__seq_status__info_rec_recvd 8
#define R_SCSI1_STATUS__seq_status__info_reselected 9
#define R_SCSI1_STATUS__seq_status__info_unhandled_status 10
#define R_SCSI1_STATUS__seq_status__info_bus_reset 11
#define R_SCSI1_STATUS__seq_status__info_illegal_bf 12
#define R_SCSI1_STATUS__seq_status__info_bus_free 13

#define R_SCSI1_DATA_IN (IO_TYPECAST_RO_UWORD 0xb0000050)
#define R_SCSI1_DATA_IN__data_in__BITNR 0
#define R_SCSI1_DATA_IN__data_in__WIDTH 16

/*
!* Interrupt mask and status registers
!*/

#define R_IRQ_MASK0_RD (IO_TYPECAST_RO_UDWORD 0xb00000c0)
#define R_IRQ_MASK0_RD__nmi_pin__BITNR 31
#define R_IRQ_MASK0_RD__nmi_pin__WIDTH 1
#define R_IRQ_MASK0_RD__nmi_pin__active 1
#define R_IRQ_MASK0_RD__nmi_pin__inactive 0
#define R_IRQ_MASK0_RD__watchdog_nmi__BITNR 30
#define R_IRQ_MASK0_RD__watchdog_nmi__WIDTH 1
#define R_IRQ_MASK0_RD__watchdog_nmi__active 1
#define R_IRQ_MASK0_RD__watchdog_nmi__inactive 0
#define R_IRQ_MASK0_RD__sqe_test_error__BITNR 29
#define R_IRQ_MASK0_RD__sqe_test_error__WIDTH 1
#define R_IRQ_MASK0_RD__sqe_test_error__active 1
#define R_IRQ_MASK0_RD__sqe_test_error__inactive 0
#define R_IRQ_MASK0_RD__carrier_loss__BITNR 28
#define R_IRQ_MASK0_RD__carrier_loss__WIDTH 1
#define R_IRQ_MASK0_RD__carrier_loss__active 1
#define R_IRQ_MASK0_RD__carrier_loss__inactive 0
#define R_IRQ_MASK0_RD__deferred__BITNR 27
#define R_IRQ_MASK0_RD__deferred__WIDTH 1
#define R_IRQ_MASK0_RD__deferred__active 1
#define R_IRQ_MASK0_RD__deferred__inactive 0
#define R_IRQ_MASK0_RD__late_col__BITNR 26
#define R_IRQ_MASK0_RD__late_col__WIDTH 1
#define R_IRQ_MASK0_RD__late_col__active 1
#define R_IRQ_MASK0_RD__late_col__inactive 0
#define R_IRQ_MASK0_RD__multiple_col__BITNR 25
#define R_IRQ_MASK0_RD__multiple_col__WIDTH 1
#define R_IRQ_MASK0_RD__multiple_col__active 1
#define R_IRQ_MASK0_RD__multiple_col__inactive 0
#define R_IRQ_MASK0_RD__single_col__BITNR 24
#define R_IRQ_MASK0_RD__single_col__WIDTH 1
#define R_IRQ_MASK0_RD__single_col__active 1
#define R_IRQ_MASK0_RD__single_col__inactive 0
#define R_IRQ_MASK0_RD__congestion__BITNR 23
#define R_IRQ_MASK0_RD__congestion__WIDTH 1
#define R_IRQ_MASK0_RD__congestion__active 1
#define R_IRQ_MASK0_RD__congestion__inactive 0
#define R_IRQ_MASK0_RD__oversize__BITNR 22
#define R_IRQ_MASK0_RD__oversize__WIDTH 1
#define R_IRQ_MASK0_RD__oversize__active 1
#define R_IRQ_MASK0_RD__oversize__inactive 0
#define R_IRQ_MASK0_RD__alignment_error__BITNR 21
#define R_IRQ_MASK0_RD__alignment_error__WIDTH 1
#define R_IRQ_MASK0_RD__alignment_error__active 1
#define R_IRQ_MASK0_RD__alignment_error__inactive 0
#define R_IRQ_MASK0_RD__crc_error__BITNR 20
#define R_IRQ_MASK0_RD__crc_error__WIDTH 1
#define R_IRQ_MASK0_RD__crc_error__active 1
#define R_IRQ_MASK0_RD__crc_error__inactive 0
#define R_IRQ_MASK0_RD__overrun__BITNR 19
#define R_IRQ_MASK0_RD__overrun__WIDTH 1
#define R_IRQ_MASK0_RD__overrun__active 1
#define R_IRQ_MASK0_RD__overrun__inactive 0
#define R_IRQ_MASK0_RD__underrun__BITNR 18
#define R_IRQ_MASK0_RD__underrun__WIDTH 1
#define R_IRQ_MASK0_RD__underrun__active 1
#define R_IRQ_MASK0_RD__underrun__inactive 0
#define R_IRQ_MASK0_RD__excessive_col__BITNR 17
#define R_IRQ_MASK0_RD__excessive_col__WIDTH 1
#define R_IRQ_MASK0_RD__excessive_col__active 1
#define R_IRQ_MASK0_RD__excessive_col__inactive 0
#define R_IRQ_MASK0_RD__mdio__BITNR 16
#define R_IRQ_MASK0_RD__mdio__WIDTH 1
#define R_IRQ_MASK0_RD__mdio__active 1
#define R_IRQ_MASK0_RD__mdio__inactive 0
#define R_IRQ_MASK0_RD__ata_drq3__BITNR 15
#define R_IRQ_MASK0_RD__ata_drq3__WIDTH 1
#define R_IRQ_MASK0_RD__ata_drq3__active 1
#define R_IRQ_MASK0_RD__ata_drq3__inactive 0
#define R_IRQ_MASK0_RD__ata_drq2__BITNR 14
#define R_IRQ_MASK0_RD__ata_drq2__WIDTH 1
#define R_IRQ_MASK0_RD__ata_drq2__active 1
#define R_IRQ_MASK0_RD__ata_drq2__inactive 0
#define R_IRQ_MASK0_RD__ata_drq1__BITNR 13
#define R_IRQ_MASK0_RD__ata_drq1__WIDTH 1
#define R_IRQ_MASK0_RD__ata_drq1__active 1
#define R_IRQ_MASK0_RD__ata_drq1__inactive 0
#define R_IRQ_MASK0_RD__ata_drq0__BITNR 12
#define R_IRQ_MASK0_RD__ata_drq0__WIDTH 1
#define R_IRQ_MASK0_RD__ata_drq0__active 1
#define R_IRQ_MASK0_RD__ata_drq0__inactive 0
#define R_IRQ_MASK0_RD__par0_ecp_cmd__BITNR 11
#define R_IRQ_MASK0_RD__par0_ecp_cmd__WIDTH 1
#define R_IRQ_MASK0_RD__par0_ecp_cmd__active 1
#define R_IRQ_MASK0_RD__par0_ecp_cmd__inactive 0
#define R_IRQ_MASK0_RD__ata_irq3__BITNR 11
#define R_IRQ_MASK0_RD__ata_irq3__WIDTH 1
#define R_IRQ_MASK0_RD__ata_irq3__active 1
#define R_IRQ_MASK0_RD__ata_irq3__inactive 0
#define R_IRQ_MASK0_RD__par0_peri__BITNR 10
#define R_IRQ_MASK0_RD__par0_peri__WIDTH 1
#define R_IRQ_MASK0_RD__par0_peri__active 1
#define R_IRQ_MASK0_RD__par0_peri__inactive 0
#define R_IRQ_MASK0_RD__ata_irq2__BITNR 10
#define R_IRQ_MASK0_RD__ata_irq2__WIDTH 1
#define R_IRQ_MASK0_RD__ata_irq2__active 1
#define R_IRQ_MASK0_RD__ata_irq2__inactive 0
#define R_IRQ_MASK0_RD__par0_data__BITNR 9
#define R_IRQ_MASK0_RD__par0_data__WIDTH 1
#define R_IRQ_MASK0_RD__par0_data__active 1
#define R_IRQ_MASK0_RD__par0_data__inactive 0
#define R_IRQ_MASK0_RD__ata_irq1__BITNR 9
#define R_IRQ_MASK0_RD__ata_irq1__WIDTH 1
#define R_IRQ_MASK0_RD__ata_irq1__active 1
#define R_IRQ_MASK0_RD__ata_irq1__inactive 0
#define R_IRQ_MASK0_RD__par0_ready__BITNR 8
#define R_IRQ_MASK0_RD__par0_ready__WIDTH 1
#define R_IRQ_MASK0_RD__par0_ready__active 1
#define R_IRQ_MASK0_RD__par0_ready__inactive 0
#define R_IRQ_MASK0_RD__ata_irq0__BITNR 8
#define R_IRQ_MASK0_RD__ata_irq0__WIDTH 1
#define R_IRQ_MASK0_RD__ata_irq0__active 1
#define R_IRQ_MASK0_RD__ata_irq0__inactive 0
#define R_IRQ_MASK0_RD__mio__BITNR 8
#define R_IRQ_MASK0_RD__mio__WIDTH 1
#define R_IRQ_MASK0_RD__mio__active 1
#define R_IRQ_MASK0_RD__mio__inactive 0
#define R_IRQ_MASK0_RD__scsi0__BITNR 8
#define R_IRQ_MASK0_RD__scsi0__WIDTH 1
#define R_IRQ_MASK0_RD__scsi0__active 1
#define R_IRQ_MASK0_RD__scsi0__inactive 0
#define R_IRQ_MASK0_RD__ata_dmaend__BITNR 7
#define R_IRQ_MASK0_RD__ata_dmaend__WIDTH 1
#define R_IRQ_MASK0_RD__ata_dmaend__active 1
#define R_IRQ_MASK0_RD__ata_dmaend__inactive 0
#define R_IRQ_MASK0_RD__irq_ext_vector_nr__BITNR 5
#define R_IRQ_MASK0_RD__irq_ext_vector_nr__WIDTH 1
#define R_IRQ_MASK0_RD__irq_ext_vector_nr__active 1
#define R_IRQ_MASK0_RD__irq_ext_vector_nr__inactive 0
#define R_IRQ_MASK0_RD__irq_int_vector_nr__BITNR 4
#define R_IRQ_MASK0_RD__irq_int_vector_nr__WIDTH 1
#define R_IRQ_MASK0_RD__irq_int_vector_nr__active 1
#define R_IRQ_MASK0_RD__irq_int_vector_nr__inactive 0
#define R_IRQ_MASK0_RD__ext_dma1__BITNR 3
#define R_IRQ_MASK0_RD__ext_dma1__WIDTH 1
#define R_IRQ_MASK0_RD__ext_dma1__active 1
#define R_IRQ_MASK0_RD__ext_dma1__inactive 0
#define R_IRQ_MASK0_RD__ext_dma0__BITNR 2
#define R_IRQ_MASK0_RD__ext_dma0__WIDTH 1
#define R_IRQ_MASK0_RD__ext_dma0__active 1
#define R_IRQ_MASK0_RD__ext_dma0__inactive 0
#define R_IRQ_MASK0_RD__timer1__BITNR 1
#define R_IRQ_MASK0_RD__timer1__WIDTH 1
#define R_IRQ_MASK0_RD__timer1__active 1
#define R_IRQ_MASK0_RD__timer1__inactive 0
#define R_IRQ_MASK0_RD__timer0__BITNR 0
#define R_IRQ_MASK0_RD__timer0__WIDTH 1
#define R_IRQ_MASK0_RD__timer0__active 1
#define R_IRQ_MASK0_RD__timer0__inactive 0

#define R_IRQ_MASK0_CLR (IO_TYPECAST_UDWORD 0xb00000c0)
#define R_IRQ_MASK0_CLR__nmi_pin__BITNR 31
#define R_IRQ_MASK0_CLR__nmi_pin__WIDTH 1
#define R_IRQ_MASK0_CLR__nmi_pin__clr 1
#define R_IRQ_MASK0_CLR__nmi_pin__nop 0
#define R_IRQ_MASK0_CLR__watchdog_nmi__BITNR 30
#define R_IRQ_MASK0_CLR__watchdog_nmi__WIDTH 1
#define R_IRQ_MASK0_CLR__watchdog_nmi__clr 1
#define R_IRQ_MASK0_CLR__watchdog_nmi__nop 0
#define R_IRQ_MASK0_CLR__sqe_test_error__BITNR 29
#define R_IRQ_MASK0_CLR__sqe_test_error__WIDTH 1
#define R_IRQ_MASK0_CLR__sqe_test_error__clr 1
#define R_IRQ_MASK0_CLR__sqe_test_error__nop 0
#define R_IRQ_MASK0_CLR__carrier_loss__BITNR 28
#define R_IRQ_MASK0_CLR__carrier_loss__WIDTH 1
#define R_IRQ_MASK0_CLR__carrier_loss__clr 1
#define R_IRQ_MASK0_CLR__carrier_loss__nop 0
#define R_IRQ_MASK0_CLR__deferred__BITNR 27
#define R_IRQ_MASK0_CLR__deferred__WIDTH 1
#define R_IRQ_MASK0_CLR__deferred__clr 1
#define R_IRQ_MASK0_CLR__deferred__nop 0
#define R_IRQ_MASK0_CLR__late_col__BITNR 26
#define R_IRQ_MASK0_CLR__late_col__WIDTH 1
#define R_IRQ_MASK0_CLR__late_col__clr 1
#define R_IRQ_MASK0_CLR__late_col__nop 0
#define R_IRQ_MASK0_CLR__multiple_col__BITNR 25
#define R_IRQ_MASK0_CLR__multiple_col__WIDTH 1
#define R_IRQ_MASK0_CLR__multiple_col__clr 1
#define R_IRQ_MASK0_CLR__multiple_col__nop 0
#define R_IRQ_MASK0_CLR__single_col__BITNR 24
#define R_IRQ_MASK0_CLR__single_col__WIDTH 1
#define R_IRQ_MASK0_CLR__single_col__clr 1
#define R_IRQ_MASK0_CLR__single_col__nop 0
#define R_IRQ_MASK0_CLR__congestion__BITNR 23
#define R_IRQ_MASK0_CLR__congestion__WIDTH 1
#define R_IRQ_MASK0_CLR__congestion__clr 1
#define R_IRQ_MASK0_CLR__congestion__nop 0
#define R_IRQ_MASK0_CLR__oversize__BITNR 22
#define R_IRQ_MASK0_CLR__oversize__WIDTH 1
#define R_IRQ_MASK0_CLR__oversize__clr 1
#define R_IRQ_MASK0_CLR__oversize__nop 0
#define R_IRQ_MASK0_CLR__alignment_error__BITNR 21
#define R_IRQ_MASK0_CLR__alignment_error__WIDTH 1
#define R_IRQ_MASK0_CLR__alignment_error__clr 1
#define R_IRQ_MASK0_CLR__alignment_error__nop 0
#define R_IRQ_MASK0_CLR__crc_error__BITNR 20
#define R_IRQ_MASK0_CLR__crc_error__WIDTH 1
#define R_IRQ_MASK0_CLR__crc_error__clr 1
#define R_IRQ_MASK0_CLR__crc_error__nop 0
#define R_IRQ_MASK0_CLR__overrun__BITNR 19
#define R_IRQ_MASK0_CLR__overrun__WIDTH 1
#define R_IRQ_MASK0_CLR__overrun__clr 1
#define R_IRQ_MASK0_CLR__overrun__nop 0
#define R_IRQ_MASK0_CLR__underrun__BITNR 18
#define R_IRQ_MASK0_CLR__underrun__WIDTH 1
#define R_IRQ_MASK0_CLR__underrun__clr 1
#define R_IRQ_MASK0_CLR__underrun__nop 0
#define R_IRQ_MASK0_CLR__excessive_col__BITNR 17
#define R_IRQ_MASK0_CLR__excessive_col__WIDTH 1
#define R_IRQ_MASK0_CLR__excessive_col__clr 1
#define R_IRQ_MASK0_CLR__excessive_col__nop 0
#define R_IRQ_MASK0_CLR__mdio__BITNR 16
#define R_IRQ_MASK0_CLR__mdio__WIDTH 1
#define R_IRQ_MASK0_CLR__mdio__clr 1
#define R_IRQ_MASK0_CLR__mdio__nop 0
#define R_IRQ_MASK0_CLR__ata_drq3__BITNR 15
#define R_IRQ_MASK0_CLR__ata_drq3__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_drq3__clr 1
#define R_IRQ_MASK0_CLR__ata_drq3__nop 0
#define R_IRQ_MASK0_CLR__ata_drq2__BITNR 14
#define R_IRQ_MASK0_CLR__ata_drq2__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_drq2__clr 1
#define R_IRQ_MASK0_CLR__ata_drq2__nop 0
#define R_IRQ_MASK0_CLR__ata_drq1__BITNR 13
#define R_IRQ_MASK0_CLR__ata_drq1__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_drq1__clr 1
#define R_IRQ_MASK0_CLR__ata_drq1__nop 0
#define R_IRQ_MASK0_CLR__ata_drq0__BITNR 12
#define R_IRQ_MASK0_CLR__ata_drq0__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_drq0__clr 1
#define R_IRQ_MASK0_CLR__ata_drq0__nop 0
#define R_IRQ_MASK0_CLR__par0_ecp_cmd__BITNR 11
#define R_IRQ_MASK0_CLR__par0_ecp_cmd__WIDTH 1
#define R_IRQ_MASK0_CLR__par0_ecp_cmd__clr 1
#define R_IRQ_MASK0_CLR__par0_ecp_cmd__nop 0
#define R_IRQ_MASK0_CLR__ata_irq3__BITNR 11
#define R_IRQ_MASK0_CLR__ata_irq3__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_irq3__clr 1
#define R_IRQ_MASK0_CLR__ata_irq3__nop 0
#define R_IRQ_MASK0_CLR__par0_peri__BITNR 10
#define R_IRQ_MASK0_CLR__par0_peri__WIDTH 1
#define R_IRQ_MASK0_CLR__par0_peri__clr 1
#define R_IRQ_MASK0_CLR__par0_peri__nop 0
#define R_IRQ_MASK0_CLR__ata_irq2__BITNR 10
#define R_IRQ_MASK0_CLR__ata_irq2__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_irq2__clr 1
#define R_IRQ_MASK0_CLR__ata_irq2__nop 0
#define R_IRQ_MASK0_CLR__par0_data__BITNR 9
#define R_IRQ_MASK0_CLR__par0_data__WIDTH 1
#define R_IRQ_MASK0_CLR__par0_data__clr 1
#define R_IRQ_MASK0_CLR__par0_data__nop 0
#define R_IRQ_MASK0_CLR__ata_irq1__BITNR 9
#define R_IRQ_MASK0_CLR__ata_irq1__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_irq1__clr 1
#define R_IRQ_MASK0_CLR__ata_irq1__nop 0
#define R_IRQ_MASK0_CLR__par0_ready__BITNR 8
#define R_IRQ_MASK0_CLR__par0_ready__WIDTH 1
#define R_IRQ_MASK0_CLR__par0_ready__clr 1
#define R_IRQ_MASK0_CLR__par0_ready__nop 0
#define R_IRQ_MASK0_CLR__ata_irq0__BITNR 8
#define R_IRQ_MASK0_CLR__ata_irq0__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_irq0__clr 1
#define R_IRQ_MASK0_CLR__ata_irq0__nop 0
#define R_IRQ_MASK0_CLR__mio__BITNR 8
#define R_IRQ_MASK0_CLR__mio__WIDTH 1
#define R_IRQ_MASK0_CLR__mio__clr 1
#define R_IRQ_MASK0_CLR__mio__nop 0
#define R_IRQ_MASK0_CLR__scsi0__BITNR 8
#define R_IRQ_MASK0_CLR__scsi0__WIDTH 1
#define R_IRQ_MASK0_CLR__scsi0__clr 1
#define R_IRQ_MASK0_CLR__scsi0__nop 0
#define R_IRQ_MASK0_CLR__ata_dmaend__BITNR 7
#define R_IRQ_MASK0_CLR__ata_dmaend__WIDTH 1
#define R_IRQ_MASK0_CLR__ata_dmaend__clr 1
#define R_IRQ_MASK0_CLR__ata_dmaend__nop 0
#define R_IRQ_MASK0_CLR__irq_ext_vector_nr__BITNR 5
#define R_IRQ_MASK0_CLR__irq_ext_vector_nr__WIDTH 1
#define R_IRQ_MASK0_CLR__irq_ext_vector_nr__clr 1
#define R_IRQ_MASK0_CLR__irq_ext_vector_nr__nop 0
#define R_IRQ_MASK0_CLR__irq_int_vector_nr__BITNR 4
#define R_IRQ_MASK0_CLR__irq_int_vector_nr__WIDTH 1
#define R_IRQ_MASK0_CLR__irq_int_vector_nr__clr 1
#define R_IRQ_MASK0_CLR__irq_int_vector_nr__nop 0
#define R_IRQ_MASK0_CLR__ext_dma1__BITNR 3
#define R_IRQ_MASK0_CLR__ext_dma1__WIDTH 1
#define R_IRQ_MASK0_CLR__ext_dma1__clr 1
#define R_IRQ_MASK0_CLR__ext_dma1__nop 0
#define R_IRQ_MASK0_CLR__ext_dma0__BITNR 2
#define R_IRQ_MASK0_CLR__ext_dma0__WIDTH 1
#define R_IRQ_MASK0_CLR__ext_dma0__clr 1
#define R_IRQ_MASK0_CLR__ext_dma0__nop 0
#define R_IRQ_MASK0_CLR__timer1__BITNR 1
#define R_IRQ_MASK0_CLR__timer1__WIDTH 1
#define R_IRQ_MASK0_CLR__timer1__clr 1
#define R_IRQ_MASK0_CLR__timer1__nop 0
#define R_IRQ_MASK0_CLR__timer0__BITNR 0
#define R_IRQ_MASK0_CLR__timer0__WIDTH 1
#define R_IRQ_MASK0_CLR__timer0__clr 1
#define R_IRQ_MASK0_CLR__timer0__nop 0

#define R_IRQ_READ0 (IO_TYPECAST_RO_UDWORD 0xb00000c4)
#define R_IRQ_READ0__nmi_pin__BITNR 31
#define R_IRQ_READ0__nmi_pin__WIDTH 1
#define R_IRQ_READ0__nmi_pin__active 1
#define R_IRQ_READ0__nmi_pin__inactive 0
#define R_IRQ_READ0__watchdog_nmi__BITNR 30
#define R_IRQ_READ0__watchdog_nmi__WIDTH 1
#define R_IRQ_READ0__watchdog_nmi__active 1
#define R_IRQ_READ0__watchdog_nmi__inactive 0
#define R_IRQ_READ0__sqe_test_error__BITNR 29
#define R_IRQ_READ0__sqe_test_error__WIDTH 1
#define R_IRQ_READ0__sqe_test_error__active 1
#define R_IRQ_READ0__sqe_test_error__inactive 0
#define R_IRQ_READ0__carrier_loss__BITNR 28
#define R_IRQ_READ0__carrier_loss__WIDTH 1
#define R_IRQ_READ0__carrier_loss__active 1
#define R_IRQ_READ0__carrier_loss__inactive 0
#define R_IRQ_READ0__deferred__BITNR 27
#define R_IRQ_READ0__deferred__WIDTH 1
#define R_IRQ_READ0__deferred__active 1
#define R_IRQ_READ0__deferred__inactive 0
#define R_IRQ_READ0__late_col__BITNR 26
#define R_IRQ_READ0__late_col__WIDTH 1
#define R_IRQ_READ0__late_col__active 1
#define R_IRQ_READ0__late_col__inactive 0
#define R_IRQ_READ0__multiple_col__BITNR 25
#define R_IRQ_READ0__multiple_col__WIDTH 1
#define R_IRQ_READ0__multiple_col__active 1
#define R_IRQ_READ0__multiple_col__inactive 0
#define R_IRQ_READ0__single_col__BITNR 24
#define R_IRQ_READ0__single_col__WIDTH 1
#define R_IRQ_READ0__single_col__active 1
#define R_IRQ_READ0__single_col__inactive 0
#define R_IRQ_READ0__congestion__BITNR 23
#define R_IRQ_READ0__congestion__WIDTH 1
#define R_IRQ_READ0__congestion__active 1
#define R_IRQ_READ0__congestion__inactive 0
#define R_IRQ_READ0__oversize__BITNR 22
#define R_IRQ_READ0__oversize__WIDTH 1
#define R_IRQ_READ0__oversize__active 1
#define R_IRQ_READ0__oversize__inactive 0
#define R_IRQ_READ0__alignment_error__BITNR 21
#define R_IRQ_READ0__alignment_error__WIDTH 1
#define R_IRQ_READ0__alignment_error__active 1
#define R_IRQ_READ0__alignment_error__inactive 0
#define R_IRQ_READ0__crc_error__BITNR 20
#define R_IRQ_READ0__crc_error__WIDTH 1
#define R_IRQ_READ0__crc_error__active 1
#define R_IRQ_READ0__crc_error__inactive 0
#define R_IRQ_READ0__overrun__BITNR 19
#define R_IRQ_READ0__overrun__WIDTH 1
#define R_IRQ_READ0__overrun__active 1
#define R_IRQ_READ0__overrun__inactive 0
#define R_IRQ_READ0__underrun__BITNR 18
#define R_IRQ_READ0__underrun__WIDTH 1
#define R_IRQ_READ0__underrun__active 1
#define R_IRQ_READ0__underrun__inactive 0
#define R_IRQ_READ0__excessive_col__BITNR 17
#define R_IRQ_READ0__excessive_col__WIDTH 1
#define R_IRQ_READ0__excessive_col__active 1
#define R_IRQ_READ0__excessive_col__inactive 0
#define R_IRQ_READ0__mdio__BITNR 16
#define R_IRQ_READ0__mdio__WIDTH 1
#define R_IRQ_READ0__mdio__active 1
#define R_IRQ_READ0__mdio__inactive 0
#define R_IRQ_READ0__ata_drq3__BITNR 15
#define R_IRQ_READ0__ata_drq3__WIDTH 1
#define R_IRQ_READ0__ata_drq3__active 1
#define R_IRQ_READ0__ata_drq3__inactive 0
#define R_IRQ_READ0__ata_drq2__BITNR 14
#define R_IRQ_READ0__ata_drq2__WIDTH 1
#define R_IRQ_READ0__ata_drq2__active 1
#define R_IRQ_READ0__ata_drq2__inactive 0
#define R_IRQ_READ0__ata_drq1__BITNR 13
#define R_IRQ_READ0__ata_drq1__WIDTH 1
#define R_IRQ_READ0__ata_drq1__active 1
#define R_IRQ_READ0__ata_drq1__inactive 0
#define R_IRQ_READ0__ata_drq0__BITNR 12
#define R_IRQ_READ0__ata_drq0__WIDTH 1
#define R_IRQ_READ0__ata_drq0__active 1
#define R_IRQ_READ0__ata_drq0__inactive 0
#define R_IRQ_READ0__par0_ecp_cmd__BITNR 11
#define R_IRQ_READ0__par0_ecp_cmd__WIDTH 1
#define R_IRQ_READ0__par0_ecp_cmd__active 1
#define R_IRQ_READ0__par0_ecp_cmd__inactive 0
#define R_IRQ_READ0__ata_irq3__BITNR 11
#define R_IRQ_READ0__ata_irq3__WIDTH 1
#define R_IRQ_READ0__ata_irq3__active 1
#define R_IRQ_READ0__ata_irq3__inactive 0
#define R_IRQ_READ0__par0_peri__BITNR 10
#define R_IRQ_READ0__par0_peri__WIDTH 1
#define R_IRQ_READ0__par0_peri__active 1
#define R_IRQ_READ0__par0_peri__inactive 0
#define R_IRQ_READ0__ata_irq2__BITNR 10
#define R_IRQ_READ0__ata_irq2__WIDTH 1
#define R_IRQ_READ0__ata_irq2__active 1
#define R_IRQ_READ0__ata_irq2__inactive 0
#define R_IRQ_READ0__par0_data__BITNR 9
#define R_IRQ_READ0__par0_data__WIDTH 1
#define R_IRQ_READ0__par0_data__active 1
#define R_IRQ_READ0__par0_data__inactive 0
#define R_IRQ_READ0__ata_irq1__BITNR 9
#define R_IRQ_READ0__ata_irq1__WIDTH 1
#define R_IRQ_READ0__ata_irq1__active 1
#define R_IRQ_READ0__ata_irq1__inactive 0
#define R_IRQ_READ0__par0_ready__BITNR 8
#define R_IRQ_READ0__par0_ready__WIDTH 1
#define R_IRQ_READ0__par0_ready__active 1
#define R_IRQ_READ0__par0_ready__inactive 0
#define R_IRQ_READ0__ata_irq0__BITNR 8
#define R_IRQ_READ0__ata_irq0__WIDTH 1
#define R_IRQ_READ0__ata_irq0__active 1
#define R_IRQ_READ0__ata_irq0__inactive 0
#define R_IRQ_READ0__mio__BITNR 8
#define R_IRQ_READ0__mio__WIDTH 1
#define R_IRQ_READ0__mio__active 1
#define R_IRQ_READ0__mio__inactive 0
#define R_IRQ_READ0__scsi0__BITNR 8
#define R_IRQ_READ0__scsi0__WIDTH 1
#define R_IRQ_READ0__scsi0__active 1
#define R_IRQ_READ0__scsi0__inactive 0
#define R_IRQ_READ0__ata_dmaend__BITNR 7
#define R_IRQ_READ0__ata_dmaend__WIDTH 1
#define R_IRQ_READ0__ata_dmaend__active 1
#define R_IRQ_READ0__ata_dmaend__inactive 0
#define R_IRQ_READ0__irq_ext_vector_nr__BITNR 5
#define R_IRQ_READ0__irq_ext_vector_nr__WIDTH 1
#define R_IRQ_READ0__irq_ext_vector_nr__active 1
#define R_IRQ_READ0__irq_ext_vector_nr__inactive 0
#define R_IRQ_READ0__irq_int_vector_nr__BITNR 4
#define R_IRQ_READ0__irq_int_vector_nr__WIDTH 1
#define R_IRQ_READ0__irq_int_vector_nr__active 1
#define R_IRQ_READ0__irq_int_vector_nr__inactive 0
#define R_IRQ_READ0__ext_dma1__BITNR 3
#define R_IRQ_READ0__ext_dma1__WIDTH 1
#define R_IRQ_READ0__ext_dma1__active 1
#define R_IRQ_READ0__ext_dma1__inactive 0
#define R_IRQ_READ0__ext_dma0__BITNR 2
#define R_IRQ_READ0__ext_dma0__WIDTH 1
#define R_IRQ_READ0__ext_dma0__active 1
#define R_IRQ_READ0__ext_dma0__inactive 0
#define R_IRQ_READ0__timer1__BITNR 1
#define R_IRQ_READ0__timer1__WIDTH 1
#define R_IRQ_READ0__timer1__active 1
#define R_IRQ_READ0__timer1__inactive 0
#define R_IRQ_READ0__timer0__BITNR 0
#define R_IRQ_READ0__timer0__WIDTH 1
#define R_IRQ_READ0__timer0__active 1
#define R_IRQ_READ0__timer0__inactive 0

#define R_IRQ_MASK0_SET (IO_TYPECAST_UDWORD 0xb00000c4)
#define R_IRQ_MASK0_SET__nmi_pin__BITNR 31
#define R_IRQ_MASK0_SET__nmi_pin__WIDTH 1
#define R_IRQ_MASK0_SET__nmi_pin__set 1
#define R_IRQ_MASK0_SET__nmi_pin__nop 0
#define R_IRQ_MASK0_SET__watchdog_nmi__BITNR 30
#define R_IRQ_MASK0_SET__watchdog_nmi__WIDTH 1
#define R_IRQ_MASK0_SET__watchdog_nmi__set 1
#define R_IRQ_MASK0_SET__watchdog_nmi__nop 0
#define R_IRQ_MASK0_SET__sqe_test_error__BITNR 29
#define R_IRQ_MASK0_SET__sqe_test_error__WIDTH 1
#define R_IRQ_MASK0_SET__sqe_test_error__set 1
#define R_IRQ_MASK0_SET__sqe_test_error__nop 0
#define R_IRQ_MASK0_SET__carrier_loss__BITNR 28
#define R_IRQ_MASK0_SET__carrier_loss__WIDTH 1
#define R_IRQ_MASK0_SET__carrier_loss__set 1
#define R_IRQ_MASK0_SET__carrier_loss__nop 0
#define R_IRQ_MASK0_SET__deferred__BITNR 27
#define R_IRQ_MASK0_SET__deferred__WIDTH 1
#define R_IRQ_MASK0_SET__deferred__set 1
#define R_IRQ_MASK0_SET__deferred__nop 0
#define R_IRQ_MASK0_SET__late_col__BITNR 26
#define R_IRQ_MASK0_SET__late_col__WIDTH 1
#define R_IRQ_MASK0_SET__late_col__set 1
#define R_IRQ_MASK0_SET__late_col__nop 0
#define R_IRQ_MASK0_SET__multiple_col__BITNR 25
#define R_IRQ_MASK0_SET__multiple_col__WIDTH 1
#define R_IRQ_MASK0_SET__multiple_col__set 1
#define R_IRQ_MASK0_SET__multiple_col__nop 0
#define R_IRQ_MASK0_SET__single_col__BITNR 24
#define R_IRQ_MASK0_SET__single_col__WIDTH 1
#define R_IRQ_MASK0_SET__single_col__set 1
#define R_IRQ_MASK0_SET__single_col__nop 0
#define R_IRQ_MASK0_SET__congestion__BITNR 23
#define R_IRQ_MASK0_SET__congestion__WIDTH 1
#define R_IRQ_MASK0_SET__congestion__set 1
#define R_IRQ_MASK0_SET__congestion__nop 0
#define R_IRQ_MASK0_SET__oversize__BITNR 22
#define R_IRQ_MASK0_SET__oversize__WIDTH 1
#define R_IRQ_MASK0_SET__oversize__set 1
#define R_IRQ_MASK0_SET__oversize__nop 0
#define R_IRQ_MASK0_SET__alignment_error__BITNR 21
#define R_IRQ_MASK0_SET__alignment_error__WIDTH 1
#define R_IRQ_MASK0_SET__alignment_error__set 1
#define R_IRQ_MASK0_SET__alignment_error__nop 0
#define R_IRQ_MASK0_SET__crc_error__BITNR 20
#define R_IRQ_MASK0_SET__crc_error__WIDTH 1
#define R_IRQ_MASK0_SET__crc_error__set 1
#define R_IRQ_MASK0_SET__crc_error__nop 0
#define R_IRQ_MASK0_SET__overrun__BITNR 19
#define R_IRQ_MASK0_SET__overrun__WIDTH 1
#define R_IRQ_MASK0_SET__overrun__set 1
#define R_IRQ_MASK0_SET__overrun__nop 0
#define R_IRQ_MASK0_SET__underrun__BITNR 18
#define R_IRQ_MASK0_SET__underrun__WIDTH 1
#define R_IRQ_MASK0_SET__underrun__set 1
#define R_IRQ_MASK0_SET__underrun__nop 0
#define R_IRQ_MASK0_SET__excessive_col__BITNR 17
#define R_IRQ_MASK0_SET__excessive_col__WIDTH 1
#define R_IRQ_MASK0_SET__excessive_col__set 1
#define R_IRQ_MASK0_SET__excessive_col__nop 0
#define R_IRQ_MASK0_SET__mdio__BITNR 16
#define R_IRQ_MASK0_SET__mdio__WIDTH 1
#define R_IRQ_MASK0_SET__mdio__set 1
#define R_IRQ_MASK0_SET__mdio__nop 0
#define R_IRQ_MASK0_SET__ata_drq3__BITNR 15
#define R_IRQ_MASK0_SET__ata_drq3__WIDTH 1
#define R_IRQ_MASK0_SET__ata_drq3__set 1
#define R_IRQ_MASK0_SET__ata_drq3__nop 0
#define R_IRQ_MASK0_SET__ata_drq2__BITNR 14
#define R_IRQ_MASK0_SET__ata_drq2__WIDTH 1
#define R_IRQ_MASK0_SET__ata_drq2__set 1
#define R_IRQ_MASK0_SET__ata_drq2__nop 0
#define R_IRQ_MASK0_SET__ata_drq1__BITNR 13
#define R_IRQ_MASK0_SET__ata_drq1__WIDTH 1
#define R_IRQ_MASK0_SET__ata_drq1__set 1
#define R_IRQ_MASK0_SET__ata_drq1__nop 0
#define R_IRQ_MASK0_SET__ata_drq0__BITNR 12
#define R_IRQ_MASK0_SET__ata_drq0__WIDTH 1
#define R_IRQ_MASK0_SET__ata_drq0__set 1
#define R_IRQ_MASK0_SET__ata_drq0__nop 0
#define R_IRQ_MASK0_SET__par0_ecp_cmd__BITNR 11
#define R_IRQ_MASK0_SET__par0_ecp_cmd__WIDTH 1
#define R_IRQ_MASK0_SET__par0_ecp_cmd__set 1
#define R_IRQ_MASK0_SET__par0_ecp_cmd__nop 0
#define R_IRQ_MASK0_SET__ata_irq3__BITNR 11
#define R_IRQ_MASK0_SET__ata_irq3__WIDTH 1
#define R_IRQ_MASK0_SET__ata_irq3__set 1
#define R_IRQ_MASK0_SET__ata_irq3__nop 0
#define R_IRQ_MASK0_SET__par0_peri__BITNR 10
#define R_IRQ_MASK0_SET__par0_peri__WIDTH 1
#define R_IRQ_MASK0_SET__par0_peri__set 1
#define R_IRQ_MASK0_SET__par0_peri__nop 0
#define R_IRQ_MASK0_SET__ata_irq2__BITNR 10
#define R_IRQ_MASK0_SET__ata_irq2__WIDTH 1
#define R_IRQ_MASK0_SET__ata_irq2__set 1
#define R_IRQ_MASK0_SET__ata_irq2__nop 0
#define R_IRQ_MASK0_SET__par0_data__BITNR 9
#define R_IRQ_MASK0_SET__par0_data__WIDTH 1
#define R_IRQ_MASK0_SET__par0_data__set 1
#define R_IRQ_MASK0_SET__par0_data__nop 0
#define R_IRQ_MASK0_SET__ata_irq1__BITNR 9
#define R_IRQ_MASK0_SET__ata_irq1__WIDTH 1
#define R_IRQ_MASK0_SET__ata_irq1__set 1
#define R_IRQ_MASK0_SET__ata_irq1__nop 0
#define R_IRQ_MASK0_SET__par0_ready__BITNR 8
#define R_IRQ_MASK0_SET__par0_ready__WIDTH 1
#define R_IRQ_MASK0_SET__par0_ready__set 1
#define R_IRQ_MASK0_SET__par0_ready__nop 0
#define R_IRQ_MASK0_SET__ata_irq0__BITNR 8
#define R_IRQ_MASK0_SET__ata_irq0__WIDTH 1
#define R_IRQ_MASK0_SET__ata_irq0__set 1
#define R_IRQ_MASK0_SET__ata_irq0__nop 0
#define R_IRQ_MASK0_SET__mio__BITNR 8
#define R_IRQ_MASK0_SET__mio__WIDTH 1
#define R_IRQ_MASK0_SET__mio__set 1
#define R_IRQ_MASK0_SET__mio__nop 0
#define R_IRQ_MASK0_SET__scsi0__BITNR 8
#define R_IRQ_MASK0_SET__scsi0__WIDTH 1
#define R_IRQ_MASK0_SET__scsi0__set 1
#define R_IRQ_MASK0_SET__scsi0__nop 0
#define R_IRQ_MASK0_SET__ata_dmaend__BITNR 7
#define R_IRQ_MASK0_SET__ata_dmaend__WIDTH 1
#define R_IRQ_MASK0_SET__ata_dmaend__set 1
#define R_IRQ_MASK0_SET__ata_dmaend__nop 0
#define R_IRQ_MASK0_SET__irq_ext_vector_nr__BITNR 5
#define R_IRQ_MASK0_SET__irq_ext_vector_nr__WIDTH 1
#define R_IRQ_MASK0_SET__irq_ext_vector_nr__set 1
#define R_IRQ_MASK0_SET__irq_ext_vector_nr__nop 0
#define R_IRQ_MASK0_SET__irq_int_vector_nr__BITNR 4
#define R_IRQ_MASK0_SET__irq_int_vector_nr__WIDTH 1
#define R_IRQ_MASK0_SET__irq_int_vector_nr__set 1
#define R_IRQ_MASK0_SET__irq_int_vector_nr__nop 0
#define R_IRQ_MASK0_SET__ext_dma1__BITNR 3
#define R_IRQ_MASK0_SET__ext_dma1__WIDTH 1
#define R_IRQ_MASK0_SET__ext_dma1__set 1
#define R_IRQ_MASK0_SET__ext_dma1__nop 0
#define R_IRQ_MASK0_SET__ext_dma0__BITNR 2
#define R_IRQ_MASK0_SET__ext_dma0__WIDTH 1
#define R_IRQ_MASK0_SET__ext_dma0__set 1
#define R_IRQ_MASK0_SET__ext_dma0__nop 0
#define R_IRQ_MASK0_SET__timer1__BITNR 1
#define R_IRQ_MASK0_SET__timer1__WIDTH 1
#define R_IRQ_MASK0_SET__timer1__set 1
#define R_IRQ_MASK0_SET__timer1__nop 0
#define R_IRQ_MASK0_SET__timer0__BITNR 0
#define R_IRQ_MASK0_SET__timer0__WIDTH 1
#define R_IRQ_MASK0_SET__timer0__set 1
#define R_IRQ_MASK0_SET__timer0__nop 0

#define R_IRQ_MASK1_RD (IO_TYPECAST_RO_UDWORD 0xb00000c8)
#define R_IRQ_MASK1_RD__sw_int7__BITNR 31
#define R_IRQ_MASK1_RD__sw_int7__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int7__active 1
#define R_IRQ_MASK1_RD__sw_int7__inactive 0
#define R_IRQ_MASK1_RD__sw_int6__BITNR 30
#define R_IRQ_MASK1_RD__sw_int6__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int6__active 1
#define R_IRQ_MASK1_RD__sw_int6__inactive 0
#define R_IRQ_MASK1_RD__sw_int5__BITNR 29
#define R_IRQ_MASK1_RD__sw_int5__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int5__active 1
#define R_IRQ_MASK1_RD__sw_int5__inactive 0
#define R_IRQ_MASK1_RD__sw_int4__BITNR 28
#define R_IRQ_MASK1_RD__sw_int4__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int4__active 1
#define R_IRQ_MASK1_RD__sw_int4__inactive 0
#define R_IRQ_MASK1_RD__sw_int3__BITNR 27
#define R_IRQ_MASK1_RD__sw_int3__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int3__active 1
#define R_IRQ_MASK1_RD__sw_int3__inactive 0
#define R_IRQ_MASK1_RD__sw_int2__BITNR 26
#define R_IRQ_MASK1_RD__sw_int2__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int2__active 1
#define R_IRQ_MASK1_RD__sw_int2__inactive 0
#define R_IRQ_MASK1_RD__sw_int1__BITNR 25
#define R_IRQ_MASK1_RD__sw_int1__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int1__active 1
#define R_IRQ_MASK1_RD__sw_int1__inactive 0
#define R_IRQ_MASK1_RD__sw_int0__BITNR 24
#define R_IRQ_MASK1_RD__sw_int0__WIDTH 1
#define R_IRQ_MASK1_RD__sw_int0__active 1
#define R_IRQ_MASK1_RD__sw_int0__inactive 0
#define R_IRQ_MASK1_RD__par1_ecp_cmd__BITNR 19
#define R_IRQ_MASK1_RD__par1_ecp_cmd__WIDTH 1
#define R_IRQ_MASK1_RD__par1_ecp_cmd__active 1
#define R_IRQ_MASK1_RD__par1_ecp_cmd__inactive 0
#define R_IRQ_MASK1_RD__par1_peri__BITNR 18
#define R_IRQ_MASK1_RD__par1_peri__WIDTH 1
#define R_IRQ_MASK1_RD__par1_peri__active 1
#define R_IRQ_MASK1_RD__par1_peri__inactive 0
#define R_IRQ_MASK1_RD__par1_data__BITNR 17
#define R_IRQ_MASK1_RD__par1_data__WIDTH 1
#define R_IRQ_MASK1_RD__par1_data__active 1
#define R_IRQ_MASK1_RD__par1_data__inactive 0
#define R_IRQ_MASK1_RD__par1_ready__BITNR 16
#define R_IRQ_MASK1_RD__par1_ready__WIDTH 1
#define R_IRQ_MASK1_RD__par1_ready__active 1
#define R_IRQ_MASK1_RD__par1_ready__inactive 0
#define R_IRQ_MASK1_RD__scsi1__BITNR 16
#define R_IRQ_MASK1_RD__scsi1__WIDTH 1
#define R_IRQ_MASK1_RD__scsi1__active 1
#define R_IRQ_MASK1_RD__scsi1__inactive 0
#define R_IRQ_MASK1_RD__ser3_ready__BITNR 15
#define R_IRQ_MASK1_RD__ser3_ready__WIDTH 1
#define R_IRQ_MASK1_RD__ser3_ready__active 1
#define R_IRQ_MASK1_RD__ser3_ready__inactive 0
#define R_IRQ_MASK1_RD__ser3_data__BITNR 14
#define R_IRQ_MASK1_RD__ser3_data__WIDTH 1
#define R_IRQ_MASK1_RD__ser3_data__active 1
#define R_IRQ_MASK1_RD__ser3_data__inactive 0
#define R_IRQ_MASK1_RD__ser2_ready__BITNR 13
#define R_IRQ_MASK1_RD__ser2_ready__WIDTH 1
#define R_IRQ_MASK1_RD__ser2_ready__active 1
#define R_IRQ_MASK1_RD__ser2_ready__inactive 0
#define R_IRQ_MASK1_RD__ser2_data__BITNR 12
#define R_IRQ_MASK1_RD__ser2_data__WIDTH 1
#define R_IRQ_MASK1_RD__ser2_data__active 1
#define R_IRQ_MASK1_RD__ser2_data__inactive 0
#define R_IRQ_MASK1_RD__ser1_ready__BITNR 11
#define R_IRQ_MASK1_RD__ser1_ready__WIDTH 1
#define R_IRQ_MASK1_RD__ser1_ready__active 1
#define R_IRQ_MASK1_RD__ser1_ready__inactive 0
#define R_IRQ_MASK1_RD__ser1_data__BITNR 10
#define R_IRQ_MASK1_RD__ser1_data__WIDTH 1
#define R_IRQ_MASK1_RD__ser1_data__active 1
#define R_IRQ_MASK1_RD__ser1_data__inactive 0
#define R_IRQ_MASK1_RD__ser0_ready__BITNR 9
#define R_IRQ_MASK1_RD__ser0_ready__WIDTH 1
#define R_IRQ_MASK1_RD__ser0_ready__active 1
#define R_IRQ_MASK1_RD__ser0_ready__inactive 0
#define R_IRQ_MASK1_RD__ser0_data__BITNR 8
#define R_IRQ_MASK1_RD__ser0_data__WIDTH 1
#define R_IRQ_MASK1_RD__ser0_data__active 1
#define R_IRQ_MASK1_RD__ser0_data__inactive 0
#define R_IRQ_MASK1_RD__pa7__BITNR 7
#define R_IRQ_MASK1_RD__pa7__WIDTH 1
#define R_IRQ_MASK1_RD__pa7__active 1
#define R_IRQ_MASK1_RD__pa7__inactive 0
#define R_IRQ_MASK1_RD__pa6__BITNR 6
#define R_IRQ_MASK1_RD__pa6__WIDTH 1
#define R_IRQ_MASK1_RD__pa6__active 1
#define R_IRQ_MASK1_RD__pa6__inactive 0
#define R_IRQ_MASK1_RD__pa5__BITNR 5
#define R_IRQ_MASK1_RD__pa5__WIDTH 1
#define R_IRQ_MASK1_RD__pa5__active 1
#define R_IRQ_MASK1_RD__pa5__inactive 0
#define R_IRQ_MASK1_RD__pa4__BITNR 4
#define R_IRQ_MASK1_RD__pa4__WIDTH 1
#define R_IRQ_MASK1_RD__pa4__active 1
#define R_IRQ_MASK1_RD__pa4__inactive 0
#define R_IRQ_MASK1_RD__pa3__BITNR 3
#define R_IRQ_MASK1_RD__pa3__WIDTH 1
#define R_IRQ_MASK1_RD__pa3__active 1
#define R_IRQ_MASK1_RD__pa3__inactive 0
#define R_IRQ_MASK1_RD__pa2__BITNR 2
#define R_IRQ_MASK1_RD__pa2__WIDTH 1
#define R_IRQ_MASK1_RD__pa2__active 1
#define R_IRQ_MASK1_RD__pa2__inactive 0
#define R_IRQ_MASK1_RD__pa1__BITNR 1
#define R_IRQ_MASK1_RD__pa1__WIDTH 1
#define R_IRQ_MASK1_RD__pa1__active 1
#define R_IRQ_MASK1_RD__pa1__inactive 0
#define R_IRQ_MASK1_RD__pa0__BITNR 0
#define R_IRQ_MASK1_RD__pa0__WIDTH 1
#define R_IRQ_MASK1_RD__pa0__active 1
#define R_IRQ_MASK1_RD__pa0__inactive 0

#define R_IRQ_MASK1_CLR (IO_TYPECAST_UDWORD 0xb00000c8)
#define R_IRQ_MASK1_CLR__sw_int7__BITNR 31
#define R_IRQ_MASK1_CLR__sw_int7__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int7__clr 1
#define R_IRQ_MASK1_CLR__sw_int7__nop 0
#define R_IRQ_MASK1_CLR__sw_int6__BITNR 30
#define R_IRQ_MASK1_CLR__sw_int6__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int6__clr 1
#define R_IRQ_MASK1_CLR__sw_int6__nop 0
#define R_IRQ_MASK1_CLR__sw_int5__BITNR 29
#define R_IRQ_MASK1_CLR__sw_int5__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int5__clr 1
#define R_IRQ_MASK1_CLR__sw_int5__nop 0
#define R_IRQ_MASK1_CLR__sw_int4__BITNR 28
#define R_IRQ_MASK1_CLR__sw_int4__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int4__clr 1
#define R_IRQ_MASK1_CLR__sw_int4__nop 0
#define R_IRQ_MASK1_CLR__sw_int3__BITNR 27
#define R_IRQ_MASK1_CLR__sw_int3__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int3__clr 1
#define R_IRQ_MASK1_CLR__sw_int3__nop 0
#define R_IRQ_MASK1_CLR__sw_int2__BITNR 26
#define R_IRQ_MASK1_CLR__sw_int2__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int2__clr 1
#define R_IRQ_MASK1_CLR__sw_int2__nop 0
#define R_IRQ_MASK1_CLR__sw_int1__BITNR 25
#define R_IRQ_MASK1_CLR__sw_int1__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int1__clr 1
#define R_IRQ_MASK1_CLR__sw_int1__nop 0
#define R_IRQ_MASK1_CLR__sw_int0__BITNR 24
#define R_IRQ_MASK1_CLR__sw_int0__WIDTH 1
#define R_IRQ_MASK1_CLR__sw_int0__clr 1
#define R_IRQ_MASK1_CLR__sw_int0__nop 0
#define R_IRQ_MASK1_CLR__par1_ecp_cmd__BITNR 19
#define R_IRQ_MASK1_CLR__par1_ecp_cmd__WIDTH 1
#define R_IRQ_MASK1_CLR__par1_ecp_cmd__clr 1
#define R_IRQ_MASK1_CLR__par1_ecp_cmd__nop 0
#define R_IRQ_MASK1_CLR__par1_peri__BITNR 18
#define R_IRQ_MASK1_CLR__par1_peri__WIDTH 1
#define R_IRQ_MASK1_CLR__par1_peri__clr 1
#define R_IRQ_MASK1_CLR__par1_peri__nop 0
#define R_IRQ_MASK1_CLR__par1_data__BITNR 17
#define R_IRQ_MASK1_CLR__par1_data__WIDTH 1
#define R_IRQ_MASK1_CLR__par1_data__clr 1
#define R_IRQ_MASK1_CLR__par1_data__nop 0
#define R_IRQ_MASK1_CLR__par1_ready__BITNR 16
#define R_IRQ_MASK1_CLR__par1_ready__WIDTH 1
#define R_IRQ_MASK1_CLR__par1_ready__clr 1
#define R_IRQ_MASK1_CLR__par1_ready__nop 0
#define R_IRQ_MASK1_CLR__scsi1__BITNR 16
#define R_IRQ_MASK1_CLR__scsi1__WIDTH 1
#define R_IRQ_MASK1_CLR__scsi1__clr 1
#define R_IRQ_MASK1_CLR__scsi1__nop 0
#define R_IRQ_MASK1_CLR__ser3_ready__BITNR 15
#define R_IRQ_MASK1_CLR__ser3_ready__WIDTH 1
#define R_IRQ_MASK1_CLR__ser3_ready__clr 1
#define R_IRQ_MASK1_CLR__ser3_ready__nop 0
#define R_IRQ_MASK1_CLR__ser3_data__BITNR 14
#define R_IRQ_MASK1_CLR__ser3_data__WIDTH 1
#define R_IRQ_MASK1_CLR__ser3_data__clr 1
#define R_IRQ_MASK1_CLR__ser3_data__nop 0
#define R_IRQ_MASK1_CLR__ser2_ready__BITNR 13
#define R_IRQ_MASK1_CLR__ser2_ready__WIDTH 1
#define R_IRQ_MASK1_CLR__ser2_ready__clr 1
#define R_IRQ_MASK1_CLR__ser2_ready__nop 0
#define R_IRQ_MASK1_CLR__ser2_data__BITNR 12
#define R_IRQ_MASK1_CLR__ser2_data__WIDTH 1
#define R_IRQ_MASK1_CLR__ser2_data__clr 1
#define R_IRQ_MASK1_CLR__ser2_data__nop 0
#define R_IRQ_MASK1_CLR__ser1_ready__BITNR 11
#define R_IRQ_MASK1_CLR__ser1_ready__WIDTH 1
#define R_IRQ_MASK1_CLR__ser1_ready__clr 1
#define R_IRQ_MASK1_CLR__ser1_ready__nop 0
#define R_IRQ_MASK1_CLR__ser1_data__BITNR 10
#define R_IRQ_MASK1_CLR__ser1_data__WIDTH 1
#define R_IRQ_MASK1_CLR__ser1_data__clr 1
#define R_IRQ_MASK1_CLR__ser1_data__nop 0
#define R_IRQ_MASK1_CLR__ser0_ready__BITNR 9
#define R_IRQ_MASK1_CLR__ser0_ready__WIDTH 1
#define R_IRQ_MASK1_CLR__ser0_ready__clr 1
#define R_IRQ_MASK1_CLR__ser0_ready__nop 0
#define R_IRQ_MASK1_CLR__ser0_data__BITNR 8
#define R_IRQ_MASK1_CLR__ser0_data__WIDTH 1
#define R_IRQ_MASK1_CLR__ser0_data__clr 1
#define R_IRQ_MASK1_CLR__ser0_data__nop 0
#define R_IRQ_MASK1_CLR__pa7__BITNR 7
#define R_IRQ_MASK1_CLR__pa7__WIDTH 1
#define R_IRQ_MASK1_CLR__pa7__clr 1
#define R_IRQ_MASK1_CLR__pa7__nop 0
#define R_IRQ_MASK1_CLR__pa6__BITNR 6
#define R_IRQ_MASK1_CLR__pa6__WIDTH 1
#define R_IRQ_MASK1_CLR__pa6__clr 1
#define R_IRQ_MASK1_CLR__pa6__nop 0
#define R_IRQ_MASK1_CLR__pa5__BITNR 5
#define R_IRQ_MASK1_CLR__pa5__WIDTH 1
#define R_IRQ_MASK1_CLR__pa5__clr 1
#define R_IRQ_MASK1_CLR__pa5__nop 0
#define R_IRQ_MASK1_CLR__pa4__BITNR 4
#define R_IRQ_MASK1_CLR__pa4__WIDTH 1
#define R_IRQ_MASK1_CLR__pa4__clr 1
#define R_IRQ_MASK1_CLR__pa4__nop 0
#define R_IRQ_MASK1_CLR__pa3__BITNR 3
#define R_IRQ_MASK1_CLR__pa3__WIDTH 1
#define R_IRQ_MASK1_CLR__pa3__clr 1
#define R_IRQ_MASK1_CLR__pa3__nop 0
#define R_IRQ_MASK1_CLR__pa2__BITNR 2
#define R_IRQ_MASK1_CLR__pa2__WIDTH 1
#define R_IRQ_MASK1_CLR__pa2__clr 1
#define R_IRQ_MASK1_CLR__pa2__nop 0
#define R_IRQ_MASK1_CLR__pa1__BITNR 1
#define R_IRQ_MASK1_CLR__pa1__WIDTH 1
#define R_IRQ_MASK1_CLR__pa1__clr 1
#define R_IRQ_MASK1_CLR__pa1__nop 0
#define R_IRQ_MASK1_CLR__pa0__BITNR 0
#define R_IRQ_MASK1_CLR__pa0__WIDTH 1
#define R_IRQ_MASK1_CLR__pa0__clr 1
#define R_IRQ_MASK1_CLR__pa0__nop 0

#define R_IRQ_READ1 (IO_TYPECAST_RO_UDWORD 0xb00000cc)
#define R_IRQ_READ1__sw_int7__BITNR 31
#define R_IRQ_READ1__sw_int7__WIDTH 1
#define R_IRQ_READ1__sw_int7__active 1
#define R_IRQ_READ1__sw_int7__inactive 0
#define R_IRQ_READ1__sw_int6__BITNR 30
#define R_IRQ_READ1__sw_int6__WIDTH 1
#define R_IRQ_READ1__sw_int6__active 1
#define R_IRQ_READ1__sw_int6__inactive 0
#define R_IRQ_READ1__sw_int5__BITNR 29
#define R_IRQ_READ1__sw_int5__WIDTH 1
#define R_IRQ_READ1__sw_int5__active 1
#define R_IRQ_READ1__sw_int5__inactive 0
#define R_IRQ_READ1__sw_int4__BITNR 28
#define R_IRQ_READ1__sw_int4__WIDTH 1
#define R_IRQ_READ1__sw_int4__active 1
#define R_IRQ_READ1__sw_int4__inactive 0
#define R_IRQ_READ1__sw_int3__BITNR 27
#define R_IRQ_READ1__sw_int3__WIDTH 1
#define R_IRQ_READ1__sw_int3__active 1
#define R_IRQ_READ1__sw_int3__inactive 0
#define R_IRQ_READ1__sw_int2__BITNR 26
#define R_IRQ_READ1__sw_int2__WIDTH 1
#define R_IRQ_READ1__sw_int2__active 1
#define R_IRQ_READ1__sw_int2__inactive 0
#define R_IRQ_READ1__sw_int1__BITNR 25
#define R_IRQ_READ1__sw_int1__WIDTH 1
#define R_IRQ_READ1__sw_int1__active 1
#define R_IRQ_READ1__sw_int1__inactive 0
#define R_IRQ_READ1__sw_int0__BITNR 24
#define R_IRQ_READ1__sw_int0__WIDTH 1
#define R_IRQ_READ1__sw_int0__active 1
#define R_IRQ_READ1__sw_int0__inactive 0
#define R_IRQ_READ1__par1_ecp_cmd__BITNR 19
#define R_IRQ_READ1__par1_ecp_cmd__WIDTH 1
#define R_IRQ_READ1__par1_ecp_cmd__active 1
#define R_IRQ_READ1__par1_ecp_cmd__inactive 0
#define R_IRQ_READ1__par1_peri__BITNR 18
#define R_IRQ_READ1__par1_peri__WIDTH 1
#define R_IRQ_READ1__par1_peri__active 1
#define R_IRQ_READ1__par1_peri__inactive 0
#define R_IRQ_READ1__par1_data__BITNR 17
#define R_IRQ_READ1__par1_data__WIDTH 1
#define R_IRQ_READ1__par1_data__active 1
#define R_IRQ_READ1__par1_data__inactive 0
#define R_IRQ_READ1__par1_ready__BITNR 16
#define R_IRQ_READ1__par1_ready__WIDTH 1
#define R_IRQ_READ1__par1_ready__active 1
#define R_IRQ_READ1__par1_ready__inactive 0
#define R_IRQ_READ1__scsi1__BITNR 16
#define R_IRQ_READ1__scsi1__WIDTH 1
#define R_IRQ_READ1__scsi1__active 1
#define R_IRQ_READ1__scsi1__inactive 0
#define R_IRQ_READ1__ser3_ready__BITNR 15
#define R_IRQ_READ1__ser3_ready__WIDTH 1
#define R_IRQ_READ1__ser3_ready__active 1
#define R_IRQ_READ1__ser3_ready__inactive 0
#define R_IRQ_READ1__ser3_data__BITNR 14
#define R_IRQ_READ1__ser3_data__WIDTH 1
#define R_IRQ_READ1__ser3_data__active 1
#define R_IRQ_READ1__ser3_data__inactive 0
#define R_IRQ_READ1__ser2_ready__BITNR 13
#define R_IRQ_READ1__ser2_ready__WIDTH 1
#define R_IRQ_READ1__ser2_ready__active 1
#define R_IRQ_READ1__ser2_ready__inactive 0
#define R_IRQ_READ1__ser2_data__BITNR 12
#define R_IRQ_READ1__ser2_data__WIDTH 1
#define R_IRQ_READ1__ser2_data__active 1
#define R_IRQ_READ1__ser2_data__inactive 0
#define R_IRQ_READ1__ser1_ready__BITNR 11
#define R_IRQ_READ1__ser1_ready__WIDTH 1
#define R_IRQ_READ1__ser1_ready__active 1
#define R_IRQ_READ1__ser1_ready__inactive 0
#define R_IRQ_READ1__ser1_data__BITNR 10
#define R_IRQ_READ1__ser1_data__WIDTH 1
#define R_IRQ_READ1__ser1_data__active 1
#define R_IRQ_READ1__ser1_data__inactive 0
#define R_IRQ_READ1__ser0_ready__BITNR 9
#define R_IRQ_READ1__ser0_ready__WIDTH 1
#define R_IRQ_READ1__ser0_ready__active 1
#define R_IRQ_READ1__ser0_ready__inactive 0
#define R_IRQ_READ1__ser0_data__BITNR 8
#define R_IRQ_READ1__ser0_data__WIDTH 1
#define R_IRQ_READ1__ser0_data__active 1
#define R_IRQ_READ1__ser0_data__inactive 0
#define R_IRQ_READ1__pa7__BITNR 7
#define R_IRQ_READ1__pa7__WIDTH 1
#define R_IRQ_READ1__pa7__active 1
#define R_IRQ_READ1__pa7__inactive 0
#define R_IRQ_READ1__pa6__BITNR 6
#define R_IRQ_READ1__pa6__WIDTH 1
#define R_IRQ_READ1__pa6__active 1
#define R_IRQ_READ1__pa6__inactive 0
#define R_IRQ_READ1__pa5__BITNR 5
#define R_IRQ_READ1__pa5__WIDTH 1
#define R_IRQ_READ1__pa5__active 1
#define R_IRQ_READ1__pa5__inactive 0
#define R_IRQ_READ1__pa4__BITNR 4
#define R_IRQ_READ1__pa4__WIDTH 1
#define R_IRQ_READ1__pa4__active 1
#define R_IRQ_READ1__pa4__inactive 0
#define R_IRQ_READ1__pa3__BITNR 3
#define R_IRQ_READ1__pa3__WIDTH 1
#define R_IRQ_READ1__pa3__active 1
#define R_IRQ_READ1__pa3__inactive 0
#define R_IRQ_READ1__pa2__BITNR 2
#define R_IRQ_READ1__pa2__WIDTH 1
#define R_IRQ_READ1__pa2__active 1
#define R_IRQ_READ1__pa2__inactive 0
#define R_IRQ_READ1__pa1__BITNR 1
#define R_IRQ_READ1__pa1__WIDTH 1
#define R_IRQ_READ1__pa1__active 1
#define R_IRQ_READ1__pa1__inactive 0
#define R_IRQ_READ1__pa0__BITNR 0
#define R_IRQ_READ1__pa0__WIDTH 1
#define R_IRQ_READ1__pa0__active 1
#define R_IRQ_READ1__pa0__inactive 0

#define R_IRQ_MASK1_SET (IO_TYPECAST_UDWORD 0xb00000cc)
#define R_IRQ_MASK1_SET__sw_int7__BITNR 31
#define R_IRQ_MASK1_SET__sw_int7__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int7__set 1
#define R_IRQ_MASK1_SET__sw_int7__nop 0
#define R_IRQ_MASK1_SET__sw_int6__BITNR 30
#define R_IRQ_MASK1_SET__sw_int6__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int6__set 1
#define R_IRQ_MASK1_SET__sw_int6__nop 0
#define R_IRQ_MASK1_SET__sw_int5__BITNR 29
#define R_IRQ_MASK1_SET__sw_int5__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int5__set 1
#define R_IRQ_MASK1_SET__sw_int5__nop 0
#define R_IRQ_MASK1_SET__sw_int4__BITNR 28
#define R_IRQ_MASK1_SET__sw_int4__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int4__set 1
#define R_IRQ_MASK1_SET__sw_int4__nop 0
#define R_IRQ_MASK1_SET__sw_int3__BITNR 27
#define R_IRQ_MASK1_SET__sw_int3__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int3__set 1
#define R_IRQ_MASK1_SET__sw_int3__nop 0
#define R_IRQ_MASK1_SET__sw_int2__BITNR 26
#define R_IRQ_MASK1_SET__sw_int2__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int2__set 1
#define R_IRQ_MASK1_SET__sw_int2__nop 0
#define R_IRQ_MASK1_SET__sw_int1__BITNR 25
#define R_IRQ_MASK1_SET__sw_int1__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int1__set 1
#define R_IRQ_MASK1_SET__sw_int1__nop 0
#define R_IRQ_MASK1_SET__sw_int0__BITNR 24
#define R_IRQ_MASK1_SET__sw_int0__WIDTH 1
#define R_IRQ_MASK1_SET__sw_int0__set 1
#define R_IRQ_MASK1_SET__sw_int0__nop 0
#define R_IRQ_MASK1_SET__par1_ecp_cmd__BITNR 19
#define R_IRQ_MASK1_SET__par1_ecp_cmd__WIDTH 1
#define R_IRQ_MASK1_SET__par1_ecp_cmd__set 1
#define R_IRQ_MASK1_SET__par1_ecp_cmd__nop 0
#define R_IRQ_MASK1_SET__par1_peri__BITNR 18
#define R_IRQ_MASK1_SET__par1_peri__WIDTH 1
#define R_IRQ_MASK1_SET__par1_peri__set 1
#define R_IRQ_MASK1_SET__par1_peri__nop 0
#define R_IRQ_MASK1_SET__par1_data__BITNR 17
#define R_IRQ_MASK1_SET__par1_data__WIDTH 1
#define R_IRQ_MASK1_SET__par1_data__set 1
#define R_IRQ_MASK1_SET__par1_data__nop 0
#define R_IRQ_MASK1_SET__par1_ready__BITNR 16
#define R_IRQ_MASK1_SET__par1_ready__WIDTH 1
#define R_IRQ_MASK1_SET__par1_ready__set 1
#define R_IRQ_MASK1_SET__par1_ready__nop 0
#define R_IRQ_MASK1_SET__scsi1__BITNR 16
#define R_IRQ_MASK1_SET__scsi1__WIDTH 1
#define R_IRQ_MASK1_SET__scsi1__set 1
#define R_IRQ_MASK1_SET__scsi1__nop 0
#define R_IRQ_MASK1_SET__ser3_ready__BITNR 15
#define R_IRQ_MASK1_SET__ser3_ready__WIDTH 1
#define R_IRQ_MASK1_SET__ser3_ready__set 1
#define R_IRQ_MASK1_SET__ser3_ready__nop 0
#define R_IRQ_MASK1_SET__ser3_data__BITNR 14
#define R_IRQ_MASK1_SET__ser3_data__WIDTH 1
#define R_IRQ_MASK1_SET__ser3_data__set 1
#define R_IRQ_MASK1_SET__ser3_data__nop 0
#define R_IRQ_MASK1_SET__ser2_ready__BITNR 13
#define R_IRQ_MASK1_SET__ser2_ready__WIDTH 1
#define R_IRQ_MASK1_SET__ser2_ready__set 1
#define R_IRQ_MASK1_SET__ser2_ready__nop 0
#define R_IRQ_MASK1_SET__ser2_data__BITNR 12
#define R_IRQ_MASK1_SET__ser2_data__WIDTH 1
#define R_IRQ_MASK1_SET__ser2_data__set 1
#define R_IRQ_MASK1_SET__ser2_data__nop 0
#define R_IRQ_MASK1_SET__ser1_ready__BITNR 11
#define R_IRQ_MASK1_SET__ser1_ready__WIDTH 1
#define R_IRQ_MASK1_SET__ser1_ready__set 1
#define R_IRQ_MASK1_SET__ser1_ready__nop 0
#define R_IRQ_MASK1_SET__ser1_data__BITNR 10
#define R_IRQ_MASK1_SET__ser1_data__WIDTH 1
#define R_IRQ_MASK1_SET__ser1_data__set 1
#define R_IRQ_MASK1_SET__ser1_data__nop 0
#define R_IRQ_MASK1_SET__ser0_ready__BITNR 9
#define R_IRQ_MASK1_SET__ser0_ready__WIDTH 1
#define R_IRQ_MASK1_SET__ser0_ready__set 1
#define R_IRQ_MASK1_SET__ser0_ready__nop 0
#define R_IRQ_MASK1_SET__ser0_data__BITNR 8
#define R_IRQ_MASK1_SET__ser0_data__WIDTH 1
#define R_IRQ_MASK1_SET__ser0_data__set 1
#define R_IRQ_MASK1_SET__ser0_data__nop 0
#define R_IRQ_MASK1_SET__pa7__BITNR 7
#define R_IRQ_MASK1_SET__pa7__WIDTH 1
#define R_IRQ_MASK1_SET__pa7__set 1
#define R_IRQ_MASK1_SET__pa7__nop 0
#define R_IRQ_MASK1_SET__pa6__BITNR 6
#define R_IRQ_MASK1_SET__pa6__WIDTH 1
#define R_IRQ_MASK1_SET__pa6__set 1
#define R_IRQ_MASK1_SET__pa6__nop 0
#define R_IRQ_MASK1_SET__pa5__BITNR 5
#define R_IRQ_MASK1_SET__pa5__WIDTH 1
#define R_IRQ_MASK1_SET__pa5__set 1
#define R_IRQ_MASK1_SET__pa5__nop 0
#define R_IRQ_MASK1_SET__pa4__BITNR 4
#define R_IRQ_MASK1_SET__pa4__WIDTH 1
#define R_IRQ_MASK1_SET__pa4__set 1
#define R_IRQ_MASK1_SET__pa4__nop 0
#define R_IRQ_MASK1_SET__pa3__BITNR 3
#define R_IRQ_MASK1_SET__pa3__WIDTH 1
#define R_IRQ_MASK1_SET__pa3__set 1
#define R_IRQ_MASK1_SET__pa3__nop 0
#define R_IRQ_MASK1_SET__pa2__BITNR 2
#define R_IRQ_MASK1_SET__pa2__WIDTH 1
#define R_IRQ_MASK1_SET__pa2__set 1
#define R_IRQ_MASK1_SET__pa2__nop 0
#define R_IRQ_MASK1_SET__pa1__BITNR 1
#define R_IRQ_MASK1_SET__pa1__WIDTH 1
#define R_IRQ_MASK1_SET__pa1__set 1
#define R_IRQ_MASK1_SET__pa1__nop 0
#define R_IRQ_MASK1_SET__pa0__BITNR 0
#define R_IRQ_MASK1_SET__pa0__WIDTH 1
#define R_IRQ_MASK1_SET__pa0__set 1
#define R_IRQ_MASK1_SET__pa0__nop 0

#define R_IRQ_MASK2_RD (IO_TYPECAST_RO_UDWORD 0xb00000d0)
#define R_IRQ_MASK2_RD__dma8_sub3_descr__BITNR 23
#define R_IRQ_MASK2_RD__dma8_sub3_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma8_sub3_descr__active 1
#define R_IRQ_MASK2_RD__dma8_sub3_descr__inactive 0
#define R_IRQ_MASK2_RD__dma8_sub2_descr__BITNR 22
#define R_IRQ_MASK2_RD__dma8_sub2_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma8_sub2_descr__active 1
#define R_IRQ_MASK2_RD__dma8_sub2_descr__inactive 0
#define R_IRQ_MASK2_RD__dma8_sub1_descr__BITNR 21
#define R_IRQ_MASK2_RD__dma8_sub1_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma8_sub1_descr__active 1
#define R_IRQ_MASK2_RD__dma8_sub1_descr__inactive 0
#define R_IRQ_MASK2_RD__dma8_sub0_descr__BITNR 20
#define R_IRQ_MASK2_RD__dma8_sub0_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma8_sub0_descr__active 1
#define R_IRQ_MASK2_RD__dma8_sub0_descr__inactive 0
#define R_IRQ_MASK2_RD__dma9_eop__BITNR 19
#define R_IRQ_MASK2_RD__dma9_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma9_eop__active 1
#define R_IRQ_MASK2_RD__dma9_eop__inactive 0
#define R_IRQ_MASK2_RD__dma9_descr__BITNR 18
#define R_IRQ_MASK2_RD__dma9_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma9_descr__active 1
#define R_IRQ_MASK2_RD__dma9_descr__inactive 0
#define R_IRQ_MASK2_RD__dma8_eop__BITNR 17
#define R_IRQ_MASK2_RD__dma8_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma8_eop__active 1
#define R_IRQ_MASK2_RD__dma8_eop__inactive 0
#define R_IRQ_MASK2_RD__dma8_descr__BITNR 16
#define R_IRQ_MASK2_RD__dma8_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma8_descr__active 1
#define R_IRQ_MASK2_RD__dma8_descr__inactive 0
#define R_IRQ_MASK2_RD__dma7_eop__BITNR 15
#define R_IRQ_MASK2_RD__dma7_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma7_eop__active 1
#define R_IRQ_MASK2_RD__dma7_eop__inactive 0
#define R_IRQ_MASK2_RD__dma7_descr__BITNR 14
#define R_IRQ_MASK2_RD__dma7_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma7_descr__active 1
#define R_IRQ_MASK2_RD__dma7_descr__inactive 0
#define R_IRQ_MASK2_RD__dma6_eop__BITNR 13
#define R_IRQ_MASK2_RD__dma6_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma6_eop__active 1
#define R_IRQ_MASK2_RD__dma6_eop__inactive 0
#define R_IRQ_MASK2_RD__dma6_descr__BITNR 12
#define R_IRQ_MASK2_RD__dma6_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma6_descr__active 1
#define R_IRQ_MASK2_RD__dma6_descr__inactive 0
#define R_IRQ_MASK2_RD__dma5_eop__BITNR 11
#define R_IRQ_MASK2_RD__dma5_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma5_eop__active 1
#define R_IRQ_MASK2_RD__dma5_eop__inactive 0
#define R_IRQ_MASK2_RD__dma5_descr__BITNR 10
#define R_IRQ_MASK2_RD__dma5_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma5_descr__active 1
#define R_IRQ_MASK2_RD__dma5_descr__inactive 0
#define R_IRQ_MASK2_RD__dma4_eop__BITNR 9
#define R_IRQ_MASK2_RD__dma4_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma4_eop__active 1
#define R_IRQ_MASK2_RD__dma4_eop__inactive 0
#define R_IRQ_MASK2_RD__dma4_descr__BITNR 8
#define R_IRQ_MASK2_RD__dma4_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma4_descr__active 1
#define R_IRQ_MASK2_RD__dma4_descr__inactive 0
#define R_IRQ_MASK2_RD__dma3_eop__BITNR 7
#define R_IRQ_MASK2_RD__dma3_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma3_eop__active 1
#define R_IRQ_MASK2_RD__dma3_eop__inactive 0
#define R_IRQ_MASK2_RD__dma3_descr__BITNR 6
#define R_IRQ_MASK2_RD__dma3_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma3_descr__active 1
#define R_IRQ_MASK2_RD__dma3_descr__inactive 0
#define R_IRQ_MASK2_RD__dma2_eop__BITNR 5
#define R_IRQ_MASK2_RD__dma2_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma2_eop__active 1
#define R_IRQ_MASK2_RD__dma2_eop__inactive 0
#define R_IRQ_MASK2_RD__dma2_descr__BITNR 4
#define R_IRQ_MASK2_RD__dma2_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma2_descr__active 1
#define R_IRQ_MASK2_RD__dma2_descr__inactive 0
#define R_IRQ_MASK2_RD__dma1_eop__BITNR 3
#define R_IRQ_MASK2_RD__dma1_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma1_eop__active 1
#define R_IRQ_MASK2_RD__dma1_eop__inactive 0
#define R_IRQ_MASK2_RD__dma1_descr__BITNR 2
#define R_IRQ_MASK2_RD__dma1_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma1_descr__active 1
#define R_IRQ_MASK2_RD__dma1_descr__inactive 0
#define R_IRQ_MASK2_RD__dma0_eop__BITNR 1
#define R_IRQ_MASK2_RD__dma0_eop__WIDTH 1
#define R_IRQ_MASK2_RD__dma0_eop__active 1
#define R_IRQ_MASK2_RD__dma0_eop__inactive 0
#define R_IRQ_MASK2_RD__dma0_descr__BITNR 0
#define R_IRQ_MASK2_RD__dma0_descr__WIDTH 1
#define R_IRQ_MASK2_RD__dma0_descr__active 1
#define R_IRQ_MASK2_RD__dma0_descr__inactive 0

#define R_IRQ_MASK2_CLR (IO_TYPECAST_UDWORD 0xb00000d0)
#define R_IRQ_MASK2_CLR__dma8_sub3_descr__BITNR 23
#define R_IRQ_MASK2_CLR__dma8_sub3_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma8_sub3_descr__clr 1
#define R_IRQ_MASK2_CLR__dma8_sub3_descr__nop 0
#define R_IRQ_MASK2_CLR__dma8_sub2_descr__BITNR 22
#define R_IRQ_MASK2_CLR__dma8_sub2_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma8_sub2_descr__clr 1
#define R_IRQ_MASK2_CLR__dma8_sub2_descr__nop 0
#define R_IRQ_MASK2_CLR__dma8_sub1_descr__BITNR 21
#define R_IRQ_MASK2_CLR__dma8_sub1_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma8_sub1_descr__clr 1
#define R_IRQ_MASK2_CLR__dma8_sub1_descr__nop 0
#define R_IRQ_MASK2_CLR__dma8_sub0_descr__BITNR 20
#define R_IRQ_MASK2_CLR__dma8_sub0_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma8_sub0_descr__clr 1
#define R_IRQ_MASK2_CLR__dma8_sub0_descr__nop 0
#define R_IRQ_MASK2_CLR__dma9_eop__BITNR 19
#define R_IRQ_MASK2_CLR__dma9_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma9_eop__clr 1
#define R_IRQ_MASK2_CLR__dma9_eop__nop 0
#define R_IRQ_MASK2_CLR__dma9_descr__BITNR 18
#define R_IRQ_MASK2_CLR__dma9_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma9_descr__clr 1
#define R_IRQ_MASK2_CLR__dma9_descr__nop 0
#define R_IRQ_MASK2_CLR__dma8_eop__BITNR 17
#define R_IRQ_MASK2_CLR__dma8_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma8_eop__clr 1
#define R_IRQ_MASK2_CLR__dma8_eop__nop 0
#define R_IRQ_MASK2_CLR__dma8_descr__BITNR 16
#define R_IRQ_MASK2_CLR__dma8_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma8_descr__clr 1
#define R_IRQ_MASK2_CLR__dma8_descr__nop 0
#define R_IRQ_MASK2_CLR__dma7_eop__BITNR 15
#define R_IRQ_MASK2_CLR__dma7_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma7_eop__clr 1
#define R_IRQ_MASK2_CLR__dma7_eop__nop 0
#define R_IRQ_MASK2_CLR__dma7_descr__BITNR 14
#define R_IRQ_MASK2_CLR__dma7_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma7_descr__clr 1
#define R_IRQ_MASK2_CLR__dma7_descr__nop 0
#define R_IRQ_MASK2_CLR__dma6_eop__BITNR 13
#define R_IRQ_MASK2_CLR__dma6_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma6_eop__clr 1
#define R_IRQ_MASK2_CLR__dma6_eop__nop 0
#define R_IRQ_MASK2_CLR__dma6_descr__BITNR 12
#define R_IRQ_MASK2_CLR__dma6_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma6_descr__clr 1
#define R_IRQ_MASK2_CLR__dma6_descr__nop 0
#define R_IRQ_MASK2_CLR__dma5_eop__BITNR 11
#define R_IRQ_MASK2_CLR__dma5_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma5_eop__clr 1
#define R_IRQ_MASK2_CLR__dma5_eop__nop 0
#define R_IRQ_MASK2_CLR__dma5_descr__BITNR 10
#define R_IRQ_MASK2_CLR__dma5_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma5_descr__clr 1
#define R_IRQ_MASK2_CLR__dma5_descr__nop 0
#define R_IRQ_MASK2_CLR__dma4_eop__BITNR 9
#define R_IRQ_MASK2_CLR__dma4_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma4_eop__clr 1
#define R_IRQ_MASK2_CLR__dma4_eop__nop 0
#define R_IRQ_MASK2_CLR__dma4_descr__BITNR 8
#define R_IRQ_MASK2_CLR__dma4_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma4_descr__clr 1
#define R_IRQ_MASK2_CLR__dma4_descr__nop 0
#define R_IRQ_MASK2_CLR__dma3_eop__BITNR 7
#define R_IRQ_MASK2_CLR__dma3_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma3_eop__clr 1
#define R_IRQ_MASK2_CLR__dma3_eop__nop 0
#define R_IRQ_MASK2_CLR__dma3_descr__BITNR 6
#define R_IRQ_MASK2_CLR__dma3_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma3_descr__clr 1
#define R_IRQ_MASK2_CLR__dma3_descr__nop 0
#define R_IRQ_MASK2_CLR__dma2_eop__BITNR 5
#define R_IRQ_MASK2_CLR__dma2_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma2_eop__clr 1
#define R_IRQ_MASK2_CLR__dma2_eop__nop 0
#define R_IRQ_MASK2_CLR__dma2_descr__BITNR 4
#define R_IRQ_MASK2_CLR__dma2_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma2_descr__clr 1
#define R_IRQ_MASK2_CLR__dma2_descr__nop 0
#define R_IRQ_MASK2_CLR__dma1_eop__BITNR 3
#define R_IRQ_MASK2_CLR__dma1_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma1_eop__clr 1
#define R_IRQ_MASK2_CLR__dma1_eop__nop 0
#define R_IRQ_MASK2_CLR__dma1_descr__BITNR 2
#define R_IRQ_MASK2_CLR__dma1_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma1_descr__clr 1
#define R_IRQ_MASK2_CLR__dma1_descr__nop 0
#define R_IRQ_MASK2_CLR__dma0_eop__BITNR 1
#define R_IRQ_MASK2_CLR__dma0_eop__WIDTH 1
#define R_IRQ_MASK2_CLR__dma0_eop__clr 1
#define R_IRQ_MASK2_CLR__dma0_eop__nop 0
#define R_IRQ_MASK2_CLR__dma0_descr__BITNR 0
#define R_IRQ_MASK2_CLR__dma0_descr__WIDTH 1
#define R_IRQ_MASK2_CLR__dma0_descr__clr 1
#define R_IRQ_MASK2_CLR__dma0_descr__nop 0

#define R_IRQ_READ2 (IO_TYPECAST_RO_UDWORD 0xb00000d4)
#define R_IRQ_READ2__dma8_sub3_descr__BITNR 23
#define R_IRQ_READ2__dma8_sub3_descr__WIDTH 1
#define R_IRQ_READ2__dma8_sub3_descr__active 1
#define R_IRQ_READ2__dma8_sub3_descr__inactive 0
#define R_IRQ_READ2__dma8_sub2_descr__BITNR 22
#define R_IRQ_READ2__dma8_sub2_descr__WIDTH 1
#define R_IRQ_READ2__dma8_sub2_descr__active 1
#define R_IRQ_READ2__dma8_sub2_descr__inactive 0
#define R_IRQ_READ2__dma8_sub1_descr__BITNR 21
#define R_IRQ_READ2__dma8_sub1_descr__WIDTH 1
#define R_IRQ_READ2__dma8_sub1_descr__active 1
#define R_IRQ_READ2__dma8_sub1_descr__inactive 0
#define R_IRQ_READ2__dma8_sub0_descr__BITNR 20
#define R_IRQ_READ2__dma8_sub0_descr__WIDTH 1
#define R_IRQ_READ2__dma8_sub0_descr__active 1
#define R_IRQ_READ2__dma8_sub0_descr__inactive 0
#define R_IRQ_READ2__dma9_eop__BITNR 19
#define R_IRQ_READ2__dma9_eop__WIDTH 1
#define R_IRQ_READ2__dma9_eop__active 1
#define R_IRQ_READ2__dma9_eop__inactive 0
#define R_IRQ_READ2__dma9_descr__BITNR 18
#define R_IRQ_READ2__dma9_descr__WIDTH 1
#define R_IRQ_READ2__dma9_descr__active 1
#define R_IRQ_READ2__dma9_descr__inactive 0
#define R_IRQ_READ2__dma8_eop__BITNR 17
#define R_IRQ_READ2__dma8_eop__WIDTH 1
#define R_IRQ_READ2__dma8_eop__active 1
#define R_IRQ_READ2__dma8_eop__inactive 0
#define R_IRQ_READ2__dma8_descr__BITNR 16
#define R_IRQ_READ2__dma8_descr__WIDTH 1
#define R_IRQ_READ2__dma8_descr__active 1
#define R_IRQ_READ2__dma8_descr__inactive 0
#define R_IRQ_READ2__dma7_eop__BITNR 15
#define R_IRQ_READ2__dma7_eop__WIDTH 1
#define R_IRQ_READ2__dma7_eop__active 1
#define R_IRQ_READ2__dma7_eop__inactive 0
#define R_IRQ_READ2__dma7_descr__BITNR 14
#define R_IRQ_READ2__dma7_descr__WIDTH 1
#define R_IRQ_READ2__dma7_descr__active 1
#define R_IRQ_READ2__dma7_descr__inactive 0
#define R_IRQ_READ2__dma6_eop__BITNR 13
#define R_IRQ_READ2__dma6_eop__WIDTH 1
#define R_IRQ_READ2__dma6_eop__active 1
#define R_IRQ_READ2__dma6_eop__inactive 0
#define R_IRQ_READ2__dma6_descr__BITNR 12
#define R_IRQ_READ2__dma6_descr__WIDTH 1
#define R_IRQ_READ2__dma6_descr__active 1
#define R_IRQ_READ2__dma6_descr__inactive 0
#define R_IRQ_READ2__dma5_eop__BITNR 11
#define R_IRQ_READ2__dma5_eop__WIDTH 1
#define R_IRQ_READ2__dma5_eop__active 1
#define R_IRQ_READ2__dma5_eop__inactive 0
#define R_IRQ_READ2__dma5_descr__BITNR 10
#define R_IRQ_READ2__dma5_descr__WIDTH 1
#define R_IRQ_READ2__dma5_descr__active 1
#define R_IRQ_READ2__dma5_descr__inactive 0
#define R_IRQ_READ2__dma4_eop__BITNR 9
#define R_IRQ_READ2__dma4_eop__WIDTH 1
#define R_IRQ_READ2__dma4_eop__active 1
#define R_IRQ_READ2__dma4_eop__inactive 0
#define R_IRQ_READ2__dma4_descr__BITNR 8
#define R_IRQ_READ2__dma4_descr__WIDTH 1
#define R_IRQ_READ2__dma4_descr__active 1
#define R_IRQ_READ2__dma4_descr__inactive 0
#define R_IRQ_READ2__dma3_eop__BITNR 7
#define R_IRQ_READ2__dma3_eop__WIDTH 1
#define R_IRQ_READ2__dma3_eop__active 1
#define R_IRQ_READ2__dma3_eop__inactive 0
#define R_IRQ_READ2__dma3_descr__BITNR 6
#define R_IRQ_READ2__dma3_descr__WIDTH 1
#define R_IRQ_READ2__dma3_descr__active 1
#define R_IRQ_READ2__dma3_descr__inactive 0
#define R_IRQ_READ2__dma2_eop__BITNR 5
#define R_IRQ_READ2__dma2_eop__WIDTH 1
#define R_IRQ_READ2__dma2_eop__active 1
#define R_IRQ_READ2__dma2_eop__inactive 0
#define R_IRQ_READ2__dma2_descr__BITNR 4
#define R_IRQ_READ2__dma2_descr__WIDTH 1
#define R_IRQ_READ2__dma2_descr__active 1
#define R_IRQ_READ2__dma2_descr__inactive 0
#define R_IRQ_READ2__dma1_eop__BITNR 3
#define R_IRQ_READ2__dma1_eop__WIDTH 1
#define R_IRQ_READ2__dma1_eop__active 1
#define R_IRQ_READ2__dma1_eop__inactive 0
#define R_IRQ_READ2__dma1_descr__BITNR 2
#define R_IRQ_READ2__dma1_descr__WIDTH 1
#define R_IRQ_READ2__dma1_descr__active 1
#define R_IRQ_READ2__dma1_descr__inactive 0
#define R_IRQ_READ2__dma0_eop__BITNR 1
#define R_IRQ_READ2__dma0_eop__WIDTH 1
#define R_IRQ_READ2__dma0_eop__active 1
#define R_IRQ_READ2__dma0_eop__inactive 0
#define R_IRQ_READ2__dma0_descr__BITNR 0
#define R_IRQ_READ2__dma0_descr__WIDTH 1
#define R_IRQ_READ2__dma0_descr__active 1
#define R_IRQ_READ2__dma0_descr__inactive 0

#define R_IRQ_MASK2_SET (IO_TYPECAST_UDWORD 0xb00000d4)
#define R_IRQ_MASK2_SET__dma8_sub3_descr__BITNR 23
#define R_IRQ_MASK2_SET__dma8_sub3_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma8_sub3_descr__set 1
#define R_IRQ_MASK2_SET__dma8_sub3_descr__nop 0
#define R_IRQ_MASK2_SET__dma8_sub2_descr__BITNR 22
#define R_IRQ_MASK2_SET__dma8_sub2_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma8_sub2_descr__set 1
#define R_IRQ_MASK2_SET__dma8_sub2_descr__nop 0
#define R_IRQ_MASK2_SET__dma8_sub1_descr__BITNR 21
#define R_IRQ_MASK2_SET__dma8_sub1_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma8_sub1_descr__set 1
#define R_IRQ_MASK2_SET__dma8_sub1_descr__nop 0
#define R_IRQ_MASK2_SET__dma8_sub0_descr__BITNR 20
#define R_IRQ_MASK2_SET__dma8_sub0_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma8_sub0_descr__set 1
#define R_IRQ_MASK2_SET__dma8_sub0_descr__nop 0
#define R_IRQ_MASK2_SET__dma9_eop__BITNR 19
#define R_IRQ_MASK2_SET__dma9_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma9_eop__set 1
#define R_IRQ_MASK2_SET__dma9_eop__nop 0
#define R_IRQ_MASK2_SET__dma9_descr__BITNR 18
#define R_IRQ_MASK2_SET__dma9_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma9_descr__set 1
#define R_IRQ_MASK2_SET__dma9_descr__nop 0
#define R_IRQ_MASK2_SET__dma8_eop__BITNR 17
#define R_IRQ_MASK2_SET__dma8_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma8_eop__set 1
#define R_IRQ_MASK2_SET__dma8_eop__nop 0
#define R_IRQ_MASK2_SET__dma8_descr__BITNR 16
#define R_IRQ_MASK2_SET__dma8_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma8_descr__set 1
#define R_IRQ_MASK2_SET__dma8_descr__nop 0
#define R_IRQ_MASK2_SET__dma7_eop__BITNR 15
#define R_IRQ_MASK2_SET__dma7_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma7_eop__set 1
#define R_IRQ_MASK2_SET__dma7_eop__nop 0
#define R_IRQ_MASK2_SET__dma7_descr__BITNR 14
#define R_IRQ_MASK2_SET__dma7_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma7_descr__set 1
#define R_IRQ_MASK2_SET__dma7_descr__nop 0
#define R_IRQ_MASK2_SET__dma6_eop__BITNR 13
#define R_IRQ_MASK2_SET__dma6_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma6_eop__set 1
#define R_IRQ_MASK2_SET__dma6_eop__nop 0
#define R_IRQ_MASK2_SET__dma6_descr__BITNR 12
#define R_IRQ_MASK2_SET__dma6_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma6_descr__set 1
#define R_IRQ_MASK2_SET__dma6_descr__nop 0
#define R_IRQ_MASK2_SET__dma5_eop__BITNR 11
#define R_IRQ_MASK2_SET__dma5_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma5_eop__set 1
#define R_IRQ_MASK2_SET__dma5_eop__nop 0
#define R_IRQ_MASK2_SET__dma5_descr__BITNR 10
#define R_IRQ_MASK2_SET__dma5_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma5_descr__set 1
#define R_IRQ_MASK2_SET__dma5_descr__nop 0
#define R_IRQ_MASK2_SET__dma4_eop__BITNR 9
#define R_IRQ_MASK2_SET__dma4_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma4_eop__set 1
#define R_IRQ_MASK2_SET__dma4_eop__nop 0
#define R_IRQ_MASK2_SET__dma4_descr__BITNR 8
#define R_IRQ_MASK2_SET__dma4_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma4_descr__set 1
#define R_IRQ_MASK2_SET__dma4_descr__nop 0
#define R_IRQ_MASK2_SET__dma3_eop__BITNR 7
#define R_IRQ_MASK2_SET__dma3_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma3_eop__set 1
#define R_IRQ_MASK2_SET__dma3_eop__nop 0
#define R_IRQ_MASK2_SET__dma3_descr__BITNR 6
#define R_IRQ_MASK2_SET__dma3_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma3_descr__set 1
#define R_IRQ_MASK2_SET__dma3_descr__nop 0
#define R_IRQ_MASK2_SET__dma2_eop__BITNR 5
#define R_IRQ_MASK2_SET__dma2_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma2_eop__set 1
#define R_IRQ_MASK2_SET__dma2_eop__nop 0
#define R_IRQ_MASK2_SET__dma2_descr__BITNR 4
#define R_IRQ_MASK2_SET__dma2_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma2_descr__set 1
#define R_IRQ_MASK2_SET__dma2_descr__nop 0
#define R_IRQ_MASK2_SET__dma1_eop__BITNR 3
#define R_IRQ_MASK2_SET__dma1_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma1_eop__set 1
#define R_IRQ_MASK2_SET__dma1_eop__nop 0
#define R_IRQ_MASK2_SET__dma1_descr__BITNR 2
#define R_IRQ_MASK2_SET__dma1_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma1_descr__set 1
#define R_IRQ_MASK2_SET__dma1_descr__nop 0
#define R_IRQ_MASK2_SET__dma0_eop__BITNR 1
#define R_IRQ_MASK2_SET__dma0_eop__WIDTH 1
#define R_IRQ_MASK2_SET__dma0_eop__set 1
#define R_IRQ_MASK2_SET__dma0_eop__nop 0
#define R_IRQ_MASK2_SET__dma0_descr__BITNR 0
#define R_IRQ_MASK2_SET__dma0_descr__WIDTH 1
#define R_IRQ_MASK2_SET__dma0_descr__set 1
#define R_IRQ_MASK2_SET__dma0_descr__nop 0

#define R_VECT_MASK_RD (IO_TYPECAST_RO_UDWORD 0xb00000d8)
#define R_VECT_MASK_RD__usb__BITNR 31
#define R_VECT_MASK_RD__usb__WIDTH 1
#define R_VECT_MASK_RD__usb__active 1
#define R_VECT_MASK_RD__usb__inactive 0
#define R_VECT_MASK_RD__dma9__BITNR 25
#define R_VECT_MASK_RD__dma9__WIDTH 1
#define R_VECT_MASK_RD__dma9__active 1
#define R_VECT_MASK_RD__dma9__inactive 0
#define R_VECT_MASK_RD__dma8__BITNR 24
#define R_VECT_MASK_RD__dma8__WIDTH 1
#define R_VECT_MASK_RD__dma8__active 1
#define R_VECT_MASK_RD__dma8__inactive 0
#define R_VECT_MASK_RD__dma7__BITNR 23
#define R_VECT_MASK_RD__dma7__WIDTH 1
#define R_VECT_MASK_RD__dma7__active 1
#define R_VECT_MASK_RD__dma7__inactive 0
#define R_VECT_MASK_RD__dma6__BITNR 22
#define R_VECT_MASK_RD__dma6__WIDTH 1
#define R_VECT_MASK_RD__dma6__active 1
#define R_VECT_MASK_RD__dma6__inactive 0
#define R_VECT_MASK_RD__dma5__BITNR 21
#define R_VECT_MASK_RD__dma5__WIDTH 1
#define R_VECT_MASK_RD__dma5__active 1
#define R_VECT_MASK_RD__dma5__inactive 0
#define R_VECT_MASK_RD__dma4__BITNR 20
#define R_VECT_MASK_RD__dma4__WIDTH 1
#define R_VECT_MASK_RD__dma4__active 1
#define R_VECT_MASK_RD__dma4__inactive 0
#define R_VECT_MASK_RD__dma3__BITNR 19
#define R_VECT_MASK_RD__dma3__WIDTH 1
#define R_VECT_MASK_RD__dma3__active 1
#define R_VECT_MASK_RD__dma3__inactive 0
#define R_VECT_MASK_RD__dma2__BITNR 18
#define R_VECT_MASK_RD__dma2__WIDTH 1
#define R_VECT_MASK_RD__dma2__active 1
#define R_VECT_MASK_RD__dma2__inactive 0
#define R_VECT_MASK_RD__dma1__BITNR 17
#define R_VECT_MASK_RD__dma1__WIDTH 1
#define R_VECT_MASK_RD__dma1__active 1
#define R_VECT_MASK_RD__dma1__inactive 0
#define R_VECT_MASK_RD__dma0__BITNR 16
#define R_VECT_MASK_RD__dma0__WIDTH 1
#define R_VECT_MASK_RD__dma0__active 1
#define R_VECT_MASK_RD__dma0__inactive 0
#define R_VECT_MASK_RD__ext_dma1__BITNR 13
#define R_VECT_MASK_RD__ext_dma1__WIDTH 1
#define R_VECT_MASK_RD__ext_dma1__active 1
#define R_VECT_MASK_RD__ext_dma1__inactive 0
#define R_VECT_MASK_RD__ext_dma0__BITNR 12
#define R_VECT_MASK_RD__ext_dma0__WIDTH 1
#define R_VECT_MASK_RD__ext_dma0__active 1
#define R_VECT_MASK_RD__ext_dma0__inactive 0
#define R_VECT_MASK_RD__pa__BITNR 11
#define R_VECT_MASK_RD__pa__WIDTH 1
#define R_VECT_MASK_RD__pa__active 1
#define R_VECT_MASK_RD__pa__inactive 0
#define R_VECT_MASK_RD__irq_intnr__BITNR 10
#define R_VECT_MASK_RD__irq_intnr__WIDTH 1
#define R_VECT_MASK_RD__irq_intnr__active 1
#define R_VECT_MASK_RD__irq_intnr__inactive 0
#define R_VECT_MASK_RD__sw__BITNR 9
#define R_VECT_MASK_RD__sw__WIDTH 1
#define R_VECT_MASK_RD__sw__active 1
#define R_VECT_MASK_RD__sw__inactive 0
#define R_VECT_MASK_RD__serial__BITNR 8
#define R_VECT_MASK_RD__serial__WIDTH 1
#define R_VECT_MASK_RD__serial__active 1
#define R_VECT_MASK_RD__serial__inactive 0
#define R_VECT_MASK_RD__snmp__BITNR 7
#define R_VECT_MASK_RD__snmp__WIDTH 1
#define R_VECT_MASK_RD__snmp__active 1
#define R_VECT_MASK_RD__snmp__inactive 0
#define R_VECT_MASK_RD__network__BITNR 6
#define R_VECT_MASK_RD__network__WIDTH 1
#define R_VECT_MASK_RD__network__active 1
#define R_VECT_MASK_RD__network__inactive 0
#define R_VECT_MASK_RD__scsi1__BITNR 5
#define R_VECT_MASK_RD__scsi1__WIDTH 1
#define R_VECT_MASK_RD__scsi1__active 1
#define R_VECT_MASK_RD__scsi1__inactive 0
#define R_VECT_MASK_RD__par1__BITNR 5
#define R_VECT_MASK_RD__par1__WIDTH 1
#define R_VECT_MASK_RD__par1__active 1
#define R_VECT_MASK_RD__par1__inactive 0
#define R_VECT_MASK_RD__scsi0__BITNR 4
#define R_VECT_MASK_RD__scsi0__WIDTH 1
#define R_VECT_MASK_RD__scsi0__active 1
#define R_VECT_MASK_RD__scsi0__inactive 0
#define R_VECT_MASK_RD__par0__BITNR 4
#define R_VECT_MASK_RD__par0__WIDTH 1
#define R_VECT_MASK_RD__par0__active 1
#define R_VECT_MASK_RD__par0__inactive 0
#define R_VECT_MASK_RD__ata__BITNR 4
#define R_VECT_MASK_RD__ata__WIDTH 1
#define R_VECT_MASK_RD__ata__active 1
#define R_VECT_MASK_RD__ata__inactive 0
#define R_VECT_MASK_RD__mio__BITNR 4
#define R_VECT_MASK_RD__mio__WIDTH 1
#define R_VECT_MASK_RD__mio__active 1
#define R_VECT_MASK_RD__mio__inactive 0
#define R_VECT_MASK_RD__timer1__BITNR 3
#define R_VECT_MASK_RD__timer1__WIDTH 1
#define R_VECT_MASK_RD__timer1__active 1
#define R_VECT_MASK_RD__timer1__inactive 0
#define R_VECT_MASK_RD__timer0__BITNR 2
#define R_VECT_MASK_RD__timer0__WIDTH 1
#define R_VECT_MASK_RD__timer0__active 1
#define R_VECT_MASK_RD__timer0__inactive 0
#define R_VECT_MASK_RD__nmi__BITNR 1
#define R_VECT_MASK_RD__nmi__WIDTH 1
#define R_VECT_MASK_RD__nmi__active 1
#define R_VECT_MASK_RD__nmi__inactive 0
#define R_VECT_MASK_RD__some__BITNR 0
#define R_VECT_MASK_RD__some__WIDTH 1
#define R_VECT_MASK_RD__some__active 1
#define R_VECT_MASK_RD__some__inactive 0

#define R_VECT_MASK_CLR (IO_TYPECAST_UDWORD 0xb00000d8)
#define R_VECT_MASK_CLR__usb__BITNR 31
#define R_VECT_MASK_CLR__usb__WIDTH 1
#define R_VECT_MASK_CLR__usb__clr 1
#define R_VECT_MASK_CLR__usb__nop 0
#define R_VECT_MASK_CLR__dma9__BITNR 25
#define R_VECT_MASK_CLR__dma9__WIDTH 1
#define R_VECT_MASK_CLR__dma9__clr 1
#define R_VECT_MASK_CLR__dma9__nop 0
#define R_VECT_MASK_CLR__dma8__BITNR 24
#define R_VECT_MASK_CLR__dma8__WIDTH 1
#define R_VECT_MASK_CLR__dma8__clr 1
#define R_VECT_MASK_CLR__dma8__nop 0
#define R_VECT_MASK_CLR__dma7__BITNR 23
#define R_VECT_MASK_CLR__dma7__WIDTH 1
#define R_VECT_MASK_CLR__dma7__clr 1
#define R_VECT_MASK_CLR__dma7__nop 0
#define R_VECT_MASK_CLR__dma6__BITNR 22
#define R_VECT_MASK_CLR__dma6__WIDTH 1
#define R_VECT_MASK_CLR__dma6__clr 1
#define R_VECT_MASK_CLR__dma6__nop 0
#define R_VECT_MASK_CLR__dma5__BITNR 21
#define R_VECT_MASK_CLR__dma5__WIDTH 1
#define R_VECT_MASK_CLR__dma5__clr 1
#define R_VECT_MASK_CLR__dma5__nop 0
#define R_VECT_MASK_CLR__dma4__BITNR 20
#define R_VECT_MASK_CLR__dma4__WIDTH 1
#define R_VECT_MASK_CLR__dma4__clr 1
#define R_VECT_MASK_CLR__dma4__nop 0
#define R_VECT_MASK_CLR__dma3__BITNR 19
#define R_VECT_MASK_CLR__dma3__WIDTH 1
#define R_VECT_MASK_CLR__dma3__clr 1
#define R_VECT_MASK_CLR__dma3__nop 0
#define R_VECT_MASK_CLR__dma2__BITNR 18
#define R_VECT_MASK_CLR__dma2__WIDTH 1
#define R_VECT_MASK_CLR__dma2__clr 1
#define R_VECT_MASK_CLR__dma2__nop 0
#define R_VECT_MASK_CLR__dma1__BITNR 17
#define R_VECT_MASK_CLR__dma1__WIDTH 1
#define R_VECT_MASK_CLR__dma1__clr 1
#define R_VECT_MASK_CLR__dma1__nop 0
#define R_VECT_MASK_CLR__dma0__BITNR 16
#define R_VECT_MASK_CLR__dma0__WIDTH 1
#define R_VECT_MASK_CLR__dma0__clr 1
#define R_VECT_MASK_CLR__dma0__nop 0
#define R_VECT_MASK_CLR__ext_dma1__BITNR 13
#define R_VECT_MASK_CLR__ext_dma1__WIDTH 1
#define R_VECT_MASK_CLR__ext_dma1__clr 1
#define R_VECT_MASK_CLR__ext_dma1__nop 0
#define R_VECT_MASK_CLR__ext_dma0__BITNR 12
#define R_VECT_MASK_CLR__ext_dma0__WIDTH 1
#define R_VECT_MASK_CLR__ext_dma0__clr 1
#define R_VECT_MASK_CLR__ext_dma0__nop 0
#define R_VECT_MASK_CLR__pa__BITNR 11
#define R_VECT_MASK_CLR__pa__WIDTH 1
#define R_VECT_MASK_CLR__pa__clr 1
#define R_VECT_MASK_CLR__pa__nop 0
#define R_VECT_MASK_CLR__irq_intnr__BITNR 10
#define R_VECT_MASK_CLR__irq_intnr__WIDTH 1
#define R_VECT_MASK_CLR__irq_intnr__clr 1
#define R_VECT_MASK_CLR__irq_intnr__nop 0
#define R_VECT_MASK_CLR__sw__BITNR 9
#define R_VECT_MASK_CLR__sw__WIDTH 1
#define R_VECT_MASK_CLR__sw__clr 1
#define R_VECT_MASK_CLR__sw__nop 0
#define R_VECT_MASK_CLR__serial__BITNR 8
#define R_VECT_MASK_CLR__serial__WIDTH 1
#define R_VECT_MASK_CLR__serial__clr 1
#define R_VECT_MASK_CLR__serial__nop 0
#define R_VECT_MASK_CLR__snmp__BITNR 7
#define R_VECT_MASK_CLR__snmp__WIDTH 1
#define R_VECT_MASK_CLR__snmp__clr 1
#define R_VECT_MASK_CLR__snmp__nop 0
#define R_VECT_MASK_CLR__network__BITNR 6
#define R_VECT_MASK_CLR__network__WIDTH 1
#define R_VECT_MASK_CLR__network__clr 1
#define R_VECT_MASK_CLR__network__nop 0
#define R_VECT_MASK_CLR__scsi1__BITNR 5
#define R_VECT_MASK_CLR__scsi1__WIDTH 1
#define R_VECT_MASK_CLR__scsi1__clr 1
#define R_VECT_MASK_CLR__scsi1__nop 0
#define R_VECT_MASK_CLR__par1__BITNR 5
#define R_VECT_MASK_CLR__par1__WIDTH 1
#define R_VECT_MASK_CLR__par1__clr 1
#define R_VECT_MASK_CLR__par1__nop 0
#define R_VECT_MASK_CLR__scsi0__BITNR 4
#define R_VECT_MASK_CLR__scsi0__WIDTH 1
#define R_VECT_MASK_CLR__scsi0__clr 1
#define R_VECT_MASK_CLR__scsi0__nop 0
#define R_VECT_MASK_CLR__par0__BITNR 4
#define R_VECT_MASK_CLR__par0__WIDTH 1
#define R_VECT_MASK_CLR__par0__clr 1
#define R_VECT_MASK_CLR__par0__nop 0
#define R_VECT_MASK_CLR__ata__BITNR 4
#define R_VECT_MASK_CLR__ata__WIDTH 1
#define R_VECT_MASK_CLR__ata__clr 1
#define R_VECT_MASK_CLR__ata__nop 0
#define R_VECT_MASK_CLR__mio__BITNR 4
#define R_VECT_MASK_CLR__mio__WIDTH 1
#define R_VECT_MASK_CLR__mio__clr 1
#define R_VECT_MASK_CLR__mio__nop 0
#define R_VECT_MASK_CLR__timer1__BITNR 3
#define R_VECT_MASK_CLR__timer1__WIDTH 1
#define R_VECT_MASK_CLR__timer1__clr 1
#define R_VECT_MASK_CLR__timer1__nop 0
#define R_VECT_MASK_CLR__timer0__BITNR 2
#define R_VECT_MASK_CLR__timer0__WIDTH 1
#define R_VECT_MASK_CLR__timer0__clr 1
#define R_VECT_MASK_CLR__timer0__nop 0
#define R_VECT_MASK_CLR__nmi__BITNR 1
#define R_VECT_MASK_CLR__nmi__WIDTH 1
#define R_VECT_MASK_CLR__nmi__clr 1
#define R_VECT_MASK_CLR__nmi__nop 0
#define R_VECT_MASK_CLR__some__BITNR 0
#define R_VECT_MASK_CLR__some__WIDTH 1
#define R_VECT_MASK_CLR__some__clr 1
#define R_VECT_MASK_CLR__some__nop 0

#define R_VECT_READ (IO_TYPECAST_RO_UDWORD 0xb00000dc)
#define R_VECT_READ__usb__BITNR 31
#define R_VECT_READ__usb__WIDTH 1
#define R_VECT_READ__usb__active 1
#define R_VECT_READ__usb__inactive 0
#define R_VECT_READ__dma9__BITNR 25
#define R_VECT_READ__dma9__WIDTH 1
#define R_VECT_READ__dma9__active 1
#define R_VECT_READ__dma9__inactive 0
#define R_VECT_READ__dma8__BITNR 24
#define R_VECT_READ__dma8__WIDTH 1
#define R_VECT_READ__dma8__active 1
#define R_VECT_READ__dma8__inactive 0
#define R_VECT_READ__dma7__BITNR 23
#define R_VECT_READ__dma7__WIDTH 1
#define R_VECT_READ__dma7__active 1
#define R_VECT_READ__dma7__inactive 0
#define R_VECT_READ__dma6__BITNR 22
#define R_VECT_READ__dma6__WIDTH 1
#define R_VECT_READ__dma6__active 1
#define R_VECT_READ__dma6__inactive 0
#define R_VECT_READ__dma5__BITNR 21
#define R_VECT_READ__dma5__WIDTH 1
#define R_VECT_READ__dma5__active 1
#define R_VECT_READ__dma5__inactive 0
#define R_VECT_READ__dma4__BITNR 20
#define R_VECT_READ__dma4__WIDTH 1
#define R_VECT_READ__dma4__active 1
#define R_VECT_READ__dma4__inactive 0
#define R_VECT_READ__dma3__BITNR 19
#define R_VECT_READ__dma3__WIDTH 1
#define R_VECT_READ__dma3__active 1
#define R_VECT_READ__dma3__inactive 0
#define R_VECT_READ__dma2__BITNR 18
#define R_VECT_READ__dma2__WIDTH 1
#define R_VECT_READ__dma2__active 1
#define R_VECT_READ__dma2__inactive 0
#define R_VECT_READ__dma1__BITNR 17
#define R_VECT_READ__dma1__WIDTH 1
#define R_VECT_READ__dma1__active 1
#define R_VECT_READ__dma1__inactive 0
#define R_VECT_READ__dma0__BITNR 16
#define R_VECT_READ__dma0__WIDTH 1
#define R_VECT_READ__dma0__active 1
#define R_VECT_READ__dma0__inactive 0
#define R_VECT_READ__ext_dma1__BITNR 13
#define R_VECT_READ__ext_dma1__WIDTH 1
#define R_VECT_READ__ext_dma1__active 1
#define R_VECT_READ__ext_dma1__inactive 0
#define R_VECT_READ__ext_dma0__BITNR 12
#define R_VECT_READ__ext_dma0__WIDTH 1
#define R_VECT_READ__ext_dma0__active 1
#define R_VECT_READ__ext_dma0__inactive 0
#define R_VECT_READ__pa__BITNR 11
#define R_VECT_READ__pa__WIDTH 1
#define R_VECT_READ__pa__active 1
#define R_VECT_READ__pa__inactive 0
#define R_VECT_READ__irq_intnr__BITNR 10
#define R_VECT_READ__irq_intnr__WIDTH 1
#define R_VECT_READ__irq_intnr__active 1
#define R_VECT_READ__irq_intnr__inactive 0
#define R_VECT_READ__sw__BITNR 9
#define R_VECT_READ__sw__WIDTH 1
#define R_VECT_READ__sw__active 1
#define R_VECT_READ__sw__inactive 0
#define R_VECT_READ__serial__BITNR 8
#define R_VECT_READ__serial__WIDTH 1
#define R_VECT_READ__serial__active 1
#define R_VECT_READ__serial__inactive 0
#define R_VECT_READ__snmp__BITNR 7
#define R_VECT_READ__snmp__WIDTH 1
#define R_VECT_READ__snmp__active 1
#define R_VECT_READ__snmp__inactive 0
#define R_VECT_READ__network__BITNR 6
#define R_VECT_READ__network__WIDTH 1
#define R_VECT_READ__network__active 1
#define R_VECT_READ__network__inactive 0
#define R_VECT_READ__scsi1__BITNR 5
#define R_VECT_READ__scsi1__WIDTH 1
#define R_VECT_READ__scsi1__active 1
#define R_VECT_READ__scsi1__inactive 0
#define R_VECT_READ__par1__BITNR 5
#define R_VECT_READ__par1__WIDTH 1
#define R_VECT_READ__par1__active 1
#define R_VECT_READ__par1__inactive 0
#define R_VECT_READ__scsi0__BITNR 4
#define R_VECT_READ__scsi0__WIDTH 1
#define R_VECT_READ__scsi0__active 1
#define R_VECT_READ__scsi0__inactive 0
#define R_VECT_READ__par0__BITNR 4
#define R_VECT_READ__par0__WIDTH 1
#define R_VECT_READ__par0__active 1
#define R_VECT_READ__par0__inactive 0
#define R_VECT_READ__ata__BITNR 4
#define R_VECT_READ__ata__WIDTH 1
#define R_VECT_READ__ata__active 1
#define R_VECT_READ__ata__inactive 0
#define R_VECT_READ__mio__BITNR 4
#define R_VECT_READ__mio__WIDTH 1
#define R_VECT_READ__mio__active 1
#define R_VECT_READ__mio__inactive 0
#define R_VECT_READ__timer1__BITNR 3
#define R_VECT_READ__timer1__WIDTH 1
#define R_VECT_READ__timer1__active 1
#define R_VECT_READ__timer1__inactive 0
#define R_VECT_READ__timer0__BITNR 2
#define R_VECT_READ__timer0__WIDTH 1
#define R_VECT_READ__timer0__active 1
#define R_VECT_READ__timer0__inactive 0
#define R_VECT_READ__nmi__BITNR 1
#define R_VECT_READ__nmi__WIDTH 1
#define R_VECT_READ__nmi__active 1
#define R_VECT_READ__nmi__inactive 0
#define R_VECT_READ__some__BITNR 0
#define R_VECT_READ__some__WIDTH 1
#define R_VECT_READ__some__active 1
#define R_VECT_READ__some__inactive 0

#define R_VECT_MASK_SET (IO_TYPECAST_UDWORD 0xb00000dc)
#define R_VECT_MASK_SET__usb__BITNR 31
#define R_VECT_MASK_SET__usb__WIDTH 1
#define R_VECT_MASK_SET__usb__set 1
#define R_VECT_MASK_SET__usb__nop 0
#define R_VECT_MASK_SET__dma9__BITNR 25
#define R_VECT_MASK_SET__dma9__WIDTH 1
#define R_VECT_MASK_SET__dma9__set 1
#define R_VECT_MASK_SET__dma9__nop 0
#define R_VECT_MASK_SET__dma8__BITNR 24
#define R_VECT_MASK_SET__dma8__WIDTH 1
#define R_VECT_MASK_SET__dma8__set 1
#define R_VECT_MASK_SET__dma8__nop 0
#define R_VECT_MASK_SET__dma7__BITNR 23
#define R_VECT_MASK_SET__dma7__WIDTH 1
#define R_VECT_MASK_SET__dma7__set 1
#define R_VECT_MASK_SET__dma7__nop 0
#define R_VECT_MASK_SET__dma6__BITNR 22
#define R_VECT_MASK_SET__dma6__WIDTH 1
#define R_VECT_MASK_SET__dma6__set 1
#define R_VECT_MASK_SET__dma6__nop 0
#define R_VECT_MASK_SET__dma5__BITNR 21
#define R_VECT_MASK_SET__dma5__WIDTH 1
#define R_VECT_MASK_SET__dma5__set 1
#define R_VECT_MASK_SET__dma5__nop 0
#define R_VECT_MASK_SET__dma4__BITNR 20
#define R_VECT_MASK_SET__dma4__WIDTH 1
#define R_VECT_MASK_SET__dma4__set 1
#define R_VECT_MASK_SET__dma4__nop 0
#define R_VECT_MASK_SET__dma3__BITNR 19
#define R_VECT_MASK_SET__dma3__WIDTH 1
#define R_VECT_MASK_SET__dma3__set 1
#define R_VECT_MASK_SET__dma3__nop 0
#define R_VECT_MASK_SET__dma2__BITNR 18
#define R_VECT_MASK_SET__dma2__WIDTH 1
#define R_VECT_MASK_SET__dma2__set 1
#define R_VECT_MASK_SET__dma2__nop 0
#define R_VECT_MASK_SET__dma1__BITNR 17
#define R_VECT_MASK_SET__dma1__WIDTH 1
#define R_VECT_MASK_SET__dma1__set 1
#define R_VECT_MASK_SET__dma1__nop 0
#define R_VECT_MASK_SET__dma0__BITNR 16
#define R_VECT_MASK_SET__dma0__WIDTH 1
#define R_VECT_MASK_SET__dma0__set 1
#define R_VECT_MASK_SET__dma0__nop 0
#define R_VECT_MASK_SET__ext_dma1__BITNR 13
#define R_VECT_MASK_SET__ext_dma1__WIDTH 1
#define R_VECT_MASK_SET__ext_dma1__set 1
#define R_VECT_MASK_SET__ext_dma1__nop 0
#define R_VECT_MASK_SET__ext_dma0__BITNR 12
#define R_VECT_MASK_SET__ext_dma0__WIDTH 1
#define R_VECT_MASK_SET__ext_dma0__set 1
#define R_VECT_MASK_SET__ext_dma0__nop 0
#define R_VECT_MASK_SET__pa__BITNR 11
#define R_VECT_MASK_SET__pa__WIDTH 1
#define R_VECT_MASK_SET__pa__set 1
#define R_VECT_MASK_SET__pa__nop 0
#define R_VECT_MASK_SET__irq_intnr__BITNR 10
#define R_VECT_MASK_SET__irq_intnr__WIDTH 1
#define R_VECT_MASK_SET__irq_intnr__set 1
#define R_VECT_MASK_SET__irq_intnr__nop 0
#define R_VECT_MASK_SET__sw__BITNR 9
#define R_VECT_MASK_SET__sw__WIDTH 1
#define R_VECT_MASK_SET__sw__set 1
#define R_VECT_MASK_SET__sw__nop 0
#define R_VECT_MASK_SET__serial__BITNR 8
#define R_VECT_MASK_SET__serial__WIDTH 1
#define R_VECT_MASK_SET__serial__set 1
#define R_VECT_MASK_SET__serial__nop 0
#define R_VECT_MASK_SET__snmp__BITNR 7
#define R_VECT_MASK_SET__snmp__WIDTH 1
#define R_VECT_MASK_SET__snmp__set 1
#define R_VECT_MASK_SET__snmp__nop 0
#define R_VECT_MASK_SET__network__BITNR 6
#define R_VECT_MASK_SET__network__WIDTH 1
#define R_VECT_MASK_SET__network__set 1
#define R_VECT_MASK_SET__network__nop 0
#define R_VECT_MASK_SET__scsi1__BITNR 5
#define R_VECT_MASK_SET__scsi1__WIDTH 1
#define R_VECT_MASK_SET__scsi1__set 1
#define R_VECT_MASK_SET__scsi1__nop 0
#define R_VECT_MASK_SET__par1__BITNR 5
#define R_VECT_MASK_SET__par1__WIDTH 1
#define R_VECT_MASK_SET__par1__set 1
#define R_VECT_MASK_SET__par1__nop 0
#define R_VECT_MASK_SET__scsi0__BITNR 4
#define R_VECT_MASK_SET__scsi0__WIDTH 1
#define R_VECT_MASK_SET__scsi0__set 1
#define R_VECT_MASK_SET__scsi0__nop 0
#define R_VECT_MASK_SET__par0__BITNR 4
#define R_VECT_MASK_SET__par0__WIDTH 1
#define R_VECT_MASK_SET__par0__set 1
#define R_VECT_MASK_SET__par0__nop 0
#define R_VECT_MASK_SET__ata__BITNR 4
#define R_VECT_MASK_SET__ata__WIDTH 1
#define R_VECT_MASK_SET__ata__set 1
#define R_VECT_MASK_SET__ata__nop 0
#define R_VECT_MASK_SET__mio__BITNR 4
#define R_VECT_MASK_SET__mio__WIDTH 1
#define R_VECT_MASK_SET__mio__set 1
#define R_VECT_MASK_SET__mio__nop 0
#define R_VECT_MASK_SET__timer1__BITNR 3
#define R_VECT_MASK_SET__timer1__WIDTH 1
#define R_VECT_MASK_SET__timer1__set 1
#define R_VECT_MASK_SET__timer1__nop 0
#define R_VECT_MASK_SET__timer0__BITNR 2
#define R_VECT_MASK_SET__timer0__WIDTH 1
#define R_VECT_MASK_SET__timer0__set 1
#define R_VECT_MASK_SET__timer0__nop 0
#define R_VECT_MASK_SET__nmi__BITNR 1
#define R_VECT_MASK_SET__nmi__WIDTH 1
#define R_VECT_MASK_SET__nmi__set 1
#define R_VECT_MASK_SET__nmi__nop 0
#define R_VECT_MASK_SET__some__BITNR 0
#define R_VECT_MASK_SET__some__WIDTH 1
#define R_VECT_MASK_SET__some__set 1
#define R_VECT_MASK_SET__some__nop 0

/*
!* DMA registers
!*/

#define R_SET_EOP (IO_TYPECAST_UDWORD 0xb000003c)
#define R_SET_EOP__ch9_eop__BITNR 3
#define R_SET_EOP__ch9_eop__WIDTH 1
#define R_SET_EOP__ch9_eop__set 1
#define R_SET_EOP__ch9_eop__nop 0
#define R_SET_EOP__ch7_eop__BITNR 2
#define R_SET_EOP__ch7_eop__WIDTH 1
#define R_SET_EOP__ch7_eop__set 1
#define R_SET_EOP__ch7_eop__nop 0
#define R_SET_EOP__ch5_eop__BITNR 1
#define R_SET_EOP__ch5_eop__WIDTH 1
#define R_SET_EOP__ch5_eop__set 1
#define R_SET_EOP__ch5_eop__nop 0
#define R_SET_EOP__ch3_eop__BITNR 0
#define R_SET_EOP__ch3_eop__WIDTH 1
#define R_SET_EOP__ch3_eop__set 1
#define R_SET_EOP__ch3_eop__nop 0

#define R_DMA_CH0_HWSW (IO_TYPECAST_UDWORD 0xb0000100)
#define R_DMA_CH0_HWSW__hw__BITNR 16
#define R_DMA_CH0_HWSW__hw__WIDTH 16
#define R_DMA_CH0_HWSW__sw__BITNR 0
#define R_DMA_CH0_HWSW__sw__WIDTH 16

#define R_DMA_CH0_DESCR (IO_TYPECAST_UDWORD 0xb000010c)
#define R_DMA_CH0_DESCR__descr__BITNR 0
#define R_DMA_CH0_DESCR__descr__WIDTH 32

#define R_DMA_CH0_NEXT (IO_TYPECAST_UDWORD 0xb0000104)
#define R_DMA_CH0_NEXT__next__BITNR 0
#define R_DMA_CH0_NEXT__next__WIDTH 32

#define R_DMA_CH0_BUF (IO_TYPECAST_UDWORD 0xb0000108)
#define R_DMA_CH0_BUF__buf__BITNR 0
#define R_DMA_CH0_BUF__buf__WIDTH 32

#define R_DMA_CH0_FIRST (IO_TYPECAST_UDWORD 0xb00001a0)
#define R_DMA_CH0_FIRST__first__BITNR 0
#define R_DMA_CH0_FIRST__first__WIDTH 32

#define R_DMA_CH0_CMD (IO_TYPECAST_BYTE 0xb00001d0)
#define R_DMA_CH0_CMD__cmd__BITNR 0
#define R_DMA_CH0_CMD__cmd__WIDTH 3
#define R_DMA_CH0_CMD__cmd__hold 0
#define R_DMA_CH0_CMD__cmd__start 1
#define R_DMA_CH0_CMD__cmd__restart 3
#define R_DMA_CH0_CMD__cmd__continue 3
#define R_DMA_CH0_CMD__cmd__reset 4

#define R_DMA_CH0_CLR_INTR (IO_TYPECAST_BYTE 0xb00001d1)
#define R_DMA_CH0_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH0_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH0_CLR_INTR__clr_eop__do 1
#define R_DMA_CH0_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH0_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH0_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH0_CLR_INTR__clr_descr__do 1
#define R_DMA_CH0_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH0_STATUS (IO_TYPECAST_RO_BYTE 0xb00001d2)
#define R_DMA_CH0_STATUS__avail__BITNR 0
#define R_DMA_CH0_STATUS__avail__WIDTH 7

#define R_DMA_CH1_HWSW (IO_TYPECAST_UDWORD 0xb0000110)
#define R_DMA_CH1_HWSW__hw__BITNR 16
#define R_DMA_CH1_HWSW__hw__WIDTH 16
#define R_DMA_CH1_HWSW__sw__BITNR 0
#define R_DMA_CH1_HWSW__sw__WIDTH 16

#define R_DMA_CH1_DESCR (IO_TYPECAST_UDWORD 0xb000011c)
#define R_DMA_CH1_DESCR__descr__BITNR 0
#define R_DMA_CH1_DESCR__descr__WIDTH 32

#define R_DMA_CH1_NEXT (IO_TYPECAST_UDWORD 0xb0000114)
#define R_DMA_CH1_NEXT__next__BITNR 0
#define R_DMA_CH1_NEXT__next__WIDTH 32

#define R_DMA_CH1_BUF (IO_TYPECAST_UDWORD 0xb0000118)
#define R_DMA_CH1_BUF__buf__BITNR 0
#define R_DMA_CH1_BUF__buf__WIDTH 32

#define R_DMA_CH1_FIRST (IO_TYPECAST_UDWORD 0xb00001a4)
#define R_DMA_CH1_FIRST__first__BITNR 0
#define R_DMA_CH1_FIRST__first__WIDTH 32

#define R_DMA_CH1_CMD (IO_TYPECAST_BYTE 0xb00001d4)
#define R_DMA_CH1_CMD__cmd__BITNR 0
#define R_DMA_CH1_CMD__cmd__WIDTH 3
#define R_DMA_CH1_CMD__cmd__hold 0
#define R_DMA_CH1_CMD__cmd__start 1
#define R_DMA_CH1_CMD__cmd__restart 3
#define R_DMA_CH1_CMD__cmd__continue 3
#define R_DMA_CH1_CMD__cmd__reset 4

#define R_DMA_CH1_CLR_INTR (IO_TYPECAST_BYTE 0xb00001d5)
#define R_DMA_CH1_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH1_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH1_CLR_INTR__clr_eop__do 1
#define R_DMA_CH1_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH1_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH1_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH1_CLR_INTR__clr_descr__do 1
#define R_DMA_CH1_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH1_STATUS (IO_TYPECAST_RO_BYTE 0xb00001d6)
#define R_DMA_CH1_STATUS__avail__BITNR 0
#define R_DMA_CH1_STATUS__avail__WIDTH 7

#define R_DMA_CH2_HWSW (IO_TYPECAST_UDWORD 0xb0000120)
#define R_DMA_CH2_HWSW__hw__BITNR 16
#define R_DMA_CH2_HWSW__hw__WIDTH 16
#define R_DMA_CH2_HWSW__sw__BITNR 0
#define R_DMA_CH2_HWSW__sw__WIDTH 16

#define R_DMA_CH2_DESCR (IO_TYPECAST_UDWORD 0xb000012c)
#define R_DMA_CH2_DESCR__descr__BITNR 0
#define R_DMA_CH2_DESCR__descr__WIDTH 32

#define R_DMA_CH2_NEXT (IO_TYPECAST_UDWORD 0xb0000124)
#define R_DMA_CH2_NEXT__next__BITNR 0
#define R_DMA_CH2_NEXT__next__WIDTH 32

#define R_DMA_CH2_BUF (IO_TYPECAST_UDWORD 0xb0000128)
#define R_DMA_CH2_BUF__buf__BITNR 0
#define R_DMA_CH2_BUF__buf__WIDTH 32

#define R_DMA_CH2_FIRST (IO_TYPECAST_UDWORD 0xb00001a8)
#define R_DMA_CH2_FIRST__first__BITNR 0
#define R_DMA_CH2_FIRST__first__WIDTH 32

#define R_DMA_CH2_CMD (IO_TYPECAST_BYTE 0xb00001d8)
#define R_DMA_CH2_CMD__cmd__BITNR 0
#define R_DMA_CH2_CMD__cmd__WIDTH 3
#define R_DMA_CH2_CMD__cmd__hold 0
#define R_DMA_CH2_CMD__cmd__start 1
#define R_DMA_CH2_CMD__cmd__restart 3
#define R_DMA_CH2_CMD__cmd__continue 3
#define R_DMA_CH2_CMD__cmd__reset 4

#define R_DMA_CH2_CLR_INTR (IO_TYPECAST_BYTE 0xb00001d9)
#define R_DMA_CH2_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH2_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH2_CLR_INTR__clr_eop__do 1
#define R_DMA_CH2_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH2_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH2_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH2_CLR_INTR__clr_descr__do 1
#define R_DMA_CH2_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH2_STATUS (IO_TYPECAST_RO_BYTE 0xb00001da)
#define R_DMA_CH2_STATUS__avail__BITNR 0
#define R_DMA_CH2_STATUS__avail__WIDTH 7

#define R_DMA_CH3_HWSW (IO_TYPECAST_UDWORD 0xb0000130)
#define R_DMA_CH3_HWSW__hw__BITNR 16
#define R_DMA_CH3_HWSW__hw__WIDTH 16
#define R_DMA_CH3_HWSW__sw__BITNR 0
#define R_DMA_CH3_HWSW__sw__WIDTH 16

#define R_DMA_CH3_DESCR (IO_TYPECAST_UDWORD 0xb000013c)
#define R_DMA_CH3_DESCR__descr__BITNR 0
#define R_DMA_CH3_DESCR__descr__WIDTH 32

#define R_DMA_CH3_NEXT (IO_TYPECAST_UDWORD 0xb0000134)
#define R_DMA_CH3_NEXT__next__BITNR 0
#define R_DMA_CH3_NEXT__next__WIDTH 32

#define R_DMA_CH3_BUF (IO_TYPECAST_UDWORD 0xb0000138)
#define R_DMA_CH3_BUF__buf__BITNR 0
#define R_DMA_CH3_BUF__buf__WIDTH 32

#define R_DMA_CH3_FIRST (IO_TYPECAST_UDWORD 0xb00001ac)
#define R_DMA_CH3_FIRST__first__BITNR 0
#define R_DMA_CH3_FIRST__first__WIDTH 32

#define R_DMA_CH3_CMD (IO_TYPECAST_BYTE 0xb00001dc)
#define R_DMA_CH3_CMD__cmd__BITNR 0
#define R_DMA_CH3_CMD__cmd__WIDTH 3
#define R_DMA_CH3_CMD__cmd__hold 0
#define R_DMA_CH3_CMD__cmd__start 1
#define R_DMA_CH3_CMD__cmd__restart 3
#define R_DMA_CH3_CMD__cmd__continue 3
#define R_DMA_CH3_CMD__cmd__reset 4

#define R_DMA_CH3_CLR_INTR (IO_TYPECAST_BYTE 0xb00001dd)
#define R_DMA_CH3_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH3_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH3_CLR_INTR__clr_eop__do 1
#define R_DMA_CH3_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH3_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH3_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH3_CLR_INTR__clr_descr__do 1
#define R_DMA_CH3_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH3_STATUS (IO_TYPECAST_RO_BYTE 0xb00001de)
#define R_DMA_CH3_STATUS__avail__BITNR 0
#define R_DMA_CH3_STATUS__avail__WIDTH 7

#define R_DMA_CH4_HWSW (IO_TYPECAST_UDWORD 0xb0000140)
#define R_DMA_CH4_HWSW__hw__BITNR 16
#define R_DMA_CH4_HWSW__hw__WIDTH 16
#define R_DMA_CH4_HWSW__sw__BITNR 0
#define R_DMA_CH4_HWSW__sw__WIDTH 16

#define R_DMA_CH4_DESCR (IO_TYPECAST_UDWORD 0xb000014c)
#define R_DMA_CH4_DESCR__descr__BITNR 0
#define R_DMA_CH4_DESCR__descr__WIDTH 32

#define R_DMA_CH4_NEXT (IO_TYPECAST_UDWORD 0xb0000144)
#define R_DMA_CH4_NEXT__next__BITNR 0
#define R_DMA_CH4_NEXT__next__WIDTH 32

#define R_DMA_CH4_BUF (IO_TYPECAST_UDWORD 0xb0000148)
#define R_DMA_CH4_BUF__buf__BITNR 0
#define R_DMA_CH4_BUF__buf__WIDTH 32

#define R_DMA_CH4_FIRST (IO_TYPECAST_UDWORD 0xb00001b0)
#define R_DMA_CH4_FIRST__first__BITNR 0
#define R_DMA_CH4_FIRST__first__WIDTH 32

#define R_DMA_CH4_CMD (IO_TYPECAST_BYTE 0xb00001e0)
#define R_DMA_CH4_CMD__cmd__BITNR 0
#define R_DMA_CH4_CMD__cmd__WIDTH 3
#define R_DMA_CH4_CMD__cmd__hold 0
#define R_DMA_CH4_CMD__cmd__start 1
#define R_DMA_CH4_CMD__cmd__restart 3
#define R_DMA_CH4_CMD__cmd__continue 3
#define R_DMA_CH4_CMD__cmd__reset 4

#define R_DMA_CH4_CLR_INTR (IO_TYPECAST_BYTE 0xb00001e1)
#define R_DMA_CH4_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH4_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH4_CLR_INTR__clr_eop__do 1
#define R_DMA_CH4_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH4_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH4_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH4_CLR_INTR__clr_descr__do 1
#define R_DMA_CH4_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH4_STATUS (IO_TYPECAST_RO_BYTE 0xb00001e2)
#define R_DMA_CH4_STATUS__avail__BITNR 0
#define R_DMA_CH4_STATUS__avail__WIDTH 7

#define R_DMA_CH5_HWSW (IO_TYPECAST_UDWORD 0xb0000150)
#define R_DMA_CH5_HWSW__hw__BITNR 16
#define R_DMA_CH5_HWSW__hw__WIDTH 16
#define R_DMA_CH5_HWSW__sw__BITNR 0
#define R_DMA_CH5_HWSW__sw__WIDTH 16

#define R_DMA_CH5_DESCR (IO_TYPECAST_UDWORD 0xb000015c)
#define R_DMA_CH5_DESCR__descr__BITNR 0
#define R_DMA_CH5_DESCR__descr__WIDTH 32

#define R_DMA_CH5_NEXT (IO_TYPECAST_UDWORD 0xb0000154)
#define R_DMA_CH5_NEXT__next__BITNR 0
#define R_DMA_CH5_NEXT__next__WIDTH 32

#define R_DMA_CH5_BUF (IO_TYPECAST_UDWORD 0xb0000158)
#define R_DMA_CH5_BUF__buf__BITNR 0
#define R_DMA_CH5_BUF__buf__WIDTH 32

#define R_DMA_CH5_FIRST (IO_TYPECAST_UDWORD 0xb00001b4)
#define R_DMA_CH5_FIRST__first__BITNR 0
#define R_DMA_CH5_FIRST__first__WIDTH 32

#define R_DMA_CH5_CMD (IO_TYPECAST_BYTE 0xb00001e4)
#define R_DMA_CH5_CMD__cmd__BITNR 0
#define R_DMA_CH5_CMD__cmd__WIDTH 3
#define R_DMA_CH5_CMD__cmd__hold 0
#define R_DMA_CH5_CMD__cmd__start 1
#define R_DMA_CH5_CMD__cmd__restart 3
#define R_DMA_CH5_CMD__cmd__continue 3
#define R_DMA_CH5_CMD__cmd__reset 4

#define R_DMA_CH5_CLR_INTR (IO_TYPECAST_BYTE 0xb00001e5)
#define R_DMA_CH5_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH5_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH5_CLR_INTR__clr_eop__do 1
#define R_DMA_CH5_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH5_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH5_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH5_CLR_INTR__clr_descr__do 1
#define R_DMA_CH5_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH5_STATUS (IO_TYPECAST_RO_BYTE 0xb00001e6)
#define R_DMA_CH5_STATUS__avail__BITNR 0
#define R_DMA_CH5_STATUS__avail__WIDTH 7

#define R_DMA_CH6_HWSW (IO_TYPECAST_UDWORD 0xb0000160)
#define R_DMA_CH6_HWSW__hw__BITNR 16
#define R_DMA_CH6_HWSW__hw__WIDTH 16
#define R_DMA_CH6_HWSW__sw__BITNR 0
#define R_DMA_CH6_HWSW__sw__WIDTH 16

#define R_DMA_CH6_DESCR (IO_TYPECAST_UDWORD 0xb000016c)
#define R_DMA_CH6_DESCR__descr__BITNR 0
#define R_DMA_CH6_DESCR__descr__WIDTH 32

#define R_DMA_CH6_NEXT (IO_TYPECAST_UDWORD 0xb0000164)
#define R_DMA_CH6_NEXT__next__BITNR 0
#define R_DMA_CH6_NEXT__next__WIDTH 32

#define R_DMA_CH6_BUF (IO_TYPECAST_UDWORD 0xb0000168)
#define R_DMA_CH6_BUF__buf__BITNR 0
#define R_DMA_CH6_BUF__buf__WIDTH 32

#define R_DMA_CH6_FIRST (IO_TYPECAST_UDWORD 0xb00001b8)
#define R_DMA_CH6_FIRST__first__BITNR 0
#define R_DMA_CH6_FIRST__first__WIDTH 32

#define R_DMA_CH6_CMD (IO_TYPECAST_BYTE 0xb00001e8)
#define R_DMA_CH6_CMD__cmd__BITNR 0
#define R_DMA_CH6_CMD__cmd__WIDTH 3
#define R_DMA_CH6_CMD__cmd__hold 0
#define R_DMA_CH6_CMD__cmd__start 1
#define R_DMA_CH6_CMD__cmd__restart 3
#define R_DMA_CH6_CMD__cmd__continue 3
#define R_DMA_CH6_CMD__cmd__reset 4

#define R_DMA_CH6_CLR_INTR (IO_TYPECAST_BYTE 0xb00001e9)
#define R_DMA_CH6_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH6_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH6_CLR_INTR__clr_eop__do 1
#define R_DMA_CH6_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH6_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH6_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH6_CLR_INTR__clr_descr__do 1
#define R_DMA_CH6_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH6_STATUS (IO_TYPECAST_RO_BYTE 0xb00001ea)
#define R_DMA_CH6_STATUS__avail__BITNR 0
#define R_DMA_CH6_STATUS__avail__WIDTH 7

#define R_DMA_CH7_HWSW (IO_TYPECAST_UDWORD 0xb0000170)
#define R_DMA_CH7_HWSW__hw__BITNR 16
#define R_DMA_CH7_HWSW__hw__WIDTH 16
#define R_DMA_CH7_HWSW__sw__BITNR 0
#define R_DMA_CH7_HWSW__sw__WIDTH 16

#define R_DMA_CH7_DESCR (IO_TYPECAST_UDWORD 0xb000017c)
#define R_DMA_CH7_DESCR__descr__BITNR 0
#define R_DMA_CH7_DESCR__descr__WIDTH 32

#define R_DMA_CH7_NEXT (IO_TYPECAST_UDWORD 0xb0000174)
#define R_DMA_CH7_NEXT__next__BITNR 0
#define R_DMA_CH7_NEXT__next__WIDTH 32

#define R_DMA_CH7_BUF (IO_TYPECAST_UDWORD 0xb0000178)
#define R_DMA_CH7_BUF__buf__BITNR 0
#define R_DMA_CH7_BUF__buf__WIDTH 32

#define R_DMA_CH7_FIRST (IO_TYPECAST_UDWORD 0xb00001bc)
#define R_DMA_CH7_FIRST__first__BITNR 0
#define R_DMA_CH7_FIRST__first__WIDTH 32

#define R_DMA_CH7_CMD (IO_TYPECAST_BYTE 0xb00001ec)
#define R_DMA_CH7_CMD__cmd__BITNR 0
#define R_DMA_CH7_CMD__cmd__WIDTH 3
#define R_DMA_CH7_CMD__cmd__hold 0
#define R_DMA_CH7_CMD__cmd__start 1
#define R_DMA_CH7_CMD__cmd__restart 3
#define R_DMA_CH7_CMD__cmd__continue 3
#define R_DMA_CH7_CMD__cmd__reset 4

#define R_DMA_CH7_CLR_INTR (IO_TYPECAST_BYTE 0xb00001ed)
#define R_DMA_CH7_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH7_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH7_CLR_INTR__clr_eop__do 1
#define R_DMA_CH7_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH7_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH7_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH7_CLR_INTR__clr_descr__do 1
#define R_DMA_CH7_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH7_STATUS (IO_TYPECAST_RO_BYTE 0xb00001ee)
#define R_DMA_CH7_STATUS__avail__BITNR 0
#define R_DMA_CH7_STATUS__avail__WIDTH 7

#define R_DMA_CH8_HWSW (IO_TYPECAST_UDWORD 0xb0000180)
#define R_DMA_CH8_HWSW__hw__BITNR 16
#define R_DMA_CH8_HWSW__hw__WIDTH 16
#define R_DMA_CH8_HWSW__sw__BITNR 0
#define R_DMA_CH8_HWSW__sw__WIDTH 16

#define R_DMA_CH8_DESCR (IO_TYPECAST_UDWORD 0xb000018c)
#define R_DMA_CH8_DESCR__descr__BITNR 0
#define R_DMA_CH8_DESCR__descr__WIDTH 32

#define R_DMA_CH8_NEXT (IO_TYPECAST_UDWORD 0xb0000184)
#define R_DMA_CH8_NEXT__next__BITNR 0
#define R_DMA_CH8_NEXT__next__WIDTH 32

#define R_DMA_CH8_BUF (IO_TYPECAST_UDWORD 0xb0000188)
#define R_DMA_CH8_BUF__buf__BITNR 0
#define R_DMA_CH8_BUF__buf__WIDTH 32

#define R_DMA_CH8_FIRST (IO_TYPECAST_UDWORD 0xb00001c0)
#define R_DMA_CH8_FIRST__first__BITNR 0
#define R_DMA_CH8_FIRST__first__WIDTH 32

#define R_DMA_CH8_CMD (IO_TYPECAST_BYTE 0xb00001f0)
#define R_DMA_CH8_CMD__cmd__BITNR 0
#define R_DMA_CH8_CMD__cmd__WIDTH 3
#define R_DMA_CH8_CMD__cmd__hold 0
#define R_DMA_CH8_CMD__cmd__start 1
#define R_DMA_CH8_CMD__cmd__restart 3
#define R_DMA_CH8_CMD__cmd__continue 3
#define R_DMA_CH8_CMD__cmd__reset 4

#define R_DMA_CH8_CLR_INTR (IO_TYPECAST_BYTE 0xb00001f1)
#define R_DMA_CH8_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH8_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH8_CLR_INTR__clr_eop__do 1
#define R_DMA_CH8_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH8_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH8_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH8_CLR_INTR__clr_descr__do 1
#define R_DMA_CH8_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH8_STATUS (IO_TYPECAST_RO_BYTE 0xb00001f2)
#define R_DMA_CH8_STATUS__avail__BITNR 0
#define R_DMA_CH8_STATUS__avail__WIDTH 7

#define R_DMA_CH8_SUB (IO_TYPECAST_UDWORD 0xb000018c)
#define R_DMA_CH8_SUB__sub__BITNR 0
#define R_DMA_CH8_SUB__sub__WIDTH 32

#define R_DMA_CH8_NEP (IO_TYPECAST_UDWORD 0xb00001c0)
#define R_DMA_CH8_NEP__nep__BITNR 0
#define R_DMA_CH8_NEP__nep__WIDTH 32

#define R_DMA_CH8_SUB0_EP (IO_TYPECAST_UDWORD 0xb00001c8)
#define R_DMA_CH8_SUB0_EP__ep__BITNR 0
#define R_DMA_CH8_SUB0_EP__ep__WIDTH 32

#define R_DMA_CH8_SUB0_CMD (IO_TYPECAST_BYTE 0xb00001d3)
#define R_DMA_CH8_SUB0_CMD__cmd__BITNR 0
#define R_DMA_CH8_SUB0_CMD__cmd__WIDTH 1
#define R_DMA_CH8_SUB0_CMD__cmd__stop 0
#define R_DMA_CH8_SUB0_CMD__cmd__start 1

#define R_DMA_CH8_SUB0_CLR_INTR (IO_TYPECAST_BYTE 0xb00001e3)
#define R_DMA_CH8_SUB0_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH8_SUB0_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH8_SUB0_CLR_INTR__clr_descr__dont 0
#define R_DMA_CH8_SUB0_CLR_INTR__clr_descr__do 1

#define R_DMA_CH8_SUB1_EP (IO_TYPECAST_UDWORD 0xb00001cc)
#define R_DMA_CH8_SUB1_EP__ep__BITNR 0
#define R_DMA_CH8_SUB1_EP__ep__WIDTH 32

#define R_DMA_CH8_SUB1_CMD (IO_TYPECAST_BYTE 0xb00001d7)
#define R_DMA_CH8_SUB1_CMD__cmd__BITNR 0
#define R_DMA_CH8_SUB1_CMD__cmd__WIDTH 1
#define R_DMA_CH8_SUB1_CMD__cmd__stop 0
#define R_DMA_CH8_SUB1_CMD__cmd__start 1

#define R_DMA_CH8_SUB1_CLR_INTR (IO_TYPECAST_BYTE 0xb00001e7)
#define R_DMA_CH8_SUB1_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH8_SUB1_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH8_SUB1_CLR_INTR__clr_descr__dont 0
#define R_DMA_CH8_SUB1_CLR_INTR__clr_descr__do 1

#define R_DMA_CH8_SUB2_EP (IO_TYPECAST_UDWORD 0xb00001f8)
#define R_DMA_CH8_SUB2_EP__ep__BITNR 0
#define R_DMA_CH8_SUB2_EP__ep__WIDTH 32

#define R_DMA_CH8_SUB2_CMD (IO_TYPECAST_BYTE 0xb00001db)
#define R_DMA_CH8_SUB2_CMD__cmd__BITNR 0
#define R_DMA_CH8_SUB2_CMD__cmd__WIDTH 1
#define R_DMA_CH8_SUB2_CMD__cmd__stop 0
#define R_DMA_CH8_SUB2_CMD__cmd__start 1

#define R_DMA_CH8_SUB2_CLR_INTR (IO_TYPECAST_BYTE 0xb00001eb)
#define R_DMA_CH8_SUB2_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH8_SUB2_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH8_SUB2_CLR_INTR__clr_descr__dont 0
#define R_DMA_CH8_SUB2_CLR_INTR__clr_descr__do 1

#define R_DMA_CH8_SUB3_EP (IO_TYPECAST_UDWORD 0xb00001fc)
#define R_DMA_CH8_SUB3_EP__ep__BITNR 0
#define R_DMA_CH8_SUB3_EP__ep__WIDTH 32

#define R_DMA_CH8_SUB3_CMD (IO_TYPECAST_BYTE 0xb00001df)
#define R_DMA_CH8_SUB3_CMD__cmd__BITNR 0
#define R_DMA_CH8_SUB3_CMD__cmd__WIDTH 1
#define R_DMA_CH8_SUB3_CMD__cmd__stop 0
#define R_DMA_CH8_SUB3_CMD__cmd__start 1

#define R_DMA_CH8_SUB3_CLR_INTR (IO_TYPECAST_BYTE 0xb00001ef)
#define R_DMA_CH8_SUB3_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH8_SUB3_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH8_SUB3_CLR_INTR__clr_descr__dont 0
#define R_DMA_CH8_SUB3_CLR_INTR__clr_descr__do 1

#define R_DMA_CH9_HWSW (IO_TYPECAST_UDWORD 0xb0000190)
#define R_DMA_CH9_HWSW__hw__BITNR 16
#define R_DMA_CH9_HWSW__hw__WIDTH 16
#define R_DMA_CH9_HWSW__sw__BITNR 0
#define R_DMA_CH9_HWSW__sw__WIDTH 16

#define R_DMA_CH9_DESCR (IO_TYPECAST_UDWORD 0xb000019c)
#define R_DMA_CH9_DESCR__descr__BITNR 0
#define R_DMA_CH9_DESCR__descr__WIDTH 32

#define R_DMA_CH9_NEXT (IO_TYPECAST_UDWORD 0xb0000194)
#define R_DMA_CH9_NEXT__next__BITNR 0
#define R_DMA_CH9_NEXT__next__WIDTH 32

#define R_DMA_CH9_BUF (IO_TYPECAST_UDWORD 0xb0000198)
#define R_DMA_CH9_BUF__buf__BITNR 0
#define R_DMA_CH9_BUF__buf__WIDTH 32

#define R_DMA_CH9_FIRST (IO_TYPECAST_UDWORD 0xb00001c4)
#define R_DMA_CH9_FIRST__first__BITNR 0
#define R_DMA_CH9_FIRST__first__WIDTH 32

#define R_DMA_CH9_CMD (IO_TYPECAST_BYTE 0xb00001f4)
#define R_DMA_CH9_CMD__cmd__BITNR 0
#define R_DMA_CH9_CMD__cmd__WIDTH 3
#define R_DMA_CH9_CMD__cmd__hold 0
#define R_DMA_CH9_CMD__cmd__start 1
#define R_DMA_CH9_CMD__cmd__restart 3
#define R_DMA_CH9_CMD__cmd__continue 3
#define R_DMA_CH9_CMD__cmd__reset 4

#define R_DMA_CH9_CLR_INTR (IO_TYPECAST_BYTE 0xb00001f5)
#define R_DMA_CH9_CLR_INTR__clr_eop__BITNR 1
#define R_DMA_CH9_CLR_INTR__clr_eop__WIDTH 1
#define R_DMA_CH9_CLR_INTR__clr_eop__do 1
#define R_DMA_CH9_CLR_INTR__clr_eop__dont 0
#define R_DMA_CH9_CLR_INTR__clr_descr__BITNR 0
#define R_DMA_CH9_CLR_INTR__clr_descr__WIDTH 1
#define R_DMA_CH9_CLR_INTR__clr_descr__do 1
#define R_DMA_CH9_CLR_INTR__clr_descr__dont 0

#define R_DMA_CH9_STATUS (IO_TYPECAST_RO_BYTE 0xb00001f6)
#define R_DMA_CH9_STATUS__avail__BITNR 0
#define R_DMA_CH9_STATUS__avail__WIDTH 7

/*
!* Test mode registers
!*/

#define R_TEST_MODE (IO_TYPECAST_UDWORD 0xb00000fc)
#define R_TEST_MODE__single_step__BITNR 19
#define R_TEST_MODE__single_step__WIDTH 1
#define R_TEST_MODE__single_step__on 1
#define R_TEST_MODE__single_step__off 0
#define R_TEST_MODE__step_wr__BITNR 18
#define R_TEST_MODE__step_wr__WIDTH 1
#define R_TEST_MODE__step_wr__on 1
#define R_TEST_MODE__step_wr__off 0
#define R_TEST_MODE__step_rd__BITNR 17
#define R_TEST_MODE__step_rd__WIDTH 1
#define R_TEST_MODE__step_rd__on 1
#define R_TEST_MODE__step_rd__off 0
#define R_TEST_MODE__step_fetch__BITNR 16
#define R_TEST_MODE__step_fetch__WIDTH 1
#define R_TEST_MODE__step_fetch__on 1
#define R_TEST_MODE__step_fetch__off 0
#define R_TEST_MODE__mmu_test__BITNR 12
#define R_TEST_MODE__mmu_test__WIDTH 1
#define R_TEST_MODE__mmu_test__on 1
#define R_TEST_MODE__mmu_test__off 0
#define R_TEST_MODE__usb_test__BITNR 11
#define R_TEST_MODE__usb_test__WIDTH 1
#define R_TEST_MODE__usb_test__on 1
#define R_TEST_MODE__usb_test__off 0
#define R_TEST_MODE__scsi_timer_test__BITNR 10
#define R_TEST_MODE__scsi_timer_test__WIDTH 1
#define R_TEST_MODE__scsi_timer_test__on 1
#define R_TEST_MODE__scsi_timer_test__off 0
#define R_TEST_MODE__backoff__BITNR 9
#define R_TEST_MODE__backoff__WIDTH 1
#define R_TEST_MODE__backoff__on 1
#define R_TEST_MODE__backoff__off 0
#define R_TEST_MODE__snmp_test__BITNR 8
#define R_TEST_MODE__snmp_test__WIDTH 1
#define R_TEST_MODE__snmp_test__on 1
#define R_TEST_MODE__snmp_test__off 0
#define R_TEST_MODE__snmp_inc__BITNR 7
#define R_TEST_MODE__snmp_inc__WIDTH 1
#define R_TEST_MODE__snmp_inc__do 1
#define R_TEST_MODE__snmp_inc__dont 0
#define R_TEST_MODE__ser_loop__BITNR 6
#define R_TEST_MODE__ser_loop__WIDTH 1
#define R_TEST_MODE__ser_loop__on 1
#define R_TEST_MODE__ser_loop__off 0
#define R_TEST_MODE__baudrate__BITNR 5
#define R_TEST_MODE__baudrate__WIDTH 1
#define R_TEST_MODE__baudrate__on 1
#define R_TEST_MODE__baudrate__off 0
#define R_TEST_MODE__timer__BITNR 3
#define R_TEST_MODE__timer__WIDTH 2
#define R_TEST_MODE__timer__off 0
#define R_TEST_MODE__timer__even 1
#define R_TEST_MODE__timer__odd 2
#define R_TEST_MODE__timer__all 3
#define R_TEST_MODE__cache_test__BITNR 2
#define R_TEST_MODE__cache_test__WIDTH 1
#define R_TEST_MODE__cache_test__normal 0
#define R_TEST_MODE__cache_test__test 1
#define R_TEST_MODE__tag_test__BITNR 1
#define R_TEST_MODE__tag_test__WIDTH 1
#define R_TEST_MODE__tag_test__normal 0
#define R_TEST_MODE__tag_test__test 1
#define R_TEST_MODE__cache_enable__BITNR 0
#define R_TEST_MODE__cache_enable__WIDTH 1
#define R_TEST_MODE__cache_enable__enable 1
#define R_TEST_MODE__cache_enable__disable 0

#define R_SINGLE_STEP (IO_TYPECAST_BYTE 0xb00000fe)
#define R_SINGLE_STEP__single_step__BITNR 3
#define R_SINGLE_STEP__single_step__WIDTH 1
#define R_SINGLE_STEP__single_step__on 1
#define R_SINGLE_STEP__single_step__off 0
#define R_SINGLE_STEP__step_wr__BITNR 2
#define R_SINGLE_STEP__step_wr__WIDTH 1
#define R_SINGLE_STEP__step_wr__on 1
#define R_SINGLE_STEP__step_wr__off 0
#define R_SINGLE_STEP__step_rd__BITNR 1
#define R_SINGLE_STEP__step_rd__WIDTH 1
#define R_SINGLE_STEP__step_rd__on 1
#define R_SINGLE_STEP__step_rd__off 0
#define R_SINGLE_STEP__step_fetch__BITNR 0
#define R_SINGLE_STEP__step_fetch__WIDTH 1
#define R_SINGLE_STEP__step_fetch__on 1
#define R_SINGLE_STEP__step_fetch__off 0

/*
!* USB interface control registers
!*/

#define R_USB_REVISION (IO_TYPECAST_RO_BYTE 0xb0000200)
#define R_USB_REVISION__major__BITNR 4
#define R_USB_REVISION__major__WIDTH 4
#define R_USB_REVISION__minor__BITNR 0
#define R_USB_REVISION__minor__WIDTH 4

#define R_USB_COMMAND (IO_TYPECAST_BYTE 0xb0000201)
#define R_USB_COMMAND__port_sel__BITNR 6
#define R_USB_COMMAND__port_sel__WIDTH 2
#define R_USB_COMMAND__port_sel__nop 0
#define R_USB_COMMAND__port_sel__port1 1
#define R_USB_COMMAND__port_sel__port2 2
#define R_USB_COMMAND__port_sel__both 3
#define R_USB_COMMAND__port_cmd__BITNR 4
#define R_USB_COMMAND__port_cmd__WIDTH 2
#define R_USB_COMMAND__port_cmd__reset 0
#define R_USB_COMMAND__port_cmd__disable 1
#define R_USB_COMMAND__port_cmd__suspend 2
#define R_USB_COMMAND__port_cmd__resume 3
#define R_USB_COMMAND__busy__BITNR 3
#define R_USB_COMMAND__busy__WIDTH 1
#define R_USB_COMMAND__busy__no 0
#define R_USB_COMMAND__busy__yes 1
#define R_USB_COMMAND__ctrl_cmd__BITNR 0
#define R_USB_COMMAND__ctrl_cmd__WIDTH 3
#define R_USB_COMMAND__ctrl_cmd__nop 0
#define R_USB_COMMAND__ctrl_cmd__reset 1
#define R_USB_COMMAND__ctrl_cmd__deconfig 2
#define R_USB_COMMAND__ctrl_cmd__host_config 3
#define R_USB_COMMAND__ctrl_cmd__dev_config 4
#define R_USB_COMMAND__ctrl_cmd__host_nop 5
#define R_USB_COMMAND__ctrl_cmd__host_run 6
#define R_USB_COMMAND__ctrl_cmd__host_stop 7

#define R_USB_COMMAND_DEV (IO_TYPECAST_BYTE 0xb0000201)
#define R_USB_COMMAND_DEV__port_sel__BITNR 6
#define R_USB_COMMAND_DEV__port_sel__WIDTH 2
#define R_USB_COMMAND_DEV__port_sel__nop 0
#define R_USB_COMMAND_DEV__port_sel__dummy1 1
#define R_USB_COMMAND_DEV__port_sel__dummy2 2
#define R_USB_COMMAND_DEV__port_sel__any 3
#define R_USB_COMMAND_DEV__port_cmd__BITNR 4
#define R_USB_COMMAND_DEV__port_cmd__WIDTH 2
#define R_USB_COMMAND_DEV__port_cmd__active 0
#define R_USB_COMMAND_DEV__port_cmd__passive 1
#define R_USB_COMMAND_DEV__port_cmd__nop 2
#define R_USB_COMMAND_DEV__port_cmd__wakeup 3
#define R_USB_COMMAND_DEV__busy__BITNR 3
#define R_USB_COMMAND_DEV__busy__WIDTH 1
#define R_USB_COMMAND_DEV__busy__no 0
#define R_USB_COMMAND_DEV__busy__yes 1
#define R_USB_COMMAND_DEV__ctrl_cmd__BITNR 0
#define R_USB_COMMAND_DEV__ctrl_cmd__WIDTH 3
#define R_USB_COMMAND_DEV__ctrl_cmd__nop 0
#define R_USB_COMMAND_DEV__ctrl_cmd__reset 1
#define R_USB_COMMAND_DEV__ctrl_cmd__deconfig 2
#define R_USB_COMMAND_DEV__ctrl_cmd__host_config 3
#define R_USB_COMMAND_DEV__ctrl_cmd__dev_config 4
#define R_USB_COMMAND_DEV__ctrl_cmd__dev_active 5
#define R_USB_COMMAND_DEV__ctrl_cmd__dev_passive 6
#define R_USB_COMMAND_DEV__ctrl_cmd__dev_nop 7

#define R_USB_STATUS (IO_TYPECAST_RO_BYTE 0xb0000202)
#define R_USB_STATUS__ourun__BITNR 5
#define R_USB_STATUS__ourun__WIDTH 1
#define R_USB_STATUS__ourun__no 0
#define R_USB_STATUS__ourun__yes 1
#define R_USB_STATUS__perror__BITNR 4
#define R_USB_STATUS__perror__WIDTH 1
#define R_USB_STATUS__perror__no 0
#define R_USB_STATUS__perror__yes 1
#define R_USB_STATUS__device_mode__BITNR 3
#define R_USB_STATUS__device_mode__WIDTH 1
#define R_USB_STATUS__device_mode__no 0
#define R_USB_STATUS__device_mode__yes 1
#define R_USB_STATUS__host_mode__BITNR 2
#define R_USB_STATUS__host_mode__WIDTH 1
#define R_USB_STATUS__host_mode__no 0
#define R_USB_STATUS__host_mode__yes 1
#define R_USB_STATUS__started__BITNR 1
#define R_USB_STATUS__started__WIDTH 1
#define R_USB_STATUS__started__no 0
#define R_USB_STATUS__started__yes 1
#define R_USB_STATUS__running__BITNR 0
#define R_USB_STATUS__running__WIDTH 1
#define R_USB_STATUS__running__no 0
#define R_USB_STATUS__running__yes 1

#define R_USB_IRQ_MASK_SET (IO_TYPECAST_UWORD 0xb0000204)
#define R_USB_IRQ_MASK_SET__iso_eof__BITNR 13
#define R_USB_IRQ_MASK_SET__iso_eof__WIDTH 1
#define R_USB_IRQ_MASK_SET__iso_eof__nop 0
#define R_USB_IRQ_MASK_SET__iso_eof__set 1
#define R_USB_IRQ_MASK_SET__intr_eof__BITNR 12
#define R_USB_IRQ_MASK_SET__intr_eof__WIDTH 1
#define R_USB_IRQ_MASK_SET__intr_eof__nop 0
#define R_USB_IRQ_MASK_SET__intr_eof__set 1
#define R_USB_IRQ_MASK_SET__iso_eot__BITNR 11
#define R_USB_IRQ_MASK_SET__iso_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET__iso_eot__nop 0
#define R_USB_IRQ_MASK_SET__iso_eot__set 1
#define R_USB_IRQ_MASK_SET__intr_eot__BITNR 10
#define R_USB_IRQ_MASK_SET__intr_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET__intr_eot__nop 0
#define R_USB_IRQ_MASK_SET__intr_eot__set 1
#define R_USB_IRQ_MASK_SET__ctl_eot__BITNR 9
#define R_USB_IRQ_MASK_SET__ctl_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET__ctl_eot__nop 0
#define R_USB_IRQ_MASK_SET__ctl_eot__set 1
#define R_USB_IRQ_MASK_SET__bulk_eot__BITNR 8
#define R_USB_IRQ_MASK_SET__bulk_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET__bulk_eot__nop 0
#define R_USB_IRQ_MASK_SET__bulk_eot__set 1
#define R_USB_IRQ_MASK_SET__epid_attn__BITNR 3
#define R_USB_IRQ_MASK_SET__epid_attn__WIDTH 1
#define R_USB_IRQ_MASK_SET__epid_attn__nop 0
#define R_USB_IRQ_MASK_SET__epid_attn__set 1
#define R_USB_IRQ_MASK_SET__sof__BITNR 2
#define R_USB_IRQ_MASK_SET__sof__WIDTH 1
#define R_USB_IRQ_MASK_SET__sof__nop 0
#define R_USB_IRQ_MASK_SET__sof__set 1
#define R_USB_IRQ_MASK_SET__port_status__BITNR 1
#define R_USB_IRQ_MASK_SET__port_status__WIDTH 1
#define R_USB_IRQ_MASK_SET__port_status__nop 0
#define R_USB_IRQ_MASK_SET__port_status__set 1
#define R_USB_IRQ_MASK_SET__ctl_status__BITNR 0
#define R_USB_IRQ_MASK_SET__ctl_status__WIDTH 1
#define R_USB_IRQ_MASK_SET__ctl_status__nop 0
#define R_USB_IRQ_MASK_SET__ctl_status__set 1

#define R_USB_IRQ_MASK_READ (IO_TYPECAST_RO_UWORD 0xb0000204)
#define R_USB_IRQ_MASK_READ__iso_eof__BITNR 13
#define R_USB_IRQ_MASK_READ__iso_eof__WIDTH 1
#define R_USB_IRQ_MASK_READ__iso_eof__no_pend 0
#define R_USB_IRQ_MASK_READ__iso_eof__pend 1
#define R_USB_IRQ_MASK_READ__intr_eof__BITNR 12
#define R_USB_IRQ_MASK_READ__intr_eof__WIDTH 1
#define R_USB_IRQ_MASK_READ__intr_eof__no_pend 0
#define R_USB_IRQ_MASK_READ__intr_eof__pend 1
#define R_USB_IRQ_MASK_READ__iso_eot__BITNR 11
#define R_USB_IRQ_MASK_READ__iso_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ__iso_eot__no_pend 0
#define R_USB_IRQ_MASK_READ__iso_eot__pend 1
#define R_USB_IRQ_MASK_READ__intr_eot__BITNR 10
#define R_USB_IRQ_MASK_READ__intr_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ__intr_eot__no_pend 0
#define R_USB_IRQ_MASK_READ__intr_eot__pend 1
#define R_USB_IRQ_MASK_READ__ctl_eot__BITNR 9
#define R_USB_IRQ_MASK_READ__ctl_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ__ctl_eot__no_pend 0
#define R_USB_IRQ_MASK_READ__ctl_eot__pend 1
#define R_USB_IRQ_MASK_READ__bulk_eot__BITNR 8
#define R_USB_IRQ_MASK_READ__bulk_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ__bulk_eot__no_pend 0
#define R_USB_IRQ_MASK_READ__bulk_eot__pend 1
#define R_USB_IRQ_MASK_READ__epid_attn__BITNR 3
#define R_USB_IRQ_MASK_READ__epid_attn__WIDTH 1
#define R_USB_IRQ_MASK_READ__epid_attn__no_pend 0
#define R_USB_IRQ_MASK_READ__epid_attn__pend 1
#define R_USB_IRQ_MASK_READ__sof__BITNR 2
#define R_USB_IRQ_MASK_READ__sof__WIDTH 1
#define R_USB_IRQ_MASK_READ__sof__no_pend 0
#define R_USB_IRQ_MASK_READ__sof__pend 1
#define R_USB_IRQ_MASK_READ__port_status__BITNR 1
#define R_USB_IRQ_MASK_READ__port_status__WIDTH 1
#define R_USB_IRQ_MASK_READ__port_status__no_pend 0
#define R_USB_IRQ_MASK_READ__port_status__pend 1
#define R_USB_IRQ_MASK_READ__ctl_status__BITNR 0
#define R_USB_IRQ_MASK_READ__ctl_status__WIDTH 1
#define R_USB_IRQ_MASK_READ__ctl_status__no_pend 0
#define R_USB_IRQ_MASK_READ__ctl_status__pend 1

#define R_USB_IRQ_MASK_CLR (IO_TYPECAST_UWORD 0xb0000206)
#define R_USB_IRQ_MASK_CLR__iso_eof__BITNR 13
#define R_USB_IRQ_MASK_CLR__iso_eof__WIDTH 1
#define R_USB_IRQ_MASK_CLR__iso_eof__nop 0
#define R_USB_IRQ_MASK_CLR__iso_eof__clr 1
#define R_USB_IRQ_MASK_CLR__intr_eof__BITNR 12
#define R_USB_IRQ_MASK_CLR__intr_eof__WIDTH 1
#define R_USB_IRQ_MASK_CLR__intr_eof__nop 0
#define R_USB_IRQ_MASK_CLR__intr_eof__clr 1
#define R_USB_IRQ_MASK_CLR__iso_eot__BITNR 11
#define R_USB_IRQ_MASK_CLR__iso_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR__iso_eot__nop 0
#define R_USB_IRQ_MASK_CLR__iso_eot__clr 1
#define R_USB_IRQ_MASK_CLR__intr_eot__BITNR 10
#define R_USB_IRQ_MASK_CLR__intr_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR__intr_eot__nop 0
#define R_USB_IRQ_MASK_CLR__intr_eot__clr 1
#define R_USB_IRQ_MASK_CLR__ctl_eot__BITNR 9
#define R_USB_IRQ_MASK_CLR__ctl_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR__ctl_eot__nop 0
#define R_USB_IRQ_MASK_CLR__ctl_eot__clr 1
#define R_USB_IRQ_MASK_CLR__bulk_eot__BITNR 8
#define R_USB_IRQ_MASK_CLR__bulk_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR__bulk_eot__nop 0
#define R_USB_IRQ_MASK_CLR__bulk_eot__clr 1
#define R_USB_IRQ_MASK_CLR__epid_attn__BITNR 3
#define R_USB_IRQ_MASK_CLR__epid_attn__WIDTH 1
#define R_USB_IRQ_MASK_CLR__epid_attn__nop 0
#define R_USB_IRQ_MASK_CLR__epid_attn__clr 1
#define R_USB_IRQ_MASK_CLR__sof__BITNR 2
#define R_USB_IRQ_MASK_CLR__sof__WIDTH 1
#define R_USB_IRQ_MASK_CLR__sof__nop 0
#define R_USB_IRQ_MASK_CLR__sof__clr 1
#define R_USB_IRQ_MASK_CLR__port_status__BITNR 1
#define R_USB_IRQ_MASK_CLR__port_status__WIDTH 1
#define R_USB_IRQ_MASK_CLR__port_status__nop 0
#define R_USB_IRQ_MASK_CLR__port_status__clr 1
#define R_USB_IRQ_MASK_CLR__ctl_status__BITNR 0
#define R_USB_IRQ_MASK_CLR__ctl_status__WIDTH 1
#define R_USB_IRQ_MASK_CLR__ctl_status__nop 0
#define R_USB_IRQ_MASK_CLR__ctl_status__clr 1

#define R_USB_IRQ_READ (IO_TYPECAST_RO_UWORD 0xb0000206)
#define R_USB_IRQ_READ__iso_eof__BITNR 13
#define R_USB_IRQ_READ__iso_eof__WIDTH 1
#define R_USB_IRQ_READ__iso_eof__no_pend 0
#define R_USB_IRQ_READ__iso_eof__pend 1
#define R_USB_IRQ_READ__intr_eof__BITNR 12
#define R_USB_IRQ_READ__intr_eof__WIDTH 1
#define R_USB_IRQ_READ__intr_eof__no_pend 0
#define R_USB_IRQ_READ__intr_eof__pend 1
#define R_USB_IRQ_READ__iso_eot__BITNR 11
#define R_USB_IRQ_READ__iso_eot__WIDTH 1
#define R_USB_IRQ_READ__iso_eot__no_pend 0
#define R_USB_IRQ_READ__iso_eot__pend 1
#define R_USB_IRQ_READ__intr_eot__BITNR 10
#define R_USB_IRQ_READ__intr_eot__WIDTH 1
#define R_USB_IRQ_READ__intr_eot__no_pend 0
#define R_USB_IRQ_READ__intr_eot__pend 1
#define R_USB_IRQ_READ__ctl_eot__BITNR 9
#define R_USB_IRQ_READ__ctl_eot__WIDTH 1
#define R_USB_IRQ_READ__ctl_eot__no_pend 0
#define R_USB_IRQ_READ__ctl_eot__pend 1
#define R_USB_IRQ_READ__bulk_eot__BITNR 8
#define R_USB_IRQ_READ__bulk_eot__WIDTH 1
#define R_USB_IRQ_READ__bulk_eot__no_pend 0
#define R_USB_IRQ_READ__bulk_eot__pend 1
#define R_USB_IRQ_READ__epid_attn__BITNR 3
#define R_USB_IRQ_READ__epid_attn__WIDTH 1
#define R_USB_IRQ_READ__epid_attn__no_pend 0
#define R_USB_IRQ_READ__epid_attn__pend 1
#define R_USB_IRQ_READ__sof__BITNR 2
#define R_USB_IRQ_READ__sof__WIDTH 1
#define R_USB_IRQ_READ__sof__no_pend 0
#define R_USB_IRQ_READ__sof__pend 1
#define R_USB_IRQ_READ__port_status__BITNR 1
#define R_USB_IRQ_READ__port_status__WIDTH 1
#define R_USB_IRQ_READ__port_status__no_pend 0
#define R_USB_IRQ_READ__port_status__pend 1
#define R_USB_IRQ_READ__ctl_status__BITNR 0
#define R_USB_IRQ_READ__ctl_status__WIDTH 1
#define R_USB_IRQ_READ__ctl_status__no_pend 0
#define R_USB_IRQ_READ__ctl_status__pend 1

#define R_USB_IRQ_MASK_SET_DEV (IO_TYPECAST_UWORD 0xb0000204)
#define R_USB_IRQ_MASK_SET_DEV__out_eot__BITNR 12
#define R_USB_IRQ_MASK_SET_DEV__out_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__out_eot__nop 0
#define R_USB_IRQ_MASK_SET_DEV__out_eot__set 1
#define R_USB_IRQ_MASK_SET_DEV__ep3_in_eot__BITNR 11
#define R_USB_IRQ_MASK_SET_DEV__ep3_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__ep3_in_eot__nop 0
#define R_USB_IRQ_MASK_SET_DEV__ep3_in_eot__set 1
#define R_USB_IRQ_MASK_SET_DEV__ep2_in_eot__BITNR 10
#define R_USB_IRQ_MASK_SET_DEV__ep2_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__ep2_in_eot__nop 0
#define R_USB_IRQ_MASK_SET_DEV__ep2_in_eot__set 1
#define R_USB_IRQ_MASK_SET_DEV__ep1_in_eot__BITNR 9
#define R_USB_IRQ_MASK_SET_DEV__ep1_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__ep1_in_eot__nop 0
#define R_USB_IRQ_MASK_SET_DEV__ep1_in_eot__set 1
#define R_USB_IRQ_MASK_SET_DEV__ep0_in_eot__BITNR 8
#define R_USB_IRQ_MASK_SET_DEV__ep0_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__ep0_in_eot__nop 0
#define R_USB_IRQ_MASK_SET_DEV__ep0_in_eot__set 1
#define R_USB_IRQ_MASK_SET_DEV__epid_attn__BITNR 3
#define R_USB_IRQ_MASK_SET_DEV__epid_attn__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__epid_attn__nop 0
#define R_USB_IRQ_MASK_SET_DEV__epid_attn__set 1
#define R_USB_IRQ_MASK_SET_DEV__sof__BITNR 2
#define R_USB_IRQ_MASK_SET_DEV__sof__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__sof__nop 0
#define R_USB_IRQ_MASK_SET_DEV__sof__set 1
#define R_USB_IRQ_MASK_SET_DEV__port_status__BITNR 1
#define R_USB_IRQ_MASK_SET_DEV__port_status__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__port_status__nop 0
#define R_USB_IRQ_MASK_SET_DEV__port_status__set 1
#define R_USB_IRQ_MASK_SET_DEV__ctl_status__BITNR 0
#define R_USB_IRQ_MASK_SET_DEV__ctl_status__WIDTH 1
#define R_USB_IRQ_MASK_SET_DEV__ctl_status__nop 0
#define R_USB_IRQ_MASK_SET_DEV__ctl_status__set 1

#define R_USB_IRQ_MASK_READ_DEV (IO_TYPECAST_RO_UWORD 0xb0000204)
#define R_USB_IRQ_MASK_READ_DEV__out_eot__BITNR 12
#define R_USB_IRQ_MASK_READ_DEV__out_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__out_eot__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__out_eot__pend 1
#define R_USB_IRQ_MASK_READ_DEV__ep3_in_eot__BITNR 11
#define R_USB_IRQ_MASK_READ_DEV__ep3_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__ep3_in_eot__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__ep3_in_eot__pend 1
#define R_USB_IRQ_MASK_READ_DEV__ep2_in_eot__BITNR 10
#define R_USB_IRQ_MASK_READ_DEV__ep2_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__ep2_in_eot__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__ep2_in_eot__pend 1
#define R_USB_IRQ_MASK_READ_DEV__ep1_in_eot__BITNR 9
#define R_USB_IRQ_MASK_READ_DEV__ep1_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__ep1_in_eot__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__ep1_in_eot__pend 1
#define R_USB_IRQ_MASK_READ_DEV__ep0_in_eot__BITNR 8
#define R_USB_IRQ_MASK_READ_DEV__ep0_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__ep0_in_eot__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__ep0_in_eot__pend 1
#define R_USB_IRQ_MASK_READ_DEV__epid_attn__BITNR 3
#define R_USB_IRQ_MASK_READ_DEV__epid_attn__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__epid_attn__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__epid_attn__pend 1
#define R_USB_IRQ_MASK_READ_DEV__sof__BITNR 2
#define R_USB_IRQ_MASK_READ_DEV__sof__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__sof__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__sof__pend 1
#define R_USB_IRQ_MASK_READ_DEV__port_status__BITNR 1
#define R_USB_IRQ_MASK_READ_DEV__port_status__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__port_status__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__port_status__pend 1
#define R_USB_IRQ_MASK_READ_DEV__ctl_status__BITNR 0
#define R_USB_IRQ_MASK_READ_DEV__ctl_status__WIDTH 1
#define R_USB_IRQ_MASK_READ_DEV__ctl_status__no_pend 0
#define R_USB_IRQ_MASK_READ_DEV__ctl_status__pend 1

#define R_USB_IRQ_MASK_CLR_DEV (IO_TYPECAST_UWORD 0xb0000206)
#define R_USB_IRQ_MASK_CLR_DEV__out_eot__BITNR 12
#define R_USB_IRQ_MASK_CLR_DEV__out_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__out_eot__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__out_eot__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__ep3_in_eot__BITNR 11
#define R_USB_IRQ_MASK_CLR_DEV__ep3_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__ep3_in_eot__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__ep3_in_eot__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__ep2_in_eot__BITNR 10
#define R_USB_IRQ_MASK_CLR_DEV__ep2_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__ep2_in_eot__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__ep2_in_eot__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__ep1_in_eot__BITNR 9
#define R_USB_IRQ_MASK_CLR_DEV__ep1_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__ep1_in_eot__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__ep1_in_eot__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__ep0_in_eot__BITNR 8
#define R_USB_IRQ_MASK_CLR_DEV__ep0_in_eot__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__ep0_in_eot__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__ep0_in_eot__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__epid_attn__BITNR 3
#define R_USB_IRQ_MASK_CLR_DEV__epid_attn__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__epid_attn__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__epid_attn__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__sof__BITNR 2
#define R_USB_IRQ_MASK_CLR_DEV__sof__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__sof__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__sof__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__port_status__BITNR 1
#define R_USB_IRQ_MASK_CLR_DEV__port_status__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__port_status__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__port_status__clr 1
#define R_USB_IRQ_MASK_CLR_DEV__ctl_status__BITNR 0
#define R_USB_IRQ_MASK_CLR_DEV__ctl_status__WIDTH 1
#define R_USB_IRQ_MASK_CLR_DEV__ctl_status__nop 0
#define R_USB_IRQ_MASK_CLR_DEV__ctl_status__clr 1

#define R_USB_IRQ_READ_DEV (IO_TYPECAST_RO_UWORD 0xb0000206)
#define R_USB_IRQ_READ_DEV__out_eot__BITNR 12
#define R_USB_IRQ_READ_DEV__out_eot__WIDTH 1
#define R_USB_IRQ_READ_DEV__out_eot__no_pend 0
#define R_USB_IRQ_READ_DEV__out_eot__pend 1
#define R_USB_IRQ_READ_DEV__ep3_in_eot__BITNR 11
#define R_USB_IRQ_READ_DEV__ep3_in_eot__WIDTH 1
#define R_USB_IRQ_READ_DEV__ep3_in_eot__no_pend 0
#define R_USB_IRQ_READ_DEV__ep3_in_eot__pend 1
#define R_USB_IRQ_READ_DEV__ep2_in_eot__BITNR 10
#define R_USB_IRQ_READ_DEV__ep2_in_eot__WIDTH 1
#define R_USB_IRQ_READ_DEV__ep2_in_eot__no_pend 0
#define R_USB_IRQ_READ_DEV__ep2_in_eot__pend 1
#define R_USB_IRQ_READ_DEV__ep1_in_eot__BITNR 9
#define R_USB_IRQ_READ_DEV__ep1_in_eot__WIDTH 1
#define R_USB_IRQ_READ_DEV__ep1_in_eot__no_pend 0
#define R_USB_IRQ_READ_DEV__ep1_in_eot__pend 1
#define R_USB_IRQ_READ_DEV__ep0_in_eot__BITNR 8
#define R_USB_IRQ_READ_DEV__ep0_in_eot__WIDTH 1
#define R_USB_IRQ_READ_DEV__ep0_in_eot__no_pend 0
#define R_USB_IRQ_READ_DEV__ep0_in_eot__pend 1
#define R_USB_IRQ_READ_DEV__epid_attn__BITNR 3
#define R_USB_IRQ_READ_DEV__epid_attn__WIDTH 1
#define R_USB_IRQ_READ_DEV__epid_attn__no_pend 0
#define R_USB_IRQ_READ_DEV__epid_attn__pend 1
#define R_USB_IRQ_READ_DEV__sof__BITNR 2
#define R_USB_IRQ_READ_DEV__sof__WIDTH 1
#define R_USB_IRQ_READ_DEV__sof__no_pend 0
#define R_USB_IRQ_READ_DEV__sof__pend 1
#define R_USB_IRQ_READ_DEV__port_status__BITNR 1
#define R_USB_IRQ_READ_DEV__port_status__WIDTH 1
#define R_USB_IRQ_READ_DEV__port_status__no_pend 0
#define R_USB_IRQ_READ_DEV__port_status__pend 1
#define R_USB_IRQ_READ_DEV__ctl_status__BITNR 0
#define R_USB_IRQ_READ_DEV__ctl_status__WIDTH 1
#define R_USB_IRQ_READ_DEV__ctl_status__no_pend 0
#define R_USB_IRQ_READ_DEV__ctl_status__pend 1

#define R_USB_FM_NUMBER (IO_TYPECAST_UDWORD 0xb000020c)
#define R_USB_FM_NUMBER__value__BITNR 0
#define R_USB_FM_NUMBER__value__WIDTH 32

#define R_USB_FM_INTERVAL (IO_TYPECAST_UWORD 0xb0000210)
#define R_USB_FM_INTERVAL__fixed__BITNR 6
#define R_USB_FM_INTERVAL__fixed__WIDTH 8
#define R_USB_FM_INTERVAL__adj__BITNR 0
#define R_USB_FM_INTERVAL__adj__WIDTH 6

#define R_USB_FM_REMAINING (IO_TYPECAST_RO_UWORD 0xb0000212)
#define R_USB_FM_REMAINING__value__BITNR 0
#define R_USB_FM_REMAINING__value__WIDTH 14

#define R_USB_FM_PSTART (IO_TYPECAST_UWORD 0xb0000214)
#define R_USB_FM_PSTART__value__BITNR 0
#define R_USB_FM_PSTART__value__WIDTH 14

#define R_USB_RH_STATUS (IO_TYPECAST_RO_BYTE 0xb0000203)
#define R_USB_RH_STATUS__babble2__BITNR 7
#define R_USB_RH_STATUS__babble2__WIDTH 1
#define R_USB_RH_STATUS__babble2__no 0
#define R_USB_RH_STATUS__babble2__yes 1
#define R_USB_RH_STATUS__babble1__BITNR 6
#define R_USB_RH_STATUS__babble1__WIDTH 1
#define R_USB_RH_STATUS__babble1__no 0
#define R_USB_RH_STATUS__babble1__yes 1
#define R_USB_RH_STATUS__bus1__BITNR 4
#define R_USB_RH_STATUS__bus1__WIDTH 2
#define R_USB_RH_STATUS__bus1__SE0 0
#define R_USB_RH_STATUS__bus1__Diff0 1
#define R_USB_RH_STATUS__bus1__Diff1 2
#define R_USB_RH_STATUS__bus1__SE1 3
#define R_USB_RH_STATUS__bus2__BITNR 2
#define R_USB_RH_STATUS__bus2__WIDTH 2
#define R_USB_RH_STATUS__bus2__SE0 0
#define R_USB_RH_STATUS__bus2__Diff0 1
#define R_USB_RH_STATUS__bus2__Diff1 2
#define R_USB_RH_STATUS__bus2__SE1 3
#define R_USB_RH_STATUS__nports__BITNR 0
#define R_USB_RH_STATUS__nports__WIDTH 2

#define R_USB_RH_PORT_STATUS_1 (IO_TYPECAST_RO_UWORD 0xb0000218)
#define R_USB_RH_PORT_STATUS_1__speed__BITNR 9
#define R_USB_RH_PORT_STATUS_1__speed__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__speed__full 0
#define R_USB_RH_PORT_STATUS_1__speed__low 1
#define R_USB_RH_PORT_STATUS_1__power__BITNR 8
#define R_USB_RH_PORT_STATUS_1__power__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__reset__BITNR 4
#define R_USB_RH_PORT_STATUS_1__reset__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__reset__no 0
#define R_USB_RH_PORT_STATUS_1__reset__yes 1
#define R_USB_RH_PORT_STATUS_1__overcurrent__BITNR 3
#define R_USB_RH_PORT_STATUS_1__overcurrent__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__overcurrent__no 0
#define R_USB_RH_PORT_STATUS_1__overcurrent__yes 1
#define R_USB_RH_PORT_STATUS_1__suspended__BITNR 2
#define R_USB_RH_PORT_STATUS_1__suspended__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__suspended__no 0
#define R_USB_RH_PORT_STATUS_1__suspended__yes 1
#define R_USB_RH_PORT_STATUS_1__enabled__BITNR 1
#define R_USB_RH_PORT_STATUS_1__enabled__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__enabled__no 0
#define R_USB_RH_PORT_STATUS_1__enabled__yes 1
#define R_USB_RH_PORT_STATUS_1__connected__BITNR 0
#define R_USB_RH_PORT_STATUS_1__connected__WIDTH 1
#define R_USB_RH_PORT_STATUS_1__connected__no 0
#define R_USB_RH_PORT_STATUS_1__connected__yes 1

#define R_USB_RH_PORT_STATUS_2 (IO_TYPECAST_RO_UWORD 0xb000021a)
#define R_USB_RH_PORT_STATUS_2__speed__BITNR 9
#define R_USB_RH_PORT_STATUS_2__speed__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__speed__full 0
#define R_USB_RH_PORT_STATUS_2__speed__low 1
#define R_USB_RH_PORT_STATUS_2__power__BITNR 8
#define R_USB_RH_PORT_STATUS_2__power__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__reset__BITNR 4
#define R_USB_RH_PORT_STATUS_2__reset__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__reset__no 0
#define R_USB_RH_PORT_STATUS_2__reset__yes 1
#define R_USB_RH_PORT_STATUS_2__overcurrent__BITNR 3
#define R_USB_RH_PORT_STATUS_2__overcurrent__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__overcurrent__no 0
#define R_USB_RH_PORT_STATUS_2__overcurrent__yes 1
#define R_USB_RH_PORT_STATUS_2__suspended__BITNR 2
#define R_USB_RH_PORT_STATUS_2__suspended__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__suspended__no 0
#define R_USB_RH_PORT_STATUS_2__suspended__yes 1
#define R_USB_RH_PORT_STATUS_2__enabled__BITNR 1
#define R_USB_RH_PORT_STATUS_2__enabled__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__enabled__no 0
#define R_USB_RH_PORT_STATUS_2__enabled__yes 1
#define R_USB_RH_PORT_STATUS_2__connected__BITNR 0
#define R_USB_RH_PORT_STATUS_2__connected__WIDTH 1
#define R_USB_RH_PORT_STATUS_2__connected__no 0
#define R_USB_RH_PORT_STATUS_2__connected__yes 1

#define R_USB_EPT_INDEX (IO_TYPECAST_BYTE 0xb0000208)
#define R_USB_EPT_INDEX__value__BITNR 0
#define R_USB_EPT_INDEX__value__WIDTH 5

#define R_USB_EPT_DATA (IO_TYPECAST_UDWORD 0xb000021c)
#define R_USB_EPT_DATA__valid__BITNR 31
#define R_USB_EPT_DATA__valid__WIDTH 1
#define R_USB_EPT_DATA__valid__no 0
#define R_USB_EPT_DATA__valid__yes 1
#define R_USB_EPT_DATA__hold__BITNR 30
#define R_USB_EPT_DATA__hold__WIDTH 1
#define R_USB_EPT_DATA__hold__no 0
#define R_USB_EPT_DATA__hold__yes 1
#define R_USB_EPT_DATA__error_count_in__BITNR 28
#define R_USB_EPT_DATA__error_count_in__WIDTH 2
#define R_USB_EPT_DATA__t_in__BITNR 27
#define R_USB_EPT_DATA__t_in__WIDTH 1
#define R_USB_EPT_DATA__low_speed__BITNR 26
#define R_USB_EPT_DATA__low_speed__WIDTH 1
#define R_USB_EPT_DATA__low_speed__no 0
#define R_USB_EPT_DATA__low_speed__yes 1
#define R_USB_EPT_DATA__port__BITNR 24
#define R_USB_EPT_DATA__port__WIDTH 2
#define R_USB_EPT_DATA__port__any 0
#define R_USB_EPT_DATA__port__p1 1
#define R_USB_EPT_DATA__port__p2 2
#define R_USB_EPT_DATA__port__undef 3
#define R_USB_EPT_DATA__error_code__BITNR 22
#define R_USB_EPT_DATA__error_code__WIDTH 2
#define R_USB_EPT_DATA__error_code__no_error 0
#define R_USB_EPT_DATA__error_code__stall 1
#define R_USB_EPT_DATA__error_code__bus_error 2
#define R_USB_EPT_DATA__error_code__buffer_error 3
#define R_USB_EPT_DATA__t_out__BITNR 21
#define R_USB_EPT_DATA__t_out__WIDTH 1
#define R_USB_EPT_DATA__error_count_out__BITNR 19
#define R_USB_EPT_DATA__error_count_out__WIDTH 2
#define R_USB_EPT_DATA__max_len__BITNR 11
#define R_USB_EPT_DATA__max_len__WIDTH 7
#define R_USB_EPT_DATA__ep__BITNR 7
#define R_USB_EPT_DATA__ep__WIDTH 4
#define R_USB_EPT_DATA__dev__BITNR 0
#define R_USB_EPT_DATA__dev__WIDTH 7

#define R_USB_EPT_DATA_ISO (IO_TYPECAST_UDWORD 0xb000021c)
#define R_USB_EPT_DATA_ISO__valid__BITNR 31
#define R_USB_EPT_DATA_ISO__valid__WIDTH 1
#define R_USB_EPT_DATA_ISO__valid__no 0
#define R_USB_EPT_DATA_ISO__valid__yes 1
#define R_USB_EPT_DATA_ISO__port__BITNR 24
#define R_USB_EPT_DATA_ISO__port__WIDTH 2
#define R_USB_EPT_DATA_ISO__port__any 0
#define R_USB_EPT_DATA_ISO__port__p1 1
#define R_USB_EPT_DATA_ISO__port__p2 2
#define R_USB_EPT_DATA_ISO__port__undef 3
#define R_USB_EPT_DATA_ISO__error_code__BITNR 22
#define R_USB_EPT_DATA_ISO__error_code__WIDTH 2
#define R_USB_EPT_DATA_ISO__error_code__no_error 0
#define R_USB_EPT_DATA_ISO__error_code__stall 1
#define R_USB_EPT_DATA_ISO__error_code__bus_error 2
#define R_USB_EPT_DATA_ISO__error_code__TBD3 3
#define R_USB_EPT_DATA_ISO__max_len__BITNR 11
#define R_USB_EPT_DATA_ISO__max_len__WIDTH 10
#define R_USB_EPT_DATA_ISO__ep__BITNR 7
#define R_USB_EPT_DATA_ISO__ep__WIDTH 4
#define R_USB_EPT_DATA_ISO__dev__BITNR 0
#define R_USB_EPT_DATA_ISO__dev__WIDTH 7

#define R_USB_EPT_DATA_DEV (IO_TYPECAST_UDWORD 0xb000021c)
#define R_USB_EPT_DATA_DEV__valid__BITNR 31
#define R_USB_EPT_DATA_DEV__valid__WIDTH 1
#define R_USB_EPT_DATA_DEV__valid__no 0
#define R_USB_EPT_DATA_DEV__valid__yes 1
#define R_USB_EPT_DATA_DEV__hold__BITNR 30
#define R_USB_EPT_DATA_DEV__hold__WIDTH 1
#define R_USB_EPT_DATA_DEV__hold__no 0
#define R_USB_EPT_DATA_DEV__hold__yes 1
#define R_USB_EPT_DATA_DEV__stall__BITNR 29
#define R_USB_EPT_DATA_DEV__stall__WIDTH 1
#define R_USB_EPT_DATA_DEV__stall__no 0
#define R_USB_EPT_DATA_DEV__stall__yes 1
#define R_USB_EPT_DATA_DEV__iso_resp__BITNR 28
#define R_USB_EPT_DATA_DEV__iso_resp__WIDTH 1
#define R_USB_EPT_DATA_DEV__iso_resp__quiet 0
#define R_USB_EPT_DATA_DEV__iso_resp__yes 1
#define R_USB_EPT_DATA_DEV__ctrl__BITNR 27
#define R_USB_EPT_DATA_DEV__ctrl__WIDTH 1
#define R_USB_EPT_DATA_DEV__ctrl__no 0
#define R_USB_EPT_DATA_DEV__ctrl__yes 1
#define R_USB_EPT_DATA_DEV__iso__BITNR 26
#define R_USB_EPT_DATA_DEV__iso__WIDTH 1
#define R_USB_EPT_DATA_DEV__iso__no 0
#define R_USB_EPT_DATA_DEV__iso__yes 1
#define R_USB_EPT_DATA_DEV__port__BITNR 24
#define R_USB_EPT_DATA_DEV__port__WIDTH 2
#define R_USB_EPT_DATA_DEV__control_phase__BITNR 22
#define R_USB_EPT_DATA_DEV__control_phase__WIDTH 1
#define R_USB_EPT_DATA_DEV__t__BITNR 21
#define R_USB_EPT_DATA_DEV__t__WIDTH 1
#define R_USB_EPT_DATA_DEV__max_len__BITNR 11
#define R_USB_EPT_DATA_DEV__max_len__WIDTH 10
#define R_USB_EPT_DATA_DEV__ep__BITNR 7
#define R_USB_EPT_DATA_DEV__ep__WIDTH 4
#define R_USB_EPT_DATA_DEV__dev__BITNR 0
#define R_USB_EPT_DATA_DEV__dev__WIDTH 7

#define R_USB_SNMP_TERROR (IO_TYPECAST_UDWORD 0xb0000220)
#define R_USB_SNMP_TERROR__value__BITNR 0
#define R_USB_SNMP_TERROR__value__WIDTH 32

#define R_USB_EPID_ATTN (IO_TYPECAST_RO_UDWORD 0xb0000224)
#define R_USB_EPID_ATTN__value__BITNR 0
#define R_USB_EPID_ATTN__value__WIDTH 32

#define R_USB_PORT1_DISABLE (IO_TYPECAST_BYTE 0xb000006a)
#define R_USB_PORT1_DISABLE__disable__BITNR 0
#define R_USB_PORT1_DISABLE__disable__WIDTH 1
#define R_USB_PORT1_DISABLE__disable__yes 0
#define R_USB_PORT1_DISABLE__disable__no 1

#define R_USB_PORT2_DISABLE (IO_TYPECAST_BYTE 0xb0000052)
#define R_USB_PORT2_DISABLE__disable__BITNR 0
#define R_USB_PORT2_DISABLE__disable__WIDTH 1
#define R_USB_PORT2_DISABLE__disable__yes 0
#define R_USB_PORT2_DISABLE__disable__no 1

/*
!* MMU registers
!*/

#define R_MMU_CONFIG (IO_TYPECAST_UDWORD 0xb0000240)
#define R_MMU_CONFIG__mmu_enable__BITNR 31
#define R_MMU_CONFIG__mmu_enable__WIDTH 1
#define R_MMU_CONFIG__mmu_enable__enable 1
#define R_MMU_CONFIG__mmu_enable__disable 0
#define R_MMU_CONFIG__inv_excp__BITNR 18
#define R_MMU_CONFIG__inv_excp__WIDTH 1
#define R_MMU_CONFIG__inv_excp__enable 1
#define R_MMU_CONFIG__inv_excp__disable 0
#define R_MMU_CONFIG__acc_excp__BITNR 17
#define R_MMU_CONFIG__acc_excp__WIDTH 1
#define R_MMU_CONFIG__acc_excp__enable 1
#define R_MMU_CONFIG__acc_excp__disable 0
#define R_MMU_CONFIG__we_excp__BITNR 16
#define R_MMU_CONFIG__we_excp__WIDTH 1
#define R_MMU_CONFIG__we_excp__enable 1
#define R_MMU_CONFIG__we_excp__disable 0
#define R_MMU_CONFIG__seg_f__BITNR 15
#define R_MMU_CONFIG__seg_f__WIDTH 1
#define R_MMU_CONFIG__seg_f__seg 1
#define R_MMU_CONFIG__seg_f__page 0
#define R_MMU_CONFIG__seg_e__BITNR 14
#define R_MMU_CONFIG__seg_e__WIDTH 1
#define R_MMU_CONFIG__seg_e__seg 1
#define R_MMU_CONFIG__seg_e__page 0
#define R_MMU_CONFIG__seg_d__BITNR 13
#define R_MMU_CONFIG__seg_d__WIDTH 1
#define R_MMU_CONFIG__seg_d__seg 1
#define R_MMU_CONFIG__seg_d__page 0
#define R_MMU_CONFIG__seg_c__BITNR 12
#define R_MMU_CONFIG__seg_c__WIDTH 1
#define R_MMU_CONFIG__seg_c__seg 1
#define R_MMU_CONFIG__seg_c__page 0
#define R_MMU_CONFIG__seg_b__BITNR 11
#define R_MMU_CONFIG__seg_b__WIDTH 1
#define R_MMU_CONFIG__seg_b__seg 1
#define R_MMU_CONFIG__seg_b__page 0
#define R_MMU_CONFIG__seg_a__BITNR 10
#define R_MMU_CONFIG__seg_a__WIDTH 1
#define R_MMU_CONFIG__seg_a__seg 1
#define R_MMU_CONFIG__seg_a__page 0
#define R_MMU_CONFIG__seg_9__BITNR 9
#define R_MMU_CONFIG__seg_9__WIDTH 1
#define R_MMU_CONFIG__seg_9__seg 1
#define R_MMU_CONFIG__seg_9__page 0
#define R_MMU_CONFIG__seg_8__BITNR 8
#define R_MMU_CONFIG__seg_8__WIDTH 1
#define R_MMU_CONFIG__seg_8__seg 1
#define R_MMU_CONFIG__seg_8__page 0
#define R_MMU_CONFIG__seg_7__BITNR 7
#define R_MMU_CONFIG__seg_7__WIDTH 1
#define R_MMU_CONFIG__seg_7__seg 1
#define R_MMU_CONFIG__seg_7__page 0
#define R_MMU_CONFIG__seg_6__BITNR 6
#define R_MMU_CONFIG__seg_6__WIDTH 1
#define R_MMU_CONFIG__seg_6__seg 1
#define R_MMU_CONFIG__seg_6__page 0
#define R_MMU_CONFIG__seg_5__BITNR 5
#define R_MMU_CONFIG__seg_5__WIDTH 1
#define R_MMU_CONFIG__seg_5__seg 1
#define R_MMU_CONFIG__seg_5__page 0
#define R_MMU_CONFIG__seg_4__BITNR 4
#define R_MMU_CONFIG__seg_4__WIDTH 1
#define R_MMU_CONFIG__seg_4__seg 1
#define R_MMU_CONFIG__seg_4__page 0
#define R_MMU_CONFIG__seg_3__BITNR 3
#define R_MMU_CONFIG__seg_3__WIDTH 1
#define R_MMU_CONFIG__seg_3__seg 1
#define R_MMU_CONFIG__seg_3__page 0
#define R_MMU_CONFIG__seg_2__BITNR 2
#define R_MMU_CONFIG__seg_2__WIDTH 1
#define R_MMU_CONFIG__seg_2__seg 1
#define R_MMU_CONFIG__seg_2__page 0
#define R_MMU_CONFIG__seg_1__BITNR 1
#define R_MMU_CONFIG__seg_1__WIDTH 1
#define R_MMU_CONFIG__seg_1__seg 1
#define R_MMU_CONFIG__seg_1__page 0
#define R_MMU_CONFIG__seg_0__BITNR 0
#define R_MMU_CONFIG__seg_0__WIDTH 1
#define R_MMU_CONFIG__seg_0__seg 1
#define R_MMU_CONFIG__seg_0__page 0

#define R_MMU_KSEG (IO_TYPECAST_UWORD 0xb0000240)
#define R_MMU_KSEG__seg_f__BITNR 15
#define R_MMU_KSEG__seg_f__WIDTH 1
#define R_MMU_KSEG__seg_f__seg 1
#define R_MMU_KSEG__seg_f__page 0
#define R_MMU_KSEG__seg_e__BITNR 14
#define R_MMU_KSEG__seg_e__WIDTH 1
#define R_MMU_KSEG__seg_e__seg 1
#define R_MMU_KSEG__seg_e__page 0
#define R_MMU_KSEG__seg_d__BITNR 13
#define R_MMU_KSEG__seg_d__WIDTH 1
#define R_MMU_KSEG__seg_d__seg 1
#define R_MMU_KSEG__seg_d__page 0
#define R_MMU_KSEG__seg_c__BITNR 12
#define R_MMU_KSEG__seg_c__WIDTH 1
#define R_MMU_KSEG__seg_c__seg 1
#define R_MMU_KSEG__seg_c__page 0
#define R_MMU_KSEG__seg_b__BITNR 11
#define R_MMU_KSEG__seg_b__WIDTH 1
#define R_MMU_KSEG__seg_b__seg 1
#define R_MMU_KSEG__seg_b__page 0
#define R_MMU_KSEG__seg_a__BITNR 10
#define R_MMU_KSEG__seg_a__WIDTH 1
#define R_MMU_KSEG__seg_a__seg 1
#define R_MMU_KSEG__seg_a__page 0
#define R_MMU_KSEG__seg_9__BITNR 9
#define R_MMU_KSEG__seg_9__WIDTH 1
#define R_MMU_KSEG__seg_9__seg 1
#define R_MMU_KSEG__seg_9__page 0
#define R_MMU_KSEG__seg_8__BITNR 8
#define R_MMU_KSEG__seg_8__WIDTH 1
#define R_MMU_KSEG__seg_8__seg 1
#define R_MMU_KSEG__seg_8__page 0
#define R_MMU_KSEG__seg_7__BITNR 7
#define R_MMU_KSEG__seg_7__WIDTH 1
#define R_MMU_KSEG__seg_7__seg 1
#define R_MMU_KSEG__seg_7__page 0
#define R_MMU_KSEG__seg_6__BITNR 6
#define R_MMU_KSEG__seg_6__WIDTH 1
#define R_MMU_KSEG__seg_6__seg 1
#define R_MMU_KSEG__seg_6__page 0
#define R_MMU_KSEG__seg_5__BITNR 5
#define R_MMU_KSEG__seg_5__WIDTH 1
#define R_MMU_KSEG__seg_5__seg 1
#define R_MMU_KSEG__seg_5__page 0
#define R_MMU_KSEG__seg_4__BITNR 4
#define R_MMU_KSEG__seg_4__WIDTH 1
#define R_MMU_KSEG__seg_4__seg 1
#define R_MMU_KSEG__seg_4__page 0
#define R_MMU_KSEG__seg_3__BITNR 3
#define R_MMU_KSEG__seg_3__WIDTH 1
#define R_MMU_KSEG__seg_3__seg 1
#define R_MMU_KSEG__seg_3__page 0
#define R_MMU_KSEG__seg_2__BITNR 2
#define R_MMU_KSEG__seg_2__WIDTH 1
#define R_MMU_KSEG__seg_2__seg 1
#define R_MMU_KSEG__seg_2__page 0
#define R_MMU_KSEG__seg_1__BITNR 1
#define R_MMU_KSEG__seg_1__WIDTH 1
#define R_MMU_KSEG__seg_1__seg 1
#define R_MMU_KSEG__seg_1__page 0
#define R_MMU_KSEG__seg_0__BITNR 0
#define R_MMU_KSEG__seg_0__WIDTH 1
#define R_MMU_KSEG__seg_0__seg 1
#define R_MMU_KSEG__seg_0__page 0

#define R_MMU_CTRL (IO_TYPECAST_BYTE 0xb0000242)
#define R_MMU_CTRL__inv_excp__BITNR 2
#define R_MMU_CTRL__inv_excp__WIDTH 1
#define R_MMU_CTRL__inv_excp__enable 1
#define R_MMU_CTRL__inv_excp__disable 0
#define R_MMU_CTRL__acc_excp__BITNR 1
#define R_MMU_CTRL__acc_excp__WIDTH 1
#define R_MMU_CTRL__acc_excp__enable 1
#define R_MMU_CTRL__acc_excp__disable 0
#define R_MMU_CTRL__we_excp__BITNR 0
#define R_MMU_CTRL__we_excp__WIDTH 1
#define R_MMU_CTRL__we_excp__enable 1
#define R_MMU_CTRL__we_excp__disable 0

#define R_MMU_ENABLE (IO_TYPECAST_BYTE 0xb0000243)
#define R_MMU_ENABLE__mmu_enable__BITNR 7
#define R_MMU_ENABLE__mmu_enable__WIDTH 1
#define R_MMU_ENABLE__mmu_enable__enable 1
#define R_MMU_ENABLE__mmu_enable__disable 0

#define R_MMU_KBASE_LO (IO_TYPECAST_UDWORD 0xb0000244)
#define R_MMU_KBASE_LO__base_7__BITNR 28
#define R_MMU_KBASE_LO__base_7__WIDTH 4
#define R_MMU_KBASE_LO__base_6__BITNR 24
#define R_MMU_KBASE_LO__base_6__WIDTH 4
#define R_MMU_KBASE_LO__base_5__BITNR 20
#define R_MMU_KBASE_LO__base_5__WIDTH 4
#define R_MMU_KBASE_LO__base_4__BITNR 16
#define R_MMU_KBASE_LO__base_4__WIDTH 4
#define R_MMU_KBASE_LO__base_3__BITNR 12
#define R_MMU_KBASE_LO__base_3__WIDTH 4
#define R_MMU_KBASE_LO__base_2__BITNR 8
#define R_MMU_KBASE_LO__base_2__WIDTH 4
#define R_MMU_KBASE_LO__base_1__BITNR 4
#define R_MMU_KBASE_LO__base_1__WIDTH 4
#define R_MMU_KBASE_LO__base_0__BITNR 0
#define R_MMU_KBASE_LO__base_0__WIDTH 4

#define R_MMU_KBASE_HI (IO_TYPECAST_UDWORD 0xb0000248)
#define R_MMU_KBASE_HI__base_f__BITNR 28
#define R_MMU_KBASE_HI__base_f__WIDTH 4
#define R_MMU_KBASE_HI__base_e__BITNR 24
#define R_MMU_KBASE_HI__base_e__WIDTH 4
#define R_MMU_KBASE_HI__base_d__BITNR 20
#define R_MMU_KBASE_HI__base_d__WIDTH 4
#define R_MMU_KBASE_HI__base_c__BITNR 16
#define R_MMU_KBASE_HI__base_c__WIDTH 4
#define R_MMU_KBASE_HI__base_b__BITNR 12
#define R_MMU_KBASE_HI__base_b__WIDTH 4
#define R_MMU_KBASE_HI__base_a__BITNR 8
#define R_MMU_KBASE_HI__base_a__WIDTH 4
#define R_MMU_KBASE_HI__base_9__BITNR 4
#define R_MMU_KBASE_HI__base_9__WIDTH 4
#define R_MMU_KBASE_HI__base_8__BITNR 0
#define R_MMU_KBASE_HI__base_8__WIDTH 4

#define R_MMU_CONTEXT (IO_TYPECAST_BYTE 0xb000024c)
#define R_MMU_CONTEXT__page_id__BITNR 0
#define R_MMU_CONTEXT__page_id__WIDTH 6

#define R_MMU_CAUSE (IO_TYPECAST_RO_UDWORD 0xb0000250)
#define R_MMU_CAUSE__vpn__BITNR 13
#define R_MMU_CAUSE__vpn__WIDTH 19
#define R_MMU_CAUSE__miss_excp__BITNR 12
#define R_MMU_CAUSE__miss_excp__WIDTH 1
#define R_MMU_CAUSE__miss_excp__yes 1
#define R_MMU_CAUSE__miss_excp__no 0
#define R_MMU_CAUSE__inv_excp__BITNR 11
#define R_MMU_CAUSE__inv_excp__WIDTH 1
#define R_MMU_CAUSE__inv_excp__yes 1
#define R_MMU_CAUSE__inv_excp__no 0
#define R_MMU_CAUSE__acc_excp__BITNR 10
#define R_MMU_CAUSE__acc_excp__WIDTH 1
#define R_MMU_CAUSE__acc_excp__yes 1
#define R_MMU_CAUSE__acc_excp__no 0
#define R_MMU_CAUSE__we_excp__BITNR 9
#define R_MMU_CAUSE__we_excp__WIDTH 1
#define R_MMU_CAUSE__we_excp__yes 1
#define R_MMU_CAUSE__we_excp__no 0
#define R_MMU_CAUSE__wr_rd__BITNR 8
#define R_MMU_CAUSE__wr_rd__WIDTH 1
#define R_MMU_CAUSE__wr_rd__write 1
#define R_MMU_CAUSE__wr_rd__read 0
#define R_MMU_CAUSE__page_id__BITNR 0
#define R_MMU_CAUSE__page_id__WIDTH 6

#define R_TLB_SELECT (IO_TYPECAST_BYTE 0xb0000254)
#define R_TLB_SELECT__index__BITNR 0
#define R_TLB_SELECT__index__WIDTH 6

#define R_TLB_LO (IO_TYPECAST_UDWORD 0xb0000258)
#define R_TLB_LO__pfn__BITNR 13
#define R_TLB_LO__pfn__WIDTH 19
#define R_TLB_LO__global__BITNR 3
#define R_TLB_LO__global__WIDTH 1
#define R_TLB_LO__global__yes 1
#define R_TLB_LO__global__no 0
#define R_TLB_LO__valid__BITNR 2
#define R_TLB_LO__valid__WIDTH 1
#define R_TLB_LO__valid__yes 1
#define R_TLB_LO__valid__no 0
#define R_TLB_LO__kernel__BITNR 1
#define R_TLB_LO__kernel__WIDTH 1
#define R_TLB_LO__kernel__yes 1
#define R_TLB_LO__kernel__no 0
#define R_TLB_LO__we__BITNR 0
#define R_TLB_LO__we__WIDTH 1
#define R_TLB_LO__we__yes 1
#define R_TLB_LO__we__no 0

#define R_TLB_HI (IO_TYPECAST_UDWORD 0xb000025c)
#define R_TLB_HI__vpn__BITNR 13
#define R_TLB_HI__vpn__WIDTH 19
#define R_TLB_HI__page_id__BITNR 0
#define R_TLB_HI__page_id__WIDTH 6

/*
!* Syncrounous serial port registers
!*/

#define R_SYNC_SERIAL1_REC_DATA (IO_TYPECAST_RO_UDWORD 0xb000006c)
#define R_SYNC_SERIAL1_REC_DATA__data_in__BITNR 0
#define R_SYNC_SERIAL1_REC_DATA__data_in__WIDTH 32

#define R_SYNC_SERIAL1_REC_WORD (IO_TYPECAST_RO_UWORD 0xb000006c)
#define R_SYNC_SERIAL1_REC_WORD__data_in__BITNR 0
#define R_SYNC_SERIAL1_REC_WORD__data_in__WIDTH 16

#define R_SYNC_SERIAL1_REC_BYTE (IO_TYPECAST_RO_BYTE 0xb000006c)
#define R_SYNC_SERIAL1_REC_BYTE__data_in__BITNR 0
#define R_SYNC_SERIAL1_REC_BYTE__data_in__WIDTH 8

#define R_SYNC_SERIAL1_STATUS (IO_TYPECAST_RO_UDWORD 0xb0000068)
#define R_SYNC_SERIAL1_STATUS__rec_status__BITNR 15
#define R_SYNC_SERIAL1_STATUS__rec_status__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__rec_status__running 0
#define R_SYNC_SERIAL1_STATUS__rec_status__idle 1
#define R_SYNC_SERIAL1_STATUS__tr_empty__BITNR 14
#define R_SYNC_SERIAL1_STATUS__tr_empty__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__tr_empty__empty 1
#define R_SYNC_SERIAL1_STATUS__tr_empty__not_empty 0
#define R_SYNC_SERIAL1_STATUS__tr_ready__BITNR 13
#define R_SYNC_SERIAL1_STATUS__tr_ready__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__tr_ready__full 0
#define R_SYNC_SERIAL1_STATUS__tr_ready__ready 1
#define R_SYNC_SERIAL1_STATUS__pin_1__BITNR 12
#define R_SYNC_SERIAL1_STATUS__pin_1__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__pin_1__low 0
#define R_SYNC_SERIAL1_STATUS__pin_1__high 1
#define R_SYNC_SERIAL1_STATUS__pin_0__BITNR 11
#define R_SYNC_SERIAL1_STATUS__pin_0__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__pin_0__low 0
#define R_SYNC_SERIAL1_STATUS__pin_0__high 1
#define R_SYNC_SERIAL1_STATUS__underflow__BITNR 10
#define R_SYNC_SERIAL1_STATUS__underflow__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__underflow__no 0
#define R_SYNC_SERIAL1_STATUS__underflow__yes 1
#define R_SYNC_SERIAL1_STATUS__overrun__BITNR 9
#define R_SYNC_SERIAL1_STATUS__overrun__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__overrun__no 0
#define R_SYNC_SERIAL1_STATUS__overrun__yes 1
#define R_SYNC_SERIAL1_STATUS__data_avail__BITNR 8
#define R_SYNC_SERIAL1_STATUS__data_avail__WIDTH 1
#define R_SYNC_SERIAL1_STATUS__data_avail__no 0
#define R_SYNC_SERIAL1_STATUS__data_avail__yes 1
#define R_SYNC_SERIAL1_STATUS__data__BITNR 0
#define R_SYNC_SERIAL1_STATUS__data__WIDTH 8

#define R_SYNC_SERIAL1_TR_DATA (IO_TYPECAST_UDWORD 0xb000006c)
#define R_SYNC_SERIAL1_TR_DATA__data_out__BITNR 0
#define R_SYNC_SERIAL1_TR_DATA__data_out__WIDTH 32

#define R_SYNC_SERIAL1_TR_WORD (IO_TYPECAST_UWORD 0xb000006c)
#define R_SYNC_SERIAL1_TR_WORD__data_out__BITNR 0
#define R_SYNC_SERIAL1_TR_WORD__data_out__WIDTH 16

#define R_SYNC_SERIAL1_TR_BYTE (IO_TYPECAST_BYTE 0xb000006c)
#define R_SYNC_SERIAL1_TR_BYTE__data_out__BITNR 0
#define R_SYNC_SERIAL1_TR_BYTE__data_out__WIDTH 8

#define R_SYNC_SERIAL1_CTRL (IO_TYPECAST_UDWORD 0xb0000068)
#define R_SYNC_SERIAL1_CTRL__tr_baud__BITNR 28
#define R_SYNC_SERIAL1_CTRL__tr_baud__WIDTH 4
#define R_SYNC_SERIAL1_CTRL__tr_baud__c150Hz 0
#define R_SYNC_SERIAL1_CTRL__tr_baud__c300Hz 1
#define R_SYNC_SERIAL1_CTRL__tr_baud__c600Hz 2
#define R_SYNC_SERIAL1_CTRL__tr_baud__c1200Hz 3
#define R_SYNC_SERIAL1_CTRL__tr_baud__c2400Hz 4
#define R_SYNC_SERIAL1_CTRL__tr_baud__c4800Hz 5
#define R_SYNC_SERIAL1_CTRL__tr_baud__c9600Hz 6
#define R_SYNC_SERIAL1_CTRL__tr_baud__c19k2Hz 7
#define R_SYNC_SERIAL1_CTRL__tr_baud__c28k8Hz 8
#define R_SYNC_SERIAL1_CTRL__tr_baud__c57k6Hz 9
#define R_SYNC_SERIAL1_CTRL__tr_baud__c115k2Hz 10
#define R_SYNC_SERIAL1_CTRL__tr_baud__c230k4Hz 11
#define R_SYNC_SERIAL1_CTRL__tr_baud__c460k8Hz 12
#define R_SYNC_SERIAL1_CTRL__tr_baud__c921k6Hz 13
#define R_SYNC_SERIAL1_CTRL__tr_baud__c3125kHz 14
#define R_SYNC_SERIAL1_CTRL__tr_baud__reserved 15
#define R_SYNC_SERIAL1_CTRL__dma_enable__BITNR 27
#define R_SYNC_SERIAL1_CTRL__dma_enable__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__dma_enable__on 1
#define R_SYNC_SERIAL1_CTRL__dma_enable__off 0
#define R_SYNC_SERIAL1_CTRL__mode__BITNR 24
#define R_SYNC_SERIAL1_CTRL__mode__WIDTH 3
#define R_SYNC_SERIAL1_CTRL__mode__master_output 0
#define R_SYNC_SERIAL1_CTRL__mode__slave_output 1
#define R_SYNC_SERIAL1_CTRL__mode__master_input 2
#define R_SYNC_SERIAL1_CTRL__mode__slave_input 3
#define R_SYNC_SERIAL1_CTRL__mode__master_bidir 4
#define R_SYNC_SERIAL1_CTRL__mode__slave_bidir 5
#define R_SYNC_SERIAL1_CTRL__error__BITNR 23
#define R_SYNC_SERIAL1_CTRL__error__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__error__normal 0
#define R_SYNC_SERIAL1_CTRL__error__ignore 1
#define R_SYNC_SERIAL1_CTRL__rec_enable__BITNR 22
#define R_SYNC_SERIAL1_CTRL__rec_enable__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__rec_enable__disable 0
#define R_SYNC_SERIAL1_CTRL__rec_enable__enable 1
#define R_SYNC_SERIAL1_CTRL__f_synctype__BITNR 21
#define R_SYNC_SERIAL1_CTRL__f_synctype__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__f_synctype__normal 0
#define R_SYNC_SERIAL1_CTRL__f_synctype__early 1
#define R_SYNC_SERIAL1_CTRL__f_syncsize__BITNR 19
#define R_SYNC_SERIAL1_CTRL__f_syncsize__WIDTH 2
#define R_SYNC_SERIAL1_CTRL__f_syncsize__bit 0
#define R_SYNC_SERIAL1_CTRL__f_syncsize__word 1
#define R_SYNC_SERIAL1_CTRL__f_syncsize__extended 2
#define R_SYNC_SERIAL1_CTRL__f_syncsize__reserved 3
#define R_SYNC_SERIAL1_CTRL__f_sync__BITNR 18
#define R_SYNC_SERIAL1_CTRL__f_sync__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__f_sync__on 0
#define R_SYNC_SERIAL1_CTRL__f_sync__off 1
#define R_SYNC_SERIAL1_CTRL__clk_mode__BITNR 17
#define R_SYNC_SERIAL1_CTRL__clk_mode__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__clk_mode__normal 0
#define R_SYNC_SERIAL1_CTRL__clk_mode__gated 1
#define R_SYNC_SERIAL1_CTRL__clk_halt__BITNR 16
#define R_SYNC_SERIAL1_CTRL__clk_halt__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__clk_halt__running 0
#define R_SYNC_SERIAL1_CTRL__clk_halt__stopped 1
#define R_SYNC_SERIAL1_CTRL__bitorder__BITNR 15
#define R_SYNC_SERIAL1_CTRL__bitorder__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__bitorder__lsb 0
#define R_SYNC_SERIAL1_CTRL__bitorder__msb 1
#define R_SYNC_SERIAL1_CTRL__tr_enable__BITNR 14
#define R_SYNC_SERIAL1_CTRL__tr_enable__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__tr_enable__disable 0
#define R_SYNC_SERIAL1_CTRL__tr_enable__enable 1
#define R_SYNC_SERIAL1_CTRL__wordsize__BITNR 11
#define R_SYNC_SERIAL1_CTRL__wordsize__WIDTH 3
#define R_SYNC_SERIAL1_CTRL__wordsize__size8bit 0
#define R_SYNC_SERIAL1_CTRL__wordsize__size12bit 1
#define R_SYNC_SERIAL1_CTRL__wordsize__size16bit 2
#define R_SYNC_SERIAL1_CTRL__wordsize__size24bit 3
#define R_SYNC_SERIAL1_CTRL__wordsize__size32bit 4
#define R_SYNC_SERIAL1_CTRL__buf_empty__BITNR 10
#define R_SYNC_SERIAL1_CTRL__buf_empty__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__buf_empty__lmt_8 0
#define R_SYNC_SERIAL1_CTRL__buf_empty__lmt_0 1
#define R_SYNC_SERIAL1_CTRL__buf_full__BITNR 9
#define R_SYNC_SERIAL1_CTRL__buf_full__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__buf_full__lmt_32 0
#define R_SYNC_SERIAL1_CTRL__buf_full__lmt_8 1
#define R_SYNC_SERIAL1_CTRL__flow_ctrl__BITNR 8
#define R_SYNC_SERIAL1_CTRL__flow_ctrl__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__flow_ctrl__disabled 0
#define R_SYNC_SERIAL1_CTRL__flow_ctrl__enabled 1
#define R_SYNC_SERIAL1_CTRL__clk_polarity__BITNR 6
#define R_SYNC_SERIAL1_CTRL__clk_polarity__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__clk_polarity__pos 0
#define R_SYNC_SERIAL1_CTRL__clk_polarity__neg 1
#define R_SYNC_SERIAL1_CTRL__frame_polarity__BITNR 5
#define R_SYNC_SERIAL1_CTRL__frame_polarity__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__frame_polarity__normal 0
#define R_SYNC_SERIAL1_CTRL__frame_polarity__inverted 1
#define R_SYNC_SERIAL1_CTRL__status_polarity__BITNR 4
#define R_SYNC_SERIAL1_CTRL__status_polarity__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__status_polarity__normal 0
#define R_SYNC_SERIAL1_CTRL__status_polarity__inverted 1
#define R_SYNC_SERIAL1_CTRL__clk_driver__BITNR 3
#define R_SYNC_SERIAL1_CTRL__clk_driver__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__clk_driver__normal 0
#define R_SYNC_SERIAL1_CTRL__clk_driver__inverted 1
#define R_SYNC_SERIAL1_CTRL__frame_driver__BITNR 2
#define R_SYNC_SERIAL1_CTRL__frame_driver__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__frame_driver__normal 0
#define R_SYNC_SERIAL1_CTRL__frame_driver__inverted 1
#define R_SYNC_SERIAL1_CTRL__status_driver__BITNR 1
#define R_SYNC_SERIAL1_CTRL__status_driver__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__status_driver__normal 0
#define R_SYNC_SERIAL1_CTRL__status_driver__inverted 1
#define R_SYNC_SERIAL1_CTRL__def_out0__BITNR 0
#define R_SYNC_SERIAL1_CTRL__def_out0__WIDTH 1
#define R_SYNC_SERIAL1_CTRL__def_out0__high 1
#define R_SYNC_SERIAL1_CTRL__def_out0__low 0

#define R_SYNC_SERIAL3_REC_DATA (IO_TYPECAST_RO_UDWORD 0xb000007c)
#define R_SYNC_SERIAL3_REC_DATA__data_in__BITNR 0
#define R_SYNC_SERIAL3_REC_DATA__data_in__WIDTH 32

#define R_SYNC_SERIAL3_REC_WORD (IO_TYPECAST_RO_UWORD 0xb000007c)
#define R_SYNC_SERIAL3_REC_WORD__data_in__BITNR 0
#define R_SYNC_SERIAL3_REC_WORD__data_in__WIDTH 16

#define R_SYNC_SERIAL3_REC_BYTE (IO_TYPECAST_RO_BYTE 0xb000007c)
#define R_SYNC_SERIAL3_REC_BYTE__data_in__BITNR 0
#define R_SYNC_SERIAL3_REC_BYTE__data_in__WIDTH 8

#define R_SYNC_SERIAL3_STATUS (IO_TYPECAST_RO_UDWORD 0xb0000078)
#define R_SYNC_SERIAL3_STATUS__rec_status__BITNR 15
#define R_SYNC_SERIAL3_STATUS__rec_status__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__rec_status__running 0
#define R_SYNC_SERIAL3_STATUS__rec_status__idle 1
#define R_SYNC_SERIAL3_STATUS__tr_empty__BITNR 14
#define R_SYNC_SERIAL3_STATUS__tr_empty__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__tr_empty__empty 1
#define R_SYNC_SERIAL3_STATUS__tr_empty__not_empty 0
#define R_SYNC_SERIAL3_STATUS__tr_ready__BITNR 13
#define R_SYNC_SERIAL3_STATUS__tr_ready__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__tr_ready__full 0
#define R_SYNC_SERIAL3_STATUS__tr_ready__ready 1
#define R_SYNC_SERIAL3_STATUS__pin_1__BITNR 12
#define R_SYNC_SERIAL3_STATUS__pin_1__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__pin_1__low 0
#define R_SYNC_SERIAL3_STATUS__pin_1__high 1
#define R_SYNC_SERIAL3_STATUS__pin_0__BITNR 11
#define R_SYNC_SERIAL3_STATUS__pin_0__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__pin_0__low 0
#define R_SYNC_SERIAL3_STATUS__pin_0__high 1
#define R_SYNC_SERIAL3_STATUS__underflow__BITNR 10
#define R_SYNC_SERIAL3_STATUS__underflow__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__underflow__no 0
#define R_SYNC_SERIAL3_STATUS__underflow__yes 1
#define R_SYNC_SERIAL3_STATUS__overrun__BITNR 9
#define R_SYNC_SERIAL3_STATUS__overrun__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__overrun__no 0
#define R_SYNC_SERIAL3_STATUS__overrun__yes 1
#define R_SYNC_SERIAL3_STATUS__data_avail__BITNR 8
#define R_SYNC_SERIAL3_STATUS__data_avail__WIDTH 1
#define R_SYNC_SERIAL3_STATUS__data_avail__no 0
#define R_SYNC_SERIAL3_STATUS__data_avail__yes 1
#define R_SYNC_SERIAL3_STATUS__data__BITNR 0
#define R_SYNC_SERIAL3_STATUS__data__WIDTH 8

#define R_SYNC_SERIAL3_TR_DATA (IO_TYPECAST_UDWORD 0xb000007c)
#define R_SYNC_SERIAL3_TR_DATA__data_out__BITNR 0
#define R_SYNC_SERIAL3_TR_DATA__data_out__WIDTH 32

#define R_SYNC_SERIAL3_TR_WORD (IO_TYPECAST_UWORD 0xb000007c)
#define R_SYNC_SERIAL3_TR_WORD__data_out__BITNR 0
#define R_SYNC_SERIAL3_TR_WORD__data_out__WIDTH 16

#define R_SYNC_SERIAL3_TR_BYTE (IO_TYPECAST_BYTE 0xb000007c)
#define R_SYNC_SERIAL3_TR_BYTE__data_out__BITNR 0
#define R_SYNC_SERIAL3_TR_BYTE__data_out__WIDTH 8

#define R_SYNC_SERIAL3_CTRL (IO_TYPECAST_UDWORD 0xb0000078)
#define R_SYNC_SERIAL3_CTRL__tr_baud__BITNR 28
#define R_SYNC_SERIAL3_CTRL__tr_baud__WIDTH 4
#define R_SYNC_SERIAL3_CTRL__tr_baud__c150Hz 0
#define R_SYNC_SERIAL3_CTRL__tr_baud__c300Hz 1
#define R_SYNC_SERIAL3_CTRL__tr_baud__c600Hz 2
#define R_SYNC_SERIAL3_CTRL__tr_baud__c1200Hz 3
#define R_SYNC_SERIAL3_CTRL__tr_baud__c2400Hz 4
#define R_SYNC_SERIAL3_CTRL__tr_baud__c4800Hz 5
#define R_SYNC_SERIAL3_CTRL__tr_baud__c9600Hz 6
#define R_SYNC_SERIAL3_CTRL__tr_baud__c19k2Hz 7
#define R_SYNC_SERIAL3_CTRL__tr_baud__c28k8Hz 8
#define R_SYNC_SERIAL3_CTRL__tr_baud__c57k6Hz 9
#define R_SYNC_SERIAL3_CTRL__tr_baud__c115k2Hz 10
#define R_SYNC_SERIAL3_CTRL__tr_baud__c230k4Hz 11
#define R_SYNC_SERIAL3_CTRL__tr_baud__c460k8Hz 12
#define R_SYNC_SERIAL3_CTRL__tr_baud__c921k6Hz 13
#define R_SYNC_SERIAL3_CTRL__tr_baud__c3125kHz 14
#define R_SYNC_SERIAL3_CTRL__tr_baud__reserved 15
#define R_SYNC_SERIAL3_CTRL__dma_enable__BITNR 27
#define R_SYNC_SERIAL3_CTRL__dma_enable__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__dma_enable__on 1
#define R_SYNC_SERIAL3_CTRL__dma_enable__off 0
#define R_SYNC_SERIAL3_CTRL__mode__BITNR 24
#define R_SYNC_SERIAL3_CTRL__mode__WIDTH 3
#define R_SYNC_SERIAL3_CTRL__mode__master_output 0
#define R_SYNC_SERIAL3_CTRL__mode__slave_output 1
#define R_SYNC_SERIAL3_CTRL__mode__master_input 2
#define R_SYNC_SERIAL3_CTRL__mode__slave_input 3
#define R_SYNC_SERIAL3_CTRL__mode__master_bidir 4
#define R_SYNC_SERIAL3_CTRL__mode__slave_bidir 5
#define R_SYNC_SERIAL3_CTRL__error__BITNR 23
#define R_SYNC_SERIAL3_CTRL__error__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__error__normal 0
#define R_SYNC_SERIAL3_CTRL__error__ignore 1
#define R_SYNC_SERIAL3_CTRL__rec_enable__BITNR 22
#define R_SYNC_SERIAL3_CTRL__rec_enable__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__rec_enable__disable 0
#define R_SYNC_SERIAL3_CTRL__rec_enable__enable 1
#define R_SYNC_SERIAL3_CTRL__f_synctype__BITNR 21
#define R_SYNC_SERIAL3_CTRL__f_synctype__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__f_synctype__normal 0
#define R_SYNC_SERIAL3_CTRL__f_synctype__early 1
#define R_SYNC_SERIAL3_CTRL__f_syncsize__BITNR 19
#define R_SYNC_SERIAL3_CTRL__f_syncsize__WIDTH 2
#define R_SYNC_SERIAL3_CTRL__f_syncsize__bit 0
#define R_SYNC_SERIAL3_CTRL__f_syncsize__word 1
#define R_SYNC_SERIAL3_CTRL__f_syncsize__extended 2
#define R_SYNC_SERIAL3_CTRL__f_syncsize__reserved 3
#define R_SYNC_SERIAL3_CTRL__f_sync__BITNR 18
#define R_SYNC_SERIAL3_CTRL__f_sync__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__f_sync__on 0
#define R_SYNC_SERIAL3_CTRL__f_sync__off 1
#define R_SYNC_SERIAL3_CTRL__clk_mode__BITNR 17
#define R_SYNC_SERIAL3_CTRL__clk_mode__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__clk_mode__normal 0
#define R_SYNC_SERIAL3_CTRL__clk_mode__gated 1
#define R_SYNC_SERIAL3_CTRL__clk_halt__BITNR 16
#define R_SYNC_SERIAL3_CTRL__clk_halt__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__clk_halt__running 0
#define R_SYNC_SERIAL3_CTRL__clk_halt__stopped 1
#define R_SYNC_SERIAL3_CTRL__bitorder__BITNR 15
#define R_SYNC_SERIAL3_CTRL__bitorder__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__bitorder__lsb 0
#define R_SYNC_SERIAL3_CTRL__bitorder__msb 1
#define R_SYNC_SERIAL3_CTRL__tr_enable__BITNR 14
#define R_SYNC_SERIAL3_CTRL__tr_enable__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__tr_enable__disable 0
#define R_SYNC_SERIAL3_CTRL__tr_enable__enable 1
#define R_SYNC_SERIAL3_CTRL__wordsize__BITNR 11
#define R_SYNC_SERIAL3_CTRL__wordsize__WIDTH 3
#define R_SYNC_SERIAL3_CTRL__wordsize__size8bit 0
#define R_SYNC_SERIAL3_CTRL__wordsize__size12bit 1
#define R_SYNC_SERIAL3_CTRL__wordsize__size16bit 2
#define R_SYNC_SERIAL3_CTRL__wordsize__size24bit 3
#define R_SYNC_SERIAL3_CTRL__wordsize__size32bit 4
#define R_SYNC_SERIAL3_CTRL__buf_empty__BITNR 10
#define R_SYNC_SERIAL3_CTRL__buf_empty__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__buf_empty__lmt_8 0
#define R_SYNC_SERIAL3_CTRL__buf_empty__lmt_0 1
#define R_SYNC_SERIAL3_CTRL__buf_full__BITNR 9
#define R_SYNC_SERIAL3_CTRL__buf_full__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__buf_full__lmt_32 0
#define R_SYNC_SERIAL3_CTRL__buf_full__lmt_8 1
#define R_SYNC_SERIAL3_CTRL__flow_ctrl__BITNR 8
#define R_SYNC_SERIAL3_CTRL__flow_ctrl__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__flow_ctrl__disabled 0
#define R_SYNC_SERIAL3_CTRL__flow_ctrl__enabled 1
#define R_SYNC_SERIAL3_CTRL__clk_polarity__BITNR 6
#define R_SYNC_SERIAL3_CTRL__clk_polarity__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__clk_polarity__pos 0
#define R_SYNC_SERIAL3_CTRL__clk_polarity__neg 1
#define R_SYNC_SERIAL3_CTRL__frame_polarity__BITNR 5
#define R_SYNC_SERIAL3_CTRL__frame_polarity__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__frame_polarity__normal 0
#define R_SYNC_SERIAL3_CTRL__frame_polarity__inverted 1
#define R_SYNC_SERIAL3_CTRL__status_polarity__BITNR 4
#define R_SYNC_SERIAL3_CTRL__status_polarity__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__status_polarity__normal 0
#define R_SYNC_SERIAL3_CTRL__status_polarity__inverted 1
#define R_SYNC_SERIAL3_CTRL__clk_driver__BITNR 3
#define R_SYNC_SERIAL3_CTRL__clk_driver__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__clk_driver__normal 0
#define R_SYNC_SERIAL3_CTRL__clk_driver__inverted 1
#define R_SYNC_SERIAL3_CTRL__frame_driver__BITNR 2
#define R_SYNC_SERIAL3_CTRL__frame_driver__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__frame_driver__normal 0
#define R_SYNC_SERIAL3_CTRL__frame_driver__inverted 1
#define R_SYNC_SERIAL3_CTRL__status_driver__BITNR 1
#define R_SYNC_SERIAL3_CTRL__status_driver__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__status_driver__normal 0
#define R_SYNC_SERIAL3_CTRL__status_driver__inverted 1
#define R_SYNC_SERIAL3_CTRL__def_out0__BITNR 0
#define R_SYNC_SERIAL3_CTRL__def_out0__WIDTH 1
#define R_SYNC_SERIAL3_CTRL__def_out0__high 1
#define R_SYNC_SERIAL3_CTRL__def_out0__low 0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       config ARM
	bool
	default y
	select ARCH_CLOCKSOURCE_DATA
	select ARCH_HAS_DEVMEM_IS_ALLOWED
	select ARCH_HAS_ELF_RANDOMIZE
	select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST
	select ARCH_HAVE_CUSTOM_GPIO_H
	select ARCH_HAS_GCOV_PROFILE_ALL
	select ARCH_MIGHT_HAVE_PC_PARPORT
	select ARCH_SUPPORTS_ATOMIC_RMW
	select ARCH_USE_BUILTIN_BSWAP
	select ARCH_USE_CMPXCHG_LOCKREF
	select ARCH_WANT_IPC_PARSE_VERSION
	select BUILDTIME_EXTABLE_SORT if MMU
	select CLONE_BACKWARDS
	select CPU_PM if (SUSPEND || CPU_IDLE)
	select DCACHE_WORD_ACCESS if HAVE_EFFICIENT_UNALIGNED_ACCESS
	select EDAC_SUPPORT
	select EDAC_ATOMIC_SCRUB
	select GENERIC_ALLOCATOR
	select GENERIC_ATOMIC64 if (CPU_V7M || CPU_V6 || !CPU_32v6K || !AEABI)
	select GENERIC_CLOCKEVENTS_BROADCAST if SMP
	select GENERIC_EARLY_IOREMAP
	select GENERIC_IDLE_POLL_SETUP
	select GENERIC_IRQ_PROBE
	select GENERIC_IRQ_SHOW
	select GENERIC_IRQ_SHOW_LEVEL
	select GENERIC_PCI_IOMAP
	select GENERIC_SCHED_CLOCK
	select GENERIC_SMP_IDLE_THREAD
	select GENERIC_STRNCPY_FROM_USER
	select GENERIC_STRNLEN_USER
	select HANDLE_DOMAIN_IRQ
	select HARDIRQS_SW_RESEND
	select HAVE_ARCH_AUDITSYSCALL if (AEABI && !OABI_COMPAT)
	select HAVE_ARCH_BITREVERSE if (CPU_32v7M || CPU_32v7) && !CPU_32v6
	select HAVE_ARCH_HARDENED_USERCOPY
	select HAVE_ARCH_JUMP_LABEL if !XIP_KERNEL && !CPU_ENDIAN_BE32 && MMU
	select HAVE_ARCH_KGDB if !CPU_ENDIAN_BE32 && MMU
	select HAVE_ARCH_MMAP_RND_BITS if MMU
	select HAVE_ARCH_SECCOMP_FILTER if (AEABI && !OABI_COMPAT)
	select HAVE_ARCH_TRACEHOOK
	select HAVE_ARM_SMCCC if CPU_V7
	select HAVE_CBPF_JIT
	select HAVE_CC_STACKPROTECTOR
	select HAVE_CONTEXT_TRACKING if !IPIPE
	select HAVE_C_RECORDMCOUNT
	select HAVE_DEBUG_KMEMLEAK
	select HAVE_DMA_API_DEBUG
	select HAVE_DMA_CONTIGUOUS if MMU
	select HAVE_DYNAMIC_FTRACE if (!XIP_KERNEL) && !CPU_ENDIAN_BE32 && MMU
	select HAVE_EFFICIENT_UNALIGNED_ACCESS if (CPU_V6 || CPU_V6K || CPU_V7) && MMU
	select HAVE_EXIT_THREAD
	select HAVE_FTRACE_MCOUNT_RECORD if (!XIP_KERNEL)
	select HAVE_FUNCTION_GRAPH_TRACER if (!THUMB2_KERNEL)
	select HAVE_FUNCTION_TRACER if (!XIP_KERNEL)
	select HAVE_GCC_PLUGINS
	select HAVE_GENERIC_DMA_COHERENT
	select HAVE_HW_BREAKPOINT if (PERF_EVENTS && (CPU_V6 || CPU_V6K || CPU_V7))
	select HAVE_IDE if PCI || ISA || PCMCIA
	select HAVE_IRQ_TIME_ACCOUNTING
	select HAVE_KERNEL_GZIP
	select HAVE_KERNEL_LZ4
	select HAVE_KERNEL_LZMA
	select HAVE_KERNEL_LZO
	select HAVE_KERNEL_XZ
	select HAVE_KPROBES if !XIP_KERNEL && !CPU_ENDIAN_BE32 && !CPU_V7M
	select HAVE_KRETPROBES if (HAVE_KPROBES)
	select HAVE_MEMBLOCK
	select HAVE_MOD_ARCH_SPECIFIC
	select HAVE_NMI
	select HAVE_OPROFILE if (HAVE_PERF_EVENTS)
	select HAVE_OPTPROBES if !THUMB2_KERNEL
	select HAVE_PERF_EVENTS
	select HAVE_PERF_REGS
	select HAVE_PERF_USER_STACK_DUMP
	select HAVE_RCU_TABLE_FREE if (SMP && ARM_LPAE)
	select HAVE_REGS_AND_STACK_ACCESS_API
	select HAVE_SYSCALL_TRACEPOINTS
	select HAVE_UID16
	select HAVE_VIRT_CPU_ACCOUNTING_GEN
	select IPIPE_WANT_PTE_PINNING if IPIPE && !(CPU_V6K || CPU_V7)
	select IRQ_FORCED_THREADING
	select MODULES_USE_ELF_REL
	select NO_BOOTMEM
	select OF_EARLY_FLATTREE if OF
	select OF_RESERVED_MEM if OF
	select OLD_SIGACTION
	select OLD_SIGSUSPEND3
	select PERF_USE_VMALLOC
	select RTC_LIB
	select SYS_SUPPORTS_APM_EMULATION
	# Above selects are sorted alphabetically; please add new ones
	# according to that.  Thanks.
	help
	  The ARM series is a line of low-power-consumption RISC chip designs
	  licensed by ARM Ltd and targeted at embedded applications and
	  handhelds such as the Compaq IPAQ.  ARM-based PCs are no longer
	  manufactured, but legacy ARM-based PC hardware remains popular in
	  Europe.  There is an ARM Linux project with a web page at
	  <http://www.arm.linux.org.uk/>.

config ARM_HAS_SG_CHAIN
	select ARCH_HAS_SG_CHAIN
	bool

config NEED_SG_DMA_LENGTH
	bool

config ARM_DMA_USE_IOMMU
	bool
	select ARM_HAS_SG_CHAIN
	select NEED_SG_DMA_LENGTH

if ARM_DMA_USE_IOMMU

config ARM_DMA_IOMMU_ALIGNMENT
	int "Maximum PAGE_SIZE order of alignment for DMA IOMMU buffers"
	range 4 9
	default 8
	help
	  DMA mapping framework by default aligns all buffers to the smallest
	  PAGE_SIZE order which is greater than or equal to the requested buffer
	  size. This works well for buffers up to a few hundreds kilobytes, but
	  for larger buffers it just a waste of address space. Drivers which has
	  relatively small addressing window (like 64Mib) might run out of
	  virtual space with just a few allocations.

	  With this parameter you can specify the maximum PAGE_SIZE order for
	  DMA IOMMU buffers. Larger buffers will be aligned only to this
	  specified order. The order is expressed as a power of two multiplied
	  by the PAGE_SIZE.

endif

config MIGHT_HAVE_PCI
	bool

config SYS_SUPPORTS_APM_EMULATION
	bool

config HAVE_TCM
	bool
	select GENERIC_ALLOCATOR

config HAVE_PROC_CPU
	bool

config NO_IOPORT_MAP
	bool

config EISA
	bool
	---help---
	  The Extended Industry Standard Architecture (EISA) bus was
	  developed as an open alternative to the IBM MicroChannel bus.

	  The EISA bus provided some of the features of the IBM MicroChannel
	  bus while maintaining backward compatibility with cards made for
	  the older ISA bus.  The EISA bus saw limited use between 1988 and
	  1995 when it was made obsolete by the PCI bus.

	  Say Y here if you are building a kernel for an EISA-based machine.

	  Otherwise, say N.

config SBUS
	bool

config STACKTRACE_SUPPORT
	bool
	default y

config LOCKDEP_SUPPORT
	bool
	default y

config TRACE_IRQFLAGS_SUPPORT
	bool
	default !CPU_V7M

config RWSEM_XCHGADD_ALGORITHM
	bool
	default y

config ARCH_HAS_ILOG2_U32
	bool

config ARCH_HAS_ILOG2_U64
	bool

config ARCH_HAS_BANDGAP
	bool

config FIX_EARLYCON_MEM
	def_bool y if MMU

config GENERIC_HWEIGHT
	bool
	default y

config GENERIC_CALIBRATE_DELAY
	bool
	default y

config ARCH_MAY_HAVE_PC_FDC
	bool

config ZONE_DMA
	bool

config NEED_DMA_MAP_STATE
       def_bool y

config ARCH_SUPPORTS_UPROBES
	def_bool y

config ARCH_HAS_DMA_SET_COHERENT_MASK
	bool

config GENERIC_ISA_DMA
	bool

config FIQ
	bool

config NEED_RET_TO_USER
	bool

config ARCH_MTD_XIP
	bool

config VECTORS_BASE
	hex
	default 0xffff0000 if MMU || CPU_HIGH_VECTOR
	default DRAM_BASE if REMAP_VECTORS_TO_RAM
	default 0x00000000
	help
	  The base address of exception vectors.  This must be two pages
	  in size.

config ARM_PATCH_PHYS_VIRT
	bool "Patch physical to virtual translations at runtime" if EMBEDDED
	default y
	depends on !XIP_KERNEL && MMU
	help
	  Patch phys-to-virt and virt-to-phys translation functions at
	  boot and module load time according to the position of the
	  kernel in system memory.

	  This can only be used with non-XIP MMU kernels where the base
	  of physical memory is at a 16MB boundary.

	  Only disable this option if you know that you do not require
	  this feature (eg, building a kernel for a single machine) and
	  you need to shrink the kernel to the minimal size.

config NEED_MACH_IO_H
	bool
	help
	  Select this when mach/io.h is required to provide special
	  definitions for this platform.  The need for mach/io.h should
	  be avoided when possible.

config NEED_MACH_MEMORY_H
	bool
	help
	  Select this when mach/memory.h is required to provide special
	  definitions for this platform.  The need for mach/memory.h should
	  be avoided when possible.

config PHYS_OFFSET
	hex "Physical address of main memory" if MMU
	depends on !ARM_PATCH_PHYS_VIRT
	default DRAM_BASE if !MMU
	default 0x00000000 if ARCH_EBSA110 || \
			ARCH_FOOTBRIDGE || \
			ARCH_INTEGRATOR || \
			ARCH_IOP13XX || \
			ARCH_KS8695 || \
			ARCH_REALVIEW
	default 0x10000000 if ARCH_OMAP1 || ARCH_RPC
	default 0x20000000 if ARCH_S5PV210
	default 0xc0000000 if ARCH_SA1100
	help
	  Please provide the physical address corresponding to the
	  location of main memory in your system.

config GENERIC_BUG
	def_bool y
	depends on BUG

config PGTABLE_LEVELS
	int
	default 3 if ARM_LPAE
	default 2

source "init/Kconfig"

source "kernel/Kconfig.freezer"

menu "System Type"

config MMU
	bool "MMU-based Paged Memory Management Support"
	default y
	help
	  Select if you want MMU-based virtualised addressing space
	  support by paged memory management. If unsure, say 'Y'.

config ARCH_MMAP_RND_BITS_MIN
	default 8

config ARCH_MMAP_RND_BITS_MAX
	default 14 if PAGE_OFFSET=0x40000000
	default 15 if PAGE_OFFSET=0x80000000
	default 16

#
# The "ARM system type" choice list is ordered alphabetically by option
# text.  Please add new entries in the option alphabetic order.
#
choice
	prompt "ARM system type"
	default ARM_SINGLE_ARMV7M if !MMU
	default ARCH_MULTIPLATFORM if MMU

config ARCH_MULTIPLATFORM
	bool "Allow multiple platforms to be selected"
	depends on MMU
	select ARM_HAS_SG_CHAIN
	select ARM_PATCH_PHYS_VIRT
	select AUTO_ZRELADDR
	select CLKSRC_OF
	select COMMON_CLK
	select GENERIC_CLOCKEVENTS
	select MIGHT_HAVE_PCI
	select MULTI_IRQ_HANDLER
	select PCI_DOMAINS if PCI
	select SPARSE_IRQ
	select USE_OF

config ARM_SINGLE_ARMV7M
	bool "ARMv7-M based platforms (Cortex-M0/M3/M4)"
	depends on !MMU
	select ARM_NVIC
	select AUTO_ZRELADDR
	select CLKSRC_OF
	select COMMON_CLK
	select CPU_V7M
	select GENERIC_CLOCKEVENTS
	select NO_IOPORT_MAP
	select SPARSE_IRQ
	select USE_OF

config ARCH_GEMINI
	bool "Cortina Systems Gemini"
	select CLKSRC_MMIO
	select CPU_FA526
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	help
	  Support for the Cortina Systems Gemini family SoCs

config ARCH_EBSA110
	bool "EBSA-110"
	select ARCH_USES_GETTIMEOFFSET
	select CPU_SA110
	select ISA
	select NEED_MACH_IO_H
	select NEED_MACH_MEMORY_H
	select NO_IOPORT_MAP
	help
	  This is an evaluation board for the StrongARM processor available
	  from Digital. It has limited hardware on-board, including an
	  Ethernet interface, two PCMCIA sockets, two serial ports and a
	  parallel port.

config ARCH_EP93XX
	bool "EP93xx-based"
	select ARCH_HAS_HOLES_MEMORYMODEL
	select ARM_AMBA
	select ARM_PATCH_PHYS_VIRT
	select ARM_VIC
	select AUTO_ZRELADDR
	select CLKDEV_LOOKUP
	select CLKSRC_MMIO
	select CPU_ARM920T
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	help
	  This enables support for the Cirrus EP93xx series of CPUs.

config ARCH_FOOTBRIDGE
	bool "FootBridge"
	select CPU_SA110
	select FOOTBRIDGE
	select GENERIC_CLOCKEVENTS
	select HAVE_IDE
	select NEED_MACH_IO_H if !MMU
	select NEED_MACH_MEMORY_H
	help
	  Support for systems based on the DC21285 companion chip
	  ("FootBridge"), such as the Simtec CATS and the Rebel NetWinder.

config ARCH_NETX
	bool "Hilscher NetX based"
	select ARM_VIC
	select CLKSRC_MMIO
	select CPU_ARM926T
	select GENERIC_CLOCKEVENTS
	help
	  This enables support for systems based on the Hilscher NetX Soc

config ARCH_IOP13XX
	bool "IOP13xx-based"
	depends on MMU
	select CPU_XSC3
	select NEED_MACH_MEMORY_H
	select NEED_RET_TO_USER
	select PCI
	select PLAT_IOP
	select VMSPLIT_1G
	select SPARSE_IRQ
	help
	  Support for Intel's IOP13XX (XScale) family of processors.

config ARCH_IOP32X
	bool "IOP32x-based"
	depends on MMU
	select CPU_XSCALE
	select GPIO_IOP
	select GPIOLIB
	select NEED_RET_TO_USER
	select PCI
	select PLAT_IOP
	help
	  Support for Intel's 80219 and IOP32X (XScale) family of
	  processors.

config ARCH_IOP33X
	bool "IOP33x-based"
	depends on MMU
	select CPU_XSCALE
	select GPIO_IOP
	select GPIOLIB
	select NEED_RET_TO_USER
	select PCI
	select PLAT_IOP
	help
	  Support for Intel's IOP33X (XScale) family of processors.

config ARCH_IXP4XX
	bool "IXP4xx-based"
	depends on MMU
	select ARCH_HAS_DMA_SET_COHERENT_MASK
	select ARCH_SUPPORTS_BIG_ENDIAN
	select CLKSRC_MMIO
	select CPU_XSCALE
	select DMABOUNCE if PCI
	select IPIPE_ARM_KUSER_TSC if IPIPE
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	select MIGHT_HAVE_PCI
	select NEED_MACH_IO_H
	select USB_EHCI_BIG_ENDIAN_DESC
	select USB_EHCI_BIG_ENDIAN_MMIO
	help
	  Support for Intel's IXP4XX (XScale) family of processors.

config ARCH_DOVE
	bool "Marvell Dove"
	select CPU_PJ4
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	select MIGHT_HAVE_PCI
	select MULTI_IRQ_HANDLER
	select MVEBU_MBUS
	select PINCTRL
	select PINCTRL_DOVE
	select PLAT_ORION_LEGACY
	select SPARSE_IRQ
	select PM_GENERIC_DOMAINS if PM
	help
	  Support for the Marvell Dove SoC 88AP510

config ARCH_KS8695
	bool "Micrel/Kendin KS8695"
	select CLKSRC_MMIO
	select CPU_ARM922T
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	select NEED_MACH_MEMORY_H
	help
	  Support for Micrel/Kendin KS8695 "Centaur" (ARM922T) based
	  System-on-Chip devices.

config ARCH_W90X900
	bool "Nuvoton W90X900 CPU"
	select CLKDEV_LOOKUP
	select CLKSRC_MMIO
	select CPU_ARM926T
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	help
	  Support for Nuvoton (Winbond logic dept.) ARM9 processor,
	  At present, the w90x900 has been renamed nuc900, regarding
	  the ARM series product line, you can login the following
	  link address to know more.

	  <http://www.nuvoton.com/hq/enu/ProductAndSales/ProductLines/
		ConsumerElectronicsIC/ARMMicrocontroller/ARMMicrocontroller>

config ARCH_LPC32XX
	bool "NXP LPC32XX"
	select ARM_AMBA
	select CLKDEV_LOOKUP
	select CLKSRC_LPC32XX
	select COMMON_CLK
	select CPU_ARM926T
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	select MULTI_IRQ_HANDLER
	select SPARSE_IRQ
	select USE_OF
	help
	  Support for the NXP LPC32XX family of processors

config ARCH_PXA
	bool "PXA2xx/PXA3xx-based"
	depends on MMU
	select ARCH_MTD_XIP
	select ARM_CPU_SUSPEND if PM
	select AUTO_ZRELADDR
	select COMMON_CLK
	select CLKDEV_LOOKUP
	select CLKSRC_PXA
	select CLKSRC_MMIO
	select CLKSRC_OF
	select CPU_XSCALE if !CPU_XSC3
	select GENERIC_CLOCKEVENTS
	select GPIO_PXA
	select GPIOLIB
	select HAVE_IDE
	select IRQ_DOMAIN
	select MULTI_IRQ_HANDLER
	select PLAT_PXA
	select SPARSE_IRQ
	help
	  Support for Intel/Marvell's PXA2xx/PXA3xx processor line.

config ARCH_RPC
	bool "RiscPC"
	depends on MMU
	select ARCH_ACORN
	select ARCH_MAY_HAVE_PC_FDC
	select ARCH_SPARSEMEM_ENABLE
	select ARCH_USES_GETTIMEOFFSET
	select CPU_SA110
	select FIQ
	select HAVE_IDE
	select HAVE_PATA_PLATFORM
	select ISA_DMA_API
	select NEED_MACH_IO_H
	select NEED_MACH_MEMORY_H
	select NO_IOPORT_MAP
	help
	  On the Acorn Risc-PC, Linux can support the internal IDE disk and
	  CD-ROM interface, serial and parallel port, and the floppy drive.

config ARCH_SA1100
	bool "SA1100-based"
	select ARCH_MTD_XIP
	select ARCH_SPARSEMEM_ENABLE
	select CLKDEV_LOOKUP
	select CLKSRC_MMIO
	select CLKSRC_PXA
	select CLKSRC_OF if OF
	select CPU_FREQ
	select CPU_SA1100
	select GENERIC_CLOCKEVENTS
	select GPIOLIB
	select HAVE_IDE
	select IRQ_DOMAIN
	select ISA
	select MULTI_IRQ_HANDLER
	select NEED_MACH_MEMORY_H
	select SPARSE_IRQ
	help
	  Support for StrongARM 11x0 based boards.

config ARCH_S3C24XX
	bool "Samsung S3C24XX SoCs"
	select ATAGS
	select CLKDEV_LOOKUP
	select CLKSRC_SAMSUNG_PWM
	select GENERIC_CLOCKEVENTS
	select GPIO_SAMSUNG
	select GPIOLIB
	select HAVE_S3C2410_I2C if I2C
	select HAVE_S3C2410_WATCHDOG if WATCHDOG
	select HAVE_S3C_RTC if RTC_CLASS
	select IPIPE_ARM_KUSER_TSC if IPIPE
	select MULTI_IRQ_HANDLER
	select NEED_MACH_IO_H
	select SAMSUNG_ATAGS
	help
	  Samsung S3C2410, S3C2412, S3C2413, S3C2416, S3C2440, S3C2442, S3C2443
	  and S3C2450 SoCs based systems, such as the Simtec Electronics BAST
	  (<http://www.simtec.co.uk/products/EB110ITX/>), the IPAQ 1940 or the
	  Samsung SMDK2410 development board (and derivatives).

config ARCH_DAVINCI
	bool "TI DaVinci"
	select ARCH_HAS_HOLES_MEMORYMODEL
	select CLKDEV_LOOKUP
	select CPU_ARM926T
	select GENERIC_ALLOCATOR
	select GENERIC_CLOCKEVENTS
	select GENERIC_IRQ_CHIP
	select GPIOLIB
	select HAVE_IDE
	select USE_OF
	select ZONE_DMA
	help
	  Support for TI's DaVinci platform.

config ARCH_OMAP1
	bool "TI OMAP1"
	depends on MMU
	select ARCH_HAS_HOLES_MEMORYMODEL
	select ARCH_OMAP
	select CLKDEV_LOOKUP
	select CLKSRC_MMIO
	select GENERIC_CLOCKEVENTS
	select GENERIC_IRQ_CHIP
	select GPIOLIB
	select HAVE_IDE
	select IRQ_DOMAIN
	select MULTI_IRQ_HANDLER
	select NEED_MACH_IO_H if PCCARD
	select NEED_MACH_MEMORY_H
	select SPARSE_IRQ
	help
	  Support for older TI OMAP1 (omap7xx, omap15xx or omap16xx)

endchoice

menu "Multiple platform selection"
	depends on ARCH_MULTIPLATFORM

comment "CPU Core family selection"

config ARCH_MULTI_V4
	bool "ARMv4 based platforms (FA526)"
	depends on !ARCH_MULTI_V6_V7
	select ARCH_MULTI_V4_V5
	select CPU_FA526

config ARCH_MULTI_V4T
	bool "ARMv4T based platforms (ARM720T, ARM920T, ...)"
	depends on !ARCH_MULTI_V6_V7
	select ARCH_MULTI_V4_V5
	select CPU_ARM920T if !(CPU_ARM7TDMI || CPU_ARM720T || \
		CPU_ARM740T || CPU_ARM9TDMI || CPU_ARM922T || \
		CPU_ARM925T || CPU_ARM940T)

config ARCH_MULTI_V5
	bool "ARMv5 based platforms (ARM926T, XSCALE, PJ1, ...)"
	depends on !ARCH_MULTI_V6_V7
	select ARCH_MULTI_V4_V5
	select CPU_ARM926T if !(CPU_ARM946E || CPU_ARM1020 || \
		CPU_ARM1020E || CPU_ARM1022 || CPU_ARM1026 || \
		CPU_XSCALE || CPU_XSC3 || CPU_MOHAWK || CPU_FEROCEON)

config ARCH_MULTI_V4_V5
	bool

config ARCH_MULTI_V6
	bool "ARMv6 based platforms (ARM11)"
	select ARCH_MULTI_V6_V7
	select CPU_V6K

config ARCH_MULTI_V7
	bool "ARMv7 based platforms (Cortex-A, PJ4, Scorpion, Krait)"
	default y
	select ARCH_MULTI_V6_V7
	select CPU_V7
	select HAVE_SMP

config ARCH_MULTI_V6_V7
	bool
	select MIGHT_HAVE_CACHE_L2X0

config ARCH_MULTI_CPU_AUTO
	def_bool !(ARCH_MULTI_V4 || ARCH_MULTI_V4T || ARCH_MULTI_V6_V7)
	select ARCH_MULTI_V5

endmenu

config ARCH_VIRT
	bool "Dummy Virtual Machine"
	depends on ARCH_MULTI_V7
	select ARM_AMBA
	select ARM_GIC
	select ARM_GIC_V2M if PCI
	select ARM_GIC_V3
	select ARM_PSCI
	select HAVE_ARM_ARCH_TIMER

#
# This is sorted alphabetically by mach-* pathname.  However, plat-*
# Kconfigs may be included either alphabetically (according to the
# plat- suffix) or along side the corresponding mach-* source.
#
source "arch/arm/mach-mvebu/Kconfig"

source "arch/arm/mach-alpine/Kconfig"

source "arch/arm/mach-artpec/Kconfig"

source "arch/arm/mach-asm9260/Kconfig"

source "arch/arm/mach-at91/Kconfig"

source "arch/arm/mach-axxia/Kconfig"

source "arch/arm/mach-bcm/Kconfig"

source "arch/arm/mach-berlin/Kconfig"

source "arch/arm/mach-clps711x/Kconfig"

source "arch/arm/mach-cns3xxx/Kconfig"

source "arch/arm/mach-davinci/Kconfig"

source "arch/arm/mach-digicolor/Kconfig"

source "arch/arm/mach-dove/Kconfig"

source "arch/arm/mach-ep93xx/Kconfig"

source "arch/arm/mach-footbridge/Kconfig"

source "arch/arm/mach-gemini/Kconfig"

source "arch/arm/mach-highbank/Kconfig"

source "arch/arm/mach-hisi/Kconfig"

source "arch/arm/mach-integrator/Kconfig"

source "arch/arm/mach-iop32x/Kconfig"

source "arch/arm/mach-iop33x/Kconfig"

source "arch/arm/mach-iop13xx/Kconfig"

source "arch/arm/mach-ixp4xx/Kconfig"

source "arch/arm/mach-keystone/Kconfig"

source "arch/arm/mach-ks8695/Kconfig"

source "arch/arm/mach-meson/Kconfig"

source "arch/arm/mach-moxart/Kconfig"

source "arch/arm/mach-aspeed/Kconfig"

source "arch/arm/mach-mv78xx0/Kconfig"

source "arch/arm/mach-imx/Kconfig"

source "arch/arm/mach-mediatek/Kconfig"

source "arch/arm/mach-mxs/Kconfig"

source "arch/arm/mach-netx/Kconfig"

source "arch/arm/mach-nomadik/Kconfig"

source "arch/arm/mach-nspire/Kconfig"

source "arch/arm/plat-omap/Kconfig"

source "arch/arm/mach-omap1/Kconfig"

source "arch/arm/mach-omap2/Kconfig"

source "arch/arm/mach-orion5x/Kconfig"

source "arch/arm/mach-picoxcell/Kconfig"

source "arch/arm/mach-pxa/Kconfig"
source "arch/arm/plat-pxa/Kconfig"

source "arch/arm/mach-mmp/Kconfig"

source "arch/arm/mach-oxnas/Kconfig"

source "arch/arm/mach-qcom/Kconfig"

source "arch/arm/mach-realview/Kconfig"

source "arch/arm/mach-rockchip/Kconfig"

source "arch/arm/mach-sa1100/Kconfig"

source "arch/arm/mach-socfpga/Kconfig"

source "arch/arm/mach-spear/Kconfig"

source "arch/arm/mach-sti/Kconfig"

source "arch/arm/mach-s3c24xx/Kconfig"

source "arch/arm/mach-s3c64xx/Kconfig"

source "arch/arm/mach-s5pv210/Kconfig"

source "arch/arm/mach-exynos/Kconfig"
source "arch/arm/plat-samsung/Kconfig"

source "arch/arm/mach-shmobile/Kconfig"

source "arch/arm/mach-sunxi/Kconfig"

source "arch/arm/mach-prima2/Kconfig"

source "arch/arm/mach-tango/Kconfig"

source "arch/arm/mach-tegra/Kconfig"

source "arch/arm/mach-u300/Kconfig"

source "arch/arm/mach-uniphier/Kconfig"

source "arch/arm/mach-ux500/Kconfig"

source "arch/arm/mach-versatile/Kconfig"

source "arch/arm/mach-vexpress/Kconfig"
source "arch/arm/plat-versatile/Kconfig"

source "arch/arm/mach-vt8500/Kconfig"

source "arch/arm/mach-w90x900/Kconfig"

source "arch/arm/mach-zx/Kconfig"

source "arch/arm/mach-zynq/Kconfig"

# ARMv7-M architecture
config ARCH_EFM32
	bool "Energy Micro efm32"
	depends on ARM_SINGLE_ARMV7M
	select GPIOLIB
	help
	  Support for Energy Micro's (now Silicon Labs) efm32 Giant Gecko
	  processors.

config ARCH_LPC18XX
	bool "NXP LPC18xx/LPC43xx"
	depends on ARM_SINGLE_ARMV7M
	select ARCH_HAS_RESET_CONTROLLER
	select ARM_AMBA
	select CLKSRC_LPC32XX
	select PINCTRL
	help
	  Support for NXP's LPC18xx Cortex-M3 and LPC43xx Cortex-M4
	  high performance microcontrollers.

config ARCH_STM32
	bool "STMicrolectronics STM32"
	depends on ARM_SINGLE_ARMV7M
	select ARCH_HAS_RESET_CONTROLLER
	select ARMV7M_SYSTICK
	select CLKSRC_STM32
	select PINCTRL
	select RESET_CONTROLLER
	select STM32_EXTI
	help
	  Support for STMicroelectronics STM32 processors.

config MACH_STM32F429
	bool "STMicrolectronics STM32F429"
	depends on ARCH_STM32
	default y

config ARCH_MPS2
	bool "ARM MPS2 platform"
	depends on ARM_SINGLE_ARMV7M
	select ARM_AMBA
	select CLKSRC_MPS2
	help
	  Support for Cortex-M Prototyping System (or V2M-MPS2) which comes
	  with a range of available cores like Cortex-M3/M4/M7.

	  Please, note that depends which Application Note is used memory map
	  for the platform may vary, so adjustment of RAM base might be needed.

# Definitions to make life easier
config ARCH_ACORN
	bool

config PLAT_IOP
	bool
	select GENERIC_CLOCKEVENTS

config PLAT_ORION
	bool
	select CLKSRC_MMIO
	select COMMON_CLK
	select GENERIC_IRQ_CHIP
	select IRQ_DOMAIN

config PLAT_ORION_LEGACY
	bool
	select PLAT_ORION

config PLAT_PXA
	bool

config PLAT_VERSATILE
	bool

if IPIPE
config IPIPE_ARM_KUSER_TSC
       bool
       select GENERIC_TIME_VSYSCALL
       select IPIPE_HAVE_HOSTRT if IPIPE
       default y if ARCH_AT91 || ARM_TIMER_SP804 || ARCH_MXC || ARCH_OMAP || PLAT_PXA || PLAT_S3C24XX || ARCH_SA1100
endif

source "arch/arm/firmware/Kconfig"

source arch/arm/mm/Kconfig

config IWMMXT
	bool "Enable iWMMXt support"
	depends on CPU_XSCALE || CPU_XSC3 || CPU_MOHAWK || CPU_PJ4 || CPU_PJ4B
	default y if PXA27x || PXA3xx || ARCH_MMP || CPU_PJ4 || CPU_PJ4B
	help
	  Enable support for iWMMXt context switching at run time if
	  running on a CPU that supports it.

config MULTI_IRQ_HANDLER
	bool
	help
	  Allow each machine to specify it's own IRQ handler at run time.

if !MMU
source "arch/arm/Kconfig-nommu"
endif

config PJ4B_ERRATA_4742
	bool "PJ4B Errata 4742: IDLE Wake Up Commands can Cause the CPU Core to Cease Operation"
	depends on CPU_PJ4B && MACH_ARMADA_370
	default y
	help
	  When coming out of either a Wait for Interrupt (WFI) or a Wait for
	  Event (WFE) IDLE states, a specific timing sensitivity exists between
	  the retiring WFI/WFE instructions and the newly issued subsequent
	  instructions.  This sensitivity can result in a CPU hang scenario.
	  Workaround:
	  The software must insert either a Data Synchronization Barrier (DSB)
	  or Data Memory Barrier (DMB) command immediately after the WFI/WFE
	  instruction

config ARM_ERRATA_326103
	bool "ARM errata: FSR write bit incorrect on a SWP to read-only memory"
	depends on CPU_V6
	help
	  Executing a SWP instruction to read-only memory does not set bit 11
	  of the FSR on the ARM 1136 prior to r1p0. This causes the kernel to
	  treat the access as a read, preventing a COW from occurring and
	  causing the faulting task to livelock.

config ARM_ERRATA_411920
	bool "ARM errata: Invalidation of the Instruction Cache operation can fail"
	depends on CPU_V6 || CPU_V6K
	help
	  Invalidation of the Instruction Cache operation can
	  fail. This erratum is present in 1136 (before r1p4), 1156 and 1176.
	  It does not affect the MPCore. This option enables the ARM Ltd.
	  recommended workaround.

config ARM_ERRATA_430973
	bool "ARM errata: Stale prediction on replaced interworking branch"
	depends on CPU_V7
	help
	  This option enables the workaround for the 430973 Cortex-A8
	  r1p* erratum. If a code sequence containing an ARM/Thumb
	  interworking branch is replaced with another code sequence at the
	  same virtual address, whether due to self-modifying code or virtual
	  to physical address re-mapping, Cortex-A8 does not recover from the
	  stale interworking branch prediction. This results in Cortex-A8
	  executing the new code sequence in the incorrect ARM or Thumb state.
	  The workaround enables the BTB/BTAC operations by setting ACTLR.IBE
	  and also flushes the branch target cache at every context switch.
	  Note that setting specific bits in the ACTLR register may not be
	  available in non-secure mode.

config ARM_ERRATA_458693
	bool "ARM errata: Processor deadlock when a false hazard is created"
	depends on CPU_V7
	depends on !ARCH_MULTIPLATFORM
	help
	  This option enables the workaround for the 458693 Cortex-A8 (r2p0)
	  erratum. For very specific sequences of memory operations, it is
	  possible for a hazard condition intended for a cache line to instead
	  be incorrectly associated with a different cache line. This false
	  hazard might then cause a processor deadlock. The workaround enables
	  the L1 caching of the NEON accesses and disables the PLD instruction
	  in the ACTLR register. Note that setting specific bits in the ACTLR
	  register may not be available in non-secure mode.

config ARM_ERRATA_460075
	bool "ARM errata: Data written to the L2 cache can be overwritten with stale data"
	depends on CPU_V7
	depends on !ARCH_MULTIPLATFORM
	help
	  This option enables the workaround for the 460075 Cortex-A8 (r2p0)
	  erratum. Any asynchronous access to the L2 cache may encounter a
	  situation in which recent store transactions to the L2 cache are lost
	  and overwritten with stale memory contents from external memory. The
	  workaround disables the write-allocate mode for the L2 cache via the
	  ACTLR register. Note that setting specific bits in the ACTLR register
	  may not be available in non-secure mode.

config ARM_ERRATA_742230
	bool "ARM errata: DMB operation may be faulty"
	depends on CPU_V7 && SMP
	depends on !ARCH_MULTIPLATFORM
	help
	  This option enables the workaround for the 742230 Cortex-A9
	  (r1p0..r2p2) erratum. Under rare circumstances, a DMB instruction
	  between two write operations may not ensure the correct visibility
	  ordering of the two writes. This workaround sets a specific bit in
	  the diagnostic register of the Cortex-A9 which causes the DMB
	  instruction to behave as a DSB, ensuring the correct behaviour of
	  the two writes.

config ARM_ERRATA_742231
	bool "ARM errata: Incorrect hazard handling in the SCU may lead to data corruption"
	depends on CPU_V7 && SMP
	depends on !ARCH_MULTIPLATFORM
	help
	  This option enables the workaround for the 742231 Cortex-A9
	  (r2p0..r2p2) erratum. Under certain conditions, specific to the
	  Cortex-A9 MPCore micro-architecture, two CPUs working in SMP mode,
	  accessing some data located in the same cache line, may get corrupted
	  data due to bad handling of the address hazard when the line gets
	  replaced from one of the CPUs at the same time as another CPU is
	  accessing it. This workaround sets specific bits in the diagnostic
	  register of the Cortex-A9 which reduces the linefill issuing
	  capabilities of the processor.

config ARM_ERRATA_643719
	bool "ARM errata: LoUIS bit field in CLIDR register is incorrect"
	depends on CPU_V7 && SMP
	default y
	help
	  This option enables the workaround for the 643719 Cortex-A9 (prior to
	  r1p0) erratum. On affected cores the LoUIS bit field of the CLIDR
	  register returns zero when it should return one. The workaround
	  corrects this value, ensuring cache maintenance operations which use
	  it behave as intended and avoiding data corruption.

config ARM_ERRATA_720789
	bool "ARM errata: TLBIASIDIS and TLBIMVAIS operations can broadcast a faulty ASID"
	depends on CPU_V7
	help
	  This option enables the workaround for the 720789 Cortex-A9 (prior to
	  r2p0) erratum. A faulty ASID can be sent to the other CPUs for the
	  broadcasted CP15 TLB maintenance operations TLBIASIDIS and TLBIMVAIS.
	  As a consequence of this erratum, some TLB entries which should be
	  invalidated are not, resulting in an incoherency in the system page
	  tables. The workaround changes the TLB flushing routines to invalidate
	  entries regardless of the ASID.

config ARM_ERRATA_743622
	bool "ARM errata: Faulty hazard checking in the Store Buffer may lead to data corruption"
	depends on CPU_V7
	depends on !ARCH_MULTIPLATFORM
	help
	  This option enables the workaround for the 743622 Cortex-A9
	  (r2p*) erratum. Under very rare conditions, a faulty
	  optimisation in the Cortex-A9 Store Buffer may lead to data
	  corruption. This workaround sets a specific bit in the diagnostic
	  register of the Cortex-A9 which disables the Store Buffer
	  optimisation, preventing the defect from occurring. This has no
	  visible impact on the overall performance or power consumption of the
	  processor.

config ARM_ERRATA_751472
	bool "ARM errata: Interrupted ICIALLUIS may prevent completion of broadcasted operation"
	depends on CPU_V7
	depends on !ARCH_MULTIPLATFORM
	help
	  This option enables the workaround for the 751472 Cortex-A9 (prior
	  to r3p0) erratum. An interrupted ICIALLUIS operation may prevent the
	  completion of a following broadcasted operation if the second
	  operation is received by a CPU before the ICIALLUIS has completed,
	  potentially leading to corrupted entries in the cache or TLB.

config ARM_ERRATA_754322
	bool "ARM errata: possible faulty MMU translations following an ASID switch"
	depends on CPU_V7
	help
	  This option enables the workaround for the 754322 Cortex-A9 (r2p*,
	  r3p*) erratum. A speculative memory access may cause a page table walk
	  which starts prior to an ASID switch but completes afterwards. This
	  can populate the micro-TLB with a stale entry which may be hit with
	  the new ASID. This workaround places two dsb instructions in the mm
	  switching code so that no page table walks can cross the ASID switch.

config ARM_ERRATA_754327
	bool "ARM errata: no automatic Store Buffer drain"
	depends on CPU_V7 && SMP
	help
	  This option enables the workaround for the 754327 Cortex-A9 (prior to
	  r2p0) erratum. The Store Buffer does not have any automatic draining
	  mechanism and therefore a livelock may occur if an external agent
	  continuously polls a memory location waiting to observe an update.
	  This workaround defines cpu_relax() as smp_mb(), preventing correctly
	  written polling loops from denying visibility of updates to memory.

config ARM_ERRATA_364296
	bool "ARM errata: Possible cache data corruption with hit-under-miss enabled"
	depends on CPU_V6
	help
	  This options enables the workaround for the 364296 ARM1136
	  r0p2 erratum (possible cache data corruption with
	  hit-under-miss enabled). It sets the undocumented bit 31 in
	  the auxiliary control register and the FI bit in the control
	  register, thus disabling hit-under-miss without putting the
	  processor into full low interrupt latency mode. ARM11MPCore
	  is not affected.

config ARM_ERRATA_764369
	bool "ARM errata: Data cache line maintenance operation by MVA may not succeed"
	depends on CPU_V7 && SMP
	help
	  This option enables the workaround for erratum 764369
	  affecting Cortex-A9 MPCore with two or more processors (all
	  current revisions). Under certain timing circumstances, a data
	  cache line maintenance operation by MVA targeting an Inner
	  Shareable memory region may fail to proceed up to either the
	  Point of Coherency or to the Point of Unification of the
	  system. This workaround adds a DSB instruction before the
	  relevant cache maintenance functions and sets a specific bit
	  in the diagnostic control register of the SCU.

config ARM_ERRATA_775420
       bool "ARM errata: A data cache maintenance operation which aborts, might lead to deadlock"
       depends on CPU_V7
       help
	 This option enables the workaround for the 775420 Cortex-A9 (r2p2,
	 r2p6,r2p8,r2p10,r3p0) erratum. In case a date cache maintenance
	 operation aborts with MMU exception, it might cause the processor
	 to deadlock. This workaround puts DSB before executing ISB if
	 an abort may occur on cache maintenance.

config ARM_ERRATA_798181
	bool "ARM errata: TLBI/DSB failure on Cortex-A15"
	depends on CPU_V7 && SMP
	help
	  On Cortex-A15 (r0p0..r3p2) the TLBI*IS/DSB operations are not
	  adequately shooting down all use of the old entries. This
	  option enables the Linux kernel workaround for this erratum
	  which sends an IPI to the CPUs that are running the same ASID
	  as the one being invalidated.

config ARM_ERRATA_773022
	bool "ARM errata: incorrect instructions may be executed from loop buffer"
	depends on CPU_V7
	help
	  This option enables the workaround for the 773022 Cortex-A15
	  (up to r0p4) erratum. In certain rare sequences of code, the
	  loop buffer may deliver incorrect instructions. This
	  workaround disables the loop buffer to avoid the erratum.

config ARM_ERRATA_818325_852422
	bool "ARM errata: A12: some seqs of opposed cond code instrs => deadlock or corruption"
	depends on CPU_V7
	help
	  This option enables the workaround for:
	  - Cortex-A12 818325: Execution of an UNPREDICTABLE STR or STM
	    instruction might deadlock.  Fixed in r0p1.
	  - Cortex-A12 852422: Execution of a sequence of instructions might
	    lead to either a data corruption or a CPU deadlock.  Not fixed in
	    any Cortex-A12 cores yet.
	  This workaround for all both errata involves setting bit[12] of the
	  Feature Register. This bit disables an optimisation applied to a
	  sequence of 2 instructions that use opposing condition codes.

config ARM_ERRATA_821420
	bool "ARM errata: A12: sequence of VMOV to core registers might lead to a dead lock"
	depends on CPU_V7
	help
	  This option enables the workaround for the 821420 Cortex-A12
	  (all revs) erratum. In very rare timing conditions, a sequence
	  of VMOV to Core registers instructions, for which the second
	  one is in the shadow of a branch or abort, can lead to a
	  deadlock when the VMOV instructions are issued out-of-order.

config ARM_ERRATA_825619
	bool "ARM errata: A12: DMB NSHST/ISHST mixed ... might cause deadlock"
	depends on CPU_V7
	help
	  This option enables the workaround for the 825619 Cortex-A12
	  (all revs) erratum. Within rare timing constraints, executing a
	  DMB NSHST or DMB ISHST instruction followed by a mix of Cacheable
	  and Device/Strongly-Ordered loads and stores might cause deadlock

config ARM_ERRATA_852421
	bool "ARM errata: A17: DMB ST might fail to create order between stores"
	depends on CPU_V7
	help
	  This option enables the workaround for the 852421 Cortex-A17
	  (r1p0, r1p1, r1p2) erratum. Under very rare timing conditions,
	  execution of a DMB ST instruction might fail to properly order
	  stores from GroupA and stores from GroupB.

config ARM_ERRATA_852423
	bool "ARM errata: A17: some seqs of opposed cond code instrs => deadlock or corruption"
	depends on CPU_V7
	help
	  This option enables the workaround for:
	  - Cortex-A17 852423: Execution of a sequence of instructions might
	    lead to either a data corruption or a CPU deadlock.  Not fixed in
	    any Cortex-A17 cores yet.
	  This is identical to Cortex-A12 erratum 852422.  It is a separate
	  config option from the A12 erratum due to the way errata are checked
	  for and handled.

endmenu

source "arch/arm/common/Kconfig"

menu "Bus support"

config ISA
	bool
	help
	  Find out whether you have ISA slots on your motherboard.  ISA is the
	  name of a bus system, i.e. the way the CPU talks to the other stuff
	  inside your box.  Other bus systems are PCI, EISA, MicroChannel
	  (MCA) or VESA.  ISA is an older system, now being displaced by PCI;
	  newer boards don't support it.  If you have ISA, say Y, otherwise N.

# Select ISA DMA controller support
config ISA_DMA
	bool
	select ISA_DMA_API

# Select ISA DMA interface
config ISA_DMA_API
	bool

config PCI
	bool "PCI support" if MIGHT_HAVE_PCI
	help
	  Find out whether you have a PCI motherboard. PCI is the name of a
	  bus system, i.e. the way the CPU talks to the other stuff inside
	  your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
	  VESA. If you have PCI, say Y, otherwise N.

config PCI_DOMAINS
	bool
	depends on PCI

config PCI_DOMAINS_GENERIC
	def_bool PCI_DOMAINS

config PCI_NANOENGINE
	bool "BSE nanoEngine PCI support"
	depends on SA1100_NANOENGINE
	help
	  Enable PCI on the BSE nanoEngine board.

config PCI_SYSCALL
	def_bool PCI

config PCI_HOST_ITE8152
	bool
	depends on PCI && MACH_ARMCORE
	default y
	select DMABOUNCE

source "drivers/pci/Kconfig"

source "drivers/pcmcia/Kconfig"

endmenu

menu "Kernel Features"

config HAVE_SMP
	bool
	help
	  This option should be selected by machines which have an SMP-
	  capable CPU.

	  The only effect of this option is to make the SMP-related
	  options available to the user for configuration.

config SMP
	bool "Symmetric Multi-Processing"
	depends on CPU_V6K || CPU_V7
	depends on GENERIC_CLOCKEVENTS
	depends on HAVE_SMP
	depends on MMU || ARM_MPU
	select IRQ_WORK
	help
	  This enables support for systems with more than one CPU. If you have
	  a system with only one CPU, say N. If you have a system with more
	  than one CPU, say Y.

	  If you say N here, the kernel will run on uni- and multiprocessor
	  machines, but will use only one CPU of a multiprocessor machine. If
	  you say Y here, the kernel will run on many, but not all,
	  uniprocessor machines. On a uniprocessor machine, the kernel
	  will run faster if you say N here.

	  See also <file:Documentation/x86/i386/IO-APIC.txt>,
	  <file:Documentation/nmi_watchdog.txt> and the SMP-HOWTO available at
	  <http://tldp.org/HOWTO/SMP-HOWTO.html>.

	  If you don't know what to do here, say N.

config SMP_ON_UP
	bool "Allow booting SMP kernel on uniprocessor systems"
	depends on SMP && !XIP_KERNEL && MMU
	default y
	help
	  SMP kernels contain instructions which fail on non-SMP processors.
	  Enabling this option allows the kernel to modify itself to make
	  these instructions safe.  Disabling it allows about 1K of space
	  savings.

	  If you don't know what to do here, say Y.

config ARM_CPU_TOPOLOGY
	bool "Support cpu topology definition"
	depends on SMP && CPU_V7
	default y
	help
	  Support ARM cpu topology definition. The MPIDR register defines
	  affinity between processors which is then used to describe the cpu
	  topology of an ARM System.

config SCHED_MC
	bool "Multi-core scheduler support"
	depends on ARM_CPU_TOPOLOGY
	help
	  Multi-core scheduler support improves the CPU scheduler's decision
	  making when dealing with multi-core CPU chips at a cost of slightly
	  increased overhead in some places. If unsure say N here.

config SCHED_SMT
	bool "SMT scheduler support"
	depends on ARM_CPU_TOPOLOGY
	help
	  Improves the CPU scheduler's decision making when dealing with
	  MultiThreading at a cost of slightly increased overhead in some
	  places. If unsure say N here.

config HAVE_ARM_SCU
	bool
	help
	  This option enables support for the ARM system coherency unit

config HAVE_ARM_ARCH_TIMER
	bool "Architected timer support"
	depends on CPU_V7
	select ARM_ARCH_TIMER
	select GENERIC_CLOCKEVENTS
	help
	  This option enables support for the ARM architected timer

config HAVE_ARM_TWD
	bool
	select CLKSRC_OF if OF
	help
	  This options enables support for the ARM timer and watchdog unit

config MCPM
	bool "Multi-Cluster Power Management"
	depends on CPU_V7 && SMP
	help
	  This option provides the common power management infrastructure
	  for (multi-)cluster based systems, such as big.LITTLE based
	  systems.

config MCPM_QUAD_CLUSTER
	bool
	depends on MCPM
	help
	  To avoid wasting resources unnecessarily, MCPM only supports up
	  to 2 clusters by default.
	  Platforms with 3 or 4 clusters that use MCPM must select this
	  option to allow the additional clusters to be managed.

config BIG_LITTLE
	bool "big.LITTLE support (Experimental)"
	depends on CPU_V7 && SMP
	select MCPM
	help
	  This option enables support selections for the big.LITTLE
	  system architecture.

config BL_SWITCHER
	bool "big.LITTLE switcher support"
	depends on BIG_LITTLE && MCPM && HOTPLUG_CPU && ARM_GIC
	select CPU_PM
	help
	  The big.LITTLE "switcher" provides the core functionality to
	  transparently handle transition between a cluster of A15's
	  and a cluster of A7's in a big.LITTLE system.

config BL_SWITCHER_DUMMY_IF
	tristate "Simple big.LITTLE switcher user interface"
	depends on BL_SWITCHER && DEBUG_KERNEL
	help
	  This is a simple and dummy char dev interface to control
	  the big.LITTLE switcher core code.  It is meant for
	  debugging purposes only.

choice
	prompt "Memory split"
	depends on MMU
	default VMSPLIT_3G
	help
	  Select the desired split between kernel and user memory.

	  If you are not absolutely sure what you are doing, leave this
	  option alone!

	config VMSPLIT_3G
		bool "3G/1G user/kernel split"
	config VMSPLIT_3G_OPT
		bool "3G/1G user/kernel split (for full 1G low memory)"
	config VMSPLIT_2G
		bool "2G/2G user/kernel split"
	config VMSPLIT_1G
		bool "1G/3G user/kernel split"
endchoice

config PAGE_OFFSET
	hex
	default PHYS_OFFSET if !MMU
	default 0x40000000 if VMSPLIT_1G
	default 0x80000000 if VMSPLIT_2G
	default 0xB0000000 if VMSPLIT_3G_OPT
	default 0xC0000000

config NR_CPUS
	int "Maximum number of CPUs (2-32)"
	range 2 32
	depends on SMP
	default "4"

config HOTPLUG_CPU
	bool "Support for hot-pluggable CPUs"
	depends on SMP
	help
	  Say Y here to experiment with turning CPUs off and on.  CPUs
	  can be controlled through /sys/devices/system/cpu.

config ARM_PSCI
	bool "Support for the ARM Power State Coordination Interface (PSCI)"
	depends on HAVE_ARM_SMCCC
	select ARM_PSCI_FW
	help
	  Say Y here if you want Linux to communicate with system firmware
	  implementing the PSCI specification for CPU-centric power
	  management operations described in ARM document number ARM DEN
	  0022A ("Power State Coordination Interface System Software on
	  ARM processors").

# The GPIO number here must be sorted by descending number. In case of
# a multiplatform kernel, we just want the highest value required by the
# selected platforms.
config ARCH_NR_GPIO
	int
	default 1024 if ARCH_BRCMSTB || ARCH_SHMOBILE || ARCH_TEGRA || \
		ARCH_ZYNQ
	default 512 if ARCH_EXYNOS || ARCH_KEYSTONE || SOC_OMAP5 || \
		SOC_DRA7XX || ARCH_S3C24XX || ARCH_S3C64XX || ARCH_S5PV210
	default 416 if ARCH_SUNXI
	default 392 if ARCH_U8500
	default 352 if ARCH_VT8500
	default 288 if ARCH_ROCKCHIP
	default 264 if MACH_H4700
	default 0
	help
	  Maximum number of GPIOs in the system.

	  If unsure, leave the default value.

source kernel/ipipe/Kconfig

source kernel/Kconfig.preempt

config HZ_FIXED
	int
	default 200 if ARCH_EBSA110 || ARCH_S3C24XX || \
		ARCH_S5PV210 || ARCH_EXYNOS4
	default 128 if SOC_AT91RM9200
	default 0

choice
	depends on HZ_FIXED = 0
	prompt "Timer frequency"

config HZ_100
	bool "100 Hz"

config HZ_200
	bool "200 Hz"

config HZ_250
	bool "250 Hz"

config HZ_300
	bool "300 Hz"

config HZ_500
	bool "500 Hz"

config HZ_1000
	bool "1000 Hz"

endchoice

config HZ
	int
	default HZ_FIXED if HZ_FIXED != 0
	default 100 if HZ_100
	default 200 if HZ_200
	default 250 if HZ_250
	default 300 if HZ_300
	default 500 if HZ_500
	default 1000

config SCHED_HRTICK
	def_bool HIGH_RES_TIMERS

config THUMB2_KERNEL
	bool "Compile the kernel in Thumb-2 mode" if !CPU_THUMBONLY
	depends on (CPU_V7 || CPU_V7M) && !CPU_V6 && !CPU_V6K
	default y if CPU_THUMBONLY
	select AEABI
	select ARM_ASM_UNIFIED
	select ARM_UNWIND
	help
	  By enabling this option, the kernel will be compiled in
	  Thumb-2 mode. A compiler/assembler that understand the unified
	  ARM-Thumb syntax is needed.

	  If unsure, say N.

config THUMB2_AVOID_R_ARM_THM_JUMP11
	bool "Work around buggy Thumb-2 short branch relocations in gas"
	depends on THUMB2_KERNEL && MODULES
	default y
	help
	  Various binutils versions can resolve Thumb-2 branches to
	  locally-defined, preemptible global symbols as short-range "b.n"
	  branch instructions.

	  This is a problem, because there's no guarantee the final
	  destination of the symbol, or any candidate locations for a
	  trampoline, are within range of the branch.  For this reason, the
	  kernel does not support fixing up the R_ARM_THM_JUMP11 (102)
	  relocation in modules at all, and it makes little sense to add
	  support.

	  The symptom is that the kernel fails with an "unsupported
	  relocation" error when loading some modules.

	  Until fixed tools are available, passing
	  -fno-optimize-sibling-calls to gcc should prevent gcc generating
	  code which hits this problem, at the cost of a bit of extra runtime
	  stack usage in some cases.

	  The problem is described in more detail at:
	      https://bugs.launchpad.net/binutils-linaro/+bug/725126

	  Only Thumb-2 kernels are affected.

	  Unless you are sure your tools don't have this problem, say Y.

config ARM_ASM_UNIFIED
	bool

config ARM_PATCH_IDIV
	bool "Runtime patch udiv/sdiv instructions into __aeabi_{u}idiv()"
	depends on CPU_32v7 && !XIP_KERNEL
	default y
	help
	  The ARM compiler inserts calls to __aeabi_idiv() and
	  __aeabi_uidiv() when it needs to perform division on signed
	  and unsigned integers. Some v7 CPUs have support for the sdiv
	  and udiv instructions that can be used to implement those
	  functions.

	  Enabling this option allows the kernel to modify itself to
	  replace the first two instructions of these library functions
	  with the sdiv or udiv plus "bx lr" instructions when the CPU
	  it is running on supports them. Typically this will be faster
	  and less power intensive than running the original library
	  code to do integer division.

config AEABI
	bool "Use the ARM EABI to compile the kernel"
	help
	  This option allows for the kernel to be compiled using the latest
	  ARM ABI (aka EABI).  This is only useful if you are using a user
	  space environment that is also compiled with EABI.

	  Since there are major incompatibilities between the legacy ABI and
	  EABI, especially with regard to structure member alignment, this
	  option also changes the kernel syscall calling convention to
	  disambiguate both ABIs and allow for backward compatibility support
	  (selected with CONFIG_OABI_COMPAT).

	  To use this you need GCC version 4.0.0 or later.

config OABI_COMPAT
	bool "Allow old ABI binaries to run with this kernel (EXPERIMENTAL)"
	depends on AEABI && !THUMB2_KERNEL
	help
	  This option preserves the old syscall interface along with the
	  new (ARM EABI) one. It also provides a compatibility layer to
	  intercept syscalls that have structure arguments which layout
	  in memory differs between the legacy ABI and the new ARM EABI
	  (only for non "thumb" binaries). This option adds a tiny
	  overhead to all syscalls and produces a slightly larger kernel.

	  The seccomp filter system will not be available when this is
	  selected, since there is no way yet to sensibly distinguish
	  between calling conventions during filtering.

	  If you know you'll be using only pure EABI user space then you
	  can say N here. If this option is not selected and you attempt
	  to execute a legacy ABI binary then the result will be
	  UNPREDICTABLE (in fact it can be predicted that it won't work
	  at all). If in doubt say N.

config ARCH_HAS_HOLES_MEMORYMODEL
	bool

config ARCH_SPARSEMEM_ENABLE
	bool

config ARCH_SPARSEMEM_DEFAULT
	def_bool ARCH_SPARSEMEM_ENABLE

config ARCH_SELECT_MEMORY_MODEL
	def_bool ARCH_SPARSEMEM_ENABLE

config HAVE_ARCH_PFN_VALID
	def_bool ARCH_HAS_HOLES_MEMORYMODEL || !SPARSEMEM

config HAVE_GENERIC_RCU_GUP
	def_bool y
	depends on ARM_LPAE

config HIGHMEM
	bool "High Memory Support"
	depends on MMU
	help
	  The address space of ARM processors is only 4 Gigabytes large
	  and it has to accommodate user address space, kernel address
	  space as well as some memory mapped IO. That means that, if you
	  have a large amount of physical memory and/or IO, not all of the
	  memory can be "permanently mapped" by the kernel. The physical
	  memory that is not permanently mapped is called "high memory".

	  Depending on the selected kernel/user memory split, minimum
	  vmalloc space and actual amount of RAM, you may not need this
	  option which should result in a slightly faster kernel.

	  If unsure, say n.

config HIGHPTE
	bool "Allocate 2nd-level pagetables from highmem" if EXPERT
	depends on HIGHMEM
	default y
	help
	  The VM uses one page of physical memory for each page table.
	  For systems with a lot of processes, this can use a lot of
	  precious low memory, eventually leading to low memory being
	  consumed by page tables.  Setting this option will allow
	  user-space 2nd level page tables to reside in high memory.

config CPU_SW_DOMAIN_PAN
	bool "Enable use of CPU domains to implement privileged no-access"
	depends on MMU && !ARM_LPAE
	default y
	help
	  Increase kernel security by ensuring that normal kernel accesses
	  are unable to access userspace addresses.  This can help prevent
	  use-after-free bugs becoming an exploitable privilege escalation
	  by ensuring that magic values (such as LIST_POISON) will always
	  fault when dereferenced.

	  CPUs with low-vector mappings use a best-efforts implementation.
	  Their lower 1MB needs to remain accessible for the vectors, but
	  the remainder of userspace will become appropriately inaccessible.

config HW_PERF_EVENTS
	def_bool y
	depends on ARM_PMU

config SYS_SUPPORTS_HUGETLBFS
       def_bool y
       depends on ARM_LPAE

config HAVE_ARCH_TRANSPARENT_HUGEPAGE
       def_bool y
       depends on ARM_LPAE

config ARCH_WANT_GENERAL_HUGETLB
	def_bool y

config ARM_MODULE_PLTS
	bool "Use PLTs to allow module memory to spill over into vmalloc area"
	depends on MODULES
	help
	  Allocate PLTs when loading modules so that jumps and calls whose
	  targets are too far away for their relative offsets to be encoded
	  in the instructions themselves can be bounced via veneers in the
	  module's PLT. This allows modules to be allocated in the generic
	  vmalloc area after the dedicated module memory area has been
	  exhausted. The modules will use slightly more memory, but after
	  rounding up to page size, the actual memory footprint is usually
	  the same.

	  Say y if you are getting out of memory errors while loading modules

source "mm/Kconfig"

config FORCE_MAX_ZONEORDER
	int "Maximum zone order"
	default "12" if SOC_AM33XX
	default "9" if SA1111 || ARCH_EFM32
	default "11"
	help
	  The kernel memory allocator divides physically contiguous memory
	  blocks into "zones", where each zone is a power of two number of
	  pages.  This option selects the largest power of two that the kernel
	  keeps in the memory allocator.  If you need to allocate very large
	  blocks of physically contiguous memory, then you may need to
	  increase this value.

	  This config option is actually maximum order plus one. For example,
	  a value of 11 means that the largest free memory block is 2^10 pages.

config ALIGNMENT_TRAP
	bool
	depends on CPU_CP15_MMU
	default y if !ARCH_EBSA110
	select HAVE_PROC_CPU if PROC_FS
	help
	  ARM processors cannot fetch/store information which is not
	  naturally aligned on the bus, i.e., a 4 byte fetch must start at an
	  address divisible by 4. On 32-bit ARM processors, these non-aligned
	  fetch/store instructions will be emulated in software if you say
	  here, which has a severe performance impact. This is necessary for
	  correct operation of some network protocols. With an IP-only
	  configuration it is safe to say N, otherwise say Y.

config UACCESS_WITH_MEMCPY
	bool "Use kernel mem{cpy,set}() for {copy_to,clear}_user()"
	depends on MMU
	depends on !IPIPE
	default y if CPU_FEROCEON
	help
	  Implement faster copy_to_user and clear_user methods for CPU
	  cores where a 8-word STM instruction give significantly higher
	  memory write throughput than a sequence of individual 32bit stores.

	  A possible side effect is a slight increase in scheduling latency
	  between threads sharing the same address space if they invoke
	  such copy operations with large buffers.

	  However, if the CPU data cache is using a write-allocate mode,
	  this option is unlikely to provide any performance gain.

config SECCOMP
	bool
	prompt "Enable seccomp to safely compute untrusted bytecode"
	---help---
	  This kernel feature is useful for number crunching applications
	  that may need to compute untrusted bytecode during their
	  execution. By using pipes or other transports made available to
	  the process as file descriptors supporting the read/write
	  syscalls, it's possible to isolate those applications in
	  their own address space using seccomp. Once seccomp is
	  enabled via prctl(PR_SET_SECCOMP), it cannot be disabled
	  and the task is only allowed to execute a few safe syscalls
	  defined by each seccomp mode.

config SWIOTLB
	def_bool y

config IOMMU_HELPER
	def_bool SWIOTLB

config PARAVIRT
	bool "Enable paravirtualization code"
	help
	  This changes the kernel so it can modify itself when it is run
	  under a hypervisor, potentially improving performance significantly
	  over full virtualization.

config PARAVIRT_TIME_ACCOUNTING
	bool "Paravirtual steal time accounting"
	select PARAVIRT
	default n
	help
	  Select this option to enable fine granularity task steal time
	  accounting. Time spent executing other tasks in parallel with
	  the current vCPU is discounted from the vCPU power. To account for
	  that, there can be a small performance impact.

	  If in doubt, say N here.

config XEN_DOM0
	def_bool y
	depends on XEN

config XEN
	bool "Xen guest support on ARM"
	depends on ARM && AEABI && OF
	depends on CPU_V7 && !CPU_V6
	depends on !GENERIC_ATOMIC64
	depends on MMU
	select ARCH_DMA_ADDR_T_64BIT
	select ARM_PSCI
	select SWIOTLB_XEN
	select PARAVIRT
	help
	  Say Y if you want to run Linux in a Virtual Machine on Xen on ARM.

endmenu

menu "Boot options"

config USE_OF
	bool "Flattened Device Tree support"
	select IRQ_DOMAIN
	select OF
	help
	  Include support for flattened device tree machine descriptions.

config ATAGS
	bool "Support for the traditional ATAGS boot data passing" if USE_OF
	default y
	help
	  This is the traditional way of passing data to the kernel at boot
	  time. If you are solely relying on the flattened device tree (or
	  the ARM_ATAG_DTB_COMPAT option) then you may unselect this option
	  to remove ATAGS support from your kernel binary.  If unsure,
	  leave this to y.

config DEPRECATED_PARAM_STRUCT
	bool "Provide old way to pass kernel parameters"
	depends on ATAGS
	help
	  This was deprecated in 2001 and announced to live on for 5 years.
	  Some old boot loaders still use this way.

# Compressed boot loader in ROM.  Yes, we really want to ask about
# TEXT and BSS so we preserve their values in the config files.
config ZBOOT_ROM_TEXT
	hex "Compressed ROM boot loader base address"
	default "0"
	help
	  The physical address at which the ROM-able zImage is to be
	  placed in the target.  Platforms which normally make use of
	  ROM-able zImage formats normally set this to a suitable
	  value in their defconfig file.

	  If ZBOOT_ROM is not enabled, this has no effect.

config ZBOOT_ROM_BSS
	hex "Compressed ROM boot loader BSS address"
	default "0"
	help
	  The base address of an area of read/write memory in the target
	  for the ROM-able zImage which must be available while the
	  decompressor is running. It must be large enough to hold the
	  entire decompressed kernel plus an additional 128 KiB.
	  Platforms which normally make use of ROM-able zImage formats
	  normally set this to a suitable value in their defconfig file.

	  If ZBOOT_ROM is not enabled, this has no effect.

config ZBOOT_ROM
	bool "Compressed boot loader in ROM/flash"
	depends on ZBOOT_ROM_TEXT != ZBOOT_ROM_BSS
	depends on !ARM_APPENDED_DTB && !XIP_KERNEL && !AUTO_ZRELADDR
	help
	  Say Y here if you intend to execute your compressed kernel image
	  (zImage) directly from ROM or flash.  If unsure, say N.

config ARM_APPENDED_DTB
	bool "Use appended device tree blob to zImage (EXPERIMENTAL)"
	depends on OF
	help
	  With this option, the boot code will look for a device tree binary
	  (DTB) appended to zImage
	  (e.g. cat zImage <filename>.dtb > zImage_w_dtb).

	  This is meant as a backward compatibility convenience for those
	  systems with a bootloader that can't be upgraded to accommodate
	  the documented boot protocol using a device tree.

	  Beware that there is very little in terms of protection against
	  this option being confused by leftover garbage in memory that might
	  look like a DTB header after a reboot if no actual DTB is appended
	  to zImage.  Do not leave this option active in a production kernel
	  if you don't intend to always append a DTB.  Proper passing of the
	  location into r2 of a bootloader provided DTB is always preferable
	  to this option.

config ARM_ATAG_DTB_COMPAT
	bool "Supplement the appended DTB with traditional ATAG information"
	depends on ARM_APPENDED_DTB
	help
	  Some old bootloaders can't be updated to a DTB capable one, yet
	  they provide ATAGs with memory configuration, the ramdisk address,
	  the kernel cmdline string, etc.  Such information is dynamically
	  provided by the bootloader and can't always be stored in a static
	  DTB.  To allow a device tree enabled kernel to be used with such
	  bootloaders, this option allows zImage to extract the information
	  from the ATAG list and store it at run time into the appended DTB.

choice
	prompt "Kernel command line type" if ARM_ATAG_DTB_COMPAT
	default ARM_ATAG_DTB_COMPAT_CMDLINE_FROM_BOOTLOADER

config ARM_ATAG_DTB_COMPAT_CMDLINE_FROM_BOOTLOADER
	bool "Use bootloader kernel arguments if available"
	help
	  Uses the command-line options passed by the boot loader instead of
	  the device tree bootargs property. If the boot loader doesn't provide
	  any, the device tree bootargs property will be used.

config ARM_ATAG_DTB_COMPAT_CMDLINE_EXTEND
	bool "Extend with bootloader kernel arguments"
	help
	  The command-line arguments provided by the boot loader will be
	  appended to the the device tree bootargs property.

endchoice

config CMDLINE
	string "Default kernel command string"
	default ""
	help
	  On some architectures (EBSA110 and CATS), there is currently no way
	  for the boot loader to pass arguments to the kernel. For these
	  architectures, you should supply some command-line options at build
	  time by entering them here. As a minimum, you should specify the
	  memory size and the root device (e.g., mem=64M root=/dev/nfs).

choice
	prompt "Kernel command line type" if CMDLINE != ""
	default CMDLINE_FROM_BOOTLOADER
	depends on ATAGS

config CMDLINE_FROM_BOOTLOADER
	bool "Use bootloader kernel arguments if available"
	help
	  Uses the command-line options passed by the boot loader. If
	  the boot loader doesn't provide any, the default kernel command
	  string provided in CMDLINE will be used.

config CMDLINE_EXTEND
	bool "Extend bootloader kernel arguments"
	help
	  The command-line arguments provided by the boot loader will be
	  appended to the default kernel command string.

config CMDLINE_FORCE
	bool "Always use the default kernel command string"
	help
	  Always use the default kernel command string, even if the boot
	  loader passes other arguments to the kernel.
	  This is useful if you cannot or don't want to change the
	  command-line options your boot loader passes to the kernel.
endchoice

config XIP_KERNEL
	bool "Kernel Execute-In-Place from ROM"
	depends on !ARM_LPAE && !ARCH_MULTIPLATFORM
	help
	  Execute-In-Place allows the kernel to run from non-volatile storage
	  directly addressable by the CPU, such as NOR flash. This saves RAM
	  space since the text section of the kernel is not loaded from flash
	  to RAM.  Read-write sections, such as the data section and stack,
	  are still copied to RAM.  The XIP kernel is not compressed since
	  it has to run directly from flash, so it will take more space to
	  store it.  The flash address used to link the kernel object files,
	  and for storing it, is configuration dependent. Therefore, if you
	  say Y here, you must know the proper physical address where to
	  store the kernel image depending on your own flash memory usage.

	  Also note that the make target becomes "make xipImage" rather than
	  "make zImage" or "make Image".  The final kernel binary to put in
	  ROM memory will be arch/arm/boot/xipImage.

	  If unsure, say N.

config XIP_PHYS_ADDR
	hex "XIP Kernel Physical Location"
	depends on XIP_KERNEL
	default "0x00080000"
	help
	  This is the physical address in your flash memory the kernel will
	  be linked for and stored to.  This address is dependent on your
	  own flash usage.

config KEXEC
	bool "Kexec system call (EXPERIMENTAL)"
	depends on (!SMP || PM_SLEEP_SMP)
	depends on !CPU_V7M
	select KEXEC_CORE
	help
	  kexec is a system call that implements the ability to shutdown your
	  current kernel, and to start another kernel.  It is like a reboot
	  but it is independent of the system firmware.   And like a reboot
	  you can start any kernel with it, not just Linux.

	  It is an ongoing process to be certain the hardware in a machine
	  is properly shutdown, so do not be surprised if this code does not
	  initially work for you.

config ATAGS_PROC
	bool "Export atags in procfs"
	depends on ATAGS && KEXEC
	default y
	help
	  Should the atags used to boot the kernel be exported in an "atags"
	  file in procfs. Useful with kexec.

config CRASH_DUMP
	bool "Build kdump crash kernel (EXPERIMENTAL)"
	help
	  Generate crash dump after being started by kexec. This should
	  be normally only set in special crash dump kernels which are
	  loaded in the main kernel with kexec-tools into a specially
	  reserved region and then later executed after a crash by
	  kdump/kexec. The crash dump kernel must be compiled to a
	  memory address not used by the main kernel

	  For more details see Documentation/kdump/kdump.txt

config AUTO_ZRELADDR
	bool "Auto calculation of the decompressed kernel image address"
	help
	  ZRELADDR is the physical address where the decompressed kernel
	  image will be placed. If AUTO_ZRELADDR is selected, the address
	  will be determined at run-time by masking the current IP with
	  0xf8000000. This assumes the zImage being placed in the first 128MB
	  from start of memory.

config EFI_STUB
	bool

config EFI
	bool "UEFI runtime support"
	depends on OF && !CPU_BIG_ENDIAN && MMU && AUTO_ZRELADDR && !XIP_KERNEL
	select UCS2_STRING
	select EFI_PARAMS_FROM_FDT
	select EFI_STUB
	select EFI_ARMSTUB
	select EFI_RUNTIME_WRAPPERS
	---help---
	  This option provides support for runtime services provided
	  by UEFI firmware (such as non-volatile variables, realtime
	  clock, and platform reset). A UEFI stub is also provided to
	  allow the kernel to be booted as an EFI application. This
	  is only useful for kernels that may run on systems that have
	  UEFI firmware.

endmenu

menu "CPU Power Management"

source "drivers/cpufreq/Kconfig"

source "drivers/cpuidle/Kconfig"

endmenu

menu "Floating point emulation"

comment "At least one emulation must be selected"

config FPE_NWFPE
	bool "NWFPE math emulation"
	depends on (!AEABI || OABI_COMPAT) && !THUMB2_KERNEL
	---help---
	  Say Y to include the NWFPE floating point emulator in the kernel.
	  This is necessary to run most binaries. Linux does not currently
	  support floating point hardware so you need to say Y here even if
	  your machine has an FPA or floating point co-processor podule.

	  You may say N here if you are going to load the Acorn FPEmulator
	  early in the bootup.

config FPE_NWFPE_XP
	bool "Support extended precision"
	depends on FPE_NWFPE
	help
	  Say Y to include 80-bit support in the kernel floating-point
	  emulator.  Otherwise, only 32 and 64-bit support is compiled in.
	  Note that gcc does not generate 80-bit operations by default,
	  so in most cases this option only enlarges the size of the
	  floating point emulator without any good reason.

	  You almost surely want to say N here.

config FPE_FASTFPE
	bool "FastFPE math emulation (EXPERIMENTAL)"
	depends on (!AEABI || OABI_COMPAT) && !CPU_32v3
	---help---
	  Say Y here to include the FAST floating point emulator in the kernel.
	  This is an experimental much faster emulator which now also has full
	  precision for the mantissa.  It does not support any exceptions.
	  It is very simple, and approximately 3-6 times faster than NWFPE.

	  It should be sufficient for most programs.  It may be not suitable
	  for scientific calculations, but you have to check this for yourself.
	  If you do not feel you need a faster FP emulation you should better
	  choose NWFPE.

config VFP
	bool "VFP-format floating point maths"
	depends on CPU_V6 || CPU_V6K || CPU_ARM926T || CPU_V7 || CPU_FEROCEON
	help
	  Say Y to include VFP support code in the kernel. This is needed
	  if your hardware includes a VFP unit.

	  Please see <file:Documentation/arm/VFP/release-notes.txt> for
	  release notes and additional status information.

	  Say N if your target does not have VFP hardware.

config VFPv3
	bool
	depends on VFP
	default y if CPU_V7

config NEON
	bool "Advanced SIMD (NEON) Extension support"
	depends on VFPv3 && CPU_V7
	help
	  Say Y to include support code for NEON, the ARMv7 Advanced SIMD
	  Extension.

config KERNEL_MODE_NEON
	bool "Support for NEON in kernel mode"
	depends on NEON && AEABI
	help
	  Say Y to include support for NEON in kernel mode.

endmenu

menu "Userspace binary formats"

source "fs/Kconfig.binfmt"

endmenu

menu "Power management options"

source "kernel/power/Kconfig"

config ARCH_SUSPEND_POSSIBLE
	depends on CPU_ARM920T || CPU_ARM926T || CPU_FEROCEON || CPU_SA1100 || \
		CPU_V6 || CPU_V6K || CPU_V7 || CPU_V7M || CPU_XSC3 || CPU_XSCALE || CPU_MOHAWK
	def_bool y

config ARM_CPU_SUSPEND
	def_bool PM_SLEEP || BL_SWITCHER || ARM_PSCI_FW
	depends on ARCH_SUSPEND_POSSIBLE

config ARCH_HIBERNATION_POSSIBLE
	bool
	depends on MMU
	default y if ARCH_SUSPEND_POSSIBLE

endmenu

source "net/Kconfig"

source "drivers/Kconfig"

source "drivers/firmware/Kconfig"

source "fs/Kconfig"

source "arch/arm/Kconfig.debug"

source "security/Kconfig"

source "crypto/Kconfig"
if CRYPTO
source "arch/arm/crypto/Kconfig"
endif

source "lib/Kconfig"

source "arch/arm/kvm/Kconfig"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * This file is subject to the terms and conditions of the GNU General Public
 * License.  See the file "COPYING" in the main directory of this archive
 * for more details.
 *
 * SGI UV MMR definitions
 *
 * Copyright (C) 2007-2016 Silicon Graphics, Inc. All rights reserved.
 */

#ifndef _ASM_X86_UV_UV_MMRS_H
#define _ASM_X86_UV_UV_MMRS_H

/*
 * This file contains MMR definitions for all UV hubs types.
 *
 * To minimize coding differences between hub types, the symbols are
 * grouped by architecture types.
 *
 * UVH  - definitions common to all UV hub types.
 * UVXH - definitions common to all UV eXtended hub types (currently 2, 3, 4).
 * UV1H - definitions specific to UV type 1 hub.
 * UV2H - definitions specific to UV type 2 hub.
 * UV3H - definitions specific to UV type 3 hub.
 * UV4H - definitions specific to UV type 4 hub.
 *
 * So in general, MMR addresses and structures are identical on all hubs types.
 * These MMRs are identified as:
 *	#define UVH_xxx		<address>
 *	union uvh_xxx {
 *		unsigned long       v;
 *		struct uvh_int_cmpd_s {
 *		} s;
 *	};
 *
 * If the MMR exists on all hub types but have different addresses,
 * use a conditional operator to define the value at runtime.
 *	#define UV1Hxxx	a
 *	#define UV2Hxxx	b
 *	#define UV3Hxxx	c
 *	#define UV4Hxxx	d
 *	#define UVHxxx	(is_uv1_hub() ? UV1Hxxx :
 *			(is_uv2_hub() ? UV2Hxxx :
 *			(is_uv3_hub() ? UV3Hxxx :
 *					UV4Hxxx))
 *
 * If the MMR exists on all hub types > 1 but have different addresses, the
 * variation using "UVX" as the prefix exists.
 *	#define UV2Hxxx	b
 *	#define UV3Hxxx	c
 *	#define UV4Hxxx	d
 *	#define UVHxxx	(is_uv2_hub() ? UV2Hxxx :
 *			(is_uv3_hub() ? UV3Hxxx :
 *					UV4Hxxx))
 *
 *	union uvh_xxx {
 *		unsigned long       v;
 *		struct uvh_xxx_s {	 # Common fields only
 *		} s;
 *		struct uv1h_xxx_s {	 # Full UV1 definition (*)
 *		} s1;
 *		struct uv2h_xxx_s {	 # Full UV2 definition (*)
 *		} s2;
 *		struct uv3h_xxx_s {	 # Full UV3 definition (*)
 *		} s3;
 *		struct uv4h_xxx_s {	 # Full UV4 definition (*)
 *		} s4;
 *	};
 *		(* - if present and different than the common struct)
 *
 * Only essential differences are enumerated. For example, if the address is
 * the same for all UV's, only a single #define is generated. Likewise,
 * if the contents is the same for all hubs, only the "s" structure is
 * generated.
 *
 * If the MMR exists on ONLY 1 type of hub, no generic definition is
 * generated:
 *	#define UVnH_xxx	<uvn address>
 *	union uvnh_xxx {
 *		unsigned long       v;
 *		struct uvh_int_cmpd_s {
 *		} sn;
 *	};
 *
 * (GEN Flags: mflags_opt= undefs=function UV234=UVXH)
 */

#define UV_MMR_ENABLE		(1UL << 63)

#define UV1_HUB_PART_NUMBER	0x88a5
#define UV2_HUB_PART_NUMBER	0x8eb8
#define UV2_HUB_PART_NUMBER_X	0x1111
#define UV3_HUB_PART_NUMBER	0x9578
#define UV3_HUB_PART_NUMBER_X	0x4321
#define UV4_HUB_PART_NUMBER	0x99a1

/* Compat: Indicate which UV Hubs are supported. */
#define UV1_HUB_IS_SUPPORTED	1
#define UV2_HUB_IS_SUPPORTED	1
#define UV3_HUB_IS_SUPPORTED	1
#define UV4_HUB_IS_SUPPORTED	1

/* Error function to catch undefined references */
extern unsigned long uv_undefined(char *str);

/* ========================================================================= */
/*                          UVH_BAU_DATA_BROADCAST                           */
/* ========================================================================= */
#define UVH_BAU_DATA_BROADCAST 0x61688UL

#define UV1H_BAU_DATA_BROADCAST_32 0x440
#define UV2H_BAU_DATA_BROADCAST_32 0x440
#define UV3H_BAU_DATA_BROADCAST_32 0x440
#define UV4H_BAU_DATA_BROADCAST_32 0x360
#define UVH_BAU_DATA_BROADCAST_32 (					\
	is_uv1_hub() ? UV1H_BAU_DATA_BROADCAST_32 :			\
	is_uv2_hub() ? UV2H_BAU_DATA_BROADCAST_32 :			\
	is_uv3_hub() ? UV3H_BAU_DATA_BROADCAST_32 :			\
	/*is_uv4_hub*/ UV4H_BAU_DATA_BROADCAST_32)

#define UVH_BAU_DATA_BROADCAST_ENABLE_SHFT		0
#define UVH_BAU_DATA_BROADCAST_ENABLE_MASK		0x0000000000000001UL


union uvh_bau_data_broadcast_u {
	unsigned long	v;
	struct uvh_bau_data_broadcast_s {
		unsigned long	enable:1;			/* RW */
		unsigned long	rsvd_1_63:63;
	} s;
};

/* ========================================================================= */
/*                           UVH_BAU_DATA_CONFIG                             */
/* ========================================================================= */
#define UVH_BAU_DATA_CONFIG 0x61680UL

#define UV1H_BAU_DATA_CONFIG_32 0x438
#define UV2H_BAU_DATA_CONFIG_32 0x438
#define UV3H_BAU_DATA_CONFIG_32 0x438
#define UV4H_BAU_DATA_CONFIG_32 0x358
#define UVH_BAU_DATA_CONFIG_32 (					\
	is_uv1_hub() ? UV1H_BAU_DATA_CONFIG_32 :			\
	is_uv2_hub() ? UV2H_BAU_DATA_CONFIG_32 :			\
	is_uv3_hub() ? UV3H_BAU_DATA_CONFIG_32 :			\
	/*is_uv4_hub*/ UV4H_BAU_DATA_CONFIG_32)

#define UVH_BAU_DATA_CONFIG_VECTOR_SHFT			0
#define UVH_BAU_DATA_CONFIG_DM_SHFT			8
#define UVH_BAU_DATA_CONFIG_DESTMODE_SHFT		11
#define UVH_BAU_DATA_CONFIG_STATUS_SHFT			12
#define UVH_BAU_DATA_CONFIG_P_SHFT			13
#define UVH_BAU_DATA_CONFIG_T_SHFT			15
#define UVH_BAU_DATA_CONFIG_M_SHFT			16
#define UVH_BAU_DATA_CONFIG_APIC_ID_SHFT		32
#define UVH_BAU_DATA_CONFIG_VECTOR_MASK			0x00000000000000ffUL
#define UVH_BAU_DATA_CONFIG_DM_MASK			0x0000000000000700UL
#define UVH_BAU_DATA_CONFIG_DESTMODE_MASK		0x0000000000000800UL
#define UVH_BAU_DATA_CONFIG_STATUS_MASK			0x0000000000001000UL
#define UVH_BAU_DATA_CONFIG_P_MASK			0x0000000000002000UL
#define UVH_BAU_DATA_CONFIG_T_MASK			0x0000000000008000UL
#define UVH_BAU_DATA_CONFIG_M_MASK			0x0000000000010000UL
#define UVH_BAU_DATA_CONFIG_APIC_ID_MASK		0xffffffff00000000UL


union uvh_bau_data_config_u {
	unsigned long	v;
	struct uvh_bau_data_config_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	dm:3;				/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	status:1;			/* RO */
		unsigned long	p:1;				/* RO */
		unsigned long	rsvd_14:1;
		unsigned long	t:1;				/* RO */
		unsigned long	m:1;				/* RW */
		unsigned long	rsvd_17_31:15;
		unsigned long	apic_id:32;			/* RW */
	} s;
};

/* ========================================================================= */
/*                           UVH_EVENT_OCCURRED0                             */
/* ========================================================================= */
#define UVH_EVENT_OCCURRED0 0x70000UL
#define UVH_EVENT_OCCURRED0_32 0x5e8

#define UVH_EVENT_OCCURRED0_LB_HCERR_SHFT		0
#define UVH_EVENT_OCCURRED0_RH_AOERR0_SHFT		11
#define UVH_EVENT_OCCURRED0_LB_HCERR_MASK		0x0000000000000001UL
#define UVH_EVENT_OCCURRED0_RH_AOERR0_MASK		0x0000000000000800UL

#define UV1H_EVENT_OCCURRED0_GR0_HCERR_SHFT		1
#define UV1H_EVENT_OCCURRED0_GR1_HCERR_SHFT		2
#define UV1H_EVENT_OCCURRED0_LH_HCERR_SHFT		3
#define UV1H_EVENT_OCCURRED0_RH_HCERR_SHFT		4
#define UV1H_EVENT_OCCURRED0_XN_HCERR_SHFT		5
#define UV1H_EVENT_OCCURRED0_SI_HCERR_SHFT		6
#define UV1H_EVENT_OCCURRED0_LB_AOERR0_SHFT		7
#define UV1H_EVENT_OCCURRED0_GR0_AOERR0_SHFT		8
#define UV1H_EVENT_OCCURRED0_GR1_AOERR0_SHFT		9
#define UV1H_EVENT_OCCURRED0_LH_AOERR0_SHFT		10
#define UV1H_EVENT_OCCURRED0_XN_AOERR0_SHFT		12
#define UV1H_EVENT_OCCURRED0_SI_AOERR0_SHFT		13
#define UV1H_EVENT_OCCURRED0_LB_AOERR1_SHFT		14
#define UV1H_EVENT_OCCURRED0_GR0_AOERR1_SHFT		15
#define UV1H_EVENT_OCCURRED0_GR1_AOERR1_SHFT		16
#define UV1H_EVENT_OCCURRED0_LH_AOERR1_SHFT		17
#define UV1H_EVENT_OCCURRED0_RH_AOERR1_SHFT		18
#define UV1H_EVENT_OCCURRED0_XN_AOERR1_SHFT		19
#define UV1H_EVENT_OCCURRED0_SI_AOERR1_SHFT		20
#define UV1H_EVENT_OCCURRED0_RH_VPI_INT_SHFT		21
#define UV1H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_SHFT	22
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_0_SHFT		23
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_1_SHFT		24
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_2_SHFT		25
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_3_SHFT		26
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_4_SHFT		27
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_5_SHFT		28
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_6_SHFT		29
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_7_SHFT		30
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_8_SHFT		31
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_9_SHFT		32
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_10_SHFT		33
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_11_SHFT		34
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_12_SHFT		35
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_13_SHFT		36
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_14_SHFT		37
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_15_SHFT		38
#define UV1H_EVENT_OCCURRED0_L1_NMI_INT_SHFT		39
#define UV1H_EVENT_OCCURRED0_STOP_CLOCK_SHFT		40
#define UV1H_EVENT_OCCURRED0_ASIC_TO_L1_SHFT		41
#define UV1H_EVENT_OCCURRED0_L1_TO_ASIC_SHFT		42
#define UV1H_EVENT_OCCURRED0_LTC_INT_SHFT		43
#define UV1H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_SHFT	44
#define UV1H_EVENT_OCCURRED0_IPI_INT_SHFT		45
#define UV1H_EVENT_OCCURRED0_EXTIO_INT0_SHFT		46
#define UV1H_EVENT_OCCURRED0_EXTIO_INT1_SHFT		47
#define UV1H_EVENT_OCCURRED0_EXTIO_INT2_SHFT		48
#define UV1H_EVENT_OCCURRED0_EXTIO_INT3_SHFT		49
#define UV1H_EVENT_OCCURRED0_PROFILE_INT_SHFT		50
#define UV1H_EVENT_OCCURRED0_RTC0_SHFT			51
#define UV1H_EVENT_OCCURRED0_RTC1_SHFT			52
#define UV1H_EVENT_OCCURRED0_RTC2_SHFT			53
#define UV1H_EVENT_OCCURRED0_RTC3_SHFT			54
#define UV1H_EVENT_OCCURRED0_BAU_DATA_SHFT		55
#define UV1H_EVENT_OCCURRED0_POWER_MANAGEMENT_REQ_SHFT	56
#define UV1H_EVENT_OCCURRED0_GR0_HCERR_MASK		0x0000000000000002UL
#define UV1H_EVENT_OCCURRED0_GR1_HCERR_MASK		0x0000000000000004UL
#define UV1H_EVENT_OCCURRED0_LH_HCERR_MASK		0x0000000000000008UL
#define UV1H_EVENT_OCCURRED0_RH_HCERR_MASK		0x0000000000000010UL
#define UV1H_EVENT_OCCURRED0_XN_HCERR_MASK		0x0000000000000020UL
#define UV1H_EVENT_OCCURRED0_SI_HCERR_MASK		0x0000000000000040UL
#define UV1H_EVENT_OCCURRED0_LB_AOERR0_MASK		0x0000000000000080UL
#define UV1H_EVENT_OCCURRED0_GR0_AOERR0_MASK		0x0000000000000100UL
#define UV1H_EVENT_OCCURRED0_GR1_AOERR0_MASK		0x0000000000000200UL
#define UV1H_EVENT_OCCURRED0_LH_AOERR0_MASK		0x0000000000000400UL
#define UV1H_EVENT_OCCURRED0_XN_AOERR0_MASK		0x0000000000001000UL
#define UV1H_EVENT_OCCURRED0_SI_AOERR0_MASK		0x0000000000002000UL
#define UV1H_EVENT_OCCURRED0_LB_AOERR1_MASK		0x0000000000004000UL
#define UV1H_EVENT_OCCURRED0_GR0_AOERR1_MASK		0x0000000000008000UL
#define UV1H_EVENT_OCCURRED0_GR1_AOERR1_MASK		0x0000000000010000UL
#define UV1H_EVENT_OCCURRED0_LH_AOERR1_MASK		0x0000000000020000UL
#define UV1H_EVENT_OCCURRED0_RH_AOERR1_MASK		0x0000000000040000UL
#define UV1H_EVENT_OCCURRED0_XN_AOERR1_MASK		0x0000000000080000UL
#define UV1H_EVENT_OCCURRED0_SI_AOERR1_MASK		0x0000000000100000UL
#define UV1H_EVENT_OCCURRED0_RH_VPI_INT_MASK		0x0000000000200000UL
#define UV1H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_MASK	0x0000000000400000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_0_MASK		0x0000000000800000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_1_MASK		0x0000000001000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_2_MASK		0x0000000002000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_3_MASK		0x0000000004000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_4_MASK		0x0000000008000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_5_MASK		0x0000000010000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_6_MASK		0x0000000020000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_7_MASK		0x0000000040000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_8_MASK		0x0000000080000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_9_MASK		0x0000000100000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_10_MASK		0x0000000200000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_11_MASK		0x0000000400000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_12_MASK		0x0000000800000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_13_MASK		0x0000001000000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_14_MASK		0x0000002000000000UL
#define UV1H_EVENT_OCCURRED0_LB_IRQ_INT_15_MASK		0x0000004000000000UL
#define UV1H_EVENT_OCCURRED0_L1_NMI_INT_MASK		0x0000008000000000UL
#define UV1H_EVENT_OCCURRED0_STOP_CLOCK_MASK		0x0000010000000000UL
#define UV1H_EVENT_OCCURRED0_ASIC_TO_L1_MASK		0x0000020000000000UL
#define UV1H_EVENT_OCCURRED0_L1_TO_ASIC_MASK		0x0000040000000000UL
#define UV1H_EVENT_OCCURRED0_LTC_INT_MASK		0x0000080000000000UL
#define UV1H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_MASK	0x0000100000000000UL
#define UV1H_EVENT_OCCURRED0_IPI_INT_MASK		0x0000200000000000UL
#define UV1H_EVENT_OCCURRED0_EXTIO_INT0_MASK		0x0000400000000000UL
#define UV1H_EVENT_OCCURRED0_EXTIO_INT1_MASK		0x0000800000000000UL
#define UV1H_EVENT_OCCURRED0_EXTIO_INT2_MASK		0x0001000000000000UL
#define UV1H_EVENT_OCCURRED0_EXTIO_INT3_MASK		0x0002000000000000UL
#define UV1H_EVENT_OCCURRED0_PROFILE_INT_MASK		0x0004000000000000UL
#define UV1H_EVENT_OCCURRED0_RTC0_MASK			0x0008000000000000UL
#define UV1H_EVENT_OCCURRED0_RTC1_MASK			0x0010000000000000UL
#define UV1H_EVENT_OCCURRED0_RTC2_MASK			0x0020000000000000UL
#define UV1H_EVENT_OCCURRED0_RTC3_MASK			0x0040000000000000UL
#define UV1H_EVENT_OCCURRED0_BAU_DATA_MASK		0x0080000000000000UL
#define UV1H_EVENT_OCCURRED0_POWER_MANAGEMENT_REQ_MASK	0x0100000000000000UL

#define UVXH_EVENT_OCCURRED0_RH_HCERR_SHFT		2
#define UVXH_EVENT_OCCURRED0_LH0_HCERR_SHFT		3
#define UVXH_EVENT_OCCURRED0_LH1_HCERR_SHFT		4
#define UVXH_EVENT_OCCURRED0_GR0_HCERR_SHFT		5
#define UVXH_EVENT_OCCURRED0_GR1_HCERR_SHFT		6
#define UVXH_EVENT_OCCURRED0_NI0_HCERR_SHFT		7
#define UVXH_EVENT_OCCURRED0_NI1_HCERR_SHFT		8
#define UVXH_EVENT_OCCURRED0_LB_AOERR0_SHFT		9
#define UVXH_EVENT_OCCURRED0_LH0_AOERR0_SHFT		12
#define UVXH_EVENT_OCCURRED0_LH1_AOERR0_SHFT		13
#define UVXH_EVENT_OCCURRED0_GR0_AOERR0_SHFT		14
#define UVXH_EVENT_OCCURRED0_GR1_AOERR0_SHFT		15
#define UVXH_EVENT_OCCURRED0_XB_AOERR0_SHFT		16
#define UVXH_EVENT_OCCURRED0_RH_HCERR_MASK		0x0000000000000004UL
#define UVXH_EVENT_OCCURRED0_LH0_HCERR_MASK		0x0000000000000008UL
#define UVXH_EVENT_OCCURRED0_LH1_HCERR_MASK		0x0000000000000010UL
#define UVXH_EVENT_OCCURRED0_GR0_HCERR_MASK		0x0000000000000020UL
#define UVXH_EVENT_OCCURRED0_GR1_HCERR_MASK		0x0000000000000040UL
#define UVXH_EVENT_OCCURRED0_NI0_HCERR_MASK		0x0000000000000080UL
#define UVXH_EVENT_OCCURRED0_NI1_HCERR_MASK		0x0000000000000100UL
#define UVXH_EVENT_OCCURRED0_LB_AOERR0_MASK		0x0000000000000200UL
#define UVXH_EVENT_OCCURRED0_LH0_AOERR0_MASK		0x0000000000001000UL
#define UVXH_EVENT_OCCURRED0_LH1_AOERR0_MASK		0x0000000000002000UL
#define UVXH_EVENT_OCCURRED0_GR0_AOERR0_MASK		0x0000000000004000UL
#define UVXH_EVENT_OCCURRED0_GR1_AOERR0_MASK		0x0000000000008000UL
#define UVXH_EVENT_OCCURRED0_XB_AOERR0_MASK		0x0000000000010000UL

#define UV2H_EVENT_OCCURRED0_QP_HCERR_SHFT		1
#define UV2H_EVENT_OCCURRED0_QP_AOERR0_SHFT		10
#define UV2H_EVENT_OCCURRED0_RT_AOERR0_SHFT		17
#define UV2H_EVENT_OCCURRED0_NI0_AOERR0_SHFT		18
#define UV2H_EVENT_OCCURRED0_NI1_AOERR0_SHFT		19
#define UV2H_EVENT_OCCURRED0_LB_AOERR1_SHFT		20
#define UV2H_EVENT_OCCURRED0_QP_AOERR1_SHFT		21
#define UV2H_EVENT_OCCURRED0_RH_AOERR1_SHFT		22
#define UV2H_EVENT_OCCURRED0_LH0_AOERR1_SHFT		23
#define UV2H_EVENT_OCCURRED0_LH1_AOERR1_SHFT		24
#define UV2H_EVENT_OCCURRED0_GR0_AOERR1_SHFT		25
#define UV2H_EVENT_OCCURRED0_GR1_AOERR1_SHFT		26
#define UV2H_EVENT_OCCURRED0_XB_AOERR1_SHFT		27
#define UV2H_EVENT_OCCURRED0_RT_AOERR1_SHFT		28
#define UV2H_EVENT_OCCURRED0_NI0_AOERR1_SHFT		29
#define UV2H_EVENT_OCCURRED0_NI1_AOERR1_SHFT		30
#define UV2H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_SHFT	31
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_0_SHFT		32
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_1_SHFT		33
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_2_SHFT		34
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_3_SHFT		35
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_4_SHFT		36
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_5_SHFT		37
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_6_SHFT		38
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_7_SHFT		39
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_8_SHFT		40
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_9_SHFT		41
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_10_SHFT		42
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_11_SHFT		43
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_12_SHFT		44
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_13_SHFT		45
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_14_SHFT		46
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_15_SHFT		47
#define UV2H_EVENT_OCCURRED0_L1_NMI_INT_SHFT		48
#define UV2H_EVENT_OCCURRED0_STOP_CLOCK_SHFT		49
#define UV2H_EVENT_OCCURRED0_ASIC_TO_L1_SHFT		50
#define UV2H_EVENT_OCCURRED0_L1_TO_ASIC_SHFT		51
#define UV2H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_SHFT	52
#define UV2H_EVENT_OCCURRED0_IPI_INT_SHFT		53
#define UV2H_EVENT_OCCURRED0_EXTIO_INT0_SHFT		54
#define UV2H_EVENT_OCCURRED0_EXTIO_INT1_SHFT		55
#define UV2H_EVENT_OCCURRED0_EXTIO_INT2_SHFT		56
#define UV2H_EVENT_OCCURRED0_EXTIO_INT3_SHFT		57
#define UV2H_EVENT_OCCURRED0_PROFILE_INT_SHFT		58
#define UV2H_EVENT_OCCURRED0_QP_HCERR_MASK		0x0000000000000002UL
#define UV2H_EVENT_OCCURRED0_QP_AOERR0_MASK		0x0000000000000400UL
#define UV2H_EVENT_OCCURRED0_RT_AOERR0_MASK		0x0000000000020000UL
#define UV2H_EVENT_OCCURRED0_NI0_AOERR0_MASK		0x0000000000040000UL
#define UV2H_EVENT_OCCURRED0_NI1_AOERR0_MASK		0x0000000000080000UL
#define UV2H_EVENT_OCCURRED0_LB_AOERR1_MASK		0x0000000000100000UL
#define UV2H_EVENT_OCCURRED0_QP_AOERR1_MASK		0x0000000000200000UL
#define UV2H_EVENT_OCCURRED0_RH_AOERR1_MASK		0x0000000000400000UL
#define UV2H_EVENT_OCCURRED0_LH0_AOERR1_MASK		0x0000000000800000UL
#define UV2H_EVENT_OCCURRED0_LH1_AOERR1_MASK		0x0000000001000000UL
#define UV2H_EVENT_OCCURRED0_GR0_AOERR1_MASK		0x0000000002000000UL
#define UV2H_EVENT_OCCURRED0_GR1_AOERR1_MASK		0x0000000004000000UL
#define UV2H_EVENT_OCCURRED0_XB_AOERR1_MASK		0x0000000008000000UL
#define UV2H_EVENT_OCCURRED0_RT_AOERR1_MASK		0x0000000010000000UL
#define UV2H_EVENT_OCCURRED0_NI0_AOERR1_MASK		0x0000000020000000UL
#define UV2H_EVENT_OCCURRED0_NI1_AOERR1_MASK		0x0000000040000000UL
#define UV2H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_MASK	0x0000000080000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_0_MASK		0x0000000100000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_1_MASK		0x0000000200000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_2_MASK		0x0000000400000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_3_MASK		0x0000000800000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_4_MASK		0x0000001000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_5_MASK		0x0000002000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_6_MASK		0x0000004000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_7_MASK		0x0000008000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_8_MASK		0x0000010000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_9_MASK		0x0000020000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_10_MASK		0x0000040000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_11_MASK		0x0000080000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_12_MASK		0x0000100000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_13_MASK		0x0000200000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_14_MASK		0x0000400000000000UL
#define UV2H_EVENT_OCCURRED0_LB_IRQ_INT_15_MASK		0x0000800000000000UL
#define UV2H_EVENT_OCCURRED0_L1_NMI_INT_MASK		0x0001000000000000UL
#define UV2H_EVENT_OCCURRED0_STOP_CLOCK_MASK		0x0002000000000000UL
#define UV2H_EVENT_OCCURRED0_ASIC_TO_L1_MASK		0x0004000000000000UL
#define UV2H_EVENT_OCCURRED0_L1_TO_ASIC_MASK		0x0008000000000000UL
#define UV2H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_MASK	0x0010000000000000UL
#define UV2H_EVENT_OCCURRED0_IPI_INT_MASK		0x0020000000000000UL
#define UV2H_EVENT_OCCURRED0_EXTIO_INT0_MASK		0x0040000000000000UL
#define UV2H_EVENT_OCCURRED0_EXTIO_INT1_MASK		0x0080000000000000UL
#define UV2H_EVENT_OCCURRED0_EXTIO_INT2_MASK		0x0100000000000000UL
#define UV2H_EVENT_OCCURRED0_EXTIO_INT3_MASK		0x0200000000000000UL
#define UV2H_EVENT_OCCURRED0_PROFILE_INT_MASK		0x0400000000000000UL

#define UV3H_EVENT_OCCURRED0_QP_HCERR_SHFT		1
#define UV3H_EVENT_OCCURRED0_QP_AOERR0_SHFT		10
#define UV3H_EVENT_OCCURRED0_RT_AOERR0_SHFT		17
#define UV3H_EVENT_OCCURRED0_NI0_AOERR0_SHFT		18
#define UV3H_EVENT_OCCURRED0_NI1_AOERR0_SHFT		19
#define UV3H_EVENT_OCCURRED0_LB_AOERR1_SHFT		20
#define UV3H_EVENT_OCCURRED0_QP_AOERR1_SHFT		21
#define UV3H_EVENT_OCCURRED0_RH_AOERR1_SHFT		22
#define UV3H_EVENT_OCCURRED0_LH0_AOERR1_SHFT		23
#define UV3H_EVENT_OCCURRED0_LH1_AOERR1_SHFT		24
#define UV3H_EVENT_OCCURRED0_GR0_AOERR1_SHFT		25
#define UV3H_EVENT_OCCURRED0_GR1_AOERR1_SHFT		26
#define UV3H_EVENT_OCCURRED0_XB_AOERR1_SHFT		27
#define UV3H_EVENT_OCCURRED0_RT_AOERR1_SHFT		28
#define UV3H_EVENT_OCCURRED0_NI0_AOERR1_SHFT		29
#define UV3H_EVENT_OCCURRED0_NI1_AOERR1_SHFT		30
#define UV3H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_SHFT	31
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_0_SHFT		32
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_1_SHFT		33
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_2_SHFT		34
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_3_SHFT		35
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_4_SHFT		36
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_5_SHFT		37
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_6_SHFT		38
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_7_SHFT		39
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_8_SHFT		40
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_9_SHFT		41
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_10_SHFT		42
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_11_SHFT		43
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_12_SHFT		44
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_13_SHFT		45
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_14_SHFT		46
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_15_SHFT		47
#define UV3H_EVENT_OCCURRED0_L1_NMI_INT_SHFT		48
#define UV3H_EVENT_OCCURRED0_STOP_CLOCK_SHFT		49
#define UV3H_EVENT_OCCURRED0_ASIC_TO_L1_SHFT		50
#define UV3H_EVENT_OCCURRED0_L1_TO_ASIC_SHFT		51
#define UV3H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_SHFT	52
#define UV3H_EVENT_OCCURRED0_IPI_INT_SHFT		53
#define UV3H_EVENT_OCCURRED0_EXTIO_INT0_SHFT		54
#define UV3H_EVENT_OCCURRED0_EXTIO_INT1_SHFT		55
#define UV3H_EVENT_OCCURRED0_EXTIO_INT2_SHFT		56
#define UV3H_EVENT_OCCURRED0_EXTIO_INT3_SHFT		57
#define UV3H_EVENT_OCCURRED0_PROFILE_INT_SHFT		58
#define UV3H_EVENT_OCCURRED0_QP_HCERR_MASK		0x0000000000000002UL
#define UV3H_EVENT_OCCURRED0_QP_AOERR0_MASK		0x0000000000000400UL
#define UV3H_EVENT_OCCURRED0_RT_AOERR0_MASK		0x0000000000020000UL
#define UV3H_EVENT_OCCURRED0_NI0_AOERR0_MASK		0x0000000000040000UL
#define UV3H_EVENT_OCCURRED0_NI1_AOERR0_MASK		0x0000000000080000UL
#define UV3H_EVENT_OCCURRED0_LB_AOERR1_MASK		0x0000000000100000UL
#define UV3H_EVENT_OCCURRED0_QP_AOERR1_MASK		0x0000000000200000UL
#define UV3H_EVENT_OCCURRED0_RH_AOERR1_MASK		0x0000000000400000UL
#define UV3H_EVENT_OCCURRED0_LH0_AOERR1_MASK		0x0000000000800000UL
#define UV3H_EVENT_OCCURRED0_LH1_AOERR1_MASK		0x0000000001000000UL
#define UV3H_EVENT_OCCURRED0_GR0_AOERR1_MASK		0x0000000002000000UL
#define UV3H_EVENT_OCCURRED0_GR1_AOERR1_MASK		0x0000000004000000UL
#define UV3H_EVENT_OCCURRED0_XB_AOERR1_MASK		0x0000000008000000UL
#define UV3H_EVENT_OCCURRED0_RT_AOERR1_MASK		0x0000000010000000UL
#define UV3H_EVENT_OCCURRED0_NI0_AOERR1_MASK		0x0000000020000000UL
#define UV3H_EVENT_OCCURRED0_NI1_AOERR1_MASK		0x0000000040000000UL
#define UV3H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_MASK	0x0000000080000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_0_MASK		0x0000000100000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_1_MASK		0x0000000200000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_2_MASK		0x0000000400000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_3_MASK		0x0000000800000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_4_MASK		0x0000001000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_5_MASK		0x0000002000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_6_MASK		0x0000004000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_7_MASK		0x0000008000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_8_MASK		0x0000010000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_9_MASK		0x0000020000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_10_MASK		0x0000040000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_11_MASK		0x0000080000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_12_MASK		0x0000100000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_13_MASK		0x0000200000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_14_MASK		0x0000400000000000UL
#define UV3H_EVENT_OCCURRED0_LB_IRQ_INT_15_MASK		0x0000800000000000UL
#define UV3H_EVENT_OCCURRED0_L1_NMI_INT_MASK		0x0001000000000000UL
#define UV3H_EVENT_OCCURRED0_STOP_CLOCK_MASK		0x0002000000000000UL
#define UV3H_EVENT_OCCURRED0_ASIC_TO_L1_MASK		0x0004000000000000UL
#define UV3H_EVENT_OCCURRED0_L1_TO_ASIC_MASK		0x0008000000000000UL
#define UV3H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_MASK	0x0010000000000000UL
#define UV3H_EVENT_OCCURRED0_IPI_INT_MASK		0x0020000000000000UL
#define UV3H_EVENT_OCCURRED0_EXTIO_INT0_MASK		0x0040000000000000UL
#define UV3H_EVENT_OCCURRED0_EXTIO_INT1_MASK		0x0080000000000000UL
#define UV3H_EVENT_OCCURRED0_EXTIO_INT2_MASK		0x0100000000000000UL
#define UV3H_EVENT_OCCURRED0_EXTIO_INT3_MASK		0x0200000000000000UL
#define UV3H_EVENT_OCCURRED0_PROFILE_INT_MASK		0x0400000000000000UL

#define UV4H_EVENT_OCCURRED0_KT_HCERR_SHFT		1
#define UV4H_EVENT_OCCURRED0_KT_AOERR0_SHFT		10
#define UV4H_EVENT_OCCURRED0_RTQ0_AOERR0_SHFT		17
#define UV4H_EVENT_OCCURRED0_RTQ1_AOERR0_SHFT		18
#define UV4H_EVENT_OCCURRED0_RTQ2_AOERR0_SHFT		19
#define UV4H_EVENT_OCCURRED0_RTQ3_AOERR0_SHFT		20
#define UV4H_EVENT_OCCURRED0_NI0_AOERR0_SHFT		21
#define UV4H_EVENT_OCCURRED0_NI1_AOERR0_SHFT		22
#define UV4H_EVENT_OCCURRED0_LB_AOERR1_SHFT		23
#define UV4H_EVENT_OCCURRED0_KT_AOERR1_SHFT		24
#define UV4H_EVENT_OCCURRED0_RH_AOERR1_SHFT		25
#define UV4H_EVENT_OCCURRED0_LH0_AOERR1_SHFT		26
#define UV4H_EVENT_OCCURRED0_LH1_AOERR1_SHFT		27
#define UV4H_EVENT_OCCURRED0_GR0_AOERR1_SHFT		28
#define UV4H_EVENT_OCCURRED0_GR1_AOERR1_SHFT		29
#define UV4H_EVENT_OCCURRED0_XB_AOERR1_SHFT		30
#define UV4H_EVENT_OCCURRED0_RTQ0_AOERR1_SHFT		31
#define UV4H_EVENT_OCCURRED0_RTQ1_AOERR1_SHFT		32
#define UV4H_EVENT_OCCURRED0_RTQ2_AOERR1_SHFT		33
#define UV4H_EVENT_OCCURRED0_RTQ3_AOERR1_SHFT		34
#define UV4H_EVENT_OCCURRED0_NI0_AOERR1_SHFT		35
#define UV4H_EVENT_OCCURRED0_NI1_AOERR1_SHFT		36
#define UV4H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_SHFT	37
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_0_SHFT		38
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_1_SHFT		39
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_2_SHFT		40
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_3_SHFT		41
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_4_SHFT		42
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_5_SHFT		43
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_6_SHFT		44
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_7_SHFT		45
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_8_SHFT		46
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_9_SHFT		47
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_10_SHFT		48
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_11_SHFT		49
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_12_SHFT		50
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_13_SHFT		51
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_14_SHFT		52
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_15_SHFT		53
#define UV4H_EVENT_OCCURRED0_L1_NMI_INT_SHFT		54
#define UV4H_EVENT_OCCURRED0_STOP_CLOCK_SHFT		55
#define UV4H_EVENT_OCCURRED0_ASIC_TO_L1_SHFT		56
#define UV4H_EVENT_OCCURRED0_L1_TO_ASIC_SHFT		57
#define UV4H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_SHFT	58
#define UV4H_EVENT_OCCURRED0_IPI_INT_SHFT		59
#define UV4H_EVENT_OCCURRED0_EXTIO_INT0_SHFT		60
#define UV4H_EVENT_OCCURRED0_EXTIO_INT1_SHFT		61
#define UV4H_EVENT_OCCURRED0_EXTIO_INT2_SHFT		62
#define UV4H_EVENT_OCCURRED0_EXTIO_INT3_SHFT		63
#define UV4H_EVENT_OCCURRED0_KT_HCERR_MASK		0x0000000000000002UL
#define UV4H_EVENT_OCCURRED0_KT_AOERR0_MASK		0x0000000000000400UL
#define UV4H_EVENT_OCCURRED0_RTQ0_AOERR0_MASK		0x0000000000020000UL
#define UV4H_EVENT_OCCURRED0_RTQ1_AOERR0_MASK		0x0000000000040000UL
#define UV4H_EVENT_OCCURRED0_RTQ2_AOERR0_MASK		0x0000000000080000UL
#define UV4H_EVENT_OCCURRED0_RTQ3_AOERR0_MASK		0x0000000000100000UL
#define UV4H_EVENT_OCCURRED0_NI0_AOERR0_MASK		0x0000000000200000UL
#define UV4H_EVENT_OCCURRED0_NI1_AOERR0_MASK		0x0000000000400000UL
#define UV4H_EVENT_OCCURRED0_LB_AOERR1_MASK		0x0000000000800000UL
#define UV4H_EVENT_OCCURRED0_KT_AOERR1_MASK		0x0000000001000000UL
#define UV4H_EVENT_OCCURRED0_RH_AOERR1_MASK		0x0000000002000000UL
#define UV4H_EVENT_OCCURRED0_LH0_AOERR1_MASK		0x0000000004000000UL
#define UV4H_EVENT_OCCURRED0_LH1_AOERR1_MASK		0x0000000008000000UL
#define UV4H_EVENT_OCCURRED0_GR0_AOERR1_MASK		0x0000000010000000UL
#define UV4H_EVENT_OCCURRED0_GR1_AOERR1_MASK		0x0000000020000000UL
#define UV4H_EVENT_OCCURRED0_XB_AOERR1_MASK		0x0000000040000000UL
#define UV4H_EVENT_OCCURRED0_RTQ0_AOERR1_MASK		0x0000000080000000UL
#define UV4H_EVENT_OCCURRED0_RTQ1_AOERR1_MASK		0x0000000100000000UL
#define UV4H_EVENT_OCCURRED0_RTQ2_AOERR1_MASK		0x0000000200000000UL
#define UV4H_EVENT_OCCURRED0_RTQ3_AOERR1_MASK		0x0000000400000000UL
#define UV4H_EVENT_OCCURRED0_NI0_AOERR1_MASK		0x0000000800000000UL
#define UV4H_EVENT_OCCURRED0_NI1_AOERR1_MASK		0x0000001000000000UL
#define UV4H_EVENT_OCCURRED0_SYSTEM_SHUTDOWN_INT_MASK	0x0000002000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_0_MASK		0x0000004000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_1_MASK		0x0000008000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_2_MASK		0x0000010000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_3_MASK		0x0000020000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_4_MASK		0x0000040000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_5_MASK		0x0000080000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_6_MASK		0x0000100000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_7_MASK		0x0000200000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_8_MASK		0x0000400000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_9_MASK		0x0000800000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_10_MASK		0x0001000000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_11_MASK		0x0002000000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_12_MASK		0x0004000000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_13_MASK		0x0008000000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_14_MASK		0x0010000000000000UL
#define UV4H_EVENT_OCCURRED0_LB_IRQ_INT_15_MASK		0x0020000000000000UL
#define UV4H_EVENT_OCCURRED0_L1_NMI_INT_MASK		0x0040000000000000UL
#define UV4H_EVENT_OCCURRED0_STOP_CLOCK_MASK		0x0080000000000000UL
#define UV4H_EVENT_OCCURRED0_ASIC_TO_L1_MASK		0x0100000000000000UL
#define UV4H_EVENT_OCCURRED0_L1_TO_ASIC_MASK		0x0200000000000000UL
#define UV4H_EVENT_OCCURRED0_LA_SEQ_TRIGGER_MASK	0x0400000000000000UL
#define UV4H_EVENT_OCCURRED0_IPI_INT_MASK		0x0800000000000000UL
#define UV4H_EVENT_OCCURRED0_EXTIO_INT0_MASK		0x1000000000000000UL
#define UV4H_EVENT_OCCURRED0_EXTIO_INT1_MASK		0x2000000000000000UL
#define UV4H_EVENT_OCCURRED0_EXTIO_INT2_MASK		0x4000000000000000UL
#define UV4H_EVENT_OCCURRED0_EXTIO_INT3_MASK		0x8000000000000000UL

#define UVH_EVENT_OCCURRED0_EXTIO_INT0_SHFT (				\
	is_uv1_hub() ? UV1H_EVENT_OCCURRED0_EXTIO_INT0_SHFT :		\
	is_uv2_hub() ? UV2H_EVENT_OCCURRED0_EXTIO_INT0_SHFT :		\
	is_uv3_hub() ? UV3H_EVENT_OCCURRED0_EXTIO_INT0_SHFT :		\
	/*is_uv4_hub*/ UV4H_EVENT_OCCURRED0_EXTIO_INT0_SHFT)

union uvh_event_occurred0_u {
	unsigned long	v;
	struct uvh_event_occurred0_s {
		unsigned long	lb_hcerr:1;			/* RW, W1C */
		unsigned long	rsvd_1_10:10;
		unsigned long	rh_aoerr0:1;			/* RW, W1C */
		unsigned long	rsvd_12_63:52;
	} s;
	struct uvxh_event_occurred0_s {
		unsigned long	lb_hcerr:1;			/* RW */
		unsigned long	rsvd_1:1;
		unsigned long	rh_hcerr:1;			/* RW */
		unsigned long	lh0_hcerr:1;			/* RW */
		unsigned long	lh1_hcerr:1;			/* RW */
		unsigned long	gr0_hcerr:1;			/* RW */
		unsigned long	gr1_hcerr:1;			/* RW */
		unsigned long	ni0_hcerr:1;			/* RW */
		unsigned long	ni1_hcerr:1;			/* RW */
		unsigned long	lb_aoerr0:1;			/* RW */
		unsigned long	rsvd_10:1;
		unsigned long	rh_aoerr0:1;			/* RW */
		unsigned long	lh0_aoerr0:1;			/* RW */
		unsigned long	lh1_aoerr0:1;			/* RW */
		unsigned long	gr0_aoerr0:1;			/* RW */
		unsigned long	gr1_aoerr0:1;			/* RW */
		unsigned long	xb_aoerr0:1;			/* RW */
		unsigned long	rsvd_17_63:47;
	} sx;
	struct uv4h_event_occurred0_s {
		unsigned long	lb_hcerr:1;			/* RW */
		unsigned long	kt_hcerr:1;			/* RW */
		unsigned long	rh_hcerr:1;			/* RW */
		unsigned long	lh0_hcerr:1;			/* RW */
		unsigned long	lh1_hcerr:1;			/* RW */
		unsigned long	gr0_hcerr:1;			/* RW */
		unsigned long	gr1_hcerr:1;			/* RW */
		unsigned long	ni0_hcerr:1;			/* RW */
		unsigned long	ni1_hcerr:1;			/* RW */
		unsigned long	lb_aoerr0:1;			/* RW */
		unsigned long	kt_aoerr0:1;			/* RW */
		unsigned long	rh_aoerr0:1;			/* RW */
		unsigned long	lh0_aoerr0:1;			/* RW */
		unsigned long	lh1_aoerr0:1;			/* RW */
		unsigned long	gr0_aoerr0:1;			/* RW */
		unsigned long	gr1_aoerr0:1;			/* RW */
		unsigned long	xb_aoerr0:1;			/* RW */
		unsigned long	rtq0_aoerr0:1;			/* RW */
		unsigned long	rtq1_aoerr0:1;			/* RW */
		unsigned long	rtq2_aoerr0:1;			/* RW */
		unsigned long	rtq3_aoerr0:1;			/* RW */
		unsigned long	ni0_aoerr0:1;			/* RW */
		unsigned long	ni1_aoerr0:1;			/* RW */
		unsigned long	lb_aoerr1:1;			/* RW */
		unsigned long	kt_aoerr1:1;			/* RW */
		unsigned long	rh_aoerr1:1;			/* RW */
		unsigned long	lh0_aoerr1:1;			/* RW */
		unsigned long	lh1_aoerr1:1;			/* RW */
		unsigned long	gr0_aoerr1:1;			/* RW */
		unsigned long	gr1_aoerr1:1;			/* RW */
		unsigned long	xb_aoerr1:1;			/* RW */
		unsigned long	rtq0_aoerr1:1;			/* RW */
		unsigned long	rtq1_aoerr1:1;			/* RW */
		unsigned long	rtq2_aoerr1:1;			/* RW */
		unsigned long	rtq3_aoerr1:1;			/* RW */
		unsigned long	ni0_aoerr1:1;			/* RW */
		unsigned long	ni1_aoerr1:1;			/* RW */
		unsigned long	system_shutdown_int:1;		/* RW */
		unsigned long	lb_irq_int_0:1;			/* RW */
		unsigned long	lb_irq_int_1:1;			/* RW */
		unsigned long	lb_irq_int_2:1;			/* RW */
		unsigned long	lb_irq_int_3:1;			/* RW */
		unsigned long	lb_irq_int_4:1;			/* RW */
		unsigned long	lb_irq_int_5:1;			/* RW */
		unsigned long	lb_irq_int_6:1;			/* RW */
		unsigned long	lb_irq_int_7:1;			/* RW */
		unsigned long	lb_irq_int_8:1;			/* RW */
		unsigned long	lb_irq_int_9:1;			/* RW */
		unsigned long	lb_irq_int_10:1;		/* RW */
		unsigned long	lb_irq_int_11:1;		/* RW */
		unsigned long	lb_irq_int_12:1;		/* RW */
		unsigned long	lb_irq_int_13:1;		/* RW */
		unsigned long	lb_irq_int_14:1;		/* RW */
		unsigned long	lb_irq_int_15:1;		/* RW */
		unsigned long	l1_nmi_int:1;			/* RW */
		unsigned long	stop_clock:1;			/* RW */
		unsigned long	asic_to_l1:1;			/* RW */
		unsigned long	l1_to_asic:1;			/* RW */
		unsigned long	la_seq_trigger:1;		/* RW */
		unsigned long	ipi_int:1;			/* RW */
		unsigned long	extio_int0:1;			/* RW */
		unsigned long	extio_int1:1;			/* RW */
		unsigned long	extio_int2:1;			/* RW */
		unsigned long	extio_int3:1;			/* RW */
	} s4;
};

/* ========================================================================= */
/*                        UVH_EVENT_OCCURRED0_ALIAS                          */
/* ========================================================================= */
#define UVH_EVENT_OCCURRED0_ALIAS 0x70008UL
#define UVH_EVENT_OCCURRED0_ALIAS_32 0x5f0


/* ========================================================================= */
/*                         UVH_EXTIO_INT0_BROADCAST                          */
/* ========================================================================= */
#define UVH_EXTIO_INT0_BROADCAST 0x61448UL

#define UV1H_EXTIO_INT0_BROADCAST_32 0x3f0
#define UV2H_EXTIO_INT0_BROADCAST_32 0x3f0
#define UV3H_EXTIO_INT0_BROADCAST_32 0x3f0
#define UV4H_EXTIO_INT0_BROADCAST_32 0x310
#define UVH_EXTIO_INT0_BROADCAST_32 (					\
	is_uv1_hub() ? UV1H_EXTIO_INT0_BROADCAST_32 :			\
	is_uv2_hub() ? UV2H_EXTIO_INT0_BROADCAST_32 :			\
	is_uv3_hub() ? UV3H_EXTIO_INT0_BROADCAST_32 :			\
	/*is_uv4_hub*/ UV4H_EXTIO_INT0_BROADCAST_32)

#define UVH_EXTIO_INT0_BROADCAST_ENABLE_SHFT		0
#define UVH_EXTIO_INT0_BROADCAST_ENABLE_MASK		0x0000000000000001UL


union uvh_extio_int0_broadcast_u {
	unsigned long	v;
	struct uvh_extio_int0_broadcast_s {
		unsigned long	enable:1;			/* RW */
		unsigned long	rsvd_1_63:63;
	} s;
};

/* ========================================================================= */
/*                         UVH_GR0_TLB_INT0_CONFIG                           */
/* ========================================================================= */
#define UVH_GR0_TLB_INT0_CONFIG 0x61b00UL

#define UVH_GR0_TLB_INT0_CONFIG_VECTOR_SHFT		0
#define UVH_GR0_TLB_INT0_CONFIG_DM_SHFT			8
#define UVH_GR0_TLB_INT0_CONFIG_DESTMODE_SHFT		11
#define UVH_GR0_TLB_INT0_CONFIG_STATUS_SHFT		12
#define UVH_GR0_TLB_INT0_CONFIG_P_SHFT			13
#define UVH_GR0_TLB_INT0_CONFIG_T_SHFT			15
#define UVH_GR0_TLB_INT0_CONFIG_M_SHFT			16
#define UVH_GR0_TLB_INT0_CONFIG_APIC_ID_SHFT		32
#define UVH_GR0_TLB_INT0_CONFIG_VECTOR_MASK		0x00000000000000ffUL
#define UVH_GR0_TLB_INT0_CONFIG_DM_MASK			0x0000000000000700UL
#define UVH_GR0_TLB_INT0_CONFIG_DESTMODE_MASK		0x0000000000000800UL
#define UVH_GR0_TLB_INT0_CONFIG_STATUS_MASK		0x0000000000001000UL
#define UVH_GR0_TLB_INT0_CONFIG_P_MASK			0x0000000000002000UL
#define UVH_GR0_TLB_INT0_CONFIG_T_MASK			0x0000000000008000UL
#define UVH_GR0_TLB_INT0_CONFIG_M_MASK			0x0000000000010000UL
#define UVH_GR0_TLB_INT0_CONFIG_APIC_ID_MASK		0xffffffff00000000UL


union uvh_gr0_tlb_int0_config_u {
	unsigned long	v;
	struct uvh_gr0_tlb_int0_config_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	dm:3;				/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	status:1;			/* RO */
		unsigned long	p:1;				/* RO */
		unsigned long	rsvd_14:1;
		unsigned long	t:1;				/* RO */
		unsigned long	m:1;				/* RW */
		unsigned long	rsvd_17_31:15;
		unsigned long	apic_id:32;			/* RW */
	} s;
};

/* ========================================================================= */
/*                         UVH_GR0_TLB_INT1_CONFIG                           */
/* ========================================================================= */
#define UVH_GR0_TLB_INT1_CONFIG 0x61b40UL

#define UVH_GR0_TLB_INT1_CONFIG_VECTOR_SHFT		0
#define UVH_GR0_TLB_INT1_CONFIG_DM_SHFT			8
#define UVH_GR0_TLB_INT1_CONFIG_DESTMODE_SHFT		11
#define UVH_GR0_TLB_INT1_CONFIG_STATUS_SHFT		12
#define UVH_GR0_TLB_INT1_CONFIG_P_SHFT			13
#define UVH_GR0_TLB_INT1_CONFIG_T_SHFT			15
#define UVH_GR0_TLB_INT1_CONFIG_M_SHFT			16
#define UVH_GR0_TLB_INT1_CONFIG_APIC_ID_SHFT		32
#define UVH_GR0_TLB_INT1_CONFIG_VECTOR_MASK		0x00000000000000ffUL
#define UVH_GR0_TLB_INT1_CONFIG_DM_MASK			0x0000000000000700UL
#define UVH_GR0_TLB_INT1_CONFIG_DESTMODE_MASK		0x0000000000000800UL
#define UVH_GR0_TLB_INT1_CONFIG_STATUS_MASK		0x0000000000001000UL
#define UVH_GR0_TLB_INT1_CONFIG_P_MASK			0x0000000000002000UL
#define UVH_GR0_TLB_INT1_CONFIG_T_MASK			0x0000000000008000UL
#define UVH_GR0_TLB_INT1_CONFIG_M_MASK			0x0000000000010000UL
#define UVH_GR0_TLB_INT1_CONFIG_APIC_ID_MASK		0xffffffff00000000UL


union uvh_gr0_tlb_int1_config_u {
	unsigned long	v;
	struct uvh_gr0_tlb_int1_config_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	dm:3;				/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	status:1;			/* RO */
		unsigned long	p:1;				/* RO */
		unsigned long	rsvd_14:1;
		unsigned long	t:1;				/* RO */
		unsigned long	m:1;				/* RW */
		unsigned long	rsvd_17_31:15;
		unsigned long	apic_id:32;			/* RW */
	} s;
};

/* ========================================================================= */
/*                         UVH_GR0_TLB_MMR_CONTROL                           */
/* ========================================================================= */
#define UV1H_GR0_TLB_MMR_CONTROL 0x401080UL
#define UV2H_GR0_TLB_MMR_CONTROL 0xc01080UL
#define UV3H_GR0_TLB_MMR_CONTROL 0xc01080UL
#define UV4H_GR0_TLB_MMR_CONTROL 0x601080UL
#define UVH_GR0_TLB_MMR_CONTROL (					\
	is_uv1_hub() ? UV1H_GR0_TLB_MMR_CONTROL :			\
	is_uv2_hub() ? UV2H_GR0_TLB_MMR_CONTROL :			\
	is_uv3_hub() ? UV3H_GR0_TLB_MMR_CONTROL :			\
	/*is_uv4_hub*/ UV4H_GR0_TLB_MMR_CONTROL)

#define UVH_GR0_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UVH_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UVH_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UVH_GR0_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UVH_GR0_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UVH_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UVH_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UVH_GR0_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UVH_GR0_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL

#define UV1H_GR0_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV1H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT		12
#define UV1H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_CON_SHFT	48
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_SHFT	52
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBPGSIZE_SHFT	54
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBRREG_SHFT	56
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBLRUV_SHFT	60
#define UV1H_GR0_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000000fffUL
#define UV1H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000003000UL
#define UV1H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_CON_MASK	0x0001000000000000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_MASK	0x0010000000000000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBPGSIZE_MASK	0x0040000000000000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBRREG_MASK	0x0100000000000000UL
#define UV1H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBLRUV_MASK	0x1000000000000000UL

#define UVXH_GR0_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UVXH_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UVXH_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UVXH_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL

#define UV2H_GR0_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV2H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT		12
#define UV2H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_INJ_CON_SHFT	48
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_SHFT	52
#define UV2H_GR0_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000000fffUL
#define UV2H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000003000UL
#define UV2H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_INJ_CON_MASK	0x0001000000000000UL
#define UV2H_GR0_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_MASK	0x0010000000000000UL

#define UV3H_GR0_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV3H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT		12
#define UV3H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV3H_GR0_TLB_MMR_CONTROL_ECC_SEL_SHFT		21
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UV3H_GR0_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000000fffUL
#define UV3H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000003000UL
#define UV3H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV3H_GR0_TLB_MMR_CONTROL_ECC_SEL_MASK		0x0000000000200000UL
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV3H_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL

#define UV4H_GR0_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV4H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT		13
#define UV4H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV4H_GR0_TLB_MMR_CONTROL_ECC_SEL_SHFT		21
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UV4H_GR0_TLB_MMR_CONTROL_PAGE_SIZE_SHFT		59
#define UV4H_GR0_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000001fffUL
#define UV4H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000006000UL
#define UV4H_GR0_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV4H_GR0_TLB_MMR_CONTROL_ECC_SEL_MASK		0x0000000000200000UL
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV4H_GR0_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL
#define UV4H_GR0_TLB_MMR_CONTROL_PAGE_SIZE_MASK		0xf800000000000000UL

#define UVH_GR0_TLB_MMR_CONTROL_INDEX_MASK (				\
	is_uv1_hub() ? UV1H_GR0_TLB_MMR_CONTROL_INDEX_MASK :		\
	is_uv2_hub() ? UV2H_GR0_TLB_MMR_CONTROL_INDEX_MASK :		\
	is_uv3_hub() ? UV3H_GR0_TLB_MMR_CONTROL_INDEX_MASK :		\
	/*is_uv4_hub*/ UV4H_GR0_TLB_MMR_CONTROL_INDEX_MASK)
#define UVH_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK (				\
	is_uv1_hub() ? UV1H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK :		\
	is_uv2_hub() ? UV2H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK :		\
	is_uv3_hub() ? UV3H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK :		\
	/*is_uv4_hub*/ UV4H_GR0_TLB_MMR_CONTROL_MEM_SEL_MASK)
#define UVH_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT (				\
	is_uv1_hub() ? UV1H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT :		\
	is_uv2_hub() ? UV2H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT :		\
	is_uv3_hub() ? UV3H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT :		\
	/*is_uv4_hub*/ UV4H_GR0_TLB_MMR_CONTROL_MEM_SEL_SHFT)

union uvh_gr0_tlb_mmr_control_u {
	unsigned long	v;
	struct uvh_gr0_tlb_mmr_control_s {
		unsigned long	rsvd_0_15:16;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	rsvd_32_48:17;
		unsigned long	rsvd_49_51:3;
		unsigned long	rsvd_52_63:12;
	} s;
	struct uv1h_gr0_tlb_mmr_control_s {
		unsigned long	index:12;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_14_15:2;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	rsvd_32_47:16;
		unsigned long	mmr_inj_con:1;			/* RW */
		unsigned long	rsvd_49_51:3;
		unsigned long	mmr_inj_tlbram:1;		/* RW */
		unsigned long	rsvd_53:1;
		unsigned long	mmr_inj_tlbpgsize:1;		/* RW */
		unsigned long	rsvd_55:1;
		unsigned long	mmr_inj_tlbrreg:1;		/* RW */
		unsigned long	rsvd_57_59:3;
		unsigned long	mmr_inj_tlblruv:1;		/* RW */
		unsigned long	rsvd_61_63:3;
	} s1;
	struct uvxh_gr0_tlb_mmr_control_s {
		unsigned long	rsvd_0_15:16;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	rsvd_48:1;
		unsigned long	rsvd_49_51:3;
		unsigned long	rsvd_52_63:12;
	} sx;
	struct uv2h_gr0_tlb_mmr_control_s {
		unsigned long	index:12;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_14_15:2;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	mmr_inj_con:1;			/* RW */
		unsigned long	rsvd_49_51:3;
		unsigned long	mmr_inj_tlbram:1;		/* RW */
		unsigned long	rsvd_53_63:11;
	} s2;
	struct uv3h_gr0_tlb_mmr_control_s {
		unsigned long	index:12;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_14_15:2;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	ecc_sel:1;			/* RW */
		unsigned long	rsvd_22_29:8;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	undef_48:1;			/* Undefined */
		unsigned long	rsvd_49_51:3;
		unsigned long	undef_52:1;			/* Undefined */
		unsigned long	rsvd_53_63:11;
	} s3;
	struct uv4h_gr0_tlb_mmr_control_s {
		unsigned long	index:13;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_15:1;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	ecc_sel:1;			/* RW */
		unsigned long	rsvd_22_29:8;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	undef_48:1;			/* Undefined */
		unsigned long	rsvd_49_51:3;
		unsigned long	rsvd_52_58:7;
		unsigned long	page_size:5;			/* RW */
	} s4;
};

/* ========================================================================= */
/*                       UVH_GR0_TLB_MMR_READ_DATA_HI                        */
/* ========================================================================= */
#define UV1H_GR0_TLB_MMR_READ_DATA_HI 0x4010a0UL
#define UV2H_GR0_TLB_MMR_READ_DATA_HI 0xc010a0UL
#define UV3H_GR0_TLB_MMR_READ_DATA_HI 0xc010a0UL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI 0x6010a0UL
#define UVH_GR0_TLB_MMR_READ_DATA_HI (					\
	is_uv1_hub() ? UV1H_GR0_TLB_MMR_READ_DATA_HI :			\
	is_uv2_hub() ? UV2H_GR0_TLB_MMR_READ_DATA_HI :			\
	is_uv3_hub() ? UV3H_GR0_TLB_MMR_READ_DATA_HI :			\
	/*is_uv4_hub*/ UV4H_GR0_TLB_MMR_READ_DATA_HI)

#define UVH_GR0_TLB_MMR_READ_DATA_HI_PFN_SHFT		0

#define UV1H_GR0_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_GAA_SHFT		41
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	43
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_LARGER_SHFT	44
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_PFN_MASK		0x000001ffffffffffUL
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0000060000000000UL
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0000080000000000UL
#define UV1H_GR0_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0000100000000000UL

#define UVXH_GR0_TLB_MMR_READ_DATA_HI_PFN_SHFT		0

#define UV2H_GR0_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_GAA_SHFT		41
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	43
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_LARGER_SHFT	44
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_PFN_MASK		0x000001ffffffffffUL
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0000060000000000UL
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0000080000000000UL
#define UV2H_GR0_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0000100000000000UL

#define UV3H_GR0_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_GAA_SHFT		41
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	43
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_LARGER_SHFT	44
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_AA_EXT_SHFT	45
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_WAY_ECC_SHFT	55
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_PFN_MASK		0x000001ffffffffffUL
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0000060000000000UL
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0000080000000000UL
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0000100000000000UL
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_AA_EXT_MASK	0x0000200000000000UL
#define UV3H_GR0_TLB_MMR_READ_DATA_HI_WAY_ECC_MASK	0xff80000000000000UL

#define UV4H_GR0_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_PNID_SHFT		34
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_GAA_SHFT		49
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	51
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_LARGER_SHFT	52
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_AA_EXT_SHFT	53
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_WAY_ECC_SHFT	55
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_PFN_MASK		0x00000003ffffffffUL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_PNID_MASK		0x0001fffc00000000UL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0006000000000000UL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0008000000000000UL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0010000000000000UL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_AA_EXT_MASK	0x0020000000000000UL
#define UV4H_GR0_TLB_MMR_READ_DATA_HI_WAY_ECC_MASK	0xff80000000000000UL


union uvh_gr0_tlb_mmr_read_data_hi_u {
	unsigned long	v;
	struct uv1h_gr0_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:41;				/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	rsvd_45_63:19;
	} s1;
	struct uv2h_gr0_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:41;				/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	rsvd_45_63:19;
	} s2;
	struct uv3h_gr0_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:41;				/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	aa_ext:1;			/* RO */
		unsigned long	undef_46_54:9;			/* Undefined */
		unsigned long	way_ecc:9;			/* RO */
	} s3;
	struct uv4h_gr0_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:34;				/* RO */
		unsigned long	pnid:15;			/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	aa_ext:1;			/* RO */
		unsigned long	undef_54:1;			/* Undefined */
		unsigned long	way_ecc:9;			/* RO */
	} s4;
};

/* ========================================================================= */
/*                       UVH_GR0_TLB_MMR_READ_DATA_LO                        */
/* ========================================================================= */
#define UV1H_GR0_TLB_MMR_READ_DATA_LO 0x4010a8UL
#define UV2H_GR0_TLB_MMR_READ_DATA_LO 0xc010a8UL
#define UV3H_GR0_TLB_MMR_READ_DATA_LO 0xc010a8UL
#define UV4H_GR0_TLB_MMR_READ_DATA_LO 0x6010a8UL
#define UVH_GR0_TLB_MMR_READ_DATA_LO (					\
	is_uv1_hub() ? UV1H_GR0_TLB_MMR_READ_DATA_LO :			\
	is_uv2_hub() ? UV2H_GR0_TLB_MMR_READ_DATA_LO :			\
	is_uv3_hub() ? UV3H_GR0_TLB_MMR_READ_DATA_LO :			\
	/*is_uv4_hub*/ UV4H_GR0_TLB_MMR_READ_DATA_LO)

#define UVH_GR0_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UVH_GR0_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UVH_GR0_TLB_MMR_READ_DATA_LO_VALID_SHFT		63
#define UVH_GR0_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UVH_GR0_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UVH_GR0_TLB_MMR_READ_DATA_LO_VALID_MASK		0x8000000000000000UL

#define UV1H_GR0_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV1H_GR0_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV1H_GR0_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV1H_GR0_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV1H_GR0_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV1H_GR0_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UVXH_GR0_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UVXH_GR0_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UVXH_GR0_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UVXH_GR0_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UVXH_GR0_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UVXH_GR0_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UV2H_GR0_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV2H_GR0_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV2H_GR0_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV2H_GR0_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV2H_GR0_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV2H_GR0_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UV3H_GR0_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV3H_GR0_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV3H_GR0_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV3H_GR0_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV3H_GR0_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV3H_GR0_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UV4H_GR0_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV4H_GR0_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV4H_GR0_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV4H_GR0_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV4H_GR0_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV4H_GR0_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL


union uvh_gr0_tlb_mmr_read_data_lo_u {
	unsigned long	v;
	struct uvh_gr0_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s;
	struct uv1h_gr0_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s1;
	struct uvxh_gr0_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} sx;
	struct uv2h_gr0_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s2;
	struct uv3h_gr0_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s3;
	struct uv4h_gr0_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s4;
};

/* ========================================================================= */
/*                         UVH_GR1_TLB_INT0_CONFIG                           */
/* ========================================================================= */
#define UV1H_GR1_TLB_INT0_CONFIG 0x61f00UL
#define UV2H_GR1_TLB_INT0_CONFIG 0x61f00UL
#define UV3H_GR1_TLB_INT0_CONFIG 0x61f00UL
#define UV4H_GR1_TLB_INT0_CONFIG 0x62100UL
#define UVH_GR1_TLB_INT0_CONFIG (					\
	is_uv1_hub() ? UV1H_GR1_TLB_INT0_CONFIG :			\
	is_uv2_hub() ? UV2H_GR1_TLB_INT0_CONFIG :			\
	is_uv3_hub() ? UV3H_GR1_TLB_INT0_CONFIG :			\
	/*is_uv4_hub*/ UV4H_GR1_TLB_INT0_CONFIG)

#define UVH_GR1_TLB_INT0_CONFIG_VECTOR_SHFT		0
#define UVH_GR1_TLB_INT0_CONFIG_DM_SHFT			8
#define UVH_GR1_TLB_INT0_CONFIG_DESTMODE_SHFT		11
#define UVH_GR1_TLB_INT0_CONFIG_STATUS_SHFT		12
#define UVH_GR1_TLB_INT0_CONFIG_P_SHFT			13
#define UVH_GR1_TLB_INT0_CONFIG_T_SHFT			15
#define UVH_GR1_TLB_INT0_CONFIG_M_SHFT			16
#define UVH_GR1_TLB_INT0_CONFIG_APIC_ID_SHFT		32
#define UVH_GR1_TLB_INT0_CONFIG_VECTOR_MASK		0x00000000000000ffUL
#define UVH_GR1_TLB_INT0_CONFIG_DM_MASK			0x0000000000000700UL
#define UVH_GR1_TLB_INT0_CONFIG_DESTMODE_MASK		0x0000000000000800UL
#define UVH_GR1_TLB_INT0_CONFIG_STATUS_MASK		0x0000000000001000UL
#define UVH_GR1_TLB_INT0_CONFIG_P_MASK			0x0000000000002000UL
#define UVH_GR1_TLB_INT0_CONFIG_T_MASK			0x0000000000008000UL
#define UVH_GR1_TLB_INT0_CONFIG_M_MASK			0x0000000000010000UL
#define UVH_GR1_TLB_INT0_CONFIG_APIC_ID_MASK		0xffffffff00000000UL


union uvh_gr1_tlb_int0_config_u {
	unsigned long	v;
	struct uvh_gr1_tlb_int0_config_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	dm:3;				/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	status:1;			/* RO */
		unsigned long	p:1;				/* RO */
		unsigned long	rsvd_14:1;
		unsigned long	t:1;				/* RO */
		unsigned long	m:1;				/* RW */
		unsigned long	rsvd_17_31:15;
		unsigned long	apic_id:32;			/* RW */
	} s;
};

/* ========================================================================= */
/*                         UVH_GR1_TLB_INT1_CONFIG                           */
/* ========================================================================= */
#define UV1H_GR1_TLB_INT1_CONFIG 0x61f40UL
#define UV2H_GR1_TLB_INT1_CONFIG 0x61f40UL
#define UV3H_GR1_TLB_INT1_CONFIG 0x61f40UL
#define UV4H_GR1_TLB_INT1_CONFIG 0x62140UL
#define UVH_GR1_TLB_INT1_CONFIG (					\
	is_uv1_hub() ? UV1H_GR1_TLB_INT1_CONFIG :			\
	is_uv2_hub() ? UV2H_GR1_TLB_INT1_CONFIG :			\
	is_uv3_hub() ? UV3H_GR1_TLB_INT1_CONFIG :			\
	/*is_uv4_hub*/ UV4H_GR1_TLB_INT1_CONFIG)

#define UVH_GR1_TLB_INT1_CONFIG_VECTOR_SHFT		0
#define UVH_GR1_TLB_INT1_CONFIG_DM_SHFT			8
#define UVH_GR1_TLB_INT1_CONFIG_DESTMODE_SHFT		11
#define UVH_GR1_TLB_INT1_CONFIG_STATUS_SHFT		12
#define UVH_GR1_TLB_INT1_CONFIG_P_SHFT			13
#define UVH_GR1_TLB_INT1_CONFIG_T_SHFT			15
#define UVH_GR1_TLB_INT1_CONFIG_M_SHFT			16
#define UVH_GR1_TLB_INT1_CONFIG_APIC_ID_SHFT		32
#define UVH_GR1_TLB_INT1_CONFIG_VECTOR_MASK		0x00000000000000ffUL
#define UVH_GR1_TLB_INT1_CONFIG_DM_MASK			0x0000000000000700UL
#define UVH_GR1_TLB_INT1_CONFIG_DESTMODE_MASK		0x0000000000000800UL
#define UVH_GR1_TLB_INT1_CONFIG_STATUS_MASK		0x0000000000001000UL
#define UVH_GR1_TLB_INT1_CONFIG_P_MASK			0x0000000000002000UL
#define UVH_GR1_TLB_INT1_CONFIG_T_MASK			0x0000000000008000UL
#define UVH_GR1_TLB_INT1_CONFIG_M_MASK			0x0000000000010000UL
#define UVH_GR1_TLB_INT1_CONFIG_APIC_ID_MASK		0xffffffff00000000UL


union uvh_gr1_tlb_int1_config_u {
	unsigned long	v;
	struct uvh_gr1_tlb_int1_config_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	dm:3;				/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	status:1;			/* RO */
		unsigned long	p:1;				/* RO */
		unsigned long	rsvd_14:1;
		unsigned long	t:1;				/* RO */
		unsigned long	m:1;				/* RW */
		unsigned long	rsvd_17_31:15;
		unsigned long	apic_id:32;			/* RW */
	} s;
};

/* ========================================================================= */
/*                         UVH_GR1_TLB_MMR_CONTROL                           */
/* ========================================================================= */
#define UV1H_GR1_TLB_MMR_CONTROL 0x801080UL
#define UV2H_GR1_TLB_MMR_CONTROL 0x1001080UL
#define UV3H_GR1_TLB_MMR_CONTROL 0x1001080UL
#define UV4H_GR1_TLB_MMR_CONTROL 0x701080UL
#define UVH_GR1_TLB_MMR_CONTROL (					\
	is_uv1_hub() ? UV1H_GR1_TLB_MMR_CONTROL :			\
	is_uv2_hub() ? UV2H_GR1_TLB_MMR_CONTROL :			\
	is_uv3_hub() ? UV3H_GR1_TLB_MMR_CONTROL :			\
	/*is_uv4_hub*/ UV4H_GR1_TLB_MMR_CONTROL)

#define UVH_GR1_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UVH_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UVH_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UVH_GR1_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UVH_GR1_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UVH_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UVH_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UVH_GR1_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UVH_GR1_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL

#define UV1H_GR1_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV1H_GR1_TLB_MMR_CONTROL_MEM_SEL_SHFT		12
#define UV1H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_CON_SHFT	48
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_SHFT	52
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBPGSIZE_SHFT	54
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBRREG_SHFT	56
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBLRUV_SHFT	60
#define UV1H_GR1_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000000fffUL
#define UV1H_GR1_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000003000UL
#define UV1H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_CON_MASK	0x0001000000000000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_MASK	0x0010000000000000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBPGSIZE_MASK	0x0040000000000000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBRREG_MASK	0x0100000000000000UL
#define UV1H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBLRUV_MASK	0x1000000000000000UL

#define UVXH_GR1_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UVXH_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UVXH_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UVXH_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL

#define UV2H_GR1_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV2H_GR1_TLB_MMR_CONTROL_MEM_SEL_SHFT		12
#define UV2H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_INJ_CON_SHFT	48
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_SHFT	52
#define UV2H_GR1_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000000fffUL
#define UV2H_GR1_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000003000UL
#define UV2H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_INJ_CON_MASK	0x0001000000000000UL
#define UV2H_GR1_TLB_MMR_CONTROL_MMR_INJ_TLBRAM_MASK	0x0010000000000000UL

#define UV3H_GR1_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV3H_GR1_TLB_MMR_CONTROL_MEM_SEL_SHFT		12
#define UV3H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV3H_GR1_TLB_MMR_CONTROL_ECC_SEL_SHFT		21
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UV3H_GR1_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000000fffUL
#define UV3H_GR1_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000003000UL
#define UV3H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV3H_GR1_TLB_MMR_CONTROL_ECC_SEL_MASK		0x0000000000200000UL
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV3H_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL

#define UV4H_GR1_TLB_MMR_CONTROL_INDEX_SHFT		0
#define UV4H_GR1_TLB_MMR_CONTROL_MEM_SEL_SHFT		13
#define UV4H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_SHFT	16
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_SHFT	20
#define UV4H_GR1_TLB_MMR_CONTROL_ECC_SEL_SHFT		21
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_WRITE_SHFT		30
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_READ_SHFT		31
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_SHFT	32
#define UV4H_GR1_TLB_MMR_CONTROL_PAGE_SIZE_SHFT		59
#define UV4H_GR1_TLB_MMR_CONTROL_INDEX_MASK		0x0000000000001fffUL
#define UV4H_GR1_TLB_MMR_CONTROL_MEM_SEL_MASK		0x0000000000006000UL
#define UV4H_GR1_TLB_MMR_CONTROL_AUTO_VALID_EN_MASK	0x0000000000010000UL
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_HASH_INDEX_EN_MASK	0x0000000000100000UL
#define UV4H_GR1_TLB_MMR_CONTROL_ECC_SEL_MASK		0x0000000000200000UL
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_WRITE_MASK		0x0000000040000000UL
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_READ_MASK		0x0000000080000000UL
#define UV4H_GR1_TLB_MMR_CONTROL_MMR_OP_DONE_MASK	0x0000000100000000UL
#define UV4H_GR1_TLB_MMR_CONTROL_PAGE_SIZE_MASK		0xf800000000000000UL


union uvh_gr1_tlb_mmr_control_u {
	unsigned long	v;
	struct uvh_gr1_tlb_mmr_control_s {
		unsigned long	rsvd_0_15:16;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	rsvd_32_48:17;
		unsigned long	rsvd_49_51:3;
		unsigned long	rsvd_52_63:12;
	} s;
	struct uv1h_gr1_tlb_mmr_control_s {
		unsigned long	index:12;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_14_15:2;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	rsvd_32_47:16;
		unsigned long	mmr_inj_con:1;			/* RW */
		unsigned long	rsvd_49_51:3;
		unsigned long	mmr_inj_tlbram:1;		/* RW */
		unsigned long	rsvd_53:1;
		unsigned long	mmr_inj_tlbpgsize:1;		/* RW */
		unsigned long	rsvd_55:1;
		unsigned long	mmr_inj_tlbrreg:1;		/* RW */
		unsigned long	rsvd_57_59:3;
		unsigned long	mmr_inj_tlblruv:1;		/* RW */
		unsigned long	rsvd_61_63:3;
	} s1;
	struct uvxh_gr1_tlb_mmr_control_s {
		unsigned long	rsvd_0_15:16;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	rsvd_48:1;
		unsigned long	rsvd_49_51:3;
		unsigned long	rsvd_52_63:12;
	} sx;
	struct uv2h_gr1_tlb_mmr_control_s {
		unsigned long	index:12;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_14_15:2;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	rsvd_21_29:9;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	mmr_inj_con:1;			/* RW */
		unsigned long	rsvd_49_51:3;
		unsigned long	mmr_inj_tlbram:1;		/* RW */
		unsigned long	rsvd_53_63:11;
	} s2;
	struct uv3h_gr1_tlb_mmr_control_s {
		unsigned long	index:12;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_14_15:2;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	ecc_sel:1;			/* RW */
		unsigned long	rsvd_22_29:8;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	undef_48:1;			/* Undefined */
		unsigned long	rsvd_49_51:3;
		unsigned long	undef_52:1;			/* Undefined */
		unsigned long	rsvd_53_63:11;
	} s3;
	struct uv4h_gr1_tlb_mmr_control_s {
		unsigned long	index:13;			/* RW */
		unsigned long	mem_sel:2;			/* RW */
		unsigned long	rsvd_15:1;
		unsigned long	auto_valid_en:1;		/* RW */
		unsigned long	rsvd_17_19:3;
		unsigned long	mmr_hash_index_en:1;		/* RW */
		unsigned long	ecc_sel:1;			/* RW */
		unsigned long	rsvd_22_29:8;
		unsigned long	mmr_write:1;			/* WP */
		unsigned long	mmr_read:1;			/* WP */
		unsigned long	mmr_op_done:1;			/* RW */
		unsigned long	rsvd_33_47:15;
		unsigned long	undef_48:1;			/* Undefined */
		unsigned long	rsvd_49_51:3;
		unsigned long	rsvd_52_58:7;
		unsigned long	page_size:5;			/* RW */
	} s4;
};

/* ========================================================================= */
/*                       UVH_GR1_TLB_MMR_READ_DATA_HI                        */
/* ========================================================================= */
#define UV1H_GR1_TLB_MMR_READ_DATA_HI 0x8010a0UL
#define UV2H_GR1_TLB_MMR_READ_DATA_HI 0x10010a0UL
#define UV3H_GR1_TLB_MMR_READ_DATA_HI 0x10010a0UL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI 0x7010a0UL
#define UVH_GR1_TLB_MMR_READ_DATA_HI (					\
	is_uv1_hub() ? UV1H_GR1_TLB_MMR_READ_DATA_HI :			\
	is_uv2_hub() ? UV2H_GR1_TLB_MMR_READ_DATA_HI :			\
	is_uv3_hub() ? UV3H_GR1_TLB_MMR_READ_DATA_HI :			\
	/*is_uv4_hub*/ UV4H_GR1_TLB_MMR_READ_DATA_HI)

#define UVH_GR1_TLB_MMR_READ_DATA_HI_PFN_SHFT		0

#define UV1H_GR1_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_GAA_SHFT		41
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	43
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_LARGER_SHFT	44
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_PFN_MASK		0x000001ffffffffffUL
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0000060000000000UL
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0000080000000000UL
#define UV1H_GR1_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0000100000000000UL

#define UVXH_GR1_TLB_MMR_READ_DATA_HI_PFN_SHFT		0

#define UV2H_GR1_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_GAA_SHFT		41
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	43
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_LARGER_SHFT	44
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_PFN_MASK		0x000001ffffffffffUL
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0000060000000000UL
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0000080000000000UL
#define UV2H_GR1_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0000100000000000UL

#define UV3H_GR1_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_GAA_SHFT		41
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	43
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_LARGER_SHFT	44
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_AA_EXT_SHFT	45
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_WAY_ECC_SHFT	55
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_PFN_MASK		0x000001ffffffffffUL
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0000060000000000UL
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0000080000000000UL
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0000100000000000UL
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_AA_EXT_MASK	0x0000200000000000UL
#define UV3H_GR1_TLB_MMR_READ_DATA_HI_WAY_ECC_MASK	0xff80000000000000UL

#define UV4H_GR1_TLB_MMR_READ_DATA_HI_PFN_SHFT		0
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_PNID_SHFT		34
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_GAA_SHFT		49
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_SHFT	51
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_LARGER_SHFT	52
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_AA_EXT_SHFT	53
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_WAY_ECC_SHFT	55
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_PFN_MASK		0x00000003ffffffffUL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_PNID_MASK		0x0001fffc00000000UL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_GAA_MASK		0x0006000000000000UL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_DIRTY_MASK	0x0008000000000000UL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_LARGER_MASK	0x0010000000000000UL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_AA_EXT_MASK	0x0020000000000000UL
#define UV4H_GR1_TLB_MMR_READ_DATA_HI_WAY_ECC_MASK	0xff80000000000000UL


union uvh_gr1_tlb_mmr_read_data_hi_u {
	unsigned long	v;
	struct uv1h_gr1_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:41;				/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	rsvd_45_63:19;
	} s1;
	struct uv2h_gr1_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:41;				/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	rsvd_45_63:19;
	} s2;
	struct uv3h_gr1_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:41;				/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	aa_ext:1;			/* RO */
		unsigned long	undef_46_54:9;			/* Undefined */
		unsigned long	way_ecc:9;			/* RO */
	} s3;
	struct uv4h_gr1_tlb_mmr_read_data_hi_s {
		unsigned long	pfn:34;				/* RO */
		unsigned long	pnid:15;			/* RO */
		unsigned long	gaa:2;				/* RO */
		unsigned long	dirty:1;			/* RO */
		unsigned long	larger:1;			/* RO */
		unsigned long	aa_ext:1;			/* RO */
		unsigned long	undef_54:1;			/* Undefined */
		unsigned long	way_ecc:9;			/* RO */
	} s4;
};

/* ========================================================================= */
/*                       UVH_GR1_TLB_MMR_READ_DATA_LO                        */
/* ========================================================================= */
#define UV1H_GR1_TLB_MMR_READ_DATA_LO 0x8010a8UL
#define UV2H_GR1_TLB_MMR_READ_DATA_LO 0x10010a8UL
#define UV3H_GR1_TLB_MMR_READ_DATA_LO 0x10010a8UL
#define UV4H_GR1_TLB_MMR_READ_DATA_LO 0x7010a8UL
#define UVH_GR1_TLB_MMR_READ_DATA_LO (					\
	is_uv1_hub() ? UV1H_GR1_TLB_MMR_READ_DATA_LO :			\
	is_uv2_hub() ? UV2H_GR1_TLB_MMR_READ_DATA_LO :			\
	is_uv3_hub() ? UV3H_GR1_TLB_MMR_READ_DATA_LO :			\
	/*is_uv4_hub*/ UV4H_GR1_TLB_MMR_READ_DATA_LO)

#define UVH_GR1_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UVH_GR1_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UVH_GR1_TLB_MMR_READ_DATA_LO_VALID_SHFT		63
#define UVH_GR1_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UVH_GR1_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UVH_GR1_TLB_MMR_READ_DATA_LO_VALID_MASK		0x8000000000000000UL

#define UV1H_GR1_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV1H_GR1_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV1H_GR1_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV1H_GR1_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV1H_GR1_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV1H_GR1_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UVXH_GR1_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UVXH_GR1_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UVXH_GR1_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UVXH_GR1_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UVXH_GR1_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UVXH_GR1_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UV2H_GR1_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV2H_GR1_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV2H_GR1_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV2H_GR1_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV2H_GR1_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV2H_GR1_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UV3H_GR1_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV3H_GR1_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV3H_GR1_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV3H_GR1_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV3H_GR1_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV3H_GR1_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL

#define UV4H_GR1_TLB_MMR_READ_DATA_LO_VPN_SHFT		0
#define UV4H_GR1_TLB_MMR_READ_DATA_LO_ASID_SHFT		39
#define UV4H_GR1_TLB_MMR_READ_DATA_LO_VALID_SHFT	63
#define UV4H_GR1_TLB_MMR_READ_DATA_LO_VPN_MASK		0x0000007fffffffffUL
#define UV4H_GR1_TLB_MMR_READ_DATA_LO_ASID_MASK		0x7fffff8000000000UL
#define UV4H_GR1_TLB_MMR_READ_DATA_LO_VALID_MASK	0x8000000000000000UL


union uvh_gr1_tlb_mmr_read_data_lo_u {
	unsigned long	v;
	struct uvh_gr1_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s;
	struct uv1h_gr1_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s1;
	struct uvxh_gr1_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} sx;
	struct uv2h_gr1_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s2;
	struct uv3h_gr1_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s3;
	struct uv4h_gr1_tlb_mmr_read_data_lo_s {
		unsigned long	vpn:39;				/* RO */
		unsigned long	asid:24;			/* RO */
		unsigned long	valid:1;			/* RO */
	} s4;
};

/* ========================================================================= */
/*                               UVH_INT_CMPB                                */
/* ========================================================================= */
#define UVH_INT_CMPB 0x22080UL

#define UVH_INT_CMPB_REAL_TIME_CMPB_SHFT		0
#define UVH_INT_CMPB_REAL_TIME_CMPB_MASK		0x00ffffffffffffffUL


union uvh_int_cmpb_u {
	unsigned long	v;
	struct uvh_int_cmpb_s {
		unsigned long	real_time_cmpb:56;		/* RW */
		unsigned long	rsvd_56_63:8;
	} s;
};

/* ========================================================================= */
/*                               UVH_INT_CMPC                                */
/* ========================================================================= */
#define UVH_INT_CMPC 0x22100UL


#define UV1H_INT_CMPC_REAL_TIME_CMPC_SHFT		0
#define UV1H_INT_CMPC_REAL_TIME_CMPC_MASK		0x00ffffffffffffffUL

#define UVXH_INT_CMPC_REAL_TIME_CMP_2_SHFT		0
#define UVXH_INT_CMPC_REAL_TIME_CMP_2_MASK		0x00ffffffffffffffUL


union uvh_int_cmpc_u {
	unsigned long	v;
	struct uvh_int_cmpc_s {
		unsigned long	real_time_cmpc:56;		/* RW */
		unsigned long	rsvd_56_63:8;
	} s;
};

/* ========================================================================= */
/*                               UVH_INT_CMPD                                */
/* ========================================================================= */
#define UVH_INT_CMPD 0x22180UL


#define UV1H_INT_CMPD_REAL_TIME_CMPD_SHFT		0
#define UV1H_INT_CMPD_REAL_TIME_CMPD_MASK		0x00ffffffffffffffUL

#define UVXH_INT_CMPD_REAL_TIME_CMP_3_SHFT		0
#define UVXH_INT_CMPD_REAL_TIME_CMP_3_MASK		0x00ffffffffffffffUL


union uvh_int_cmpd_u {
	unsigned long	v;
	struct uvh_int_cmpd_s {
		unsigned long	real_time_cmpd:56;		/* RW */
		unsigned long	rsvd_56_63:8;
	} s;
};

/* ========================================================================= */
/*                               UVH_IPI_INT                                 */
/* ========================================================================= */
#define UVH_IPI_INT 0x60500UL

#define UV1H_IPI_INT_32 0x348
#define UV2H_IPI_INT_32 0x348
#define UV3H_IPI_INT_32 0x348
#define UV4H_IPI_INT_32 0x268
#define UVH_IPI_INT_32 (						\
	is_uv1_hub() ? UV1H_IPI_INT_32 :				\
	is_uv2_hub() ? UV2H_IPI_INT_32 :				\
	is_uv3_hub() ? UV3H_IPI_INT_32 :				\
	/*is_uv4_hub*/ UV4H_IPI_INT_32)

#define UVH_IPI_INT_VECTOR_SHFT				0
#define UVH_IPI_INT_DELIVERY_MODE_SHFT			8
#define UVH_IPI_INT_DESTMODE_SHFT			11
#define UVH_IPI_INT_APIC_ID_SHFT			16
#define UVH_IPI_INT_SEND_SHFT				63
#define UVH_IPI_INT_VECTOR_MASK				0x00000000000000ffUL
#define UVH_IPI_INT_DELIVERY_MODE_MASK			0x0000000000000700UL
#define UVH_IPI_INT_DESTMODE_MASK			0x0000000000000800UL
#define UVH_IPI_INT_APIC_ID_MASK			0x0000ffffffff0000UL
#define UVH_IPI_INT_SEND_MASK				0x8000000000000000UL


union uvh_ipi_int_u {
	unsigned long	v;
	struct uvh_ipi_int_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	delivery_mode:3;		/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	rsvd_12_15:4;
		unsigned long	apic_id:32;			/* RW */
		unsigned long	rsvd_48_62:15;
		unsigned long	send:1;				/* WP */
	} s;
};

/* ========================================================================= */
/*                   UVH_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST                     */
/* ========================================================================= */
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST 0x320050UL
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST 0x320050UL
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST 0x320050UL
#define UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST uv_undefined("UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST")
#define UVH_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST (				\
	is_uv1_hub() ? UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST :		\
	is_uv2_hub() ? UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST :		\
	is_uv3_hub() ? UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST)
#define UVH_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_32 0x9c0


#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_ADDRESS_SHFT 4
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_NODE_ID_SHFT 49
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_ADDRESS_MASK 0x000007fffffffff0UL
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_NODE_ID_MASK 0x7ffe000000000000UL


#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_ADDRESS_SHFT 4
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_NODE_ID_SHFT 49
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_ADDRESS_MASK 0x000007fffffffff0UL
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_NODE_ID_MASK 0x7ffe000000000000UL

#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_ADDRESS_SHFT 4
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_NODE_ID_SHFT 49
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_ADDRESS_MASK 0x000007fffffffff0UL
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_FIRST_NODE_ID_MASK 0x7ffe000000000000UL


union uvh_lb_bau_intd_payload_queue_first_u {
	unsigned long	v;
	struct uv1h_lb_bau_intd_payload_queue_first_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_48:6;
		unsigned long	node_id:14;			/* RW */
		unsigned long	rsvd_63:1;
	} s1;
	struct uv2h_lb_bau_intd_payload_queue_first_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_48:6;
		unsigned long	node_id:14;			/* RW */
		unsigned long	rsvd_63:1;
	} s2;
	struct uv3h_lb_bau_intd_payload_queue_first_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_48:6;
		unsigned long	node_id:14;			/* RW */
		unsigned long	rsvd_63:1;
	} s3;
};

/* ========================================================================= */
/*                    UVH_LB_BAU_INTD_PAYLOAD_QUEUE_LAST                     */
/* ========================================================================= */
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST 0x320060UL
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST 0x320060UL
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST 0x320060UL
#define UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST uv_undefined("UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST")
#define UVH_LB_BAU_INTD_PAYLOAD_QUEUE_LAST (				\
	is_uv1_hub() ? UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST :		\
	is_uv2_hub() ? UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST :		\
	is_uv3_hub() ? UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST)
#define UVH_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_32 0x9c8


#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_ADDRESS_SHFT 4
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_ADDRESS_MASK 0x000007fffffffff0UL


#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_ADDRESS_SHFT 4
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_ADDRESS_MASK 0x000007fffffffff0UL

#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_ADDRESS_SHFT 4
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_LAST_ADDRESS_MASK 0x000007fffffffff0UL


union uvh_lb_bau_intd_payload_queue_last_u {
	unsigned long	v;
	struct uv1h_lb_bau_intd_payload_queue_last_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_63:21;
	} s1;
	struct uv2h_lb_bau_intd_payload_queue_last_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_63:21;
	} s2;
	struct uv3h_lb_bau_intd_payload_queue_last_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_63:21;
	} s3;
};

/* ========================================================================= */
/*                    UVH_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL                     */
/* ========================================================================= */
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL 0x320070UL
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL 0x320070UL
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL 0x320070UL
#define UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL uv_undefined("UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL")
#define UVH_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL (				\
	is_uv1_hub() ? UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL :		\
	is_uv2_hub() ? UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL :		\
	is_uv3_hub() ? UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL)
#define UVH_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_32 0x9d0


#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_ADDRESS_SHFT 4
#define UV1H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_ADDRESS_MASK 0x000007fffffffff0UL


#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_ADDRESS_SHFT 4
#define UV2H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_ADDRESS_MASK 0x000007fffffffff0UL

#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_ADDRESS_SHFT 4
#define UV3H_LB_BAU_INTD_PAYLOAD_QUEUE_TAIL_ADDRESS_MASK 0x000007fffffffff0UL


union uvh_lb_bau_intd_payload_queue_tail_u {
	unsigned long	v;
	struct uv1h_lb_bau_intd_payload_queue_tail_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_63:21;
	} s1;
	struct uv2h_lb_bau_intd_payload_queue_tail_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_63:21;
	} s2;
	struct uv3h_lb_bau_intd_payload_queue_tail_s {
		unsigned long	rsvd_0_3:4;
		unsigned long	address:39;			/* RW */
		unsigned long	rsvd_43_63:21;
	} s3;
};

/* ========================================================================= */
/*                   UVH_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE                    */
/* ========================================================================= */
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE 0x320080UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE 0x320080UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE 0x320080UL
#define UV4H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE uv_undefined("UV4H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE")
#define UVH_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE (				\
	is_uv1_hub() ? UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE :		\
	is_uv2_hub() ? UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE :		\
	is_uv3_hub() ? UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE)
#define UVH_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_32 0xa68


#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_0_SHFT 0
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_1_SHFT 1
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_2_SHFT 2
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_3_SHFT 3
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_4_SHFT 4
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_5_SHFT 5
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_6_SHFT 6
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_7_SHFT 7
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_0_SHFT 8
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_1_SHFT 9
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_2_SHFT 10
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_3_SHFT 11
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_4_SHFT 12
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_5_SHFT 13
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_6_SHFT 14
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_7_SHFT 15
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_0_MASK 0x0000000000000001UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_1_MASK 0x0000000000000002UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_2_MASK 0x0000000000000004UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_3_MASK 0x0000000000000008UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_4_MASK 0x0000000000000010UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_5_MASK 0x0000000000000020UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_6_MASK 0x0000000000000040UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_7_MASK 0x0000000000000080UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_0_MASK 0x0000000000000100UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_1_MASK 0x0000000000000200UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_2_MASK 0x0000000000000400UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_3_MASK 0x0000000000000800UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_4_MASK 0x0000000000001000UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_5_MASK 0x0000000000002000UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_6_MASK 0x0000000000004000UL
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_7_MASK 0x0000000000008000UL


#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_0_SHFT 0
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_1_SHFT 1
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_2_SHFT 2
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_3_SHFT 3
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_4_SHFT 4
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_5_SHFT 5
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_6_SHFT 6
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_7_SHFT 7
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_0_SHFT 8
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_1_SHFT 9
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_2_SHFT 10
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_3_SHFT 11
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_4_SHFT 12
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_5_SHFT 13
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_6_SHFT 14
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_7_SHFT 15
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_0_MASK 0x0000000000000001UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_1_MASK 0x0000000000000002UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_2_MASK 0x0000000000000004UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_3_MASK 0x0000000000000008UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_4_MASK 0x0000000000000010UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_5_MASK 0x0000000000000020UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_6_MASK 0x0000000000000040UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_7_MASK 0x0000000000000080UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_0_MASK 0x0000000000000100UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_1_MASK 0x0000000000000200UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_2_MASK 0x0000000000000400UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_3_MASK 0x0000000000000800UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_4_MASK 0x0000000000001000UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_5_MASK 0x0000000000002000UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_6_MASK 0x0000000000004000UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_7_MASK 0x0000000000008000UL

#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_0_SHFT 0
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_1_SHFT 1
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_2_SHFT 2
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_3_SHFT 3
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_4_SHFT 4
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_5_SHFT 5
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_6_SHFT 6
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_7_SHFT 7
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_0_SHFT 8
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_1_SHFT 9
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_2_SHFT 10
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_3_SHFT 11
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_4_SHFT 12
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_5_SHFT 13
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_6_SHFT 14
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_7_SHFT 15
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_0_MASK 0x0000000000000001UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_1_MASK 0x0000000000000002UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_2_MASK 0x0000000000000004UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_3_MASK 0x0000000000000008UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_4_MASK 0x0000000000000010UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_5_MASK 0x0000000000000020UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_6_MASK 0x0000000000000040UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_PENDING_7_MASK 0x0000000000000080UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_0_MASK 0x0000000000000100UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_1_MASK 0x0000000000000200UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_2_MASK 0x0000000000000400UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_3_MASK 0x0000000000000800UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_4_MASK 0x0000000000001000UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_5_MASK 0x0000000000002000UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_6_MASK 0x0000000000004000UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_TIMEOUT_7_MASK 0x0000000000008000UL


union uvh_lb_bau_intd_software_acknowledge_u {
	unsigned long	v;
	struct uv1h_lb_bau_intd_software_acknowledge_s {
		unsigned long	pending_0:1;			/* RW, W1C */
		unsigned long	pending_1:1;			/* RW, W1C */
		unsigned long	pending_2:1;			/* RW, W1C */
		unsigned long	pending_3:1;			/* RW, W1C */
		unsigned long	pending_4:1;			/* RW, W1C */
		unsigned long	pending_5:1;			/* RW, W1C */
		unsigned long	pending_6:1;			/* RW, W1C */
		unsigned long	pending_7:1;			/* RW, W1C */
		unsigned long	timeout_0:1;			/* RW, W1C */
		unsigned long	timeout_1:1;			/* RW, W1C */
		unsigned long	timeout_2:1;			/* RW, W1C */
		unsigned long	timeout_3:1;			/* RW, W1C */
		unsigned long	timeout_4:1;			/* RW, W1C */
		unsigned long	timeout_5:1;			/* RW, W1C */
		unsigned long	timeout_6:1;			/* RW, W1C */
		unsigned long	timeout_7:1;			/* RW, W1C */
		unsigned long	rsvd_16_63:48;
	} s1;
	struct uv2h_lb_bau_intd_software_acknowledge_s {
		unsigned long	pending_0:1;			/* RW */
		unsigned long	pending_1:1;			/* RW */
		unsigned long	pending_2:1;			/* RW */
		unsigned long	pending_3:1;			/* RW */
		unsigned long	pending_4:1;			/* RW */
		unsigned long	pending_5:1;			/* RW */
		unsigned long	pending_6:1;			/* RW */
		unsigned long	pending_7:1;			/* RW */
		unsigned long	timeout_0:1;			/* RW */
		unsigned long	timeout_1:1;			/* RW */
		unsigned long	timeout_2:1;			/* RW */
		unsigned long	timeout_3:1;			/* RW */
		unsigned long	timeout_4:1;			/* RW */
		unsigned long	timeout_5:1;			/* RW */
		unsigned long	timeout_6:1;			/* RW */
		unsigned long	timeout_7:1;			/* RW */
		unsigned long	rsvd_16_63:48;
	} s2;
	struct uv3h_lb_bau_intd_software_acknowledge_s {
		unsigned long	pending_0:1;			/* RW */
		unsigned long	pending_1:1;			/* RW */
		unsigned long	pending_2:1;			/* RW */
		unsigned long	pending_3:1;			/* RW */
		unsigned long	pending_4:1;			/* RW */
		unsigned long	pending_5:1;			/* RW */
		unsigned long	pending_6:1;			/* RW */
		unsigned long	pending_7:1;			/* RW */
		unsigned long	timeout_0:1;			/* RW */
		unsigned long	timeout_1:1;			/* RW */
		unsigned long	timeout_2:1;			/* RW */
		unsigned long	timeout_3:1;			/* RW */
		unsigned long	timeout_4:1;			/* RW */
		unsigned long	timeout_5:1;			/* RW */
		unsigned long	timeout_6:1;			/* RW */
		unsigned long	timeout_7:1;			/* RW */
		unsigned long	rsvd_16_63:48;
	} s3;
};

/* ========================================================================= */
/*                UVH_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS                 */
/* ========================================================================= */
#define UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS 0x320088UL
#define UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS 0x320088UL
#define UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS 0x320088UL
#define UV4H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS uv_undefined("UV4H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS")
#define UVH_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS (			\
	is_uv1_hub() ? UV1H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS :	\
	is_uv2_hub() ? UV2H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS :	\
	is_uv3_hub() ? UV3H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS :	\
	/*is_uv4_hub*/ UV4H_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS)
#define UVH_LB_BAU_INTD_SOFTWARE_ACKNOWLEDGE_ALIAS_32 0xa70


/* ========================================================================= */
/*                         UVH_LB_BAU_MISC_CONTROL                           */
/* ========================================================================= */
#define UV1H_LB_BAU_MISC_CONTROL 0x320170UL
#define UV2H_LB_BAU_MISC_CONTROL 0x320170UL
#define UV3H_LB_BAU_MISC_CONTROL 0x320170UL
#define UV4H_LB_BAU_MISC_CONTROL 0xc8170UL
#define UVH_LB_BAU_MISC_CONTROL (					\
	is_uv1_hub() ? UV1H_LB_BAU_MISC_CONTROL :			\
	is_uv2_hub() ? UV2H_LB_BAU_MISC_CONTROL :			\
	is_uv3_hub() ? UV3H_LB_BAU_MISC_CONTROL :			\
	/*is_uv4_hub*/ UV4H_LB_BAU_MISC_CONTROL)

#define UV1H_LB_BAU_MISC_CONTROL_32 0xa10
#define UV2H_LB_BAU_MISC_CONTROL_32 0xa10
#define UV3H_LB_BAU_MISC_CONTROL_32 0xa10
#define UV4H_LB_BAU_MISC_CONTROL_32 0xa18
#define UVH_LB_BAU_MISC_CONTROL_32 (					\
	is_uv1_hub() ? UV1H_LB_BAU_MISC_CONTROL_32 :			\
	is_uv2_hub() ? UV2H_LB_BAU_MISC_CONTROL_32 :			\
	is_uv3_hub() ? UV3H_LB_BAU_MISC_CONTROL_32 :			\
	/*is_uv4_hub*/ UV4H_LB_BAU_MISC_CONTROL_32)

#define UVH_LB_BAU_MISC_CONTROL_REJECTION_DELAY_SHFT	0
#define UVH_LB_BAU_MISC_CONTROL_APIC_MODE_SHFT		8
#define UVH_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_SHFT	9
#define UVH_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_SHFT	10
#define UVH_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_SHFT 11
#define UVH_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_SHFT 14
#define UVH_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_SHFT 20
#define UVH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_SHFT 21
#define UVH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_SHFT 22
#define UVH_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_SHFT 23
#define UVH_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_SHFT 24
#define UVH_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_SHFT 27
#define UVH_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_SHFT 28
#define UVH_LB_BAU_MISC_CONTROL_FUN_SHFT		48
#define UVH_LB_BAU_MISC_CONTROL_REJECTION_DELAY_MASK	0x00000000000000ffUL
#define UVH_LB_BAU_MISC_CONTROL_APIC_MODE_MASK		0x0000000000000100UL
#define UVH_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_MASK	0x0000000000000200UL
#define UVH_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_MASK	0x0000000000000400UL
#define UVH_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_MASK 0x0000000000003800UL
#define UVH_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_MASK 0x0000000000004000UL
#define UVH_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_MASK 0x0000000000100000UL
#define UVH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_MASK 0x0000000000200000UL
#define UVH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_MASK 0x0000000000400000UL
#define UVH_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_MASK 0x0000000000800000UL
#define UVH_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000007000000UL
#define UVH_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_MASK 0x0000000008000000UL
#define UVH_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000010000000UL
#define UVH_LB_BAU_MISC_CONTROL_FUN_MASK		0xffff000000000000UL

#define UV1H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_SHFT	0
#define UV1H_LB_BAU_MISC_CONTROL_APIC_MODE_SHFT		8
#define UV1H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_SHFT	9
#define UV1H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_SHFT	10
#define UV1H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_SHFT 11
#define UV1H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_SHFT 14
#define UV1H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT 15
#define UV1H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT 16
#define UV1H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_SHFT 20
#define UV1H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_SHFT 21
#define UV1H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_SHFT 22
#define UV1H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_SHFT 23
#define UV1H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_SHFT 24
#define UV1H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_SHFT 27
#define UV1H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_SHFT 28
#define UV1H_LB_BAU_MISC_CONTROL_FUN_SHFT		48
#define UV1H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_MASK	0x00000000000000ffUL
#define UV1H_LB_BAU_MISC_CONTROL_APIC_MODE_MASK		0x0000000000000100UL
#define UV1H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_MASK	0x0000000000000200UL
#define UV1H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_MASK	0x0000000000000400UL
#define UV1H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_MASK 0x0000000000003800UL
#define UV1H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_MASK 0x0000000000004000UL
#define UV1H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK 0x0000000000008000UL
#define UV1H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK 0x00000000000f0000UL
#define UV1H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_MASK 0x0000000000100000UL
#define UV1H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_MASK 0x0000000000200000UL
#define UV1H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_MASK 0x0000000000400000UL
#define UV1H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_MASK 0x0000000000800000UL
#define UV1H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000007000000UL
#define UV1H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_MASK 0x0000000008000000UL
#define UV1H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000010000000UL
#define UV1H_LB_BAU_MISC_CONTROL_FUN_MASK		0xffff000000000000UL

#define UVXH_LB_BAU_MISC_CONTROL_REJECTION_DELAY_SHFT	0
#define UVXH_LB_BAU_MISC_CONTROL_APIC_MODE_SHFT		8
#define UVXH_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_SHFT	9
#define UVXH_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_SHFT	10
#define UVXH_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_SHFT 11
#define UVXH_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_SHFT 14
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_SHFT 20
#define UVXH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_SHFT 21
#define UVXH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_SHFT 22
#define UVXH_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_SHFT 23
#define UVXH_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_SHFT 24
#define UVXH_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_SHFT 27
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_SHFT 28
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_SHFT 29
#define UVXH_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_SHFT	30
#define UVXH_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_SHFT 31
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_SHFT 32
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_SHFT 33
#define UVXH_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_SHFT 34
#define UVXH_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_SHFT 35
#define UVXH_LB_BAU_MISC_CONTROL_FUN_SHFT		48
#define UVXH_LB_BAU_MISC_CONTROL_REJECTION_DELAY_MASK	0x00000000000000ffUL
#define UVXH_LB_BAU_MISC_CONTROL_APIC_MODE_MASK		0x0000000000000100UL
#define UVXH_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_MASK	0x0000000000000200UL
#define UVXH_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_MASK	0x0000000000000400UL
#define UVXH_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_MASK 0x0000000000003800UL
#define UVXH_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_MASK 0x0000000000004000UL
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_MASK 0x0000000000100000UL
#define UVXH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_MASK 0x0000000000200000UL
#define UVXH_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_MASK 0x0000000000400000UL
#define UVXH_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_MASK 0x0000000000800000UL
#define UVXH_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000007000000UL
#define UVXH_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_MASK 0x0000000008000000UL
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000010000000UL
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_MASK 0x0000000020000000UL
#define UVXH_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_MASK	0x0000000040000000UL
#define UVXH_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_MASK 0x0000000080000000UL
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_MASK 0x0000000100000000UL
#define UVXH_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_MASK 0x0000000200000000UL
#define UVXH_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_MASK 0x0000000400000000UL
#define UVXH_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_MASK 0x0000000800000000UL
#define UVXH_LB_BAU_MISC_CONTROL_FUN_MASK		0xffff000000000000UL

#define UV2H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_SHFT	0
#define UV2H_LB_BAU_MISC_CONTROL_APIC_MODE_SHFT		8
#define UV2H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_SHFT	9
#define UV2H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_SHFT	10
#define UV2H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_SHFT 11
#define UV2H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_SHFT 14
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT 15
#define UV2H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT 16
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_SHFT 20
#define UV2H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_SHFT 21
#define UV2H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_SHFT 22
#define UV2H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_SHFT 23
#define UV2H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_SHFT 24
#define UV2H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_SHFT 27
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_SHFT 28
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_SHFT 29
#define UV2H_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_SHFT	30
#define UV2H_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_SHFT 31
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_SHFT 32
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_SHFT 33
#define UV2H_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_SHFT 34
#define UV2H_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_SHFT 35
#define UV2H_LB_BAU_MISC_CONTROL_FUN_SHFT		48
#define UV2H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_MASK	0x00000000000000ffUL
#define UV2H_LB_BAU_MISC_CONTROL_APIC_MODE_MASK		0x0000000000000100UL
#define UV2H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_MASK	0x0000000000000200UL
#define UV2H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_MASK	0x0000000000000400UL
#define UV2H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_MASK 0x0000000000003800UL
#define UV2H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_MASK 0x0000000000004000UL
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK 0x0000000000008000UL
#define UV2H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK 0x00000000000f0000UL
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_MASK 0x0000000000100000UL
#define UV2H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_MASK 0x0000000000200000UL
#define UV2H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_MASK 0x0000000000400000UL
#define UV2H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_MASK 0x0000000000800000UL
#define UV2H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000007000000UL
#define UV2H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_MASK 0x0000000008000000UL
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000010000000UL
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_MASK 0x0000000020000000UL
#define UV2H_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_MASK	0x0000000040000000UL
#define UV2H_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_MASK 0x0000000080000000UL
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_MASK 0x0000000100000000UL
#define UV2H_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_MASK 0x0000000200000000UL
#define UV2H_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_MASK 0x0000000400000000UL
#define UV2H_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_MASK 0x0000000800000000UL
#define UV2H_LB_BAU_MISC_CONTROL_FUN_MASK		0xffff000000000000UL

#define UV3H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_SHFT	0
#define UV3H_LB_BAU_MISC_CONTROL_APIC_MODE_SHFT		8
#define UV3H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_SHFT	9
#define UV3H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_SHFT	10
#define UV3H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_SHFT 11
#define UV3H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_SHFT 14
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT 15
#define UV3H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT 16
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_SHFT 20
#define UV3H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_SHFT 21
#define UV3H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_SHFT 22
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_SHFT 23
#define UV3H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_SHFT 24
#define UV3H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_SHFT 27
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_SHFT 28
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_SHFT 29
#define UV3H_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_SHFT	30
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_SHFT 31
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_SHFT 32
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_SHFT 33
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_SHFT 34
#define UV3H_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_SHFT 35
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_QUIESCE_MSGS_TO_QPI_SHFT 36
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_INTD_PREFETCH_HINT_SHFT 37
#define UV3H_LB_BAU_MISC_CONTROL_THREAD_KILL_TIMEBASE_SHFT 38
#define UV3H_LB_BAU_MISC_CONTROL_FUN_SHFT		48
#define UV3H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_MASK	0x00000000000000ffUL
#define UV3H_LB_BAU_MISC_CONTROL_APIC_MODE_MASK		0x0000000000000100UL
#define UV3H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_MASK	0x0000000000000200UL
#define UV3H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_MASK	0x0000000000000400UL
#define UV3H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_MASK 0x0000000000003800UL
#define UV3H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_MASK 0x0000000000004000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK 0x0000000000008000UL
#define UV3H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK 0x00000000000f0000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_MASK 0x0000000000100000UL
#define UV3H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_MASK 0x0000000000200000UL
#define UV3H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_MASK 0x0000000000400000UL
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_MASK 0x0000000000800000UL
#define UV3H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000007000000UL
#define UV3H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_MASK 0x0000000008000000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000010000000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_MASK 0x0000000020000000UL
#define UV3H_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_MASK	0x0000000040000000UL
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_MASK 0x0000000080000000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_MASK 0x0000000100000000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_MASK 0x0000000200000000UL
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_MASK 0x0000000400000000UL
#define UV3H_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_MASK 0x0000000800000000UL
#define UV3H_LB_BAU_MISC_CONTROL_SUPPRESS_QUIESCE_MSGS_TO_QPI_MASK 0x0000001000000000UL
#define UV3H_LB_BAU_MISC_CONTROL_ENABLE_INTD_PREFETCH_HINT_MASK 0x0000002000000000UL
#define UV3H_LB_BAU_MISC_CONTROL_THREAD_KILL_TIMEBASE_MASK 0x00003fc000000000UL
#define UV3H_LB_BAU_MISC_CONTROL_FUN_MASK		0xffff000000000000UL

#define UV4H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_SHFT	0
#define UV4H_LB_BAU_MISC_CONTROL_APIC_MODE_SHFT		8
#define UV4H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_SHFT	9
#define UV4H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_SHFT	10
#define UV4H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_SHFT 11
#define UV4H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_SHFT 14
#define UV4H_LB_BAU_MISC_CONTROL_RESERVED_15_19_SHFT	15
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_SHFT 20
#define UV4H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_SHFT 21
#define UV4H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_SHFT 22
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_SHFT 23
#define UV4H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_SHFT 24
#define UV4H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_SHFT 27
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_SHFT 28
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_SHFT 29
#define UV4H_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_SHFT	30
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_SHFT 31
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_SHFT 32
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_SHFT 33
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_SHFT 34
#define UV4H_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_SHFT 35
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_QUIESCE_MSGS_TO_QPI_SHFT 36
#define UV4H_LB_BAU_MISC_CONTROL_RESERVED_37_SHFT	37
#define UV4H_LB_BAU_MISC_CONTROL_THREAD_KILL_TIMEBASE_SHFT 38
#define UV4H_LB_BAU_MISC_CONTROL_ADDRESS_INTERLEAVE_SELECT_SHFT 46
#define UV4H_LB_BAU_MISC_CONTROL_FUN_SHFT		48
#define UV4H_LB_BAU_MISC_CONTROL_REJECTION_DELAY_MASK	0x00000000000000ffUL
#define UV4H_LB_BAU_MISC_CONTROL_APIC_MODE_MASK		0x0000000000000100UL
#define UV4H_LB_BAU_MISC_CONTROL_FORCE_BROADCAST_MASK	0x0000000000000200UL
#define UV4H_LB_BAU_MISC_CONTROL_FORCE_LOCK_NOP_MASK	0x0000000000000400UL
#define UV4H_LB_BAU_MISC_CONTROL_QPI_AGENT_PRESENCE_VECTOR_MASK 0x0000000000003800UL
#define UV4H_LB_BAU_MISC_CONTROL_DESCRIPTOR_FETCH_MODE_MASK 0x0000000000004000UL
#define UV4H_LB_BAU_MISC_CONTROL_RESERVED_15_19_MASK	0x00000000000f8000UL
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_DUAL_MAPPING_MODE_MASK 0x0000000000100000UL
#define UV4H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_DECODE_ENABLE_MASK 0x0000000000200000UL
#define UV4H_LB_BAU_MISC_CONTROL_VGA_IO_PORT_16_BIT_DECODE_MASK 0x0000000000400000UL
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_DEST_REGISTRATION_MASK 0x0000000000800000UL
#define UV4H_LB_BAU_MISC_CONTROL_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000007000000UL
#define UV4H_LB_BAU_MISC_CONTROL_USE_INCOMING_PRIORITY_MASK 0x0000000008000000UL
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_PROGRAMMED_INITIAL_PRIORITY_MASK 0x0000000010000000UL
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_AUTOMATIC_APIC_MODE_SELECTION_MASK 0x0000000020000000UL
#define UV4H_LB_BAU_MISC_CONTROL_APIC_MODE_STATUS_MASK	0x0000000040000000UL
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_INTERRUPTS_TO_SELF_MASK 0x0000000080000000UL
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_LOCK_BASED_SYSTEM_FLUSH_MASK 0x0000000100000000UL
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_EXTENDED_SB_STATUS_MASK 0x0000000200000000UL
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_INT_PRIO_UDT_TO_SELF_MASK 0x0000000400000000UL
#define UV4H_LB_BAU_MISC_CONTROL_USE_LEGACY_DESCRIPTOR_FORMATS_MASK 0x0000000800000000UL
#define UV4H_LB_BAU_MISC_CONTROL_SUPPRESS_QUIESCE_MSGS_TO_QPI_MASK 0x0000001000000000UL
#define UV4H_LB_BAU_MISC_CONTROL_RESERVED_37_MASK	0x0000002000000000UL
#define UV4H_LB_BAU_MISC_CONTROL_THREAD_KILL_TIMEBASE_MASK 0x00003fc000000000UL
#define UV4H_LB_BAU_MISC_CONTROL_ADDRESS_INTERLEAVE_SELECT_MASK 0x0000400000000000UL
#define UV4H_LB_BAU_MISC_CONTROL_FUN_MASK		0xffff000000000000UL

#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK	\
	uv_undefined("UV4H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK")
#define UVH_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK (	\
	is_uv1_hub() ? UV1H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK : \
	is_uv2_hub() ? UV2H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK : \
	is_uv3_hub() ? UV3H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK : \
	/*is_uv4_hub*/ UV4H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_MASK)
#define UV4H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT	\
	uv_undefined("UV4H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT")
#define UVH_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT (	\
	is_uv1_hub() ? UV1H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT : \
	is_uv2_hub() ? UV2H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT : \
	is_uv3_hub() ? UV3H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT : \
	/*is_uv4_hub*/ UV4H_LB_BAU_MISC_CONTROL_ENABLE_INTD_SOFT_ACK_MODE_SHFT)
#define UV4H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK	\
	uv_undefined("UV4H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK")
#define UVH_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK (	\
	is_uv1_hub() ? UV1H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK : \
	is_uv2_hub() ? UV2H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK : \
	is_uv3_hub() ? UV3H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK : \
	/*is_uv4_hub*/ UV4H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_MASK)
#define UV4H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT	\
	uv_undefined("UV4H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT")
#define UVH_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT (	\
	is_uv1_hub() ? UV1H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT : \
	is_uv2_hub() ? UV2H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT : \
	is_uv3_hub() ? UV3H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT : \
	/*is_uv4_hub*/ UV4H_LB_BAU_MISC_CONTROL_INTD_SOFT_ACK_TIMEOUT_PERIOD_SHFT)

union uvh_lb_bau_misc_control_u {
	unsigned long	v;
	struct uvh_lb_bau_misc_control_s {
		unsigned long	rejection_delay:8;		/* RW */
		unsigned long	apic_mode:1;			/* RW */
		unsigned long	force_broadcast:1;		/* RW */
		unsigned long	force_lock_nop:1;		/* RW */
		unsigned long	qpi_agent_presence_vector:3;	/* RW */
		unsigned long	descriptor_fetch_mode:1;	/* RW */
		unsigned long	rsvd_15_19:5;
		unsigned long	enable_dual_mapping_mode:1;	/* RW */
		unsigned long	vga_io_port_decode_enable:1;	/* RW */
		unsigned long	vga_io_port_16_bit_decode:1;	/* RW */
		unsigned long	suppress_dest_registration:1;	/* RW */
		unsigned long	programmed_initial_priority:3;	/* RW */
		unsigned long	use_incoming_priority:1;	/* RW */
		unsigned long	enable_programmed_initial_priority:1;/* RW */
		unsigned long	rsvd_29_47:19;
		unsigned long	fun:16;				/* RW */
	} s;
	struct uv1h_lb_bau_misc_control_s {
		unsigned long	rejection_delay:8;		/* RW */
		unsigned long	apic_mode:1;			/* RW */
		unsigned long	force_broadcast:1;		/* RW */
		unsigned long	force_lock_nop:1;		/* RW */
		unsigned long	qpi_agent_presence_vector:3;	/* RW */
		unsigned long	descriptor_fetch_mode:1;	/* RW */
		unsigned long	enable_intd_soft_ack_mode:1;	/* RW */
		unsigned long	intd_soft_ack_timeout_period:4;	/* RW */
		unsigned long	enable_dual_mapping_mode:1;	/* RW */
		unsigned long	vga_io_port_decode_enable:1;	/* RW */
		unsigned long	vga_io_port_16_bit_decode:1;	/* RW */
		unsigned long	suppress_dest_registration:1;	/* RW */
		unsigned long	programmed_initial_priority:3;	/* RW */
		unsigned long	use_incoming_priority:1;	/* RW */
		unsigned long	enable_programmed_initial_priority:1;/* RW */
		unsigned long	rsvd_29_47:19;
		unsigned long	fun:16;				/* RW */
	} s1;
	struct uvxh_lb_bau_misc_control_s {
		unsigned long	rejection_delay:8;		/* RW */
		unsigned long	apic_mode:1;			/* RW */
		unsigned long	force_broadcast:1;		/* RW */
		unsigned long	force_lock_nop:1;		/* RW */
		unsigned long	qpi_agent_presence_vector:3;	/* RW */
		unsigned long	descriptor_fetch_mode:1;	/* RW */
		unsigned long	rsvd_15_19:5;
		unsigned long	enable_dual_mapping_mode:1;	/* RW */
		unsigned long	vga_io_port_decode_enable:1;	/* RW */
		unsigned long	vga_io_port_16_bit_decode:1;	/* RW */
		unsigned long	suppress_dest_registration:1;	/* RW */
		unsigned long	programmed_initial_priority:3;	/* RW */
		unsigned long	use_incoming_priority:1;	/* RW */
		unsigned long	enable_programmed_initial_priority:1;/* RW */
		unsigned long	enable_automatic_apic_mode_selection:1;/* RW */
		unsigned long	apic_mode_status:1;		/* RO */
		unsigned long	suppress_interrupts_to_self:1;	/* RW */
		unsigned long	enable_lock_based_system_flush:1;/* RW */
		unsigned long	enable_extended_sb_status:1;	/* RW */
		unsigned long	suppress_int_prio_udt_to_self:1;/* RW */
		unsigned long	use_legacy_descriptor_formats:1;/* RW */
		unsigned long	rsvd_36_47:12;
		unsigned long	fun:16;				/* RW */
	} sx;
	struct uv2h_lb_bau_misc_control_s {
		unsigned long	rejection_delay:8;		/* RW */
		unsigned long	apic_mode:1;			/* RW */
		unsigned long	force_broadcast:1;		/* RW */
		unsigned long	force_lock_nop:1;		/* RW */
		unsigned long	qpi_agent_presence_vector:3;	/* RW */
		unsigned long	descriptor_fetch_mode:1;	/* RW */
		unsigned long	enable_intd_soft_ack_mode:1;	/* RW */
		unsigned long	intd_soft_ack_timeout_period:4;	/* RW */
		unsigned long	enable_dual_mapping_mode:1;	/* RW */
		unsigned long	vga_io_port_decode_enable:1;	/* RW */
		unsigned long	vga_io_port_16_bit_decode:1;	/* RW */
		unsigned long	suppress_dest_registration:1;	/* RW */
		unsigned long	programmed_initial_priority:3;	/* RW */
		unsigned long	use_incoming_priority:1;	/* RW */
		unsigned long	enable_programmed_initial_priority:1;/* RW */
		unsigned long	enable_automatic_apic_mode_selection:1;/* RW */
		unsigned long	apic_mode_status:1;		/* RO */
		unsigned long	suppress_interrupts_to_self:1;	/* RW */
		unsigned long	enable_lock_based_system_flush:1;/* RW */
		unsigned long	enable_extended_sb_status:1;	/* RW */
		unsigned long	suppress_int_prio_udt_to_self:1;/* RW */
		unsigned long	use_legacy_descriptor_formats:1;/* RW */
		unsigned long	rsvd_36_47:12;
		unsigned long	fun:16;				/* RW */
	} s2;
	struct uv3h_lb_bau_misc_control_s {
		unsigned long	rejection_delay:8;		/* RW */
		unsigned long	apic_mode:1;			/* RW */
		unsigned long	force_broadcast:1;		/* RW */
		unsigned long	force_lock_nop:1;		/* RW */
		unsigned long	qpi_agent_presence_vector:3;	/* RW */
		unsigned long	descriptor_fetch_mode:1;	/* RW */
		unsigned long	enable_intd_soft_ack_mode:1;	/* RW */
		unsigned long	intd_soft_ack_timeout_period:4;	/* RW */
		unsigned long	enable_dual_mapping_mode:1;	/* RW */
		unsigned long	vga_io_port_decode_enable:1;	/* RW */
		unsigned long	vga_io_port_16_bit_decode:1;	/* RW */
		unsigned long	suppress_dest_registration:1;	/* RW */
		unsigned long	programmed_initial_priority:3;	/* RW */
		unsigned long	use_incoming_priority:1;	/* RW */
		unsigned long	enable_programmed_initial_priority:1;/* RW */
		unsigned long	enable_automatic_apic_mode_selection:1;/* RW */
		unsigned long	apic_mode_status:1;		/* RO */
		unsigned long	suppress_interrupts_to_self:1;	/* RW */
		unsigned long	enable_lock_based_system_flush:1;/* RW */
		unsigned long	enable_extended_sb_status:1;	/* RW */
		unsigned long	suppress_int_prio_udt_to_self:1;/* RW */
		unsigned long	use_legacy_descriptor_formats:1;/* RW */
		unsigned long	suppress_quiesce_msgs_to_qpi:1;	/* RW */
		unsigned long	enable_intd_prefetch_hint:1;	/* RW */
		unsigned long	thread_kill_timebase:8;		/* RW */
		unsigned long	rsvd_46_47:2;
		unsigned long	fun:16;				/* RW */
	} s3;
	struct uv4h_lb_bau_misc_control_s {
		unsigned long	rejection_delay:8;		/* RW */
		unsigned long	apic_mode:1;			/* RW */
		unsigned long	force_broadcast:1;		/* RW */
		unsigned long	force_lock_nop:1;		/* RW */
		unsigned long	qpi_agent_presence_vector:3;	/* RW */
		unsigned long	descriptor_fetch_mode:1;	/* RW */
		unsigned long	rsvd_15_19:5;
		unsigned long	enable_dual_mapping_mode:1;	/* RW */
		unsigned long	vga_io_port_decode_enable:1;	/* RW */
		unsigned long	vga_io_port_16_bit_decode:1;	/* RW */
		unsigned long	suppress_dest_registration:1;	/* RW */
		unsigned long	programmed_initial_priority:3;	/* RW */
		unsigned long	use_incoming_priority:1;	/* RW */
		unsigned long	enable_programmed_initial_priority:1;/* RW */
		unsigned long	enable_automatic_apic_mode_selection:1;/* RW */
		unsigned long	apic_mode_status:1;		/* RO */
		unsigned long	suppress_interrupts_to_self:1;	/* RW */
		unsigned long	enable_lock_based_system_flush:1;/* RW */
		unsigned long	enable_extended_sb_status:1;	/* RW */
		unsigned long	suppress_int_prio_udt_to_self:1;/* RW */
		unsigned long	use_legacy_descriptor_formats:1;/* RW */
		unsigned long	suppress_quiesce_msgs_to_qpi:1;	/* RW */
		unsigned long	rsvd_37:1;
		unsigned long	thread_kill_timebase:8;		/* RW */
		unsigned long	address_interleave_select:1;	/* RW */
		unsigned long	rsvd_47:1;
		unsigned long	fun:16;				/* RW */
	} s4;
};

/* ========================================================================= */
/*                     UVH_LB_BAU_SB_ACTIVATION_CONTROL                      */
/* ========================================================================= */
#define UV1H_LB_BAU_SB_ACTIVATION_CONTROL 0x320020UL
#define UV2H_LB_BAU_SB_ACTIVATION_CONTROL 0x320020UL
#define UV3H_LB_BAU_SB_ACTIVATION_CONTROL 0x320020UL
#define UV4H_LB_BAU_SB_ACTIVATION_CONTROL 0xc8020UL
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_ACTIVATION_CONTROL :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_CONTROL :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_CONTROL :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_CONTROL)

#define UV1H_LB_BAU_SB_ACTIVATION_CONTROL_32 0x9a8
#define UV2H_LB_BAU_SB_ACTIVATION_CONTROL_32 0x9a8
#define UV3H_LB_BAU_SB_ACTIVATION_CONTROL_32 0x9a8
#define UV4H_LB_BAU_SB_ACTIVATION_CONTROL_32 0x9c8
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_32 (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_ACTIVATION_CONTROL_32 :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_CONTROL_32 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_CONTROL_32 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_CONTROL_32)

#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_INDEX_SHFT	0
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_PUSH_SHFT	62
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_INIT_SHFT	63
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_INDEX_MASK	0x000000000000003fUL
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_PUSH_MASK	0x4000000000000000UL
#define UVH_LB_BAU_SB_ACTIVATION_CONTROL_INIT_MASK	0x8000000000000000UL


union uvh_lb_bau_sb_activation_control_u {
	unsigned long	v;
	struct uvh_lb_bau_sb_activation_control_s {
		unsigned long	index:6;			/* RW */
		unsigned long	rsvd_6_61:56;
		unsigned long	push:1;				/* WP */
		unsigned long	init:1;				/* WP */
	} s;
};

/* ========================================================================= */
/*                    UVH_LB_BAU_SB_ACTIVATION_STATUS_0                      */
/* ========================================================================= */
#define UV1H_LB_BAU_SB_ACTIVATION_STATUS_0 0x320030UL
#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_0 0x320030UL
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_0 0x320030UL
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_0 0xc8030UL
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_0 (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_ACTIVATION_STATUS_0 :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_STATUS_0 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_STATUS_0 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_STATUS_0)

#define UV1H_LB_BAU_SB_ACTIVATION_STATUS_0_32 0x9b0
#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_0_32 0x9b0
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_0_32 0x9b0
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_0_32 0x9d0
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_0_32 (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_ACTIVATION_STATUS_0_32 :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_STATUS_0_32 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_STATUS_0_32 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_STATUS_0_32)

#define UVH_LB_BAU_SB_ACTIVATION_STATUS_0_STATUS_SHFT	0
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_0_STATUS_MASK	0xffffffffffffffffUL


union uvh_lb_bau_sb_activation_status_0_u {
	unsigned long	v;
	struct uvh_lb_bau_sb_activation_status_0_s {
		unsigned long	status:64;			/* RW */
	} s;
};

/* ========================================================================= */
/*                    UVH_LB_BAU_SB_ACTIVATION_STATUS_1                      */
/* ========================================================================= */
#define UV1H_LB_BAU_SB_ACTIVATION_STATUS_1 0x320040UL
#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_1 0x320040UL
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_1 0x320040UL
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_1 0xc8040UL
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_1 (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_ACTIVATION_STATUS_1 :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_STATUS_1 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_STATUS_1 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_STATUS_1)

#define UV1H_LB_BAU_SB_ACTIVATION_STATUS_1_32 0x9b8
#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_1_32 0x9b8
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_1_32 0x9b8
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_1_32 0x9d8
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_1_32 (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_ACTIVATION_STATUS_1_32 :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_STATUS_1_32 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_STATUS_1_32 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_STATUS_1_32)

#define UVH_LB_BAU_SB_ACTIVATION_STATUS_1_STATUS_SHFT	0
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_1_STATUS_MASK	0xffffffffffffffffUL


union uvh_lb_bau_sb_activation_status_1_u {
	unsigned long	v;
	struct uvh_lb_bau_sb_activation_status_1_s {
		unsigned long	status:64;			/* RW */
	} s;
};

/* ========================================================================= */
/*                      UVH_LB_BAU_SB_DESCRIPTOR_BASE                        */
/* ========================================================================= */
#define UV1H_LB_BAU_SB_DESCRIPTOR_BASE 0x320010UL
#define UV2H_LB_BAU_SB_DESCRIPTOR_BASE 0x320010UL
#define UV3H_LB_BAU_SB_DESCRIPTOR_BASE 0x320010UL
#define UV4H_LB_BAU_SB_DESCRIPTOR_BASE 0xc8010UL
#define UVH_LB_BAU_SB_DESCRIPTOR_BASE (					\
	is_uv1_hub() ? UV1H_LB_BAU_SB_DESCRIPTOR_BASE :			\
	is_uv2_hub() ? UV2H_LB_BAU_SB_DESCRIPTOR_BASE :			\
	is_uv3_hub() ? UV3H_LB_BAU_SB_DESCRIPTOR_BASE :			\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_DESCRIPTOR_BASE)

#define UV1H_LB_BAU_SB_DESCRIPTOR_BASE_32 0x9a0
#define UV2H_LB_BAU_SB_DESCRIPTOR_BASE_32 0x9a0
#define UV3H_LB_BAU_SB_DESCRIPTOR_BASE_32 0x9a0
#define UV4H_LB_BAU_SB_DESCRIPTOR_BASE_32 0x9c0
#define UVH_LB_BAU_SB_DESCRIPTOR_BASE_32 (				\
	is_uv1_hub() ? UV1H_LB_BAU_SB_DESCRIPTOR_BASE_32 :		\
	is_uv2_hub() ? UV2H_LB_BAU_SB_DESCRIPTOR_BASE_32 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_DESCRIPTOR_BASE_32 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_DESCRIPTOR_BASE_32)

#define UVH_LB_BAU_SB_DESCRIPTOR_BASE_PAGE_ADDRESS_SHFT	12
#define UVH_LB_BAU_SB_DESCRIPTOR_BASE_NODE_ID_SHFT	49
#define UVH_LB_BAU_SB_DESCRIPTOR_BASE_NODE_ID_MASK	0x7ffe000000000000UL

#define UV1H_LB_BAU_SB_DESCRIPTOR_BASE_PAGE_ADDRESS_MASK 0x000007fffffff000UL


#define UV2H_LB_BAU_SB_DESCRIPTOR_BASE_PAGE_ADDRESS_MASK 0x000007fffffff000UL

#define UV3H_LB_BAU_SB_DESCRIPTOR_BASE_PAGE_ADDRESS_MASK 0x000007fffffff000UL

#define UV4H_LB_BAU_SB_DESCRIPTOR_BASE_PAGE_ADDRESS_MASK 0x00003ffffffff000UL


union uvh_lb_bau_sb_descriptor_base_u {
	unsigned long	v;
	struct uvh_lb_bau_sb_descriptor_base_s {
		unsigned long	rsvd_0_11:12;
		unsigned long	rsvd_12_48:37;
		unsigned long	node_id:14;			/* RW */
		unsigned long	rsvd_63:1;
	} s;
	struct uv4h_lb_bau_sb_descriptor_base_s {
		unsigned long	rsvd_0_11:12;
		unsigned long	page_address:34;		/* RW */
		unsigned long	rsvd_46_48:3;
		unsigned long	node_id:14;			/* RW */
		unsigned long	rsvd_63:1;
	} s4;
};

/* ========================================================================= */
/*                               UVH_NODE_ID                                 */
/* ========================================================================= */
#define UVH_NODE_ID 0x0UL
#define UV1H_NODE_ID 0x0UL
#define UV2H_NODE_ID 0x0UL
#define UV3H_NODE_ID 0x0UL
#define UV4H_NODE_ID 0x0UL

#define UVH_NODE_ID_FORCE1_SHFT				0
#define UVH_NODE_ID_MANUFACTURER_SHFT			1
#define UVH_NODE_ID_PART_NUMBER_SHFT			12
#define UVH_NODE_ID_REVISION_SHFT			28
#define UVH_NODE_ID_NODE_ID_SHFT			32
#define UVH_NODE_ID_FORCE1_MASK				0x0000000000000001UL
#define UVH_NODE_ID_MANUFACTURER_MASK			0x0000000000000ffeUL
#define UVH_NODE_ID_PART_NUMBER_MASK			0x000000000ffff000UL
#define UVH_NODE_ID_REVISION_MASK			0x00000000f0000000UL
#define UVH_NODE_ID_NODE_ID_MASK			0x00007fff00000000UL

#define UV1H_NODE_ID_FORCE1_SHFT			0
#define UV1H_NODE_ID_MANUFACTURER_SHFT			1
#define UV1H_NODE_ID_PART_NUMBER_SHFT			12
#define UV1H_NODE_ID_REVISION_SHFT			28
#define UV1H_NODE_ID_NODE_ID_SHFT			32
#define UV1H_NODE_ID_NODES_PER_BIT_SHFT			48
#define UV1H_NODE_ID_NI_PORT_SHFT			56
#define UV1H_NODE_ID_FORCE1_MASK			0x0000000000000001UL
#define UV1H_NODE_ID_MANUFACTURER_MASK			0x0000000000000ffeUL
#define UV1H_NODE_ID_PART_NUMBER_MASK			0x000000000ffff000UL
#define UV1H_NODE_ID_REVISION_MASK			0x00000000f0000000UL
#define UV1H_NODE_ID_NODE_ID_MASK			0x00007fff00000000UL
#define UV1H_NODE_ID_NODES_PER_BIT_MASK			0x007f000000000000UL
#define UV1H_NODE_ID_NI_PORT_MASK			0x0f00000000000000UL

#define UVXH_NODE_ID_FORCE1_SHFT			0
#define UVXH_NODE_ID_MANUFACTURER_SHFT			1
#define UVXH_NODE_ID_PART_NUMBER_SHFT			12
#define UVXH_NODE_ID_REVISION_SHFT			28
#define UVXH_NODE_ID_NODE_ID_SHFT			32
#define UVXH_NODE_ID_NODES_PER_BIT_SHFT			50
#define UVXH_NODE_ID_NI_PORT_SHFT			57
#define UVXH_NODE_ID_FORCE1_MASK			0x0000000000000001UL
#define UVXH_NODE_ID_MANUFACTURER_MASK			0x0000000000000ffeUL
#define UVXH_NODE_ID_PART_NUMBER_MASK			0x000000000ffff000UL
#define UVXH_NODE_ID_REVISION_MASK			0x00000000f0000000UL
#define UVXH_NODE_ID_NODE_ID_MASK			0x00007fff00000000UL
#define UVXH_NODE_ID_NODES_PER_BIT_MASK			0x01fc000000000000UL
#define UVXH_NODE_ID_NI_PORT_MASK			0x3e00000000000000UL

#define UV2H_NODE_ID_FORCE1_SHFT			0
#define UV2H_NODE_ID_MANUFACTURER_SHFT			1
#define UV2H_NODE_ID_PART_NUMBER_SHFT			12
#define UV2H_NODE_ID_REVISION_SHFT			28
#define UV2H_NODE_ID_NODE_ID_SHFT			32
#define UV2H_NODE_ID_NODES_PER_BIT_SHFT			50
#define UV2H_NODE_ID_NI_PORT_SHFT			57
#define UV2H_NODE_ID_FORCE1_MASK			0x0000000000000001UL
#define UV2H_NODE_ID_MANUFACTURER_MASK			0x0000000000000ffeUL
#define UV2H_NODE_ID_PART_NUMBER_MASK			0x000000000ffff000UL
#define UV2H_NODE_ID_REVISION_MASK			0x00000000f0000000UL
#define UV2H_NODE_ID_NODE_ID_MASK			0x00007fff00000000UL
#define UV2H_NODE_ID_NODES_PER_BIT_MASK			0x01fc000000000000UL
#define UV2H_NODE_ID_NI_PORT_MASK			0x3e00000000000000UL

#define UV3H_NODE_ID_FORCE1_SHFT			0
#define UV3H_NODE_ID_MANUFACTURER_SHFT			1
#define UV3H_NODE_ID_PART_NUMBER_SHFT			12
#define UV3H_NODE_ID_REVISION_SHFT			28
#define UV3H_NODE_ID_NODE_ID_SHFT			32
#define UV3H_NODE_ID_ROUTER_SELECT_SHFT			48
#define UV3H_NODE_ID_RESERVED_2_SHFT			49
#define UV3H_NODE_ID_NODES_PER_BIT_SHFT			50
#define UV3H_NODE_ID_NI_PORT_SHFT			57
#define UV3H_NODE_ID_FORCE1_MASK			0x0000000000000001UL
#define UV3H_NODE_ID_MANUFACTURER_MASK			0x0000000000000ffeUL
#define UV3H_NODE_ID_PART_NUMBER_MASK			0x000000000ffff000UL
#define UV3H_NODE_ID_REVISION_MASK			0x00000000f0000000UL
#define UV3H_NODE_ID_NODE_ID_MASK			0x00007fff00000000UL
#define UV3H_NODE_ID_ROUTER_SELECT_MASK			0x0001000000000000UL
#define UV3H_NODE_ID_RESERVED_2_MASK			0x0002000000000000UL
#define UV3H_NODE_ID_NODES_PER_BIT_MASK			0x01fc000000000000UL
#define UV3H_NODE_ID_NI_PORT_MASK			0x3e00000000000000UL

#define UV4H_NODE_ID_FORCE1_SHFT			0
#define UV4H_NODE_ID_MANUFACTURER_SHFT			1
#define UV4H_NODE_ID_PART_NUMBER_SHFT			12
#define UV4H_NODE_ID_REVISION_SHFT			28
#define UV4H_NODE_ID_NODE_ID_SHFT			32
#define UV4H_NODE_ID_ROUTER_SELECT_SHFT			48
#define UV4H_NODE_ID_RESERVED_2_SHFT			49
#define UV4H_NODE_ID_NODES_PER_BIT_SHFT			50
#define UV4H_NODE_ID_NI_PORT_SHFT			57
#define UV4H_NODE_ID_FORCE1_MASK			0x0000000000000001UL
#define UV4H_NODE_ID_MANUFACTURER_MASK			0x0000000000000ffeUL
#define UV4H_NODE_ID_PART_NUMBER_MASK			0x000000000ffff000UL
#define UV4H_NODE_ID_REVISION_MASK			0x00000000f0000000UL
#define UV4H_NODE_ID_NODE_ID_MASK			0x00007fff00000000UL
#define UV4H_NODE_ID_ROUTER_SELECT_MASK			0x0001000000000000UL
#define UV4H_NODE_ID_RESERVED_2_MASK			0x0002000000000000UL
#define UV4H_NODE_ID_NODES_PER_BIT_MASK			0x01fc000000000000UL
#define UV4H_NODE_ID_NI_PORT_MASK			0x3e00000000000000UL


union uvh_node_id_u {
	unsigned long	v;
	struct uvh_node_id_s {
		unsigned long	force1:1;			/* RO */
		unsigned long	manufacturer:11;		/* RO */
		unsigned long	part_number:16;			/* RO */
		unsigned long	revision:4;			/* RO */
		unsigned long	node_id:15;			/* RW */
		unsigned long	rsvd_47_63:17;
	} s;
	struct uv1h_node_id_s {
		unsigned long	force1:1;			/* RO */
		unsigned long	manufacturer:11;		/* RO */
		unsigned long	part_number:16;			/* RO */
		unsigned long	revision:4;			/* RO */
		unsigned long	node_id:15;			/* RW */
		unsigned long	rsvd_47:1;
		unsigned long	nodes_per_bit:7;		/* RW */
		unsigned long	rsvd_55:1;
		unsigned long	ni_port:4;			/* RO */
		unsigned long	rsvd_60_63:4;
	} s1;
	struct uvxh_node_id_s {
		unsigned long	force1:1;			/* RO */
		unsigned long	manufacturer:11;		/* RO */
		unsigned long	part_number:16;			/* RO */
		unsigned long	revision:4;			/* RO */
		unsigned long	node_id:15;			/* RW */
		unsigned long	rsvd_47_49:3;
		unsigned long	nodes_per_bit:7;		/* RO */
		unsigned long	ni_port:5;			/* RO */
		unsigned long	rsvd_62_63:2;
	} sx;
	struct uv2h_node_id_s {
		unsigned long	force1:1;			/* RO */
		unsigned long	manufacturer:11;		/* RO */
		unsigned long	part_number:16;			/* RO */
		unsigned long	revision:4;			/* RO */
		unsigned long	node_id:15;			/* RW */
		unsigned long	rsvd_47_49:3;
		unsigned long	nodes_per_bit:7;		/* RO */
		unsigned long	ni_port:5;			/* RO */
		unsigned long	rsvd_62_63:2;
	} s2;
	struct uv3h_node_id_s {
		unsigned long	force1:1;			/* RO */
		unsigned long	manufacturer:11;		/* RO */
		unsigned long	part_number:16;			/* RO */
		unsigned long	revision:4;			/* RO */
		unsigned long	node_id:15;			/* RW */
		unsigned long	rsvd_47:1;
		unsigned long	router_select:1;		/* RO */
		unsigned long	rsvd_49:1;
		unsigned long	nodes_per_bit:7;		/* RO */
		unsigned long	ni_port:5;			/* RO */
		unsigned long	rsvd_62_63:2;
	} s3;
	struct uv4h_node_id_s {
		unsigned long	force1:1;			/* RO */
		unsigned long	manufacturer:11;		/* RO */
		unsigned long	part_number:16;			/* RO */
		unsigned long	revision:4;			/* RO */
		unsigned long	node_id:15;			/* RW */
		unsigned long	rsvd_47:1;
		unsigned long	router_select:1;		/* RO */
		unsigned long	rsvd_49:1;
		unsigned long	nodes_per_bit:7;		/* RO */
		unsigned long	ni_port:5;			/* RO */
		unsigned long	rsvd_62_63:2;
	} s4;
};

/* ========================================================================= */
/*                          UVH_NODE_PRESENT_TABLE                           */
/* ========================================================================= */
#define UVH_NODE_PRESENT_TABLE 0x1400UL

#define UV1H_NODE_PRESENT_TABLE_DEPTH 16
#define UV2H_NODE_PRESENT_TABLE_DEPTH 16
#define UV3H_NODE_PRESENT_TABLE_DEPTH 16
#define UV4H_NODE_PRESENT_TABLE_DEPTH 4
#define UVH_NODE_PRESENT_TABLE_DEPTH (					\
	is_uv1_hub() ? UV1H_NODE_PRESENT_TABLE_DEPTH :			\
	is_uv2_hub() ? UV2H_NODE_PRESENT_TABLE_DEPTH :			\
	is_uv3_hub() ? UV3H_NODE_PRESENT_TABLE_DEPTH :			\
	/*is_uv4_hub*/ UV4H_NODE_PRESENT_TABLE_DEPTH)

#define UVH_NODE_PRESENT_TABLE_NODES_SHFT		0
#define UVH_NODE_PRESENT_TABLE_NODES_MASK		0xffffffffffffffffUL


union uvh_node_present_table_u {
	unsigned long	v;
	struct uvh_node_present_table_s {
		unsigned long	nodes:64;			/* RW */
	} s;
};

/* ========================================================================= */
/*                 UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR                  */
/* ========================================================================= */
#define UV1H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR 0x16000c8UL
#define UV2H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR 0x16000c8UL
#define UV3H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR 0x16000c8UL
#define UV4H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR 0x4800c8UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR (			\
	is_uv1_hub() ? UV1H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR :	\
	is_uv2_hub() ? UV2H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR :	\
	is_uv3_hub() ? UV3H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR)

#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR_BASE_SHFT 24
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR_M_ALIAS_SHFT 48
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR_ENABLE_SHFT 63
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR_BASE_MASK 0x00000000ff000000UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR_M_ALIAS_MASK 0x001f000000000000UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_0_MMR_ENABLE_MASK 0x8000000000000000UL


union uvh_rh_gam_alias210_overlay_config_0_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_alias210_overlay_config_0_mmr_s {
		unsigned long	rsvd_0_23:24;
		unsigned long	base:8;				/* RW */
		unsigned long	rsvd_32_47:16;
		unsigned long	m_alias:5;			/* RW */
		unsigned long	rsvd_53_62:10;
		unsigned long	enable:1;			/* RW */
	} s;
};

/* ========================================================================= */
/*                 UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR                  */
/* ========================================================================= */
#define UV1H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR 0x16000d8UL
#define UV2H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR 0x16000d8UL
#define UV3H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR 0x16000d8UL
#define UV4H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR 0x4800d8UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR (			\
	is_uv1_hub() ? UV1H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR :	\
	is_uv2_hub() ? UV2H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR :	\
	is_uv3_hub() ? UV3H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR)

#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR_BASE_SHFT 24
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR_M_ALIAS_SHFT 48
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR_ENABLE_SHFT 63
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR_BASE_MASK 0x00000000ff000000UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR_M_ALIAS_MASK 0x001f000000000000UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_1_MMR_ENABLE_MASK 0x8000000000000000UL


union uvh_rh_gam_alias210_overlay_config_1_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_alias210_overlay_config_1_mmr_s {
		unsigned long	rsvd_0_23:24;
		unsigned long	base:8;				/* RW */
		unsigned long	rsvd_32_47:16;
		unsigned long	m_alias:5;			/* RW */
		unsigned long	rsvd_53_62:10;
		unsigned long	enable:1;			/* RW */
	} s;
};

/* ========================================================================= */
/*                 UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR                  */
/* ========================================================================= */
#define UV1H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR 0x16000e8UL
#define UV2H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR 0x16000e8UL
#define UV3H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR 0x16000e8UL
#define UV4H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR 0x4800e8UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR (			\
	is_uv1_hub() ? UV1H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR :	\
	is_uv2_hub() ? UV2H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR :	\
	is_uv3_hub() ? UV3H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR)

#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR_BASE_SHFT 24
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR_M_ALIAS_SHFT 48
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR_ENABLE_SHFT 63
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR_BASE_MASK 0x00000000ff000000UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR_M_ALIAS_MASK 0x001f000000000000UL
#define UVH_RH_GAM_ALIAS210_OVERLAY_CONFIG_2_MMR_ENABLE_MASK 0x8000000000000000UL


union uvh_rh_gam_alias210_overlay_config_2_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_alias210_overlay_config_2_mmr_s {
		unsigned long	rsvd_0_23:24;
		unsigned long	base:8;				/* RW */
		unsigned long	rsvd_32_47:16;
		unsigned long	m_alias:5;			/* RW */
		unsigned long	rsvd_53_62:10;
		unsigned long	enable:1;			/* RW */
	} s;
};

/* ========================================================================= */
/*                UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR                  */
/* ========================================================================= */
#define UV1H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR 0x16000d0UL
#define UV2H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR 0x16000d0UL
#define UV3H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR 0x16000d0UL
#define UV4H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR 0x4800d0UL
#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR (			\
	is_uv1_hub() ? UV1H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR :	\
	is_uv2_hub() ? UV2H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR :	\
	is_uv3_hub() ? UV3H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR)

#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR_DEST_BASE_SHFT 24
#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_0_MMR_DEST_BASE_MASK 0x00003fffff000000UL


union uvh_rh_gam_alias210_redirect_config_0_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_alias210_redirect_config_0_mmr_s {
		unsigned long	rsvd_0_23:24;
		unsigned long	dest_base:22;			/* RW */
		unsigned long	rsvd_46_63:18;
	} s;
};

/* ========================================================================= */
/*                UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR                  */
/* ========================================================================= */
#define UV1H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR 0x16000e0UL
#define UV2H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR 0x16000e0UL
#define UV3H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR 0x16000e0UL
#define UV4H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR 0x4800e0UL
#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR (			\
	is_uv1_hub() ? UV1H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR :	\
	is_uv2_hub() ? UV2H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR :	\
	is_uv3_hub() ? UV3H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR)

#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR_DEST_BASE_SHFT 24
#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_1_MMR_DEST_BASE_MASK 0x00003fffff000000UL


union uvh_rh_gam_alias210_redirect_config_1_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_alias210_redirect_config_1_mmr_s {
		unsigned long	rsvd_0_23:24;
		unsigned long	dest_base:22;			/* RW */
		unsigned long	rsvd_46_63:18;
	} s;
};

/* ========================================================================= */
/*                UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR                  */
/* ========================================================================= */
#define UV1H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR 0x16000f0UL
#define UV2H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR 0x16000f0UL
#define UV3H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR 0x16000f0UL
#define UV4H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR 0x4800f0UL
#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR (			\
	is_uv1_hub() ? UV1H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR :	\
	is_uv2_hub() ? UV2H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR :	\
	is_uv3_hub() ? UV3H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR)

#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR_DEST_BASE_SHFT 24
#define UVH_RH_GAM_ALIAS210_REDIRECT_CONFIG_2_MMR_DEST_BASE_MASK 0x00003fffff000000UL


union uvh_rh_gam_alias210_redirect_config_2_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_alias210_redirect_config_2_mmr_s {
		unsigned long	rsvd_0_23:24;
		unsigned long	dest_base:22;			/* RW */
		unsigned long	rsvd_46_63:18;
	} s;
};

/* ========================================================================= */
/*                          UVH_RH_GAM_CONFIG_MMR                            */
/* ========================================================================= */
#define UV1H_RH_GAM_CONFIG_MMR 0x1600000UL
#define UV2H_RH_GAM_CONFIG_MMR 0x1600000UL
#define UV3H_RH_GAM_CONFIG_MMR 0x1600000UL
#define UV4H_RH_GAM_CONFIG_MMR 0x480000UL
#define UVH_RH_GAM_CONFIG_MMR (						\
	is_uv1_hub() ? UV1H_RH_GAM_CONFIG_MMR :				\
	is_uv2_hub() ? UV2H_RH_GAM_CONFIG_MMR :				\
	is_uv3_hub() ? UV3H_RH_GAM_CONFIG_MMR :				\
	/*is_uv4_hub*/ UV4H_RH_GAM_CONFIG_MMR)

#define UVH_RH_GAM_CONFIG_MMR_N_SKT_SHFT		6
#define UVH_RH_GAM_CONFIG_MMR_N_SKT_MASK		0x00000000000003c0UL

#define UV1H_RH_GAM_CONFIG_MMR_M_SKT_SHFT		0
#define UV1H_RH_GAM_CONFIG_MMR_N_SKT_SHFT		6
#define UV1H_RH_GAM_CONFIG_MMR_MMIOL_CFG_SHFT		12
#define UV1H_RH_GAM_CONFIG_MMR_M_SKT_MASK		0x000000000000003fUL
#define UV1H_RH_GAM_CONFIG_MMR_N_SKT_MASK		0x00000000000003c0UL
#define UV1H_RH_GAM_CONFIG_MMR_MMIOL_CFG_MASK		0x0000000000001000UL

#define UVXH_RH_GAM_CONFIG_MMR_N_SKT_SHFT		6
#define UVXH_RH_GAM_CONFIG_MMR_N_SKT_MASK		0x00000000000003c0UL

#define UV2H_RH_GAM_CONFIG_MMR_M_SKT_SHFT		0
#define UV2H_RH_GAM_CONFIG_MMR_N_SKT_SHFT		6
#define UV2H_RH_GAM_CONFIG_MMR_M_SKT_MASK		0x000000000000003fUL
#define UV2H_RH_GAM_CONFIG_MMR_N_SKT_MASK		0x00000000000003c0UL

#define UV3H_RH_GAM_CONFIG_MMR_M_SKT_SHFT		0
#define UV3H_RH_GAM_CONFIG_MMR_N_SKT_SHFT		6
#define UV3H_RH_GAM_CONFIG_MMR_M_SKT_MASK		0x000000000000003fUL
#define UV3H_RH_GAM_CONFIG_MMR_N_SKT_MASK		0x00000000000003c0UL

#define UV4H_RH_GAM_CONFIG_MMR_N_SKT_SHFT		6
#define UV4H_RH_GAM_CONFIG_MMR_N_SKT_MASK		0x00000000000003c0UL


union uvh_rh_gam_config_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_config_mmr_s {
		unsigned long	rsvd_0_5:6;
		unsigned long	n_skt:4;			/* RW */
		unsigned long	rsvd_10_63:54;
	} s;
	struct uv1h_rh_gam_config_mmr_s {
		unsigned long	m_skt:6;			/* RW */
		unsigned long	n_skt:4;			/* RW */
		unsigned long	rsvd_10_11:2;
		unsigned long	mmiol_cfg:1;			/* RW */
		unsigned long	rsvd_13_63:51;
	} s1;
	struct uvxh_rh_gam_config_mmr_s {
		unsigned long	rsvd_0_5:6;
		unsigned long	n_skt:4;			/* RW */
		unsigned long	rsvd_10_63:54;
	} sx;
	struct uv2h_rh_gam_config_mmr_s {
		unsigned long	m_skt:6;			/* RW */
		unsigned long	n_skt:4;			/* RW */
		unsigned long	rsvd_10_63:54;
	} s2;
	struct uv3h_rh_gam_config_mmr_s {
		unsigned long	m_skt:6;			/* RW */
		unsigned long	n_skt:4;			/* RW */
		unsigned long	rsvd_10_63:54;
	} s3;
	struct uv4h_rh_gam_config_mmr_s {
		unsigned long	rsvd_0_5:6;
		unsigned long	n_skt:4;			/* RW */
		unsigned long	rsvd_10_63:54;
	} s4;
};

/* ========================================================================= */
/*                    UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR                      */
/* ========================================================================= */
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR 0x1600010UL
#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR 0x1600010UL
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR 0x1600010UL
#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR 0x480010UL
#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR (				\
	is_uv1_hub() ? UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR :		\
	is_uv2_hub() ? UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR :		\
	is_uv3_hub() ? UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR :		\
	/*is_uv4_hub*/ UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR)

#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_SHFT	52
#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_MASK	0x00f0000000000000UL
#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT	28
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_GR4_SHFT	48
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_SHFT	52
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffff0000000UL
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_GR4_MASK	0x0001000000000000UL
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_MASK	0x00f0000000000000UL
#define UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UVXH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_SHFT	52
#define UVXH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UVXH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_MASK	0x00f0000000000000UL
#define UVXH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT	28
#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_SHFT	52
#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffff0000000UL
#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_MASK	0x00f0000000000000UL
#define UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT	28
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_SHFT	52
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_MODE_SHFT	62
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffff0000000UL
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_MASK	0x00f0000000000000UL
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_MODE_MASK	0x4000000000000000UL
#define UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_SHFT	52
#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_N_GRU_MASK	0x00f0000000000000UL
#define UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK (			\
	is_uv1_hub() ? UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK :	\
	is_uv2_hub() ? UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK :	\
	is_uv3_hub() ? UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_MASK)
#define UVH_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT (			\
	is_uv1_hub() ? UV1H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT :	\
	is_uv2_hub() ? UV2H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT :	\
	is_uv3_hub() ? UV3H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT :	\
	/*is_uv4_hub*/ UV4H_RH_GAM_GRU_OVERLAY_CONFIG_MMR_BASE_SHFT)

union uvh_rh_gam_gru_overlay_config_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_gru_overlay_config_mmr_s {
		unsigned long	rsvd_0_51:52;
		unsigned long	n_gru:4;			/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s;
	struct uv1h_rh_gam_gru_overlay_config_mmr_s {
		unsigned long	rsvd_0_27:28;
		unsigned long	base:18;			/* RW */
		unsigned long	rsvd_46_47:2;
		unsigned long	gr4:1;				/* RW */
		unsigned long	rsvd_49_51:3;
		unsigned long	n_gru:4;			/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s1;
	struct uvxh_rh_gam_gru_overlay_config_mmr_s {
		unsigned long	rsvd_0_45:46;
		unsigned long	rsvd_46_51:6;
		unsigned long	n_gru:4;			/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} sx;
	struct uv2h_rh_gam_gru_overlay_config_mmr_s {
		unsigned long	rsvd_0_27:28;
		unsigned long	base:18;			/* RW */
		unsigned long	rsvd_46_51:6;
		unsigned long	n_gru:4;			/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s2;
	struct uv3h_rh_gam_gru_overlay_config_mmr_s {
		unsigned long	rsvd_0_27:28;
		unsigned long	base:18;			/* RW */
		unsigned long	rsvd_46_51:6;
		unsigned long	n_gru:4;			/* RW */
		unsigned long	rsvd_56_61:6;
		unsigned long	mode:1;				/* RW */
		unsigned long	enable:1;			/* RW */
	} s3;
	struct uv4h_rh_gam_gru_overlay_config_mmr_s {
		unsigned long	rsvd_0_24:25;
		unsigned long	undef_25:1;			/* Undefined */
		unsigned long	base:20;			/* RW */
		unsigned long	rsvd_46_51:6;
		unsigned long	n_gru:4;			/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s4;
};

/* ========================================================================= */
/*                   UVH_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR                     */
/* ========================================================================= */
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR 0x1600030UL
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR 0x1600030UL
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR uv_undefined("UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR")
#define UV4H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR uv_undefined("UV4H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR")
#define UVH_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR (				\
	is_uv1_hub() ? UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR :		\
	is_uv2_hub() ? UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR :		\
	is_uv3_hub() ? UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR :		\
	/*is_uv4_hub*/ UV4H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR)


#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_BASE_SHFT	30
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_M_IO_SHFT	46
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_N_IO_SHFT	52
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_ENABLE_SHFT 63
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003fffc0000000UL
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_M_IO_MASK	0x000fc00000000000UL
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_N_IO_MASK	0x00f0000000000000UL
#define UV1H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_ENABLE_MASK 0x8000000000000000UL


#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_BASE_SHFT	27
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_M_IO_SHFT	46
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_N_IO_SHFT	52
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_ENABLE_SHFT 63
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffff8000000UL
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_M_IO_MASK	0x000fc00000000000UL
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_N_IO_MASK	0x00f0000000000000UL
#define UV2H_RH_GAM_MMIOH_OVERLAY_CONFIG_MMR_ENABLE_MASK 0x8000000000000000UL


union uvh_rh_gam_mmioh_overlay_config_mmr_u {
	unsigned long	v;
	struct uv1h_rh_gam_mmioh_overlay_config_mmr_s {
		unsigned long	rsvd_0_29:30;
		unsigned long	base:16;			/* RW */
		unsigned long	m_io:6;				/* RW */
		unsigned long	n_io:4;				/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s1;
	struct uv2h_rh_gam_mmioh_overlay_config_mmr_s {
		unsigned long	rsvd_0_26:27;
		unsigned long	base:19;			/* RW */
		unsigned long	m_io:6;				/* RW */
		unsigned long	n_io:4;				/* RW */
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s2;
};

/* ========================================================================= */
/*                    UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR                      */
/* ========================================================================= */
#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR 0x1600028UL
#define UV2H_RH_GAM_MMR_OVERLAY_CONFIG_MMR 0x1600028UL
#define UV3H_RH_GAM_MMR_OVERLAY_CONFIG_MMR 0x1600028UL
#define UV4H_RH_GAM_MMR_OVERLAY_CONFIG_MMR 0x480028UL
#define UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR (				\
	is_uv1_hub() ? UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR :		\
	is_uv2_hub() ? UV2H_RH_GAM_MMR_OVERLAY_CONFIG_MMR :		\
	is_uv3_hub() ? UV3H_RH_GAM_MMR_OVERLAY_CONFIG_MMR :		\
	/*is_uv4_hub*/ UV4H_RH_GAM_MMR_OVERLAY_CONFIG_MMR)

#define UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_DUAL_HUB_SHFT 46
#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_DUAL_HUB_MASK 0x0000400000000000UL
#define UV1H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UVXH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UVXH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UVXH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UVXH_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV2H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UV2H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV2H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV2H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV3H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UV3H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV3H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV3H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL

#define UV4H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_SHFT	26
#define UV4H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_SHFT	63
#define UV4H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV4H_RH_GAM_MMR_OVERLAY_CONFIG_MMR_ENABLE_MASK	0x8000000000000000UL


union uvh_rh_gam_mmr_overlay_config_mmr_u {
	unsigned long	v;
	struct uvh_rh_gam_mmr_overlay_config_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	rsvd_46_62:17;
		unsigned long	enable:1;			/* RW */
	} s;
	struct uv1h_rh_gam_mmr_overlay_config_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	dual_hub:1;			/* RW */
		unsigned long	rsvd_47_62:16;
		unsigned long	enable:1;			/* RW */
	} s1;
	struct uvxh_rh_gam_mmr_overlay_config_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	rsvd_46_62:17;
		unsigned long	enable:1;			/* RW */
	} sx;
	struct uv2h_rh_gam_mmr_overlay_config_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	rsvd_46_62:17;
		unsigned long	enable:1;			/* RW */
	} s2;
	struct uv3h_rh_gam_mmr_overlay_config_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	rsvd_46_62:17;
		unsigned long	enable:1;			/* RW */
	} s3;
	struct uv4h_rh_gam_mmr_overlay_config_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	rsvd_46_62:17;
		unsigned long	enable:1;			/* RW */
	} s4;
};

/* ========================================================================= */
/*                                 UVH_RTC                                   */
/* ========================================================================= */
#define UV1H_RTC 0x340000UL
#define UV2H_RTC 0x340000UL
#define UV3H_RTC 0x340000UL
#define UV4H_RTC 0xe0000UL
#define UVH_RTC (							\
	is_uv1_hub() ? UV1H_RTC :					\
	is_uv2_hub() ? UV2H_RTC :					\
	is_uv3_hub() ? UV3H_RTC :					\
	/*is_uv4_hub*/ UV4H_RTC)

#define UVH_RTC_REAL_TIME_CLOCK_SHFT			0
#define UVH_RTC_REAL_TIME_CLOCK_MASK			0x00ffffffffffffffUL


union uvh_rtc_u {
	unsigned long	v;
	struct uvh_rtc_s {
		unsigned long	real_time_clock:56;		/* RW */
		unsigned long	rsvd_56_63:8;
	} s;
};

/* ========================================================================= */
/*                           UVH_RTC1_INT_CONFIG                             */
/* ========================================================================= */
#define UVH_RTC1_INT_CONFIG 0x615c0UL

#define UVH_RTC1_INT_CONFIG_VECTOR_SHFT			0
#define UVH_RTC1_INT_CONFIG_DM_SHFT			8
#define UVH_RTC1_INT_CONFIG_DESTMODE_SHFT		11
#define UVH_RTC1_INT_CONFIG_STATUS_SHFT			12
#define UVH_RTC1_INT_CONFIG_P_SHFT			13
#define UVH_RTC1_INT_CONFIG_T_SHFT			15
#define UVH_RTC1_INT_CONFIG_M_SHFT			16
#define UVH_RTC1_INT_CONFIG_APIC_ID_SHFT		32
#define UVH_RTC1_INT_CONFIG_VECTOR_MASK			0x00000000000000ffUL
#define UVH_RTC1_INT_CONFIG_DM_MASK			0x0000000000000700UL
#define UVH_RTC1_INT_CONFIG_DESTMODE_MASK		0x0000000000000800UL
#define UVH_RTC1_INT_CONFIG_STATUS_MASK			0x0000000000001000UL
#define UVH_RTC1_INT_CONFIG_P_MASK			0x0000000000002000UL
#define UVH_RTC1_INT_CONFIG_T_MASK			0x0000000000008000UL
#define UVH_RTC1_INT_CONFIG_M_MASK			0x0000000000010000UL
#define UVH_RTC1_INT_CONFIG_APIC_ID_MASK		0xffffffff00000000UL


union uvh_rtc1_int_config_u {
	unsigned long	v;
	struct uvh_rtc1_int_config_s {
		unsigned long	vector_:8;			/* RW */
		unsigned long	dm:3;				/* RW */
		unsigned long	destmode:1;			/* RW */
		unsigned long	status:1;			/* RO */
		unsigned long	p:1;				/* RO */
		unsigned long	rsvd_14:1;
		unsigned long	t:1;				/* RO */
		unsigned long	m:1;				/* RW */
		unsigned long	rsvd_17_31:15;
		unsigned long	apic_id:32;			/* RW */
	} s;
};

/* ========================================================================= */
/*                               UVH_SCRATCH5                                */
/* ========================================================================= */
#define UV1H_SCRATCH5 0x2d0200UL
#define UV2H_SCRATCH5 0x2d0200UL
#define UV3H_SCRATCH5 0x2d0200UL
#define UV4H_SCRATCH5 0xb0200UL
#define UVH_SCRATCH5 (							\
	is_uv1_hub() ? UV1H_SCRATCH5 :					\
	is_uv2_hub() ? UV2H_SCRATCH5 :					\
	is_uv3_hub() ? UV3H_SCRATCH5 :					\
	/*is_uv4_hub*/ UV4H_SCRATCH5)

#define UV1H_SCRATCH5_32 0x778
#define UV2H_SCRATCH5_32 0x778
#define UV3H_SCRATCH5_32 0x778
#define UV4H_SCRATCH5_32 0x798
#define UVH_SCRATCH5_32 (						\
	is_uv1_hub() ? UV1H_SCRATCH5_32 :				\
	is_uv2_hub() ? UV2H_SCRATCH5_32 :				\
	is_uv3_hub() ? UV3H_SCRATCH5_32 :				\
	/*is_uv4_hub*/ UV4H_SCRATCH5_32)

#define UVH_SCRATCH5_SCRATCH5_SHFT			0
#define UVH_SCRATCH5_SCRATCH5_MASK			0xffffffffffffffffUL


union uvh_scratch5_u {
	unsigned long	v;
	struct uvh_scratch5_s {
		unsigned long	scratch5:64;			/* RW, W1CS */
	} s;
};

/* ========================================================================= */
/*                            UVH_SCRATCH5_ALIAS                             */
/* ========================================================================= */
#define UV1H_SCRATCH5_ALIAS 0x2d0208UL
#define UV2H_SCRATCH5_ALIAS 0x2d0208UL
#define UV3H_SCRATCH5_ALIAS 0x2d0208UL
#define UV4H_SCRATCH5_ALIAS 0xb0208UL
#define UVH_SCRATCH5_ALIAS (						\
	is_uv1_hub() ? UV1H_SCRATCH5_ALIAS :				\
	is_uv2_hub() ? UV2H_SCRATCH5_ALIAS :				\
	is_uv3_hub() ? UV3H_SCRATCH5_ALIAS :				\
	/*is_uv4_hub*/ UV4H_SCRATCH5_ALIAS)

#define UV1H_SCRATCH5_ALIAS_32 0x780
#define UV2H_SCRATCH5_ALIAS_32 0x780
#define UV3H_SCRATCH5_ALIAS_32 0x780
#define UV4H_SCRATCH5_ALIAS_32 0x7a0
#define UVH_SCRATCH5_ALIAS_32 (						\
	is_uv1_hub() ? UV1H_SCRATCH5_ALIAS_32 :				\
	is_uv2_hub() ? UV2H_SCRATCH5_ALIAS_32 :				\
	is_uv3_hub() ? UV3H_SCRATCH5_ALIAS_32 :				\
	/*is_uv4_hub*/ UV4H_SCRATCH5_ALIAS_32)


/* ========================================================================= */
/*                           UVH_SCRATCH5_ALIAS_2                            */
/* ========================================================================= */
#define UV1H_SCRATCH5_ALIAS_2 0x2d0210UL
#define UV2H_SCRATCH5_ALIAS_2 0x2d0210UL
#define UV3H_SCRATCH5_ALIAS_2 0x2d0210UL
#define UV4H_SCRATCH5_ALIAS_2 0xb0210UL
#define UVH_SCRATCH5_ALIAS_2 (						\
	is_uv1_hub() ? UV1H_SCRATCH5_ALIAS_2 :				\
	is_uv2_hub() ? UV2H_SCRATCH5_ALIAS_2 :				\
	is_uv3_hub() ? UV3H_SCRATCH5_ALIAS_2 :				\
	/*is_uv4_hub*/ UV4H_SCRATCH5_ALIAS_2)
#define UVH_SCRATCH5_ALIAS_2_32 0x788


/* ========================================================================= */
/*                          UVXH_EVENT_OCCURRED2                             */
/* ========================================================================= */
#define UVXH_EVENT_OCCURRED2 0x70100UL

#define UV2H_EVENT_OCCURRED2_32 0xb68
#define UV3H_EVENT_OCCURRED2_32 0xb68
#define UV4H_EVENT_OCCURRED2_32 0x608
#define UVH_EVENT_OCCURRED2_32 (					\
	is_uv2_hub() ? UV2H_EVENT_OCCURRED2_32 :			\
	is_uv3_hub() ? UV3H_EVENT_OCCURRED2_32 :			\
	/*is_uv4_hub*/ UV4H_EVENT_OCCURRED2_32)


#define UV2H_EVENT_OCCURRED2_RTC_0_SHFT			0
#define UV2H_EVENT_OCCURRED2_RTC_1_SHFT			1
#define UV2H_EVENT_OCCURRED2_RTC_2_SHFT			2
#define UV2H_EVENT_OCCURRED2_RTC_3_SHFT			3
#define UV2H_EVENT_OCCURRED2_RTC_4_SHFT			4
#define UV2H_EVENT_OCCURRED2_RTC_5_SHFT			5
#define UV2H_EVENT_OCCURRED2_RTC_6_SHFT			6
#define UV2H_EVENT_OCCURRED2_RTC_7_SHFT			7
#define UV2H_EVENT_OCCURRED2_RTC_8_SHFT			8
#define UV2H_EVENT_OCCURRED2_RTC_9_SHFT			9
#define UV2H_EVENT_OCCURRED2_RTC_10_SHFT		10
#define UV2H_EVENT_OCCURRED2_RTC_11_SHFT		11
#define UV2H_EVENT_OCCURRED2_RTC_12_SHFT		12
#define UV2H_EVENT_OCCURRED2_RTC_13_SHFT		13
#define UV2H_EVENT_OCCURRED2_RTC_14_SHFT		14
#define UV2H_EVENT_OCCURRED2_RTC_15_SHFT		15
#define UV2H_EVENT_OCCURRED2_RTC_16_SHFT		16
#define UV2H_EVENT_OCCURRED2_RTC_17_SHFT		17
#define UV2H_EVENT_OCCURRED2_RTC_18_SHFT		18
#define UV2H_EVENT_OCCURRED2_RTC_19_SHFT		19
#define UV2H_EVENT_OCCURRED2_RTC_20_SHFT		20
#define UV2H_EVENT_OCCURRED2_RTC_21_SHFT		21
#define UV2H_EVENT_OCCURRED2_RTC_22_SHFT		22
#define UV2H_EVENT_OCCURRED2_RTC_23_SHFT		23
#define UV2H_EVENT_OCCURRED2_RTC_24_SHFT		24
#define UV2H_EVENT_OCCURRED2_RTC_25_SHFT		25
#define UV2H_EVENT_OCCURRED2_RTC_26_SHFT		26
#define UV2H_EVENT_OCCURRED2_RTC_27_SHFT		27
#define UV2H_EVENT_OCCURRED2_RTC_28_SHFT		28
#define UV2H_EVENT_OCCURRED2_RTC_29_SHFT		29
#define UV2H_EVENT_OCCURRED2_RTC_30_SHFT		30
#define UV2H_EVENT_OCCURRED2_RTC_31_SHFT		31
#define UV2H_EVENT_OCCURRED2_RTC_0_MASK			0x0000000000000001UL
#define UV2H_EVENT_OCCURRED2_RTC_1_MASK			0x0000000000000002UL
#define UV2H_EVENT_OCCURRED2_RTC_2_MASK			0x0000000000000004UL
#define UV2H_EVENT_OCCURRED2_RTC_3_MASK			0x0000000000000008UL
#define UV2H_EVENT_OCCURRED2_RTC_4_MASK			0x0000000000000010UL
#define UV2H_EVENT_OCCURRED2_RTC_5_MASK			0x0000000000000020UL
#define UV2H_EVENT_OCCURRED2_RTC_6_MASK			0x0000000000000040UL
#define UV2H_EVENT_OCCURRED2_RTC_7_MASK			0x0000000000000080UL
#define UV2H_EVENT_OCCURRED2_RTC_8_MASK			0x0000000000000100UL
#define UV2H_EVENT_OCCURRED2_RTC_9_MASK			0x0000000000000200UL
#define UV2H_EVENT_OCCURRED2_RTC_10_MASK		0x0000000000000400UL
#define UV2H_EVENT_OCCURRED2_RTC_11_MASK		0x0000000000000800UL
#define UV2H_EVENT_OCCURRED2_RTC_12_MASK		0x0000000000001000UL
#define UV2H_EVENT_OCCURRED2_RTC_13_MASK		0x0000000000002000UL
#define UV2H_EVENT_OCCURRED2_RTC_14_MASK		0x0000000000004000UL
#define UV2H_EVENT_OCCURRED2_RTC_15_MASK		0x0000000000008000UL
#define UV2H_EVENT_OCCURRED2_RTC_16_MASK		0x0000000000010000UL
#define UV2H_EVENT_OCCURRED2_RTC_17_MASK		0x0000000000020000UL
#define UV2H_EVENT_OCCURRED2_RTC_18_MASK		0x0000000000040000UL
#define UV2H_EVENT_OCCURRED2_RTC_19_MASK		0x0000000000080000UL
#define UV2H_EVENT_OCCURRED2_RTC_20_MASK		0x0000000000100000UL
#define UV2H_EVENT_OCCURRED2_RTC_21_MASK		0x0000000000200000UL
#define UV2H_EVENT_OCCURRED2_RTC_22_MASK		0x0000000000400000UL
#define UV2H_EVENT_OCCURRED2_RTC_23_MASK		0x0000000000800000UL
#define UV2H_EVENT_OCCURRED2_RTC_24_MASK		0x0000000001000000UL
#define UV2H_EVENT_OCCURRED2_RTC_25_MASK		0x0000000002000000UL
#define UV2H_EVENT_OCCURRED2_RTC_26_MASK		0x0000000004000000UL
#define UV2H_EVENT_OCCURRED2_RTC_27_MASK		0x0000000008000000UL
#define UV2H_EVENT_OCCURRED2_RTC_28_MASK		0x0000000010000000UL
#define UV2H_EVENT_OCCURRED2_RTC_29_MASK		0x0000000020000000UL
#define UV2H_EVENT_OCCURRED2_RTC_30_MASK		0x0000000040000000UL
#define UV2H_EVENT_OCCURRED2_RTC_31_MASK		0x0000000080000000UL

#define UV3H_EVENT_OCCURRED2_RTC_0_SHFT			0
#define UV3H_EVENT_OCCURRED2_RTC_1_SHFT			1
#define UV3H_EVENT_OCCURRED2_RTC_2_SHFT			2
#define UV3H_EVENT_OCCURRED2_RTC_3_SHFT			3
#define UV3H_EVENT_OCCURRED2_RTC_4_SHFT			4
#define UV3H_EVENT_OCCURRED2_RTC_5_SHFT			5
#define UV3H_EVENT_OCCURRED2_RTC_6_SHFT			6
#define UV3H_EVENT_OCCURRED2_RTC_7_SHFT			7
#define UV3H_EVENT_OCCURRED2_RTC_8_SHFT			8
#define UV3H_EVENT_OCCURRED2_RTC_9_SHFT			9
#define UV3H_EVENT_OCCURRED2_RTC_10_SHFT		10
#define UV3H_EVENT_OCCURRED2_RTC_11_SHFT		11
#define UV3H_EVENT_OCCURRED2_RTC_12_SHFT		12
#define UV3H_EVENT_OCCURRED2_RTC_13_SHFT		13
#define UV3H_EVENT_OCCURRED2_RTC_14_SHFT		14
#define UV3H_EVENT_OCCURRED2_RTC_15_SHFT		15
#define UV3H_EVENT_OCCURRED2_RTC_16_SHFT		16
#define UV3H_EVENT_OCCURRED2_RTC_17_SHFT		17
#define UV3H_EVENT_OCCURRED2_RTC_18_SHFT		18
#define UV3H_EVENT_OCCURRED2_RTC_19_SHFT		19
#define UV3H_EVENT_OCCURRED2_RTC_20_SHFT		20
#define UV3H_EVENT_OCCURRED2_RTC_21_SHFT		21
#define UV3H_EVENT_OCCURRED2_RTC_22_SHFT		22
#define UV3H_EVENT_OCCURRED2_RTC_23_SHFT		23
#define UV3H_EVENT_OCCURRED2_RTC_24_SHFT		24
#define UV3H_EVENT_OCCURRED2_RTC_25_SHFT		25
#define UV3H_EVENT_OCCURRED2_RTC_26_SHFT		26
#define UV3H_EVENT_OCCURRED2_RTC_27_SHFT		27
#define UV3H_EVENT_OCCURRED2_RTC_28_SHFT		28
#define UV3H_EVENT_OCCURRED2_RTC_29_SHFT		29
#define UV3H_EVENT_OCCURRED2_RTC_30_SHFT		30
#define UV3H_EVENT_OCCURRED2_RTC_31_SHFT		31
#define UV3H_EVENT_OCCURRED2_RTC_0_MASK			0x0000000000000001UL
#define UV3H_EVENT_OCCURRED2_RTC_1_MASK			0x0000000000000002UL
#define UV3H_EVENT_OCCURRED2_RTC_2_MASK			0x0000000000000004UL
#define UV3H_EVENT_OCCURRED2_RTC_3_MASK			0x0000000000000008UL
#define UV3H_EVENT_OCCURRED2_RTC_4_MASK			0x0000000000000010UL
#define UV3H_EVENT_OCCURRED2_RTC_5_MASK			0x0000000000000020UL
#define UV3H_EVENT_OCCURRED2_RTC_6_MASK			0x0000000000000040UL
#define UV3H_EVENT_OCCURRED2_RTC_7_MASK			0x0000000000000080UL
#define UV3H_EVENT_OCCURRED2_RTC_8_MASK			0x0000000000000100UL
#define UV3H_EVENT_OCCURRED2_RTC_9_MASK			0x0000000000000200UL
#define UV3H_EVENT_OCCURRED2_RTC_10_MASK		0x0000000000000400UL
#define UV3H_EVENT_OCCURRED2_RTC_11_MASK		0x0000000000000800UL
#define UV3H_EVENT_OCCURRED2_RTC_12_MASK		0x0000000000001000UL
#define UV3H_EVENT_OCCURRED2_RTC_13_MASK		0x0000000000002000UL
#define UV3H_EVENT_OCCURRED2_RTC_14_MASK		0x0000000000004000UL
#define UV3H_EVENT_OCCURRED2_RTC_15_MASK		0x0000000000008000UL
#define UV3H_EVENT_OCCURRED2_RTC_16_MASK		0x0000000000010000UL
#define UV3H_EVENT_OCCURRED2_RTC_17_MASK		0x0000000000020000UL
#define UV3H_EVENT_OCCURRED2_RTC_18_MASK		0x0000000000040000UL
#define UV3H_EVENT_OCCURRED2_RTC_19_MASK		0x0000000000080000UL
#define UV3H_EVENT_OCCURRED2_RTC_20_MASK		0x0000000000100000UL
#define UV3H_EVENT_OCCURRED2_RTC_21_MASK		0x0000000000200000UL
#define UV3H_EVENT_OCCURRED2_RTC_22_MASK		0x0000000000400000UL
#define UV3H_EVENT_OCCURRED2_RTC_23_MASK		0x0000000000800000UL
#define UV3H_EVENT_OCCURRED2_RTC_24_MASK		0x0000000001000000UL
#define UV3H_EVENT_OCCURRED2_RTC_25_MASK		0x0000000002000000UL
#define UV3H_EVENT_OCCURRED2_RTC_26_MASK		0x0000000004000000UL
#define UV3H_EVENT_OCCURRED2_RTC_27_MASK		0x0000000008000000UL
#define UV3H_EVENT_OCCURRED2_RTC_28_MASK		0x0000000010000000UL
#define UV3H_EVENT_OCCURRED2_RTC_29_MASK		0x0000000020000000UL
#define UV3H_EVENT_OCCURRED2_RTC_30_MASK		0x0000000040000000UL
#define UV3H_EVENT_OCCURRED2_RTC_31_MASK		0x0000000080000000UL

#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT0_SHFT 0
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT1_SHFT 1
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT2_SHFT 2
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT3_SHFT 3
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT4_SHFT 4
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT5_SHFT 5
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT6_SHFT 6
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT7_SHFT 7
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT8_SHFT 8
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT9_SHFT 9
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT10_SHFT 10
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT11_SHFT 11
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT12_SHFT 12
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT13_SHFT 13
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT14_SHFT 14
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT15_SHFT 15
#define UV4H_EVENT_OCCURRED2_RTC_INTERVAL_INT_SHFT	16
#define UV4H_EVENT_OCCURRED2_BAU_DASHBOARD_INT_SHFT	17
#define UV4H_EVENT_OCCURRED2_RTC_0_SHFT			18
#define UV4H_EVENT_OCCURRED2_RTC_1_SHFT			19
#define UV4H_EVENT_OCCURRED2_RTC_2_SHFT			20
#define UV4H_EVENT_OCCURRED2_RTC_3_SHFT			21
#define UV4H_EVENT_OCCURRED2_RTC_4_SHFT			22
#define UV4H_EVENT_OCCURRED2_RTC_5_SHFT			23
#define UV4H_EVENT_OCCURRED2_RTC_6_SHFT			24
#define UV4H_EVENT_OCCURRED2_RTC_7_SHFT			25
#define UV4H_EVENT_OCCURRED2_RTC_8_SHFT			26
#define UV4H_EVENT_OCCURRED2_RTC_9_SHFT			27
#define UV4H_EVENT_OCCURRED2_RTC_10_SHFT		28
#define UV4H_EVENT_OCCURRED2_RTC_11_SHFT		29
#define UV4H_EVENT_OCCURRED2_RTC_12_SHFT		30
#define UV4H_EVENT_OCCURRED2_RTC_13_SHFT		31
#define UV4H_EVENT_OCCURRED2_RTC_14_SHFT		32
#define UV4H_EVENT_OCCURRED2_RTC_15_SHFT		33
#define UV4H_EVENT_OCCURRED2_RTC_16_SHFT		34
#define UV4H_EVENT_OCCURRED2_RTC_17_SHFT		35
#define UV4H_EVENT_OCCURRED2_RTC_18_SHFT		36
#define UV4H_EVENT_OCCURRED2_RTC_19_SHFT		37
#define UV4H_EVENT_OCCURRED2_RTC_20_SHFT		38
#define UV4H_EVENT_OCCURRED2_RTC_21_SHFT		39
#define UV4H_EVENT_OCCURRED2_RTC_22_SHFT		40
#define UV4H_EVENT_OCCURRED2_RTC_23_SHFT		41
#define UV4H_EVENT_OCCURRED2_RTC_24_SHFT		42
#define UV4H_EVENT_OCCURRED2_RTC_25_SHFT		43
#define UV4H_EVENT_OCCURRED2_RTC_26_SHFT		44
#define UV4H_EVENT_OCCURRED2_RTC_27_SHFT		45
#define UV4H_EVENT_OCCURRED2_RTC_28_SHFT		46
#define UV4H_EVENT_OCCURRED2_RTC_29_SHFT		47
#define UV4H_EVENT_OCCURRED2_RTC_30_SHFT		48
#define UV4H_EVENT_OCCURRED2_RTC_31_SHFT		49
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT0_MASK 0x0000000000000001UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT1_MASK 0x0000000000000002UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT2_MASK 0x0000000000000004UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT3_MASK 0x0000000000000008UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT4_MASK 0x0000000000000010UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT5_MASK 0x0000000000000020UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT6_MASK 0x0000000000000040UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT7_MASK 0x0000000000000080UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT8_MASK 0x0000000000000100UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT9_MASK 0x0000000000000200UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT10_MASK 0x0000000000000400UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT11_MASK 0x0000000000000800UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT12_MASK 0x0000000000001000UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT13_MASK 0x0000000000002000UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT14_MASK 0x0000000000004000UL
#define UV4H_EVENT_OCCURRED2_MESSAGE_ACCELERATOR_INT15_MASK 0x0000000000008000UL
#define UV4H_EVENT_OCCURRED2_RTC_INTERVAL_INT_MASK	0x0000000000010000UL
#define UV4H_EVENT_OCCURRED2_BAU_DASHBOARD_INT_MASK	0x0000000000020000UL
#define UV4H_EVENT_OCCURRED2_RTC_0_MASK			0x0000000000040000UL
#define UV4H_EVENT_OCCURRED2_RTC_1_MASK			0x0000000000080000UL
#define UV4H_EVENT_OCCURRED2_RTC_2_MASK			0x0000000000100000UL
#define UV4H_EVENT_OCCURRED2_RTC_3_MASK			0x0000000000200000UL
#define UV4H_EVENT_OCCURRED2_RTC_4_MASK			0x0000000000400000UL
#define UV4H_EVENT_OCCURRED2_RTC_5_MASK			0x0000000000800000UL
#define UV4H_EVENT_OCCURRED2_RTC_6_MASK			0x0000000001000000UL
#define UV4H_EVENT_OCCURRED2_RTC_7_MASK			0x0000000002000000UL
#define UV4H_EVENT_OCCURRED2_RTC_8_MASK			0x0000000004000000UL
#define UV4H_EVENT_OCCURRED2_RTC_9_MASK			0x0000000008000000UL
#define UV4H_EVENT_OCCURRED2_RTC_10_MASK		0x0000000010000000UL
#define UV4H_EVENT_OCCURRED2_RTC_11_MASK		0x0000000020000000UL
#define UV4H_EVENT_OCCURRED2_RTC_12_MASK		0x0000000040000000UL
#define UV4H_EVENT_OCCURRED2_RTC_13_MASK		0x0000000080000000UL
#define UV4H_EVENT_OCCURRED2_RTC_14_MASK		0x0000000100000000UL
#define UV4H_EVENT_OCCURRED2_RTC_15_MASK		0x0000000200000000UL
#define UV4H_EVENT_OCCURRED2_RTC_16_MASK		0x0000000400000000UL
#define UV4H_EVENT_OCCURRED2_RTC_17_MASK		0x0000000800000000UL
#define UV4H_EVENT_OCCURRED2_RTC_18_MASK		0x0000001000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_19_MASK		0x0000002000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_20_MASK		0x0000004000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_21_MASK		0x0000008000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_22_MASK		0x0000010000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_23_MASK		0x0000020000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_24_MASK		0x0000040000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_25_MASK		0x0000080000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_26_MASK		0x0000100000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_27_MASK		0x0000200000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_28_MASK		0x0000400000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_29_MASK		0x0000800000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_30_MASK		0x0001000000000000UL
#define UV4H_EVENT_OCCURRED2_RTC_31_MASK		0x0002000000000000UL

#define UVXH_EVENT_OCCURRED2_RTC_1_MASK (				\
	is_uv2_hub() ? UV2H_EVENT_OCCURRED2_RTC_1_MASK :		\
	is_uv3_hub() ? UV3H_EVENT_OCCURRED2_RTC_1_MASK :		\
	/*is_uv4_hub*/ UV4H_EVENT_OCCURRED2_RTC_1_MASK)

union uvh_event_occurred2_u {
	unsigned long	v;
	struct uv2h_event_occurred2_s {
		unsigned long	rtc_0:1;			/* RW */
		unsigned long	rtc_1:1;			/* RW */
		unsigned long	rtc_2:1;			/* RW */
		unsigned long	rtc_3:1;			/* RW */
		unsigned long	rtc_4:1;			/* RW */
		unsigned long	rtc_5:1;			/* RW */
		unsigned long	rtc_6:1;			/* RW */
		unsigned long	rtc_7:1;			/* RW */
		unsigned long	rtc_8:1;			/* RW */
		unsigned long	rtc_9:1;			/* RW */
		unsigned long	rtc_10:1;			/* RW */
		unsigned long	rtc_11:1;			/* RW */
		unsigned long	rtc_12:1;			/* RW */
		unsigned long	rtc_13:1;			/* RW */
		unsigned long	rtc_14:1;			/* RW */
		unsigned long	rtc_15:1;			/* RW */
		unsigned long	rtc_16:1;			/* RW */
		unsigned long	rtc_17:1;			/* RW */
		unsigned long	rtc_18:1;			/* RW */
		unsigned long	rtc_19:1;			/* RW */
		unsigned long	rtc_20:1;			/* RW */
		unsigned long	rtc_21:1;			/* RW */
		unsigned long	rtc_22:1;			/* RW */
		unsigned long	rtc_23:1;			/* RW */
		unsigned long	rtc_24:1;			/* RW */
		unsigned long	rtc_25:1;			/* RW */
		unsigned long	rtc_26:1;			/* RW */
		unsigned long	rtc_27:1;			/* RW */
		unsigned long	rtc_28:1;			/* RW */
		unsigned long	rtc_29:1;			/* RW */
		unsigned long	rtc_30:1;			/* RW */
		unsigned long	rtc_31:1;			/* RW */
		unsigned long	rsvd_32_63:32;
	} s2;
	struct uv3h_event_occurred2_s {
		unsigned long	rtc_0:1;			/* RW */
		unsigned long	rtc_1:1;			/* RW */
		unsigned long	rtc_2:1;			/* RW */
		unsigned long	rtc_3:1;			/* RW */
		unsigned long	rtc_4:1;			/* RW */
		unsigned long	rtc_5:1;			/* RW */
		unsigned long	rtc_6:1;			/* RW */
		unsigned long	rtc_7:1;			/* RW */
		unsigned long	rtc_8:1;			/* RW */
		unsigned long	rtc_9:1;			/* RW */
		unsigned long	rtc_10:1;			/* RW */
		unsigned long	rtc_11:1;			/* RW */
		unsigned long	rtc_12:1;			/* RW */
		unsigned long	rtc_13:1;			/* RW */
		unsigned long	rtc_14:1;			/* RW */
		unsigned long	rtc_15:1;			/* RW */
		unsigned long	rtc_16:1;			/* RW */
		unsigned long	rtc_17:1;			/* RW */
		unsigned long	rtc_18:1;			/* RW */
		unsigned long	rtc_19:1;			/* RW */
		unsigned long	rtc_20:1;			/* RW */
		unsigned long	rtc_21:1;			/* RW */
		unsigned long	rtc_22:1;			/* RW */
		unsigned long	rtc_23:1;			/* RW */
		unsigned long	rtc_24:1;			/* RW */
		unsigned long	rtc_25:1;			/* RW */
		unsigned long	rtc_26:1;			/* RW */
		unsigned long	rtc_27:1;			/* RW */
		unsigned long	rtc_28:1;			/* RW */
		unsigned long	rtc_29:1;			/* RW */
		unsigned long	rtc_30:1;			/* RW */
		unsigned long	rtc_31:1;			/* RW */
		unsigned long	rsvd_32_63:32;
	} s3;
	struct uv4h_event_occurred2_s {
		unsigned long	message_accelerator_int0:1;	/* RW */
		unsigned long	message_accelerator_int1:1;	/* RW */
		unsigned long	message_accelerator_int2:1;	/* RW */
		unsigned long	message_accelerator_int3:1;	/* RW */
		unsigned long	message_accelerator_int4:1;	/* RW */
		unsigned long	message_accelerator_int5:1;	/* RW */
		unsigned long	message_accelerator_int6:1;	/* RW */
		unsigned long	message_accelerator_int7:1;	/* RW */
		unsigned long	message_accelerator_int8:1;	/* RW */
		unsigned long	message_accelerator_int9:1;	/* RW */
		unsigned long	message_accelerator_int10:1;	/* RW */
		unsigned long	message_accelerator_int11:1;	/* RW */
		unsigned long	message_accelerator_int12:1;	/* RW */
		unsigned long	message_accelerator_int13:1;	/* RW */
		unsigned long	message_accelerator_int14:1;	/* RW */
		unsigned long	message_accelerator_int15:1;	/* RW */
		unsigned long	rtc_interval_int:1;		/* RW */
		unsigned long	bau_dashboard_int:1;		/* RW */
		unsigned long	rtc_0:1;			/* RW */
		unsigned long	rtc_1:1;			/* RW */
		unsigned long	rtc_2:1;			/* RW */
		unsigned long	rtc_3:1;			/* RW */
		unsigned long	rtc_4:1;			/* RW */
		unsigned long	rtc_5:1;			/* RW */
		unsigned long	rtc_6:1;			/* RW */
		unsigned long	rtc_7:1;			/* RW */
		unsigned long	rtc_8:1;			/* RW */
		unsigned long	rtc_9:1;			/* RW */
		unsigned long	rtc_10:1;			/* RW */
		unsigned long	rtc_11:1;			/* RW */
		unsigned long	rtc_12:1;			/* RW */
		unsigned long	rtc_13:1;			/* RW */
		unsigned long	rtc_14:1;			/* RW */
		unsigned long	rtc_15:1;			/* RW */
		unsigned long	rtc_16:1;			/* RW */
		unsigned long	rtc_17:1;			/* RW */
		unsigned long	rtc_18:1;			/* RW */
		unsigned long	rtc_19:1;			/* RW */
		unsigned long	rtc_20:1;			/* RW */
		unsigned long	rtc_21:1;			/* RW */
		unsigned long	rtc_22:1;			/* RW */
		unsigned long	rtc_23:1;			/* RW */
		unsigned long	rtc_24:1;			/* RW */
		unsigned long	rtc_25:1;			/* RW */
		unsigned long	rtc_26:1;			/* RW */
		unsigned long	rtc_27:1;			/* RW */
		unsigned long	rtc_28:1;			/* RW */
		unsigned long	rtc_29:1;			/* RW */
		unsigned long	rtc_30:1;			/* RW */
		unsigned long	rtc_31:1;			/* RW */
		unsigned long	rsvd_50_63:14;
	} s4;
};

/* ========================================================================= */
/*                       UVXH_EVENT_OCCURRED2_ALIAS                          */
/* ========================================================================= */
#define UVXH_EVENT_OCCURRED2_ALIAS 0x70108UL

#define UV2H_EVENT_OCCURRED2_ALIAS_32 0xb70
#define UV3H_EVENT_OCCURRED2_ALIAS_32 0xb70
#define UV4H_EVENT_OCCURRED2_ALIAS_32 0x610
#define UVH_EVENT_OCCURRED2_ALIAS_32 (					\
	is_uv2_hub() ? UV2H_EVENT_OCCURRED2_ALIAS_32 :			\
	is_uv3_hub() ? UV3H_EVENT_OCCURRED2_ALIAS_32 :			\
	/*is_uv4_hub*/ UV4H_EVENT_OCCURRED2_ALIAS_32)


/* ========================================================================= */
/*                   UVXH_LB_BAU_SB_ACTIVATION_STATUS_2                      */
/* ========================================================================= */
#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_2 0x320130UL
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_2 0x320130UL
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_2 0xc8130UL
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_2 (				\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_STATUS_2 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_STATUS_2 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_STATUS_2)

#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_2_32 0x9f0
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_2_32 0x9f0
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_2_32 0xa10
#define UVH_LB_BAU_SB_ACTIVATION_STATUS_2_32 (				\
	is_uv2_hub() ? UV2H_LB_BAU_SB_ACTIVATION_STATUS_2_32 :		\
	is_uv3_hub() ? UV3H_LB_BAU_SB_ACTIVATION_STATUS_2_32 :		\
	/*is_uv4_hub*/ UV4H_LB_BAU_SB_ACTIVATION_STATUS_2_32)

#define UVXH_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_SHFT 0
#define UVXH_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_MASK 0xffffffffffffffffUL

#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_SHFT 0
#define UV2H_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_MASK 0xffffffffffffffffUL

#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_SHFT 0
#define UV3H_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_MASK 0xffffffffffffffffUL

#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_SHFT 0
#define UV4H_LB_BAU_SB_ACTIVATION_STATUS_2_AUX_ERROR_MASK 0xffffffffffffffffUL


union uvxh_lb_bau_sb_activation_status_2_u {
	unsigned long	v;
	struct uvxh_lb_bau_sb_activation_status_2_s {
		unsigned long	aux_error:64;			/* RW */
	} sx;
	struct uv2h_lb_bau_sb_activation_status_2_s {
		unsigned long	aux_error:64;			/* RW */
	} s2;
	struct uv3h_lb_bau_sb_activation_status_2_s {
		unsigned long	aux_error:64;			/* RW */
	} s3;
	struct uv4h_lb_bau_sb_activation_status_2_s {
		unsigned long	aux_error:64;			/* RW */
	} s4;
};

/* ========================================================================= */
/*                   UV1H_LB_TARGET_PHYSICAL_APIC_ID_MASK                    */
/* ========================================================================= */
#define UV1H_LB_TARGET_PHYSICAL_APIC_ID_MASK		0x320130UL
#define UV1H_LB_TARGET_PHYSICAL_APIC_ID_MASK_32		0x9f0

#define UV1H_LB_TARGET_PHYSICAL_APIC_ID_MASK_BIT_ENABLES_SHFT 0
#define UV1H_LB_TARGET_PHYSICAL_APIC_ID_MASK_BIT_ENABLES_MASK 0x00000000ffffffffUL

union uv1h_lb_target_physical_apic_id_mask_u {
	unsigned long	v;
	struct uv1h_lb_target_physical_apic_id_mask_s {
		unsigned long	bit_enables:32;			/* RW */
		unsigned long	rsvd_32_63:32;
	} s1;
};

/* ========================================================================= */
/*                          UV3H_GR0_GAM_GR_CONFIG                           */
/* ========================================================================= */
#define UV3H_GR0_GAM_GR_CONFIG				0xc00028UL

#define UV3H_GR0_GAM_GR_CONFIG_M_SKT_SHFT		0
#define UV3H_GR0_GAM_GR_CONFIG_SUBSPACE_SHFT		10
#define UV3H_GR0_GAM_GR_CONFIG_M_SKT_MASK		0x000000000000003fUL
#define UV3H_GR0_GAM_GR_CONFIG_SUBSPACE_MASK		0x0000000000000400UL

union uv3h_gr0_gam_gr_config_u {
	unsigned long	v;
	struct uv3h_gr0_gam_gr_config_s {
		unsigned long	m_skt:6;			/* RW */
		unsigned long	undef_6_9:4;			/* Undefined */
		unsigned long	subspace:1;			/* RW */
		unsigned long	reserved:53;
	} s3;
};

/* ========================================================================= */
/*                   UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR                   */
/* ========================================================================= */
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR		0x1603000UL

#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR_BASE_SHFT	26
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR_M_IO_SHFT	46
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR_ENABLE_SHFT 63
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR_M_IO_MASK	0x000fc00000000000UL
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG0_MMR_ENABLE_MASK 0x8000000000000000UL

union uv3h_rh_gam_mmioh_overlay_config0_mmr_u {
	unsigned long	v;
	struct uv3h_rh_gam_mmioh_overlay_config0_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	m_io:6;				/* RW */
		unsigned long	n_io:4;
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s3;
};

/* ========================================================================= */
/*                   UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR                   */
/* ========================================================================= */
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR		0x1604000UL

#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR_BASE_SHFT	26
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR_M_IO_SHFT	46
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR_ENABLE_SHFT 63
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR_BASE_MASK	0x00003ffffc000000UL
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR_M_IO_MASK	0x000fc00000000000UL
#define UV3H_RH_GAM_MMIOH_OVERLAY_CONFIG1_MMR_ENABLE_MASK 0x8000000000000000UL

union uv3h_rh_gam_mmioh_overlay_config1_mmr_u {
	unsigned long	v;
	struct uv3h_rh_gam_mmioh_overlay_config1_mmr_s {
		unsigned long	rsvd_0_25:26;
		unsigned long	base:20;			/* RW */
		unsigned long	m_io:6;				/* RW */
		unsigned long	n_io:4;
		unsigned long	rsvd_56_62:7;
		unsigned long	enable:1;			/* RW */
	} s3;
};

/* ========================================================================= */
/*                  UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG0_MMR                   */
/* ========================================================================= */
#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG0_MMR		0x1603800UL
#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG0_MMR_DEPTH	128

#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG0_MMR_NASID_SHFT 0
#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG0_MMR_NASID_MASK 0x0000000000007fffUL

union uv3h_rh_gam_mmioh_redirect_config0_mmr_u {
	unsigned long	v;
	struct uv3h_rh_gam_mmioh_redirect_config0_mmr_s {
		unsigned long	nasid:15;			/* RW */
		unsigned long	rsvd_15_63:49;
	} s3;
};

/* ========================================================================= */
/*                  UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG1_MMR                   */
/* ========================================================================= */
#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG1_MMR		0x1604800UL
#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG1_MMR_DEPTH	128

#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG1_MMR_NASID_SHFT 0
#define UV3H_RH_GAM_MMIOH_REDIRECT_CONFIG1_MMR_NASID_MASK 0x0000000000007fffUL

union uv3h_rh_gam_mmioh_redirect_config1_mmr_u {
	unsigned long	v;
	struct uv3h_rh_gam_mmioh_redirect_config1_mmr_s {
		unsigned long	nasid:15;			/* RW */
		unsigned long	rsvd_15_63:49;
	} s3;
};

/* ========================================================================= */
/*                       UV4H_LB_PROC_INTD_QUEUE_FIRST                       */
/* ========================================================================= */
#define UV4H_LB_PROC_INTD_QUEUE_FIRST			0xa4100UL

#define UV4H_LB_PROC_INTD_QUEUE_FIRST_FIRST_PAYLOAD_ADDRESS_SHFT 6
#define UV4H_LB_PROC_INTD_QUEUE_FIRST_FIRST_PAYLOAD_ADDRESS_MASK 0x00003fffffffffc0UL

union uv4h_lb_proc_intd_queue_first_u {
	unsigned long	v;
	struct uv4h_lb_proc_intd_queue_first_s {
		unsigned long	undef_0_5:6;			/* Undefined */
		unsigned long	first_payload_address:40;	/* RW */
	} s4;
};

/* ========================================================================= */
/*                       UV4H_LB_PROC_INTD_QUEUE_LAST                        */
/* ========================================================================= */
#define UV4H_LB_PROC_INTD_QUEUE_LAST			0xa4108UL

#define UV4H_LB_PROC_INTD_QUEUE_LAST_LAST_PAYLOAD_ADDRESS_SHFT 5
#define UV4H_LB_PROC_INTD_QUEUE_LAST_LAST_PAYLOAD_ADDRESS_MASK 0x00003fffffffffe0UL

union uv4h_lb_proc_intd_queue_last_u {
	unsigned long	v;
	struct uv4h_lb_proc_intd_queue_last_s {
		unsigned long	undef_0_4:5;			/* Undefined */
		unsigned long	last_payload_address:41;	/* RW */
	} s4;
};

/* ========================================================================= */
/*                     UV4H_LB_PROC_INTD_SOFT_ACK_CLEAR                      */
/* ========================================================================= */
#define UV4H_LB_PROC_INTD_SOFT_ACK_CLEAR		0xa4118UL

#define UV4H_LB_PROC_INTD_SOFT_ACK_CLEAR_SOFT_ACK_PENDING_FLAGS_SHFT 0
#define UV4H_LB_PROC_INTD_SOFT_ACK_CLEAR_SOFT_ACK_PENDING_FLAGS_MASK 0x00000000000000ffUL

union uv4h_lb_proc_intd_soft_ack_clear_u {
	unsigned long	v;
	struct uv4h_lb_proc_intd_soft_ack_clear_s {
		unsigned long	soft_ack_pending_flags:8;	/* WP */
	} s4;
};

/* ========================================================================= */
/*                    UV4H_LB_PROC_INTD_SOFT_ACK_PENDING                     */
/* ========================================================================= */
#define UV4H_LB_PROC_INTD_SOFT_ACK_PENDING		0xa4110UL

#define UV4H_LB_PROC_INTD_SOFT_ACK_PENDING_SOFT_ACK_FLAGS_SHFT 0
#define UV4H_LB_PROC_INTD_SOFT_ACK_PENDING_SOFT_ACK_FLAGS_MASK 0x00000000000000ffUL

union uv4h_lb_proc_intd_soft_ack_pending_u {
	unsigned long	v;
	struct uv4h_lb_proc_intd_soft_ack_pending_s {
		unsigned long	soft_ack_flags:8;		/* RW */
	} s4;
};


#endif /* _ASM_X86_UV_UV_MMRS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /*
 * This file is subject to the terms and conditions of the GNU General Public
 * License.  See the file "COPYING" in the main directory of this archive
 * for more details.
 *
 * Copyright (C) 1992 - 1997, 2000-2005 Silicon Graphics, Inc. All rights reserved.
 */

#ifndef _ASM_IA64_SN_SHUBIO_H
#define _ASM_IA64_SN_SHUBIO_H

#define HUB_WIDGET_ID_MAX	0xf
#define IIO_NUM_ITTES		7
#define HUB_NUM_BIG_WINDOW	(IIO_NUM_ITTES - 1)

#define		IIO_WID			0x00400000	/* Crosstalk Widget Identification */
							/* This register is also accessible from
							 * Crosstalk at address 0x0.  */
#define		IIO_WSTAT		0x00400008	/* Crosstalk Widget Status */
#define		IIO_WCR			0x00400020	/* Crosstalk Widget Control Register */
#define		IIO_ILAPR		0x00400100	/* IO Local Access Protection Register */
#define		IIO_ILAPO		0x00400108	/* IO Local Access Protection Override */
#define		IIO_IOWA		0x00400110	/* IO Outbound Widget Access */
#define		IIO_IIWA		0x00400118	/* IO Inbound Widget Access */
#define		IIO_IIDEM		0x00400120	/* IO Inbound Device Error Mask */
#define		IIO_ILCSR		0x00400128	/* IO LLP Control and Status Register */
#define		IIO_ILLR		0x00400130	/* IO LLP Log Register    */
#define		IIO_IIDSR		0x00400138	/* IO Interrupt Destination */

#define		IIO_IGFX0		0x00400140	/* IO Graphics Node-Widget Map 0 */
#define		IIO_IGFX1		0x00400148	/* IO Graphics Node-Widget Map 1 */

#define		IIO_ISCR0		0x00400150	/* IO Scratch Register 0 */
#define		IIO_ISCR1		0x00400158	/* IO Scratch Register 1 */

#define		IIO_ITTE1		0x00400160	/* IO Translation Table Entry 1 */
#define		IIO_ITTE2		0x00400168	/* IO Translation Table Entry 2 */
#define		IIO_ITTE3		0x00400170	/* IO Translation Table Entry 3 */
#define		IIO_ITTE4		0x00400178	/* IO Translation Table Entry 4 */
#define		IIO_ITTE5		0x00400180	/* IO Translation Table Entry 5 */
#define		IIO_ITTE6		0x00400188	/* IO Translation Table Entry 6 */
#define		IIO_ITTE7		0x00400190	/* IO Translation Table Entry 7 */

#define		IIO_IPRB0		0x00400198	/* IO PRB Entry 0   */
#define		IIO_IPRB8		0x004001A0	/* IO PRB Entry 8   */
#define		IIO_IPRB9		0x004001A8	/* IO PRB Entry 9   */
#define		IIO_IPRBA		0x004001B0	/* IO PRB Entry A   */
#define		IIO_IPRBB		0x004001B8	/* IO PRB Entry B   */
#define		IIO_IPRBC		0x004001C0	/* IO PRB Entry C   */
#define		IIO_IPRBD		0x004001C8	/* IO PRB Entry D   */
#define		IIO_IPRBE		0x004001D0	/* IO PRB Entry E   */
#define		IIO_IPRBF		0x004001D8	/* IO PRB Entry F   */

#define		IIO_IXCC		0x004001E0	/* IO Crosstalk Credit Count Timeout */
#define		IIO_IMEM		0x004001E8	/* IO Miscellaneous Error Mask */
#define		IIO_IXTT		0x004001F0	/* IO Crosstalk Timeout Threshold */
#define		IIO_IECLR		0x004001F8	/* IO Error Clear Register */
#define		IIO_IBCR		0x00400200	/* IO BTE Control Register */

#define		IIO_IXSM		0x00400208	/* IO Crosstalk Spurious Message */
#define		IIO_IXSS		0x00400210	/* IO Crosstalk Spurious Sideband */

#define		IIO_ILCT		0x00400218	/* IO LLP Channel Test    */

#define		IIO_IIEPH1 		0x00400220	/* IO Incoming Error Packet Header, Part 1 */
#define		IIO_IIEPH2 		0x00400228	/* IO Incoming Error Packet Header, Part 2 */

#define		IIO_ISLAPR 		0x00400230	/* IO SXB Local Access Protection Regster */
#define		IIO_ISLAPO 		0x00400238	/* IO SXB Local Access Protection Override */

#define		IIO_IWI			0x00400240	/* IO Wrapper Interrupt Register */
#define		IIO_IWEL		0x00400248	/* IO Wrapper Error Log Register */
#define		IIO_IWC			0x00400250	/* IO Wrapper Control Register */
#define		IIO_IWS			0x00400258	/* IO Wrapper Status Register */
#define		IIO_IWEIM		0x00400260	/* IO Wrapper Error Interrupt Masking Register */

#define		IIO_IPCA		0x00400300	/* IO PRB Counter Adjust */

#define		IIO_IPRTE0_A		0x00400308	/* IO PIO Read Address Table Entry 0, Part A */
#define		IIO_IPRTE1_A		0x00400310	/* IO PIO Read Address Table Entry 1, Part A */
#define		IIO_IPRTE2_A		0x00400318	/* IO PIO Read Address Table Entry 2, Part A */
#define		IIO_IPRTE3_A		0x00400320	/* IO PIO Read Address Table Entry 3, Part A */
#define		IIO_IPRTE4_A		0x00400328	/* IO PIO Read Address Table Entry 4, Part A */
#define		IIO_IPRTE5_A		0x00400330	/* IO PIO Read Address Table Entry 5, Part A */
#define		IIO_IPRTE6_A		0x00400338	/* IO PIO Read Address Table Entry 6, Part A */
#define		IIO_IPRTE7_A		0x00400340	/* IO PIO Read Address Table Entry 7, Part A */

#define		IIO_IPRTE0_B		0x00400348	/* IO PIO Read Address Table Entry 0, Part B */
#define		IIO_IPRTE1_B		0x00400350	/* IO PIO Read Address Table Entry 1, Part B */
#define		IIO_IPRTE2_B		0x00400358	/* IO PIO Read Address Table Entry 2, Part B */
#define		IIO_IPRTE3_B		0x00400360	/* IO PIO Read Address Table Entry 3, Part B */
#define		IIO_IPRTE4_B		0x00400368	/* IO PIO Read Address Table Entry 4, Part B */
#define		IIO_IPRTE5_B		0x00400370	/* IO PIO Read Address Table Entry 5, Part B */
#define		IIO_IPRTE6_B		0x00400378	/* IO PIO Read Address Table Entry 6, Part B */
#define		IIO_IPRTE7_B		0x00400380	/* IO PIO Read Address Table Entry 7, Part B */

#define		IIO_IPDR		0x00400388	/* IO PIO Deallocation Register */
#define		IIO_ICDR		0x00400390	/* IO CRB Entry Deallocation Register */
#define		IIO_IFDR		0x00400398	/* IO IOQ FIFO Depth Register */
#define		IIO_IIAP		0x004003A0	/* IO IIQ Arbitration Parameters */
#define		IIO_ICMR		0x004003A8	/* IO CRB Management Register */
#define		IIO_ICCR		0x004003B0	/* IO CRB Control Register */
#define		IIO_ICTO		0x004003B8	/* IO CRB Timeout   */
#define		IIO_ICTP		0x004003C0	/* IO CRB Timeout Prescalar */

#define		IIO_ICRB0_A		0x00400400	/* IO CRB Entry 0_A */
#define		IIO_ICRB0_B		0x00400408	/* IO CRB Entry 0_B */
#define		IIO_ICRB0_C		0x00400410	/* IO CRB Entry 0_C */
#define		IIO_ICRB0_D		0x00400418	/* IO CRB Entry 0_D */
#define		IIO_ICRB0_E		0x00400420	/* IO CRB Entry 0_E */

#define		IIO_ICRB1_A		0x00400430	/* IO CRB Entry 1_A */
#define		IIO_ICRB1_B		0x00400438	/* IO CRB Entry 1_B */
#define		IIO_ICRB1_C		0x00400440	/* IO CRB Entry 1_C */
#define		IIO_ICRB1_D		0x00400448	/* IO CRB Entry 1_D */
#define		IIO_ICRB1_E		0x00400450	/* IO CRB Entry 1_E */

#define		IIO_ICRB2_A		0x00400460	/* IO CRB Entry 2_A */
#define		IIO_ICRB2_B		0x00400468	/* IO CRB Entry 2_B */
#define		IIO_ICRB2_C		0x00400470	/* IO CRB Entry 2_C */
#define		IIO_ICRB2_D		0x00400478	/* IO CRB Entry 2_D */
#define		IIO_ICRB2_E		0x00400480	/* IO CRB Entry 2_E */

#define		IIO_ICRB3_A		0x00400490	/* IO CRB Entry 3_A */
#define		IIO_ICRB3_B		0x00400498	/* IO CRB Entry 3_B */
#define		IIO_ICRB3_C		0x004004a0	/* IO CRB Entry 3_C */
#define		IIO_ICRB3_D		0x004004a8	/* IO CRB Entry 3_D */
#define		IIO_ICRB3_E		0x004004b0	/* IO CRB Entry 3_E */

#define		IIO_ICRB4_A		0x004004c0	/* IO CRB Entry 4_A */
#define		IIO_ICRB4_B		0x004004c8	/* IO CRB Entry 4_B */
#define		IIO_ICRB4_C		0x004004d0	/* IO CRB Entry 4_C */
#define		IIO_ICRB4_D		0x004004d8	/* IO CRB Entry 4_D */
#define		IIO_ICRB4_E		0x004004e0	/* IO CRB Entry 4_E */

#define		IIO_ICRB5_A		0x004004f0	/* IO CRB Entry 5_A */
#define		IIO_ICRB5_B		0x004004f8	/* IO CRB Entry 5_B */
#define		IIO_ICRB5_C		0x00400500	/* IO CRB Entry 5_C */
#define		IIO_ICRB5_D		0x00400508	/* IO CRB Entry 5_D */
#define		IIO_ICRB5_E		0x00400510	/* IO CRB Entry 5_E */

#define		IIO_ICRB6_A		0x00400520	/* IO CRB Entry 6_A */
#define		IIO_ICRB6_B		0x00400528	/* IO CRB Entry 6_B */
#define		IIO_ICRB6_C		0x00400530	/* IO CRB Entry 6_C */
#define		IIO_ICRB6_D		0x00400538	/* IO CRB Entry 6_D */
#define		IIO_ICRB6_E		0x00400540	/* IO CRB Entry 6_E */

#define		IIO_ICRB7_A		0x00400550	/* IO CRB Entry 7_A */
#define		IIO_ICRB7_B		0x00400558	/* IO CRB Entry 7_B */
#define		IIO_ICRB7_C		0x00400560	/* IO CRB Entry 7_C */
#define		IIO_ICRB7_D		0x00400568	/* IO CRB Entry 7_D */
#define		IIO_ICRB7_E		0x00400570	/* IO CRB Entry 7_E */

#define		IIO_ICRB8_A		0x00400580	/* IO CRB Entry 8_A */
#define		IIO_ICRB8_B		0x00400588	/* IO CRB Entry 8_B */
#define		IIO_ICRB8_C		0x00400590	/* IO CRB Entry 8_C */
#define		IIO_ICRB8_D		0x00400598	/* IO CRB Entry 8_D */
#define		IIO_ICRB8_E		0x004005a0	/* IO CRB Entry 8_E */

#define		IIO_ICRB9_A		0x004005b0	/* IO CRB Entry 9_A */
#define		IIO_ICRB9_B		0x004005b8	/* IO CRB Entry 9_B */
#define		IIO_ICRB9_C		0x004005c0	/* IO CRB Entry 9_C */
#define		IIO_ICRB9_D		0x004005c8	/* IO CRB Entry 9_D */
#define		IIO_ICRB9_E		0x004005d0	/* IO CRB Entry 9_E */

#define		IIO_ICRBA_A		0x004005e0	/* IO CRB Entry A_A */
#define		IIO_ICRBA_B		0x004005e8	/* IO CRB Entry A_B */
#define		IIO_ICRBA_C		0x004005f0	/* IO CRB Entry A_C */
#define		IIO_ICRBA_D		0x004005f8	/* IO CRB Entry A_D */
#define		IIO_ICRBA_E		0x00400600	/* IO CRB Entry A_E */

#define		IIO_ICRBB_A		0x00400610	/* IO CRB Entry B_A */
#define		IIO_ICRBB_B		0x00400618	/* IO CRB Entry B_B */
#define		IIO_ICRBB_C		0x00400620	/* IO CRB Entry B_C */
#define		IIO_ICRBB_D		0x00400628	/* IO CRB Entry B_D */
#define		IIO_ICRBB_E		0x00400630	/* IO CRB Entry B_E */

#define		IIO_ICRBC_A		0x00400640	/* IO CRB Entry C_A */
#define		IIO_ICRBC_B		0x00400648	/* IO CRB Entry C_B */
#define		IIO_ICRBC_C		0x00400650	/* IO CRB Entry C_C */
#define		IIO_ICRBC_D		0x00400658	/* IO CRB Entry C_D */
#define		IIO_ICRBC_E		0x00400660	/* IO CRB Entry C_E */

#define		IIO_ICRBD_A		0x00400670	/* IO CRB Entry D_A */
#define		IIO_ICRBD_B		0x00400678	/* IO CRB Entry D_B */
#define		IIO_ICRBD_C		0x00400680	/* IO CRB Entry D_C */
#define		IIO_ICRBD_D		0x00400688	/* IO CRB Entry D_D */
#define		IIO_ICRBD_E		0x00400690	/* IO CRB Entry D_E */

#define		IIO_ICRBE_A		0x004006a0	/* IO CRB Entry E_A */
#define		IIO_ICRBE_B		0x004006a8	/* IO CRB Entry E_B */
#define		IIO_ICRBE_C		0x004006b0	/* IO CRB Entry E_C */
#define		IIO_ICRBE_D		0x004006b8	/* IO CRB Entry E_D */
#define		IIO_ICRBE_E		0x004006c0	/* IO CRB Entry E_E */

#define		IIO_ICSML		0x00400700	/* IO CRB Spurious Message Low */
#define		IIO_ICSMM		0x00400708	/* IO CRB Spurious Message Middle */
#define		IIO_ICSMH		0x00400710	/* IO CRB Spurious Message High */

#define		IIO_IDBSS		0x00400718	/* IO Debug Submenu Select */

#define		IIO_IBLS0		0x00410000	/* IO BTE Length Status 0 */
#define		IIO_IBSA0		0x00410008	/* IO BTE Source Address 0 */
#define		IIO_IBDA0		0x00410010	/* IO BTE Destination Address 0 */
#define		IIO_IBCT0		0x00410018	/* IO BTE Control Terminate 0 */
#define		IIO_IBNA0		0x00410020	/* IO BTE Notification Address 0 */
#define		IIO_IBIA0		0x00410028	/* IO BTE Interrupt Address 0 */
#define		IIO_IBLS1		0x00420000	/* IO BTE Length Status 1 */
#define		IIO_IBSA1		0x00420008	/* IO BTE Source Address 1 */
#define		IIO_IBDA1		0x00420010	/* IO BTE Destination Address 1 */
#define		IIO_IBCT1		0x00420018	/* IO BTE Control Terminate 1 */
#define		IIO_IBNA1		0x00420020	/* IO BTE Notification Address 1 */
#define		IIO_IBIA1		0x00420028	/* IO BTE Interrupt Address 1 */

#define		IIO_IPCR		0x00430000	/* IO Performance Control */
#define		IIO_IPPR		0x00430008	/* IO Performance Profiling */

/************************************************************************
 *									*
 * Description:  This register echoes some information from the         *
 * LB_REV_ID register. It is available through Crosstalk as described   *
 * above. The REV_NUM and MFG_NUM fields receive their values from      *
 * the REVISION and MANUFACTURER fields in the LB_REV_ID register.      *
 * The PART_NUM field's value is the Crosstalk device ID number that    *
 * Steve Miller assigned to the SHub chip.                              *
 *									*
 ************************************************************************/

typedef union ii_wid_u {
	u64 ii_wid_regval;
	struct {
		u64 w_rsvd_1:1;
		u64 w_mfg_num:11;
		u64 w_part_num:16;
		u64 w_rev_num:4;
		u64 w_rsvd:32;
	} ii_wid_fld_s;
} ii_wid_u_t;

/************************************************************************
 *									*
 *  The fields in this register are set upon detection of an error      *
 * and cleared by various mechanisms, as explained in the               *
 * description.                                                         *
 *									*
 ************************************************************************/

typedef union ii_wstat_u {
	u64 ii_wstat_regval;
	struct {
		u64 w_pending:4;
		u64 w_xt_crd_to:1;
		u64 w_xt_tail_to:1;
		u64 w_rsvd_3:3;
		u64 w_tx_mx_rty:1;
		u64 w_rsvd_2:6;
		u64 w_llp_tx_cnt:8;
		u64 w_rsvd_1:8;
		u64 w_crazy:1;
		u64 w_rsvd:31;
	} ii_wstat_fld_s;
} ii_wstat_u_t;

/************************************************************************
 *									*
 * Description:  This is a read-write enabled register. It controls     *
 * various aspects of the Crosstalk flow control.                       *
 *									*
 ************************************************************************/

typedef union ii_wcr_u {
	u64 ii_wcr_regval;
	struct {
		u64 w_wid:4;
		u64 w_tag:1;
		u64 w_rsvd_1:8;
		u64 w_dst_crd:3;
		u64 w_f_bad_pkt:1;
		u64 w_dir_con:1;
		u64 w_e_thresh:5;
		u64 w_rsvd:41;
	} ii_wcr_fld_s;
} ii_wcr_u_t;

/************************************************************************
 *									*
 * Description:  This register's value is a bit vector that guards      *
 * access to local registers within the II as well as to external       *
 * Crosstalk widgets. Each bit in the register corresponds to a         *
 * particular region in the system; a region consists of one, two or    *
 * four nodes (depending on the value of the REGION_SIZE field in the   *
 * LB_REV_ID register, which is documented in Section 8.3.1.1). The     *
 * protection provided by this register applies to PIO read             *
 * operations as well as PIO write operations. The II will perform a    *
 * PIO read or write request only if the bit for the requestor's        *
 * region is set; otherwise, the II will not perform the requested      *
 * operation and will return an error response. When a PIO read or      *
 * write request targets an external Crosstalk widget, then not only    *
 * must the bit for the requestor's region be set in the ILAPR, but     *
 * also the target widget's bit in the IOWA register must be set in     *
 * order for the II to perform the requested operation; otherwise,      *
 * the II will return an error response. Hence, the protection          *
 * provided by the IOWA register supplements the protection provided    *
 * by the ILAPR for requests that target external Crosstalk widgets.    *
 * This register itself can be accessed only by the nodes whose         *
 * region ID bits are enabled in this same register. It can also be     *
 * accessed through the IAlias space by the local processors.           *
 * The reset value of this register allows access by all nodes.         *
 *									*
 ************************************************************************/

typedef union ii_ilapr_u {
	u64 ii_ilapr_regval;
	struct {
		u64 i_region:64;
	} ii_ilapr_fld_s;
} ii_ilapr_u_t;

/************************************************************************
 *									*
 * Description:  A write to this register of the 64-bit value           *
 * "SGIrules" in ASCII, will cause the bit in the ILAPR register        *
 * corresponding to the region of the requestor to be set (allow        *
 * access). A write of any other value will be ignored. Access          *
 * protection for this register is "SGIrules".                          *
 * This register can also be accessed through the IAlias space.         *
 * However, this access will not change the access permissions in the   *
 * ILAPR.                                                               *
 *									*
 ************************************************************************/

typedef union ii_ilapo_u {
	u64 ii_ilapo_regval;
	struct {
		u64 i_io_ovrride:64;
	} ii_ilapo_fld_s;
} ii_ilapo_u_t;

/************************************************************************
 *									*
 *  This register qualifies all the PIO and Graphics writes launched    *
 * from the SHUB towards a widget.                                      *
 *									*
 ************************************************************************/

typedef union ii_iowa_u {
	u64 ii_iowa_regval;
	struct {
		u64 i_w0_oac:1;
		u64 i_rsvd_1:7;
		u64 i_wx_oac:8;
		u64 i_rsvd:48;
	} ii_iowa_fld_s;
} ii_iowa_u_t;

/************************************************************************
 *									*
 * Description:  This register qualifies all the requests launched      *
 * from a widget towards the Shub. This register is intended to be      *
 * used by software in case of misbehaving widgets.                     *
 *									*
 *									*
 ************************************************************************/

typedef union ii_iiwa_u {
	u64 ii_iiwa_regval;
	struct {
		u64 i_w0_iac:1;
		u64 i_rsvd_1:7;
		u64 i_wx_iac:8;
		u64 i_rsvd:48;
	} ii_iiwa_fld_s;
} ii_iiwa_u_t;

/************************************************************************
 *									*
 * Description:  This register qualifies all the operations launched    *
 * from a widget towards the SHub. It allows individual access          *
 * control for up to 8 devices per widget. A device refers to           *
 * individual DMA master hosted by a widget.                            *
 * The bits in each field of this register are cleared by the Shub      *
 * upon detection of an error which requires the device to be           *
 * disabled. These fields assume that 0=TNUM=7 (i.e., Bridge-centric    *
 * Crosstalk). Whether or not a device has access rights to this        *
 * Shub is determined by an AND of the device enable bit in the         *
 * appropriate field of this register and the corresponding bit in      *
 * the Wx_IAC field (for the widget which this device belongs to).      *
 * The bits in this field are set by writing a 1 to them. Incoming      *
 * replies from Crosstalk are not subject to this access control        *
 * mechanism.                                                           *
 *									*
 ************************************************************************/

typedef union ii_iidem_u {
	u64 ii_iidem_regval;
	struct {
		u64 i_w8_dxs:8;
		u64 i_w9_dxs:8;
		u64 i_wa_dxs:8;
		u64 i_wb_dxs:8;
		u64 i_wc_dxs:8;
		u64 i_wd_dxs:8;
		u64 i_we_dxs:8;
		u64 i_wf_dxs:8;
	} ii_iidem_fld_s;
} ii_iidem_u_t;

/************************************************************************
 *									*
 *  This register contains the various programmable fields necessary    *
 * for controlling and observing the LLP signals.                       *
 *									*
 ************************************************************************/

typedef union ii_ilcsr_u {
	u64 ii_ilcsr_regval;
	struct {
		u64 i_nullto:6;
		u64 i_rsvd_4:2;
		u64 i_wrmrst:1;
		u64 i_rsvd_3:1;
		u64 i_llp_en:1;
		u64 i_bm8:1;
		u64 i_llp_stat:2;
		u64 i_remote_power:1;
		u64 i_rsvd_2:1;
		u64 i_maxrtry:10;
		u64 i_d_avail_sel:2;
		u64 i_rsvd_1:4;
		u64 i_maxbrst:10;
		u64 i_rsvd:22;

	} ii_ilcsr_fld_s;
} ii_ilcsr_u_t;

/************************************************************************
 *									*
 *  This is simply a status registers that monitors the LLP error       *
 * rate.								*
 *									*
 ************************************************************************/

typedef union ii_illr_u {
	u64 ii_illr_regval;
	struct {
		u64 i_sn_cnt:16;
		u64 i_cb_cnt:16;
		u64 i_rsvd:32;
	} ii_illr_fld_s;
} ii_illr_u_t;

/************************************************************************
 *									*
 * Description:  All II-detected non-BTE error interrupts are           *
 * specified via this register.                                         *
 * NOTE: The PI interrupt register address is hardcoded in the II. If   *
 * PI_ID==0, then the II sends an interrupt request (Duplonet PWRI      *
 * packet) to address offset 0x0180_0090 within the local register      *
 * address space of PI0 on the node specified by the NODE field. If     *
 * PI_ID==1, then the II sends the interrupt request to address         *
 * offset 0x01A0_0090 within the local register address space of PI1    *
 * on the node specified by the NODE field.                             *
 *									*
 ************************************************************************/

typedef union ii_iidsr_u {
	u64 ii_iidsr_regval;
	struct {
		u64 i_level:8;
		u64 i_pi_id:1;
		u64 i_node:11;
		u64 i_rsvd_3:4;
		u64 i_enable:1;
		u64 i_rsvd_2:3;
		u64 i_int_sent:2;
		u64 i_rsvd_1:2;
		u64 i_pi0_forward_int:1;
		u64 i_pi1_forward_int:1;
		u64 i_rsvd:30;
	} ii_iidsr_fld_s;
} ii_iidsr_u_t;

/************************************************************************
 *									*
 *  There are two instances of this register. This register is used     *
 * for matching up the incoming responses from the graphics widget to   *
 * the processor that initiated the graphics operation. The             *
 * write-responses are converted to graphics credits and returned to    *
 * the processor so that the processor interface can manage the flow    *
 * control.                                                             *
 *									*
 ************************************************************************/

typedef union ii_igfx0_u {
	u64 ii_igfx0_regval;
	struct {
		u64 i_w_num:4;
		u64 i_pi_id:1;
		u64 i_n_num:12;
		u64 i_p_num:1;
		u64 i_rsvd:46;
	} ii_igfx0_fld_s;
} ii_igfx0_u_t;

/************************************************************************
 *									*
 *  There are two instances of this register. This register is used     *
 * for matching up the incoming responses from the graphics widget to   *
 * the processor that initiated the graphics operation. The             *
 * write-responses are converted to graphics credits and returned to    *
 * the processor so that the processor interface can manage the flow    *
 * control.                                                             *
 *									*
 ************************************************************************/

typedef union ii_igfx1_u {
	u64 ii_igfx1_regval;
	struct {
		u64 i_w_num:4;
		u64 i_pi_id:1;
		u64 i_n_num:12;
		u64 i_p_num:1;
		u64 i_rsvd:46;
	} ii_igfx1_fld_s;
} ii_igfx1_u_t;

/************************************************************************
 *									*
 *  There are two instances of this registers. These registers are      *
 * used as scratch registers for software use.                          *
 *									*
 ************************************************************************/

typedef union ii_iscr0_u {
	u64 ii_iscr0_regval;
	struct {
		u64 i_scratch:64;
	} ii_iscr0_fld_s;
} ii_iscr0_u_t;

/************************************************************************
 *									*
 *  There are two instances of this registers. These registers are      *
 * used as scratch registers for software use.                          *
 *									*
 ************************************************************************/

typedef union ii_iscr1_u {
	u64 ii_iscr1_regval;
	struct {
		u64 i_scratch:64;
	} ii_iscr1_fld_s;
} ii_iscr1_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a Shub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the SHub is thus the lower 16 GBytes per widget       * 
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the Shub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte1_u {
	u64 ii_itte1_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte1_fld_s;
} ii_itte1_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a Shub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the Shub is thus the lower 16 GBytes per widget       *
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the Shub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte2_u {
	u64 ii_itte2_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte2_fld_s;
} ii_itte2_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a Shub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the Shub is thus the lower 16 GBytes per widget       *
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the SHub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte3_u {
	u64 ii_itte3_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte3_fld_s;
} ii_itte3_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a SHub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the SHub is thus the lower 16 GBytes per widget       *
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the SHub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte4_u {
	u64 ii_itte4_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte4_fld_s;
} ii_itte4_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a SHub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the Shub is thus the lower 16 GBytes per widget       *
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the Shub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte5_u {
	u64 ii_itte5_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte5_fld_s;
} ii_itte5_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a Shub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the Shub is thus the lower 16 GBytes per widget       *
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the Shub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte6_u {
	u64 ii_itte6_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte6_fld_s;
} ii_itte6_u_t;

/************************************************************************
 *									*
 * Description:  There are seven instances of translation table entry   *
 * registers. Each register maps a Shub Big Window to a 48-bit          *
 * address on Crosstalk.                                                *
 * For M-mode (128 nodes, 8 GBytes/node), SysAD[31:29] (Big Window      *
 * number) are used to select one of these 7 registers. The Widget      *
 * number field is then derived from the W_NUM field for synthesizing   *
 * a Crosstalk packet. The 5 bits of OFFSET are concatenated with       *
 * SysAD[28:0] to form Crosstalk[33:0]. The upper Crosstalk[47:34]      *
 * are padded with zeros. Although the maximum Crosstalk space          *
 * addressable by the Shub is thus the lower 16 GBytes per widget       *
 * (M-mode), however only <SUP >7</SUP>/<SUB >32nds</SUB> of this       *
 * space can be accessed.                                               *
 * For the N-mode (256 nodes, 4 GBytes/node), SysAD[30:28] (Big         *
 * Window number) are used to select one of these 7 registers. The      *
 * Widget number field is then derived from the W_NUM field for         *
 * synthesizing a Crosstalk packet. The 5 bits of OFFSET are            *
 * concatenated with SysAD[27:0] to form Crosstalk[33:0]. The IOSP      *
 * field is used as Crosstalk[47], and remainder of the Crosstalk       *
 * address bits (Crosstalk[46:34]) are always zero. While the maximum   *
 * Crosstalk space addressable by the SHub is thus the lower            *
 * 8-GBytes per widget (N-mode), only <SUP >7</SUP>/<SUB >32nds</SUB>   *
 * of this space can be accessed.                                       *
 *									*
 ************************************************************************/

typedef union ii_itte7_u {
	u64 ii_itte7_regval;
	struct {
		u64 i_offset:5;
		u64 i_rsvd_1:3;
		u64 i_w_num:4;
		u64 i_iosp:1;
		u64 i_rsvd:51;
	} ii_itte7_fld_s;
} ii_itte7_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprb0_u {
	u64 ii_iprb0_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprb0_fld_s;
} ii_iprb0_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprb8_u {
	u64 ii_iprb8_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprb8_fld_s;
} ii_iprb8_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprb9_u {
	u64 ii_iprb9_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprb9_fld_s;
} ii_iprb9_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.        *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 *									*
 *									*
 ************************************************************************/

typedef union ii_iprba_u {
	u64 ii_iprba_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprba_fld_s;
} ii_iprba_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprbb_u {
	u64 ii_iprbb_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprbb_fld_s;
} ii_iprbb_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprbc_u {
	u64 ii_iprbc_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprbc_fld_s;
} ii_iprbc_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprbd_u {
	u64 ii_iprbd_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprbd_fld_s;
} ii_iprbd_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of SHub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprbe_u {
	u64 ii_iprbe_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprbe_fld_s;
} ii_iprbe_u_t;

/************************************************************************
 *									*
 * Description:  There are 9 instances of this register, one per        *
 * actual widget in this implementation of Shub and Crossbow.           *
 * Note: Crossbow only has ports for Widgets 8 through F, widget 0      *
 * refers to Crossbow's internal space.                                 *
 * This register contains the state elements per widget that are        *
 * necessary to manage the PIO flow control on Crosstalk and on the     *
 * Router Network. See the PIO Flow Control chapter for a complete      *
 * description of this register                                         *
 * The SPUR_WR bit requires some explanation. When this register is     *
 * written, the new value of the C field is captured in an internal     *
 * register so the hardware can remember what the programmer wrote      *
 * into the credit counter. The SPUR_WR bit sets whenever the C field   *
 * increments above this stored value, which indicates that there       *
 * have been more responses received than requests sent. The SPUR_WR    *
 * bit cannot be cleared until a value is written to the IPRBx          *
 * register; the write will correct the C field and capture its new     *
 * value in the internal register. Even if IECLR[E_PRB_x] is set, the   *
 * SPUR_WR bit will persist if IPRBx hasn't yet been written.           *
 * .    								*
 *									*
 ************************************************************************/

typedef union ii_iprbf_u {
	u64 ii_iprbf_regval;
	struct {
		u64 i_c:8;
		u64 i_na:14;
		u64 i_rsvd_2:2;
		u64 i_nb:14;
		u64 i_rsvd_1:2;
		u64 i_m:2;
		u64 i_f:1;
		u64 i_of_cnt:5;
		u64 i_error:1;
		u64 i_rd_to:1;
		u64 i_spur_wr:1;
		u64 i_spur_rd:1;
		u64 i_rsvd:11;
		u64 i_mult_err:1;
	} ii_iprbe_fld_s;
} ii_iprbf_u_t;

/************************************************************************
 *									*
 *  This register specifies the timeout value to use for monitoring     *
 * Crosstalk credits which are used outbound to Crosstalk. An           *
 * internal counter called the Crosstalk Credit Timeout Counter         *
 * increments every 128 II clocks. The counter starts counting          *
 * anytime the credit count drops below a threshold, and resets to      *
 * zero (stops counting) anytime the credit count is at or above the    *
 * threshold. The threshold is 1 credit in direct connect mode and 2    *
 * in Crossbow connect mode. When the internal Crosstalk Credit         *
 * Timeout Counter reaches the value programmed in this register, a     *
 * Crosstalk Credit Timeout has occurred. The internal counter is not   *
 * readable from software, and stops counting at its maximum value,     *
 * so it cannot cause more than one interrupt.                          *
 *									*
 ************************************************************************/

typedef union ii_ixcc_u {
	u64 ii_ixcc_regval;
	struct {
		u64 i_time_out:26;
		u64 i_rsvd:38;
	} ii_ixcc_fld_s;
} ii_ixcc_u_t;

/************************************************************************
 *									*
 * Description:  This register qualifies all the PIO and DMA            *
 * operations launched from widget 0 towards the SHub. In               *
 * addition, it also qualifies accesses by the BTE streams.             *
 * The bits in each field of this register are cleared by the SHub      *
 * upon detection of an error which requires widget 0 or the BTE        *
 * streams to be terminated. Whether or not widget x has access         *
 * rights to this SHub is determined by an AND of the device            *
 * enable bit in the appropriate field of this register and bit 0 in    *
 * the Wx_IAC field. The bits in this field are set by writing a 1 to   *
 * them. Incoming replies from Crosstalk are not subject to this        *
 * access control mechanism.                                            *
 *									*
 ************************************************************************/

typedef union ii_imem_u {
	u64 ii_imem_regval;
	struct {
		u64 i_w0_esd:1;
		u64 i_rsvd_3:3;
		u64 i_b0_esd:1;
		u64 i_rsvd_2:3;
		u64 i_b1_esd:1;
		u64 i_rsvd_1:3;
		u64 i_clr_precise:1;
		u64 i_rsvd:51;
	} ii_imem_fld_s;
} ii_imem_u_t;

/************************************************************************
 *									*
 * Description:  This register specifies the timeout value to use for   *
 * monitoring Crosstalk tail flits coming into the Shub in the          *
 * TAIL_TO field. An internal counter associated with this register     *
 * is incremented every 128 II internal clocks (7 bits). The counter    *
 * starts counting anytime a header micropacket is received and stops   *
 * counting (and resets to zero) any time a micropacket with a Tail     *
 * bit is received. Once the counter reaches the threshold value        *
 * programmed in this register, it generates an interrupt to the        *
 * processor that is programmed into the IIDSR. The counter saturates   *
 * (does not roll over) at its maximum value, so it cannot cause        *
 * another interrupt until after it is cleared.                         *
 * The register also contains the Read Response Timeout values. The     *
 * Prescalar is 23 bits, and counts II clocks. An internal counter      *
 * increments on every II clock and when it reaches the value in the    *
 * Prescalar field, all IPRTE registers with their valid bits set       *
 * have their Read Response timers bumped. Whenever any of them match   *
 * the value in the RRSP_TO field, a Read Response Timeout has          *
 * occurred, and error handling occurs as described in the Error        *
 * Handling section of this document.                                   *
 *									*
 ************************************************************************/

typedef union ii_ixtt_u {
	u64 ii_ixtt_regval;
	struct {
		u64 i_tail_to:26;
		u64 i_rsvd_1:6;
		u64 i_rrsp_ps:23;
		u64 i_rrsp_to:5;
		u64 i_rsvd:4;
	} ii_ixtt_fld_s;
} ii_ixtt_u_t;

/************************************************************************
 *									*
 *  Writing a 1 to the fields of this register clears the appropriate   *
 * error bits in other areas of SHub. Note that when the                *
 * E_PRB_x bits are used to clear error bits in PRB registers,          *
 * SPUR_RD and SPUR_WR may persist, because they require additional     *
 * action to clear them. See the IPRBx and IXSS Register                *
 * specifications.                                                      *
 *									*
 ************************************************************************/

typedef union ii_ieclr_u {
	u64 ii_ieclr_regval;
	struct {
		u64 i_e_prb_0:1;
		u64 i_rsvd:7;
		u64 i_e_prb_8:1;
		u64 i_e_prb_9:1;
		u64 i_e_prb_a:1;
		u64 i_e_prb_b:1;
		u64 i_e_prb_c:1;
		u64 i_e_prb_d:1;
		u64 i_e_prb_e:1;
		u64 i_e_prb_f:1;
		u64 i_e_crazy:1;
		u64 i_e_bte_0:1;
		u64 i_e_bte_1:1;
		u64 i_reserved_1:10;
		u64 i_spur_rd_hdr:1;
		u64 i_cam_intr_to:1;
		u64 i_cam_overflow:1;
		u64 i_cam_read_miss:1;
		u64 i_ioq_rep_underflow:1;
		u64 i_ioq_req_underflow:1;
		u64 i_ioq_rep_overflow:1;
		u64 i_ioq_req_overflow:1;
		u64 i_iiq_rep_overflow:1;
		u64 i_iiq_req_overflow:1;
		u64 i_ii_xn_rep_cred_overflow:1;
		u64 i_ii_xn_req_cred_overflow:1;
		u64 i_ii_xn_invalid_cmd:1;
		u64 i_xn_ii_invalid_cmd:1;
		u64 i_reserved_2:21;
	} ii_ieclr_fld_s;
} ii_ieclr_u_t;

/************************************************************************
 *									*
 *  This register controls both BTEs. SOFT_RESET is intended for        *
 * recovery after an error. COUNT controls the total number of CRBs     *
 * that both BTEs (combined) can use, which affects total BTE           *
 * bandwidth.                                                           *
 *									*
 ************************************************************************/

typedef union ii_ibcr_u {
	u64 ii_ibcr_regval;
	struct {
		u64 i_count:4;
		u64 i_rsvd_1:4;
		u64 i_soft_reset:1;
		u64 i_rsvd:55;
	} ii_ibcr_fld_s;
} ii_ibcr_u_t;

/************************************************************************
 *									*
 *  This register contains the header of a spurious read response       *
 * received from Crosstalk. A spurious read response is defined as a    *
 * read response received by II from a widget for which (1) the SIDN    *
 * has a value between 1 and 7, inclusive (II never sends requests to   *
 * these widgets (2) there is no valid IPRTE register which             *
 * corresponds to the TNUM, or (3) the widget indicated in SIDN is      *
 * not the same as the widget recorded in the IPRTE register            *
 * referenced by the TNUM. If this condition is true, and if the        *
 * IXSS[VALID] bit is clear, then the header of the spurious read       *
 * response is capture in IXSM and IXSS, and IXSS[VALID] is set. The    *
 * errant header is thereby captured, and no further spurious read      *
 * respones are captured until IXSS[VALID] is cleared by setting the    *
 * appropriate bit in IECLR. Every time a spurious read response is     *
 * detected, the SPUR_RD bit of the PRB corresponding to the incoming   *
 * message's SIDN field is set. This always happens, regardless of       *
 * whether a header is captured. The programmer should check            *
 * IXSM[SIDN] to determine which widget sent the spurious response,     *
 * because there may be more than one SPUR_RD bit set in the PRB        *
 * registers. The widget indicated by IXSM[SIDN] was the first          *
 * spurious read response to be received since the last time            *
 * IXSS[VALID] was clear. The SPUR_RD bit of the corresponding PRB      *
 * will be set. Any SPUR_RD bits in any other PRB registers indicate    *
 * spurious messages from other widets which were detected after the    *
 * header was captured..                                                *
 *									*
 ************************************************************************/

typedef union ii_ixsm_u {
	u64 ii_ixsm_regval;
	struct {
		u64 i_byte_en:32;
		u64 i_reserved:1;
		u64 i_tag:3;
		u64 i_alt_pactyp:4;
		u64 i_bo:1;
		u64 i_error:1;
		u64 i_vbpm:1;
		u64 i_gbr:1;
		u64 i_ds:2;
		u64 i_ct:1;
		u64 i_tnum:5;
		u64 i_pactyp:4;
		u64 i_sidn:4;
		u64 i_didn:4;
	} ii_ixsm_fld_s;
} ii_ixsm_u_t;

/************************************************************************
 *									*
 *  This register contains the sideband bits of a spurious read         *
 * response received from Crosstalk.                                    *
 *									*
 ************************************************************************/

typedef union ii_ixss_u {
	u64 ii_ixss_regval;
	struct {
		u64 i_sideband:8;
		u64 i_rsvd:55;
		u64 i_valid:1;
	} ii_ixss_fld_s;
} ii_ixss_u_t;

/************************************************************************
 *									*
 *  This register enables software to access the II LLP's test port.    *
 * Refer to the LLP 2.5 documentation for an explanation of the test    *
 * port. Software can write to this register to program the values      *
 * for the control fields (TestErrCapture, TestClear, TestFlit,         *
 * TestMask and TestSeed). Similarly, software can read from this       *
 * register to obtain the values of the test port's status outputs      *
 * (TestCBerr, TestValid and TestData).                                 *
 *									*
 ************************************************************************/

typedef union ii_ilct_u {
	u64 ii_ilct_regval;
	struct {
		u64 i_test_seed:20;
		u64 i_test_mask:8;
		u64 i_test_data:20;
		u64 i_test_valid:1;
		u64 i_test_cberr:1;
		u64 i_test_flit:3;
		u64 i_test_clear:1;
		u64 i_test_err_capture:1;
		u64 i_rsvd:9;
	} ii_ilct_fld_s;
} ii_ilct_u_t;

/************************************************************************
 *									*
 *  If the II detects an illegal incoming Duplonet packet (request or   *
 * reply) when VALID==0 in the IIEPH1 register, then it saves the       *
 * contents of the packet's header flit in the IIEPH1 and IIEPH2        *
 * registers, sets the VALID bit in IIEPH1, clears the OVERRUN bit,     *
 * and assigns a value to the ERR_TYPE field which indicates the        *
 * specific nature of the error. The II recognizes four different       *
 * types of errors: short request packets (ERR_TYPE==2), short reply    *
 * packets (ERR_TYPE==3), long request packets (ERR_TYPE==4) and long   *
 * reply packets (ERR_TYPE==5). The encodings for these types of        *
 * errors were chosen to be consistent with the same types of errors    *
 * indicated by the ERR_TYPE field in the LB_ERROR_HDR1 register (in    *
 * the LB unit). If the II detects an illegal incoming Duplonet         *
 * packet when VALID==1 in the IIEPH1 register, then it merely sets     *
 * the OVERRUN bit to indicate that a subsequent error has happened,    *
 * and does nothing further.                                            *
 *									*
 ************************************************************************/

typedef union ii_iieph1_u {
	u64 ii_iieph1_regval;
	struct {
		u64 i_command:7;
		u64 i_rsvd_5:1;
		u64 i_suppl:14;
		u64 i_rsvd_4:1;
		u64 i_source:14;
		u64 i_rsvd_3:1;
		u64 i_err_type:4;
		u64 i_rsvd_2:4;
		u64 i_overrun:1;
		u64 i_rsvd_1:3;
		u64 i_valid:1;
		u64 i_rsvd:13;
	} ii_iieph1_fld_s;
} ii_iieph1_u_t;

/************************************************************************
 *									*
 *  This register holds the Address field from the header flit of an    *
 * incoming erroneous Duplonet packet, along with the tail bit which    *
 * accompanied this header flit. This register is essentially an        *
 * extension of IIEPH1. Two registers were necessary because the 64     *
 * bits available in only a single register were insufficient to        *
 * capture the entire header flit of an erroneous packet.               *
 *									*
 ************************************************************************/

typedef union ii_iieph2_u {
	u64 ii_iieph2_regval;
	struct {
		u64 i_rsvd_0:3;
		u64 i_address:47;
		u64 i_rsvd_1:10;
		u64 i_tail:1;
		u64 i_rsvd:3;
	} ii_iieph2_fld_s;
} ii_iieph2_u_t;

/******************************/

/************************************************************************
 *									*
 *  This register's value is a bit vector that guards access from SXBs  *
 * to local registers within the II as well as to external Crosstalk    *
 * widgets								*
 *									*
 ************************************************************************/

typedef union ii_islapr_u {
	u64 ii_islapr_regval;
	struct {
		u64 i_region:64;
	} ii_islapr_fld_s;
} ii_islapr_u_t;

/************************************************************************
 *									*
 *  A write to this register of the 56-bit value "Pup+Bun" will cause	*
 * the bit in the ISLAPR register corresponding to the region of the	*
 * requestor to be set (access allowed).				(
 *									*
 ************************************************************************/

typedef union ii_islapo_u {
	u64 ii_islapo_regval;
	struct {
		u64 i_io_sbx_ovrride:56;
		u64 i_rsvd:8;
	} ii_islapo_fld_s;
} ii_islapo_u_t;

/************************************************************************
 *									*
 *  Determines how long the wrapper will wait aftr an interrupt is	*
 * initially issued from the II before it times out the outstanding	*
 * interrupt and drops it from the interrupt queue.			* 
 *									*
 ************************************************************************/

typedef union ii_iwi_u {
	u64 ii_iwi_regval;
	struct {
		u64 i_prescale:24;
		u64 i_rsvd:8;
		u64 i_timeout:8;
		u64 i_rsvd1:8;
		u64 i_intrpt_retry_period:8;
		u64 i_rsvd2:8;
	} ii_iwi_fld_s;
} ii_iwi_u_t;

/************************************************************************
 *									*
 *  Log errors which have occurred in the II wrapper. The errors are	*
 * cleared by writing to the IECLR register.				* 
 *									*
 ************************************************************************/

typedef union ii_iwel_u {
	u64 ii_iwel_regval;
	struct {
		u64 i_intr_timed_out:1;
		u64 i_rsvd:7;
		u64 i_cam_overflow:1;
		u64 i_cam_read_miss:1;
		u64 i_rsvd1:2;
		u64 i_ioq_rep_underflow:1;
		u64 i_ioq_req_underflow:1;
		u64 i_ioq_rep_overflow:1;
		u64 i_ioq_req_overflow:1;
		u64 i_iiq_rep_overflow:1;
		u64 i_iiq_req_overflow:1;
		u64 i_rsvd2:6;
		u64 i_ii_xn_rep_cred_over_under:1;
		u64 i_ii_xn_req_cred_over_under:1;
		u64 i_rsvd3:6;
		u64 i_ii_xn_invalid_cmd:1;
		u64 i_xn_ii_invalid_cmd:1;
		u64 i_rsvd4:30;
	} ii_iwel_fld_s;
} ii_iwel_u_t;

/************************************************************************
 *									*
 *  Controls the II wrapper.						* 
 *									*
 ************************************************************************/

typedef union ii_iwc_u {
	u64 ii_iwc_regval;
	struct {
		u64 i_dma_byte_swap:1;
		u64 i_rsvd:3;
		u64 i_cam_read_lines_reset:1;
		u64 i_rsvd1:3;
		u64 i_ii_xn_cred_over_under_log:1;
		u64 i_rsvd2:19;
		u64 i_xn_rep_iq_depth:5;
		u64 i_rsvd3:3;
		u64 i_xn_req_iq_depth:5;
		u64 i_rsvd4:3;
		u64 i_iiq_depth:6;
		u64 i_rsvd5:12;
		u64 i_force_rep_cred:1;
		u64 i_force_req_cred:1;
	} ii_iwc_fld_s;
} ii_iwc_u_t;

/************************************************************************
 *									*
 *  Status in the II wrapper.						* 
 *									*
 ************************************************************************/

typedef union ii_iws_u {
	u64 ii_iws_regval;
	struct {
		u64 i_xn_rep_iq_credits:5;
		u64 i_rsvd:3;
		u64 i_xn_req_iq_credits:5;
		u64 i_rsvd1:51;
	} ii_iws_fld_s;
} ii_iws_u_t;

/************************************************************************
 *									*
 *  Masks errors in the IWEL register.					*
 *									*
 ************************************************************************/

typedef union ii_iweim_u {
	u64 ii_iweim_regval;
	struct {
		u64 i_intr_timed_out:1;
		u64 i_rsvd:7;
		u64 i_cam_overflow:1;
		u64 i_cam_read_miss:1;
		u64 i_rsvd1:2;
		u64 i_ioq_rep_underflow:1;
		u64 i_ioq_req_underflow:1;
		u64 i_ioq_rep_overflow:1;
		u64 i_ioq_req_overflow:1;
		u64 i_iiq_rep_overflow:1;
		u64 i_iiq_req_overflow:1;
		u64 i_rsvd2:6;
		u64 i_ii_xn_rep_cred_overflow:1;
		u64 i_ii_xn_req_cred_overflow:1;
		u64 i_rsvd3:6;
		u64 i_ii_xn_invalid_cmd:1;
		u64 i_xn_ii_invalid_cmd:1;
		u64 i_rsvd4:30;
	} ii_iweim_fld_s;
} ii_iweim_u_t;

/************************************************************************
 *									*
 *  A write to this register causes a particular field in the           *
 * corresponding widget's PRB entry to be adjusted up or down by 1.     *
 * This counter should be used when recovering from error and reset     *
 * conditions. Note that software would be capable of causing           *
 * inadvertent overflow or underflow of these counters.                 *
 *									*
 ************************************************************************/

typedef union ii_ipca_u {
	u64 ii_ipca_regval;
	struct {
		u64 i_wid:4;
		u64 i_adjust:1;
		u64 i_rsvd_1:3;
		u64 i_field:2;
		u64 i_rsvd:54;
	} ii_ipca_fld_s;
} ii_ipca_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte0a_u {
	u64 ii_iprte0a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte0a_fld_s;
} ii_iprte0a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte1a_u {
	u64 ii_iprte1a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte1a_fld_s;
} ii_iprte1a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte2a_u {
	u64 ii_iprte2a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte2a_fld_s;
} ii_iprte2a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte3a_u {
	u64 ii_iprte3a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte3a_fld_s;
} ii_iprte3a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte4a_u {
	u64 ii_iprte4a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte4a_fld_s;
} ii_iprte4a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte5a_u {
	u64 ii_iprte5a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte5a_fld_s;
} ii_iprte5a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte6a_u {
	u64 ii_iprte6a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprte6a_fld_s;
} ii_iprte6a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte7a_u {
	u64 ii_iprte7a_regval;
	struct {
		u64 i_rsvd_1:54;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} ii_iprtea7_fld_s;
} ii_iprte7a_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte0b_u {
	u64 ii_iprte0b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte0b_fld_s;
} ii_iprte0b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte1b_u {
	u64 ii_iprte1b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte1b_fld_s;
} ii_iprte1b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte2b_u {
	u64 ii_iprte2b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte2b_fld_s;
} ii_iprte2b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte3b_u {
	u64 ii_iprte3b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte3b_fld_s;
} ii_iprte3b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte4b_u {
	u64 ii_iprte4b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte4b_fld_s;
} ii_iprte4b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte5b_u {
	u64 ii_iprte5b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte5b_fld_s;
} ii_iprte5b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte6b_u {
	u64 ii_iprte6b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;

	} ii_iprte6b_fld_s;
} ii_iprte6b_u_t;

/************************************************************************
 *									*
 *  There are 8 instances of this register. This register contains      *
 * the information that the II has to remember once it has launched a   *
 * PIO Read operation. The contents are used to form the correct        *
 * Router Network packet and direct the Crosstalk reply to the          *
 * appropriate processor.                                               *
 *									*
 ************************************************************************/

typedef union ii_iprte7b_u {
	u64 ii_iprte7b_regval;
	struct {
		u64 i_rsvd_1:3;
		u64 i_address:47;
		u64 i_init:3;
		u64 i_source:11;
	} ii_iprte7b_fld_s;
} ii_iprte7b_u_t;

/************************************************************************
 *									*
 * Description:  SHub II contains a feature which did not exist in      *
 * the Hub which automatically cleans up after a Read Response          *
 * timeout, including deallocation of the IPRTE and recovery of IBuf    *
 * space. The inclusion of this register in SHub is for backward        *
 * compatibility                                                        *
 * A write to this register causes an entry from the table of           *
 * outstanding PIO Read Requests to be freed and returned to the        *
 * stack of free entries. This register is used in handling the         *
 * timeout errors that result in a PIO Reply never returning from       *
 * Crosstalk.                                                           *
 * Note that this register does not affect the contents of the IPRTE    *
 * registers. The Valid bits in those registers have to be              *
 * specifically turned off by software.                                 *
 *									*
 ************************************************************************/

typedef union ii_ipdr_u {
	u64 ii_ipdr_regval;
	struct {
		u64 i_te:3;
		u64 i_rsvd_1:1;
		u64 i_pnd:1;
		u64 i_init_rpcnt:1;
		u64 i_rsvd:58;
	} ii_ipdr_fld_s;
} ii_ipdr_u_t;

/************************************************************************
 *									*
 *  A write to this register causes a CRB entry to be returned to the   *
 * queue of free CRBs. The entry should have previously been cleared    *
 * (mark bit) via backdoor access to the pertinent CRB entry. This      *
 * register is used in the last step of handling the errors that are    *
 * captured and marked in CRB entries.  Briefly: 1) first error for     *
 * DMA write from a particular device, and first error for a            *
 * particular BTE stream, lead to a marked CRB entry, and processor     *
 * interrupt, 2) software reads the error information captured in the   *
 * CRB entry, and presumably takes some corrective action, 3)           *
 * software clears the mark bit, and finally 4) software writes to      *
 * the ICDR register to return the CRB entry to the list of free CRB    *
 * entries.                                                             *
 *									*
 ************************************************************************/

typedef union ii_icdr_u {
	u64 ii_icdr_regval;
	struct {
		u64 i_crb_num:4;
		u64 i_pnd:1;
		u64 i_rsvd:59;
	} ii_icdr_fld_s;
} ii_icdr_u_t;

/************************************************************************
 *									*
 *  This register provides debug access to two FIFOs inside of II.      *
 * Both IOQ_MAX* fields of this register contain the instantaneous      *
 * depth (in units of the number of available entries) of the           *
 * associated IOQ FIFO.  A read of this register will return the        *
 * number of free entries on each FIFO at the time of the read.  So     *
 * when a FIFO is idle, the associated field contains the maximum       *
 * depth of the FIFO.  This register is writable for debug reasons      *
 * and is intended to be written with the maximum desired FIFO depth    *
 * while the FIFO is idle. Software must assure that II is idle when    *
 * this register is written. If there are any active entries in any     *
 * of these FIFOs when this register is written, the results are        *
 * undefined.                                                           *
 *									*
 ************************************************************************/

typedef union ii_ifdr_u {
	u64 ii_ifdr_regval;
	struct {
		u64 i_ioq_max_rq:7;
		u64 i_set_ioq_rq:1;
		u64 i_ioq_max_rp:7;
		u64 i_set_ioq_rp:1;
		u64 i_rsvd:48;
	} ii_ifdr_fld_s;
} ii_ifdr_u_t;

/************************************************************************
 *									*
 *  This register allows the II to become sluggish in removing          *
 * messages from its inbound queue (IIQ). This will cause messages to   *
 * back up in either virtual channel. Disabling the "molasses" mode     *
 * subsequently allows the II to be tested under stress. In the         *
 * sluggish ("Molasses") mode, the localized effects of congestion      *
 * can be observed.                                                     *
 *									*
 ************************************************************************/

typedef union ii_iiap_u {
	u64 ii_iiap_regval;
	struct {
		u64 i_rq_mls:6;
		u64 i_rsvd_1:2;
		u64 i_rp_mls:6;
		u64 i_rsvd:50;
	} ii_iiap_fld_s;
} ii_iiap_u_t;

/************************************************************************
 *									*
 *  This register allows several parameters of CRB operation to be      *
 * set. Note that writing to this register can have catastrophic side   *
 * effects, if the CRB is not quiescent, i.e. if the CRB is             *
 * processing protocol messages when the write occurs.                  *
 *									*
 ************************************************************************/

typedef union ii_icmr_u {
	u64 ii_icmr_regval;
	struct {
		u64 i_sp_msg:1;
		u64 i_rd_hdr:1;
		u64 i_rsvd_4:2;
		u64 i_c_cnt:4;
		u64 i_rsvd_3:4;
		u64 i_clr_rqpd:1;
		u64 i_clr_rppd:1;
		u64 i_rsvd_2:2;
		u64 i_fc_cnt:4;
		u64 i_crb_vld:15;
		u64 i_crb_mark:15;
		u64 i_rsvd_1:2;
		u64 i_precise:1;
		u64 i_rsvd:11;
	} ii_icmr_fld_s;
} ii_icmr_u_t;

/************************************************************************
 *									*
 *  This register allows control of the table portion of the CRB        *
 * logic via software. Control operations from this register have       *
 * priority over all incoming Crosstalk or BTE requests.                *
 *									*
 ************************************************************************/

typedef union ii_iccr_u {
	u64 ii_iccr_regval;
	struct {
		u64 i_crb_num:4;
		u64 i_rsvd_1:4;
		u64 i_cmd:8;
		u64 i_pending:1;
		u64 i_rsvd:47;
	} ii_iccr_fld_s;
} ii_iccr_u_t;

/************************************************************************
 *									*
 *  This register allows the maximum timeout value to be programmed.    *
 *									*
 ************************************************************************/

typedef union ii_icto_u {
	u64 ii_icto_regval;
	struct {
		u64 i_timeout:8;
		u64 i_rsvd:56;
	} ii_icto_fld_s;
} ii_icto_u_t;

/************************************************************************
 *									*
 *  This register allows the timeout prescalar to be programmed. An     *
 * internal counter is associated with this register. When the          *
 * internal counter reaches the value of the PRESCALE field, the        *
 * timer registers in all valid CRBs are incremented (CRBx_D[TIMEOUT]   *
 * field). The internal counter resets to zero, and then continues      *
 * counting.                                                            *
 *									*
 ************************************************************************/

typedef union ii_ictp_u {
	u64 ii_ictp_regval;
	struct {
		u64 i_prescale:24;
		u64 i_rsvd:40;
	} ii_ictp_fld_s;
} ii_ictp_u_t;

/************************************************************************
 *									*
 * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *
 * used for Crosstalk operations (both cacheline and partial            *
 * operations) or BTE/IO. Because the CRB entries are very wide, five   *
 * registers (_A to _E) are required to read and write each entry.      *
 * The CRB Entry registers can be conceptualized as rows and columns    *
 * (illustrated in the table above). Each row contains the 4            *
 * registers required for a single CRB Entry. The first doubleword      *
 * (column) for each entry is labeled A, and the second doubleword      *
 * (higher address) is labeled B, the third doubleword is labeled C,    *
 * the fourth doubleword is labeled D and the fifth doubleword is       *
 * labeled E. All CRB entries have their addresses on a quarter         *
 * cacheline aligned boundary.                   *
 * Upon reset, only the following fields are initialized: valid         *
 * (VLD), priority count, timeout, timeout valid, and context valid.    *
 * All other bits should be cleared by software before use (after       *
 * recovering any potential error state from before the reset).         *
 * The following four tables summarize the format for the four          *
 * registers that are used for each ICRB# Entry.                        *
 *									*
 ************************************************************************/

typedef union ii_icrb0_a_u {
	u64 ii_icrb0_a_regval;
	struct {
		u64 ia_iow:1;
		u64 ia_vld:1;
		u64 ia_addr:47;
		u64 ia_tnum:5;
		u64 ia_sidn:4;
		u64 ia_rsvd:6;
	} ii_icrb0_a_fld_s;
} ii_icrb0_a_u_t;

/************************************************************************
 *									*
 * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *
 * used for Crosstalk operations (both cacheline and partial            *
 * operations) or BTE/IO. Because the CRB entries are very wide, five   *
 * registers (_A to _E) are required to read and write each entry.      *
 *									*
 ************************************************************************/

typedef union ii_icrb0_b_u {
	u64 ii_icrb0_b_regval;
	struct {
		u64 ib_xt_err:1;
		u64 ib_mark:1;
		u64 ib_ln_uce:1;
		u64 ib_errcode:3;
		u64 ib_error:1;
		u64 ib_stall__bte_1:1;
		u64 ib_stall__bte_0:1;
		u64 ib_stall__intr:1;
		u64 ib_stall_ib:1;
		u64 ib_intvn:1;
		u64 ib_wb:1;
		u64 ib_hold:1;
		u64 ib_ack:1;
		u64 ib_resp:1;
		u64 ib_ack_cnt:11;
		u64 ib_rsvd:7;
		u64 ib_exc:5;
		u64 ib_init:3;
		u64 ib_imsg:8;
		u64 ib_imsgtype:2;
		u64 ib_use_old:1;
		u64 ib_rsvd_1:11;
	} ii_icrb0_b_fld_s;
} ii_icrb0_b_u_t;

/************************************************************************
 *									*
 * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *
 * used for Crosstalk operations (both cacheline and partial            *
 * operations) or BTE/IO. Because the CRB entries are very wide, five   *
 * registers (_A to _E) are required to read and write each entry.      *
 *									*
 ************************************************************************/

typedef union ii_icrb0_c_u {
	u64 ii_icrb0_c_regval;
	struct {
		u64 ic_source:15;
		u64 ic_size:2;
		u64 ic_ct:1;
		u64 ic_bte_num:1;
		u64 ic_gbr:1;
		u64 ic_resprqd:1;
		u64 ic_bo:1;
		u64 ic_suppl:15;
		u64 ic_rsvd:27;
	} ii_icrb0_c_fld_s;
} ii_icrb0_c_u_t;

/************************************************************************
 *									*
 * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *
 * used for Crosstalk operations (both cacheline and partial            *
 * operations) or BTE/IO. Because the CRB entries are very wide, five   *
 * registers (_A to _E) are required to read and write each entry.      *
 *									*
 ************************************************************************/

typedef union ii_icrb0_d_u {
	u64 ii_icrb0_d_regval;
	struct {
		u64 id_pa_be:43;
		u64 id_bte_op:1;
		u64 id_pr_psc:4;
		u64 id_pr_cnt:4;
		u64 id_sleep:1;
		u64 id_rsvd:11;
	} ii_icrb0_d_fld_s;
} ii_icrb0_d_u_t;

/************************************************************************
 *									*
 * Description:  There are 15 CRB Entries (ICRB0 to ICRBE) that are     *
 * used for Crosstalk operations (both cacheline and partial            *
 * operations) or BTE/IO. Because the CRB entries are very wide, five   *
 * registers (_A to _E) are required to read and write each entry.      *
 *									*
 ************************************************************************/

typedef union ii_icrb0_e_u {
	u64 ii_icrb0_e_regval;
	struct {
		u64 ie_timeout:8;
		u64 ie_context:15;
		u64 ie_rsvd:1;
		u64 ie_tvld:1;
		u64 ie_cvld:1;
		u64 ie_rsvd_0:38;
	} ii_icrb0_e_fld_s;
} ii_icrb0_e_u_t;

/************************************************************************
 *									*
 *  This register contains the lower 64 bits of the header of the       *
 * spurious message captured by II. Valid when the SP_MSG bit in ICMR   *
 * register is set.                                                     *
 *									*
 ************************************************************************/

typedef union ii_icsml_u {
	u64 ii_icsml_regval;
	struct {
		u64 i_tt_addr:47;
		u64 i_newsuppl_ex:14;
		u64 i_reserved:2;
		u64 i_overflow:1;
	} ii_icsml_fld_s;
} ii_icsml_u_t;

/************************************************************************
 *									*
 *  This register contains the middle 64 bits of the header of the      *
 * spurious message captured by II. Valid when the SP_MSG bit in ICMR   *
 * register is set.                                                     *
 *									*
 ************************************************************************/

typedef union ii_icsmm_u {
	u64 ii_icsmm_regval;
	struct {
		u64 i_tt_ack_cnt:11;
		u64 i_reserved:53;
	} ii_icsmm_fld_s;
} ii_icsmm_u_t;

/************************************************************************
 *									*
 *  This register contains the microscopic state, all the inputs to     *
 * the protocol table, captured with the spurious message. Valid when   *
 * the SP_MSG bit in the ICMR register is set.                          *
 *									*
 ************************************************************************/

typedef union ii_icsmh_u {
	u64 ii_icsmh_regval;
	struct {
		u64 i_tt_vld:1;
		u64 i_xerr:1;
		u64 i_ft_cwact_o:1;
		u64 i_ft_wact_o:1;
		u64 i_ft_active_o:1;
		u64 i_sync:1;
		u64 i_mnusg:1;
		u64 i_mnusz:1;
		u64 i_plusz:1;
		u64 i_plusg:1;
		u64 i_tt_exc:5;
		u64 i_tt_wb:1;
		u64 i_tt_hold:1;
		u64 i_tt_ack:1;
		u64 i_tt_resp:1;
		u64 i_tt_intvn:1;
		u64 i_g_stall_bte1:1;
		u64 i_g_stall_bte0:1;
		u64 i_g_stall_il:1;
		u64 i_g_stall_ib:1;
		u64 i_tt_imsg:8;
		u64 i_tt_imsgtype:2;
		u64 i_tt_use_old:1;
		u64 i_tt_respreqd:1;
		u64 i_tt_bte_num:1;
		u64 i_cbn:1;
		u64 i_match:1;
		u64 i_rpcnt_lt_34:1;
		u64 i_rpcnt_ge_34:1;
		u64 i_rpcnt_lt_18:1;
		u64 i_rpcnt_ge_18:1;
		u64 i_rpcnt_lt_2:1;
		u64 i_rpcnt_ge_2:1;
		u64 i_rqcnt_lt_18:1;
		u64 i_rqcnt_ge_18:1;
		u64 i_rqcnt_lt_2:1;
		u64 i_rqcnt_ge_2:1;
		u64 i_tt_device:7;
		u64 i_tt_init:3;
		u64 i_reserved:5;
	} ii_icsmh_fld_s;
} ii_icsmh_u_t;

/************************************************************************
 *									*
 *  The Shub DEBUG unit provides a 3-bit selection signal to the        *
 * II core and a 3-bit selection signal to the fsbclk domain in the II  *
 * wrapper.                                                             *
 *									*
 ************************************************************************/

typedef union ii_idbss_u {
	u64 ii_idbss_regval;
	struct {
		u64 i_iioclk_core_submenu:3;
		u64 i_rsvd:5;
		u64 i_fsbclk_wrapper_submenu:3;
		u64 i_rsvd_1:5;
		u64 i_iioclk_menu:5;
		u64 i_rsvd_2:43;
	} ii_idbss_fld_s;
} ii_idbss_u_t;

/************************************************************************
 *									*
 * Description:  This register is used to set up the length for a       *
 * transfer and then to monitor the progress of that transfer. This     *
 * register needs to be initialized before a transfer is started. A     *
 * legitimate write to this register will set the Busy bit, clear the   *
 * Error bit, and initialize the length to the value desired.           *
 * While the transfer is in progress, hardware will decrement the       *
 * length field with each successful block that is copied. Once the     *
 * transfer completes, hardware will clear the Busy bit. The length     *
 * field will also contain the number of cache lines left to be         *
 * transferred.                                                         *
 *									*
 ************************************************************************/

typedef union ii_ibls0_u {
	u64 ii_ibls0_regval;
	struct {
		u64 i_length:16;
		u64 i_error:1;
		u64 i_rsvd_1:3;
		u64 i_busy:1;
		u64 i_rsvd:43;
	} ii_ibls0_fld_s;
} ii_ibls0_u_t;

/************************************************************************
 *									*
 *  This register should be loaded before a transfer is started. The    *
 * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *
 * address as described in Section 1.3, Figure2 and Figure3. Since      *
 * the bottom 7 bits of the address are always taken to be zero, BTE    *
 * transfers are always cacheline-aligned.                              *
 *									*
 ************************************************************************/

typedef union ii_ibsa0_u {
	u64 ii_ibsa0_regval;
	struct {
		u64 i_rsvd_1:7;
		u64 i_addr:42;
		u64 i_rsvd:15;
	} ii_ibsa0_fld_s;
} ii_ibsa0_u_t;

/************************************************************************
 *									*
 *  This register should be loaded before a transfer is started. The    *
 * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *
 * address as described in Section 1.3, Figure2 and Figure3. Since      *
 * the bottom 7 bits of the address are always taken to be zero, BTE    *
 * transfers are always cacheline-aligned.                              *
 *									*
 ************************************************************************/

typedef union ii_ibda0_u {
	u64 ii_ibda0_regval;
	struct {
		u64 i_rsvd_1:7;
		u64 i_addr:42;
		u64 i_rsvd:15;
	} ii_ibda0_fld_s;
} ii_ibda0_u_t;

/************************************************************************
 *									*
 *  Writing to this register sets up the attributes of the transfer     *
 * and initiates the transfer operation. Reading this register has      *
 * the side effect of terminating any transfer in progress. Note:       *
 * stopping a transfer midstream could have an adverse impact on the    *
 * other BTE. If a BTE stream has to be stopped (due to error           *
 * handling for example), both BTE streams should be stopped and        *
 * their transfers discarded.                                           *
 *									*
 ************************************************************************/

typedef union ii_ibct0_u {
	u64 ii_ibct0_regval;
	struct {
		u64 i_zerofill:1;
		u64 i_rsvd_2:3;
		u64 i_notify:1;
		u64 i_rsvd_1:3;
		u64 i_poison:1;
		u64 i_rsvd:55;
	} ii_ibct0_fld_s;
} ii_ibct0_u_t;

/************************************************************************
 *									*
 *  This register contains the address to which the WINV is sent.       *
 * This address has to be cache line aligned.                           *
 *									*
 ************************************************************************/

typedef union ii_ibna0_u {
	u64 ii_ibna0_regval;
	struct {
		u64 i_rsvd_1:7;
		u64 i_addr:42;
		u64 i_rsvd:15;
	} ii_ibna0_fld_s;
} ii_ibna0_u_t;

/************************************************************************
 *									*
 *  This register contains the programmable level as well as the node   *
 * ID and PI unit of the processor to which the interrupt will be       *
 * sent.								*
 *									*
 ************************************************************************/

typedef union ii_ibia0_u {
	u64 ii_ibia0_regval;
	struct {
		u64 i_rsvd_2:1;
		u64 i_node_id:11;
		u64 i_rsvd_1:4;
		u64 i_level:7;
		u64 i_rsvd:41;
	} ii_ibia0_fld_s;
} ii_ibia0_u_t;

/************************************************************************
 *									*
 * Description:  This register is used to set up the length for a       *
 * transfer and then to monitor the progress of that transfer. This     *
 * register needs to be initialized before a transfer is started. A     *
 * legitimate write to this register will set the Busy bit, clear the   *
 * Error bit, and initialize the length to the value desired.           *
 * While the transfer is in progress, hardware will decrement the       *
 * length field with each successful block that is copied. Once the     *
 * transfer completes, hardware will clear the Busy bit. The length     *
 * field will also contain the number of cache lines left to be         *
 * transferred.                                                         *
 *									*
 ************************************************************************/

typedef union ii_ibls1_u {
	u64 ii_ibls1_regval;
	struct {
		u64 i_length:16;
		u64 i_error:1;
		u64 i_rsvd_1:3;
		u64 i_busy:1;
		u64 i_rsvd:43;
	} ii_ibls1_fld_s;
} ii_ibls1_u_t;

/************************************************************************
 *									*
 *  This register should be loaded before a transfer is started. The    *
 * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *
 * address as described in Section 1.3, Figure2 and Figure3. Since      *
 * the bottom 7 bits of the address are always taken to be zero, BTE    *
 * transfers are always cacheline-aligned.                              *
 *									*
 ************************************************************************/

typedef union ii_ibsa1_u {
	u64 ii_ibsa1_regval;
	struct {
		u64 i_rsvd_1:7;
		u64 i_addr:33;
		u64 i_rsvd:24;
	} ii_ibsa1_fld_s;
} ii_ibsa1_u_t;

/************************************************************************
 *									*
 *  This register should be loaded before a transfer is started. The    *
 * address to be loaded in bits 39:0 is the 40-bit TRex+ physical       *
 * address as described in Section 1.3, Figure2 and Figure3. Since      *
 * the bottom 7 bits of the address are always taken to be zero, BTE    *
 * transfers are always cacheline-aligned.                              *
 *									*
 ************************************************************************/

typedef union ii_ibda1_u {
	u64 ii_ibda1_regval;
	struct {
		u64 i_rsvd_1:7;
		u64 i_addr:33;
		u64 i_rsvd:24;
	} ii_ibda1_fld_s;
} ii_ibda1_u_t;

/************************************************************************
 *									*
 *  Writing to this register sets up the attributes of the transfer     *
 * and initiates the transfer operation. Reading this register has      *
 * the side effect of terminating any transfer in progress. Note:       *
 * stopping a transfer midstream could have an adverse impact on the    *
 * other BTE. If a BTE stream has to be stopped (due to error           *
 * handling for example), both BTE streams should be stopped and        *
 * their transfers discarded.                                           *
 *									*
 ************************************************************************/

typedef union ii_ibct1_u {
	u64 ii_ibct1_regval;
	struct {
		u64 i_zerofill:1;
		u64 i_rsvd_2:3;
		u64 i_notify:1;
		u64 i_rsvd_1:3;
		u64 i_poison:1;
		u64 i_rsvd:55;
	} ii_ibct1_fld_s;
} ii_ibct1_u_t;

/************************************************************************
 *									*
 *  This register contains the address to which the WINV is sent.       *
 * This address has to be cache line aligned.                           *
 *									*
 ************************************************************************/

typedef union ii_ibna1_u {
	u64 ii_ibna1_regval;
	struct {
		u64 i_rsvd_1:7;
		u64 i_addr:33;
		u64 i_rsvd:24;
	} ii_ibna1_fld_s;
} ii_ibna1_u_t;

/************************************************************************
 *									*
 *  This register contains the programmable level as well as the node   *
 * ID and PI unit of the processor to which the interrupt will be       *
 * sent.								*
 *									*
 ************************************************************************/

typedef union ii_ibia1_u {
	u64 ii_ibia1_regval;
	struct {
		u64 i_pi_id:1;
		u64 i_node_id:8;
		u64 i_rsvd_1:7;
		u64 i_level:7;
		u64 i_rsvd:41;
	} ii_ibia1_fld_s;
} ii_ibia1_u_t;

/************************************************************************
 *									*
 *  This register defines the resources that feed information into      *
 * the two performance counters located in the IO Performance           *
 * Profiling Register. There are 17 different quantities that can be    *
 * measured. Given these 17 different options, the two performance      *
 * counters have 15 of them in common; menu selections 0 through 0xE    *
 * are identical for each performance counter. As for the other two     *
 * options, one is available from one performance counter and the       *
 * other is available from the other performance counter. Hence, the    *
 * II supports all 17*16=272 possible combinations of quantities to     *
 * measure.                                                             *
 *									*
 ************************************************************************/

typedef union ii_ipcr_u {
	u64 ii_ipcr_regval;
	struct {
		u64 i_ippr0_c:4;
		u64 i_ippr1_c:4;
		u64 i_icct:8;
		u64 i_rsvd:48;
	} ii_ipcr_fld_s;
} ii_ipcr_u_t;

/************************************************************************
 *									*
 *									*
 *									*
 ************************************************************************/

typedef union ii_ippr_u {
	u64 ii_ippr_regval;
	struct {
		u64 i_ippr0:32;
		u64 i_ippr1:32;
	} ii_ippr_fld_s;
} ii_ippr_u_t;

/************************************************************************
 *									*
 * The following defines which were not formed into structures are	*
 * probably identical to another register, and the name of the		*
 * register is provided against each of these registers. This		*
 * information needs to be checked carefully				*
 *									*
 *		IIO_ICRB1_A		IIO_ICRB0_A			*
 *		IIO_ICRB1_B		IIO_ICRB0_B			*
 *		IIO_ICRB1_C		IIO_ICRB0_C			*
 *		IIO_ICRB1_D		IIO_ICRB0_D			*
 *		IIO_ICRB1_E		IIO_ICRB0_E			*
 *		IIO_ICRB2_A		IIO_ICRB0_A			*
 *		IIO_ICRB2_B		IIO_ICRB0_B			*
 *		IIO_ICRB2_C		IIO_ICRB0_C			*
 *		IIO_ICRB2_D		IIO_ICRB0_D			*
 *		IIO_ICRB2_E		IIO_ICRB0_E			*
 *		IIO_ICRB3_A		IIO_ICRB0_A			*
 *		IIO_ICRB3_B		IIO_ICRB0_B			*
 *		IIO_ICRB3_C		IIO_ICRB0_C			*
 *		IIO_ICRB3_D		IIO_ICRB0_D			*
 *		IIO_ICRB3_E		IIO_ICRB0_E			*
 *		IIO_ICRB4_A		IIO_ICRB0_A			*
 *		IIO_ICRB4_B		IIO_ICRB0_B			*
 *		IIO_ICRB4_C		IIO_ICRB0_C			*
 *		IIO_ICRB4_D		IIO_ICRB0_D			*
 *		IIO_ICRB4_E		IIO_ICRB0_E			*
 *		IIO_ICRB5_A		IIO_ICRB0_A			*
 *		IIO_ICRB5_B		IIO_ICRB0_B			*
 *		IIO_ICRB5_C		IIO_ICRB0_C			*
 *		IIO_ICRB5_D		IIO_ICRB0_D			*
 *		IIO_ICRB5_E		IIO_ICRB0_E			*
 *		IIO_ICRB6_A		IIO_ICRB0_A			*
 *		IIO_ICRB6_B		IIO_ICRB0_B			*
 *		IIO_ICRB6_C		IIO_ICRB0_C			*
 *		IIO_ICRB6_D		IIO_ICRB0_D			*
 *		IIO_ICRB6_E		IIO_ICRB0_E			*
 *		IIO_ICRB7_A		IIO_ICRB0_A			*
 *		IIO_ICRB7_B		IIO_ICRB0_B			*
 *		IIO_ICRB7_C		IIO_ICRB0_C			*
 *		IIO_ICRB7_D		IIO_ICRB0_D			*
 *		IIO_ICRB7_E		IIO_ICRB0_E			*
 *		IIO_ICRB8_A		IIO_ICRB0_A			*
 *		IIO_ICRB8_B		IIO_ICRB0_B			*
 *		IIO_ICRB8_C		IIO_ICRB0_C			*
 *		IIO_ICRB8_D		IIO_ICRB0_D			*
 *		IIO_ICRB8_E		IIO_ICRB0_E			*
 *		IIO_ICRB9_A		IIO_ICRB0_A			*
 *		IIO_ICRB9_B		IIO_ICRB0_B			*
 *		IIO_ICRB9_C		IIO_ICRB0_C			*
 *		IIO_ICRB9_D		IIO_ICRB0_D			*
 *		IIO_ICRB9_E		IIO_ICRB0_E			*
 *		IIO_ICRBA_A		IIO_ICRB0_A			*
 *		IIO_ICRBA_B		IIO_ICRB0_B			*
 *		IIO_ICRBA_C		IIO_ICRB0_C			*
 *		IIO_ICRBA_D		IIO_ICRB0_D			*
 *		IIO_ICRBA_E		IIO_ICRB0_E			*
 *		IIO_ICRBB_A		IIO_ICRB0_A			*
 *		IIO_ICRBB_B		IIO_ICRB0_B			*
 *		IIO_ICRBB_C		IIO_ICRB0_C			*
 *		IIO_ICRBB_D		IIO_ICRB0_D			*
 *		IIO_ICRBB_E		IIO_ICRB0_E			*
 *		IIO_ICRBC_A		IIO_ICRB0_A			*
 *		IIO_ICRBC_B		IIO_ICRB0_B			*
 *		IIO_ICRBC_C		IIO_ICRB0_C			*
 *		IIO_ICRBC_D		IIO_ICRB0_D			*
 *		IIO_ICRBC_E		IIO_ICRB0_E			*
 *		IIO_ICRBD_A		IIO_ICRB0_A			*
 *		IIO_ICRBD_B		IIO_ICRB0_B			*
 *		IIO_ICRBD_C		IIO_ICRB0_C			*
 *		IIO_ICRBD_D		IIO_ICRB0_D			*
 *		IIO_ICRBD_E		IIO_ICRB0_E			*
 *		IIO_ICRBE_A		IIO_ICRB0_A			*
 *		IIO_ICRBE_B		IIO_ICRB0_B			*
 *		IIO_ICRBE_C		IIO_ICRB0_C			*
 *		IIO_ICRBE_D		IIO_ICRB0_D			*
 *		IIO_ICRBE_E		IIO_ICRB0_E			*
 *									*
 ************************************************************************/

/*
 * Slightly friendlier names for some common registers.
 */
#define IIO_WIDGET              IIO_WID		/* Widget identification */
#define IIO_WIDGET_STAT         IIO_WSTAT	/* Widget status register */
#define IIO_WIDGET_CTRL         IIO_WCR		/* Widget control register */
#define IIO_PROTECT             IIO_ILAPR	/* IO interface protection */
#define IIO_PROTECT_OVRRD       IIO_ILAPO	/* IO protect override */
#define IIO_OUTWIDGET_ACCESS    IIO_IOWA	/* Outbound widget access */
#define IIO_INWIDGET_ACCESS     IIO_IIWA	/* Inbound widget access */
#define IIO_INDEV_ERR_MASK      IIO_IIDEM	/* Inbound device error mask */
#define IIO_LLP_CSR             IIO_ILCSR	/* LLP control and status */
#define IIO_LLP_LOG             IIO_ILLR	/* LLP log */
#define IIO_XTALKCC_TOUT        IIO_IXCC	/* Xtalk credit count timeout */
#define IIO_XTALKTT_TOUT        IIO_IXTT	/* Xtalk tail timeout */
#define IIO_IO_ERR_CLR          IIO_IECLR	/* IO error clear */
#define IIO_IGFX_0 		IIO_IGFX0
#define IIO_IGFX_1 		IIO_IGFX1
#define IIO_IBCT_0		IIO_IBCT0
#define IIO_IBCT_1		IIO_IBCT1
#define IIO_IBLS_0		IIO_IBLS0
#define IIO_IBLS_1		IIO_IBLS1
#define IIO_IBSA_0		IIO_IBSA0
#define IIO_IBSA_1		IIO_IBSA1
#define IIO_IBDA_0		IIO_IBDA0
#define IIO_IBDA_1		IIO_IBDA1
#define IIO_IBNA_0		IIO_IBNA0
#define IIO_IBNA_1		IIO_IBNA1
#define IIO_IBIA_0		IIO_IBIA0
#define IIO_IBIA_1		IIO_IBIA1
#define IIO_IOPRB_0		IIO_IPRB0

#define IIO_PRTE_A(_x)		(IIO_IPRTE0_A + (8 * (_x)))
#define IIO_PRTE_B(_x)		(IIO_IPRTE0_B + (8 * (_x)))
#define IIO_NUM_PRTES		8	/* Total number of PRB table entries */
#define IIO_WIDPRTE_A(x)	IIO_PRTE_A(((x) - 8))	/* widget ID to its PRTE num */
#define IIO_WIDPRTE_B(x)	IIO_PRTE_B(((x) - 8))	/* widget ID to its PRTE num */

#define IIO_NUM_IPRBS 		9

#define IIO_LLP_CSR_IS_UP		0x00002000
#define IIO_LLP_CSR_LLP_STAT_MASK       0x00003000
#define IIO_LLP_CSR_LLP_STAT_SHFT       12

#define IIO_LLP_CB_MAX  0xffff	/* in ILLR CB_CNT, Max Check Bit errors */
#define IIO_LLP_SN_MAX  0xffff	/* in ILLR SN_CNT, Max Sequence Number errors */

/* key to IIO_PROTECT_OVRRD */
#define IIO_PROTECT_OVRRD_KEY   0x53474972756c6573ull	/* "SGIrules" */

/* BTE register names */
#define IIO_BTE_STAT_0          IIO_IBLS_0	/* Also BTE length/status 0 */
#define IIO_BTE_SRC_0           IIO_IBSA_0	/* Also BTE source address  0 */
#define IIO_BTE_DEST_0          IIO_IBDA_0	/* Also BTE dest. address 0 */
#define IIO_BTE_CTRL_0          IIO_IBCT_0	/* Also BTE control/terminate 0 */
#define IIO_BTE_NOTIFY_0        IIO_IBNA_0	/* Also BTE notification 0 */
#define IIO_BTE_INT_0           IIO_IBIA_0	/* Also BTE interrupt 0 */
#define IIO_BTE_OFF_0           0	/* Base offset from BTE 0 regs. */
#define IIO_BTE_OFF_1   	(IIO_IBLS_1 - IIO_IBLS_0)	/* Offset from base to BTE 1 */

/* BTE register offsets from base */
#define BTEOFF_STAT             0
#define BTEOFF_SRC      	(IIO_BTE_SRC_0 - IIO_BTE_STAT_0)
#define BTEOFF_DEST     	(IIO_BTE_DEST_0 - IIO_BTE_STAT_0)
#define BTEOFF_CTRL     	(IIO_BTE_CTRL_0 - IIO_BTE_STAT_0)
#define BTEOFF_NOTIFY   	(IIO_BTE_NOTIFY_0 - IIO_BTE_STAT_0)
#define BTEOFF_INT      	(IIO_BTE_INT_0 - IIO_BTE_STAT_0)

/* names used in shub diags */
#define IIO_BASE_BTE0   IIO_IBLS_0
#define IIO_BASE_BTE1   IIO_IBLS_1

/*
 * Macro which takes the widget number, and returns the
 * IO PRB address of that widget.
 * value _x is expected to be a widget number in the range
 * 0, 8 - 0xF
 */
#define IIO_IOPRB(_x)	(IIO_IOPRB_0 + ( ( (_x) < HUB_WIDGET_ID_MIN ? \
                	(_x) : \
                	(_x) - (HUB_WIDGET_ID_MIN-1)) << 3) )

/* GFX Flow Control Node/Widget Register */
#define IIO_IGFX_W_NUM_BITS	4	/* size of widget num field */
#define IIO_IGFX_W_NUM_MASK	((1<<IIO_IGFX_W_NUM_BITS)-1)
#define IIO_IGFX_W_NUM_SHIFT	0
#define IIO_IGFX_PI_NUM_BITS	1	/* size of PI num field */
#define IIO_IGFX_PI_NUM_MASK	((1<<IIO_IGFX_PI_NUM_BITS)-1)
#define IIO_IGFX_PI_NUM_SHIFT	4
#define IIO_IGFX_N_NUM_BITS	8	/* size of node num field */
#define IIO_IGFX_N_NUM_MASK	((1<<IIO_IGFX_N_NUM_BITS)-1)
#define IIO_IGFX_N_NUM_SHIFT	5
#define IIO_IGFX_P_NUM_BITS	1	/* size of processor num field */
#define IIO_IGFX_P_NUM_MASK	((1<<IIO_IGFX_P_NUM_BITS)-1)
#define IIO_IGFX_P_NUM_SHIFT	16
#define IIO_IGFX_INIT(widget, pi, node, cpu)				(\
	(((widget) & IIO_IGFX_W_NUM_MASK) << IIO_IGFX_W_NUM_SHIFT) |	 \
	(((pi)     & IIO_IGFX_PI_NUM_MASK)<< IIO_IGFX_PI_NUM_SHIFT)|	 \
	(((node)   & IIO_IGFX_N_NUM_MASK) << IIO_IGFX_N_NUM_SHIFT) |	 \
	(((cpu)    & IIO_IGFX_P_NUM_MASK) << IIO_IGFX_P_NUM_SHIFT))

/* Scratch registers (all bits available) */
#define IIO_SCRATCH_REG0        IIO_ISCR0
#define IIO_SCRATCH_REG1        IIO_ISCR1
#define IIO_SCRATCH_MASK        0xffffffffffffffffUL

#define IIO_SCRATCH_BIT0_0      0x0000000000000001UL
#define IIO_SCRATCH_BIT0_1      0x0000000000000002UL
#define IIO_SCRATCH_BIT0_2      0x0000000000000004UL
#define IIO_SCRATCH_BIT0_3      0x0000000000000008UL
#define IIO_SCRATCH_BIT0_4      0x0000000000000010UL
#define IIO_SCRATCH_BIT0_5      0x0000000000000020UL
#define IIO_SCRATCH_BIT0_6      0x0000000000000040UL
#define IIO_SCRATCH_BIT0_7      0x0000000000000080UL
#define IIO_SCRATCH_BIT0_8      0x0000000000000100UL
#define IIO_SCRATCH_BIT0_9      0x0000000000000200UL
#define IIO_SCRATCH_BIT0_A      0x0000000000000400UL

#define IIO_SCRATCH_BIT1_0      0x0000000000000001UL
#define IIO_SCRATCH_BIT1_1      0x0000000000000002UL
/* IO Translation Table Entries */
#define IIO_NUM_ITTES   7	/* ITTEs numbered 0..6 */
					/* Hw manuals number them 1..7! */
/*
 * IIO_IMEM Register fields.
 */
#define IIO_IMEM_W0ESD  0x1UL	/* Widget 0 shut down due to error */
#define IIO_IMEM_B0ESD	(1UL << 4)	/* BTE 0 shut down due to error */
#define IIO_IMEM_B1ESD	(1UL << 8)	/* BTE 1 Shut down due to error */

/*
 * As a permanent workaround for a bug in the PI side of the shub, we've
 * redefined big window 7 as small window 0.
 XXX does this still apply for SN1??
 */
#define HUB_NUM_BIG_WINDOW	(IIO_NUM_ITTES - 1)

/*
 * Use the top big window as a surrogate for the first small window
 */
#define SWIN0_BIGWIN            HUB_NUM_BIG_WINDOW

#define ILCSR_WARM_RESET        0x100

/*
 * CRB manipulation macros
 *	The CRB macros are slightly complicated, since there are up to
 *	four registers associated with each CRB entry.
 */
#define IIO_NUM_CRBS            15	/* Number of CRBs */
#define IIO_NUM_PC_CRBS         4	/* Number of partial cache CRBs */
#define IIO_ICRB_OFFSET         8
#define IIO_ICRB_0              IIO_ICRB0_A
#define IIO_ICRB_ADDR_SHFT	2	/* Shift to get proper address */
/* XXX - This is now tuneable:
        #define IIO_FIRST_PC_ENTRY 12
 */

#define IIO_ICRB_A(_x)	((u64)(IIO_ICRB_0 + (6 * IIO_ICRB_OFFSET * (_x))))
#define IIO_ICRB_B(_x)	((u64)((char *)IIO_ICRB_A(_x) + 1*IIO_ICRB_OFFSET))
#define IIO_ICRB_C(_x)	((u64)((char *)IIO_ICRB_A(_x) + 2*IIO_ICRB_OFFSET))
#define IIO_ICRB_D(_x)	((u64)((char *)IIO_ICRB_A(_x) + 3*IIO_ICRB_OFFSET))
#define IIO_ICRB_E(_x)	((u64)((char *)IIO_ICRB_A(_x) + 4*IIO_ICRB_OFFSET))

#define TNUM_TO_WIDGET_DEV(_tnum)	(_tnum & 0x7)

/*
 * values for "ecode" field
 */
#define IIO_ICRB_ECODE_DERR     0	/* Directory error due to IIO access */
#define IIO_ICRB_ECODE_PERR     1	/* Poison error on IO access */
#define IIO_ICRB_ECODE_WERR     2	/* Write error by IIO access
					 * e.g. WINV to a Read only line. */
#define IIO_ICRB_ECODE_AERR     3	/* Access error caused by IIO access */
#define IIO_ICRB_ECODE_PWERR    4	/* Error on partial write */
#define IIO_ICRB_ECODE_PRERR    5	/* Error on partial read  */
#define IIO_ICRB_ECODE_TOUT     6	/* CRB timeout before deallocating */
#define IIO_ICRB_ECODE_XTERR    7	/* Incoming xtalk pkt had error bit */

/*
 * Values for field imsgtype
 */
#define IIO_ICRB_IMSGT_XTALK    0	/* Incoming message from Xtalk */
#define IIO_ICRB_IMSGT_BTE      1	/* Incoming message from BTE    */
#define IIO_ICRB_IMSGT_SN1NET   2	/* Incoming message from SN1 net */
#define IIO_ICRB_IMSGT_CRB      3	/* Incoming message from CRB ???  */

/*
 * values for field initiator.
 */
#define IIO_ICRB_INIT_XTALK     0	/* Message originated in xtalk  */
#define IIO_ICRB_INIT_BTE0      0x1	/* Message originated in BTE 0  */
#define IIO_ICRB_INIT_SN1NET    0x2	/* Message originated in SN1net */
#define IIO_ICRB_INIT_CRB       0x3	/* Message originated in CRB ?  */
#define IIO_ICRB_INIT_BTE1      0x5	/* MEssage originated in BTE 1  */

/*
 * Number of credits Hub widget has while sending req/response to
 * xbow.
 * Value of 3 is required by Xbow 1.1
 * We may be able to increase this to 4 with Xbow 1.2.
 */
#define		   HUBII_XBOW_CREDIT       3
#define		   HUBII_XBOW_REV2_CREDIT  4

/*
 * Number of credits that xtalk devices should use when communicating
 * with a SHub (depth of SHub's queue).
 */
#define HUB_CREDIT 4

/*
 * Some IIO_PRB fields
 */
#define IIO_PRB_MULTI_ERR	(1LL << 63)
#define IIO_PRB_SPUR_RD		(1LL << 51)
#define IIO_PRB_SPUR_WR		(1LL << 50)
#define IIO_PRB_RD_TO		(1LL << 49)
#define IIO_PRB_ERROR		(1LL << 48)

/*************************************************************************

 Some of the IIO field masks and shifts are defined here.
 This is in order to maintain compatibility in SN0 and SN1 code
 
**************************************************************************/

/*
 * ICMR register fields
 * (Note: the IIO_ICMR_P_CNT and IIO_ICMR_PC_VLD from Hub are not
 * present in SHub)
 */

#define IIO_ICMR_CRB_VLD_SHFT   20
#define IIO_ICMR_CRB_VLD_MASK	(0x7fffUL << IIO_ICMR_CRB_VLD_SHFT)

#define IIO_ICMR_FC_CNT_SHFT    16
#define IIO_ICMR_FC_CNT_MASK	(0xf << IIO_ICMR_FC_CNT_SHFT)

#define IIO_ICMR_C_CNT_SHFT     4
#define IIO_ICMR_C_CNT_MASK	(0xf << IIO_ICMR_C_CNT_SHFT)

#define IIO_ICMR_PRECISE	(1UL << 52)
#define IIO_ICMR_CLR_RPPD	(1UL << 13)
#define IIO_ICMR_CLR_RQPD	(1UL << 12)

/*
 * IIO PIO Deallocation register field masks : (IIO_IPDR)
 XXX present but not needed in bedrock?  See the manual.
 */
#define IIO_IPDR_PND    	(1 << 4)

/*
 * IIO CRB deallocation register field masks: (IIO_ICDR)
 */
#define IIO_ICDR_PND    	(1 << 4)

/* 
 * IO BTE Length/Status (IIO_IBLS) register bit field definitions
 */
#define IBLS_BUSY		(0x1UL << 20)
#define IBLS_ERROR_SHFT		16
#define IBLS_ERROR		(0x1UL << IBLS_ERROR_SHFT)
#define IBLS_LENGTH_MASK	0xffff

/*
 * IO BTE Control/Terminate register (IBCT) register bit field definitions
 */
#define IBCT_POISON		(0x1UL << 8)
#define IBCT_NOTIFY		(0x1UL << 4)
#define IBCT_ZFIL_MODE		(0x1UL << 0)

/*
 * IIO Incoming Error Packet Header (IIO_IIEPH1/IIO_IIEPH2)
 */
#define IIEPH1_VALID		(1UL << 44)
#define IIEPH1_OVERRUN		(1UL << 40)
#define IIEPH1_ERR_TYPE_SHFT	32
#define IIEPH1_ERR_TYPE_MASK	0xf
#define IIEPH1_SOURCE_SHFT	20
#define IIEPH1_SOURCE_MASK	11
#define IIEPH1_SUPPL_SHFT	8
#define IIEPH1_SUPPL_MASK	11
#define IIEPH1_CMD_SHFT		0
#define IIEPH1_CMD_MASK		7

#define IIEPH2_TAIL		(1UL << 40)
#define IIEPH2_ADDRESS_SHFT	0
#define IIEPH2_ADDRESS_MASK	38

#define IIEPH1_ERR_SHORT_REQ	2
#define IIEPH1_ERR_SHORT_REPLY	3
#define IIEPH1_ERR_LONG_REQ	4
#define IIEPH1_ERR_LONG_REPLY	5

/*
 * IO Error Clear register bit field definitions
 */
#define IECLR_PI1_FWD_INT	(1UL << 31)	/* clear PI1_FORWARD_INT in iidsr */
#define IECLR_PI0_FWD_INT	(1UL << 30)	/* clear PI0_FORWARD_INT in iidsr */
#define IECLR_SPUR_RD_HDR	(1UL << 29)	/* clear valid bit in ixss reg */
#define IECLR_BTE1		(1UL << 18)	/* clear bte error 1 */
#define IECLR_BTE0		(1UL << 17)	/* clear bte error 0 */
#define IECLR_CRAZY		(1UL << 16)	/* clear crazy bit in wstat reg */
#define IECLR_PRB_F		(1UL << 15)	/* clear err bit in PRB_F reg */
#define IECLR_PRB_E		(1UL << 14)	/* clear err bit in PRB_E reg */
#define IECLR_PRB_D		(1UL << 13)	/* clear err bit in PRB_D reg */
#define IECLR_PRB_C		(1UL << 12)	/* clear err bit in PRB_C reg */
#define IECLR_PRB_B		(1UL << 11)	/* clear err bit in PRB_B reg */
#define IECLR_PRB_A		(1UL << 10)	/* clear err bit in PRB_A reg */
#define IECLR_PRB_9		(1UL << 9)	/* clear err bit in PRB_9 reg */
#define IECLR_PRB_8		(1UL << 8)	/* clear err bit in PRB_8 reg */
#define IECLR_PRB_0		(1UL << 0)	/* clear err bit in PRB_0 reg */

/*
 * IIO CRB control register Fields: IIO_ICCR 
 */
#define	IIO_ICCR_PENDING	0x10000
#define	IIO_ICCR_CMD_MASK	0xFF
#define	IIO_ICCR_CMD_SHFT	7
#define	IIO_ICCR_CMD_NOP	0x0	/* No Op */
#define	IIO_ICCR_CMD_WAKE	0x100	/* Reactivate CRB entry and process */
#define	IIO_ICCR_CMD_TIMEOUT	0x200	/* Make CRB timeout & mark invalid */
#define	IIO_ICCR_CMD_EJECT	0x400	/* Contents of entry written to memory
					 * via a WB
					 */
#define	IIO_ICCR_CMD_FLUSH	0x800

/*
 *
 * CRB Register description.
 *
 * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING
 * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING
 * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING
 * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING
 * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING * WARNING
 *
 * Many of the fields in CRB are status bits used by hardware
 * for implementation of the protocol. It's very dangerous to
 * mess around with the CRB registers.
 *
 * It's OK to read the CRB registers and try to make sense out of the
 * fields in CRB.
 *
 * Updating CRB requires all activities in Hub IIO to be quiesced.
 * otherwise, a write to CRB could corrupt other CRB entries.
 * CRBs are here only as a back door peek to shub IIO's status.
 * Quiescing implies  no dmas no PIOs
 * either directly from the cpu or from sn0net.
 * this is not something that can be done easily. So, AVOID updating
 * CRBs.
 */

/*
 * Easy access macros for CRBs, all 5 registers (A-E)
 */
typedef ii_icrb0_a_u_t icrba_t;
#define a_sidn		ii_icrb0_a_fld_s.ia_sidn
#define a_tnum		ii_icrb0_a_fld_s.ia_tnum
#define a_addr          ii_icrb0_a_fld_s.ia_addr
#define a_valid         ii_icrb0_a_fld_s.ia_vld
#define a_iow           ii_icrb0_a_fld_s.ia_iow
#define a_regvalue	ii_icrb0_a_regval

typedef ii_icrb0_b_u_t icrbb_t;
#define b_use_old       ii_icrb0_b_fld_s.ib_use_old
#define b_imsgtype      ii_icrb0_b_fld_s.ib_imsgtype
#define b_imsg          ii_icrb0_b_fld_s.ib_imsg
#define b_initiator     ii_icrb0_b_fld_s.ib_init
#define b_exc           ii_icrb0_b_fld_s.ib_exc
#define b_ackcnt        ii_icrb0_b_fld_s.ib_ack_cnt
#define b_resp          ii_icrb0_b_fld_s.ib_resp
#define b_ack           ii_icrb0_b_fld_s.ib_ack
#define b_hold          ii_icrb0_b_fld_s.ib_hold
#define b_wb            ii_icrb0_b_fld_s.ib_wb
#define b_intvn         ii_icrb0_b_fld_s.ib_intvn
#define b_stall_ib      ii_icrb0_b_fld_s.ib_stall_ib
#define b_stall_int     ii_icrb0_b_fld_s.ib_stall__intr
#define b_stall_bte_0   ii_icrb0_b_fld_s.ib_stall__bte_0
#define b_stall_bte_1   ii_icrb0_b_fld_s.ib_stall__bte_1
#define b_error         ii_icrb0_b_fld_s.ib_error
#define b_ecode         ii_icrb0_b_fld_s.ib_errcode
#define b_lnetuce       ii_icrb0_b_fld_s.ib_ln_uce
#define b_mark          ii_icrb0_b_fld_s.ib_mark
#define b_xerr          ii_icrb0_b_fld_s.ib_xt_err
#define b_regvalue	ii_icrb0_b_regval

typedef ii_icrb0_c_u_t icrbc_t;
#define c_suppl         ii_icrb0_c_fld_s.ic_suppl
#define c_barrop        ii_icrb0_c_fld_s.ic_bo
#define c_doresp        ii_icrb0_c_fld_s.ic_resprqd
#define c_gbr           ii_icrb0_c_fld_s.ic_gbr
#define c_btenum        ii_icrb0_c_fld_s.ic_bte_num
#define c_cohtrans      ii_icrb0_c_fld_s.ic_ct
#define c_xtsize        ii_icrb0_c_fld_s.ic_size
#define c_source        ii_icrb0_c_fld_s.ic_source
#define c_regvalue	ii_icrb0_c_regval

typedef ii_icrb0_d_u_t icrbd_t;
#define d_sleep         ii_icrb0_d_fld_s.id_sleep
#define d_pricnt        ii_icrb0_d_fld_s.id_pr_cnt
#define d_pripsc        ii_icrb0_d_fld_s.id_pr_psc
#define d_bteop         ii_icrb0_d_fld_s.id_bte_op
#define d_bteaddr       ii_icrb0_d_fld_s.id_pa_be	/* ic_pa_be fld has 2 names */
#define d_benable       ii_icrb0_d_fld_s.id_pa_be	/* ic_pa_be fld has 2 names */
#define d_regvalue	ii_icrb0_d_regval

typedef ii_icrb0_e_u_t icrbe_t;
#define icrbe_ctxtvld   ii_icrb0_e_fld_s.ie_cvld
#define icrbe_toutvld   ii_icrb0_e_fld_s.ie_tvld
#define icrbe_context   ii_icrb0_e_fld_s.ie_context
#define icrbe_timeout   ii_icrb0_e_fld_s.ie_timeout
#define e_regvalue	ii_icrb0_e_regval

/* Number of widgets supported by shub */
#define HUB_NUM_WIDGET          9
#define HUB_WIDGET_ID_MIN       0x8
#define HUB_WIDGET_ID_MAX       0xf

#define HUB_WIDGET_PART_NUM     0xc120
#define MAX_HUBS_PER_XBOW       2

/* A few more #defines for backwards compatibility */
#define iprb_t          ii_iprb0_u_t
#define iprb_regval     ii_iprb0_regval
#define iprb_mult_err	ii_iprb0_fld_s.i_mult_err
#define iprb_spur_rd	ii_iprb0_fld_s.i_spur_rd
#define iprb_spur_wr	ii_iprb0_fld_s.i_spur_wr
#define iprb_rd_to	ii_iprb0_fld_s.i_rd_to
#define iprb_ovflow     ii_iprb0_fld_s.i_of_cnt
#define iprb_error      ii_iprb0_fld_s.i_error
#define iprb_ff         ii_iprb0_fld_s.i_f
#define iprb_mode       ii_iprb0_fld_s.i_m
#define iprb_bnakctr    ii_iprb0_fld_s.i_nb
#define iprb_anakctr    ii_iprb0_fld_s.i_na
#define iprb_xtalkctr   ii_iprb0_fld_s.i_c

#define LNK_STAT_WORKING        0x2		/* LLP is working */

#define IIO_WSTAT_ECRAZY	(1ULL << 32)	/* Hub gone crazy */
#define IIO_WSTAT_TXRETRY	(1ULL << 9)	/* Hub Tx Retry timeout */
#define IIO_WSTAT_TXRETRY_MASK  0x7F		/* should be 0xFF?? */
#define IIO_WSTAT_TXRETRY_SHFT  16
#define IIO_WSTAT_TXRETRY_CNT(w)	(((w) >> IIO_WSTAT_TXRETRY_SHFT) & \
                          		IIO_WSTAT_TXRETRY_MASK)

/* Number of II perf. counters we can multiplex at once */

#define IO_PERF_SETS	32

/* Bit for the widget in inbound access register */
#define IIO_IIWA_WIDGET(_w)	((u64)(1ULL << _w))
/* Bit for the widget in outbound access register */
#define IIO_IOWA_WIDGET(_w)	((u64)(1ULL << _w))

/* NOTE: The following define assumes that we are going to get
 * widget numbers from 8 thru F and the device numbers within
 * widget from 0 thru 7.
 */
#define IIO_IIDEM_WIDGETDEV_MASK(w, d)	((u64)(1ULL << (8 * ((w) - 8) + (d))))

/* IO Interrupt Destination Register */
#define IIO_IIDSR_SENT_SHIFT    28
#define IIO_IIDSR_SENT_MASK     0x30000000
#define IIO_IIDSR_ENB_SHIFT     24
#define IIO_IIDSR_ENB_MASK      0x01000000
#define IIO_IIDSR_NODE_SHIFT    9
#define IIO_IIDSR_NODE_MASK     0x000ff700
#define IIO_IIDSR_PI_ID_SHIFT   8
#define IIO_IIDSR_PI_ID_MASK    0x00000100
#define IIO_IIDSR_LVL_SHIFT     0
#define IIO_IIDSR_LVL_MASK      0x000000ff

/* Xtalk timeout threshold register (IIO_IXTT) */
#define IXTT_RRSP_TO_SHFT	55	/* read response timeout */
#define IXTT_RRSP_TO_MASK	(0x1FULL << IXTT_RRSP_TO_SHFT)
#define IXTT_RRSP_PS_SHFT	32	/* read responsed TO prescalar */
#define IXTT_RRSP_PS_MASK	(0x7FFFFFULL << IXTT_RRSP_PS_SHFT)
#define IXTT_TAIL_TO_SHFT	0	/* tail timeout counter threshold */
#define IXTT_TAIL_TO_MASK	(0x3FFFFFFULL << IXTT_TAIL_TO_SHFT)

/*
 * The IO LLP control status register and widget control register
 */

typedef union hubii_wcr_u {
	u64 wcr_reg_value;
	struct {
		u64 wcr_widget_id:4,	/* LLP crossbar credit */
		 wcr_tag_mode:1,	/* Tag mode */
		 wcr_rsvd1:8,	/* Reserved */
		 wcr_xbar_crd:3,	/* LLP crossbar credit */
		 wcr_f_bad_pkt:1,	/* Force bad llp pkt enable */
		 wcr_dir_con:1,	/* widget direct connect */
		 wcr_e_thresh:5,	/* elasticity threshold */
		 wcr_rsvd:41;	/* unused */
	} wcr_fields_s;
} hubii_wcr_t;

#define iwcr_dir_con    wcr_fields_s.wcr_dir_con

/* The structures below are defined to extract and modify the ii
performance registers */

/* io_perf_sel allows the caller to specify what tests will be
   performed */

typedef union io_perf_sel {
	u64 perf_sel_reg;
	struct {
		u64 perf_ippr0:4, perf_ippr1:4, perf_icct:8, perf_rsvd:48;
	} perf_sel_bits;
} io_perf_sel_t;

/* io_perf_cnt is to extract the count from the shub registers. Due to
   hardware problems there is only one counter, not two. */

typedef union io_perf_cnt {
	u64 perf_cnt;
	struct {
		u64 perf_cnt:20, perf_rsvd2:12, perf_rsvd1:32;
	} perf_cnt_bits;

} io_perf_cnt_t;

typedef union iprte_a {
	u64 entry;
	struct {
		u64 i_rsvd_1:3;
		u64 i_addr:38;
		u64 i_init:3;
		u64 i_source:8;
		u64 i_rsvd:2;
		u64 i_widget:4;
		u64 i_to_cnt:5;
		u64 i_vld:1;
	} iprte_fields;
} iprte_a_t;

#endif				/* _ASM_IA64_SN_SHUBIO_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * Copyright 2012 Tilera Corporation. All Rights Reserved.
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation, version 2.
 *
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
 *   NON INFRINGEMENT.  See the GNU General Public License for
 *   more details.
 */

#ifndef _GXIO_MPIPE_H_
#define _GXIO_MPIPE_H_

/*
 *
 * An API for allocating, configuring, and manipulating mPIPE hardware
 * resources.
 */

#include <gxio/common.h>
#include <gxio/dma_queue.h>

#include <linux/time.h>

#include <arch/mpipe_def.h>
#include <arch/mpipe_shm.h>

#include <hv/drv_mpipe_intf.h>
#include <hv/iorpc.h>

/*
 *
 * The TILE-Gx mPIPE&tm; shim provides Ethernet connectivity, packet
 * classification, and packet load balancing services.  The
 * gxio_mpipe_ API, declared in <gxio/mpipe.h>, allows applications to
 * allocate mPIPE IO channels, configure packet distribution
 * parameters, and send and receive Ethernet packets.  The API is
 * designed to be a minimal wrapper around the mPIPE hardware, making
 * system calls only where necessary to preserve inter-process
 * protection guarantees.
 *
 * The APIs described below allow the programmer to allocate and
 * configure mPIPE resources.  As described below, the mPIPE is a
 * single shared hardware device that provides partitionable resources
 * that are shared between all applications in the system.  The
 * gxio_mpipe_ API allows userspace code to make resource request
 * calls to the hypervisor, which in turns keeps track of the
 * resources in use by all applications, maintains protection
 * guarantees, and resets resources upon application shutdown.
 *
 * We strongly recommend reading the mPIPE section of the IO Device
 * Guide (UG404) before working with this API.  Most functions in the
 * gxio_mpipe_ API are directly analogous to hardware interfaces and
 * the documentation assumes that the reader understands those
 * hardware interfaces.
 *
 * @section mpipe__ingress mPIPE Ingress Hardware Resources
 *
 * The mPIPE ingress hardware provides extensive hardware offload for
 * tasks like packet header parsing, load balancing, and memory
 * management.  This section provides a brief introduction to the
 * hardware components and the gxio_mpipe_ calls used to manage them;
 * see the IO Device Guide for a much more detailed description of the
 * mPIPE's capabilities.
 *
 * When a packet arrives at one of the mPIPE's Ethernet MACs, it is
 * assigned a channel number indicating which MAC received it.  It
 * then proceeds through the following hardware pipeline:
 *
 * @subsection mpipe__classification Classification
 *
 * A set of classification processors run header parsing code on each
 * incoming packet, extracting information including the destination
 * MAC address, VLAN, Ethernet type, and five-tuple hash.  Some of
 * this information is then used to choose which buffer stack will be
 * used to hold the packet, and which bucket will be used by the load
 * balancer to determine which application will receive the packet.
 *
 * The rules by which the buffer stack and bucket are chosen can be
 * configured via the @ref gxio_mpipe_classifier API.  A given app can
 * specify multiple rules, each one specifying a bucket range, and a
 * set of buffer stacks, to be used for packets matching the rule.
 * Each rule can optionally specify a restricted set of channels,
 * VLANs, and/or dMACs, in which it is interested.  By default, a
 * given rule starts out matching all channels associated with the
 * mPIPE context's set of open links; all VLANs; and all dMACs.
 * Subsequent restrictions can then be added.
 *
 * @subsection mpipe__load_balancing Load Balancing
 *
 * The mPIPE load balancer is responsible for choosing the NotifRing
 * to which the packet will be delivered.  This decision is based on
 * the bucket number indicated by the classification program.  In
 * general, the bucket number is based on some number of low bits of
 * the packet's flow hash (applications that aren't interested in flow
 * hashing use a single bucket).  Each load balancer bucket keeps a
 * record of the NotifRing to which packets directed to that bucket
 * are currently being delivered.  Based on the bucket's load
 * balancing mode (@ref gxio_mpipe_bucket_mode_t), the load balancer
 * either forwards the packet to the previously assigned NotifRing or
 * decides to choose a new NotifRing.  If a new NotifRing is required,
 * the load balancer chooses the least loaded ring in the NotifGroup
 * associated with the bucket.
 *
 * The load balancer is a shared resource.  Each application needs to
 * explicitly allocate NotifRings, NotifGroups, and buckets, using
 * gxio_mpipe_alloc_notif_rings(), gxio_mpipe_alloc_notif_groups(),
 * and gxio_mpipe_alloc_buckets().  Then the application needs to
 * configure them using gxio_mpipe_init_notif_ring() and
 * gxio_mpipe_init_notif_group_and_buckets().
 *
 * @subsection mpipe__buffers Buffer Selection and Packet Delivery
 *
 * Once the load balancer has chosen the destination NotifRing, the
 * mPIPE DMA engine pops at least one buffer off of the 'buffer stack'
 * chosen by the classification program and DMAs the packet data into
 * that buffer.  Each buffer stack provides a hardware-accelerated
 * stack of data buffers with the same size.  If the packet data is
 * larger than the buffers provided by the chosen buffer stack, the
 * mPIPE hardware pops off multiple buffers and chains the packet data
 * through a multi-buffer linked list.  Once the packet data is
 * delivered to the buffer(s), the mPIPE hardware writes the
 * ::gxio_mpipe_idesc_t metadata object (calculated by the classifier)
 * into the NotifRing and increments the number of packets delivered
 * to that ring.
 *
 * Applications can push buffers onto a buffer stack by calling
 * gxio_mpipe_push_buffer() or by egressing a packet with the
 * ::gxio_mpipe_edesc_t::hwb bit set, indicating that the egressed
 * buffers should be returned to the stack.
 *
 * Applications can allocate and initialize buffer stacks with the
 * gxio_mpipe_alloc_buffer_stacks() and gxio_mpipe_init_buffer_stack()
 * APIs.
 *
 * The application must also register the memory pages that will hold
 * packets.  This requires calling gxio_mpipe_register_page() for each
 * memory page that will hold packets allocated by the application for
 * a given buffer stack.  Since each buffer stack is limited to 16
 * registered pages, it may be necessary to use huge pages, or even
 * extremely huge pages, to hold all the buffers.
 *
 * @subsection mpipe__iqueue NotifRings
 *
 * Each NotifRing is a region of shared memory, allocated by the
 * application, to which the mPIPE delivers packet descriptors
 * (::gxio_mpipe_idesc_t).  The application can allocate them via
 * gxio_mpipe_alloc_notif_rings().  The application can then either
 * explicitly initialize them with gxio_mpipe_init_notif_ring() and
 * then read from them manually, or can make use of the convenience
 * wrappers provided by @ref gxio_mpipe_wrappers.
 *
 * @section mpipe__egress mPIPE Egress Hardware
 *
 * Applications use eDMA rings to queue packets for egress.  The
 * application can allocate them via gxio_mpipe_alloc_edma_rings().
 * The application can then either explicitly initialize them with
 * gxio_mpipe_init_edma_ring() and then write to them manually, or
 * can make use of the convenience wrappers provided by
 * @ref gxio_mpipe_wrappers.
 *
 * @section gxio__shortcomings Plans for Future API Revisions
 *
 * The API defined here is only an initial version of the mPIPE API.
 * Future plans include:
 *
 * - Higher level wrapper functions to provide common initialization
 * patterns.  This should help users start writing mPIPE programs
 * without having to learn the details of the hardware.
 *
 * - Support for reset and deallocation of resources, including
 * cleanup upon application shutdown.
 *
 * - Support for calling these APIs in the BME.
 *
 * - Support for IO interrupts.
 *
 * - Clearer definitions of thread safety guarantees.
 *
 * @section gxio__mpipe_examples Examples
 *
 * See the following mPIPE example programs for more information about
 * allocating mPIPE resources and using them in real applications:
 *
 * - @ref mpipe/ingress/app.c : Receiving packets.
 *
 * - @ref mpipe/forward/app.c : Forwarding packets.
 *
 * Note that there are several more examples.
 */

/* Flags that can be passed to resource allocation functions. */
enum gxio_mpipe_alloc_flags_e {
	/* Require an allocation to start at a specified resource index. */
	GXIO_MPIPE_ALLOC_FIXED = HV_MPIPE_ALLOC_FIXED,
};

/* Flags that can be passed to memory registration functions. */
enum gxio_mpipe_mem_flags_e {
	/* Do not fill L3 when writing, and invalidate lines upon egress. */
	GXIO_MPIPE_MEM_FLAG_NT_HINT = IORPC_MEM_BUFFER_FLAG_NT_HINT,

	/* L3 cache fills should only populate IO cache ways. */
	GXIO_MPIPE_MEM_FLAG_IO_PIN = IORPC_MEM_BUFFER_FLAG_IO_PIN,
};

/* An ingress packet descriptor.  When a packet arrives, the mPIPE
 * hardware generates this structure and writes it into a NotifRing.
 */
typedef MPIPE_PDESC_t gxio_mpipe_idesc_t;

/* An egress command descriptor.  Applications write this structure
 * into eDMA rings and the hardware performs the indicated operation
 * (normally involving egressing some bytes).  Note that egressing a
 * single packet may involve multiple egress command descriptors.
 */
typedef MPIPE_EDMA_DESC_t gxio_mpipe_edesc_t;

/*
 * Max # of mpipe instances. 2 currently.
 */
#define GXIO_MPIPE_INSTANCE_MAX  HV_MPIPE_INSTANCE_MAX

#define NR_MPIPE_MAX   GXIO_MPIPE_INSTANCE_MAX

/* Get the "va" field from an "idesc".
 *
 * This is the address at which the ingress hardware copied the first
 * byte of the packet.
 *
 * If the classifier detected a custom header, then this will point to
 * the custom header, and gxio_mpipe_idesc_get_l2_start() will point
 * to the actual L2 header.
 *
 * Note that this value may be misleading if "idesc->be" is set.
 *
 * @param idesc An ingress packet descriptor.
 */
static inline unsigned char *gxio_mpipe_idesc_get_va(gxio_mpipe_idesc_t *idesc)
{
	return (unsigned char *)(long)idesc->va;
}

/* Get the "xfer_size" from an "idesc".
 *
 * This is the actual number of packet bytes transferred into memory
 * by the hardware.
 *
 * Note that this value may be misleading if "idesc->be" is set.
 *
 * @param idesc An ingress packet descriptor.
 *
 * ISSUE: Is this the best name for this?
 * FIXME: Add more docs about chaining, clipping, etc.
 */
static inline unsigned int gxio_mpipe_idesc_get_xfer_size(gxio_mpipe_idesc_t
							  *idesc)
{
	return idesc->l2_size;
}

/* Get the "l2_offset" from an "idesc".
 *
 * Extremely customized classifiers might not support this function.
 *
 * This is the number of bytes between the "va" and the L2 header.
 *
 * The L2 header consists of a destination mac address, a source mac
 * address, and an initial ethertype.  Various initial ethertypes
 * allow encoding extra information in the L2 header, often including
 * a vlan, and/or a new ethertype.
 *
 * Note that the "l2_offset" will be non-zero if (and only if) the
 * classifier processed a custom header for the packet.
 *
 * @param idesc An ingress packet descriptor.
 */
static inline uint8_t gxio_mpipe_idesc_get_l2_offset(gxio_mpipe_idesc_t *idesc)
{
	return (idesc->custom1 >> 32) & 0xFF;
}

/* Get the "l2_start" from an "idesc".
 *
 * This is simply gxio_mpipe_idesc_get_va() plus
 * gxio_mpipe_idesc_get_l2_offset().
 *
 * @param idesc An ingress packet descriptor.
 */
static inline unsigned char *gxio_mpipe_idesc_get_l2_start(gxio_mpipe_idesc_t
							   *idesc)
{
	unsigned char *va = gxio_mpipe_idesc_get_va(idesc);
	return va + gxio_mpipe_idesc_get_l2_offset(idesc);
}

/* Get the "l2_length" from an "idesc".
 *
 * This is simply gxio_mpipe_idesc_get_xfer_size() minus
 * gxio_mpipe_idesc_get_l2_offset().
 *
 * @param idesc An ingress packet descriptor.
 */
static inline unsigned int gxio_mpipe_idesc_get_l2_length(gxio_mpipe_idesc_t
							  *idesc)
{
	unsigned int xfer_size = idesc->l2_size;
	return xfer_size - gxio_mpipe_idesc_get_l2_offset(idesc);
}

/* A context object used to manage mPIPE hardware resources. */
typedef struct {

	/* File descriptor for calling up to Linux (and thus the HV). */
	int fd;

	/* Corresponding mpipe instance #. */
	int instance;

	/* The VA at which configuration registers are mapped. */
	char *mmio_cfg_base;

	/* The VA at which IDMA, EDMA, and buffer manager are mapped. */
	char *mmio_fast_base;

	/* The "initialized" buffer stacks. */
	gxio_mpipe_rules_stacks_t __stacks;

} gxio_mpipe_context_t;

/* This is only used internally, but it's most easily made visible here. */
typedef gxio_mpipe_context_t gxio_mpipe_info_context_t;

/* Initialize an mPIPE context.
 *
 * This function allocates an mPIPE "service domain" and maps the MMIO
 * registers into the caller's VA space.
 *
 * @param context Context object to be initialized.
 * @param mpipe_instance Instance number of mPIPE shim to be controlled via
 *  context.
 */
extern int gxio_mpipe_init(gxio_mpipe_context_t *context,
			   unsigned int mpipe_instance);

/* Destroy an mPIPE context.
 *
 * This function frees the mPIPE "service domain" and unmaps the MMIO
 * registers from the caller's VA space.
 *
 * If a user process exits without calling this routine, the kernel
 * will destroy the mPIPE context as part of process teardown.
 *
 * @param context Context object to be destroyed.
 */
extern int gxio_mpipe_destroy(gxio_mpipe_context_t *context);

/*****************************************************************
 *                         Buffer Stacks                          *
 ******************************************************************/

/* Allocate a set of buffer stacks.
 *
 * The return value is NOT interesting if count is zero.
 *
 * @param context An initialized mPIPE context.
 * @param count Number of stacks required.
 * @param first Index of first stack if ::GXIO_MPIPE_ALLOC_FIXED flag is set,
 *   otherwise ignored.
 * @param flags Flag bits from ::gxio_mpipe_alloc_flags_e.
 * @return Index of first allocated buffer stack, or
 * ::GXIO_MPIPE_ERR_NO_BUFFER_STACK if allocation failed.
 */
extern int gxio_mpipe_alloc_buffer_stacks(gxio_mpipe_context_t *context,
					  unsigned int count,
					  unsigned int first,
					  unsigned int flags);

/* Enum codes for buffer sizes supported by mPIPE. */
typedef enum {
	/* 128 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_128 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_128,
	/* 256 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_256 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_256,
	/* 512 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_512 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_512,
	/* 1024 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_1024 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_1024,
	/* 1664 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_1664 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_1664,
	/* 4096 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_4096 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_4096,
	/* 10368 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_10368 =
		MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_10368,
	/* 16384 byte packet data buffer. */
	GXIO_MPIPE_BUFFER_SIZE_16384 = MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_16384
} gxio_mpipe_buffer_size_enum_t;

/* Convert a buffer size in bytes into a buffer size enum. */
extern gxio_mpipe_buffer_size_enum_t
gxio_mpipe_buffer_size_to_buffer_size_enum(size_t size);

/* Convert a buffer size enum into a buffer size in bytes. */
extern size_t
gxio_mpipe_buffer_size_enum_to_buffer_size(gxio_mpipe_buffer_size_enum_t
					   buffer_size_enum);

/* Calculate the number of bytes required to store a given number of
 * buffers in the memory registered with a buffer stack via
 * gxio_mpipe_init_buffer_stack().
 */
extern size_t gxio_mpipe_calc_buffer_stack_bytes(unsigned long buffers);

/* Initialize a buffer stack.  This function binds a region of memory
 * to be used by the hardware for storing buffer addresses pushed via
 * gxio_mpipe_push_buffer() or as the result of sending a buffer out
 * the egress with the 'push to stack when done' bit set.  Once this
 * function returns, the memory region's contents may be arbitrarily
 * modified by the hardware at any time and software should not access
 * the memory region again.
 *
 * @param context An initialized mPIPE context.
 * @param stack The buffer stack index.
 * @param buffer_size_enum The size of each buffer in the buffer stack,
 * as an enum.
 * @param mem The address of the buffer stack.  This memory must be
 * physically contiguous and aligned to a 64kB boundary.
 * @param mem_size The size of the buffer stack, in bytes.
 * @param mem_flags ::gxio_mpipe_mem_flags_e memory flags.
 * @return Zero on success, ::GXIO_MPIPE_ERR_INVAL_BUFFER_SIZE if
 * buffer_size_enum is invalid, ::GXIO_MPIPE_ERR_BAD_BUFFER_STACK if
 * stack has not been allocated.
 */
extern int gxio_mpipe_init_buffer_stack(gxio_mpipe_context_t *context,
					unsigned int stack,
					gxio_mpipe_buffer_size_enum_t
					buffer_size_enum, void *mem,
					size_t mem_size,
					unsigned int mem_flags);

/* Push a buffer onto a previously initialized buffer stack.
 *
 * The size of the buffer being pushed must match the size that was
 * registered with gxio_mpipe_init_buffer_stack().  All packet buffer
 * addresses are 128-byte aligned; the low 7 bits of the specified
 * buffer address will be ignored.
 *
 * @param context An initialized mPIPE context.
 * @param stack The buffer stack index.
 * @param buffer The buffer (the low seven bits are ignored).
 */
static inline void gxio_mpipe_push_buffer(gxio_mpipe_context_t *context,
					  unsigned int stack, void *buffer)
{
	MPIPE_BSM_REGION_ADDR_t offset = { {0} };
	MPIPE_BSM_REGION_VAL_t val = { {0} };

	/*
	 * The mmio_fast_base region starts at the IDMA region, so subtract
	 * off that initial offset.
	 */
	offset.region =
		MPIPE_MMIO_ADDR__REGION_VAL_BSM -
		MPIPE_MMIO_ADDR__REGION_VAL_IDMA;
	offset.stack = stack;

#if __SIZEOF_POINTER__ == 4
	val.va = ((ulong) buffer) >> MPIPE_BSM_REGION_VAL__VA_SHIFT;
#else
	val.va = ((long)buffer) >> MPIPE_BSM_REGION_VAL__VA_SHIFT;
#endif

	__gxio_mmio_write(context->mmio_fast_base + offset.word, val.word);
}

/* Pop a buffer off of a previously initialized buffer stack.
 *
 * @param context An initialized mPIPE context.
 * @param stack The buffer stack index.
 * @return The buffer, or NULL if the stack is empty.
 */
static inline void *gxio_mpipe_pop_buffer(gxio_mpipe_context_t *context,
					  unsigned int stack)
{
	MPIPE_BSM_REGION_ADDR_t offset = { {0} };

	/*
	 * The mmio_fast_base region starts at the IDMA region, so subtract
	 * off that initial offset.
	 */
	offset.region =
		MPIPE_MMIO_ADDR__REGION_VAL_BSM -
		MPIPE_MMIO_ADDR__REGION_VAL_IDMA;
	offset.stack = stack;

	while (1) {
		/*
		 * Case 1: val.c == ..._UNCHAINED, va is non-zero.
		 * Case 2: val.c == ..._INVALID, va is zero.
		 * Case 3: val.c == ..._NOT_RDY, va is zero.
		 */
		MPIPE_BSM_REGION_VAL_t val;
		val.word =
			__gxio_mmio_read(context->mmio_fast_base +
					 offset.word);

		/*
		 * Handle case 1 and 2 by returning the buffer (or NULL).
		 * Handle case 3 by waiting for the prefetch buffer to refill.
		 */
		if (val.c != MPIPE_EDMA_DESC_WORD1__C_VAL_NOT_RDY)
			return (void *)((unsigned long)val.
					va << MPIPE_BSM_REGION_VAL__VA_SHIFT);
	}
}

/*****************************************************************
 *                          NotifRings                            *
 ******************************************************************/

/* Allocate a set of NotifRings.
 *
 * The return value is NOT interesting if count is zero.
 *
 * Note that NotifRings are allocated in chunks, so allocating one at
 * a time is much less efficient than allocating several at once.
 *
 * @param context An initialized mPIPE context.
 * @param count Number of NotifRings required.
 * @param first Index of first NotifRing if ::GXIO_MPIPE_ALLOC_FIXED flag
 *   is set, otherwise ignored.
 * @param flags Flag bits from ::gxio_mpipe_alloc_flags_e.
 * @return Index of first allocated buffer NotifRing, or
 * ::GXIO_MPIPE_ERR_NO_NOTIF_RING if allocation failed.
 */
extern int gxio_mpipe_alloc_notif_rings(gxio_mpipe_context_t *context,
					unsigned int count, unsigned int first,
					unsigned int flags);

/* Initialize a NotifRing, using the given memory and size.
 *
 * @param context An initialized mPIPE context.
 * @param ring The NotifRing index.
 * @param mem A physically contiguous region of memory to be filled
 * with a ring of ::gxio_mpipe_idesc_t structures.
 * @param mem_size Number of bytes in the ring.  Must be 128, 512,
 * 2048, or 65536 * sizeof(gxio_mpipe_idesc_t).
 * @param mem_flags ::gxio_mpipe_mem_flags_e memory flags.
 *
 * @return 0 on success, ::GXIO_MPIPE_ERR_BAD_NOTIF_RING or
 * ::GXIO_ERR_INVAL_MEMORY_SIZE on failure.
 */
extern int gxio_mpipe_init_notif_ring(gxio_mpipe_context_t *context,
				      unsigned int ring,
				      void *mem, size_t mem_size,
				      unsigned int mem_flags);

/* Configure an interrupt to be sent to a tile on incoming NotifRing
 *  traffic.  Once an interrupt is sent for a particular ring, no more
 *  will be sent until gxio_mica_enable_notif_ring_interrupt() is called.
 *
 * @param context An initialized mPIPE context.
 * @param x X coordinate of interrupt target tile.
 * @param y Y coordinate of interrupt target tile.
 * @param i Index of the IPI register which will receive the interrupt.
 * @param e Specific event which will be set in the target IPI register when
 * the interrupt occurs.
 * @param ring The NotifRing index.
 * @return Zero on success, GXIO_ERR_INVAL if params are out of range.
 */
extern int gxio_mpipe_request_notif_ring_interrupt(gxio_mpipe_context_t
						   *context, int x, int y,
						   int i, int e,
						   unsigned int ring);

/* Enable an interrupt on incoming NotifRing traffic.
 *
 * @param context An initialized mPIPE context.
 * @param ring The NotifRing index.
 * @return Zero on success, GXIO_ERR_INVAL if params are out of range.
 */
extern int gxio_mpipe_enable_notif_ring_interrupt(gxio_mpipe_context_t
						  *context, unsigned int ring);

/* Map all of a client's memory via the given IOTLB.
 * @param context An initialized mPIPE context.
 * @param iotlb IOTLB index.
 * @param pte Page table entry.
 * @param flags Flags.
 * @return Zero on success, or a negative error code.
 */
extern int gxio_mpipe_register_client_memory(gxio_mpipe_context_t *context,
					     unsigned int iotlb, HV_PTE pte,
					     unsigned int flags);

/*****************************************************************
 *                        Notif Groups                            *
 ******************************************************************/

/* Allocate a set of NotifGroups.
 *
 * The return value is NOT interesting if count is zero.
 *
 * @param context An initialized mPIPE context.
 * @param count Number of NotifGroups required.
 * @param first Index of first NotifGroup if ::GXIO_MPIPE_ALLOC_FIXED flag
 *   is set, otherwise ignored.
 * @param flags Flag bits from ::gxio_mpipe_alloc_flags_e.
 * @return Index of first allocated buffer NotifGroup, or
 * ::GXIO_MPIPE_ERR_NO_NOTIF_GROUP if allocation failed.
 */
extern int gxio_mpipe_alloc_notif_groups(gxio_mpipe_context_t *context,
					 unsigned int count,
					 unsigned int first,
					 unsigned int flags);

/* Add a NotifRing to a NotifGroup.  This only sets a bit in the
 * application's 'group' object; the hardware NotifGroup can be
 * initialized by passing 'group' to gxio_mpipe_init_notif_group() or
 * gxio_mpipe_init_notif_group_and_buckets().
 */
static inline void
gxio_mpipe_notif_group_add_ring(gxio_mpipe_notif_group_bits_t *bits, int ring)
{
	bits->ring_mask[ring / 64] |= (1ull << (ring % 64));
}

/* Set a particular NotifGroup bitmask.  Since the load balancer
 * makes decisions based on both bucket and NotifGroup state, most
 * applications should use gxio_mpipe_init_notif_group_and_buckets()
 * rather than using this function to configure just a NotifGroup.
 */
extern int gxio_mpipe_init_notif_group(gxio_mpipe_context_t *context,
				       unsigned int group,
				       gxio_mpipe_notif_group_bits_t bits);

/*****************************************************************
 *                         Load Balancer                          *
 ******************************************************************/

/* Allocate a set of load balancer buckets.
 *
 * The return value is NOT interesting if count is zero.
 *
 * Note that buckets are allocated in chunks, so allocating one at
 * a time is much less efficient than allocating several at once.
 *
 * Note that the buckets are actually divided into two sub-ranges, of
 * different sizes, and different chunk sizes, and the range you get
 * by default is determined by the size of the request.  Allocations
 * cannot span the two sub-ranges.
 *
 * @param context An initialized mPIPE context.
 * @param count Number of buckets required.
 * @param first Index of first bucket if ::GXIO_MPIPE_ALLOC_FIXED flag is set,
 *   otherwise ignored.
 * @param flags Flag bits from ::gxio_mpipe_alloc_flags_e.
 * @return Index of first allocated buffer bucket, or
 * ::GXIO_MPIPE_ERR_NO_BUCKET if allocation failed.
 */
extern int gxio_mpipe_alloc_buckets(gxio_mpipe_context_t *context,
				    unsigned int count, unsigned int first,
				    unsigned int flags);

/* The legal modes for gxio_mpipe_bucket_info_t and
 * gxio_mpipe_init_notif_group_and_buckets().
 *
 * All modes except ::GXIO_MPIPE_BUCKET_ROUND_ROBIN expect that the user
 * will allocate a power-of-two number of buckets and initialize them
 * to the same mode.  The classifier program then uses the appropriate
 * number of low bits from the incoming packet's flow hash to choose a
 * load balancer bucket.  Based on that bucket's load balancing mode,
 * reference count, and currently active NotifRing, the load balancer
 * chooses the NotifRing to which the packet will be delivered.
 */
typedef enum {
	/* All packets for a bucket go to the same NotifRing unless the
	 * NotifRing gets full, in which case packets will be dropped.  If
	 * the bucket reference count ever reaches zero, a new NotifRing may
	 * be chosen.
	 */
	GXIO_MPIPE_BUCKET_DYNAMIC_FLOW_AFFINITY =
		MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_DFA,

	/* All packets for a bucket always go to the same NotifRing.
	 */
	GXIO_MPIPE_BUCKET_STATIC_FLOW_AFFINITY =
		MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_FIXED,

	/* All packets for a bucket go to the least full NotifRing in the
	 * group, providing load balancing round robin behavior.
	 */
	GXIO_MPIPE_BUCKET_ROUND_ROBIN =
		MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_ALWAYS_PICK,

	/* All packets for a bucket go to the same NotifRing unless the
	 * NotifRing gets full, at which point the bucket starts using the
	 * least full NotifRing in the group.  If all NotifRings in the
	 * group are full, packets will be dropped.
	 */
	GXIO_MPIPE_BUCKET_STICKY_FLOW_LOCALITY =
		MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_STICKY,

	/* All packets for a bucket go to the same NotifRing unless the
	 * NotifRing gets full, or a random timer fires, at which point the
	 * bucket starts using the least full NotifRing in the group.  If
	 * all NotifRings in the group are full, packets will be dropped.
	 * WARNING: This mode is BROKEN on chips with fewer than 64 tiles.
	 */
	GXIO_MPIPE_BUCKET_PREFER_FLOW_LOCALITY =
		MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_STICKY_RAND,

} gxio_mpipe_bucket_mode_t;

/* Copy a set of bucket initialization values into the mPIPE
 * hardware.  Since the load balancer makes decisions based on both
 * bucket and NotifGroup state, most applications should use
 * gxio_mpipe_init_notif_group_and_buckets() rather than using this
 * function to configure a single bucket.
 *
 * @param context An initialized mPIPE context.
 * @param bucket Bucket index to be initialized.
 * @param bucket_info Initial reference count, NotifRing index, and mode.
 * @return 0 on success, ::GXIO_MPIPE_ERR_BAD_BUCKET on failure.
 */
extern int gxio_mpipe_init_bucket(gxio_mpipe_context_t *context,
				  unsigned int bucket,
				  gxio_mpipe_bucket_info_t bucket_info);

/* Initializes a group and range of buckets and range of rings such
 * that the load balancer runs a particular load balancing function.
 *
 * First, the group is initialized with the given rings.
 *
 * Second, each bucket is initialized with the mode and group, and a
 * ring chosen round-robin from the given rings.
 *
 * Normally, the classifier picks a bucket, and then the load balancer
 * picks a ring, based on the bucket's mode, group, and current ring,
 * possibly updating the bucket's ring.
 *
 * @param context An initialized mPIPE context.
 * @param group The group.
 * @param ring The first ring.
 * @param num_rings The number of rings.
 * @param bucket The first bucket.
 * @param num_buckets The number of buckets.
 * @param mode The load balancing mode.
 *
 * @return 0 on success, ::GXIO_MPIPE_ERR_BAD_BUCKET,
 * ::GXIO_MPIPE_ERR_BAD_NOTIF_GROUP, or
 * ::GXIO_MPIPE_ERR_BAD_NOTIF_RING on failure.
 */
extern int gxio_mpipe_init_notif_group_and_buckets(gxio_mpipe_context_t
						   *context,
						   unsigned int group,
						   unsigned int ring,
						   unsigned int num_rings,
						   unsigned int bucket,
						   unsigned int num_buckets,
						   gxio_mpipe_bucket_mode_t
						   mode);

/* Return credits to a NotifRing and/or bucket.
 *
 * @param context An initialized mPIPE context.
 * @param ring The NotifRing index, or -1.
 * @param bucket The bucket, or -1.
 * @param count The number of credits to return.
 */
static inline void gxio_mpipe_credit(gxio_mpipe_context_t *context,
				     int ring, int bucket, unsigned int count)
{
	/* NOTE: Fancy struct initialization would break "C89" header test. */

	MPIPE_IDMA_RELEASE_REGION_ADDR_t offset = { {0} };
	MPIPE_IDMA_RELEASE_REGION_VAL_t val = { {0} };

	/*
	 * The mmio_fast_base region starts at the IDMA region, so subtract
	 * off that initial offset.
	 */
	offset.region =
		MPIPE_MMIO_ADDR__REGION_VAL_IDMA -
		MPIPE_MMIO_ADDR__REGION_VAL_IDMA;
	offset.ring = ring;
	offset.bucket = bucket;
	offset.ring_enable = (ring >= 0);
	offset.bucket_enable = (bucket >= 0);
	val.count = count;

	__gxio_mmio_write(context->mmio_fast_base + offset.word, val.word);
}

/*****************************************************************
 *                         Egress Rings                           *
 ******************************************************************/

/* Allocate a set of eDMA rings.
 *
 * The return value is NOT interesting if count is zero.
 *
 * @param context An initialized mPIPE context.
 * @param count Number of eDMA rings required.
 * @param first Index of first eDMA ring if ::GXIO_MPIPE_ALLOC_FIXED flag
 *   is set, otherwise ignored.
 * @param flags Flag bits from ::gxio_mpipe_alloc_flags_e.
 * @return Index of first allocated buffer eDMA ring, or
 * ::GXIO_MPIPE_ERR_NO_EDMA_RING if allocation failed.
 */
extern int gxio_mpipe_alloc_edma_rings(gxio_mpipe_context_t *context,
				       unsigned int count, unsigned int first,
				       unsigned int flags);

/* Initialize an eDMA ring, using the given memory and size.
 *
 * @param context An initialized mPIPE context.
 * @param ering The eDMA ring index.
 * @param channel The channel to use.  This must be one of the channels
 * associated with the context's set of open links.
 * @param mem A physically contiguous region of memory to be filled
 * with a ring of ::gxio_mpipe_edesc_t structures.
 * @param mem_size Number of bytes in the ring.  Must be 512, 2048,
 * 8192 or 65536, times 16 (i.e. sizeof(gxio_mpipe_edesc_t)).
 * @param mem_flags ::gxio_mpipe_mem_flags_e memory flags.
 *
 * @return 0 on success, ::GXIO_MPIPE_ERR_BAD_EDMA_RING or
 * ::GXIO_ERR_INVAL_MEMORY_SIZE on failure.
 */
extern int gxio_mpipe_init_edma_ring(gxio_mpipe_context_t *context,
				     unsigned int ering, unsigned int channel,
				     void *mem, size_t mem_size,
				     unsigned int mem_flags);

/* Set the "max_blks", "min_snf_blks", and "db" fields of
 * ::MPIPE_EDMA_RG_INIT_DAT_THRESH_t for a given edma ring.
 *
 * The global pool of dynamic blocks will be automatically adjusted.
 *
 * This function should not be called after any egress has been done
 * on the edma ring.
 *
 * Most applications should just use gxio_mpipe_equeue_set_snf_size().
 *
 * @param context An initialized mPIPE context.
 * @param ering The eDMA ring index.
 * @param max_blks The number of blocks to dedicate to the ring
 * (normally min_snf_blks + 1).  Must be greater than min_snf_blocks.
 * @param min_snf_blks The number of blocks which must be stored
 * prior to starting to send the packet (normally 12).
 * @param db Whether to allow use of dynamic blocks by the ring
 * (normally 1).
 *
 * @return 0 on success, negative on error.
 */
extern int gxio_mpipe_config_edma_ring_blks(gxio_mpipe_context_t *context,
					    unsigned int ering,
					    unsigned int max_blks,
					    unsigned int min_snf_blks,
					    unsigned int db);

/*****************************************************************
 *                      Classifier Program                        *
 ******************************************************************/

/*
 *
 * Functions for loading or configuring the mPIPE classifier program.
 *
 * The mPIPE classification processors all run a special "classifier"
 * program which, for each incoming packet, parses the packet headers,
 * encodes some packet metadata in the "idesc", and either drops the
 * packet, or picks a notif ring to handle the packet, and a buffer
 * stack to contain the packet, usually based on the channel, VLAN,
 * dMAC, flow hash, and packet size, under the guidance of the "rules"
 * API described below.
 *
 * @section gxio_mpipe_classifier_default Default Classifier
 *
 * The MDE provides a simple "default" classifier program.  It is
 * shipped as source in "$TILERA_ROOT/src/sys/mpipe/classifier.c",
 * which serves as its official documentation.  It is shipped as a
 * binary program in "$TILERA_ROOT/tile/boot/classifier", which is
 * automatically included in bootroms created by "tile-monitor", and
 * is automatically loaded by the hypervisor at boot time.
 *
 * The L2 analysis handles LLC packets, SNAP packets, and "VLAN
 * wrappers" (keeping the outer VLAN).
 *
 * The L3 analysis handles IPv4 and IPv6, dropping packets with bad
 * IPv4 header checksums, requesting computation of a TCP/UDP checksum
 * if appropriate, and hashing the dest and src IP addresses, plus the
 * ports for TCP/UDP packets, into the flow hash.  No special analysis
 * is done for "fragmented" packets or "tunneling" protocols.  Thus,
 * the first fragment of a fragmented TCP/UDP packet is hashed using
 * src/dest IP address and ports and all subsequent fragments are only
 * hashed according to src/dest IP address.
 *
 * The L3 analysis handles other packets too, hashing the dMAC
 * smac into a flow hash.
 *
 * The channel, VLAN, and dMAC used to pick a "rule" (see the
 * "rules" APIs below), which in turn is used to pick a buffer stack
 * (based on the packet size) and a bucket (based on the flow hash).
 *
 * To receive traffic matching a particular (channel/VLAN/dMAC
 * pattern, an application should allocate its own buffer stacks and
 * load balancer buckets, and map traffic to those stacks and buckets,
 * as decribed by the "rules" API below.
 *
 * Various packet metadata is encoded in the idesc.  The flow hash is
 * four bytes at 0x0C.  The VLAN is two bytes at 0x10.  The ethtype is
 * two bytes at 0x12.  The l3 start is one byte at 0x14.  The l4 start
 * is one byte at 0x15 for IPv4 and IPv6 packets, and otherwise zero.
 * The protocol is one byte at 0x16 for IPv4 and IPv6 packets, and
 * otherwise zero.
 *
 * @section gxio_mpipe_classifier_custom Custom Classifiers.
 *
 * A custom classifier may be created using "tile-mpipe-cc" with a
 * customized version of the default classifier sources.
 *
 * The custom classifier may be included in bootroms using the
 * "--classifier" option to "tile-monitor", or loaded dynamically
 * using gxio_mpipe_classifier_load_from_file().
 *
 * Be aware that "extreme" customizations may break the assumptions of
 * the "rules" APIs described below, but simple customizations, such
 * as adding new packet metadata, should be fine.
 */

/* A set of classifier rules, plus a context. */
typedef struct {

	/* The context. */
	gxio_mpipe_context_t *context;

	/* The actual rules. */
	gxio_mpipe_rules_list_t list;

} gxio_mpipe_rules_t;

/* Initialize a classifier program rules list.
 *
 * This function can be called on a previously initialized rules list
 * to discard any previously added rules.
 *
 * @param rules Rules list to initialize.
 * @param context An initialized mPIPE context.
 */
extern void gxio_mpipe_rules_init(gxio_mpipe_rules_t *rules,
				  gxio_mpipe_context_t *context);

/* Begin a new rule on the indicated rules list.
 *
 * Note that an empty rule matches all packets, but an empty rule list
 * matches no packets.
 *
 * @param rules Rules list to which new rule is appended.
 * @param bucket First load balancer bucket to which packets will be
 * delivered.
 * @param num_buckets Number of buckets (must be a power of two) across
 * which packets will be distributed based on the "flow hash".
 * @param stacks Either NULL, to assign each packet to the smallest
 * initialized buffer stack which does not induce chaining (and to
 * drop packets which exceed the largest initialized buffer stack
 * buffer size), or an array, with each entry indicating which buffer
 * stack should be used for packets up to that size (with 255
 * indicating that those packets should be dropped).
 * @return 0 on success, or a negative error code on failure.
 */
extern int gxio_mpipe_rules_begin(gxio_mpipe_rules_t *rules,
				  unsigned int bucket,
				  unsigned int num_buckets,
				  gxio_mpipe_rules_stacks_t *stacks);

/* Set the headroom of the current rule.
 *
 * @param rules Rules list whose current rule will be modified.
 * @param headroom The headroom.
 * @return 0 on success, or a negative error code on failure.
 */
extern int gxio_mpipe_rules_set_headroom(gxio_mpipe_rules_t *rules,
					 uint8_t headroom);

/* Indicate that packets from a particular channel can be delivered
 * to the buckets and buffer stacks associated with the current rule.
 *
 * Channels added must be associated with links opened by the mPIPE context
 * used in gxio_mpipe_rules_init().  A rule with no channels is equivalent
 * to a rule naming all such associated channels.
 *
 * @param rules Rules list whose current rule will be modified.
 * @param channel The channel to add.
 * @return 0 on success, or a negative error code on failure.
 */
extern int gxio_mpipe_rules_add_channel(gxio_mpipe_rules_t *rules,
					unsigned int channel);

/* Commit rules.
 *
 * The rules are sent to the hypervisor, where they are combined with
 * the rules from other apps, and used to program the hardware classifier.
 *
 * Note that if this function returns an error, then the rules will NOT
 * have been committed, even if the error is due to interactions with
 * rules from another app.
 *
 * @param rules Rules list to commit.
 * @return 0 on success, or a negative error code on failure.
 */
extern int gxio_mpipe_rules_commit(gxio_mpipe_rules_t *rules);

/*****************************************************************
 *                     Ingress Queue Wrapper                      *
 ******************************************************************/

/*
 *
 * Convenience functions for receiving packets from a NotifRing and
 * sending packets via an eDMA ring.
 *
 * The mpipe ingress and egress hardware uses shared memory packet
 * descriptors to describe packets that have arrived on ingress or
 * are destined for egress.  These descriptors are stored in shared
 * memory ring buffers and written or read by hardware as necessary.
 * The gxio library provides wrapper functions that manage the head and
 * tail pointers for these rings, allowing the user to easily read or
 * write packet descriptors.
 *
 * The initialization interface for ingress and egress rings is quite
 * similar.  For example, to create an ingress queue, the user passes
 * a ::gxio_mpipe_iqueue_t state object, a ring number from
 * gxio_mpipe_alloc_notif_rings(), and the address of memory to hold a
 * ring buffer to the gxio_mpipe_iqueue_init() function.  The function
 * returns success when the state object has been initialized and the
 * hardware configured to deliver packets to the specified ring
 * buffer.  Similarly, gxio_mpipe_equeue_init() takes a
 * ::gxio_mpipe_equeue_t state object, a ring number from
 * gxio_mpipe_alloc_edma_rings(), and a shared memory buffer.
 *
 * @section gxio_mpipe_iqueue Working with Ingress Queues
 *
 * Once initialized, the gxio_mpipe_iqueue_t API provides two flows
 * for getting the ::gxio_mpipe_idesc_t packet descriptor associated
 * with incoming packets.  The simplest is to call
 * gxio_mpipe_iqueue_get() or gxio_mpipe_iqueue_try_get().  These
 * functions copy the oldest packet descriptor out of the NotifRing and
 * into a descriptor provided by the caller.  They also immediately
 * inform the hardware that a descriptor has been processed.
 *
 * For applications with stringent performance requirements, higher
 * efficiency can be achieved by avoiding the packet descriptor copy
 * and processing multiple descriptors at once.  The
 * gxio_mpipe_iqueue_peek() and gxio_mpipe_iqueue_try_peek() functions
 * allow such optimizations.  These functions provide a pointer to the
 * next valid ingress descriptor in the NotifRing's shared memory ring
 * buffer, and a count of how many contiguous descriptors are ready to
 * be processed.  The application can then process any number of those
 * descriptors in place, calling gxio_mpipe_iqueue_consume() to inform
 * the hardware after each one has been processed.
 *
 * @section gxio_mpipe_equeue Working with Egress Queues
 *
 * Similarly, the egress queue API provides a high-performance
 * interface plus a simple wrapper for use in posting
 * ::gxio_mpipe_edesc_t egress packet descriptors.  The simple
 * version, gxio_mpipe_equeue_put(), allows the programmer to wait for
 * an eDMA ring slot to become available and write a single descriptor
 * into the ring.
 *
 * Alternatively, you can reserve slots in the eDMA ring using
 * gxio_mpipe_equeue_reserve() or gxio_mpipe_equeue_try_reserve(), and
 * then fill in each slot using gxio_mpipe_equeue_put_at().  This
 * capability can be used to amortize the cost of reserving slots
 * across several packets.  It also allows gather operations to be
 * performed on a shared equeue, by ensuring that the edescs for all
 * the fragments are all contiguous in the eDMA ring.
 *
 * The gxio_mpipe_equeue_reserve() and gxio_mpipe_equeue_try_reserve()
 * functions return a 63-bit "completion slot", which is actually a
 * sequence number, the low bits of which indicate the ring buffer
 * index and the high bits the number of times the application has
 * gone around the egress ring buffer.  The extra bits allow an
 * application to check for egress completion by calling
 * gxio_mpipe_equeue_is_complete() to see whether a particular 'slot'
 * number has finished.  Given the maximum packet rates of the Gx
 * processor, the 63-bit slot number will never wrap.
 *
 * In practice, most applications use the ::gxio_mpipe_edesc_t::hwb
 * bit to indicate that the buffers containing egress packet data
 * should be pushed onto a buffer stack when egress is complete.  Such
 * applications generally do not need to know when an egress operation
 * completes (since there is no need to free a buffer post-egress),
 * and thus can use the optimized gxio_mpipe_equeue_reserve_fast() or
 * gxio_mpipe_equeue_try_reserve_fast() functions, which return a 24
 * bit "slot", instead of a 63-bit "completion slot".
 *
 * Once a slot has been "reserved", it MUST be filled.  If the
 * application reserves a slot and then decides that it does not
 * actually need it, it can set the ::gxio_mpipe_edesc_t::ns (no send)
 * bit on the descriptor passed to gxio_mpipe_equeue_put_at() to
 * indicate that no data should be sent.  This technique can also be
 * used to drop an incoming packet, instead of forwarding it, since
 * any buffer will still be pushed onto the buffer stack when the
 * egress descriptor is processed.
 */

/* A convenient interface to a NotifRing, for use by a single thread.
 */
typedef struct {

	/* The context. */
	gxio_mpipe_context_t *context;

	/* The actual NotifRing. */
	gxio_mpipe_idesc_t *idescs;

	/* The number of entries. */
	unsigned long num_entries;

	/* The number of entries minus one. */
	unsigned long mask_num_entries;

	/* The log2() of the number of entries. */
	unsigned long log2_num_entries;

	/* The next entry. */
	unsigned int head;

	/* The NotifRing id. */
	unsigned int ring;

#ifdef __BIG_ENDIAN__
	/* The number of byteswapped entries. */
	unsigned int swapped;
#endif

} gxio_mpipe_iqueue_t;

/* Initialize an "iqueue".
 *
 * Takes the iqueue plus the same args as gxio_mpipe_init_notif_ring().
 */
extern int gxio_mpipe_iqueue_init(gxio_mpipe_iqueue_t *iqueue,
				  gxio_mpipe_context_t *context,
				  unsigned int ring,
				  void *mem, size_t mem_size,
				  unsigned int mem_flags);

/* Advance over some old entries in an iqueue.
 *
 * Please see the documentation for gxio_mpipe_iqueue_consume().
 *
 * @param iqueue An ingress queue initialized via gxio_mpipe_iqueue_init().
 * @param count The number of entries to advance over.
 */
static inline void gxio_mpipe_iqueue_advance(gxio_mpipe_iqueue_t *iqueue,
					     int count)
{
	/* Advance with proper wrap. */
	int head = iqueue->head + count;
	iqueue->head =
		(head & iqueue->mask_num_entries) +
		(head >> iqueue->log2_num_entries);

#ifdef __BIG_ENDIAN__
	/* HACK: Track swapped entries. */
	iqueue->swapped -= count;
#endif
}

/* Release the ring and bucket for an old entry in an iqueue.
 *
 * Releasing the ring allows more packets to be delivered to the ring.
 *
 * Releasing the bucket allows flows using the bucket to be moved to a
 * new ring when using GXIO_MPIPE_BUCKET_DYNAMIC_FLOW_AFFINITY.
 *
 * This function is shorthand for "gxio_mpipe_credit(iqueue->context,
 * iqueue->ring, idesc->bucket_id, 1)", and it may be more convenient
 * to make that underlying call, using those values, instead of
 * tracking the entire "idesc".
 *
 * If packet processing is deferred, optimal performance requires that
 * the releasing be deferred as well.
 *
 * Please see the documentation for gxio_mpipe_iqueue_consume().
 *
 * @param iqueue An ingress queue initialized via gxio_mpipe_iqueue_init().
 * @param idesc The descriptor which was processed.
 */
static inline void gxio_mpipe_iqueue_release(gxio_mpipe_iqueue_t *iqueue,
					     gxio_mpipe_idesc_t *idesc)
{
	gxio_mpipe_credit(iqueue->context, iqueue->ring, idesc->bucket_id, 1);
}

/* Consume a packet from an "iqueue".
 *
 * After processing packets peeked at via gxio_mpipe_iqueue_peek()
 * or gxio_mpipe_iqueue_try_peek(), you must call this function, or
 * gxio_mpipe_iqueue_advance() plus gxio_mpipe_iqueue_release(), to
 * advance over those entries, and release their rings and buckets.
 *
 * You may call this function as each packet is processed, or you can
 * wait until several packets have been processed.
 *
 * Note that if you are using a single bucket, and you are handling
 * batches of N packets, then you can replace several calls to this
 * function with calls to "gxio_mpipe_iqueue_advance(iqueue, N)" and
 * "gxio_mpipe_credit(iqueue->context, iqueue->ring, bucket, N)".
 *
 * Note that if your classifier sets "idesc->nr", then you should
 * explicitly call "gxio_mpipe_iqueue_advance(iqueue, idesc)" plus
 * "gxio_mpipe_credit(iqueue->context, iqueue->ring, -1, 1)", to
 * avoid incorrectly crediting the (unused) bucket.
 *
 * @param iqueue An ingress queue initialized via gxio_mpipe_iqueue_init().
 * @param idesc The descriptor which was processed.
 */
static inline void gxio_mpipe_iqueue_consume(gxio_mpipe_iqueue_t *iqueue,
					     gxio_mpipe_idesc_t *idesc)
{
	gxio_mpipe_iqueue_advance(iqueue, 1);
	gxio_mpipe_iqueue_release(iqueue, idesc);
}

/* Peek at the next packet(s) in an "iqueue", without waiting.
 *
 * If no packets are available, fills idesc_ref with NULL, and then
 * returns ::GXIO_MPIPE_ERR_IQUEUE_EMPTY.  Otherwise, fills idesc_ref
 * with the address of the next valid packet descriptor, and returns
 * the maximum number of valid descriptors which can be processed.
 * You may process fewer descriptors if desired.
 *
 * Call gxio_mpipe_iqueue_consume() on each packet once it has been
 * processed (or dropped), to allow more packets to be delivered.
 *
 * @param iqueue An ingress queue initialized via gxio_mpipe_iqueue_init().
 * @param idesc_ref A pointer to a packet descriptor pointer.
 * @return The (positive) number of packets which can be processed,
 * or ::GXIO_MPIPE_ERR_IQUEUE_EMPTY if no packets are available.
 */
static inline int gxio_mpipe_iqueue_try_peek(gxio_mpipe_iqueue_t *iqueue,
					     gxio_mpipe_idesc_t **idesc_ref)
{
	gxio_mpipe_idesc_t *next;

	uint64_t head = iqueue->head;
	uint64_t tail = __gxio_mmio_read(iqueue->idescs);

	/* Available entries. */
	uint64_t avail =
		(tail >= head) ? (tail - head) : (iqueue->num_entries - head);

	if (avail == 0) {
		*idesc_ref = NULL;
		return GXIO_MPIPE_ERR_IQUEUE_EMPTY;
	}

	next = &iqueue->idescs[head];

	/* ISSUE: Is this helpful? */
	__insn_prefetch(next);

#ifdef __BIG_ENDIAN__
	/* HACK: Swap new entries directly in memory. */
	{
		int i, j;
		for (i = iqueue->swapped; i < avail; i++) {
			for (j = 0; j < 8; j++)
				next[i].words[j] =
					__builtin_bswap64(next[i].words[j]);
		}
		iqueue->swapped = avail;
	}
#endif

	*idesc_ref = next;

	return avail;
}

/* Drop a packet by pushing its buffer (if appropriate).
 *
 * NOTE: The caller must still call gxio_mpipe_iqueue_consume() if idesc
 * came from gxio_mpipe_iqueue_try_peek() or gxio_mpipe_iqueue_peek().
 *
 * @param iqueue An ingress queue initialized via gxio_mpipe_iqueue_init().
 * @param idesc A packet descriptor.
 */
static inline void gxio_mpipe_iqueue_drop(gxio_mpipe_iqueue_t *iqueue,
					  gxio_mpipe_idesc_t *idesc)
{
	/* FIXME: Handle "chaining" properly. */

	if (!idesc->be) {
		unsigned char *va = gxio_mpipe_idesc_get_va(idesc);
		gxio_mpipe_push_buffer(iqueue->context, idesc->stack_idx, va);
	}
}

/*****************************************************************
 *                      Egress Queue Wrapper                      *
 ******************************************************************/

/* A convenient, thread-safe interface to an eDMA ring. */
typedef struct {

	/* State object for tracking head and tail pointers. */
	__gxio_dma_queue_t dma_queue;

	/* The ring entries. */
	gxio_mpipe_edesc_t *edescs;

	/* The number of entries minus one. */
	unsigned long mask_num_entries;

	/* The log2() of the number of entries. */
	unsigned long log2_num_entries;

	/* The context. */
	gxio_mpipe_context_t *context;

	/* The ering. */
	unsigned int ering;

	/* The channel. */
	unsigned int channel;

} gxio_mpipe_equeue_t;

/* Initialize an "equeue".
 *
 * This function uses gxio_mpipe_init_edma_ring() to initialize the
 * underlying edma_ring using the provided arguments.
 *
 * @param equeue An egress queue to be initialized.
 * @param context An initialized mPIPE context.
 * @param ering The eDMA ring index.
 * @param channel The channel to use.  This must be one of the channels
 * associated with the context's set of open links.
 * @param mem A physically contiguous region of memory to be filled
 * with a ring of ::gxio_mpipe_edesc_t structures.
 * @param mem_size Number of bytes in the ring.  Must be 512, 2048,
 * 8192 or 65536, times 16 (i.e. sizeof(gxio_mpipe_edesc_t)).
 * @param mem_flags ::gxio_mpipe_mem_flags_e memory flags.
 *
 * @return 0 on success, ::GXIO_MPIPE_ERR_BAD_EDMA_RING or
 * ::GXIO_ERR_INVAL_MEMORY_SIZE on failure.
 */
extern int gxio_mpipe_equeue_init(gxio_mpipe_equeue_t *equeue,
				  gxio_mpipe_context_t *context,
				  unsigned int ering,
				  unsigned int channel,
				  void *mem, unsigned int mem_size,
				  unsigned int mem_flags);

/* Reserve completion slots for edescs.
 *
 * Use gxio_mpipe_equeue_put_at() to actually populate the slots.
 *
 * This function is slower than gxio_mpipe_equeue_reserve_fast(), but
 * returns a full 64 bit completion slot, which can be used with
 * gxio_mpipe_equeue_is_complete().
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param num Number of slots to reserve (must be non-zero).
 * @return The first reserved completion slot, or a negative error code.
 */
static inline int64_t gxio_mpipe_equeue_reserve(gxio_mpipe_equeue_t *equeue,
						unsigned int num)
{
	return __gxio_dma_queue_reserve_aux(&equeue->dma_queue, num, true);
}

/* Reserve completion slots for edescs, if possible.
 *
 * Use gxio_mpipe_equeue_put_at() to actually populate the slots.
 *
 * This function is slower than gxio_mpipe_equeue_try_reserve_fast(),
 * but returns a full 64 bit completion slot, which can be used with
 * gxio_mpipe_equeue_is_complete().
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param num Number of slots to reserve (must be non-zero).
 * @return The first reserved completion slot, or a negative error code.
 */
static inline int64_t gxio_mpipe_equeue_try_reserve(gxio_mpipe_equeue_t
						    *equeue, unsigned int num)
{
	return __gxio_dma_queue_reserve_aux(&equeue->dma_queue, num, false);
}

/* Reserve slots for edescs.
 *
 * Use gxio_mpipe_equeue_put_at() to actually populate the slots.
 *
 * This function is faster than gxio_mpipe_equeue_reserve(), but
 * returns a 24 bit slot (instead of a 64 bit completion slot), which
 * thus cannot be used with gxio_mpipe_equeue_is_complete().
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param num Number of slots to reserve (should be non-zero).
 * @return The first reserved slot, or a negative error code.
 */
static inline int64_t gxio_mpipe_equeue_reserve_fast(gxio_mpipe_equeue_t
						     *equeue, unsigned int num)
{
	return __gxio_dma_queue_reserve(&equeue->dma_queue, num, true, false);
}

/* Reserve slots for edescs, if possible.
 *
 * Use gxio_mpipe_equeue_put_at() to actually populate the slots.
 *
 * This function is faster than gxio_mpipe_equeue_try_reserve(), but
 * returns a 24 bit slot (instead of a 64 bit completion slot), which
 * thus cannot be used with gxio_mpipe_equeue_is_complete().
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param num Number of slots to reserve (should be non-zero).
 * @return The first reserved slot, or a negative error code.
 */
static inline int64_t gxio_mpipe_equeue_try_reserve_fast(gxio_mpipe_equeue_t
							 *equeue,
							 unsigned int num)
{
	return __gxio_dma_queue_reserve(&equeue->dma_queue, num, false, false);
}

/*
 * HACK: This helper function tricks gcc 4.6 into avoiding saving
 * a copy of "edesc->words[0]" on the stack for no obvious reason.
 */

static inline void gxio_mpipe_equeue_put_at_aux(gxio_mpipe_equeue_t *equeue,
						uint_reg_t ew[2],
						unsigned long slot)
{
	unsigned long edma_slot = slot & equeue->mask_num_entries;
	gxio_mpipe_edesc_t *edesc_p = &equeue->edescs[edma_slot];

	/*
	 * ISSUE: Could set eDMA ring to be on generation 1 at start, which
	 * would avoid the negation here, perhaps allowing "__insn_bfins()".
	 */
	ew[0] |= !((slot >> equeue->log2_num_entries) & 1);

	/*
	 * NOTE: We use "__gxio_mpipe_write()", plus the fact that the eDMA
	 * queue alignment restrictions ensure that these two words are on
	 * the same cacheline, to force proper ordering between the stores.
	 */
	__gxio_mmio_write64(&edesc_p->words[1], ew[1]);
	__gxio_mmio_write64(&edesc_p->words[0], ew[0]);
}

/* Post an edesc to a given slot in an equeue.
 *
 * This function copies the supplied edesc into entry "slot mod N" in
 * the underlying ring, setting the "gen" bit to the appropriate value
 * based on "(slot mod N*2)", where "N" is the size of the ring.  Note
 * that the higher bits of slot are unused, and thus, this function
 * can handle "slots" as well as "completion slots".
 *
 * Normally this function is used to fill in slots reserved by
 * gxio_mpipe_equeue_try_reserve(), gxio_mpipe_equeue_reserve(),
 * gxio_mpipe_equeue_try_reserve_fast(), or
 * gxio_mpipe_equeue_reserve_fast(),
 *
 * This function can also be used without "reserving" slots, if the
 * application KNOWS that the ring can never overflow, for example, by
 * pushing fewer buffers into the buffer stacks than there are total
 * slots in the equeue, but this is NOT recommended.
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param edesc The egress descriptor to be posted.
 * @param slot An egress slot (only the low bits are actually used).
 */
static inline void gxio_mpipe_equeue_put_at(gxio_mpipe_equeue_t *equeue,
					    gxio_mpipe_edesc_t edesc,
					    unsigned long slot)
{
	gxio_mpipe_equeue_put_at_aux(equeue, edesc.words, slot);
}

/* Post an edesc to the next slot in an equeue.
 *
 * This is a convenience wrapper around
 * gxio_mpipe_equeue_reserve_fast() and gxio_mpipe_equeue_put_at().
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param edesc The egress descriptor to be posted.
 * @return 0 on success.
 */
static inline int gxio_mpipe_equeue_put(gxio_mpipe_equeue_t *equeue,
					gxio_mpipe_edesc_t edesc)
{
	int64_t slot = gxio_mpipe_equeue_reserve_fast(equeue, 1);
	if (slot < 0)
		return (int)slot;

	gxio_mpipe_equeue_put_at(equeue, edesc, slot);

	return 0;
}

/* Ask the mPIPE hardware to egress outstanding packets immediately.
 *
 * This call is not necessary, but may slightly reduce overall latency.
 *
 * Technically, you should flush all gxio_mpipe_equeue_put_at() writes
 * to memory before calling this function, to ensure the descriptors
 * are visible in memory before the mPIPE hardware actually looks for
 * them.  But this should be very rare, and the only side effect would
 * be increased latency, so it is up to the caller to decide whether
 * or not to flush memory.
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 */
static inline void gxio_mpipe_equeue_flush(gxio_mpipe_equeue_t *equeue)
{
	/* Use "ring_idx = 0" and "count = 0" to "wake up" the eDMA ring. */
	MPIPE_EDMA_POST_REGION_VAL_t val = { {0} };
	/* Flush the write buffers. */
	__insn_flushwb();
	__gxio_mmio_write(equeue->dma_queue.post_region_addr, val.word);
}

/* Determine if a given edesc has been completed.
 *
 * Note that this function requires a "completion slot", and thus may
 * NOT be used with a "slot" from gxio_mpipe_equeue_reserve_fast() or
 * gxio_mpipe_equeue_try_reserve_fast().
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param completion_slot The completion slot used by the edesc.
 * @param update If true, and the desc does not appear to have completed
 * yet, then update any software cache of the hardware completion counter,
 * and check again.  This should normally be true.
 * @return True iff the given edesc has been completed.
 */
static inline int gxio_mpipe_equeue_is_complete(gxio_mpipe_equeue_t *equeue,
						int64_t completion_slot,
						int update)
{
	return __gxio_dma_queue_is_complete(&equeue->dma_queue,
					    completion_slot, update);
}

/* Set the snf (store and forward) size for an equeue.
 *
 * The snf size for an equeue defaults to 1536, and encodes the size
 * of the largest packet for which egress is guaranteed to avoid
 * transmission underruns and/or corrupt checksums under heavy load.
 *
 * The snf size affects a global resource pool which cannot support,
 * for example, all 24 equeues each requesting an snf size of 8K.
 *
 * To ensure that jumbo packets can be egressed properly, the snf size
 * should be set to the size of the largest possible packet, which
 * will usually be limited by the size of the app's largest buffer.
 *
 * This is a convenience wrapper around
 * gxio_mpipe_config_edma_ring_blks().
 *
 * This function should not be called after any egress has been done
 * on the equeue.
 *
 * @param equeue An egress queue initialized via gxio_mpipe_equeue_init().
 * @param size The snf size, in bytes.
 * @return Zero on success, negative error otherwise.
 */
static inline int gxio_mpipe_equeue_set_snf_size(gxio_mpipe_equeue_t *equeue,
						 size_t size)
{
	int blks = (size + 127) / 128;
	return gxio_mpipe_config_edma_ring_blks(equeue->context, equeue->ering,
						blks + 1, blks, 1);
}

/*****************************************************************
 *                        Link Management                         *
 ******************************************************************/

/*
 *
 * Functions for manipulating and sensing the state and configuration
 * of physical network links.
 *
 * @section gxio_mpipe_link_perm Link Permissions
 *
 * Opening a link (with gxio_mpipe_link_open()) requests a set of link
 * permissions, which control what may be done with the link, and potentially
 * what permissions may be granted to other processes.
 *
 * Data permission allows the process to receive packets from the link by
 * specifying the link's channel number in mPIPE packet distribution rules,
 * and to send packets to the link by using the link's channel number as
 * the target for an eDMA ring.
 *
 * Stats permission allows the process to retrieve link attributes (such as
 * the speeds it is capable of running at, or whether it is currently up), and
 * to read and write certain statistics-related registers in the link's MAC.
 *
 * Control permission allows the process to retrieve and modify link attributes
 * (so that it may, for example, bring the link up and take it down), and
 * read and write many registers in the link's MAC and PHY.
 *
 * Any permission may be requested as shared, which allows other processes
 * to also request shared permission, or exclusive, which prevents other
 * processes from requesting it.  In keeping with GXIO's typical usage in
 * an embedded environment, the defaults for all permissions are shared.
 *
 * Permissions are granted on a first-come, first-served basis, so if two
 * applications request an exclusive permission on the same link, the one
 * to run first will win.  Note, however, that some system components, like
 * the kernel Ethernet driver, may get an opportunity to open links before
 * any applications run.
 *
 * @section gxio_mpipe_link_names Link Names
 *
 * Link names are of the form gbe<em>number</em> (for Gigabit Ethernet),
 * xgbe<em>number</em> (for 10 Gigabit Ethernet), loop<em>number</em> (for
 * internal mPIPE loopback), or ilk<em>number</em>/<em>channel</em>
 * (for Interlaken links); for instance, gbe0, xgbe1, loop3, and
 * ilk0/12 are all possible link names.  The correspondence between
 * the link name and an mPIPE instance number or mPIPE channel number is
 * system-dependent; all links will not exist on all systems, and the set
 * of numbers used for a particular link type may not start at zero and may
 * not be contiguous.  Use gxio_mpipe_link_enumerate() to retrieve the set of
 * links which exist on a system, and always use gxio_mpipe_link_instance()
 * to determine which mPIPE controls a particular link.
 *
 * Note that in some cases, links may share hardware, such as PHYs, or
 * internal mPIPE buffers; in these cases, only one of the links may be
 * opened at a time.  This is especially common with xgbe and gbe ports,
 * since each xgbe port uses 4 SERDES lanes, each of which may also be
 * configured as one gbe port.
 *
 * @section gxio_mpipe_link_states Link States
 *
 * The mPIPE link management model revolves around three different states,
 * which are maintained for each link:
 *
 * 1. The <em>current</em> link state: is the link up now, and if so, at
 *    what speed?
 *
 * 2. The <em>desired</em> link state: what do we want the link state to be?
 *    The system is always working to make this state the current state;
 *    thus, if the desired state is up, and the link is down, we'll be
 *    constantly trying to bring it up, automatically.
 *
 * 3. The <em>possible</em> link state: what speeds are valid for this
 *    particular link?  Or, in other words, what are the capabilities of
 *    the link hardware?
 *
 * These link states are not, strictly speaking, related to application
 * state; they may be manipulated at any time, whether or not the link
 * is currently being used for data transfer.  However, for convenience,
 * gxio_mpipe_link_open() and gxio_mpipe_link_close() (or application exit)
 * can affect the link state.  These implicit link management operations
 * may be modified or disabled by the use of link open flags.
 *
 * From an application, you can use gxio_mpipe_link_get_attr()
 * and gxio_mpipe_link_set_attr() to manipulate the link states.
 * gxio_mpipe_link_get_attr() with ::GXIO_MPIPE_LINK_POSSIBLE_STATE
 * gets you the possible link state.  gxio_mpipe_link_get_attr() with
 * ::GXIO_MPIPE_LINK_CURRENT_STATE gets you the current link state.
 * Finally, gxio_mpipe_link_set_attr() and gxio_mpipe_link_get_attr()
 * with ::GXIO_MPIPE_LINK_DESIRED_STATE allow you to modify or retrieve
 * the desired link state.
 *
 * If you want to manage a link from a part of your application which isn't
 * involved in packet processing, you can use the ::GXIO_MPIPE_LINK_NO_DATA
 * flags on a gxio_mpipe_link_open() call.  This opens the link, but does
 * not request data permission, so it does not conflict with any exclusive
 * permissions which may be held by other processes.  You can then can use
 * gxio_mpipe_link_get_attr() and gxio_mpipe_link_set_attr() on this link
 * object to bring up or take down the link.
 *
 * Some links support link state bits which support various loopback
 * modes. ::GXIO_MPIPE_LINK_LOOP_MAC tests datapaths within the Tile
 * Processor itself; ::GXIO_MPIPE_LINK_LOOP_PHY tests the datapath between
 * the Tile Processor and the external physical layer interface chip; and
 * ::GXIO_MPIPE_LINK_LOOP_EXT tests the entire network datapath with the
 * aid of an external loopback connector.  In addition to enabling hardware
 * testing, such configuration can be useful for software testing, as well.
 *
 * When LOOP_MAC or LOOP_PHY is enabled, packets transmitted on a channel
 * will be received by that channel, instead of being emitted on the
 * physical link, and packets received on the physical link will be ignored.
 * Other than that, all standard GXIO operations work as you might expect.
 * Note that loopback operation requires that the link be brought up using
 * one or more of the GXIO_MPIPE_LINK_SPEED_xxx link state bits.
 *
 * Those familiar with previous versions of the MDE on TILEPro hardware
 * will notice significant similarities between the NetIO link management
 * model and the mPIPE link management model.  However, the NetIO model
 * was developed in stages, and some of its features -- for instance,
 * the default setting of certain flags -- were shaped by the need to be
 * compatible with previous versions of NetIO.  Since the features provided
 * by the mPIPE hardware and the mPIPE GXIO library are significantly
 * different than those provided by NetIO, in some cases, we have made
 * different choices in the mPIPE link management API.  Thus, please read
 * this documentation carefully before assuming that mPIPE link management
 * operations are exactly equivalent to their NetIO counterparts.
 */

/* An object used to manage mPIPE link state and resources. */
typedef struct {
	/* The overall mPIPE context. */
	gxio_mpipe_context_t *context;

	/* The channel number used by this link. */
	uint8_t channel;

	/* The MAC index used by this link. */
	uint8_t mac;
} gxio_mpipe_link_t;

/* Translate a link name to the instance number of the mPIPE shim which is
 *  connected to that link.  This call does not verify whether the link is
 *  currently available, and does not reserve any link resources;
 *  gxio_mpipe_link_open() must be called to perform those functions.
 *
 *  Typically applications will call this function to translate a link name
 *  to an mPIPE instance number; call gxio_mpipe_init(), passing it that
 *  instance number, to initialize the mPIPE shim; and then call
 *  gxio_mpipe_link_open(), passing it the same link name plus the mPIPE
 *  context, to configure the link.
 *
 * @param link_name Name of the link; see @ref gxio_mpipe_link_names.
 * @return The mPIPE instance number which is associated with the named
 *  link, or a negative error code (::GXIO_ERR_NO_DEVICE) if the link does
 *  not exist.
 */
extern int gxio_mpipe_link_instance(const char *link_name);

/* Retrieve one of this system's legal link names, and its MAC address.
 *
 * @param index Link name index.  If a system supports N legal link names,
 *  then indices between 0 and N - 1, inclusive, each correspond to one of
 *  those names.  Thus, to retrieve all of a system's legal link names,
 *  call this function in a loop, starting with an index of zero, and
 *  incrementing it once per iteration until -1 is returned.
 * @param link_name Pointer to the buffer which will receive the retrieved
 *  link name.  The buffer should contain space for at least
 *  ::GXIO_MPIPE_LINK_NAME_LEN bytes; the returned name, including the
 *  terminating null byte, will be no longer than that.
 * @param link_name Pointer to the buffer which will receive the retrieved
 *  MAC address.  The buffer should contain space for at least 6 bytes.
 * @return Zero if a link name was successfully retrieved; -1 if one was
 *  not.
 */
extern int gxio_mpipe_link_enumerate_mac(int index, char *link_name,
					 uint8_t *mac_addr);

/* Open an mPIPE link.
 *
 *  A link must be opened before it may be used to send or receive packets,
 *  and before its state may be examined or changed.  Depending up on the
 *  link's intended use, one or more link permissions may be requested via
 *  the flags parameter; see @ref gxio_mpipe_link_perm.  In addition, flags
 *  may request that the link's state be modified at open time.  See @ref
 *  gxio_mpipe_link_states and @ref gxio_mpipe_link_open_flags for more detail.
 *
 * @param link A link state object, which will be initialized if this
 *  function completes successfully.
 * @param context An initialized mPIPE context.
 * @param link_name Name of the link.
 * @param flags Zero or more @ref gxio_mpipe_link_open_flags, ORed together.
 * @return 0 if the link was successfully opened, or a negative error code.
 *
 */
extern int gxio_mpipe_link_open(gxio_mpipe_link_t *link,
				gxio_mpipe_context_t *context,
				const char *link_name, unsigned int flags);

/* Close an mPIPE link.
 *
 *  Closing a link makes it available for use by other processes.  Once
 *  a link has been closed, packets may no longer be sent on or received
 *  from the link, and its state may not be examined or changed.
 *
 * @param link A link state object, which will no longer be initialized
 *  if this function completes successfully.
 * @return 0 if the link was successfully closed, or a negative error code.
 *
 */
extern int gxio_mpipe_link_close(gxio_mpipe_link_t *link);

/* Return a link's channel number.
 *
 * @param link A properly initialized link state object.
 * @return The channel number for the link.
 */
static inline int gxio_mpipe_link_channel(gxio_mpipe_link_t *link)
{
	return link->channel;
}

/* Set a link attribute.
 *
 * @param link A properly initialized link state object.
 * @param attr An attribute from the set of @ref gxio_mpipe_link_attrs.
 * @param val New value of the attribute.
 * @return 0 if the attribute was successfully set, or a negative error
 *  code.
 */
extern int gxio_mpipe_link_set_attr(gxio_mpipe_link_t *link, uint32_t attr,
				    int64_t val);

///////////////////////////////////////////////////////////////////
//                             Timestamp                         //
///////////////////////////////////////////////////////////////////

/* Get the timestamp of mPIPE when this routine is called.
 *
 * @param context An initialized mPIPE context.
 * @param ts A timespec structure to store the current clock.
 * @return If the call was successful, zero; otherwise, a negative error
 *  code.
 */
extern int gxio_mpipe_get_timestamp(gxio_mpipe_context_t *context,
				    struct timespec64 *ts);

/* Set the timestamp of mPIPE.
 *
 * @param context An initialized mPIPE context.
 * @param ts A timespec structure to store the requested clock.
 * @return If the call was successful, zero; otherwise, a negative error
 *  code.
 */
extern int gxio_mpipe_set_timestamp(gxio_mpipe_context_t *context,
				    const struct timespec64 *ts);

/* Adjust the timestamp of mPIPE.
 *
 * @param context An initialized mPIPE context.
 * @param delta A signed time offset to adjust, in nanoseconds.
 * The absolute value of this parameter must be less than or
 * equal to 1000000000.
 * @return If the call was successful, zero; otherwise, a negative error
 *  code.
 */
extern int gxio_mpipe_adjust_timestamp(gxio_mpipe_context_t *context,
				       int64_t delta);

/** Adjust the mPIPE timestamp clock frequency.
 *
 * @param context An initialized mPIPE context.
 * @param ppb A 32-bit signed PPB (Parts Per Billion) value to adjust.
 * The absolute value of ppb must be less than or equal to 1000000000.
 * Values less than about 30000 will generally cause a GXIO_ERR_INVAL
 * return due to the granularity of the hardware that converts reference
 * clock cycles into seconds and nanoseconds.
 * @return If the call was successful, zero; otherwise, a negative error
 *  code.
 */
extern int gxio_mpipe_adjust_timestamp_freq(gxio_mpipe_context_t* context,
                                            int32_t ppb);

#endif /* !_GXIO_MPIPE_H_ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       