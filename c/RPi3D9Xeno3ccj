: printQueue-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f5-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=site-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 3,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{717EF4FA-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName: Site
cn: site-Display
instanceType: 4
distinguishedName: CN=site-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: site-Display
showInAdvancedViewOnly: TRUE

dn: CN=server-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6494-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName: Server
cn: server-Display
instanceType: 4
distinguishedName: CN=server-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: server-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSettings-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FB-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName: Settings
cn: nTDSSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSettings-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSettings-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd68-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName: FRS Settings
cn: nTFRSSettings-Display
instanceType: 4
distinguishedName: CN=nTFRSSettings-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSReplicaSet-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd69-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName: FRS Replica Set
cn: nTFRSReplicaSet-Display
instanceType: 4
distinguishedName: CN=nTFRSReplicaSet-Display,CN=409,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSReplicaSet-Display
showInAdvancedViewOnly: TRUE

dn: CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
instanceType: 4
distinguishedName: CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Container,CN=Schema,<Configuration NC Distinguished Name>
objectClass: container
showInAdvancedViewOnly: TRUE

dn: CN=server-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6494-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 0KHQtdGA0LLQtdGA
cn: server-Display
instanceType: 4
distinguishedName: CN=server-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: server-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FB-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: 0J/QsNGA0LDQvNC10YLRgNGL
cn: nTDSSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSDSA-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FC-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: 0J/QsNGA0LDQvNC10YLRgNGLINC60L7QvdGC0YDQvtC70LvQtdGA0LAg0LTQvtC80LXQvdCw
cn: nTDSDSA-Display
instanceType: 4
distinguishedName: CN=nTDSDSA-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSDSA-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSConnection-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717ef4fd-ac8d-11d0-b945-00c04fd8d5b0}
classDisplayName:: 0J/QvtC00LrQu9GO0YfQtdC90LjQtQ==
cn: nTDSConnection-Display
instanceType: 4
distinguishedName: CN=nTDSConnection-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSConnection-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd68-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: 0J/QsNGA0LDQvNC10YLRgNGLIEZSUw==
cn: nTFRSSettings-Display
instanceType: 4
distinguishedName: CN=nTFRSSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSReplicaSet-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd69-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: 0J3QsNCx0L7RgCDRgNC10L/Qu9C40LrQsNGG0LjQuCBGUlM=
cn: nTFRSReplicaSet-Display
instanceType: 4
distinguishedName: CN=nTFRSReplicaSet-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSReplicaSet-Display
showInAdvancedViewOnly: TRUE

dn: CN=subnet-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{9da6fd62-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: 0J/QvtC00YHQtdGC0Yw=
cn: subnet-Display
instanceType: 4
distinguishedName: CN=subnet-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: subnet-Display
showInAdvancedViewOnly: TRUE

dn: CN=siteLink-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30561-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: 0KHQstGP0LfRjCDRgdCw0LnRgtC+0LI=
cn: siteLink-Display
instanceType: 4
distinguishedName: CN=siteLink-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: siteLink-Display
showInAdvancedViewOnly: TRUE

dn: CN=siteLinkBridge-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30562-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: 0JzQvtGB0YIg0YHQstGP0LfQtdC5INGB0LDQudGC0L7Qsg==
cn: siteLinkBridge-Display
instanceType: 4
distinguishedName: CN=siteLinkBridge-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: siteLinkBridge-Display
showInAdvancedViewOnly: TRUE

dn: CN=interSiteTransport-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6491-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 0JzQtdC20YHQsNC50YLQvtCy0YvQuSDRgtGA0LDQvdGB0L/QvtGA0YI=
cn: interSiteTransport-Display
instanceType: 4
distinguishedName: CN=interSiteTransport-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: interSiteTransport-Display
showInAdvancedViewOnly: TRUE

dn: CN=licensingSiteSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717ef500-ac8d-11d0-b945-00c04fd8d5b0}
classDisplayName:: 0J/QsNGA0LDQvNC10YLRgNGLINC70LjRhtC10L3Qt9C40YDQvtCy0LDQvdC40Y8g0YHQsNC50YLQsA==
cn: licensingSiteSettings-Display
instanceType: 4
distinguishedName: CN=licensingSiteSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: licensingSiteSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSiteSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{2f280288-bb6d-11d0-b948-00c04fd8d5b0}
classDisplayName:: 0J/QsNGA0LDQvNC10YLRgNGLINGB0LDQudGC0LA=
cn: nTDSSiteSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSiteSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSiteSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSMember-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd6a-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: 0KfQu9C10L0gRlJT
cn: nTFRSMember-Display
instanceType: 4
distinguishedName: CN=nTFRSMember-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSMember-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSubscriber-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d3055f-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: 0J/QvtC00L/QuNGB0YfQuNC6IEZSUw==
cn: nTFRSSubscriber-Display
instanceType: 4
distinguishedName: CN=nTFRSSubscriber-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSubscriber-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSubscriptions-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30560-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: 0J/QvtC00L/QuNGB0LrQsCDQvdCwIEZSUw==
cn: nTFRSSubscriptions-Display
instanceType: 4
distinguishedName: CN=nTFRSSubscriptions-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSubscriptions-Display
showInAdvancedViewOnly: TRUE

dn: CN=organizationalUnit-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd63-c63b-11d0-b94d-00c04fd8d5b0}
attributeDisplayNames:: bWFuYWdlZEJ5LNCj0L/RgNCw0LLQu9GP0LXRgtGB0Y8=
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: b3Us0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0J/QvtC00YDQsNC30LTQtdC70LXQvdC40LU=
cn: organizationalUnit-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=organizationalUnit-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: organizationalUnit-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=container-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{5a96f2d8-736e-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0JrQvtC90YLQtdC50L3QtdGA
cn: container-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=container-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: container-Display
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=rpcContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30572-9911-11d1-b9af-00c04fd8d5b0}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0KHQu9GD0LbQsdGLIFJQQw==
cn: rpcContainer-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=rpcContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: rpcContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=trustedDomain-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd67-c63b-11d0-b94d-00c04fd8d5b0}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0JTQvtCy0LXRgNC10L3QvdGL0Lkg0LTQvtC80LXQvQ==
cn: trustedDomain-Display
instanceType: 4
distinguishedName: CN=trustedDomain-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: trustedDomain-Display
showInAdvancedViewOnly: TRUE

dn: CN=volume-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6490-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: dU5DTmFtZSzQodC10YLQtdCy0L7QuSDQv9GD0YLRjA==
attributeDisplayNames:: a2V5d29yZHMs0JrQu9GO0YfQtdCy0YvQtSDRgdC70L7QstCw
attributeDisplayNames:: bWFuYWdlZEJ5LNCj0L/RgNCw0LLQu9GP0LXRgtGB0Y8=
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0J7QsdGJ0LDRjyDQv9Cw0L/QutCw
cn: volume-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=volume-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: volume-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f3-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=mSMQQueue-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{e62f8206-b71c-11d1-808d-00a024c48131}
adminPropertyPages: 1,{e62f8206-b71c-11d1-808d-00a024c48131}
classDisplayName:: 0J7Rh9C10YDQtdC00YwgTVNNUQ==
cn: mSMQQueue-Display
creationWizard: {E62F8206-B71C-11D1-808D-00A024C48131}
iconPath: 0,mqsnap.dll,-251
instanceType: 4
distinguishedName: CN=mSMQQueue-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQQueue-Display
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=mSMQConfiguration-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{e62f8208-b71c-11d1-808d-00a024c48131}
adminPropertyPages: 1,{e62f8208-b71c-11d1-808d-00a024c48131}
classDisplayName:: 0J3QsNGB0YLRgNC+0LnQutCwIE1TTVE=
cn: mSMQConfiguration-Display
iconPath: 0,mqsnap.dll,-252
instanceType: 4
distinguishedName: CN=mSMQConfiguration-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQConfiguration-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQEnterpriseSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{2E4B37AB-CC8B-11D1-9C85-006008764D0E}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{2E4B37AB-CC8B-11D1-9C85-006008764D0E}
classDisplayName:: TVNNUSDQv9GA0LXQtNC/0YDQuNGP0YLQuNGP
cn: mSMQEnterpriseSettings-Display
iconPath: 0,mqsnap.dll,-253
instanceType: 4
distinguishedName: CN=mSMQEnterpriseSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQEnterpriseSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQMigratedUser-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{fc5bf656-0b7f-11d3-883f-006094eb6406}
adminPropertyPages: 1,{fc5bf656-0b7f-11d3-883f-006094eb6406}
classDisplayName:: 0J7QsdC90L7QstC70LXQvdC90YvQuSDQv9C+0LvRjNC30L7QstCw0YLQtdC70YwgTVNNUQ==
cn: mSMQMigratedUser-Display
instanceType: 4
distinguishedName: CN=mSMQMigratedUser-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQMigratedUser-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQSiteLink-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{87b31390-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{87b31390-d46d-11d1-8091-00a024c48131}
classDisplayName:: 0JzQsNGA0YjRgNGD0YIgTVNNUQ==
cn: mSMQSiteLink-Display
creationWizard: {87b31390-d46d-11d1-8091-00a024c48131}
iconPath: 0,mqsnap.dll,-254
instanceType: 4
distinguishedName: CN=mSMQSiteLink-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQSiteLink-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{d251b000-d46e-11d1-8091-00a024c48131}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{d251b000-d46e-11d1-8091-00a024c48131}
classDisplayName:: 0J/QsNGA0LDQvNC10YLRgNGLIE1TTVE=
cn: mSMQSettings-Display
iconPath: 0,mqsnap.dll,-255
instanceType: 4
distinguishedName: CN=mSMQSettings-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=remoteStorageServicePoint-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu:: MCwm0KPQv9GA0LDQstC70LXQvdC40LUuLi4sUnNBZG1pbi5tc2M=
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0KHQu9GD0LbQsdCwINCy0L3QtdGI0L3QuNGFINGF0YDQsNC90LjQu9C40Yk=
cn: remoteStorageServicePoint-Display
instanceType: 4
distinguishedName: CN=remoteStorageServicePoint-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: remoteStorageServicePoint-Display
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=default-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 0,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
cn: default-Display
instanceType: 4
distinguishedName: CN=default-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: default-Display
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=sitesContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 0JrQvtC90YLQtdC50L3QtdGAINGB0LDQudGC0L7Qsg==
cn: sitesContainer-Display
instanceType: 4
distinguishedName: CN=sitesContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: sitesContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=interSiteTransportContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 0JrQvtC90YLQtdC50L3QtdGAINC80LXQttGB0LDQudGC0L7QstC+0LPQviDRgtGA0LDQvdGB0L/QvtGA0YLQsA==
cn: interSiteTransportContainer-Display
instanceType: 4
distinguishedName: CN=interSiteTransportContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: interSiteTransportContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=subnetContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 0JrQvtC90YLQtdC50L3QtdGAINC/0L7QtNGB0LXRgtC10Lk=
cn: subnetContainer-Display
instanceType: 4
distinguishedName: CN=subnetContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: subnetContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=serversContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 0JrQvtC90YLQtdC50L3QtdGAINGB0LXRgNCy0LXRgNC+0LI=
cn: serversContainer-Display
instanceType: 4
distinguishedName: CN=serversContainer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: serversContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSService-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 0KHQu9GD0LbQsdCwINC60LDRgtCw0LvQvtCz0L7QsiBBY3RpdmUgRGlyZWN0b3J5
cn: nTDSService-Display
instanceType: 4
distinguishedName: CN=nTDSService-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSService-Display
showInAdvancedViewOnly: TRUE

dn: CN=queryPolicy-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 0J/QvtC70LjRgtC40LrQsCDQt9Cw0L/RgNC+0YHQsA==
cn: queryPolicy-Display
instanceType: 4
distinguishedName: CN=queryPolicy-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: queryPolicy-Display
showInAdvancedViewOnly: TRUE

dn: CN=foreignSecurityPrincipal-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6486-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0JDQtNC80LjQvdC40YHRgtGA0LDRgtC+0YAg0LLQvdC10YjQvdC10Lkg0LHQtdC30L7Qv9Cw0YHQvdC+0YHRgtC4
cn: foreignSecurityPrincipal-Display
instanceType: 4
distinguishedName: CN=foreignSecurityPrincipal-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: foreignSecurityPrincipal-Display
showInAdvancedViewOnly: TRUE

dn: CN=pKICertificateTemplate-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 0,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
adminPropertyPages: 3,{4e40f770-369c-11d0-8922-00a024ab2dbb}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0KjQsNCx0LvQvtC9INGB0LXRgNGC0LjRhNC40LrQsNGC0LA=
cn: pKICertificateTemplate-Display
contextMenu: 0,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
iconPath: 0,capesnpn.dll,-227
instanceType: 4
distinguishedName: CN=pKICertificateTemplate-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: pKICertificateTemplate-Display
shellPropertyPages: 1,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
showInAdvancedViewOnly: TRUE

dn: CN=DS-UI-Default-Settings,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
cn: DS-UI-Default-Settings
dSUIAdminNotification: 1,{E62F8206-B71C-11D1-808D-00A024C48131}
instanceType: 4
distinguishedName: CN=DS-UI-Default-Settings,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=DS-UI-Settings,CN=Schema,<Configuration NC Distinguished Name>
objectClass: dSUISettings
name: DS-UI-Default-Settings
showInAdvancedViewOnly: TRUE

dn: CN=IntellimirrorGroup-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminPropertyPages: 1,{C641CF88-892F-11d1-BBEB-0060081692B3}
classDisplayName:: 0JPRgNGD0L/Qv9CwIEludGVsbGlNaXJyb3I=
cn: IntellimirrorGroup-Display
instanceType: 4
distinguishedName: CN=IntellimirrorGroup-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: IntellimirrorGroup-Display
shellPropertyPages: 1,{C641CF88-892F-11d1-BBEB-0060081692B3}
showInAdvancedViewOnly: TRUE

dn: CN=IntellimirrorSCP-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminPropertyPages: 3,{4e40f770-369c-11d0-8922-00a024ab2dbb}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{AC409538-741C-11d1-BBE6-0060081692B3}
classDisplayName:: 0KHQu9GD0LbQsdCwIEludGVsbGlNaXJyb3I=
cn: IntellimirrorSCP-Display
instanceType: 4
distinguishedName: CN=IntellimirrorSCP-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: IntellimirrorSCP-Display
shellPropertyPages: 1,{AC409538-741C-11d1-BBE6-0060081692B3}
showInAdvancedViewOnly: TRUE

dn: CN=user-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 8,{0910dd01-df8c-11d1-ae27-00c04fa35813}
adminPropertyPages: 7,{8c5b1b50-d46e-11d1-8091-00a024c48131}
adminPropertyPages: 6,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 5,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 4,{FD57D295-4FD9-11D1-854E-00C04FC31FD3}
adminPropertyPages: 3,{B52C1E50-1DD2-11D1-BC43-00C04FC31FD3}
adminPropertyPages: 1,{6dfe6485-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2Us0JDQtNGA0LXRgSDRgdGC0YDQsNC90LjRhtGLINCyINCY0L3RgtC10YDQvdC10YLQtQ==
attributeDisplayNames:: dXNlclByaW5jaXBhbE5hbWUs0JjQvNGPINC00LvRjyDQstGF0L7QtNCw
attributeDisplayNames:: dXNlcldvcmtzdGF0aW9ucyzQoNCw0LHQvtGH0LjQtSDRgdGC0LDQvdGG0LjQuCDQtNC70Y8g0LLRhdC+0LTQsCDQsiDRgdC40YHRgtC10LzRgw==
attributeDisplayNames:: ZGlzcGxheU5hbWUs0JLRi9Cy0L7QtNC40LzQvtC1INC40LzRjw==
attributeDisplayNames:: dXJsLNCQ0LTRgNC10YEg0YHRgtGA0LDQvdC40YbRiyDQsiDQmNC90YLQtdGA0L3QtdGC0LUgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: dGl0bGUs0JTQvtC70LbQvdC+0YHRgtGM
attributeDisplayNames:: dGVsZXhOdW1iZXIs0J3QvtC80LXRgCDRgtC10LvQtdC60YHQsCAo0L/RgNC+0YfQuNC1KQ==
attributeDisplayNames:: dGVsZXBob25lTnVtYmVyLNCd0L7QvNC10YAg0YLQtdC70LXRhNC+0L3QsA==
attributeDisplayNames:: c3RyZWV0QWRkcmVzcyzQkNC00YDQtdGBLCDRg9C70LjRhtCw
attributeDisplayNames:: c3Qs0J7QsdC70LDRgdGC0Yw=
attributeDisplayNames:: c24s0KTQsNC80LjQu9C40Y8=
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUs0JjQvNGPINCy0YXQvtC00LAgKNC/0YDQtdC0LVdpbmRvd3MgMjAwMCk=
attributeDisplayNames:: cHJpbWFyeVRlbGV4TnVtYmVyLNCd0L7QvNC10YAg0YLQtdC70LXQutGB0LA=
attributeDisplayNames:: cHJpbWFyeUludGVybmF0aW9uYWxJU0ROTnVtYmVyLNCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC90L7QvNC10YAgSVNETg==
attributeDisplayNames:: cG9zdE9mZmljZUJveCzQn9C+0YfRgtC+0LLRi9C5INGP0YnQuNC6
attributeDisplayNames:: cG9zdGFsQ29kZSzQn9C+0YfRgtC+0LLRi9C5INC40L3QtNC10LrRgQ==
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUs0JrQvtC80L3QsNGC0LA=
attributeDisplayNames:: cGVyc29uYWxUaXRsZSzQotC40YLRg9C7LCDQt9Cy0LDQvdC40LU=
attributeDisplayNames:: cGFnZXIs0J3QvtC80LXRgCDQv9C10LnQtNC20LXRgNCw
attributeDisplayNames:: b3RoZXJUZWxlcGhvbmUs0J3QvtC80LXRgCDRgtC10LvQtdGE0L7QvdCwICjQv9GA0L7Rh9C40LUp
attributeDisplayNames:: b3RoZXJQYWdlcizQndC+0LzQtdGAINC/0LXQudC00LbQtdGA0LAgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: b3RoZXJNb2JpbGUs0J3QvtC80LXRgCDRgdC+0YLQvtCy0L7Qs9C+INGC0LXQu9C10YTQvtC90LAgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: b3RoZXJNYWlsYm94LNCt0LvQtdC60YLRgNC+0L3QvdCw0Y8g0L/QvtGH0YLQsCAo0L/RgNC+0YfQuNC1KQ==
attributeDisplayNames:: b3RoZXJJcFBob25lLNCi0LXQu9C10YTQvtC90L3Ri9C5INC90L7QvNC10YAgSVAgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: b3RoZXJIb21lUGhvbmUs0JTQvtC80LDRiNC90LjQuSDRgtC10LvQtdGE0L7QvSAo0L/RgNC+0YfQuNC1KQ==
attributeDisplayNames:: b3RoZXJGYWNzaW1pbGVUZWxlcGhvbmVOdW1iZXIs0J3QvtC80LXRgCDRhNCw0LrRgdCwICjQv9GA0L7Rh9C40LUp
attributeDisplayNames:: aW5mbyzQn9GA0LjQvNC10YfQsNC90LjRjw==
attributeDisplayNames:: bW9iaWxlLNCd0L7QvNC10YAg0YHQvtGC0L7QstC+0LPQviDRgtC10LvQtdGE0L7QvdCw
attributeDisplayNames:: bWlkZGxlTmFtZSzQodGA0LXQtNC90Y/RjyDRh9Cw0YHRgtGMINC40LzQtdC90LgsINC+0YLRh9C10YHRgtCy0L4=
attributeDisplayNames:: bWVtYmVyT2Ys0KfQu9C10L3RgdGC0LLQviDQsiDQs9GA0YPQv9C/0LDRhQ==
attributeDisplayNames:: bWFuYWdlcizQoNGD0LrQvtCy0L7QtNC40YLQtdC70Yw=
attributeDisplayNames:: bWFpbCzQrdC70LXQutGC0YDQvtC90L3QsNGPINC/0L7Rh9GC0LA=
attributeDisplayNames:: bCzQk9C+0YDQvtC0
attributeDisplayNames:: aXBQaG9uZSzQotC10LvQtdGE0L7QvdC90YvQuSDQvdC+0LzQtdGAIElQ
attributeDisplayNames:: aW50ZXJuYXRpb25hbElTRE5OdW1iZXIs0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0L3QvtC80LXRgCBJU0ROICjQv9GA0L7Rh9C40LUp
attributeDisplayNames:: aW5pdGlhbHMs0JjQvdC40YbQuNCw0LvRiw==
attributeDisplayNames:: aG9tZVBvc3RhbEFkZHJlc3Ms0JTQvtC80LDRiNC90LjQuSDQsNC00YDQtdGB
attributeDisplayNames:: aG9tZVBob25lLNCU0L7QvNCw0YjQvdC40Lkg0YLQtdC70LXRhNC+0L0=
attributeDisplayNames:: aG9tZURyaXZlLNCU0LjRgdC6INC00L7QvNCw0YjQvdC10Lkg0L/QsNC/0LrQuA==
attributeDisplayNames:: aG9tZURpcmVjdG9yeSzQlNC+0LzQsNGI0L3Rj9GPINC/0LDQv9C60LA=
attributeDisplayNames:: Z2l2ZW5OYW1lLNCY0LzRjw==
attributeDisplayNames:: Z2VuZXJhdGlvblF1YWxpZmllcizQodGD0YTRhNC40LrRgSDQv9C+0LrQvtC70LXQvdC40Y8=
attributeDisplayNames:: ZmFjc2ltaWxlVGVsZXBob25lTnVtYmVyLNCd0L7QvNC10YAg0YTQsNC60YHQsA==
attributeDisplayNames:: ZW1wbG95ZWVJRCzQmtC+0LQg0YHQvtGC0YDRg9C00L3QuNC60LA=
attributeDisplayNames:: ZGl2aXNpb24s0J7RgtC00LXQuw==
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsWDUwMCDRgNCw0LfQu9C40YfQsNGO0YnQtdC10YHRjyDQuNC80Y8=
attributeDisplayNames:: ZGlyZWN0UmVwb3J0cyzQn9GA0Y/QvNGL0LUg0L/QvtC00YfQuNC90LXQvdC90YvQtQ==
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: ZGVwYXJ0bWVudCzQntGC0LTQtdC70LXQvdC40LU=
attributeDisplayNames:: Y29tcGFueSzQntGA0LPQsNC90LjQt9Cw0YbQuNGP
attributeDisplayNames:: Y29tbWVudCzQmtC+0LzQvNC10L3RgtCw0YDQuNC5
attributeDisplayNames:: Y28s0KHRgtGA0LDQvdCw
attributeDisplayNames:: YyzQodC+0LrRgNCw0YnQtdC90L3QvtC1INC+0LHQvtC30L3QsNGH0LXQvdC40LUg0YHRgtGA0LDQvdGL
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
attributeDisplayNames:: YXNzaXN0YW50LNCf0L7QvNC+0YnQvdC40Lo=
classDisplayName:: 0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GM
cn: user-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=user-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: user-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ed-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=group-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6489-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2Us0JDQtNGA0LXRgSDRgdGC0YDQsNC90LjRhtGLINCyINCY0L3RgtC10YDQvdC10YLQtQ==
attributeDisplayNames:: dXJsLNCQ0LTRgNC10YEg0YHRgtGA0LDQvdC40YbRiyDQsiDQmNC90YLQtdGA0L3QtdGC0LUgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUs0JjQvNGPINCz0YDRg9C/0L/RiyAo0L/RgNC10LQtV2luZG93cyAyMDAwKQ==
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUs0JrQvtC80L3QsNGC0LA=
attributeDisplayNames:: aW5mbyzQn9GA0LjQvNC10YfQsNC90LjRjw==
attributeDisplayNames:: bWVtYmVyLNCn0LvQtdC90Ysg0LPRgNGD0L/Qv9GL
attributeDisplayNames:: bWFuYWdlZEJ5LNCj0L/RgNCw0LLQu9GP0LXRgtGB0Y8=
attributeDisplayNames:: bCzQk9C+0YDQvtC0
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsWDUwMCDRgNCw0LfQu9C40YfQsNGO0YnQtdC10YHRjyDQuNC80Y8=
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: YyzQodC+0LrRgNCw0YnQtdC90L3QvtC1INC+0LHQvtC30L3QsNGH0LXQvdC40LUg0YHRgtGA0LDQvdGL
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0JPRgNGD0L/Qv9Cw
cn: group-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=group-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: group-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ee-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=domainDNS-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe648c-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0JTQvtC80LXQvQ==
cn: domainDNS-Display
instanceType: 4
distinguishedName: CN=domainDNS-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: domainDNS-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ef-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=contact-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{c5f1645c-c8c9-11d0-bcdb-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2Us0JDQtNGA0LXRgSDRgdGC0YDQsNC90LjRhtGLINCyINCY0L3RgtC10YDQvdC10YLQtQ==
attributeDisplayNames:: dXJsLNCQ0LTRgNC10YEg0YHRgtGA0LDQvdC40YbRiyDQsiDQmNC90YLQtdGA0L3QtdGC0LUgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: dGl0bGUs0JTQvtC70LbQvdC+0YHRgtGM
attributeDisplayNames:: dGVsZXhOdW1iZXIs0J3QvtC80LXRgCDRgtC10LvQtdC60YHQsCAo0L/RgNC+0YfQuNC1KQ==
attributeDisplayNames:: dGVsZXBob25lTnVtYmVyLNCd0L7QvNC10YAg0YLQtdC70LXRhNC+0L3QsA==
attributeDisplayNames:: c3RyZWV0QWRkcmVzcyzQkNC00YDQtdGBLCDRg9C70LjRhtCw
attributeDisplayNames:: c3Qs0J7QsdC70LDRgdGC0Yw=
attributeDisplayNames:: c24s0KTQsNC80LjQu9C40Y8=
attributeDisplayNames:: cHJpbWFyeVRlbGV4TnVtYmVyLNCd0L7QvNC10YAg0YLQtdC70LXQutGB0LA=
attributeDisplayNames:: cHJpbWFyeUludGVybmF0aW9uYWxJU0ROTnVtYmVyLNCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC90L7QvNC10YAgSVNETg==
attributeDisplayNames:: cG9zdE9mZmljZUJveCzQn9C+0YfRgtC+0LLRi9C5INGP0YnQuNC6
attributeDisplayNames:: cG9zdGFsQ29kZSzQn9C+0YfRgtC+0LLRi9C5INC40L3QtNC10LrRgQ==
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUs0JrQvtC80L3QsNGC0LA=
attributeDisplayNames:: cGVyc29uYWxUaXRsZSzQotC40YLRg9C7LCDQt9Cy0LDQvdC40LU=
attributeDisplayNames:: cGFnZXIs0J3QvtC80LXRgCDQv9C10LnQtNC20LXRgNCw
attributeDisplayNames:: b3RoZXJUZWxlcGhvbmUs0J3QvtC80LXRgCDRgtC10LvQtdGE0L7QvdCwICjQv9GA0L7Rh9C40LUp
attributeDisplayNames:: b3RoZXJQYWdlcizQndC+0LzQtdGAINC/0LXQudC00LbQtdGA0LAgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: b3RoZXJNb2JpbGUs0J3QvtC80LXRgCDRgdC+0YLQvtCy0L7Qs9C+INGC0LXQu9C10YTQvtC90LAgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: b3RoZXJNYWlsYm94LNCt0LvQtdC60YLRgNC+0L3QvdCw0Y8g0L/QvtGH0YLQsCAo0L/RgNC+0YfQuNC1KQ==
attributeDisplayNames:: b3RoZXJJcFBob25lLNCi0LXQu9C10YTQvtC90L3Ri9C5INC90L7QvNC10YAgSVAgKNC/0YDQvtGH0LjQtSk=
attributeDisplayNames:: b3RoZXJIb21lUGhvbmUs0JTQvtC80LDRiNC90LjQuSDRgtC10LvQtdGE0L7QvSAo0L/RgNC+0YfQuNC1KQ==
attributeDisplayNames:: b3RoZXJGYWNzaW1pbGVUZWxlcGhvbmVOdW1iZXIs0J3QvtC80LXRgCDRhNCw0LrRgdCwICjQv9GA0L7Rh9C40LUp
attributeDisplayNames:: bW9iaWxlLNCd0L7QvNC10YAg0YHQvtGC0L7QstC+0LPQviDRgtC10LvQtdGE0L7QvdCw
attributeDisplayNames:: bWlkZGxlTmFtZSzQodGA0LXQtNC90Y/RjyDRh9Cw0YHRgtGMINC40LzQtdC90LgsINC+0YLRh9C10YHRgtCy0L4=
attributeDisplayNames:: bWVtYmVyT2Ys0KfQu9C10L3RgdGC0LLQviDQsiDQs9GA0YPQv9C/0LDRhQ==
attributeDisplayNames:: bWFuYWdlcizQoNGD0LrQvtCy0L7QtNC40YLQtdC70Yw=
attributeDisplayNames:: bWFpbCzQrdC70LXQutGC0YDQvtC90L3QsNGPINC/0L7Rh9GC0LA=
attributeDisplayNames:: bCzQk9C+0YDQvtC0
attributeDisplayNames:: aXBQaG9uZSzQotC10LvQtdGE0L7QvdC90YvQuSDQvdC+0LzQtdGAIElQ
attributeDisplayNames:: aW50ZXJuYXRpb25hbElTRE5OdW1iZXIs0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0L3QvtC80LXRgCBJU0ROICjQv9GA0L7Rh9C40LUp
attributeDisplayNames:: aW5mbyzQn9GA0LjQvNC10YfQsNC90LjRjw==
attributeDisplayNames:: aW5pdGlhbHMs0JjQvdC40YbQuNCw0LvRiw==
attributeDisplayNames:: aG9tZVBvc3RhbEFkZHJlc3Ms0JTQvtC80LDRiNC90LjQuSDQsNC00YDQtdGB
attributeDisplayNames:: aG9tZVBob25lLNCU0L7QvNCw0YjQvdC40Lkg0YLQtdC70LXRhNC+0L0=
attributeDisplayNames:: Z2l2ZW5OYW1lLNCY0LzRjw==
attributeDisplayNames:: Z2VuZXJhdGlvblF1YWxpZmllcizQodGD0YTRhNC40LrRgSDQv9C+0LrQvtC70LXQvdC40Y8=
attributeDisplayNames:: ZmFjc2ltaWxlVGVsZXBob25lTnVtYmVyLNCd0L7QvNC10YAg0YTQsNC60YHQsA==
attributeDisplayNames:: ZW1wbG95ZWVJRCzQmtC+0LQg0YHQvtGC0YDRg9C00L3QuNC60LA=
attributeDisplayNames:: ZGl2aXNpb24s0J7RgtC00LXQuw==
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsWDUwMCDRgNCw0LfQu9C40YfQsNGO0YnQtdC10YHRjyDQuNC80Y8=
attributeDisplayNames:: ZGlzcGxheU5hbWUs0JLRi9Cy0L7QtNC40LzQvtC1INC40LzRjw==
attributeDisplayNames:: ZGlyZWN0UmVwb3J0cyzQn9GA0Y/QvNGL0LUg0L/QvtC00YfQuNC90LXQvdC90YvQtQ==
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: ZGVwYXJ0bWVudCzQntGC0LTQtdC70LXQvdC40LU=
attributeDisplayNames:: Y29tcGFueSzQntGA0LPQsNC90LjQt9Cw0YbQuNGP
attributeDisplayNames:: Y29tbWVudCzQmtC+0LzQvNC10L3RgtCw0YDQuNC5
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
attributeDisplayNames:: Y28s0KHRgtGA0LDQvdCw
attributeDisplayNames:: YyzQodC+0LrRgNCw0YnQtdC90L3QvtC1INC+0LHQvtC30L3QsNGH0LXQvdC40LUg0YHRgtGA0LDQvdGL
attributeDisplayNames:: YXNzaXN0YW50LNCf0L7QvNC+0YnQvdC40Lo=
classDisplayName:: 0JrQvtC90YLQsNC60YI=
cn: contact-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=contact-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: contact-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f0-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=domainPolicy-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{AAD30A04-E1D0-11d0-B859-00A024CDD4DE}
adminPropertyPages: 1,{6dfe648e-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 0J/QvtC70LjRgtC40LrQsCDQtNC+0LzQtdC90LA=
cn: domainPolicy-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=domainPolicy-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: domainPolicy-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f1-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=localPolicy-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{AAD30A04-E1D0-11d0-B859-00A024CDD4DE}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe648f-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 0JvQvtC60LDQu9GM0L3QsNGPINC/0L7Qu9C40YLQuNC60LA=
cn: localPolicy-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=localPolicy-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: localPolicy-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f2-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=serviceAdministrationPoint-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{c5f1645d-c8c9-11d0-bcdb-00c04fd8d5b6}
classDisplayName:: 0KHQu9GD0LbQsdCw
cn: serviceAdministrationPoint-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=serviceAdministrationPoint-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: serviceAdministrationPoint-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{c5f1645e-c8c9-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=computer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 10,{0F65B1BF-740F-11d1-BBE6-0060081692B3}
adminPropertyPages: 6,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 5,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 4,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{6dfe6492-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUs0JjQvNGPINC60L7QvNC/0YzRjtGC0LXRgNCwICjQv9GA0LXQtC1XaW5kb3dzIDIwMDAp
attributeDisplayNames:: b3BlcmF0aW5nU3lzdGVtVmVyc2lvbizQktC10YDRgdC40Y8g0L7Qv9C10YDQsNGG0LjQvtC90L3QvtC5INGB0LjRgdGC0LXQvNGL
attributeDisplayNames:: b3BlcmF0aW5nU3lzdGVtLNCe0L/QtdGA0LDRhtC40L7QvdC90LDRjyDRgdC40YHRgtC10LzQsA==
attributeDisplayNames:: bWFuYWdlZEJ5LNCj0L/RgNCw0LLQu9GP0LXRgtGB0Y8=
attributeDisplayNames:: ZGVzY3JpcHRpb24s0J7Qv9C40YHQsNC90LjQtQ==
attributeDisplayNames:: Y24s0J/QvtC70L3QvtC1INC40LzRjw==
classDisplayName:: 0JrQvtC80L/RjNGO0YLQtdGA
cn: computer-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
createWizardExt: 1,{D6D8C25A-4E83-11d2-8424-00C04FA372D4}
instanceType: 4
distinguishedName: CN=computer-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: computer-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f4-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=printQueue-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6493-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: dmVyc2lvbk51bWJlcizQktC10YDRgdC40Y8g0L7QsdGK0LXQutGC0LA=
attributeDisplayNames:: dXJsLNCQ0LTRgNC10YEg0YHRgtGA0LDQvdC40YbRiyDQsiDQmNC90YLQtdGA0L3QtdGC0LU=
attributeDisplayNames:: c2VydmVyTmFtZSzQmNC80Y8g0YHQtdGA0LLQtdGA0LA=
attributeDisplayNames:: cHJpbnRTdGFwbGluZ1N1cHBvcnRlZCzQn9C+0LTQtNC10YDQttC60LAg0YHRiNC40LLQsNC90LjRjw==
attributeDisplayNames:: cHJpbnRTaGFyZU5hbWUs0JjQvNGPINC+0LHRidC10LPQviDRgNC10YHRg9GA0YHQsA==
attributeDisplayNames:: cHJpbnRQYWdlc1Blck1pbnV0ZSzQodGC0YDQsNC90LjRhiDQsiDQvNC40L3Rg9GC0YM=
attributeDisplayNames:: cHJpbnRSYXRlVW5pdCzQldC00LjQvdC40YbRiyDRgdC60L7RgNC+0YHRgtC4
attributeDisplayNames:: cHJpbnRSYXRlLNCh0LrQvtGA0L7RgdGC0Yw=
attributeDisplayNames:: cHJpbnRPd25lcizQmNC80Y8g0LLQu9Cw0LTQtdC70YzRhtCw
attributeDisplayNames:: cHJpbnRNZW1vcnks0KPRgdGC0LDQvdC+0LLQu9C10L3QvdCw0Y8g0L/QsNC80Y/RgtGM
attributeDisplayNames:: cHJpbnRNZWRpYVN1cHBvcnRlZCzQn9C+0LTQtNC10YDQttC40LLQsNC10LzRi9C1INCy0LjQtNGLINCx0YPQvNCw0LPQuA==
attributeDisplayNames:: cHJpbnRNZWRpYVJlYWR5LNCY0YHQv9C+0LvRjNC30YPQtdC80LDRjyDQsdGD0LzQsNCz0LA=
attributeDisplayNames:: cHJpbnRNYXhSZXNvbHV0aW9uU3VwcG9ydGVkLNCc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDRgNCw0LfRgNC10YjQtdC90LjQtQ==
attributeDisplayNames:: cHJpbnRMYW5ndWFnZSzQo9C/0YDQsNCy0LvRj9GO0YnQuNC5INGP0LfRi9C6INC/0YDQuNC90YLQtdGA0LA=
attributeDisplayNames:: cHJpbnRlck5hbWUs0J/QvtC70L3QvtC1INC40LzRjw==
attributeDisplayNames:: cHJpbnREdXBsZXhTdXBwb3J0ZWQs0J/QvtC00LTQtdGA0LbQutCwINC00LLRg9GB0YLQvtGA0L7QvdC90LXQuSDQv9C10YfQsNGC0Lg=
attributeDisplayNames:: cHJpbnRDb2xvcizQn9C+0LTQtNC10YDQttC60LAg0YbQstC10YLQvdC+0Lkg0L/QtdGH0LDRgtC4
attributeDisplayNames:: cHJpbnRDb2xsYXRlLNCf0L7QtNC00LXRgNC20LrQsCDRgNCw0LfQsdC+0YDQsCDQv9C+INC60L7Qv9C40Y/QvA==
attributeDisplayNames:: cHJpbnRCaW5OYW1lcyzQn9C+0LTQsNGO0YnQuNC1INC70L7RgtC60Lg=
attributeDisplayNames:: cG9ydE5hbWUs0J/QvtGA0YI=
attributeDisplayNames:: bG9jYXRpb24s0KDQsNGB0L/QvtC70L7QttC10L3QuNC1
attributeDisplayNames:: ZHJpdmVyTmFtZSzQnNC+0LTQtdC70Yw=
attributeDisplayNames:: ZGVzY3JpcHRpb24s0JrQvtC80LzQtdC90YLQsNGA0LjQuQ==
attributeDisplayNames:: Y29udGFjdE5hbWUs0JrQvtC90YLQsNC60YI=
attributeDisplayNames:: YXNzZXROdW1iZXIs0JDRgNGC0LjQutGD0Ls=
attributeDisplayNames:: dU5DTmFtZSzQodC10YLQtdCy0L7QtSDQuNC80Y8=
attributeDisplayNames:: Y24s0JjQvNGPINGB0LvRg9C20LHRiyDQutCw0YLQsNC70L7Qs9C+0LI=
classDisplayName:: 0J/RgNC40L3RgtC10YA=
cn: printQueue-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=printQueue-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: printQueue-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f5-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=site-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 3,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{717EF4FA-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: 0KHQsNC50YI=
cn: site-Display
instanceType: 4
distinguishedName: CN=site-Display,CN=419,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: site-Display
showInAdvancedViewOnly: TRUE

dn: CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
instanceType: 4
distinguishedName: CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Container,CN=Schema,<Configuration NC Distinguished Name>
objectClass: container
showInAdvancedViewOnly: TRUE

dn: CN=domainPolicy-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{AAD30A04-E1D0-11d0-B859-00A024CDD4DE}
adminPropertyPages: 1,{6dfe648e-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 64+E66mU7J24IOygleyxhQ==
cn: domainPolicy-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=domainPolicy-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: domainPolicy-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f1-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=localPolicy-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{AAD30A04-E1D0-11d0-B859-00A024CDD4DE}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe648f-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 66Gc7LusIOygleyxhQ==
cn: localPolicy-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=localPolicy-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: localPolicy-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f2-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=serviceAdministrationPoint-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{c5f1645d-c8c9-11d0-bcdb-00c04fd8d5b6}
classDisplayName:: 7ISc67mE7Iqk
cn: serviceAdministrationPoint-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=serviceAdministrationPoint-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: serviceAdministrationPoint-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{c5f1645e-c8c9-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=computer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 10,{0F65B1BF-740F-11d1-BBE6-0060081692B3}
adminPropertyPages: 6,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 5,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 4,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{6dfe6492-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUs7Lu07ZOo7YSwIOydtOumhChXaW5kb3dzIDIwMDAg7J207KCEKQ==
attributeDisplayNames:: b3BlcmF0aW5nU3lzdGVtVmVyc2lvbizsmrTsmIEg7LK07KCcIOuyhOyghA==
attributeDisplayNames:: b3BlcmF0aW5nU3lzdGVtLOyatOyYgSDssrTsoJw=
attributeDisplayNames:: bWFuYWdlZEJ5LOyepey5mCDqtIDrpqzsnpA=
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 7Lu07ZOo7YSw
cn: computer-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
createWizardExt: 1,{D6D8C25A-4E83-11d2-8424-00C04FA372D4}
instanceType: 4
distinguishedName: CN=computer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: computer-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f4-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=printQueue-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6493-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: dmVyc2lvbk51bWJlcizqsJzssrQg67KE7KCE
attributeDisplayNames:: dXJsLOybuSDtjpjsnbTsp4Ag7KO87IaM
attributeDisplayNames:: c2VydmVyTmFtZSzshJzrsoQg7J2066aE
attributeDisplayNames:: cHJpbnRTdGFwbGluZ1N1cHBvcnRlZCzsiqTthYzsnbTtlIwg7KeA7JuQ
attributeDisplayNames:: cHJpbnRTaGFyZU5hbWUs6rO17JygIOydtOumhA==
attributeDisplayNames:: cHJpbnRQYWdlc1Blck1pbnV0ZSztjpjsnbTsp4Av67aE
attributeDisplayNames:: cHJpbnRSYXRlVW5pdCzsho3rj4Qg64uo7JyE
attributeDisplayNames:: cHJpbnRSYXRlLOyGjeuPhA==
attributeDisplayNames:: cHJpbnRPd25lcizshozsnKDsnpAg7J2066aE
attributeDisplayNames:: cHJpbnRNZW1vcnks7ISk7LmY65CcIOuplOuqqOumrA==
attributeDisplayNames:: cHJpbnRNZWRpYVN1cHBvcnRlZCzsp4Dsm5DrkJjripQg7Jqp7KeAIOyiheulmA==
attributeDisplayNames:: cHJpbnRNZWRpYVJlYWR5LOyCrOyaqe2VoCDsiJgg7J6I64qUIOyaqeyngA==
attributeDisplayNames:: cHJpbnRNYXhSZXNvbHV0aW9uU3VwcG9ydGVkLOy1nOuMgCDtlbTsg4Hrj4Q=
attributeDisplayNames:: cHJpbnRMYW5ndWFnZSztlITrprDthLAg7Ja47Ja0
attributeDisplayNames:: cHJpbnRlck5hbWUs7J2066aE
attributeDisplayNames:: cHJpbnREdXBsZXhTdXBwb3J0ZWQs7JaR66m0IOyduOyHhCDsp4Dsm5A=
attributeDisplayNames:: cHJpbnRDb2xvcizsu6zrn6wg7J247IeEIOyngOybkA==
attributeDisplayNames:: cHJpbnRDb2xsYXRlLO2VnCDrtoDslKkg7J247IeEIOyngOybkA==
attributeDisplayNames:: cHJpbnRCaW5OYW1lcyzsnoXroKUg7Jqp7KeA7ZWo
attributeDisplayNames:: cG9ydE5hbWUs7Y+s7Yq4
attributeDisplayNames:: bG9jYXRpb24s7JyE7LmY
attributeDisplayNames:: ZHJpdmVyTmFtZSzrqqjrjbg=
attributeDisplayNames:: ZGVzY3JpcHRpb24s7KO87ISd
attributeDisplayNames:: Y29udGFjdE5hbWUs7Jew65297LKY
attributeDisplayNames:: YXNzZXROdW1iZXIs7J6Q7IKwIOuyiO2YuA==
attributeDisplayNames:: dU5DTmFtZSzrhKTtirjsm4ztgawg7J2066aE
attributeDisplayNames:: Y24s65SU66CJ7YSw66asIOyEnOu5hOyKpCDsnbTrpoQ=
classDisplayName:: 7ZSE66aw7YSw
cn: printQueue-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=printQueue-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: printQueue-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f5-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=site-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 3,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{717EF4FA-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: 7IKs7J207Yq4
cn: site-Display
instanceType: 4
distinguishedName: CN=site-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: site-Display
showInAdvancedViewOnly: TRUE

dn: CN=server-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6494-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 7ISc67KE
cn: server-Display
instanceType: 4
distinguishedName: CN=server-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: server-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FB-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: 7ISk7KCV
cn: nTDSSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSDSA-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FC-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: 64+E66mU7J24IOy7qO2KuOuhpOufrCDshKTsoJU=
cn: nTDSDSA-Display
instanceType: 4
distinguishedName: CN=nTDSDSA-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSDSA-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSConnection-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717ef4fd-ac8d-11d0-b945-00c04fd8d5b0}
classDisplayName:: 7Jew6rKw
cn: nTDSConnection-Display
instanceType: 4
distinguishedName: CN=nTDSConnection-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSConnection-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd68-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: RlJTIOyEpOyglQ==
cn: nTFRSSettings-Display
instanceType: 4
distinguishedName: CN=nTFRSSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSReplicaSet-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd69-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: RlJTIOuzteygnCDshLjtirg=
cn: nTFRSReplicaSet-Display
instanceType: 4
distinguishedName: CN=nTFRSReplicaSet-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSReplicaSet-Display
showInAdvancedViewOnly: TRUE

dn: CN=subnet-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{9da6fd62-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: 7ISc67iM64S3
cn: subnet-Display
instanceType: 4
distinguishedName: CN=subnet-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: subnet-Display
showInAdvancedViewOnly: TRUE

dn: CN=siteLink-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30561-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: 7IKs7J207Yq4IOunge2BrA==
cn: siteLink-Display
instanceType: 4
distinguishedName: CN=siteLink-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: siteLink-Display
showInAdvancedViewOnly: TRUE

dn: CN=siteLinkBridge-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30562-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: 7IKs7J207Yq4IOunge2BrCDruIzrpqzsp4A=
cn: siteLinkBridge-Display
instanceType: 4
distinguishedName: CN=siteLinkBridge-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: siteLinkBridge-Display
showInAdvancedViewOnly: TRUE

dn: CN=interSiteTransport-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6491-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: 7IKs7J207Yq4IOqwhCDsoITshqE=
cn: interSiteTransport-Display
instanceType: 4
distinguishedName: CN=interSiteTransport-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: interSiteTransport-Display
showInAdvancedViewOnly: TRUE

dn: CN=licensingSiteSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717ef500-ac8d-11d0-b945-00c04fd8d5b0}
classDisplayName:: 65287J207IS87IuxIOyCrOydtO2KuCDshKTsoJU=
cn: licensingSiteSettings-Display
instanceType: 4
distinguishedName: CN=licensingSiteSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: licensingSiteSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSiteSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{2f280288-bb6d-11d0-b948-00c04fd8d5b0}
classDisplayName:: 7IKs7J207Yq4IOyEpOyglQ==
cn: nTDSSiteSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSiteSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSiteSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSMember-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd6a-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: RlJTIOq1rOyEseybkA==
cn: nTFRSMember-Display
instanceType: 4
distinguishedName: CN=nTFRSMember-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSMember-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSubscriber-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d3055f-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: RlJTIOqwgOyeheyekA==
cn: nTFRSSubscriber-Display
instanceType: 4
distinguishedName: CN=nTFRSSubscriber-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSubscriber-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSubscriptions-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30560-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: RlJTIOqwgOyehQ==
cn: nTFRSSubscriptions-Display
instanceType: 4
distinguishedName: CN=nTFRSSubscriptions-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSubscriptions-Display
showInAdvancedViewOnly: TRUE

dn: CN=organizationalUnit-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd63-c63b-11d0-b94d-00c04fd8d5b0}
attributeDisplayNames:: bWFuYWdlZEJ5LOyepey5mCDqtIDrpqzsnpA=
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: b3Us7J2066aE
classDisplayName:: 7KGw7KeBIOuLqOychA==
cn: organizationalUnit-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=organizationalUnit-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: organizationalUnit-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=container-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{5a96f2d8-736e-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 7Luo7YWM7J2064SI
cn: container-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=container-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: container-Display
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=rpcContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30572-9911-11d1-b9af-00c04fd8d5b0}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: UlBDIOyEnOu5hOyKpA==
cn: rpcContainer-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=rpcContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: rpcContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=trustedDomain-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd67-c63b-11d0-b94d-00c04fd8d5b0}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 7Yq465+s7Iqk7Yq465CcIOuPhOuplOyduA==
cn: trustedDomain-Display
instanceType: 4
distinguishedName: CN=trustedDomain-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: trustedDomain-Display
showInAdvancedViewOnly: TRUE

dn: CN=volume-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6490-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: dU5DTmFtZSzrhKTtirjsm4ztgawg6rK966Gc
attributeDisplayNames:: a2V5d29yZHMs7YKk7JuM65Oc
attributeDisplayNames:: bWFuYWdlZEJ5LOyepey5mCDqtIDrpqzsnpA=
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 6rO17JygIO2PtOuNlA==
cn: volume-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=volume-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: volume-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f3-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=mSMQQueue-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{e62f8206-b71c-11d1-808d-00a024c48131}
adminPropertyPages: 1,{e62f8206-b71c-11d1-808d-00a024c48131}
classDisplayName:: TVNNUSDrjIDquLDsl7Q=
cn: mSMQQueue-Display
creationWizard: {E62F8206-B71C-11D1-808D-00A024C48131}
iconPath: 0,mqsnap.dll,-251
instanceType: 4
distinguishedName: CN=mSMQQueue-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQQueue-Display
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=mSMQConfiguration-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{e62f8208-b71c-11d1-808d-00a024c48131}
adminPropertyPages: 1,{e62f8208-b71c-11d1-808d-00a024c48131}
classDisplayName:: TVNNUSDqtazshLE=
cn: mSMQConfiguration-Display
iconPath: 0,mqsnap.dll,-252
instanceType: 4
distinguishedName: CN=mSMQConfiguration-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQConfiguration-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQEnterpriseSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{2E4B37AB-CC8B-11D1-9C85-006008764D0E}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{2E4B37AB-CC8B-11D1-9C85-006008764D0E}
classDisplayName:: TVNNUSDsl5TthLDtlITrnbzsnbTspog=
cn: mSMQEnterpriseSettings-Display
iconPath: 0,mqsnap.dll,-253
instanceType: 4
distinguishedName: CN=mSMQEnterpriseSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQEnterpriseSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQMigratedUser-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{fc5bf656-0b7f-11d3-883f-006094eb6406}
adminPropertyPages: 1,{fc5bf656-0b7f-11d3-883f-006094eb6406}
classDisplayName:: TVNNUSDsl4Xqt7jroIjsnbTrk5ztlZwg7IKs7Jqp7J6Q
cn: mSMQMigratedUser-Display
instanceType: 4
distinguishedName: CN=mSMQMigratedUser-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQMigratedUser-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQSiteLink-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{87b31390-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{87b31390-d46d-11d1-8091-00a024c48131}
classDisplayName:: TVNNUSDrnbzsmrDtjIUg66eB7YGs
cn: mSMQSiteLink-Display
creationWizard: {87b31390-d46d-11d1-8091-00a024c48131}
iconPath: 0,mqsnap.dll,-254
instanceType: 4
distinguishedName: CN=mSMQSiteLink-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQSiteLink-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{d251b000-d46e-11d1-8091-00a024c48131}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{d251b000-d46e-11d1-8091-00a024c48131}
classDisplayName:: TVNNUSDshKTsoJU=
cn: mSMQSettings-Display
iconPath: 0,mqsnap.dll,-255
instanceType: 4
distinguishedName: CN=mSMQSettings-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=remoteStorageServicePoint-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu:: MCzqtIDrpqwoJk0pLi4uLFJzQWRtaW4ubXNj
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 7JuQ6rKpIOyggOyepeyGjCDshJzruYTsiqQ=
cn: remoteStorageServicePoint-Display
instanceType: 4
distinguishedName: CN=remoteStorageServicePoint-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: remoteStorageServicePoint-Display
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=default-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 0,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
cn: default-Display
instanceType: 4
distinguishedName: CN=default-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: default-Display
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=sitesContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 7IKs7J207Yq4IOy7qO2FjOydtOuEiA==
cn: sitesContainer-Display
instanceType: 4
distinguishedName: CN=sitesContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: sitesContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=interSiteTransportContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 7IKs7J207Yq4IOqwhCDsoITshqEg7Luo7YWM7J2064SI
cn: interSiteTransportContainer-Display
instanceType: 4
distinguishedName: CN=interSiteTransportContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: interSiteTransportContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=subnetContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 7ISc67iM64S3IOy7qO2FjOydtOuEiA==
cn: subnetContainer-Display
instanceType: 4
distinguishedName: CN=subnetContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: subnetContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=serversContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 7ISc67KEIOy7qO2FjOydtOuEiA==
cn: serversContainer-Display
instanceType: 4
distinguishedName: CN=serversContainer-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: serversContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSService-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: QWN0aXZlIERpcmVjdG9yeSDshJzruYTsiqQ=
cn: nTDSService-Display
instanceType: 4
distinguishedName: CN=nTDSService-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSService-Display
showInAdvancedViewOnly: TRUE

dn: CN=queryPolicy-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: 7L+866asIOygleyxhQ==
cn: queryPolicy-Display
instanceType: 4
distinguishedName: CN=queryPolicy-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: queryPolicy-Display
showInAdvancedViewOnly: TRUE

dn: CN=foreignSecurityPrincipal-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6486-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 7Jm467aAIOuztOyViCDsoJXssYU=
cn: foreignSecurityPrincipal-Display
instanceType: 4
distinguishedName: CN=foreignSecurityPrincipal-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: foreignSecurityPrincipal-Display
showInAdvancedViewOnly: TRUE

dn: CN=pKICertificateTemplate-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 0,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
adminPropertyPages: 3,{4e40f770-369c-11d0-8922-00a024ab2dbb}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 7J247Kad7IScIOyWkeyLnQ==
cn: pKICertificateTemplate-Display
contextMenu: 0,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
iconPath: 0,capesnpn.dll,-227
instanceType: 4
distinguishedName: CN=pKICertificateTemplate-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: pKICertificateTemplate-Display
shellPropertyPages: 1,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
showInAdvancedViewOnly: TRUE

dn: CN=DS-UI-Default-Settings,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
cn: DS-UI-Default-Settings
dSUIAdminNotification: 1,{E62F8206-B71C-11D1-808D-00A024C48131}
instanceType: 4
distinguishedName: CN=DS-UI-Default-Settings,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=DS-UI-Settings,CN=Schema,<Configuration NC Distinguished Name>
objectClass: dSUISettings
name: DS-UI-Default-Settings
showInAdvancedViewOnly: TRUE

dn: CN=IntellimirrorGroup-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminPropertyPages: 1,{C641CF88-892F-11d1-BBEB-0060081692B3}
classDisplayName: IntelliMirror Group
cn: IntellimirrorGroup-Display
instanceType: 4
distinguishedName: CN=IntellimirrorGroup-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: IntellimirrorGroup-Display
shellPropertyPages: 1,{C641CF88-892F-11d1-BBEB-0060081692B3}
showInAdvancedViewOnly: TRUE

dn: CN=IntellimirrorSCP-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminPropertyPages: 3,{4e40f770-369c-11d0-8922-00a024ab2dbb}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{AC409538-741C-11d1-BBE6-0060081692B3}
classDisplayName: IntelliMirror Service
cn: IntellimirrorSCP-Display
instanceType: 4
distinguishedName: CN=IntellimirrorSCP-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: IntellimirrorSCP-Display
shellPropertyPages: 1,{AC409538-741C-11d1-BBE6-0060081692B3}
showInAdvancedViewOnly: TRUE

dn: CN=user-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 8,{0910dd01-df8c-11d1-ae27-00c04fa35813}
adminPropertyPages: 7,{8c5b1b50-d46e-11d1-8091-00a024c48131}
adminPropertyPages: 6,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 5,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 4,{FD57D295-4FD9-11D1-854E-00C04FC31FD3}
adminPropertyPages: 3,{B52C1E50-1DD2-11D1-BC43-00C04FC31FD3}
adminPropertyPages: 1,{6dfe6485-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2Us7Ju5IO2OmOydtOyngCDso7zshow=
attributeDisplayNames:: dXNlclByaW5jaXBhbE5hbWUs66Gc6re47JioIOydtOumhA==
attributeDisplayNames:: dXNlcldvcmtzdGF0aW9ucyzroZzqt7jsmKgg7JuM7YGs7Iqk7YWM7J207IWY
attributeDisplayNames:: ZGlzcGxheU5hbWUs7ZGc7IucIOydtOumhA==
attributeDisplayNames:: dXJsLOybuSDtjpjsnbTsp4Ag7KO87IaMICjquLDtg4Ap
attributeDisplayNames:: dGl0bGUs7KeB7ZWo
attributeDisplayNames:: dGVsZXhOdW1iZXIs7YWU66CJ7IqkIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: dGVsZXBob25lTnVtYmVyLOyghO2ZlCDrsojtmLg=
attributeDisplayNames:: c3RyZWV0QWRkcmVzcyzso7zshow=
attributeDisplayNames:: c3Qs7IucL+uPhA==
attributeDisplayNames:: c24s7ISx
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUs66Gc6re47JioIOydtOumhChXaW5kb3dzIDIwMDAg7J207KCEKQ==
attributeDisplayNames:: cHJpbWFyeVRlbGV4TnVtYmVyLO2FlOugieyKpCDrsojtmLg=
attributeDisplayNames:: cHJpbWFyeUludGVybmF0aW9uYWxJU0ROTnVtYmVyLOq1reygnCBJU0ROIOuyiO2YuA==
attributeDisplayNames:: cG9zdE9mZmljZUJveCzsgqzshJztlag=
attributeDisplayNames:: cG9zdGFsQ29kZSzsmrDtjrgg67KI7Zi4
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUs7IKs66y07IukIOychOy5mA==
attributeDisplayNames:: cGVyc29uYWxUaXRsZSztmLjsua0=
attributeDisplayNames:: cGFnZXIs7Zi47Lac6riwIOuyiO2YuA==
attributeDisplayNames:: b3RoZXJUZWxlcGhvbmUs7KCE7ZmUIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: b3RoZXJQYWdlciztmLjstpzquLAg67KI7Zi4ICjquLDtg4Ap
attributeDisplayNames:: b3RoZXJNb2JpbGUs7Zy064yA7Y+wIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: b3RoZXJNYWlsYm94LOyghOyekCDrqZTsnbwg7KO87IaMICjquLDtg4Ap
attributeDisplayNames:: b3RoZXJJcFBob25lLElQIOyghO2ZlCDrsojtmLggKOq4sO2DgCk=
attributeDisplayNames:: b3RoZXJIb21lUGhvbmUs7KeRIOyghO2ZlCDrsojtmLgo6riw7YOAKQ==
attributeDisplayNames:: b3RoZXJGYWNzaW1pbGVUZWxlcGhvbmVOdW1iZXIs7Yyp7IqkIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: aW5mbyzrqZTrqqg=
attributeDisplayNames:: bW9iaWxlLO2ctOuMgO2PsCDrsojtmLg=
attributeDisplayNames:: bWlkZGxlTmFtZSzspJHqsIQg7J2066aE
attributeDisplayNames:: bWVtYmVyT2Ys6re466O5IOuTseuhnQ==
attributeDisplayNames:: bWFuYWdlcizqtIDrpqzsnpA=
attributeDisplayNames:: bWFpbCzsoITsnpAg66mU7J28IOyjvOyGjA==
attributeDisplayNames:: bCzqtawv6rWwL+yLnA==
attributeDisplayNames:: aXBQaG9uZSxJUCDsoITtmZQg67KI7Zi4
attributeDisplayNames:: aW50ZXJuYXRpb25hbElTRE5OdW1iZXIs6rWt7KCcIElTRE4g67KI7Zi4ICjquLDtg4Ap
attributeDisplayNames:: aW5pdGlhbHMs7J2064uI7IWc
attributeDisplayNames:: aG9tZVBvc3RhbEFkZHJlc3Ms7KeRIOyjvOyGjA==
attributeDisplayNames:: aG9tZVBob25lLOynkSDsoITtmZQ=
attributeDisplayNames:: aG9tZURyaXZlLO2ZiCDrk5zrnbzsnbTruIw=
attributeDisplayNames:: aG9tZURpcmVjdG9yeSztmYgg7Y+0642U
attributeDisplayNames:: Z2l2ZW5OYW1lLOydtOumhCjshLEg7JeG7J2MKQ==
attributeDisplayNames:: Z2VuZXJhdGlvblF1YWxpZmllcizshLjrjIAg7KCR66+47IKs
attributeDisplayNames:: ZmFjc2ltaWxlVGVsZXBob25lTnVtYmVyLO2MqeyKpCDrsojtmLg=
attributeDisplayNames:: ZW1wbG95ZWVJRCzsp4Hsm5AgSUQ=
attributeDisplayNames:: ZGl2aXNpb24s6rWtKOu2gOyEnCk=
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsWDUwMCDqs6DsnKAg7J2066aE
attributeDisplayNames:: ZGlyZWN0UmVwb3J0cyzrtoDtlZgg7KeB7JuQ
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: ZGVwYXJ0bWVudCzrtoDshJw=
attributeDisplayNames:: Y29tcGFueSztmozsgqw=
attributeDisplayNames:: Y29tbWVudCzso7zshJ0=
attributeDisplayNames:: Y28s6rWt6rCA
attributeDisplayNames:: Yyzqta3qsIAg7JW97J6Q
attributeDisplayNames:: Y24s7J2066aE
attributeDisplayNames:: YXNzaXN0YW50LOu5hOyEnA==
classDisplayName:: 7IKs7Jqp7J6Q
cn: user-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=user-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: user-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ed-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=group-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6489-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2Us7Ju5IO2OmOydtOyngCDso7zshow=
attributeDisplayNames:: dXJsLOybuSDtjpjsnbTsp4Ag7KO87IaMICjquLDtg4Ap
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUs6re466O5IOydtOumhChXaW5kb3dzIDIwMDAg7J207KCEKQ==
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUs7IKs66y07IukIOychOy5mA==
attributeDisplayNames:: aW5mbyzrqZTrqqg=
attributeDisplayNames:: bWVtYmVyLOq1rOyEseybkA==
attributeDisplayNames:: bWFuYWdlZEJ5LOyepey5mCDqtIDrpqzsnpA=
attributeDisplayNames:: bCzqtawv6rWwL+yLnA==
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsWDUwMCDqs6DsnKAg7J2066aE
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Yyzqta3qsIAg7JW97J6Q
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 6re466O5
cn: group-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=group-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: group-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ee-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=domainDNS-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe648c-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: Y24s7J2066aE
classDisplayName:: 64+E66mU7J24
cn: domainDNS-Display
instanceType: 4
distinguishedName: CN=domainDNS-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: domainDNS-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ef-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=contact-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{c5f1645c-c8c9-11d0-bcdb-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2Us7Ju5IO2OmOydtOyngCDso7zshow=
attributeDisplayNames:: dXJsLOybuSDtjpjsnbTsp4Ag7KO87IaMICjquLDtg4Ap
attributeDisplayNames:: dGl0bGUs7KeB7ZWo
attributeDisplayNames:: dGVsZXhOdW1iZXIs7YWU66CJ7IqkIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: dGVsZXBob25lTnVtYmVyLOyghO2ZlCDrsojtmLg=
attributeDisplayNames:: c3RyZWV0QWRkcmVzcyzso7zshow=
attributeDisplayNames:: c3Qs7IucL+uPhA==
attributeDisplayNames:: c24s7ISx
attributeDisplayNames:: cHJpbWFyeVRlbGV4TnVtYmVyLO2FlOugieyKpCDrsojtmLg=
attributeDisplayNames:: cHJpbWFyeUludGVybmF0aW9uYWxJU0ROTnVtYmVyLOq1reygnCBJU0ROIOuyiO2YuA==
attributeDisplayNames:: cG9zdE9mZmljZUJveCzsgqzshJztlag=
attributeDisplayNames:: cG9zdGFsQ29kZSzsmrDtjrgg67KI7Zi4
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUs7IKs66y07IukIOychOy5mA==
attributeDisplayNames:: cGVyc29uYWxUaXRsZSztmLjsua0=
attributeDisplayNames:: cGFnZXIs7Zi47Lac6riwIOuyiO2YuA==
attributeDisplayNames:: b3RoZXJUZWxlcGhvbmUs7KCE7ZmUIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: b3RoZXJQYWdlciztmLjstpzquLAg67KI7Zi4ICjquLDtg4Ap
attributeDisplayNames:: b3RoZXJNb2JpbGUs7Zy064yA7Y+wIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: b3RoZXJNYWlsYm94LOyghOyekCDrqZTsnbwg7KO87IaMICjquLDtg4Ap
attributeDisplayNames:: b3RoZXJJcFBob25lLElQIOyghO2ZlCDrsojtmLggKOq4sO2DgCk=
attributeDisplayNames:: b3RoZXJIb21lUGhvbmUs7KeRIOyghO2ZlCDrsojtmLggKOq4sO2DgCk=
attributeDisplayNames:: b3RoZXJGYWNzaW1pbGVUZWxlcGhvbmVOdW1iZXIs7Yyp7IqkIOuyiO2YuCAo6riw7YOAKQ==
attributeDisplayNames:: bW9iaWxlLO2ctOuMgO2PsCDrsojtmLg=
attributeDisplayNames:: bWlkZGxlTmFtZSzspJHqsIQg7J2066aE
attributeDisplayNames:: bWVtYmVyT2Ys6re466O5IOuTseuhnQ==
attributeDisplayNames:: bWFuYWdlcizqtIDrpqzsnpA=
attributeDisplayNames:: bWFpbCzsoITsnpAg66mU7J28IOyjvOyGjA==
attributeDisplayNames:: bCzqtawv6rWwL+yLnA==
attributeDisplayNames:: aXBQaG9uZSxJUCDsoITtmZQg67KI7Zi4
attributeDisplayNames:: aW50ZXJuYXRpb25hbElTRE5OdW1iZXIs6rWt7KCcIElTRE4g67KI7Zi4ICjquLDtg4Ap
attributeDisplayNames:: aW5mbyzrqZTrqqg=
attributeDisplayNames:: aW5pdGlhbHMs7J2064uI7IWc
attributeDisplayNames:: aG9tZVBvc3RhbEFkZHJlc3Ms7KeRIOyjvOyGjA==
attributeDisplayNames:: aG9tZVBob25lLOynkSDsoITtmZQ=
attributeDisplayNames:: Z2l2ZW5OYW1lLOydtOumhCjshLEg7JeG7J2MKQ==
attributeDisplayNames:: Z2VuZXJhdGlvblF1YWxpZmllcizshLjrjIAg7KCR66+47IKs
attributeDisplayNames:: ZmFjc2ltaWxlVGVsZXBob25lTnVtYmVyLO2MqeyKpCDrsojtmLg=
attributeDisplayNames:: ZW1wbG95ZWVJRCzsp4Hsm5AgSUQ=
attributeDisplayNames:: ZGl2aXNpb24s6rWtKOu2gOyEnCk=
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsWDUwMCDqs6DsnKAg7J2066aE
attributeDisplayNames:: ZGlzcGxheU5hbWUs7ZGc7IucIOydtOumhA==
attributeDisplayNames:: ZGlyZWN0UmVwb3J0cyzrtoDtlZgg7KeB7JuQ
attributeDisplayNames:: ZGVzY3JpcHRpb24s7ISk66qF
attributeDisplayNames:: ZGVwYXJ0bWVudCzrtoDshJw=
attributeDisplayNames:: Y29tcGFueSztmozsgqw=
attributeDisplayNames:: Y29tbWVudCzso7zshJ0=
attributeDisplayNames:: Y24s7J2066aE
attributeDisplayNames:: Y28s6rWt6rCA
attributeDisplayNames:: Yyzqta3qsIAg7JW97J6Q
attributeDisplayNames:: YXNzaXN0YW50LOu5hOyEnA==
classDisplayName:: 7Jew65297LKY
cn: contact-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=contact-Display,CN=412,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: contact-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f0-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
instanceType: 4
distinguishedName: CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Container,CN=Schema,<Configuration NC Distinguished Name>
objectClass: container
showInAdvancedViewOnly: TRUE

dn: CN=IntellimirrorGroup-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminPropertyPages: 1,{C641CF88-892F-11d1-BBEB-0060081692B3}
classDisplayName: Groupe IntelliMirror
cn: IntellimirrorGroup-Display
instanceType: 4
distinguishedName: CN=IntellimirrorGroup-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: IntellimirrorGroup-Display
shellPropertyPages: 1,{C641CF88-892F-11d1-BBEB-0060081692B3}
showInAdvancedViewOnly: TRUE

dn: CN=IntellimirrorSCP-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminPropertyPages: 3,{4e40f770-369c-11d0-8922-00a024ab2dbb}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{AC409538-741C-11d1-BBE6-0060081692B3}
classDisplayName: Service IntelliMirror
cn: IntellimirrorSCP-Display
instanceType: 4
distinguishedName: CN=IntellimirrorSCP-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: IntellimirrorSCP-Display
shellPropertyPages: 1,{AC409538-741C-11d1-BBE6-0060081692B3}
showInAdvancedViewOnly: TRUE

dn: CN=user-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 8,{0910dd01-df8c-11d1-ae27-00c04fa35813}
adminPropertyPages: 7,{8c5b1b50-d46e-11d1-8091-00a024c48131}
adminPropertyPages: 6,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 5,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 4,{FD57D295-4FD9-11D1-854E-00C04FC31FD3}
adminPropertyPages: 3,{B52C1E50-1DD2-11D1-BC43-00C04FC31FD3}
adminPropertyPages: 1,{6dfe6485-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2UsQWRyZXNzZSBkZSBwYWdlIFdlYg==
attributeDisplayNames:: dXNlclByaW5jaXBhbE5hbWUsTm9tIGQnb3V2ZXJ0dXJlIGRlIHNlc3Npb24=
attributeDisplayNames:: dXNlcldvcmtzdGF0aW9ucyxTdGF0aW9ucyBkZSB0cmF2YWlsIGFjY2Vzc2libGVz
attributeDisplayNames:: ZGlzcGxheU5hbWUsTm9tIGNvbXBsZXQ=
attributeDisplayNames:: dXJsLEFkcmVzc2UgZGUgcGFnZSBXZWIgKEF1dHJlcyk=
attributeDisplayNames:: dGl0bGUsSW50aXR1bMOpIGRlIGxhIGZvbmN0aW9u
attributeDisplayNames:: dGVsZXhOdW1iZXIsTnVtw6lybyBkZSB0w6lsZXggKEF1dHJlcyk=
attributeDisplayNames:: dGVsZXBob25lTnVtYmVyLE51bcOpcm8gZGUgdMOpbMOpcGhvbmU=
attributeDisplayNames:: c3RyZWV0QWRkcmVzcyxBZHJlc3NlIHBvc3RhbGU=
attributeDisplayNames:: c3Qsw4l0YXQvUsOpZ2lvbg==
attributeDisplayNames:: c24sTm9tIGRlIGZhbWlsbGU=
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUsTm9tIGQnb3V2ZXJ0dXJlIGRlIHNlc3Npb24gKGFudMOpcmlldXIgw6AgV2luZG93cyAyMDAwKQ==
attributeDisplayNames:: cHJpbWFyeVRlbGV4TnVtYmVyLE51bcOpcm8gZGUgdMOpbGV4
attributeDisplayNames:: cHJpbWFyeUludGVybmF0aW9uYWxJU0ROTnVtYmVyLE51bcOpcm8gUk5JUyBpbnRlcm5hdGlvbmFs
attributeDisplayNames:: cG9zdE9mZmljZUJveCxCb8OudGUgcG9zdGFsZQ==
attributeDisplayNames:: cG9zdGFsQ29kZSxDb2RlIHBvc3RhbA==
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUsQWRyZXNzZSBkdSBidXJlYXU=
attributeDisplayNames:: cGVyc29uYWxUaXRsZSxUaXRyZQ==
attributeDisplayNames:: cGFnZXIsTnVtw6lybyBkZSByw6ljZXB0ZXVyIGRlIHJhZGlvLW1lc3NhZ2VyaWU=
attributeDisplayNames:: b3RoZXJUZWxlcGhvbmUsTnVtw6lybyBkZSB0w6lsw6lwaG9uZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJQYWdlcixOdW3DqXJvIGRlIHLDqWNlcHRldXIgZGUgcmFkaW8tbWVzc2FnZXJpZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJNb2JpbGUsTnVtw6lybyBkZSB0w6lsw6lwaG9uZSBtb2JpbGUgKEF1dHJlcyk=
attributeDisplayNames:: b3RoZXJNYWlsYm94LEFkcmVzc2UgZGUgbWVzc2FnZXJpZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJJcFBob25lLE51bcOpcm8gZGUgdMOpbMOpcGhvbmUgSVAgKEF1dHJlcyk=
attributeDisplayNames:: b3RoZXJIb21lUGhvbmUsTnVtw6lybyBkZSB0w6lsw6lwaG9uZSBkb21pY2lsZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJGYWNzaW1pbGVUZWxlcGhvbmVOdW1iZXIsTnVtw6lybyBkZSB0w6lsw6ljb3BpZXVyIChBdXRyZXMp
attributeDisplayNames:: aW5mbyxSZW1hcnF1ZXM=
attributeDisplayNames:: bW9iaWxlLE51bcOpcm8gZGUgdMOpbMOpcGhvbmUgbW9iaWxl
attributeDisplayNames:: bWlkZGxlTmFtZSxEZXV4acOobWUgcHLDqW5vbQ==
attributeDisplayNames:: bWVtYmVyT2YsQWRow6lzaW9uIGF1IGdyb3VwZQ==
attributeDisplayNames:: bWFuYWdlcixTdXDDqXJpZXVyIGRpcmVjdA==
attributeDisplayNames:: bWFpbCxBZHJlc3NlIGRlIG1lc3NhZ2VyaWU=
attributeDisplayNames:: bCxWaWxsZQ==
attributeDisplayNames:: aXBQaG9uZSxOdW3DqXJvIGRlIHTDqWzDqXBob25lIElQ
attributeDisplayNames:: aW50ZXJuYXRpb25hbElTRE5OdW1iZXIsTnVtw6lybyBSTklTIGludGVybmF0aW9uYWwgKEF1dHJlcyk=
attributeDisplayNames:: aW5pdGlhbHMsSW5pdGlhbGVzwqA=
attributeDisplayNames:: aG9tZVBvc3RhbEFkZHJlc3MsQWRyZXNzZSBkb21pY2lsZQ==
attributeDisplayNames:: aG9tZVBob25lLFTDqWzDqXBob25lIGRvbWljaWxl
attributeDisplayNames:: aG9tZURyaXZlLExlY3RldXIgZGUgYmFzZQ==
attributeDisplayNames:: aG9tZURpcmVjdG9yeSxEb3NzaWVyIGRlIGJhc2U=
attributeDisplayNames:: Z2l2ZW5OYW1lLFByw6lub20=
attributeDisplayNames:: Z2VuZXJhdGlvblF1YWxpZmllcixTdWZmaXhlIGRlIGfDqW7DqXJhdGlvbg==
attributeDisplayNames:: ZmFjc2ltaWxlVGVsZXBob25lTnVtYmVyLE51bcOpcm8gZGUgdMOpbMOpY29waWV1csKg
attributeDisplayNames:: ZW1wbG95ZWVJRCxOdW3DqXJvIGQnZW1wbG95w6k=
attributeDisplayNames:: ZGl2aXNpb24sRGl2aXNpb24=
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsTm9tIHVuaXF1ZSBYNTAw
attributeDisplayNames:: ZGlyZWN0UmVwb3J0cyxDb2xsYWJvcmF0ZXVycyBkaXJlY3Rz
attributeDisplayNames:: ZGVzY3JpcHRpb24sRGVzY3JpcHRpb24=
attributeDisplayNames:: ZGVwYXJ0bWVudCxEw6lwYXJ0ZW1lbnQ=
attributeDisplayNames:: Y29tcGFueSxTb2Npw6l0w6k=
attributeDisplayNames:: Y29tbWVudCxDb21tZW50YWlyZQ==
attributeDisplayNames:: Y28sUGF5cw==
attributeDisplayNames:: YyxBYnLDqXZpYXRpb24gZHUgcGF5cw==
attributeDisplayNames:: Y24sTm9t
attributeDisplayNames:: YXNzaXN0YW50LEFzc2lzdGFudA==
classDisplayName: Utilisateur
cn: user-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=user-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: user-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ed-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=group-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6489-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2UsQWRyZXNzZSBkZSBwYWdlIFdlYg==
attributeDisplayNames:: dXJsLEFkcmVzc2UgZGUgcGFnZSBXZWIgKEF1dHJlcyk=
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUsTm9tIGRlIGdyb3VwZSAoYW50w6lyaWV1ciDDoCBXaW5kb3dzIDIwMDAp
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUsQWRyZXNzZSBkdSBidXJlYXU=
attributeDisplayNames:: aW5mbyxSZW1hcnF1ZXM=
attributeDisplayNames:: bWVtYmVyLE1lbWJyZXM=
attributeDisplayNames:: bWFuYWdlZEJ5LEfDqXLDqSBwYXI=
attributeDisplayNames:: bCxWaWxsZQ==
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsTm9tIHVuaXF1ZSBYNTAw
attributeDisplayNames:: ZGVzY3JpcHRpb24sRGVzY3JpcHRpb24=
attributeDisplayNames:: YyxBYnLDqXZpYXRpb24gZHUgcGF5cw==
attributeDisplayNames:: Y24sTm9t
classDisplayName: Groupe
cn: group-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=group-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: group-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ee-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=domainDNS-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe648c-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
classDisplayName: Domaine
cn: domainDNS-Display
instanceType: 4
distinguishedName: CN=domainDNS-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: domainDNS-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121ef-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=contact-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{c5f1645c-c8c9-11d0-bcdb-00c04fd8d5b6}
attributeDisplayNames:: d1dXSG9tZVBhZ2UsQWRyZXNzZSBkZSBwYWdlIFdlYg==
attributeDisplayNames:: dXJsLEFkcmVzc2UgZGUgcGFnZSBXZWIgKEF1dHJlcyk=
attributeDisplayNames:: dGl0bGUsSW50aXR1bMOpIGRlIGxhIGZvbmN0aW9u
attributeDisplayNames:: dGVsZXhOdW1iZXIsTnVtw6lybyBkZSB0w6lsZXggKEF1dHJlcyk=
attributeDisplayNames:: dGVsZXBob25lTnVtYmVyLE51bcOpcm8gZGUgdMOpbMOpcGhvbmU=
attributeDisplayNames:: c3RyZWV0QWRkcmVzcyxBZHJlc3NlIHBvc3RhbGU=
attributeDisplayNames:: c3Qsw4l0YXQvUsOpZ2lvbg==
attributeDisplayNames:: c24sTm9tIGRlIGZhbWlsbGU=
attributeDisplayNames:: cHJpbWFyeVRlbGV4TnVtYmVyLE51bcOpcm8gZGUgdMOpbGV4
attributeDisplayNames:: cHJpbWFyeUludGVybmF0aW9uYWxJU0ROTnVtYmVyLE51bcOpcm8gUk5JUyBpbnRlcm5hdGlvbmFs
attributeDisplayNames:: cG9zdE9mZmljZUJveCxCb8OudGUgcG9zdGFsZQ==
attributeDisplayNames:: cG9zdGFsQ29kZSxDb2RlIHBvc3RhbA==
attributeDisplayNames:: cGh5c2ljYWxEZWxpdmVyeU9mZmljZU5hbWUsQWRyZXNzZSBkdSBidXJlYXU=
attributeDisplayNames:: cGVyc29uYWxUaXRsZSxUaXRyZQ==
attributeDisplayNames:: cGFnZXIsTnVtw6lybyBkZSByw6ljZXB0ZXVyIGRlIHJhZGlvLW1lc3NhZ2VyaWU=
attributeDisplayNames:: b3RoZXJUZWxlcGhvbmUsTnVtw6lybyBkZSB0w6lsw6lwaG9uZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJQYWdlcixOdW3DqXJvIGRlIHLDqWNlcHRldXIgZGUgcmFkaW8tbWVzc2FnZXJpZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJNb2JpbGUsTnVtw6lybyBkZSB0w6lsw6lwaG9uZSBtb2JpbGUgKEF1dHJlcyk=
attributeDisplayNames:: b3RoZXJNYWlsYm94LEFkcmVzc2UgZGUgbWVzc2FnZXJpZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJJcFBob25lLE51bcOpcm8gZGUgdMOpbMOpcGhvbmUgSVAgKEF1dHJlcyk=
attributeDisplayNames:: b3RoZXJIb21lUGhvbmUsTnVtw6lybyBkZSB0w6lsw6lwaG9uZSBkb21pY2lsZSAoQXV0cmVzKQ==
attributeDisplayNames:: b3RoZXJGYWNzaW1pbGVUZWxlcGhvbmVOdW1iZXIsTnVtw6lybyBkZSB0w6lsw6ljb3BpZXVyIChBdXRyZXMp
attributeDisplayNames:: bW9iaWxlLE51bcOpcm8gZGUgdMOpbMOpcGhvbmUgbW9iaWxl
attributeDisplayNames:: bWlkZGxlTmFtZSxEZXV4acOobWUgcHLDqW5vbQ==
attributeDisplayNames:: bWVtYmVyT2YsQWRow6lzaW9uIGF1IGdyb3VwZQ==
attributeDisplayNames:: bWFuYWdlcixTdXDDqXJpZXVyIGRpcmVjdA==
attributeDisplayNames:: bWFpbCxBZHJlc3NlIGRlIG1lc3NhZ2VyaWU=
attributeDisplayNames:: bCxWaWxsZQ==
attributeDisplayNames:: aXBQaG9uZSxOdW3DqXJvIGRlIHTDqWzDqXBob25lIElQ
attributeDisplayNames:: aW50ZXJuYXRpb25hbElTRE5OdW1iZXIsTnVtw6lybyBSTklTIGludGVybmF0aW9uYWwgKEF1dHJlcyk=
attributeDisplayNames:: aW5mbyxSZW1hcnF1ZXM=
attributeDisplayNames:: aW5pdGlhbHMsSW5pdGlhbGVzwqA=
attributeDisplayNames:: aG9tZVBvc3RhbEFkZHJlc3MsQWRyZXNzZSBkb21pY2lsZQ==
attributeDisplayNames:: aG9tZVBob25lLFTDqWzDqXBob25lIGRvbWljaWxl
attributeDisplayNames:: Z2l2ZW5OYW1lLFByw6lub20=
attributeDisplayNames:: Z2VuZXJhdGlvblF1YWxpZmllcixTdWZmaXhlIGRlIGfDqW7DqXJhdGlvbg==
attributeDisplayNames:: ZmFjc2ltaWxlVGVsZXBob25lTnVtYmVyLE51bcOpcm8gZGUgdMOpbMOpY29waWV1csKg
attributeDisplayNames:: ZW1wbG95ZWVJRCxOdW3DqXJvIGQnZW1wbG95w6k=
attributeDisplayNames:: ZGl2aXNpb24sRGl2aXNpb24=
attributeDisplayNames:: ZGlzdGluZ3Vpc2hlZE5hbWUsTm9tIHVuaXF1ZSBYNTAw
attributeDisplayNames:: ZGlzcGxheU5hbWUsTm9tIGNvbXBsZXQ=
attributeDisplayNames:: ZGlyZWN0UmVwb3J0cyxDb2xsYWJvcmF0ZXVycyBkaXJlY3Rz
attributeDisplayNames:: ZGVzY3JpcHRpb24sRGVzY3JpcHRpb24=
attributeDisplayNames:: ZGVwYXJ0bWVudCxEw6lwYXJ0ZW1lbnQ=
attributeDisplayNames:: Y29tcGFueSxTb2Npw6l0w6k=
attributeDisplayNames:: Y29tbWVudCxDb21tZW50YWlyZQ==
attributeDisplayNames:: Y24sTm9t
attributeDisplayNames:: Y28sUGF5cw==
attributeDisplayNames:: YyxBYnLDqXZpYXRpb24gZHUgcGF5cw==
attributeDisplayNames:: YXNzaXN0YW50LEFzc2lzdGFudA==
classDisplayName: Contact
cn: contact-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=contact-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: contact-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f0-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=domainPolicy-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{AAD30A04-E1D0-11d0-B859-00A024CDD4DE}
adminPropertyPages: 1,{6dfe648e-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: U3RyYXTDqWdpZSBkZSBkb21haW5l
cn: domainPolicy-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=domainPolicy-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: domainPolicy-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f1-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=localPolicy-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{AAD30A04-E1D0-11d0-B859-00A024CDD4DE}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe648f-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName:: U3RyYXTDqWdpZSBsb2NhbGU=
cn: localPolicy-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=localPolicy-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: localPolicy-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f2-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=serviceAdministrationPoint-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{c5f1645d-c8c9-11d0-bcdb-00c04fd8d5b6}
classDisplayName: Service
cn: serviceAdministrationPoint-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=serviceAdministrationPoint-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: serviceAdministrationPoint-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{c5f1645e-c8c9-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=computer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 10,{0F65B1BF-740F-11d1-BBE6-0060081692B3}
adminPropertyPages: 6,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 5,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 4,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{6dfe6492-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: c2FtQWNjb3VudE5hbWUsTm9tIGQnb3JkaW5hdGV1ciAoYW50w6lyaWV1ciDDoCBXaW5kb3dzIDIwMDAp
attributeDisplayNames:: b3BlcmF0aW5nU3lzdGVtVmVyc2lvbixWZXJzaW9uIGR1IHN5c3TDqG1lIGQnZXhwbG9pdGF0aW9u
attributeDisplayNames:: b3BlcmF0aW5nU3lzdGVtLFN5c3TDqG1lIGQnZXhwbG9pdGF0aW9u
attributeDisplayNames:: bWFuYWdlZEJ5LEfDqXLDqSBwYXI=
attributeDisplayNames:: ZGVzY3JpcHRpb24sRGVzY3JpcHRpb24=
attributeDisplayNames:: Y24sTm9t
classDisplayName: Ordinateur
cn: computer-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
createWizardExt: 1,{D6D8C25A-4E83-11d2-8424-00C04FA372D4}
instanceType: 4
distinguishedName: CN=computer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: computer-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f4-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=printQueue-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6493-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: dmVyc2lvbk51bWJlcixWZXJzaW9uIGRlIGwnb2JqZXQ=
attributeDisplayNames:: dXJsLEFkcmVzc2UgZGUgcGFnZSBXZWI=
attributeDisplayNames:: c2VydmVyTmFtZSxOb20gZHUgc2VydmV1cg==
attributeDisplayNames:: cHJpbnRTdGFwbGluZ1N1cHBvcnRlZCxQcmVuZCBlbiBjaGFyZ2UgbCdhZ3JhZmFnZQ==
attributeDisplayNames:: cHJpbnRTaGFyZU5hbWUsTm9tIGRlIHBhcnRhZ2U=
attributeDisplayNames:: cHJpbnRQYWdlc1Blck1pbnV0ZSxQYWdlcyBwYXIgbWludXRl
attributeDisplayNames:: cHJpbnRSYXRlVW5pdCxVbml0w6lzIGRlIHZpdGVzc2U=
attributeDisplayNames:: cHJpbnRSYXRlLFZpdGVzc2U=
attributeDisplayNames:: cHJpbnRPd25lcixOb20gZHUgcHJvcHJpw6l0YWlyZQ==
attributeDisplayNames:: cHJpbnRNZW1vcnksTcOpbW9pcmUgaW5zdGFsbMOpZQ==
attributeDisplayNames:: cHJpbnRNZWRpYVN1cHBvcnRlZCxUeXBlcyBkZSBwYXBpZXIgcHJpcyBlbiBjaGFyZ2U=
attributeDisplayNames:: cHJpbnRNZWRpYVJlYWR5LFBhcGllciBkaXNwb25pYmxl
attributeDisplayNames:: cHJpbnRNYXhSZXNvbHV0aW9uU3VwcG9ydGVkLFLDqXNvbHV0aW9uIG1heGltYWxl
attributeDisplayNames:: cHJpbnRMYW5ndWFnZSxMYW5nYWdlIGRlIGwnaW1wcmltYW50ZQ==
attributeDisplayNames:: cHJpbnRlck5hbWUsTm9t
attributeDisplayNames:: cHJpbnREdXBsZXhTdXBwb3J0ZWQsUHJlbmQgZW4gY2hhcmdlIGwnaW1wcmVzc2lvbiByZWN0byB2ZXJzbw==
attributeDisplayNames:: cHJpbnRDb2xvcixQcmVuZCBlbiBjaGFyZ2UgbCdpbXByZXNzaW9uIGVuIGNvdWxldXI=
attributeDisplayNames:: cHJpbnRDb2xsYXRlLFByZW5kIGVuIGNoYXJnZSBsJ2Fzc2VtYmxhZ2U=
attributeDisplayNames:: cHJpbnRCaW5OYW1lcyxCYWNzIGQnZW50csOpZQ==
attributeDisplayNames:: cG9ydE5hbWUsUG9ydA==
attributeDisplayNames:: bG9jYXRpb24sRW1wbGFjZW1lbnQ=
attributeDisplayNames:: ZHJpdmVyTmFtZSxNb2TDqGxl
attributeDisplayNames:: ZGVzY3JpcHRpb24sQ29tbWVudGFpcmU=
attributeDisplayNames:: Y29udGFjdE5hbWUsQ29udGFjdA==
attributeDisplayNames:: YXNzZXROdW1iZXIsTnVtw6lybyBkZSBjb250csO0bGU=
attributeDisplayNames:: dU5DTmFtZSxOb20gcsOpc2VhdQ==
attributeDisplayNames:: Y24sTm9tIGR1IHNlcnZpY2UgZCdhbm51YWlyZQ==
classDisplayName: Imprimante
cn: printQueue-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=printQueue-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: printQueue-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f5-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=site-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 3,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{bc019ba0-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{717EF4FA-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName: Site
cn: site-Display
instanceType: 4
distinguishedName: CN=site-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: site-Display
showInAdvancedViewOnly: TRUE

dn: CN=server-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6494-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName: Serveur
cn: server-Display
instanceType: 4
distinguishedName: CN=server-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: server-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FB-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: UGFyYW3DqHRyZXM=
cn: nTDSSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSDSA-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717EF4FC-AC8D-11D0-B945-00C04FD8D5B0}
classDisplayName:: UGFyYW3DqHRyZXMgZHUgY29udHLDtGxldXIgZGUgZG9tYWluZQ==
cn: nTDSDSA-Display
instanceType: 4
distinguishedName: CN=nTDSDSA-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSDSA-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSConnection-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717ef4fd-ac8d-11d0-b945-00c04fd8d5b0}
classDisplayName: Connexion
cn: nTDSConnection-Display
instanceType: 4
distinguishedName: CN=nTDSConnection-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSConnection-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd68-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: UGFyYW3DqHRyZXMgRlJT
cn: nTFRSSettings-Display
instanceType: 4
distinguishedName: CN=nTFRSSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSReplicaSet-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd69-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: SmV1IGRlIHLDqXBsaWNhcyBGUlM=
cn: nTFRSReplicaSet-Display
instanceType: 4
distinguishedName: CN=nTFRSReplicaSet-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSReplicaSet-Display
showInAdvancedViewOnly: TRUE

dn: CN=subnet-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 4,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 3,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 2,{77597368-7b15-11d0-a0c2-080036af3f03}
adminPropertyPages: 1,{9da6fd62-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName:: U291cy1yw6lzZWF1
cn: subnet-Display
instanceType: 4
distinguishedName: CN=subnet-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: subnet-Display
showInAdvancedViewOnly: TRUE

dn: CN=siteLink-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30561-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName: Lien du site
cn: siteLink-Display
instanceType: 4
distinguishedName: CN=siteLink-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: siteLink-Display
showInAdvancedViewOnly: TRUE

dn: CN=siteLinkBridge-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30562-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName: Pont de la liaison du site
cn: siteLinkBridge-Display
instanceType: 4
distinguishedName: CN=siteLinkBridge-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: siteLinkBridge-Display
showInAdvancedViewOnly: TRUE

dn: CN=interSiteTransport-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6491-a212-11d0-bcd5-00c04fd8d5b6}
classDisplayName: Transport inter-sites
cn: interSiteTransport-Display
instanceType: 4
distinguishedName: CN=interSiteTransport-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: interSiteTransport-Display
showInAdvancedViewOnly: TRUE

dn: CN=licensingSiteSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{717ef500-ac8d-11d0-b945-00c04fd8d5b0}
classDisplayName:: UGFyYW3DqHRyZSBkdSBzaXRlIGRlIGdlc3Rpb24gZGVzIGxpY2VuY2Vz
cn: licensingSiteSettings-Display
instanceType: 4
distinguishedName: CN=licensingSiteSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: licensingSiteSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSSiteSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{2f280288-bb6d-11d0-b948-00c04fd8d5b0}
classDisplayName:: UGFyYW3DqHRyZXMgZHUgc2l0ZQ==
cn: nTDSSiteSettings-Display
instanceType: 4
distinguishedName: CN=nTDSSiteSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSSiteSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSMember-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd6a-c63b-11d0-b94d-00c04fd8d5b0}
classDisplayName: Membre FRS
cn: nTFRSMember-Display
instanceType: 4
distinguishedName: CN=nTFRSMember-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSMember-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSubscriber-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d3055f-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName:: QWJvbm7DqSBGUlM=
cn: nTFRSSubscriber-Display
instanceType: 4
distinguishedName: CN=nTFRSSubscriber-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSubscriber-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTFRSSubscriptions-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30560-9911-11d1-b9af-00c04fd8d5b0}
classDisplayName: Abonnements FRS
cn: nTFRSSubscriptions-Display
instanceType: 4
distinguishedName: CN=nTFRSSubscriptions-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTFRSSubscriptions-Display
showInAdvancedViewOnly: TRUE

dn: CN=organizationalUnit-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd63-c63b-11d0-b94d-00c04fd8d5b0}
attributeDisplayNames:: bWFuYWdlZEJ5LEfDqXLDqSBwYXI=
attributeDisplayNames:: ZGVzY3JpcHRpb24sRGVzY3JpcHRpb24=
attributeDisplayNames:: b3UsTm9t
classDisplayName:: VW5pdMOpIGQnb3JnYW5pc2F0aW9u
cn: organizationalUnit-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=organizationalUnit-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: organizationalUnit-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=container-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminContextMenu: 1,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{5a96f2d8-736e-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
classDisplayName: Conteneur
cn: container-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=container-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: container-Display
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=rpcContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{50d30572-9911-11d1-b9af-00c04fd8d5b0}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
classDisplayName: Services RPC
cn: rpcContainer-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=rpcContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: rpcContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=trustedDomain-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9da6fd67-c63b-11d0-b94d-00c04fd8d5b0}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
classDisplayName:: RG9tYWluZSBhcHByb3V2w6k=
cn: trustedDomain-Display
instanceType: 4
distinguishedName: CN=trustedDomain-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: trustedDomain-Display
showInAdvancedViewOnly: TRUE

dn: CN=volume-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 5,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 4,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 3,{6dfe648b-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6490-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames:: dU5DTmFtZSxDaGVtaW4gcsOpc2VhdQ==
attributeDisplayNames:: a2V5d29yZHMsTW90cy1jbMOpcw==
attributeDisplayNames:: bWFuYWdlZEJ5LEfDqXLDqSBwYXI=
attributeDisplayNames:: ZGVzY3JpcHRpb24sRGVzY3JpcHRpb24=
attributeDisplayNames:: Y24sTm9t
classDisplayName:: RG9zc2llciBwYXJ0YWfDqQ==
cn: volume-Display
contextMenu: 0,{62AE1F9A-126A-11D0-A14B-0800361B1103}
instanceType: 4
distinguishedName: CN=volume-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: volume-Display
shellPropertyPages: 2,{dde2c5e9-c8ae-11d0-bcdb-00c04fd8d5b6}
shellPropertyPages: 1,{f5d121f3-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=mSMQQueue-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{e62f8206-b71c-11d1-808d-00a024c48131}
adminPropertyPages: 1,{e62f8206-b71c-11d1-808d-00a024c48131}
classDisplayName: File d'attente MSMQ
cn: mSMQQueue-Display
creationWizard: {E62F8206-B71C-11D1-808D-00A024C48131}
iconPath: 0,mqsnap.dll,-251
instanceType: 4
distinguishedName: CN=mSMQQueue-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQQueue-Display
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=mSMQConfiguration-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{e62f8208-b71c-11d1-808d-00a024c48131}
adminPropertyPages: 1,{e62f8208-b71c-11d1-808d-00a024c48131}
classDisplayName: Configuration MSMQ
cn: mSMQConfiguration-Display
iconPath: 0,mqsnap.dll,-252
instanceType: 4
distinguishedName: CN=mSMQConfiguration-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQConfiguration-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQEnterpriseSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{2E4B37AB-CC8B-11D1-9C85-006008764D0E}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{2E4B37AB-CC8B-11D1-9C85-006008764D0E}
classDisplayName: Entreprise MSMQ
cn: mSMQEnterpriseSettings-Display
iconPath: 0,mqsnap.dll,-253
instanceType: 4
distinguishedName: CN=mSMQEnterpriseSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQEnterpriseSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQMigratedUser-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{fc5bf656-0b7f-11d3-883f-006094eb6406}
adminPropertyPages: 1,{fc5bf656-0b7f-11d3-883f-006094eb6406}
classDisplayName:: VXRpbGlzYXRldXIgYXlhbnQgdW5lIG1pc2Ugw6Agbml2ZWF1IE1TTVE=
cn: mSMQMigratedUser-Display
instanceType: 4
distinguishedName: CN=mSMQMigratedUser-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQMigratedUser-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQSiteLink-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{87b31390-d46d-11d1-8091-00a024c48131}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{87b31390-d46d-11d1-8091-00a024c48131}
classDisplayName: Liaison de routage MSMQ
cn: mSMQSiteLink-Display
creationWizard: {87b31390-d46d-11d1-8091-00a024c48131}
iconPath: 0,mqsnap.dll,-254
instanceType: 4
distinguishedName: CN=mSMQSiteLink-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQSiteLink-Display
showInAdvancedViewOnly: TRUE

dn: CN=mSMQSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{d251b000-d46e-11d1-8091-00a024c48131}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{d251b000-d46e-11d1-8091-00a024c48131}
classDisplayName:: UGFyYW3DqHRyZXMgTVNNUQ==
cn: mSMQSettings-Display
iconPath: 0,mqsnap.dll,-255
instanceType: 4
distinguishedName: CN=mSMQSettings-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: mSMQSettings-Display
showInAdvancedViewOnly: TRUE

dn: CN=remoteStorageServicePoint-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu:: MCwmR8OpcmVyLi4uLFJzQWRtaW4ubXNj
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames: cn,Nom
classDisplayName:: U2VydmljZSBkZSBzdG9ja2FnZSDDqXRlbmR1
cn: remoteStorageServicePoint-Display
instanceType: 4
distinguishedName: CN=remoteStorageServicePoint-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: remoteStorageServicePoint-Display
showInAdvancedViewOnly: TRUE
treatAsLeaf: TRUE

dn: CN=default-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 0,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
cn: default-Display
instanceType: 4
distinguishedName: CN=default-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: default-Display
shellPropertyPages: 1,{f2c3faae-c8ac-11d0-bcdb-00c04fd8d5b6}
showInAdvancedViewOnly: TRUE

dn: CN=sitesContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName: Conteneur de sites
cn: sitesContainer-Display
instanceType: 4
distinguishedName: CN=sitesContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: sitesContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=interSiteTransportContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName: Conteneur de transports inter-sites
cn: interSiteTransportContainer-Display
instanceType: 4
distinguishedName: CN=interSiteTransportContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: interSiteTransportContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=subnetContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: Q29udGVuZXVyIGRlIHNvdXMtcsOpc2VhdXg=
cn: subnetContainer-Display
instanceType: 4
distinguishedName: CN=subnetContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: subnetContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=serversContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 2,{6BA3F852-23C6-11D1-B91F-00A0C9A06D2D}
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName: Conteneur de serveurs
cn: serversContainer-Display
instanceType: 4
distinguishedName: CN=serversContainer-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: serversContainer-Display
showInAdvancedViewOnly: TRUE

dn: CN=nTDSService-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName: Service Active Directory
cn: nTDSService-Display
instanceType: 4
distinguishedName: CN=nTDSService-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: nTDSService-Display
showInAdvancedViewOnly: TRUE

dn: CN=queryPolicy-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6384e23e-736d-11d1-bd0d-00c04fd8d5b6}
classDisplayName:: U3RyYXTDqWdpZSBkZSByZXF1w6p0ZQ==
cn: queryPolicy-Display
instanceType: 4
distinguishedName: CN=queryPolicy-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: queryPolicy-Display
showInAdvancedViewOnly: TRUE

dn: CN=foreignSecurityPrincipal-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 1,{08eb4fa6-6ffd-11d1-b0e0-00c04fd8dca6}
adminPropertyPages: 3,{4E40F770-369C-11d0-8922-00A024AB2DBB}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{6dfe6486-a212-11d0-bcd5-00c04fd8d5b6}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
classDisplayName:: U8OpY3VyaXTDqSBleHTDqXJpZXVyZSBwcmluY2lwYWxl
cn: foreignSecurityPrincipal-Display
instanceType: 4
distinguishedName: CN=foreignSecurityPrincipal-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: foreignSecurityPrincipal-Display
showInAdvancedViewOnly: TRUE

dn: CN=pKICertificateTemplate-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
adminContextMenu: 0,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
adminPropertyPages: 3,{4e40f770-369c-11d0-8922-00a024ab2dbb}
adminPropertyPages: 2,{6dfe6488-a212-11d0-bcd5-00c04fd8d5b6}
adminPropertyPages: 1,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
attributeDisplayNames: description,Description
attributeDisplayNames: cn,Nom
classDisplayName:: TW9kw6hsZSBkZSBjZXJ0aWZpY2F0
cn: pKICertificateTemplate-Display
contextMenu: 0,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
iconPath: 0,capesnpn.dll,-227
instanceType: 4
distinguishedName: CN=pKICertificateTemplate-Display,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=Display-Specifier,CN=Schema,<Configuration NC Distinguished Name>
objectClass: displaySpecifier
name: pKICertificateTemplate-Display
shellPropertyPages: 1,{9bff616c-3e02-11d2-a4ca-00c04fb93209}
showInAdvancedViewOnly: TRUE

dn: CN=DS-UI-Default-Settings,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
changetype: add
cn: DS-UI-Default-Settings
dSUIAdminNotification: 1,{E62F8206-B71C-11D1-808D-00A024C48131}
instanceType: 4
distinguishedName: CN=DS-UI-Default-Settings,CN=40C,CN=DisplaySpecifiers,<Configuration NC Distinguished Name>
objectCategory: CN=DS-UI-Settings,CN=Schema,<Configuration NC Distinguished Name>
objectClass: dSUISettings
name: DS-UI-Default-Settings
showInAdvancedViewOnly: TRUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef _ASM_IA64_PTRACE_OFFSETS_H
#define _ASM_IA64_PTRACE_OFFSETS_H

/*
 * Copyright (C) 1999, 2003 Hewlett-Packard Co
 *	David Mosberger-Tang <davidm@hpl.hp.com>
 */
/*
 * The "uarea" that can be accessed via PEEKUSER and POKEUSER is a
 * virtual structure that would have the following definition:
 *
 *	struct uarea {
 *		struct ia64_fpreg fph[96];		// f32-f127
 *		unsigned long nat_bits;
 *		unsigned long empty1;
 *		struct ia64_fpreg f2;			// f2-f5
 *			:
 *		struct ia64_fpreg f5;
 *		struct ia64_fpreg f10;			// f10-f31
 *			:
 *		struct ia64_fpreg f31;
 *		unsigned long r4;			// r4-r7
 *			:
 *		unsigned long r7;
 *		unsigned long b1;			// b1-b5
 *			:
 *		unsigned long b5;
 *		unsigned long ar_ec;
 *		unsigned long ar_lc;
 *		unsigned long empty2[5];
 *		unsigned long cr_ipsr;
 *		unsigned long cr_iip;
 *		unsigned long cfm;
 *		unsigned long ar_unat;
 *		unsigned long ar_pfs;
 *		unsigned long ar_rsc;
 *		unsigned long ar_rnat;
 *		unsigned long ar_bspstore;
 *		unsigned long pr;
 *		unsigned long b6;
 *		unsigned long ar_bsp;
 *		unsigned long r1;
 *		unsigned long r2;
 *		unsigned long r3;
 *		unsigned long r12;
 *		unsigned long r13;
 *		unsigned long r14;
 *		unsigned long r15;
 *		unsigned long r8;
 *		unsigned long r9;
 *		unsigned long r10;
 *		unsigned long r11;
 *		unsigned long r16;
 *			:
 *		unsigned long r31;
 *		unsigned long ar_ccv;
 *		unsigned long ar_fpsr;
 *		unsigned long b0;
 *		unsigned long b7;
 *		unsigned long f6;
 *		unsigned long f7;
 *		unsigned long f8;
 *		unsigned long f9;
 *		unsigned long ar_csd;
 *		unsigned long ar_ssd;
 *		unsigned long rsvd1[710];
 *		unsigned long dbr[8];
 *		unsigned long rsvd2[504];
 *		unsigned long ibr[8];
 *		unsigned long rsvd3[504];
 *		unsigned long pmd[4];
 *	}
 */

/* fph: */
#define PT_F32			0x0000
#define PT_F33			0x0010
#define PT_F34			0x0020
#define PT_F35			0x0030
#define PT_F36			0x0040
#define PT_F37			0x0050
#define PT_F38			0x0060
#define PT_F39			0x0070
#define PT_F40			0x0080
#define PT_F41			0x0090
#define PT_F42			0x00a0
#define PT_F43			0x00b0
#define PT_F44			0x00c0
#define PT_F45			0x00d0
#define PT_F46			0x00e0
#define PT_F47			0x00f0
#define PT_F48			0x0100
#define PT_F49			0x0110
#define PT_F50			0x0120
#define PT_F51			0x0130
#define PT_F52			0x0140
#define PT_F53			0x0150
#define PT_F54			0x0160
#define PT_F55			0x0170
#define PT_F56			0x0180
#define PT_F57			0x0190
#define PT_F58			0x01a0
#define PT_F59			0x01b0
#define PT_F60			0x01c0
#define PT_F61			0x01d0
#define PT_F62			0x01e0
#define PT_F63			0x01f0
#define PT_F64			0x0200
#define PT_F65			0x0210
#define PT_F66			0x0220
#define PT_F67			0x0230
#define PT_F68			0x0240
#define PT_F69			0x0250
#define PT_F70			0x0260
#define PT_F71			0x0270
#define PT_F72			0x0280
#define PT_F73			0x0290
#define PT_F74			0x02a0
#define PT_F75			0x02b0
#define PT_F76			0x02c0
#define PT_F77			0x02d0
#define PT_F78			0x02e0
#define PT_F79			0x02f0
#define PT_F80			0x0300
#define PT_F81			0x0310
#define PT_F82			0x0320
#define PT_F83			0x0330
#define PT_F84			0x0340
#define PT_F85			0x0350
#define PT_F86			0x0360
#define PT_F87			0x0370
#define PT_F88			0x0380
#define PT_F89			0x0390
#define PT_F90			0x03a0
#define PT_F91			0x03b0
#define PT_F92			0x03c0
#define PT_F93			0x03d0
#define PT_F94			0x03e0
#define PT_F95			0x03f0
#define PT_F96			0x0400
#define PT_F97			0x0410
#define PT_F98			0x0420
#define PT_F99			0x0430
#define PT_F100			0x0440
#define PT_F101			0x0450
#define PT_F102			0x0460
#define PT_F103			0x0470
#define PT_F104			0x0480
#define PT_F105			0x0490
#define PT_F106			0x04a0
#define PT_F107			0x04b0
#define PT_F108			0x04c0
#define PT_F109			0x04d0
#define PT_F110			0x04e0
#define PT_F111			0x04f0
#define PT_F112			0x0500
#define PT_F113			0x0510
#define PT_F114			0x0520
#define PT_F115			0x0530
#define PT_F116			0x0540
#define PT_F117			0x0550
#define PT_F118			0x0560
#define PT_F119			0x0570
#define PT_F120			0x0580
#define PT_F121			0x0590
#define PT_F122			0x05a0
#define PT_F123			0x05b0
#define PT_F124			0x05c0
#define PT_F125			0x05d0
#define PT_F126			0x05e0
#define PT_F127			0x05f0

#define PT_NAT_BITS		0x0600

#define PT_F2			0x0610
#define PT_F3			0x0620
#define PT_F4			0x0630
#define PT_F5			0x0640
#define PT_F10			0x0650
#define PT_F11			0x0660
#define PT_F12			0x0670
#define PT_F13			0x0680
#define PT_F14			0x0690
#define PT_F15			0x06a0
#define PT_F16			0x06b0
#define PT_F17			0x06c0
#define PT_F18			0x06d0
#define PT_F19			0x06e0
#define PT_F20			0x06f0
#define PT_F21			0x0700
#define PT_F22			0x0710
#define PT_F23			0x0720
#define PT_F24			0x0730
#define PT_F25			0x0740
#define PT_F26			0x0750
#define PT_F27			0x0760
#define PT_F28			0x0770
#define PT_F29			0x0780
#define PT_F30			0x0790
#define PT_F31			0x07a0
#define PT_R4			0x07b0
#define PT_R5			0x07b8
#define PT_R6			0x07c0
#define PT_R7			0x07c8

#define PT_B1			0x07d8
#define PT_B2			0x07e0
#define PT_B3			0x07e8
#define PT_B4			0x07f0
#define PT_B5			0x07f8

#define PT_AR_EC		0x0800
#define PT_AR_LC		0x0808

#define PT_CR_IPSR		0x0830
#define PT_CR_IIP		0x0838
#define PT_CFM			0x0840
#define PT_AR_UNAT		0x0848
#define PT_AR_PFS		0x0850
#define PT_AR_RSC		0x0858
#define PT_AR_RNAT		0x0860
#define PT_AR_BSPSTORE		0x0868
#define PT_PR			0x0870
#define PT_B6			0x0878
#define PT_AR_BSP		0x0880	/* note: this points to the *end* of the backing store! */
#define PT_R1			0x0888
#define PT_R2			0x0890
#define PT_R3			0x0898
#define PT_R12			0x08a0
#define PT_R13			0x08a8
#define PT_R14			0x08b0
#define PT_R15			0x08b8
#define PT_R8 			0x08c0
#define PT_R9			0x08c8
#define PT_R10			0x08d0
#define PT_R11			0x08d8
#define PT_R16			0x08e0
#define PT_R17			0x08e8
#define PT_R18			0x08f0
#define PT_R19			0x08f8
#define PT_R20			0x0900
#define PT_R21			0x0908
#define PT_R22			0x0910
#define PT_R23			0x0918
#define PT_R24			0x0920
#define PT_R25			0x0928
#define PT_R26			0x0930
#define PT_R27			0x0938
#define PT_R28			0x0940
#define PT_R29			0x0948
#define PT_R30			0x0950
#define PT_R31			0x0958
#define PT_AR_CCV		0x0960
#define PT_AR_FPSR		0x0968
#define PT_B0			0x0970
#define PT_B7			0x0978
#define PT_F6			0x0980
#define PT_F7			0x0990
#define PT_F8			0x09a0
#define PT_F9			0x09b0
#define PT_AR_CSD		0x09c0
#define PT_AR_SSD		0x09c8

#define PT_DBR			0x2000	/* data breakpoint registers */
#define PT_IBR			0x3000	/* instruction breakpoint registers */
#define PT_PMD			0x4000	/* performance monitoring counters */

#endif /* _ASM_IA64_PTRACE_OFFSETS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * Modified 1999
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 *
 * 99/01/28	Added N_IRDA and N_SMSBLOCK
 */
#ifndef _UAPI_ASM_IA64_TERMIOS_H
#define _UAPI_ASM_IA64_TERMIOS_H


#include <asm/termbits.h>
#include <asm/ioctls.h>

struct winsize {
	unsigned short ws_row;
	unsigned short ws_col;
	unsigned short ws_xpixel;
	unsigned short ws_ypixel;
};

#define NCC 8
struct termio {
	unsigned short c_iflag;		/* input mode flags */
	unsigned short c_oflag;		/* output mode flags */
	unsigned short c_cflag;		/* control mode flags */
	unsigned short c_lflag;		/* local mode flags */
	unsigned char c_line;		/* line discipline */
	unsigned char c_cc[NCC];	/* control characters */
};

/* modem lines */
#define TIOCM_LE	0x001
#define TIOCM_DTR	0x002
#define TIOCM_RTS	0x004
#define TIOCM_ST	0x008
#define TIOCM_SR	0x010
#define TIOCM_CTS	0x020
#define TIOCM_CAR	0x040
#define TIOCM_RNG	0x080
#define TIOCM_DSR	0x100
#define TIOCM_CD	TIOCM_CAR
#define TIOCM_RI	TIOCM_RNG
#define TIOCM_OUT1	0x2000
#define TIOCM_OUT2	0x4000
#define TIOCM_LOOP	0x8000

/* ioctl (fd, TIOCSERGETLSR, &result) where result may be as below */


#endif /* _UAPI_ASM_IA64_TERMIOS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef _ASM_IA64_BYTEORDER_H
#define _ASM_IA64_BYTEORDER_H

#include <linux/byteorder/little_endian.h>

#endif /* _ASM_IA64_BYTEORDER_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_IA64_RESOURCE_H
#define _ASM_IA64_RESOURCE_H

#include <asm/ustack.h>
#include <asm-generic/resource.h>

#endif /* _ASM_IA64_RESOURCE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef _ASM_IA64_SOCKIOS_H
#define _ASM_IA64_SOCKIOS_H

/*
 * Socket-level I/O control calls.
 *
 * Based on <asm-i386/sockios.h>.
 *
 * Modified 1998, 1999
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 */
#define FIOSETOWN 	0x8901
#define SIOCSPGRP	0x8902
#define FIOGETOWN	0x8903
#define SIOCGPGRP	0x8904
#define SIOCATMARK	0x8905
#define SIOCGSTAMP	0x8906		/* Get stamp (timeval) */
#define SIOCGSTAMPNS	0x8907		/* Get stamp (timespec) */

#endif /* _ASM_IA64_SOCKIOS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #include <asm-generic/errno.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef _ASM_IA64_SIGCONTEXT_H
#define _ASM_IA64_SIGCONTEXT_H

/*
 * Copyright (C) 1998, 1999, 2001 Hewlett-Packard Co
 * Copyright (C) 1998, 1999, 2001 David Mosberger-Tang <davidm@hpl.hp.com>
 */

#include <asm/fpu.h>

#define IA64_SC_FLAG_ONSTACK_BIT		0	/* is handler running on signal stack? */
#define IA64_SC_FLAG_IN_SYSCALL_BIT		1	/* did signal interrupt a syscall? */
#define IA64_SC_FLAG_FPH_VALID_BIT		2	/* is state in f[32]-f[127] valid? */

#define IA64_SC_FLAG_ONSTACK		(1 << IA64_SC_FLAG_ONSTACK_BIT)
#define IA64_SC_FLAG_IN_SYSCALL		(1 << IA64_SC_FLAG_IN_SYSCALL_BIT)
#define IA64_SC_FLAG_FPH_VALID		(1 << IA64_SC_FLAG_FPH_VALID_BIT)

# ifndef __ASSEMBLY__

/*
 * Note on handling of register backing store: sc_ar_bsp contains the address that would
 * be found in ar.bsp after executing a "cover" instruction the context in which the
 * signal was raised.  If signal delivery required switching to an alternate signal stack
 * (sc_rbs_base is not NULL), the "dirty" partition (as it would exist after executing the
 * imaginary "cover" instruction) is backed by the *alternate* signal stack, not the
 * original one.  In this case, sc_rbs_base contains the base address of the new register
 * backing store.  The number of registers in the dirty partition can be calculated as:
 *
 *   ndirty = ia64_rse_num_regs(sc_rbs_base, sc_rbs_base + (sc_loadrs >> 16))
 *
 */

struct sigcontext {
	unsigned long		sc_flags;	/* see manifest constants above */
	unsigned long		sc_nat;		/* bit i == 1 iff scratch reg gr[i] is a NaT */
	stack_t			sc_stack;	/* previously active stack */

	unsigned long		sc_ip;		/* instruction pointer */
	unsigned long		sc_cfm;		/* current frame marker */
	unsigned long		sc_um;		/* user mask bits */
	unsigned long		sc_ar_rsc;	/* register stack configuration register */
	unsigned long		sc_ar_bsp;	/* backing store pointer */
	unsigned long		sc_ar_rnat;	/* RSE NaT collection register */
	unsigned long		sc_ar_ccv;	/* compare and exchange compare value register */
	unsigned long		sc_ar_unat;	/* ar.unat of interrupted context */
	unsigned long		sc_ar_fpsr;	/* floating-point status register */
	unsigned long		sc_ar_pfs;	/* previous function state */
	unsigned long		sc_ar_lc;	/* loop count register */
	unsigned long		sc_pr;		/* predicate registers */
	unsigned long		sc_br[8];	/* branch registers */
	/* Note: sc_gr[0] is used as the "uc_link" member of ucontext_t */
	unsigned long		sc_gr[32];	/* general registers (static partition) */
	struct ia64_fpreg	sc_fr[128];	/* floating-point registers */

	unsigned long		sc_rbs_base;	/* NULL or new base of sighandler's rbs */
	unsigned long		sc_loadrs;	/* see description above */

	unsigned long		sc_ar25;	/* cmp8xchg16 uses this */
	unsigned long		sc_ar26;	/* rsvd for scratch use */
	unsigned long		sc_rsvd[12];	/* reserved for future use */
	/*
	 * The mask must come last so we can increase _NSIG_WORDS
	 * without breaking binary compatibility.
	 */
	sigset_t		sc_mask;	/* signal mask to restore after handler returns */
};

# endif /* __ASSEMBLY__ */
#endif /* _ASM_IA64_SIGCONTEXT_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #include <asm-generic/poll.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef __ASM_IA64_BITSPERLONG_H
#define __ASM_IA64_BITSPERLONG_H

#define __BITS_PER_LONG 64

#include <asm-generic/bitsperlong.h>

#endif /* __ASM_IA64_BITSPERLONG_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef _ASM_IA64_UCONTEXT_H
#define _ASM_IA64_UCONTEXT_H

struct ucontext {
	struct sigcontext uc_mcontext;
};

#define uc_link		uc_mcontext.sc_gr[0]	/* wrong type; nobody cares */
#define uc_sigmask	uc_mcontext.sc_sigmask
#define uc_stack	uc_mcontext.sc_stack

#endif /* _ASM_IA64_UCONTEXT_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef _ASM_IA64_SEMBUF_H
#define _ASM_IA64_SEMBUF_H

/*
 * The semid64_ds structure for IA-64 architecture.
 * Note extra padding because this structure is passed back and forth
 * between kernel and user space.
 *
 * Pad space is left for:
 * - 2 miscellaneous 64-bit values
 */

struct semid64_ds {
	struct ipc64_perm sem_perm;		/* permissions .. see ipc.h */
	__kernel_time_t	sem_otime;		/* last semop time */
	__kernel_time_t	sem_ctime;		/* last change time */
	unsigned long	sem_nsems;		/* no. of semaphores in array */
	unsigned long	__unused1;
	unsigned long	__unused2;
};

#endif /* _ASM_IA64_SEMBUF_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #ifndef _ASM_IA64_MSGBUF_H
#define _ASM_IA64_MSGBUF_H

/*
 * The msqid64_ds structure for IA-64 architecture.
 * Note extra padding because this structure is passed back and forth
 * between kernel and user space.
 *
 * Pad space is left for:
 * - 2 miscellaneous 64-bit values
 */

struct msqid64_ds {
	struct ipc64_perm msg_perm;
	__kernel_time_t msg_stime;	/* last msgsnd time */
	__kernel_time_t msg_rtime;	/* last msgrcv time */
	__kernel_time_t msg_ctime;	/* last change time */
	unsigned long  msg_cbytes;	/* current number of bytes on queue */
	unsigned long  msg_qnum;	/* number of messages in queue */
	unsigned long  msg_qbytes;	/* max number of bytes on queue */
	__kernel_pid_t msg_lspid;	/* pid of last msgsnd */
	__kernel_pid_t msg_lrpid;	/* last receive pid */
	unsigned long  __unused1;
	unsigned long  __unused2;
};

#endif /* _ASM_IA64_MSGBUF_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #ifndef _ASM_IA64_SWAB_H
#define _ASM_IA64_SWAB_H

/*
 * Modified 1998, 1999
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co.
 */

#include <linux/types.h>
#include <asm/intrinsics.h>
#include <linux/compiler.h>

static __inline__ __attribute_const__ __u64 __arch_swab64(__u64 x)
{
	__u64 result;

	result = ia64_mux1(x, ia64_mux1_rev);
	return result;
}
#define __arch_swab64 __arch_swab64

static __inline__ __attribute_const__ __u32 __arch_swab32(__u32 x)
{
	return __arch_swab64(x) >> 32;
}
#define __arch_swab32 __arch_swab32

static __inline__ __attribute_const__ __u16 __arch_swab16(__u16 x)
{
	return __arch_swab64(x) >> 48;
}
#define __arch_swab16 __arch_swab16

#endif /* _ASM_IA64_SWAB_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /*
 * This file is never included by application software unless explicitly
 * requested (e.g., via linux/types.h) in which case the application is
 * Linux specific so (user-) name space pollution is not a major issue.
 * However, for interoperability, libraries still need to be careful to
 * avoid naming clashes.
 *
 * Based on <asm-alpha/types.h>.
 *
 * Modified 1998-2000, 2002
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 */
#ifndef _UAPI_ASM_IA64_TYPES_H
#define _UAPI_ASM_IA64_TYPES_H


#ifndef __KERNEL__
#include <asm-generic/int-l64.h>
#endif

#ifdef __ASSEMBLY__
# define __IA64_UL(x)		(x)
# define __IA64_UL_CONST(x)	x

#else
# define __IA64_UL(x)		((unsigned long)(x))
# define __IA64_UL_CONST(x)	x##UL

#endif /* !__ASSEMBLY__ */

#endif /* _UAPI_ASM_IA64_TYPES_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #include <asm-generic/ipcbuf.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #ifndef _ASM_IA64_INTEL_INTRIN_H
#define _ASM_IA64_INTEL_INTRIN_H
/*
 * Intel Compiler Intrinsics
 *
 * Copyright (C) 2002,2003 Jun Nakajima <jun.nakajima@intel.com>
 * Copyright (C) 2002,2003 Suresh Siddha <suresh.b.siddha@intel.com>
 * Copyright (C) 2005,2006 Hongjiu Lu <hongjiu.lu@intel.com>
 *
 */
#include <ia64intrin.h>

#define ia64_barrier()		__memory_barrier()

#define ia64_stop()	/* Nothing: As of now stop bit is generated for each
		 	 * intrinsic
		 	 */

#define ia64_native_getreg	__getReg
#define ia64_native_setreg	__setReg

#define ia64_hint		__hint
#define ia64_hint_pause		__hint_pause

#define ia64_mux1_brcst		_m64_mux1_brcst
#define ia64_mux1_mix		_m64_mux1_mix
#define ia64_mux1_shuf		_m64_mux1_shuf
#define ia64_mux1_alt		_m64_mux1_alt
#define ia64_mux1_rev		_m64_mux1_rev

#define ia64_mux1(x,v)		_m_to_int64(_m64_mux1(_m_from_int64(x), (v)))
#define ia64_popcnt		_m64_popcnt
#define ia64_getf_exp		__getf_exp
#define ia64_shrp		_m64_shrp

#define ia64_tpa		__tpa
#define ia64_invala		__invala
#define ia64_invala_gr		__invala_gr
#define ia64_invala_fr		__invala_fr
#define ia64_nop		__nop
#define ia64_sum		__sum
#define ia64_native_ssm		__ssm
#define ia64_rum		__rum
#define ia64_native_rsm		__rsm
#define ia64_native_fc 		__fc

#define ia64_ldfs		__ldfs
#define ia64_ldfd		__ldfd
#define ia64_ldfe		__ldfe
#define ia64_ldf8		__ldf8
#define ia64_ldf_fill		__ldf_fill

#define ia64_stfs		__stfs
#define ia64_stfd		__stfd
#define ia64_stfe		__stfe
#define ia64_stf8		__stf8
#define ia64_stf_spill		__stf_spill

#define ia64_mf			__mf
#define ia64_mfa		__mfa

#define ia64_fetchadd4_acq	__fetchadd4_acq
#define ia64_fetchadd4_rel	__fetchadd4_rel
#define ia64_fetchadd8_acq	__fetchadd8_acq
#define ia64_fetchadd8_rel	__fetchadd8_rel

#define ia64_xchg1		_InterlockedExchange8
#define ia64_xchg2		_InterlockedExchange16
#define ia64_xchg4		_InterlockedExchange
#define ia64_xchg8		_InterlockedExchange64

#define ia64_cmpxchg1_rel	_InterlockedCompareExchange8_rel
#define ia64_cmpxchg1_acq	_InterlockedCompareExchange8_acq
#define ia64_cmpxchg2_rel	_InterlockedCompareExchange16_rel
#define ia64_cmpxchg2_acq	_InterlockedCompareExchange16_acq
#define ia64_cmpxchg4_rel	_InterlockedCompareExchange_rel
#define ia64_cmpxchg4_acq	_InterlockedCompareExchange_acq
#define ia64_cmpxchg8_rel	_InterlockedCompareExchange64_rel
#define ia64_cmpxchg8_acq	_InterlockedCompareExchange64_acq

#define __ia64_set_dbr(index, val)	\
		__setIndReg(_IA64_REG_INDR_DBR, index, val)
#define ia64_set_ibr(index, val)	\
		__setIndReg(_IA64_REG_INDR_IBR, index, val)
#define ia64_set_pkr(index, val)	\
		__setIndReg(_IA64_REG_INDR_PKR, index, val)
#define ia64_set_pmc(index, val)	\
		__setIndReg(_IA64_REG_INDR_PMC, index, val)
#define ia64_set_pmd(index, val)	\
		__setIndReg(_IA64_REG_INDR_PMD, index, val)
#define ia64_native_set_rr(index, val)	\
		__setIndReg(_IA64_REG_INDR_RR, index, val)

#define ia64_native_get_cpuid(index)	\
		__getIndReg(_IA64_REG_INDR_CPUID, index)
#define __ia64_get_dbr(index)		__getIndReg(_IA64_REG_INDR_DBR, index)
#define ia64_get_ibr(index)		__getIndReg(_IA64_REG_INDR_IBR, index)
#define ia64_get_pkr(index)		__getIndReg(_IA64_REG_INDR_PKR, index)
#define ia64_get_pmc(index)		__getIndReg(_IA64_REG_INDR_PMC, index)
#define ia64_native_get_pmd(index)	__getIndReg(_IA64_REG_INDR_PMD, index)
#define ia64_native_get_rr(index)	__getIndReg(_IA64_REG_INDR_RR, index)

#define ia64_srlz_d		__dsrlz
#define ia64_srlz_i		__isrlz

#define ia64_dv_serialize_data()
#define ia64_dv_serialize_instruction()

#define ia64_st1_rel		__st1_rel
#define ia64_st2_rel		__st2_rel
#define ia64_st4_rel		__st4_rel
#define ia64_st8_rel		__st8_rel

/* FIXME: need st4.rel.nta intrinsic */
#define ia64_st4_rel_nta	__st4_rel

#define ia64_ld1_acq		__ld1_acq
#define ia64_ld2_acq		__ld2_acq
#define ia64_ld4_acq		__ld4_acq
#define ia64_ld8_acq		__ld8_acq

#define ia64_sync_i		__synci
#define ia64_native_thash	__thash
#define ia64_native_ttag	__ttag
#define ia64_itcd		__itcd
#define ia64_itci		__itci
#define ia64_itrd		__itrd
#define ia64_itri		__itri
#define ia64_ptce		__ptce
#define ia64_ptcl		__ptcl
#define ia64_native_ptcg	__ptcg
#define ia64_native_ptcga	__ptcga
#define ia64_ptri		__ptri
#define ia64_ptrd		__ptrd
#define ia64_dep_mi		_m64_dep_mi

/* Values for lfhint in __lfetch and __lfetch_fault */

#define ia64_lfhint_none	__lfhint_none
#define ia64_lfhint_nt1		__lfhint_nt1
#define ia64_lfhint_nt2		__lfhint_nt2
#define ia64_lfhint_nta		__lfhint_nta

#define ia64_lfetch		__lfetch
#define ia64_lfetch_excl	__lfetch_excl
#define ia64_lfetch_fault	__lfetch_fault
#define ia64_lfetch_fault_excl	__lfetch_fault_excl

#define ia64_native_intrin_local_irq_restore(x)		\
do {							\
	if ((x) != 0) {					\
		ia64_native_ssm(IA64_PSR_I);		\
		ia64_srlz_d();				\
	} else {					\
		ia64_native_rsm(IA64_PSR_I);		\
	}						\
} while (0)

#define __builtin_trap()	__break(0);

#endif /* _ASM_IA64_INTEL_INTRIN_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * Modified 1998-2001, 2003
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 *
 * Unfortunately, this file is being included by bits/signal.h in
 * glibc-2.x.  Hence the #ifdef __KERNEL__ ugliness.
 */
#ifndef _UAPI_ASM_IA64_SIGNAL_H
#define _UAPI_ASM_IA64_SIGNAL_H


#define SIGHUP		 1
#define SIGINT		 2
#define SIGQUIT		 3
#define SIGILL		 4
#define SIGTRAP		 5
#define SIGABRT		 6
#define SIGIOT		 6
#define SIGBUS		 7
#define SIGFPE		 8
#define SIGKILL		 9
#define SIGUSR1		10
#define SIGSEGV		11
#define SIGUSR2		12
#define SIGPIPE		13
#define SIGALRM		14
#define SIGTERM		15
#define SIGSTKFLT	16
#define SIGCHLD		17
#define SIGCONT		18
#define SIGSTOP		19
#define SIGTSTP		20
#define SIGTTIN		21
#define SIGTTOU		22
#define SIGURG		23
#define SIGXCPU		24
#define SIGXFSZ		25
#define SIGVTALRM	26
#define SIGPROF		27
#define SIGWINCH	28
#define SIGIO		29
#define SIGPOLL		SIGIO
/*
#define SIGLOST		29
*/
#define SIGPWR		30
#define SIGSYS		31
/* signal 31 is no longer "unused", but the SIGUNUSED macro remains for backwards compatibility */
#define	SIGUNUSED	31

/* These should not be considered constants from userland.  */
#define SIGRTMIN	32
#define SIGRTMAX	_NSIG

/*
 * SA_FLAGS values:
 *
 * SA_ONSTACK indicates that a registered stack_t will be used.
 * SA_RESTART flag to get restarting signals (which were the default long ago)
 * SA_NOCLDSTOP flag to turn off SIGCHLD when children stop.
 * SA_RESETHAND clears the handler when the signal is delivered.
 * SA_NOCLDWAIT flag on SIGCHLD to inhibit zombies.
 * SA_NODEFER prevents the current signal from being masked in the handler.
 *
 * SA_ONESHOT and SA_NOMASK are the historical Linux names for the Single
 * Unix names RESETHAND and NODEFER respectively.
 */
#define SA_NOCLDSTOP	0x00000001
#define SA_NOCLDWAIT	0x00000002
#define SA_SIGINFO	0x00000004
#define SA_ONSTACK	0x08000000
#define SA_RESTART	0x10000000
#define SA_NODEFER	0x40000000
#define SA_RESETHAND	0x80000000

#define SA_NOMASK	SA_NODEFER
#define SA_ONESHOT	SA_RESETHAND

#define SA_RESTORER	0x04000000

/*
 * The minimum stack size needs to be fairly large because we want to
 * be sure that an app compiled for today's CPUs will continue to run
 * on all future CPU models.  The CPU model matters because the signal
 * frame needs to have space for the complete machine state, including
 * all physical stacked registers.  The number of physical stacked
 * registers is CPU model dependent, but given that the width of
 * ar.rsc.loadrs is 14 bits, we can assume that they'll never take up
 * more than 16KB of space.
 */
#if 1
  /*
   * This is a stupid typo: the value was _meant_ to be 131072 (0x20000), but I typed it
   * in wrong. ;-(  To preserve backwards compatibility, we leave the kernel at the
   * incorrect value and fix libc only.
   */
# define MINSIGSTKSZ	131027	/* min. stack size for sigaltstack() */
#else
# define MINSIGSTKSZ	131072	/* min. stack size for sigaltstack() */
#endif
#define SIGSTKSZ	262144	/* default stack size for sigaltstack() */


#include <asm-generic/signal-defs.h>

# ifndef __ASSEMBLY__

#  include <linux/types.h>

/* Avoid too many header ordering problems.  */
struct siginfo;

typedef struct sigaltstack {
	void __user *ss_sp;
	int ss_flags;
	size_t ss_size;
} stack_t;


# endif /* !__ASSEMBLY__ */
#endif /* _UAPI_ASM_IA64_SIGNAL_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifndef _ASM_IA64_BREAK_H
#define _ASM_IA64_BREAK_H

/*
 * IA-64 Linux break numbers.
 *
 * Copyright (C) 1999 Hewlett-Packard Co
 * Copyright (C) 1999 David Mosberger-Tang <davidm@hpl.hp.com>
 */

/*
 * OS-specific debug break numbers:
 */
#define __IA64_BREAK_KDB		0x80100
#define __IA64_BREAK_KPROBE		0x81000 /* .. 0x81fff */
#define __IA64_BREAK_JPROBE		0x82000

/*
 * OS-specific break numbers:
 */
#define __IA64_BREAK_SYSCALL		0x100000

#endif /* _ASM_IA64_BREAK_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * Copyright (C) 2002-2003 Hewlett-Packard Co
 *               Stephane Eranian <eranian@hpl.hp.com>
 *
 * This file implements the default sampling buffer format
 * for Linux/ia64 perfmon subsystem.
 */
#ifndef __PERFMON_DEFAULT_SMPL_H__
#define __PERFMON_DEFAULT_SMPL_H__ 1

#define PFM_DEFAULT_SMPL_UUID { \
		0x4d, 0x72, 0xbe, 0xc0, 0x06, 0x64, 0x41, 0x43, 0x82, 0xb4, 0xd3, 0xfd, 0x27, 0x24, 0x3c, 0x97}

/*
 * format specific parameters (passed at context creation)
 */
typedef struct {
	unsigned long buf_size;		/* size of the buffer in bytes */
	unsigned int  flags;		/* buffer specific flags */
	unsigned int  res1;		/* for future use */
	unsigned long reserved[2];	/* for future use */
} pfm_default_smpl_arg_t;

/*
 * combined context+format specific structure. Can be passed
 * to PFM_CONTEXT_CREATE
 */
typedef struct {
	pfarg_context_t		ctx_arg;
	pfm_default_smpl_arg_t	buf_arg;
} pfm_default_smpl_ctx_arg_t;

/*
 * This header is at the beginning of the sampling buffer returned to the user.
 * It is directly followed by the first record.
 */
typedef struct {
	unsigned long	hdr_count;		/* how many valid entries */
	unsigned long	hdr_cur_offs;		/* current offset from top of buffer */
	unsigned long	hdr_reserved2;		/* reserved for future use */

	unsigned long	hdr_overflows;		/* how many times the buffer overflowed */
	unsigned long   hdr_buf_size;		/* how many bytes in the buffer */

	unsigned int	hdr_version;		/* contains perfmon version (smpl format diffs) */
	unsigned int	hdr_reserved1;		/* for future use */
	unsigned long	hdr_reserved[10];	/* for future use */
} pfm_default_smpl_hdr_t;

/*
 * Entry header in the sampling buffer.  The header is directly followed
 * with the values of the PMD registers of interest saved in increasing 
 * index order: PMD4, PMD5, and so on. How many PMDs are present depends 
 * on how the session was programmed.
 *
 * In the case where multiple counters overflow at the same time, multiple
 * entries are written consecutively.
 *
 * last_reset_value member indicates the initial value of the overflowed PMD. 
 */
typedef struct {
        int             pid;                    /* thread id (for NPTL, this is gettid()) */
        unsigned char   reserved1[3];           /* reserved for future use */
        unsigned char   ovfl_pmd;               /* index of overflowed PMD */

        unsigned long   last_reset_val;         /* initial value of overflowed PMD */
        unsigned long   ip;                     /* where did the overflow interrupt happened  */
        unsigned long   tstamp;                 /* ar.itc when entering perfmon intr. handler */

        unsigned short  cpu;                    /* cpu on which the overflow occurred */
        unsigned short  set;                    /* event set active when overflow occurred   */
        int    		tgid;              	/* thread group id (for NPTL, this is getpid()) */
} pfm_default_smpl_entry_t;

#define PFM_DEFAULT_MAX_PMDS		64 /* how many pmds supported by data structures (sizeof(unsigned long) */
#define PFM_DEFAULT_MAX_ENTRY_SIZE	(sizeof(pfm_default_smpl_entry_t)+(sizeof(unsigned long)*PFM_DEFAULT_MAX_PMDS))
#define PFM_DEFAULT_SMPL_MIN_BUF_SIZE	(sizeof(pfm_default_smpl_hdr_t)+PFM_DEFAULT_MAX_ENTRY_SIZE)

#define PFM_DEFAULT_SMPL_VERSION_MAJ	2U
#define PFM_DEFAULT_SMPL_VERSION_MIN	0U
#define PFM_DEFAULT_SMPL_VERSION	(((PFM_DEFAULT_SMPL_VERSION_MAJ&0xffff)<<16)|(PFM_DEFAULT_SMPL_VERSION_MIN & 0xffff))

#endif /* __PERFMON_DEFAULT_SMPL_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * Copyright (C) 2001-2003 Hewlett-Packard Co
 *               Stephane Eranian <eranian@hpl.hp.com>
 */

#ifndef _UAPI_ASM_IA64_PERFMON_H
#define _UAPI_ASM_IA64_PERFMON_H

/*
 * perfmon commands supported on all CPU models
 */
#define PFM_WRITE_PMCS		0x01
#define PFM_WRITE_PMDS		0x02
#define PFM_READ_PMDS		0x03
#define PFM_STOP		0x04
#define PFM_START		0x05
#define PFM_ENABLE		0x06 /* obsolete */
#define PFM_DISABLE		0x07 /* obsolete */
#define PFM_CREATE_CONTEXT	0x08
#define PFM_DESTROY_CONTEXT	0x09 /* obsolete use close() */
#define PFM_RESTART		0x0a
#define PFM_PROTECT_CONTEXT	0x0b /* obsolete */
#define PFM_GET_FEATURES	0x0c
#define PFM_DEBUG		0x0d
#define PFM_UNPROTECT_CONTEXT	0x0e /* obsolete */
#define PFM_GET_PMC_RESET_VAL	0x0f
#define PFM_LOAD_CONTEXT	0x10
#define PFM_UNLOAD_CONTEXT	0x11

/*
 * PMU model specific commands (may not be supported on all PMU models)
 */
#define PFM_WRITE_IBRS		0x20
#define PFM_WRITE_DBRS		0x21

/*
 * context flags
 */
#define PFM_FL_NOTIFY_BLOCK    	 0x01	/* block task on user level notifications */
#define PFM_FL_SYSTEM_WIDE	 0x02	/* create a system wide context */
#define PFM_FL_OVFL_NO_MSG	 0x80   /* do not post overflow/end messages for notification */

/*
 * event set flags
 */
#define PFM_SETFL_EXCL_IDLE      0x01   /* exclude idle task (syswide only) XXX: DO NOT USE YET */

/*
 * PMC flags
 */
#define PFM_REGFL_OVFL_NOTIFY	0x1	/* send notification on overflow */
#define PFM_REGFL_RANDOM	0x2	/* randomize sampling interval   */

/*
 * PMD/PMC/IBR/DBR return flags (ignored on input)
 *
 * Those flags are used on output and must be checked in case EAGAIN is returned
 * by any of the calls using a pfarg_reg_t or pfarg_dbreg_t structure.
 */
#define PFM_REG_RETFL_NOTAVAIL	(1UL<<31) /* set if register is implemented but not available */
#define PFM_REG_RETFL_EINVAL	(1UL<<30) /* set if register entry is invalid */
#define PFM_REG_RETFL_MASK	(PFM_REG_RETFL_NOTAVAIL|PFM_REG_RETFL_EINVAL)

#define PFM_REG_HAS_ERROR(flag)	(((flag) & PFM_REG_RETFL_MASK) != 0)

typedef unsigned char pfm_uuid_t[16];	/* custom sampling buffer identifier type */

/*
 * Request structure used to define a context
 */
typedef struct {
	pfm_uuid_t     ctx_smpl_buf_id;	 /* which buffer format to use (if needed) */
	unsigned long  ctx_flags;	 /* noblock/block */
	unsigned short ctx_nextra_sets;	 /* number of extra event sets (you always get 1) */
	unsigned short ctx_reserved1;	 /* for future use */
	int	       ctx_fd;		 /* return arg: unique identification for context */
	void	       *ctx_smpl_vaddr;	 /* return arg: virtual address of sampling buffer, is used */
	unsigned long  ctx_reserved2[11];/* for future use */
} pfarg_context_t;

/*
 * Request structure used to write/read a PMC or PMD
 */
typedef struct {
	unsigned int	reg_num;	   /* which register */
	unsigned short	reg_set;	   /* event set for this register */
	unsigned short	reg_reserved1;	   /* for future use */

	unsigned long	reg_value;	   /* initial pmc/pmd value */
	unsigned long	reg_flags;	   /* input: pmc/pmd flags, return: reg error */

	unsigned long	reg_long_reset;	   /* reset after buffer overflow notification */
	unsigned long	reg_short_reset;   /* reset after counter overflow */

	unsigned long	reg_reset_pmds[4]; /* which other counters to reset on overflow */
	unsigned long	reg_random_seed;   /* seed value when randomization is used */
	unsigned long	reg_random_mask;   /* bitmask used to limit random value */
	unsigned long   reg_last_reset_val;/* return: PMD last reset value */

	unsigned long	reg_smpl_pmds[4];  /* which pmds are accessed when PMC overflows */
	unsigned long	reg_smpl_eventid;  /* opaque sampling event identifier */

	unsigned long   reg_reserved2[3];   /* for future use */
} pfarg_reg_t;

typedef struct {
	unsigned int	dbreg_num;		/* which debug register */
	unsigned short	dbreg_set;		/* event set for this register */
	unsigned short	dbreg_reserved1;	/* for future use */
	unsigned long	dbreg_value;		/* value for debug register */
	unsigned long	dbreg_flags;		/* return: dbreg error */
	unsigned long	dbreg_reserved2[1];	/* for future use */
} pfarg_dbreg_t;

typedef struct {
	unsigned int	ft_version;	/* perfmon: major [16-31], minor [0-15] */
	unsigned int	ft_reserved;	/* reserved for future use */
	unsigned long	reserved[4];	/* for future use */
} pfarg_features_t;

typedef struct {
	pid_t		load_pid;	   /* process to load the context into */
	unsigned short	load_set;	   /* first event set to load */
	unsigned short	load_reserved1;	   /* for future use */
	unsigned long	load_reserved2[3]; /* for future use */
} pfarg_load_t;

typedef struct {
	int		msg_type;		/* generic message header */
	int		msg_ctx_fd;		/* generic message header */
	unsigned long	msg_ovfl_pmds[4];	/* which PMDs overflowed */
	unsigned short  msg_active_set;		/* active set at the time of overflow */
	unsigned short  msg_reserved1;		/* for future use */
	unsigned int    msg_reserved2;		/* for future use */
	unsigned long	msg_tstamp;		/* for perf tuning/debug */
} pfm_ovfl_msg_t;

typedef struct {
	int		msg_type;		/* generic message header */
	int		msg_ctx_fd;		/* generic message header */
	unsigned long	msg_tstamp;		/* for perf tuning */
} pfm_end_msg_t;

typedef struct {
	int		msg_type;		/* type of the message */
	int		msg_ctx_fd;		/* unique identifier for the context */
	unsigned long	msg_tstamp;		/* for perf tuning */
} pfm_gen_msg_t;

#define PFM_MSG_OVFL	1	/* an overflow happened */
#define PFM_MSG_END	2	/* task to which context was attached ended */

typedef union {
	pfm_ovfl_msg_t	pfm_ovfl_msg;
	pfm_end_msg_t	pfm_end_msg;
	pfm_gen_msg_t	pfm_gen_msg;
} pfm_msg_t;

/*
 * Define the version numbers for both perfmon as a whole and the sampling buffer format.
 */
#define PFM_VERSION_MAJ		 2U
#define PFM_VERSION_MIN		 0U
#define PFM_VERSION		 (((PFM_VERSION_MAJ&0xffff)<<16)|(PFM_VERSION_MIN & 0xffff))
#define PFM_VERSION_MAJOR(x)	 (((x)>>16) & 0xffff)
#define PFM_VERSION_MINOR(x)	 ((x) & 0xffff)


/*
 * miscellaneous architected definitions
 */
#define PMU_FIRST_COUNTER	4	/* first counting monitor (PMC/PMD) */
#define PMU_MAX_PMCS		256	/* maximum architected number of PMC registers */
#define PMU_MAX_PMDS		256	/* maximum architected number of PMD registers */


#endif /* _UAPI_ASM_IA64_PERFMON_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*
 * Based on <asm-i386/mman.h>.
 *
 * Modified 1998-2000, 2002
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 */
#ifndef _UAPI_ASM_IA64_MMAN_H
#define _UAPI_ASM_IA64_MMAN_H


#include <asm-generic/mman.h>

#define MAP_GROWSUP	0x0200		/* register stack-like segment */


#endif /* _UAPI_ASM_IA64_MMAN_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # UAPI Header export list
include include/uapi/asm-generic/Kbuild.asm

generic-y += kvm_para.h

header-y += auxvec.h
header-y += bitsperlong.h
header-y += break.h
header-y += byteorder.h
header-y += cmpxchg.h
header-y += errno.h
header-y += fcntl.h
header-y += fpu.h
header-y += gcc_intrin.h
header-y += ia64regs.h
header-y += intel_intrin.h
header-y += intrinsics.h
header-y += ioctl.h
header-y += ioctls.h
header-y += ipcbuf.h
header-y += kvm_para.h
header-y += mman.h
header-y += msgbuf.h
header-y += param.h
header-y += perfmon.h
header-y += perfmon_default_smpl.h
header-y += poll.h
header-y += posix_types.h
header-y += ptrace.h
header-y += ptrace_offsets.h
header-y += resource.h
header-y += rse.h
header-y += sembuf.h
header-y += setup.h
header-y += shmbuf.h
header-y += sigcontext.h
header-y += siginfo.h
header-y += signal.h
header-y += socket.h
header-y += sockios.h
header-y += stat.h
header-y += statfs.h
header-y += swab.h
header-y += termbits.h
header-y += termios.h
header-y += types.h
header-y += ucontext.h
header-y += unistd.h
header-y += ustack.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * Fundamental kernel parameters.
 *
 * Based on <asm-i386/param.h>.
 *
 * Modified 1998, 1999, 2002-2003
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 */
#ifndef _UAPI_ASM_IA64_PARAM_H
#define _UAPI_ASM_IA64_PARAM_H


#define EXEC_PAGESIZE	65536

#ifndef NOGROUP
# define NOGROUP	(-1)
#endif

#define MAXHOSTNAMELEN	64	/* max length of hostname */

#ifndef __KERNEL__
   /*
    * Technically, this is wrong, but some old apps still refer to it.  The proper way to
    * get the HZ value is via sysconf(_SC_CLK_TCK).
    */
# define HZ 1024
#endif

#endif /* _UAPI_ASM_IA64_PARAM_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #ifndef _ASM_IA64_STAT_H
#define _ASM_IA64_STAT_H

/*
 * Modified 1998, 1999
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 */

struct stat {
	unsigned long	st_dev;
	unsigned long	st_ino;
	unsigned long	st_nlink;
	unsigned int	st_mode;
	unsigned int	st_uid;
	unsigned int	st_gid;
	unsigned int	__pad0;
	unsigned long	st_rdev;
	unsigned long	st_size;
	unsigned long	st_atime;
	unsigned long	st_atime_nsec;
	unsigned long	st_mtime;
	unsigned long	st_mtime_nsec;
	unsigned long	st_ctime;
	unsigned long	st_ctime_nsec;
	unsigned long	st_blksize;
	long		st_blocks;
	unsigned long	__unused[3];
};

#define STAT_HAVE_NSEC 1

struct ia64_oldstat {
	unsigned int	st_dev;
	unsigned int	st_ino;
	unsigned int	st_mode;
	unsigned int	st_nlink;
	unsigned int	st_uid;
	unsigned int	st_gid;
	unsigned int	st_rdev;
	unsigned int	__pad1;
	unsigned long	st_size;
	unsigned long	st_atime;
	unsigned long	st_mtime;
	unsigned long	st_ctime;
	unsigned int	st_blksize;
	int		st_blocks;
	unsigned int	__unused1;
	unsigned int	__unused2;
};

#endif /* _ASM_IA64_STAT_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 *
 * Copyright (C) 2002,2003 Jun Nakajima <jun.nakajima@intel.com>
 * Copyright (C) 2002,2003 Suresh Siddha <suresh.b.siddha@intel.com>
 */
#ifndef _UAPI_ASM_IA64_GCC_INTRIN_H
#define _UAPI_ASM_IA64_GCC_INTRIN_H

#include <linux/types.h>
#include <linux/compiler.h>

/* define this macro to get some asm stmts included in 'c' files */
#define ASM_SUPPORTED

/* Optimization barrier */
/* The "volatile" is due to gcc bugs */
#define ia64_barrier()	asm volatile ("":::"memory")

#define ia64_stop()	asm volatile (";;"::)

#define ia64_invala_gr(regnum)	asm volatile ("invala.e r%0" :: "i"(regnum))

#define ia64_invala_fr(regnum)	asm volatile ("invala.e f%0" :: "i"(regnum))

#define ia64_flushrs() asm volatile ("flushrs;;":::"memory")

#define ia64_loadrs() asm volatile ("loadrs;;":::"memory")

extern void ia64_bad_param_for_setreg (void);
extern void ia64_bad_param_for_getreg (void);


#define ia64_native_setreg(regnum, val)						\
({										\
	switch (regnum) {							\
	    case _IA64_REG_PSR_L:						\
		    asm volatile ("mov psr.l=%0" :: "r"(val) : "memory");	\
		    break;							\
	    case _IA64_REG_AR_KR0 ... _IA64_REG_AR_EC:				\
		    asm volatile ("mov ar%0=%1" ::				\
		    			  "i" (regnum - _IA64_REG_AR_KR0),	\
					  "r"(val): "memory");			\
		    break;							\
	    case _IA64_REG_CR_DCR ... _IA64_REG_CR_LRR1:			\
		    asm volatile ("mov cr%0=%1" ::				\
				          "i" (regnum - _IA64_REG_CR_DCR),	\
					  "r"(val): "memory" );			\
		    break;							\
	    case _IA64_REG_SP:							\
		    asm volatile ("mov r12=%0" ::				\
			    		  "r"(val): "memory");			\
		    break;							\
	    case _IA64_REG_GP:							\
		    asm volatile ("mov gp=%0" :: "r"(val) : "memory");		\
		break;								\
	    default:								\
		    ia64_bad_param_for_setreg();				\
		    break;							\
	}									\
})

#define ia64_native_getreg(regnum)						\
({										\
	__u64 ia64_intri_res;							\
										\
	switch (regnum) {							\
	case _IA64_REG_GP:							\
		asm volatile ("mov %0=gp" : "=r"(ia64_intri_res));		\
		break;								\
	case _IA64_REG_IP:							\
		asm volatile ("mov %0=ip" : "=r"(ia64_intri_res));		\
		break;								\
	case _IA64_REG_PSR:							\
		asm volatile ("mov %0=psr" : "=r"(ia64_intri_res));		\
		break;								\
	case _IA64_REG_TP:	/* for current() */				\
		ia64_intri_res = ia64_r13;					\
		break;								\
	case _IA64_REG_AR_KR0 ... _IA64_REG_AR_EC:				\
		asm volatile ("mov %0=ar%1" : "=r" (ia64_intri_res)		\
				      : "i"(regnum - _IA64_REG_AR_KR0));	\
		break;								\
	case _IA64_REG_CR_DCR ... _IA64_REG_CR_LRR1:				\
		asm volatile ("mov %0=cr%1" : "=r" (ia64_intri_res)		\
				      : "i" (regnum - _IA64_REG_CR_DCR));	\
		break;								\
	case _IA64_REG_SP:							\
		asm volatile ("mov %0=sp" : "=r" (ia64_intri_res));		\
		break;								\
	default:								\
		ia64_bad_param_for_getreg();					\
		break;								\
	}									\
	ia64_intri_res;								\
})

#define ia64_hint_pause 0

#define ia64_hint(mode)						\
({								\
	switch (mode) {						\
	case ia64_hint_pause:					\
		asm volatile ("hint @pause" ::: "memory");	\
		break;						\
	}							\
})


/* Integer values for mux1 instruction */
#define ia64_mux1_brcst 0
#define ia64_mux1_mix   8
#define ia64_mux1_shuf  9
#define ia64_mux1_alt  10
#define ia64_mux1_rev  11

#define ia64_mux1(x, mode)							\
({										\
	__u64 ia64_intri_res;							\
										\
	switch (mode) {								\
	case ia64_mux1_brcst:							\
		asm ("mux1 %0=%1,@brcst" : "=r" (ia64_intri_res) : "r" (x));	\
		break;								\
	case ia64_mux1_mix:							\
		asm ("mux1 %0=%1,@mix" : "=r" (ia64_intri_res) : "r" (x));	\
		break;								\
	case ia64_mux1_shuf:							\
		asm ("mux1 %0=%1,@shuf" : "=r" (ia64_intri_res) : "r" (x));	\
		break;								\
	case ia64_mux1_alt:							\
		asm ("mux1 %0=%1,@alt" : "=r" (ia64_intri_res) : "r" (x));	\
		break;								\
	case ia64_mux1_rev:							\
		asm ("mux1 %0=%1,@rev" : "=r" (ia64_intri_res) : "r" (x));	\
		break;								\
	}									\
	ia64_intri_res;								\
})

#if __GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
# define ia64_popcnt(x)		__builtin_popcountl(x)
#else
# define ia64_popcnt(x)						\
  ({								\
	__u64 ia64_intri_res;					\
	asm ("popcnt %0=%1" : "=r" (ia64_intri_res) : "r" (x));	\
								\
	ia64_intri_res;						\
  })
#endif

#define ia64_getf_exp(x)					\
({								\
	long ia64_intri_res;					\
								\
	asm ("getf.exp %0=%1" : "=r"(ia64_intri_res) : "f"(x));	\
								\
	ia64_intri_res;						\
})

#define ia64_shrp(a, b, count)								\
({											\
	__u64 ia64_intri_res;								\
	asm ("shrp %0=%1,%2,%3" : "=r"(ia64_intri_res) : "r"(a), "r"(b), "i"(count));	\
	ia64_intri_res;									\
})

#define ia64_ldfs(regnum, x)					\
({								\
	register double __f__ asm ("f"#regnum);			\
	asm volatile ("ldfs %0=[%1]" :"=f"(__f__): "r"(x));	\
})

#define ia64_ldfd(regnum, x)					\
({								\
	register double __f__ asm ("f"#regnum);			\
	asm volatile ("ldfd %0=[%1]" :"=f"(__f__): "r"(x));	\
})

#define ia64_ldfe(regnum, x)					\
({								\
	register double __f__ asm ("f"#regnum);			\
	asm volatile ("ldfe %0=[%1]" :"=f"(__f__): "r"(x));	\
})

#define ia64_ldf8(regnum, x)					\
({								\
	register double __f__ asm ("f"#regnum);			\
	asm volatile ("ldf8 %0=[%1]" :"=f"(__f__): "r"(x));	\
})

#define ia64_ldf_fill(regnum, x)				\
({								\
	register double __f__ asm ("f"#regnum);			\
	asm volatile ("ldf.fill %0=[%1]" :"=f"(__f__): "r"(x));	\
})

#define ia64_st4_rel_nta(m, val)					\
({									\
	asm volatile ("st4.rel.nta [%0] = %1\n\t" :: "r"(m), "r"(val));	\
})

#define ia64_stfs(x, regnum)						\
({									\
	register double __f__ asm ("f"#regnum);				\
	asm volatile ("stfs [%0]=%1" :: "r"(x), "f"(__f__) : "memory");	\
})

#define ia64_stfd(x, regnum)						\
({									\
	register double __f__ asm ("f"#regnum);				\
	asm volatile ("stfd [%0]=%1" :: "r"(x), "f"(__f__) : "memory");	\
})

#define ia64_stfe(x, regnum)						\
({									\
	register double __f__ asm ("f"#regnum);				\
	asm volatile ("stfe [%0]=%1" :: "r"(x), "f"(__f__) : "memory");	\
})

#define ia64_stf8(x, regnum)						\
({									\
	register double __f__ asm ("f"#regnum);				\
	asm volatile ("stf8 [%0]=%1" :: "r"(x), "f"(__f__) : "memory");	\
})

#define ia64_stf_spill(x, regnum)						\
({										\
	register double __f__ asm ("f"#regnum);					\
	asm volatile ("stf.spill [%0]=%1" :: "r"(x), "f"(__f__) : "memory");	\
})

#define ia64_fetchadd4_acq(p, inc)						\
({										\
										\
	__u64 ia64_intri_res;							\
	asm volatile ("fetchadd4.acq %0=[%1],%2"				\
				: "=r"(ia64_intri_res) : "r"(p), "i" (inc)	\
				: "memory");					\
										\
	ia64_intri_res;								\
})

#define ia64_fetchadd4_rel(p, inc)						\
({										\
	__u64 ia64_intri_res;							\
	asm volatile ("fetchadd4.rel %0=[%1],%2"				\
				: "=r"(ia64_intri_res) : "r"(p), "i" (inc)	\
				: "memory");					\
										\
	ia64_intri_res;								\
})

#define ia64_fetchadd8_acq(p, inc)						\
({										\
										\
	__u64 ia64_intri_res;							\
	asm volatile ("fetchadd8.acq %0=[%1],%2"				\
				: "=r"(ia64_intri_res) : "r"(p), "i" (inc)	\
				: "memory");					\
										\
	ia64_intri_res;								\
})

#define ia64_fetchadd8_rel(p, inc)						\
({										\
	__u64 ia64_intri_res;							\
	asm volatile ("fetchadd8.rel %0=[%1],%2"				\
				: "=r"(ia64_intri_res) : "r"(p), "i" (inc)	\
				: "memory");					\
										\
	ia64_intri_res;								\
})

#define ia64_xchg1(ptr,x)							\
({										\
	__u64 ia64_intri_res;							\
	asm volatile ("xchg1 %0=[%1],%2"					\
		      : "=r" (ia64_intri_res) : "r" (ptr), "r" (x) : "memory");	\
	ia64_intri_res;								\
})

#define ia64_xchg2(ptr,x)						\
({									\
	__u64 ia64_intri_res;						\
	asm volatile ("xchg2 %0=[%1],%2" : "=r" (ia64_intri_res)	\
		      : "r" (ptr), "r" (x) : "memory");			\
	ia64_intri_res;							\
})

#define ia64_xchg4(ptr,x)						\
({									\
	__u64 ia64_intri_res;						\
	asm volatile ("xchg4 %0=[%1],%2" : "=r" (ia64_intri_res)	\
		      : "r" (ptr), "r" (x) : "memory");			\
	ia64_intri_res;							\
})

#define ia64_xchg8(ptr,x)						\
({									\
	__u64 ia64_intri_res;						\
	asm volatile ("xchg8 %0=[%1],%2" : "=r" (ia64_intri_res)	\
		      : "r" (ptr), "r" (x) : "memory");			\
	ia64_intri_res;							\
})

#define ia64_cmpxchg1_acq(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
	asm volatile ("cmpxchg1.acq %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg1_rel(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
	asm volatile ("cmpxchg1.rel %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg2_acq(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
	asm volatile ("cmpxchg2.acq %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg2_rel(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
											\
	asm volatile ("cmpxchg2.rel %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg4_acq(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
	asm volatile ("cmpxchg4.acq %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg4_rel(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
	asm volatile ("cmpxchg4.rel %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg8_acq(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
	asm volatile ("cmpxchg8.acq %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_cmpxchg8_rel(ptr, new, old)						\
({											\
	__u64 ia64_intri_res;								\
	asm volatile ("mov ar.ccv=%0;;" :: "rO"(old));					\
											\
	asm volatile ("cmpxchg8.rel %0=[%1],%2,ar.ccv":					\
			      "=r"(ia64_intri_res) : "r"(ptr), "r"(new) : "memory");	\
	ia64_intri_res;									\
})

#define ia64_mf()	asm volatile ("mf" ::: "memory")
#define ia64_mfa()	asm volatile ("mf.a" ::: "memory")

#define ia64_invala() asm volatile ("invala" ::: "memory")

#define ia64_native_thash(addr)							\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("thash %0=%1" : "=r"(ia64_intri_res) : "r" (addr));	\
	ia64_intri_res;								\
})

#define ia64_srlz_i()	asm volatile (";; srlz.i ;;" ::: "memory")
#define ia64_srlz_d()	asm volatile (";; srlz.d" ::: "memory");

#ifdef HAVE_SERIALIZE_DIRECTIVE
# define ia64_dv_serialize_data()		asm volatile (".serialize.data");
# define ia64_dv_serialize_instruction()	asm volatile (".serialize.instruction");
#else
# define ia64_dv_serialize_data()
# define ia64_dv_serialize_instruction()
#endif

#define ia64_nop(x)	asm volatile ("nop %0"::"i"(x));

#define ia64_itci(addr)	asm volatile ("itc.i %0;;" :: "r"(addr) : "memory")

#define ia64_itcd(addr)	asm volatile ("itc.d %0;;" :: "r"(addr) : "memory")


#define ia64_itri(trnum, addr) asm volatile ("itr.i itr[%0]=%1"				\
					     :: "r"(trnum), "r"(addr) : "memory")

#define ia64_itrd(trnum, addr) asm volatile ("itr.d dtr[%0]=%1"				\
					     :: "r"(trnum), "r"(addr) : "memory")

#define ia64_tpa(addr)								\
({										\
	unsigned long ia64_pa;							\
	asm volatile ("tpa %0 = %1" : "=r"(ia64_pa) : "r"(addr) : "memory");	\
	ia64_pa;								\
})

#define __ia64_set_dbr(index, val)						\
	asm volatile ("mov dbr[%0]=%1" :: "r"(index), "r"(val) : "memory")

#define ia64_set_ibr(index, val)						\
	asm volatile ("mov ibr[%0]=%1" :: "r"(index), "r"(val) : "memory")

#define ia64_set_pkr(index, val)						\
	asm volatile ("mov pkr[%0]=%1" :: "r"(index), "r"(val) : "memory")

#define ia64_set_pmc(index, val)						\
	asm volatile ("mov pmc[%0]=%1" :: "r"(index), "r"(val) : "memory")

#define ia64_set_pmd(index, val)						\
	asm volatile ("mov pmd[%0]=%1" :: "r"(index), "r"(val) : "memory")

#define ia64_native_set_rr(index, val)							\
	asm volatile ("mov rr[%0]=%1" :: "r"(index), "r"(val) : "memory");

#define ia64_native_get_cpuid(index)							\
({											\
	unsigned long ia64_intri_res;							\
	asm volatile ("mov %0=cpuid[%r1]" : "=r"(ia64_intri_res) : "rO"(index));	\
	ia64_intri_res;									\
})

#define __ia64_get_dbr(index)							\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("mov %0=dbr[%1]" : "=r"(ia64_intri_res) : "r"(index));	\
	ia64_intri_res;								\
})

#define ia64_get_ibr(index)							\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("mov %0=ibr[%1]" : "=r"(ia64_intri_res) : "r"(index));	\
	ia64_intri_res;								\
})

#define ia64_get_pkr(index)							\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("mov %0=pkr[%1]" : "=r"(ia64_intri_res) : "r"(index));	\
	ia64_intri_res;								\
})

#define ia64_get_pmc(index)							\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("mov %0=pmc[%1]" : "=r"(ia64_intri_res) : "r"(index));	\
	ia64_intri_res;								\
})


#define ia64_native_get_pmd(index)						\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("mov %0=pmd[%1]" : "=r"(ia64_intri_res) : "r"(index));	\
	ia64_intri_res;								\
})

#define ia64_native_get_rr(index)						\
({										\
	unsigned long ia64_intri_res;						\
	asm volatile ("mov %0=rr[%1]" : "=r"(ia64_intri_res) : "r" (index));	\
	ia64_intri_res;								\
})

#define ia64_native_fc(addr)	asm volatile ("fc %0" :: "r"(addr) : "memory")


#define ia64_sync_i()	asm volatile (";; sync.i" ::: "memory")

#define ia64_native_ssm(mask)	asm volatile ("ssm %0":: "i"((mask)) : "memory")
#define ia64_native_rsm(mask)	asm volatile ("rsm %0":: "i"((mask)) : "memory")
#define ia64_sum(mask)	asm volatile ("sum %0":: "i"((mask)) : "memory")
#define ia64_rum(mask)	asm volatile ("rum %0":: "i"((mask)) : "memory")

#define ia64_ptce(addr)	asm volatile ("ptc.e %0" :: "r"(addr))

#define ia64_native_ptcga(addr, size)						\
do {										\
	asm volatile ("ptc.ga %0,%1" :: "r"(addr), "r"(size) : "memory");	\
	ia64_dv_serialize_data();						\
} while (0)

#define ia64_ptcl(addr, size)							\
do {										\
	asm volatile ("ptc.l %0,%1" :: "r"(addr), "r"(size) : "memory");	\
	ia64_dv_serialize_data();						\
} while (0)

#define ia64_ptri(addr, size)						\
	asm volatile ("ptr.i %0,%1" :: "r"(addr), "r"(size) : "memory")

#define ia64_ptrd(addr, size)						\
	asm volatile ("ptr.d %0,%1" :: "r"(addr), "r"(size) : "memory")

#define ia64_ttag(addr)							\
({									  \
	__u64 ia64_intri_res;						   \
	asm volatile ("ttag %0=%1" : "=r"(ia64_intri_res) : "r" (addr));   \
	ia64_intri_res;							 \
})


/* Values for lfhint in ia64_lfetch and ia64_lfetch_fault */

#define ia64_lfhint_none   0
#define ia64_lfhint_nt1    1
#define ia64_lfhint_nt2    2
#define ia64_lfhint_nta    3

#define ia64_lfetch(lfhint, y)					\
({								\
        switch (lfhint) {					\
        case ia64_lfhint_none:					\
                asm volatile ("lfetch [%0]" : : "r"(y));	\
                break;						\
        case ia64_lfhint_nt1:					\
                asm volatile ("lfetch.nt1 [%0]" : : "r"(y));	\
                break;						\
        case ia64_lfhint_nt2:					\
                asm volatile ("lfetch.nt2 [%0]" : : "r"(y));	\
                break;						\
        case ia64_lfhint_nta:					\
                asm volatile ("lfetch.nta [%0]" : : "r"(y));	\
                break;						\
        }							\
})

#define ia64_lfetch_excl(lfhint, y)					\
({									\
        switch (lfhint) {						\
        case ia64_lfhint_none:						\
                asm volatile ("lfetch.excl [%0]" :: "r"(y));		\
                break;							\
        case ia64_lfhint_nt1:						\
                asm volatile ("lfetch.excl.nt1 [%0]" :: "r"(y));	\
                break;							\
        case ia64_lfhint_nt2:						\
                asm volatile ("lfetch.excl.nt2 [%0]" :: "r"(y));	\
                break;							\
        case ia64_lfhint_nta:						\
                asm volatile ("lfetch.excl.nta [%0]" :: "r"(y));	\
                break;							\
        }								\
})

#define ia64_lfetch_fault(lfhint, y)					\
({									\
        switch (lfhint) {						\
        case ia64_lfhint_none:						\
                asm volatile ("lfetch.fault [%0]" : : "r"(y));		\
                break;							\
        case ia64_lfhint_nt1:						\
                asm volatile ("lfetch.fault.nt1 [%0]" : : "r"(y));	\
                break;							\
        case ia64_lfhint_nt2:						\
                asm volatile ("lfetch.fault.nt2 [%0]" : : "r"(y));	\
                break;							\
        case ia64_lfhint_nta:						\
                asm volatile ("lfetch.fault.nta [%0]" : : "r"(y));	\
                break;							\
        }								\
})

#define ia64_lfetch_fault_excl(lfhint, y)				\
({									\
        switch (lfhint) {						\
        case ia64_lfhint_none:						\
                asm volatile ("lfetch.fault.excl [%0]" :: "r"(y));	\
                break;							\
        case ia64_lfhint_nt1:						\
                asm volatile ("lfetch.fault.excl.nt1 [%0]" :: "r"(y));	\
                break;							\
        case ia64_lfhint_nt2:						\
                asm volatile ("lfetch.fault.excl.nt2 [%0]" :: "r"(y));	\
                break;							\
        case ia64_lfhint_nta:						\
                asm volatile ("lfetch.fault.excl.nta [%0]" :: "r"(y));	\
                break;							\
        }								\
})

#define ia64_native_intrin_local_irq_restore(x)			\
do {								\
	asm volatile (";;   cmp.ne p6,p7=%0,r0;;"		\
		      "(p6) ssm psr.i;"				\
		      "(p7) rsm psr.i;;"			\
		      "(p6) srlz.d"				\
		      :: "r"((x)) : "p6", "p7", "memory");	\
} while (0)

#endif /* _UAPI_ASM_IA64_GCC_INTRIN_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef _ASM_IA64_FPU_H
#define _ASM_IA64_FPU_H

/*
 * Copyright (C) 1998, 1999, 2002, 2003 Hewlett-Packard Co
 *	David Mosberger-Tang <davidm@hpl.hp.com>
 */

#include <linux/types.h>

/* floating point status register: */
#define FPSR_TRAP_VD	(1 << 0)	/* invalid op trap disabled */
#define FPSR_TRAP_DD	(1 << 1)	/* denormal trap disabled */
#define FPSR_TRAP_ZD	(1 << 2)	/* zero-divide trap disabled */
#define FPSR_TRAP_OD	(1 << 3)	/* overflow trap disabled */
#define FPSR_TRAP_UD	(1 << 4)	/* underflow trap disabled */
#define FPSR_TRAP_ID	(1 << 5)	/* inexact trap disabled */
#define FPSR_S0(x)	((x) <<  6)
#define FPSR_S1(x)	((x) << 19)
#define FPSR_S2(x)	(__IA64_UL(x) << 32)
#define FPSR_S3(x)	(__IA64_UL(x) << 45)

/* floating-point status field controls: */
#define FPSF_FTZ	(1 << 0)		/* flush-to-zero */
#define FPSF_WRE	(1 << 1)		/* widest-range exponent */
#define FPSF_PC(x)	(((x) & 0x3) << 2)	/* precision control */
#define FPSF_RC(x)	(((x) & 0x3) << 4)	/* rounding control */
#define FPSF_TD		(1 << 6)		/* trap disabled */

/* floating-point status field flags: */
#define FPSF_V		(1 <<  7)		/* invalid operation flag */
#define FPSF_D		(1 <<  8)		/* denormal/unnormal operand flag */
#define FPSF_Z		(1 <<  9)		/* zero divide (IEEE) flag */
#define FPSF_O		(1 << 10)		/* overflow (IEEE) flag */
#define FPSF_U		(1 << 11)		/* underflow (IEEE) flag */
#define FPSF_I		(1 << 12)		/* inexact (IEEE) flag) */

/* floating-point rounding control: */
#define FPRC_NEAREST	0x0
#define FPRC_NEGINF	0x1
#define FPRC_POSINF	0x2
#define FPRC_TRUNC	0x3

#define FPSF_DEFAULT	(FPSF_PC (0x3) | FPSF_RC (FPRC_NEAREST))

/* This default value is the same as HP-UX uses.  Don't change it
   without a very good reason.  */
#define FPSR_DEFAULT	(FPSR_TRAP_VD | FPSR_TRAP_DD | FPSR_TRAP_ZD	\
			 | FPSR_TRAP_OD | FPSR_TRAP_UD | FPSR_TRAP_ID	\
			 | FPSR_S0 (FPSF_DEFAULT)			\
			 | FPSR_S1 (FPSF_DEFAULT | FPSF_TD | FPSF_WRE)	\
			 | FPSR_S2 (FPSF_DEFAULT | FPSF_TD)		\
			 | FPSR_S3 (FPSF_DEFAULT | FPSF_TD))

# ifndef __ASSEMBLY__

struct ia64_fpreg {
	union {
		unsigned long bits[2];
		long double __dummy;	/* force 16-byte alignment */
	} u;
};

# endif /* __ASSEMBLY__ */

#endif /* _ASM_IA64_FPU_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /*
 * Copyright (C) 1998-2004 Hewlett-Packard Co
 *	David Mosberger-Tang <davidm@hpl.hp.com>
 *	Stephane Eranian <eranian@hpl.hp.com>
 * Copyright (C) 2003 Intel Co
 *	Suresh Siddha <suresh.b.siddha@intel.com>
 *	Fenghua Yu <fenghua.yu@intel.com>
 *	Arun Sharma <arun.sharma@intel.com>
 *
 * 12/07/98	S. Eranian	added pt_regs & switch_stack
 * 12/21/98	D. Mosberger	updated to match latest code
 *  6/17/99	D. Mosberger	added second unat member to "struct switch_stack"
 *
 */
#ifndef _UAPI_ASM_IA64_PTRACE_H
#define _UAPI_ASM_IA64_PTRACE_H

/*
 * When a user process is blocked, its state looks as follows:
 *
 *            +----------------------+	-------	IA64_STK_OFFSET
 *     	      |			     |	 ^
 *            | struct pt_regs       |	 |
 *	      |			     |	 |
 *            +----------------------+	 |
 *	      |			     |	 |
 *     	      |	   memory stack	     |	 |
 *	      |	(growing downwards)  |	 |
 *	      //.....................//	 |
 *					 |
 *	      //.....................//	 |
 *	      |			     |	 |
 *            +----------------------+	 |
 *            | struct switch_stack  |	 |
 *	      |			     |	 |
 *	      +----------------------+	 |
 *	      |			     |	 |
 *	      //.....................//	 |
 *					 |
 *	      //.....................//	 |
 *	      |			     |	 |
 *	      |	 register stack	     |	 |
 *	      |	(growing upwards)    |	 |
 *            |			     |	 |
 *	      +----------------------+	 |  ---	IA64_RBS_OFFSET
 *            |  struct thread_info  |	 |  ^
 *	      +----------------------+	 |  |
 *	      |			     |	 |  |
 *            |  struct task_struct  |	 |  |
 * current -> |			     |   |  |
 *	      +----------------------+ -------
 *
 * Note that ar.ec is not saved explicitly in pt_reg or switch_stack.
 * This is because ar.ec is saved as part of ar.pfs.
 */


#include <asm/fpu.h>


#ifndef __ASSEMBLY__

/*
 * This struct defines the way the registers are saved on system
 * calls.
 *
 * We don't save all floating point register because the kernel
 * is compiled to use only a very small subset, so the other are
 * untouched.
 *
 * THIS STRUCTURE MUST BE A MULTIPLE 16-BYTE IN SIZE
 * (because the memory stack pointer MUST ALWAYS be aligned this way)
 *
 */
struct pt_regs {
	/* The following registers are saved by SAVE_MIN: */
	unsigned long b6;		/* scratch */
	unsigned long b7;		/* scratch */

	unsigned long ar_csd;           /* used by cmp8xchg16 (scratch) */
	unsigned long ar_ssd;           /* reserved for future use (scratch) */

	unsigned long r8;		/* scratch (return value register 0) */
	unsigned long r9;		/* scratch (return value register 1) */
	unsigned long r10;		/* scratch (return value register 2) */
	unsigned long r11;		/* scratch (return value register 3) */

	unsigned long cr_ipsr;		/* interrupted task's psr */
	unsigned long cr_iip;		/* interrupted task's instruction pointer */
	/*
	 * interrupted task's function state; if bit 63 is cleared, it
	 * contains syscall's ar.pfs.pfm:
	 */
	unsigned long cr_ifs;

	unsigned long ar_unat;		/* interrupted task's NaT register (preserved) */
	unsigned long ar_pfs;		/* prev function state  */
	unsigned long ar_rsc;		/* RSE configuration */
	/* The following two are valid only if cr_ipsr.cpl > 0 || ti->flags & _TIF_MCA_INIT */
	unsigned long ar_rnat;		/* RSE NaT */
	unsigned long ar_bspstore;	/* RSE bspstore */

	unsigned long pr;		/* 64 predicate registers (1 bit each) */
	unsigned long b0;		/* return pointer (bp) */
	unsigned long loadrs;		/* size of dirty partition << 16 */

	unsigned long r1;		/* the gp pointer */
	unsigned long r12;		/* interrupted task's memory stack pointer */
	unsigned long r13;		/* thread pointer */

	unsigned long ar_fpsr;		/* floating point status (preserved) */
	unsigned long r15;		/* scratch */

	/* The remaining registers are NOT saved for system calls.  */

	unsigned long r14;		/* scratch */
	unsigned long r2;		/* scratch */
	unsigned long r3;		/* scratch */

	/* The following registers are saved by SAVE_REST: */
	unsigned long r16;		/* scratch */
	unsigned long r17;		/* scratch */
	unsigned long r18;		/* scratch */
	unsigned long r19;		/* scratch */
	unsigned long r20;		/* scratch */
	unsigned long r21;		/* scratch */
	unsigned long r22;		/* scratch */
	unsigned long r23;		/* scratch */
	unsigned long r24;		/* scratch */
	unsigned long r25;		/* scratch */
	unsigned long r26;		/* scratch */
	unsigned long r27;		/* scratch */
	unsigned long r28;		/* scratch */
	unsigned long r29;		/* scratch */
	unsigned long r30;		/* scratch */
	unsigned long r31;		/* scratch */

	unsigned long ar_ccv;		/* compare/exchange value (scratch) */

	/*
	 * Floating point registers that the kernel considers scratch:
	 */
	struct ia64_fpreg f6;		/* scratch */
	struct ia64_fpreg f7;		/* scratch */
	struct ia64_fpreg f8;		/* scratch */
	struct ia64_fpreg f9;		/* scratch */
	struct ia64_fpreg f10;		/* scratch */
	struct ia64_fpreg f11;		/* scratch */
};

/*
 * This structure contains the addition registers that need to
 * preserved across a context switch.  This generally consists of
 * "preserved" registers.
 */
struct switch_stack {
	unsigned long caller_unat;	/* user NaT collection register (preserved) */
	unsigned long ar_fpsr;		/* floating-point status register */

	struct ia64_fpreg f2;		/* preserved */
	struct ia64_fpreg f3;		/* preserved */
	struct ia64_fpreg f4;		/* preserved */
	struct ia64_fpreg f5;		/* preserved */

	struct ia64_fpreg f12;		/* scratch, but untouched by kernel */
	struct ia64_fpreg f13;		/* scratch, but untouched by kernel */
	struct ia64_fpreg f14;		/* scratch, but untouched by kernel */
	struct ia64_fpreg f15;		/* scratch, but untouched by kernel */
	struct ia64_fpreg f16;		/* preserved */
	struct ia64_fpreg f17;		/* preserved */
	struct ia64_fpreg f18;		/* preserved */
	struct ia64_fpreg f19;		/* preserved */
	struct ia64_fpreg f20;		/* preserved */
	struct ia64_fpreg f21;		/* preserved */
	struct ia64_fpreg f22;		/* preserved */
	struct ia64_fpreg f23;		/* preserved */
	struct ia64_fpreg f24;		/* preserved */
	struct ia64_fpreg f25;		/* preserved */
	struct ia64_fpreg f26;		/* preserved */
	struct ia64_fpreg f27;		/* preserved */
	struct ia64_fpreg f28;		/* preserved */
	struct ia64_fpreg f29;		/* preserved */
	struct ia64_fpreg f30;		/* preserved */
	struct ia64_fpreg f31;		/* preserved */

	unsigned long r4;		/* preserved */
	unsigned long r5;		/* preserved */
	unsigned long r6;		/* preserved */
	unsigned long r7;		/* preserved */

	unsigned long b0;		/* so we can force a direct return in copy_thread */
	unsigned long b1;
	unsigned long b2;
	unsigned long b3;
	unsigned long b4;
	unsigned long b5;

	unsigned long ar_pfs;		/* previous function state */
	unsigned long ar_lc;		/* loop counter (preserved) */
	unsigned long ar_unat;		/* NaT bits for r4-r7 */
	unsigned long ar_rnat;		/* RSE NaT collection register */
	unsigned long ar_bspstore;	/* RSE dirty base (preserved) */
	unsigned long pr;		/* 64 predicate registers (1 bit each) */
};


/* pt_all_user_regs is used for PTRACE_GETREGS PTRACE_SETREGS */
struct pt_all_user_regs {
	unsigned long nat;
	unsigned long cr_iip;
	unsigned long cfm;
	unsigned long cr_ipsr;
	unsigned long pr;

	unsigned long gr[32];
	unsigned long br[8];
	unsigned long ar[128];
	struct ia64_fpreg fr[128];
};

#endif /* !__ASSEMBLY__ */

/* indices to application-registers array in pt_all_user_regs */
#define PT_AUR_RSC	16
#define PT_AUR_BSP	17
#define PT_AUR_BSPSTORE	18
#define PT_AUR_RNAT	19
#define PT_AUR_CCV	32
#define PT_AUR_UNAT	36
#define PT_AUR_FPSR	40
#define PT_AUR_PFS	64
#define PT_AUR_LC	65
#define PT_AUR_EC	66

/*
 * The numbers chosen here are somewhat arbitrary but absolutely MUST
 * not overlap with any of the number assigned in <linux/ptrace.h>.
 */
#define PTRACE_SINGLEBLOCK	12	/* resume execution until next branch */
#define PTRACE_OLD_GETSIGINFO	13	/* (replaced by PTRACE_GETSIGINFO in <linux/ptrace.h>)  */
#define PTRACE_OLD_SETSIGINFO	14	/* (replaced by PTRACE_SETSIGINFO in <linux/ptrace.h>)  */
#define PTRACE_GETREGS		18	/* get all registers (pt_all_user_regs) in one shot */
#define PTRACE_SETREGS		19	/* set all registers (pt_all_user_regs) in one shot */

#define PTRACE_OLDSETOPTIONS	21

#endif /* _UAPI_ASM_IA64_PTRACE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef _ASM_IA64_POSIX_TYPES_H
#define _ASM_IA64_POSIX_TYPES_H

typedef unsigned long	__kernel_sigset_t;	/* at least 32 bits */

#include <asm-generic/posix_types.h>

#endif /* _ASM_IA64_POSIX_TYPES_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   /*
 * Compiler-dependent intrinsics.
 *
 * Copyright (C) 2002-2003 Hewlett-Packard Co
 *	David Mosberger-Tang <davidm@hpl.hp.com>
 */
#ifndef _UAPI_ASM_IA64_INTRINSICS_H
#define _UAPI_ASM_IA64_INTRINSICS_H


#ifndef __ASSEMBLY__

#include <linux/types.h>
/* include compiler specific intrinsics */
#include <asm/ia64regs.h>
#ifdef __INTEL_COMPILER
# include <asm/intel_intrin.h>
#else
# include <asm/gcc_intrin.h>
#endif
#include <asm/cmpxchg.h>

#define ia64_native_get_psr_i()	(ia64_native_getreg(_IA64_REG_PSR) & IA64_PSR_I)

#define ia64_native_set_rr0_to_rr4(val0, val1, val2, val3, val4)	\
do {									\
	ia64_native_set_rr(0x0000000000000000UL, (val0));		\
	ia64_native_set_rr(0x2000000000000000UL, (val1));		\
	ia64_native_set_rr(0x4000000000000000UL, (val2));		\
	ia64_native_set_rr(0x6000000000000000UL, (val3));		\
	ia64_native_set_rr(0x8000000000000000UL, (val4));		\
} while (0)

/*
 * Force an unresolved reference if someone tries to use
 * ia64_fetch_and_add() with a bad value.
 */
extern unsigned long __bad_size_for_ia64_fetch_and_add (void);
extern unsigned long __bad_increment_for_ia64_fetch_and_add (void);

#define IA64_FETCHADD(tmp,v,n,sz,sem)						\
({										\
	switch (sz) {								\
	      case 4:								\
	        tmp = ia64_fetchadd4_##sem((unsigned int *) v, n);		\
		break;								\
										\
	      case 8:								\
	        tmp = ia64_fetchadd8_##sem((unsigned long *) v, n);		\
		break;								\
										\
	      default:								\
		__bad_size_for_ia64_fetch_and_add();				\
	}									\
})

#define ia64_fetchadd(i,v,sem)								\
({											\
	__u64 _tmp;									\
	volatile __typeof__(*(v)) *_v = (v);						\
	/* Can't use a switch () here: gcc isn't always smart enough for that... */	\
	if ((i) == -16)									\
		IA64_FETCHADD(_tmp, _v, -16, sizeof(*(v)), sem);			\
	else if ((i) == -8)								\
		IA64_FETCHADD(_tmp, _v, -8, sizeof(*(v)), sem);				\
	else if ((i) == -4)								\
		IA64_FETCHADD(_tmp, _v, -4, sizeof(*(v)), sem);				\
	else if ((i) == -1)								\
		IA64_FETCHADD(_tmp, _v, -1, sizeof(*(v)), sem);				\
	else if ((i) == 1)								\
		IA64_FETCHADD(_tmp, _v, 1, sizeof(*(v)), sem);				\
	else if ((i) == 4)								\
		IA64_FETCHADD(_tmp, _v, 4, sizeof(*(v)), sem);				\
	else if ((i) == 8)								\
		IA64_FETCHADD(_tmp, _v, 8, sizeof(*(v)), sem);				\
	else if ((i) == 16)								\
		IA64_FETCHADD(_tmp, _v, 16, sizeof(*(v)), sem);				\
	else										\
		_tmp = __bad_increment_for_ia64_fetch_and_add();			\
	(__typeof__(*(v))) (_tmp);	/* return old value */				\
})

#define ia64_fetch_and_add(i,v)	(ia64_fetchadd(i, v, rel) + (i)) /* return new value */

#endif


#ifndef __ASSEMBLY__

#define IA64_INTRINSIC_API(name)	ia64_native_ ## name
#define IA64_INTRINSIC_MACRO(name)	ia64_native_ ## name


/************************************************/
/* Instructions paravirtualized for correctness */
/************************************************/
/* fc, thash, get_cpuid, get_pmd, get_eflags, set_eflags */
/* Note that "ttag" and "cover" are also privilege-sensitive; "ttag"
 * is not currently used (though it may be in a long-format VHPT system!)
 */
#define ia64_fc				IA64_INTRINSIC_API(fc)
#define ia64_thash			IA64_INTRINSIC_API(thash)
#define ia64_get_cpuid			IA64_INTRINSIC_API(get_cpuid)
#define ia64_get_pmd			IA64_INTRINSIC_API(get_pmd)


/************************************************/
/* Instructions paravirtualized for performance */
/************************************************/
#define ia64_ssm			IA64_INTRINSIC_MACRO(ssm)
#define ia64_rsm			IA64_INTRINSIC_MACRO(rsm)
#define ia64_getreg			IA64_INTRINSIC_MACRO(getreg)
#define ia64_setreg			IA64_INTRINSIC_API(setreg)
#define ia64_set_rr			IA64_INTRINSIC_API(set_rr)
#define ia64_get_rr			IA64_INTRINSIC_API(get_rr)
#define ia64_ptcga			IA64_INTRINSIC_API(ptcga)
#define ia64_get_psr_i			IA64_INTRINSIC_API(get_psr_i)
#define ia64_intrin_local_irq_restore	\
	IA64_INTRINSIC_API(intrin_local_irq_restore)
#define ia64_set_rr0_to_rr4		IA64_INTRINSIC_API(set_rr0_to_rr4)

#endif /* !__ASSEMBLY__ */

#endif /* _UAPI_ASM_IA64_INTRINSICS_H */
   #ifndef _ASM_IA64_TERMBITS_H
#define _ASM_IA64_TERMBITS_H

/*
 * Based on <asm-i386/termbits.h>.
 *
 * Modified 1999
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 *
 * 99/01/28	Added new baudrates
 */

#include <linux/posix_types.h>

typedef unsigned char	cc_t;
typedef unsigned int	speed_t;
typedef unsigned int	tcflag_t;

#define NCCS 19
struct termios {
	tcflag_t c_iflag;		/* input mode flags */
	tcflag_t c_oflag;		/* output mode flags */
	tcflag_t c_cflag;		/* control mode flags */
	tcflag_t c_lflag;		/* local mode flags */
	cc_t c_line;			/* line discipline */
	cc_t c_cc[NCCS];		/* control characters */
};

struct termios2 {
	tcflag_t c_iflag;		/* input mode flags */
	tcflag_t c_oflag;		/* output mode flags */
	tcflag_t c_cflag;		/* control mode flags */
	tcflag_t c_lflag;		/* local mode flags */
	cc_t c_line;			/* line discipline */
	cc_t c_cc[NCCS];		/* control characters */
	speed_t c_ispeed;		/* input speed */
	speed_t c_ospeed;		/* output speed */
};

struct ktermios {
	tcflag_t c_iflag;		/* input mode flags */
	tcflag_t c_oflag;		/* output mode flags */
	tcflag_t c_cflag;		/* control mode flags */
	tcflag_t c_lflag;		/* local mode flags */
	cc_t c_line;			/* line discipline */
	cc_t c_cc[NCCS];		/* control characters */
	speed_t c_ispeed;		/* input speed */
	speed_t c_ospeed;		/* output speed */
};

/* c_cc characters */
#define VINTR 0
#define VQUIT 1
#define VERASE 2
#define VKILL 3
#define VEOF 4
#define VTIME 5
#define VMIN 6
#define VSWTC 7
#define VSTART 8
#define VSTOP 9
#define VSUSP 10
#define VEOL 11
#define VREPRINT 12
#define VDISCARD 13
#define VWERASE 14
#define VLNEXT 15
#define VEOL2 16

/* c_iflag bits */
#define IGNBRK	0000001
#define BRKINT	0000002
#define IGNPAR	0000004
#define PARMRK	0000010
#define INPCK	0000020
#define ISTRIP	0000040
#define INLCR	0000100
#define IGNCR	0000200
#define ICRNL	0000400
#define IUCLC	0001000
#define IXON	0002000
#define IXANY	0004000
#define IXOFF	0010000
#define IMAXBEL	0020000
#define IUTF8	0040000

/* c_oflag bits */
#define OPOST	0000001
#define OLCUC	0000002
#define ONLCR	0000004
#define OCRNL	0000010
#define ONOCR	0000020
#define ONLRET	0000040
#define OFILL	0000100
#define OFDEL	0000200
#define NLDLY	0000400
#define   NL0	0000000
#define   NL1	0000400
#define CRDLY	0003000
#define   CR0	0000000
#define   CR1	0001000
#define   CR2	0002000
#define   CR3	0003000
#define TABDLY	0014000
#define   TAB0	0000000
#define   TAB1	0004000
#define   TAB2	0010000
#define   TAB3	0014000
#define   XTABS	0014000
#define BSDLY	0020000
#define   BS0	0000000
#define   BS1	0020000
#define VTDLY	0040000
#define   VT0	0000000
#define   VT1	0040000
#define FFDLY	0100000
#define   FF0	0000000
#define   FF1	0100000

/* c_cflag bit meaning */
#define CBAUD	0010017
#define  B0	0000000		/* hang up */
#define  B50	0000001
#define  B75	0000002
#define  B110	0000003
#define  B134	0000004
#define  B150	0000005
#define  B200	0000006
#define  B300	0000007
#define  B600	0000010
#define  B1200	0000011
#define  B1800	0000012
#define  B2400	0000013
#define  B4800	0000014
#define  B9600	0000015
#define  B19200	0000016
#define  B38400	0000017
#define EXTA B19200
#define EXTB B38400
#define CSIZE	0000060
#define   CS5	0000000
#define   CS6	0000020
#define   CS7	0000040
#define   CS8	0000060
#define CSTOPB	0000100
#define CREAD	0000200
#define PARENB	0000400
#define PARODD	0001000
#define HUPCL	0002000
#define CLOCAL	0004000
#define CBAUDEX 0010000
#define    BOTHER 0010000
#define    B57600 0010001
#define   B115200 0010002
#define   B230400 0010003
#define   B460800 0010004
#define   B500000 0010005
#define   B576000 0010006
#define   B921600 0010007
#define  B1000000 0010010
#define  B1152000 0010011
#define  B1500000 0010012
#define  B2000000 0010013
#define  B2500000 0010014
#define  B3000000 0010015
#define  B3500000 0010016
#define  B4000000 0010017
#define CIBAUD	  002003600000		/* input baud rate */
#define CMSPAR	  010000000000		/* mark or space (stick) parity */
#define CRTSCTS	  020000000000		/* flow control */

#define IBSHIFT	16		/* Shift from CBAUD to CIBAUD */

/* c_lflag bits */
#define ISIG	0000001
#define ICANON	0000002
#define XCASE	0000004
#define ECHO	0000010
#define ECHOE	0000020
#define ECHOK	0000040
#define ECHONL	0000100
#define NOFLSH	0000200
#define TOSTOP	0000400
#define ECHOCTL	0001000
#define ECHOPRT	0002000
#define ECHOKE	0004000
#define FLUSHO	0010000
#define PENDIN	0040000
#define IEXTEN	0100000
#define EXTPROC	0200000

/* tcflow() and TCXONC use these */
#define	TCOOFF		0
#define	TCOON		1
#define	TCIOFF		2
#define	TCION		3

/* tcflush() and TCFLSH use these */
#define	TCIFLUSH	0
#define	TCOFLUSH	1
#define	TCIOFLUSH	2

/* tcsetattr uses these */
#define	TCSANOW		0
#define	TCSADRAIN	1
#define	TCSAFLUSH	2

#endif /* _ASM_IA64_TERMBITS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef _ASM_IA64_STATFS_H
#define _ASM_IA64_STATFS_H

/*
 * Based on <asm-i386/statfs.h>.
 *
 * Modified 1998, 1999, 2003
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co
 */

/*
 * We need compat_statfs64 to be packed, because the i386 ABI won't
 * add padding at the end to bring it to a multiple of 8 bytes, but
 * the IA64 ABI will.
 */
#define ARCH_PACK_COMPAT_STATFS64 __attribute__((packed,aligned(4)))

#include <asm-generic/statfs.h>

#endif /* _ASM_IA64_STATFS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef __IA64_SETUP_H
#define __IA64_SETUP_H

#define COMMAND_LINE_SIZE	2048

extern struct ia64_boot_param {
	__u64 command_line;		/* physical address of command line arguments */
	__u64 efi_systab;		/* physical address of EFI system table */
	__u64 efi_memmap;		/* physical address of EFI memory map */
	__u64 efi_memmap_size;		/* size of EFI memory map */
	__u64 efi_memdesc_size;		/* size of an EFI memory map descriptor */
	__u32 efi_memdesc_version;	/* memory descriptor version */
	struct {
		__u16 num_cols;	/* number of columns on console output device */
		__u16 num_rows;	/* number of rows on console output device */
		__u16 orig_x;	/* cursor's x position */
		__u16 orig_y;	/* cursor's y position */
	} console_info;
	__u64 fpswa;		/* physical address of the fpswa interface */
	__u64 initrd_start;
	__u64 initrd_size;
} *ia64_boot_param;

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifndef _ASM_IA64_RSE_H
#define _ASM_IA64_RSE_H

/*
 * Copyright (C) 1998, 1999 Hewlett-Packard Co
 * Copyright (C) 1998, 1999 David Mosberger-Tang <davidm@hpl.hp.com>
 *
 * Register stack engine related helper functions.  This file may be
 * used in applications, so be careful about the name-space and give
 * some consideration to non-GNU C compilers (though __inline__ is
 * fine).
 */

static __inline__ unsigned long
ia64_rse_slot_num (unsigned long *addr)
{
	return (((unsigned long) addr) >> 3) & 0x3f;
}

/*
 * Return TRUE if ADDR is the address of an RNAT slot.
 */
static __inline__ unsigned long
ia64_rse_is_rnat_slot (unsigned long *addr)
{
	return ia64_rse_slot_num(addr) == 0x3f;
}

/*
 * Returns the address of the RNAT slot that covers the slot at
 * address SLOT_ADDR.
 */
static __inline__ unsigned long *
ia64_rse_rnat_addr (unsigned long *slot_addr)
{
	return (unsigned long *) ((unsigned long) slot_addr | (0x3f << 3));
}

/*
 * Calculate the number of registers in the dirty partition starting at BSPSTORE and
 * ending at BSP.  This isn't simply (BSP-BSPSTORE)/8 because every 64th slot stores
 * ar.rnat.
 */
static __inline__ unsigned long
ia64_rse_num_regs (unsigned long *bspstore, unsigned long *bsp)
{
	unsigned long slots = (bsp - bspstore);

	return slots - (ia64_rse_slot_num(bspstore) + slots)/0x40;
}

/*
 * The inverse of the above: given bspstore and the number of
 * registers, calculate ar.bsp.
 */
static __inline__ unsigned long *
ia64_rse_skip_regs (unsigned long *addr, long num_regs)
{
	long delta = ia64_rse_slot_num(addr) + num_regs;

	if (num_regs < 0)
		delta -= 0x3e;
	return addr + num_regs + delta/0x3f;
}

#endif /* _ASM_IA64_RSE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #ifndef _UAPI_ASM_IA64_USTACK_H
#define _UAPI_ASM_IA64_USTACK_H

/*
 * Constants for the user stack size
 */


/* Make a default stack size of 2GiB */
#define DEFAULT_USER_STACK_SIZE	(1UL << 31)

#endif /* _UAPI_ASM_IA64_USTACK_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef _ASM_IA64_FCNTL_H
#define _ASM_IA64_FCNTL_H
/*
 * Modified 1998-2000
 *	David Mosberger-Tang <davidm@hpl.hp.com>, Hewlett-Packard Co.
 */

#define force_o_largefile()	\
		(personality(current->personality) != PER_LINUX32)

#include <linux/personality.h>
#include <asm-generic/fcntl.h>

#endif /* _ASM_IA64_FCNTL_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #include <asm-generic/ioctl.h>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * IA-64 Linux syscall numbers and inline-functions.
 *
 * Copyright (C) 1998-2005 Hewlett-Packard Co
 *	David Mosberger-Tang <davidm@hpl.hp.com>
 */
#ifndef _UAPI_ASM_IA64_UNISTD_H
#define _UAPI_ASM_IA64_UNISTD_H


#include <asm/break.h>

#define __BREAK_SYSCALL			__IA64_BREAK_SYSCALL

#define __NR_ni_syscall			1024
#define __NR_exit			1025
#define __NR_read			1026
#define __NR_write			1027
#define __NR_open			1028
#define __NR_close			1029
#define __NR_creat			1030
#define __NR_link			1031
#define __NR_unlink			1032
#define __NR_execve			1033
#define __NR_chdir			1034
#define __NR_fchdir			1035
#define __NR_utimes			1036
#define __NR_mknod			1037
#define __NR_chmod			1038
#define __NR_chown			1039
#define __NR_lseek			1040
#define __NR_getpid			1041
#define __NR_getppid			1042
#define __NR_mount			1043
#define __NR_umount			1044
#define __NR_setuid			1045
#define __NR_getuid			1046
#define __NR_geteuid			1047
#define __NR_ptrace			1048
#define __NR_access			1049
#define __NR_sync			1050
#define __NR_fsync			1051
#define __NR_fdatasync			1052
#define __NR_kill			1053
#define __NR_rename			1054
#define __NR_mkdir			1055
#define __NR_rmdir			1056
#define __NR_dup			1057
#define __NR_pipe			1058
#define __NR_times			1059
#define __NR_brk			1060
#define __NR_setgid			1061
#define __NR_getgid			1062
#define __NR_getegid			1063
#define __NR_acct			1064
#define __NR_ioctl			1065
#define __NR_fcntl			1066
#define __NR_umask			1067
#define __NR_chroot			1068
#define __NR_ustat			1069
#define __NR_dup2			1070
#define __NR_setreuid			1071
#define __NR_setregid			1072
#define __NR_getresuid			1073
#define __NR_setresuid			1074
#define __NR_getresgid			1075
#define __NR_setresgid			1076
#define __NR_getgroups			1077
#define __NR_setgroups			1078
#define __NR_getpgid			1079
#define __NR_setpgid			1080
#define __NR_setsid			1081
#define __NR_getsid			1082
#define __NR_sethostname		1083
#define __NR_setrlimit			1084
#define __NR_getrlimit			1085
#define __NR_getrusage			1086
#define __NR_gettimeofday		1087
#define __NR_settimeofday		1088
#define __NR_select			1089
#define __NR_poll			1090
#define __NR_symlink			1091
#define __NR_readlink			1092
#define __NR_uselib			1093
#define __NR_swapon			1094
#define __NR_swapoff			1095
#define __NR_reboot			1096
#define __NR_truncate			1097
#define __NR_ftruncate			1098
#define __NR_fchmod			1099
#define __NR_fchown			1100
#define __NR_getpriority		1101
#define __NR_setpriority		1102
#define __NR_statfs			1103
#define __NR_fstatfs			1104
#define __NR_gettid			1105
#define __NR_semget			1106
#define __NR_semop			1107
#define __NR_semctl			1108
#define __NR_msgget			1109
#define __NR_msgsnd			1110
#define __NR_msgrcv			1111
#define __NR_msgctl			1112
#define __NR_shmget			1113
#define __NR_shmat			1114
#define __NR_shmdt			1115
#define __NR_shmctl			1116
/* also known as klogctl() in GNU libc: */
#define __NR_syslog			1117
#define __NR_setitimer			1118
#define __NR_getitimer			1119
/* 1120 was __NR_old_stat */
/* 1121 was __NR_old_lstat */
/* 1122 was __NR_old_fstat */
#define __NR_vhangup			1123
#define __NR_lchown			1124
#define __NR_remap_file_pages		1125
#define __NR_wait4			1126
#define __NR_sysinfo			1127
#define __NR_clone			1128
#define __NR_setdomainname		1129
#define __NR_uname			1130
#define __NR_adjtimex			1131
/* 1132 was __NR_create_module */
#define __NR_init_module		1133
#define __NR_delete_module		1134
/* 1135 was __NR_get_kernel_syms */
/* 1136 was __NR_query_module */
#define __NR_quotactl			1137
#define __NR_bdflush			1138
#define __NR_sysfs			1139
#define __NR_personality		1140
#define __NR_afs_syscall		1141
#define __NR_setfsuid			1142
#define __NR_setfsgid			1143
#define __NR_getdents			1144
#define __NR_flock			1145
#define __NR_readv			1146
#define __NR_writev			1147
#define __NR_pread64			1148
#define __NR_pwrite64			1149
#define __NR__sysctl			1150
#define __NR_mmap			1151
#define __NR_munmap			1152
#define __NR_mlock			1153
#define __NR_mlockall			1154
#define __NR_mprotect			1155
#define __NR_mremap			1156
#define __NR_msync			1157
#define __NR_munlock			1158
#define __NR_munlockall			1159
#define __NR_sched_getparam		1160
#define __NR_sched_setparam		1161
#define __NR_sched_getscheduler		1162
#define __NR_sched_setscheduler		1163
#define __NR_sched_yield		1164
#define __NR_sched_get_priority_max	1165
#define __NR_sched_get_priority_min	1166
#define __NR_sched_rr_get_interval	1167
#define __NR_nanosleep			1168
#define __NR_nfsservctl			1169
#define __NR_prctl			1170
/* 1171 is reserved for backwards compatibility with old __NR_getpagesize */
#define __NR_mmap2			1172
#define __NR_pciconfig_read		1173
#define __NR_pciconfig_write		1174
#define __NR_perfmonctl			1175
#define __NR_sigaltstack		1176
#define __NR_rt_sigaction		1177
#define __NR_rt_sigpending		1178
#define __NR_rt_sigprocmask		1179
#define __NR_rt_sigqueueinfo		1180
#define __NR_rt_sigreturn		1181
#define __NR_rt_sigsuspend		1182
#define __NR_rt_sigtimedwait		1183
#define __NR_getcwd			1184
#define __NR_capget			1185
#define __NR_capset			1186
#define __NR_sendfile			1187
#define __NR_getpmsg			1188
#define __NR_putpmsg			1189
#define __NR_socket			1190
#define __NR_bind			1191
#define __NR_connect			1192
#define __NR_listen			1193
#define __NR_accept			1194
#define __NR_getsockname		1195
#define __NR_getpeername		1196
#define __NR_socketpair			1197
#define __NR_send			1198
#define __NR_sendto			1199
#define __NR_recv			1200
#define __NR_recvfrom			1201
#define __NR_shutdown			1202
#define __NR_setsockopt			1203
#define __NR_getsockopt			1204
#define __NR_sendmsg			1205
#define __NR_recvmsg			1206
#define __NR_pivot_root			1207
#define __NR_mincore			1208
#define __NR_madvise			1209
#define __NR_stat			1210
#define __NR_lstat			1211
#define __NR_fstat			1212
#define __NR_clone2			1213
#define __NR_getdents64			1214
#define __NR_getunwind			1215
#define __NR_readahead			1216
#define __NR_setxattr			1217
#define __NR_lsetxattr			1218
#define __NR_fsetxattr			1219
#define __NR_getxattr			1220
#define __NR_lgetxattr			1221
#define __NR_fgetxattr			1222
#define __NR_listxattr			1223
#define __NR_llistxattr			1224
#define __NR_flistxattr			1225
#define __NR_removexattr		1226
#define __NR_lremovexattr		1227
#define __NR_fremovexattr		1228
#define __NR_tkill			1229
#define __NR_futex			1230
#define __NR_sched_setaffinity		1231
#define __NR_sched_getaffinity		1232
#define __NR_set_tid_address		1233
#define __NR_fadvise64			1234
#define __NR_tgkill			1235
#define __NR_exit_group			1236
#define __NR_lookup_dcookie		1237
#define __NR_io_setup			1238
#define __NR_io_destroy			1239
#define __NR_io_getevents		1240
#define __NR_io_submit			1241
#define __NR_io_cancel			1242
#define __NR_epoll_create		1243
#define __NR_epoll_ctl			1244
#define __NR_epoll_wait			1245
#define __NR_restart_syscall		1246
#define __NR_semtimedop			1247
#define __NR_timer_create		1248
#define __NR_timer_settime		1249
#define __NR_timer_gettime		1250
#define __NR_timer_getoverrun		1251
#define __NR_timer_delete		1252
#define __NR_clock_settime		1253
#define __NR_clock_gettime		1254
#define __NR_clock_getres		1255
#define __NR_clock_nanosleep		1256
#define __NR_fstatfs64			1257
#define __NR_statfs64			1258
#define __NR_mbind			1259
#define __NR_get_mempolicy		1260
#define __NR_set_mempolicy		1261
#define __NR_mq_open			1262
#define __NR_mq_unlink			1263
#define __NR_mq_timedsend		1264
#define __NR_mq_timedreceive		1265
#define __NR_mq_notify			1266
#define __NR_mq_getsetattr		1267
#define __NR_kexec_load			1268
#define __NR_vserver			1269
#define __NR_waitid			1270
#define __NR_add_key			1271
#define __NR_request_key		1272
#define __NR_keyctl			1273
#define __NR_ioprio_set			1274
#define __NR_ioprio_get			1275
#define __NR_move_pages			1276
#define __NR_inotify_init		1277
#define __NR_inotify_add_watch		1278
#define __NR_inotify_rm_watch		1279
#define __NR_migrate_pages		1280
#define __NR_openat			1281
#define __NR_mkdirat			1282
#define __NR_mknodat			1283
#define __NR_fchownat			1284
#define __NR_futimesat			1285
#define __NR_newfstatat			1286
#define __NR_unlinkat			1287
#define __NR_renameat			1288
#define __NR_linkat			1289
#define __NR_symlinkat			1290
#define __NR_readlinkat			1291
#define __NR_fchmodat			1292
#define __NR_faccessat			1293
#define __NR_pselect6			1294
#define __NR_ppoll			1295
#define __NR_unshare			1296
#define __NR_splice			1297
#define __NR_set_robust_list		1298
#define __NR_get_robust_list		1299
#define __NR_sync_file_range		1300
#define __NR_tee			1301
#define __NR_vmsplice			1302
#define __NR_fallocate			1303
#define __NR_getcpu			1304
#define __NR_epoll_pwait		1305
#define __NR_utimensat			1306
#define __NR_signalfd			1307
#define __NR_timerfd			1308
#define __NR_eventfd			1309
#define __NR_timerfd_create		1310
#define __NR_timerfd_settime		1311
#define __NR_timerfd_gettime		1312
#define __NR_signalfd4			1313
#define __NR_eventfd2			1314
#define __NR_epoll_create1		1315
#define __NR_dup3			1316
#define __NR_pipe2			1317
#define __NR_inotify_init1		1318
#define __NR_preadv			1319
#define __NR_pwritev			1320
#define __NR_rt_tgsigqueueinfo		1321
#define __NR_recvmmsg			1322
#define __NR_fanotify_init		1323
#define __NR_fanotify_mark		1324
#define __NR_prlimit64			1325
#define __NR_name_to_handle_at		1326
#define __NR_open_by_handle_at  	1327
#define __NR_clock_adjtime		1328
#define __NR_syncfs			1329
#define __NR_setns			1330
#define __NR_sendmmsg			1331
#define __NR_process_vm_readv		1332
#define __NR_process_vm_writev		1333
#define __NR_accept4			1334
#define __NR_finit_module		1335
#define __NR_sched_setattr		1336
#define __NR_sched_getattr		1337
#define __NR_renameat2			1338
#define __NR_getrandom			1339
#define __NR_memfd_create		1340
#define __NR_bpf			1341
#define __NR_execveat			1342
#define __NR_userfaultfd		1343
#define __NR_membarrier			1344
#define __NR_kcmp			1345
#define __NR_mlock2			1346
#define __NR_copy_file_range		1347
#define __NR_preadv2			1348
#define __NR_pwritev2			1349

#endif /* _UAPI_ASM_IA64_UNISTD_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef _ASM_IA64_SHMBUF_H
#define _ASM_IA64_SHMBUF_H

/*
 * The shmid64_ds structure for IA-64 architecture.
 * Note extra padding because this structure is passed back and forth
 * between kernel and user space.
 *
 * Pad space is left for:
 * - 2 miscellaneous 64-bit values
 */

struct shmid64_ds {
	struct ipc64_perm	shm_perm;	/* operation perms */
	size_t			shm_segsz;	/* size of segment (bytes) */
	__kernel_time_t		shm_atime;	/* last attach time */
	__kernel_time_t		shm_dtime;	/* last detach time */
	__kernel_time_t		shm_ctime;	/* last change time */
	__kernel_pid_t		shm_cpid;	/* pid of creator */
	__kernel_pid_t		shm_lpid;	/* pid of last operator */
	unsigned long		shm_nattch;	/* no. of current attaches */
	unsigned long		__unused1;
	unsigned long		__unused2;
};

struct shminfo64 {
	unsigned long	shmmax;
	unsigned long	shmmin;
	unsigned long	shmmni;
	unsigned long	shmseg;
	unsigned long	shmall;
	unsigned long	__unused1;
	unsigned long	__unused2;
	unsigned long	__unused3;
	unsigned long	__unused4;
};

#endif /* _ASM_IA64_SHMBUF_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #
# Makefile for the ia64-specific parts of the pci bus
#
obj-y		:= pci.o fixup.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #
# Makefile for the ia64-specific parts of the memory manager.
#

obj-y := init.o fault.o tlb.o extable.o ioremap.o

obj-$(CONFIG_HUGETLB_PAGE) += hugetlbpage.o
obj-$(CONFIG_NUMA)	   += numa.o
obj-$(CONFIG_DISCONTIGMEM) += discontig.o
obj-$(CONFIG_SPARSEMEM)	   += discontig.o
obj-$(CONFIG_FLATMEM)	   += contig.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     # arch/ia64/sn/kernel/Makefile
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 1999,2001-2006,2008 Silicon Graphics, Inc.  All Rights Reserved.
#

ccflags-y := -Iarch/ia64/sn/include

obj-y				+= setup.o bte.o bte_error.o irq.o mca.o idle.o \
				   huberror.o io_acpi_init.o io_common.o \
				   io_init.o iomv.o klconflib.o pio_phys.o \
				   sn2/
obj-$(CONFIG_IA64_GENERIC)      += machvec.o
obj-$(CONFIG_SGI_TIOCX)		+= tiocx.o
obj-$(CONFIG_PCI_MSI)		+= msi_sn.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # arch/ia64/sn/kernel/sn2/Makefile
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 1999,2001-2002 Silicon Graphics, Inc. All rights reserved.
#
# sn2 specific kernel files
#

ccflags-y := -Iarch/ia64/sn/include

obj-y += cache.o io.o ptc_deadlock.o sn2_smp.o sn_proc_fs.o \
	 prominfo_proc.o timer.o timer_interrupt.o sn_hwperf.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # arch/ia64/sn/Makefile
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 2004 Silicon Graphics, Inc.  All Rights Reserved.
#
# Makefile for the sn ia64 subplatform
#

obj-y += kernel/ pci/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 2000-2004 Silicon Graphics, Inc.  All Rights Reserved.
#
# Makefile for the sn pci general routines.

ccflags-y := -Iarch/ia64/sn/include

obj-y := pci_dma.o tioca_provider.o tioce_provider.o pcibr/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 2002-2004 Silicon Graphics, Inc.  All Rights Reserved.
#
# Makefile for the sn2 io routines.

ccflags-y := -Iarch/ia64/sn/include

obj-y				+=  pcibr_dma.o pcibr_reg.o \
				    pcibr_ate.o pcibr_provider.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   obj-$(CONFIG_OPROFILE) += oprofile.o

DRIVER_OBJS := $(addprefix ../../../drivers/oprofile/, \
		oprof.o cpu_buffer.o buffer_sync.o \
		event_buffer.o oprofile_files.o \
		oprofilefs.o oprofile_stats.o \
		timer_int.o )

oprofile-y := $(DRIVER_OBJS) init.o backtrace.o
oprofile-$(CONFIG_PERFMON) += perfmon.o
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #
# linux/arch/unicore32/lib/Makefile
#
# Copyright (C) 2001-2010 GUAN Xue-tao
#

lib-y	:= backtrace.o delay.o findbit.o
lib-y	+= strncpy_from_user.o strnlen_user.o
lib-y	+= clear_user.o copy_page.o
lib-y	+= copy_from_user.o copy_to_user.o

GNU_LIBC_A		:= $(shell $(CC) $(KBUILD_CFLAGS) -print-file-name=libc.a)
GNU_LIBC_A_OBJS		:= memchr.o memcpy.o memmove.o memset.o
GNU_LIBC_A_OBJS		+= strchr.o strrchr.o
GNU_LIBC_A_OBJS		+= rawmemchr.o			# needed by strrchr.o

GNU_LIBGCC_A		:= $(shell $(CC) $(KBUILD_CFLAGS) -print-file-name=libgcc.a)
GNU_LIBGCC_A_OBJS	:= _ashldi3.o _ashrdi3.o _lshrdi3.o
GNU_LIBGCC_A_OBJS	+= _divsi3.o _modsi3.o _ucmpdi2.o _umodsi3.o _udivsi3.o

lib-y	+= $(GNU_LIBC_A_OBJS) $(GNU_LIBGCC_A_OBJS)

$(addprefix $(obj)/, $(GNU_LIBC_A_OBJS)):
	$(Q)$(AR) p $(GNU_LIBC_A) $(notdir $@) > $@

$(addprefix $(obj)/, $(GNU_LIBGCC_A_OBJS)):
	$(Q)$(AR) p $(GNU_LIBGCC_A) $(notdir $@) > $@
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #
# Makefile for the linux kernel.
#

# Object file lists.
obj-y				:= dma.o elf.o entry.o process.o ptrace.o
obj-y				+= setup.o signal.o sys.o stacktrace.o traps.o

obj-$(CONFIG_MODULES)		+= ksyms.o module.o
obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o

obj-$(CONFIG_UNICORE_FPU_F64)	+= fpu-ucf64.o

# obj-y for architecture PKUnity v3
obj-$(CONFIG_ARCH_PUV3)		+= clock.o irq.o time.o

obj-$(CONFIG_PUV3_GPIO)		+= gpio.o
obj-$(CONFIG_PUV3_PM)		+= pm.o sleep.o
obj-$(CONFIG_HIBERNATION)	+= hibernate.o hibernate_asm.o

obj-$(CONFIG_PCI)		+= pci.o

# obj-y for specific machines
obj-$(CONFIG_ARCH_PUV3)		+= puv3-core.o
obj-$(CONFIG_PUV3_NB0916)	+= puv3-nb0916.o

head-y				:= head.o
obj-$(CONFIG_DEBUG_LL)		+= debug.o

extra-y				:= $(head-y) vmlinux.lds
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             menu "Kernel hacking"

source "lib/Kconfig.debug"

config EARLY_PRINTK
	def_bool DEBUG_OCD
	help
	  Write kernel log output directly into the ocd or to a serial port.

	  This is useful for kernel debugging when your machine crashes very
	  early before the console code is initialized. For normal operation
	  it is not recommended because it looks ugly and doesn't cooperate
	  with klogd/syslogd or the X server. You should normally N here,
	  unless you want to debug such a crash.

# These options are only for real kernel hackers who want to get their hands dirty.
config DEBUG_LL
	bool "Kernel low-level debugging functions"
	depends on DEBUG_KERNEL
	help
	  Say Y here to include definitions of printascii, printch, printhex
	  in the kernel.  This is helpful if you are debugging code that
	  executes before the console is initialized.

config DEBUG_OCD
	bool "Kernel low-level debugging via On-Chip-Debugger"
	depends on DEBUG_LL
	default y
	help
	  Say Y here if you want the debug print routines to direct their
	  output to the UniCore On-Chip-Debugger channel using CP #1.

endmenu
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #
# arch/unicore32/Makefile
#
# This file is included by the global makefile so that you can add your own
# architecture-specific flags and dependencies.
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 2002~2010 by Guan Xue-tao
#
ifneq ($(SUBARCH),$(ARCH))
	ifeq ($(CROSS_COMPILE),)
		CROSS_COMPILE := $(call cc-cross-prefix, unicore32-linux-)
	endif
endif

LDFLAGS_vmlinux		:= -p --no-undefined -X

OBJCOPYFLAGS		:= -O binary -R .note -R .note.gnu.build-id -R .comment -S

# Never generate .eh_frame
KBUILD_CFLAGS		+= $(call cc-option,-fno-dwarf2-cfi-asm)

# Never use hard float in kernel
KBUILD_CFLAGS		+= -msoft-float

ifeq ($(CONFIG_FRAME_POINTER),y)
KBUILD_CFLAGS		+= -mno-sched-prolog
endif

CHECKFLAGS		+= -D__unicore32__

head-y			:= arch/unicore32/kernel/head.o

core-y			+= arch/unicore32/kernel/
core-y			+= arch/unicore32/mm/

libs-y			+= arch/unicore32/lib/

boot			:= arch/unicore32/boot

# Default defconfig and target when executing plain make
KBUILD_DEFCONFIG	:= $(ARCH)_defconfig
KBUILD_IMAGE		:= zImage

all:	$(KBUILD_IMAGE)

zImage Image uImage: vmlinux
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

archclean:
	$(Q)$(MAKE) $(clean)=$(boot)

define archhelp
  echo  '* zImage        - Compressed kernel image (arch/$(ARCH)/boot/zImage)'
  echo  '  Image         - Uncompressed kernel image (arch/$(ARCH)/boot/Image)'
  echo  '  uImage        - U-Boot wrapped zImage'
endef
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    config UNICORE32
	def_bool y
	select ARCH_HAS_DEVMEM_IS_ALLOWED
	select ARCH_MIGHT_HAVE_PC_PARPORT
	select ARCH_MIGHT_HAVE_PC_SERIO
	select HAVE_MEMBLOCK
	select HAVE_GENERIC_DMA_COHERENT
	select HAVE_KERNEL_GZIP
	select HAVE_KERNEL_BZIP2
	select GENERIC_ATOMIC64
	select HAVE_KERNEL_LZO
	select HAVE_KERNEL_LZMA
	select VIRT_TO_BUS
	select ARCH_HAVE_CUSTOM_GPIO_H
	select GENERIC_FIND_FIRST_BIT
	select GENERIC_IRQ_PROBE
	select GENERIC_IRQ_SHOW
	select ARCH_WANT_FRAME_POINTERS
	select GENERIC_IOMAP
	select MODULES_USE_ELF_REL
	help
	  UniCore-32 is 32-bit Instruction Set Architecture,
	  including a series of low-power-consumption RISC chip
	  designs licensed by PKUnity Ltd.
	  Please see web page at <http://www.pkunity.com/>.

config GENERIC_CSUM
	def_bool y

config NO_IOPORT_MAP
	bool

config STACKTRACE_SUPPORT
	def_bool y

config LOCKDEP_SUPPORT
	def_bool y

config RWSEM_GENERIC_SPINLOCK
	def_bool y

config RWSEM_XCHGADD_ALGORITHM
	bool

config ARCH_HAS_ILOG2_U32
	bool

config ARCH_HAS_ILOG2_U64
	bool

config GENERIC_HWEIGHT
	def_bool y

config GENERIC_CALIBRATE_DELAY
	def_bool y

config ARCH_MAY_HAVE_PC_FDC
	bool

config ZONE_DMA
	def_bool y

config NEED_DMA_MAP_STATE
       def_bool y

source "init/Kconfig"

source "kernel/Kconfig.freezer"

menu "System Type"

config MMU
	def_bool y

config ARCH_FPGA
	bool

config ARCH_PUV3
	def_bool y
	select CPU_UCV2
	select GENERIC_CLOCKEVENTS
	select HAVE_CLK
	select GPIOLIB

# CONFIGs for ARCH_PUV3

if ARCH_PUV3

choice
	prompt "Board Selection"
	default PUV3_DB0913

config PUV3_FPGA_DLX200
	select ARCH_FPGA
	bool "FPGA board"

config PUV3_DB0913
	bool "DEBUG board (0913)"

config PUV3_NB0916
	bool "NetBook board (0916)"
	select PWM
	select PWM_PUV3

config PUV3_SMW0919
	bool "Security Mini-Workstation board (0919)"

endchoice

config PUV3_PM
	def_bool y if !ARCH_FPGA

endif

source "arch/unicore32/mm/Kconfig"

comment "Floating poing support"

config UNICORE_FPU_F64
	def_bool y if !ARCH_FPGA

endmenu

menu "Bus support"

config PCI
	bool "PCI Support"
	help
	  Find out whether you have a PCI motherboard. PCI is the name of a
	  bus system, i.e. the way the CPU talks to the other stuff inside
	  your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
	  VESA. If you have PCI, say Y, otherwise N.

source "drivers/pci/Kconfig"

source "drivers/pcmcia/Kconfig"

endmenu

menu "Kernel Features"

source "kernel/Kconfig.preempt"

source "kernel/Kconfig.hz"

source "mm/Kconfig"

config LEDS
	def_bool y
	depends on GPIOLIB

config ALIGNMENT_TRAP
	def_bool y
	help
	  Unicore processors can not fetch/store information which is not
	  naturally aligned on the bus, i.e., a 4 byte fetch must start at an
	  address divisible by 4. On 32-bit Unicore processors, these non-aligned
	  fetch/store instructions will be emulated in software if you say
	  here, which has a severe performance impact. This is necessary for
	  correct operation of some network protocols. With an IP-only
	  configuration it is safe to say N, otherwise say Y.

endmenu

menu "Boot options"

config CMDLINE
	string "Default kernel command string"
	default ""

config CMDLINE_FORCE
	bool "Always use the default kernel command string"
	depends on CMDLINE != ""
	help
	  Always use the default kernel command string, even if the boot
	  loader passes other arguments to the kernel.
	  This is useful if you cannot or don't want to change the
	  command-line options your boot loader passes to the kernel.

	  If unsure, say N.

endmenu

menu "Userspace binary formats"

source "fs/Kconfig.binfmt"

endmenu

menu "Power management options"

source "kernel/power/Kconfig"

source "drivers/cpufreq/Kconfig"

config ARCH_SUSPEND_POSSIBLE
	def_bool y if !ARCH_FPGA

config ARCH_HIBERNATION_POSSIBLE
	def_bool y if !ARCH_FPGA

endmenu

source "net/Kconfig"

if ARCH_PUV3

config PUV3_GPIO
	bool
	depends on !ARCH_FPGA
	select GPIO_SYSFS
	default y

if PUV3_NB0916

menu "PKUnity NetBook-0916 Features"

config I2C_BATTERY_BQ27200
	tristate "I2C Battery BQ27200 Support"
	select I2C_PUV3
	select POWER_SUPPLY
	select BATTERY_BQ27XXX

config I2C_EEPROM_AT24
	tristate "I2C EEPROMs AT24 support"
	select I2C_PUV3
	select EEPROM_AT24

config LCD_BACKLIGHT
	tristate "LCD Backlight support"
	select BACKLIGHT_LCD_SUPPORT
	select BACKLIGHT_PWM

endmenu

endif

endif

source "drivers/Kconfig"

source "fs/Kconfig"

source "arch/unicore32/Kconfig.debug"

source "security/Kconfig"

source "crypto/Kconfig"

source "lib/Kconfig"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*
 * Atomics xchg/cmpxchg for PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2012 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_CMPXCHG_H__
#define __UNICORE_CMPXCHG_H__

/*
 * Generate a link failure on undefined symbol if the pointer points to a value
 * of unsupported size.
 */
extern void __xchg_bad_pointer(void);

static inline unsigned long __xchg(unsigned long x, volatile void *ptr,
		int size)
{
	unsigned long ret;

	switch (size) {
	case 1:
		asm volatile("swapb	%0, %1, [%2]"
			: "=&r" (ret)
			: "r" (x), "r" (ptr)
			: "memory", "cc");
		break;
	case 4:
		asm volatile("swapw	%0, %1, [%2]"
			: "=&r" (ret)
			: "r" (x), "r" (ptr)
			: "memory", "cc");
		break;
	default:
		__xchg_bad_pointer();
	}

	return ret;
}

#define xchg(ptr, x) \
	((__typeof__(*(ptr)))__xchg((unsigned long)(x), (ptr), sizeof(*(ptr))))

#include <asm-generic/cmpxchg-local.h>

/*
 * cmpxchg_local and cmpxchg64_local are atomic wrt current CPU. Always make
 * them available.
 */
#define cmpxchg_local(ptr, o, n)					\
		((__typeof__(*(ptr)))__cmpxchg_local_generic((ptr),	\
		(unsigned long)(o), (unsigned long)(n), sizeof(*(ptr))))
#define cmpxchg64_local(ptr, o, n)					\
		__cmpxchg64_local_generic((ptr), (o), (n))

#include <asm-generic/cmpxchg.h>

#endif /* __UNICORE_CMPXCHG_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   /*
 * linux/arch/unicore32/include/asm/elf.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_ELF_H__
#define __UNICORE_ELF_H__

#include <asm/hwcap.h>

/*
 * ELF register definitions..
 */
#include <asm/ptrace.h>

typedef unsigned long elf_greg_t;
typedef unsigned long elf_freg_t[3];

#define ELF_NGREG (sizeof(struct pt_regs) / sizeof(elf_greg_t))
typedef elf_greg_t elf_gregset_t[ELF_NGREG];

typedef struct fp_state elf_fpregset_t;

#define EM_UNICORE		110

#define R_UNICORE_NONE		0
#define R_UNICORE_PC24		1
#define R_UNICORE_ABS32		2
#define R_UNICORE_CALL		28
#define R_UNICORE_JUMP24	29

/*
 * These are used to set parameters in the core dumps.
 */
#define ELF_CLASS	ELFCLASS32
#define ELF_DATA	ELFDATA2LSB
#define ELF_ARCH	EM_UNICORE

/*
 * This yields a string that ld.so will use to load implementation
 * specific libraries for optimization.  This is more specific in
 * intent than poking at uname or /proc/cpuinfo.
 *
 */
#define ELF_PLATFORM_SIZE 8
#define ELF_PLATFORM	(elf_platform)

extern char elf_platform[];

struct elf32_hdr;

/*
 * This is used to ensure we don't load something for the wrong architecture.
 */
extern int elf_check_arch(const struct elf32_hdr *);
#define elf_check_arch elf_check_arch

struct task_struct;
int dump_task_regs(struct task_struct *t, elf_gregset_t *elfregs);
#define ELF_CORE_COPY_TASK_REGS dump_task_regs

#define ELF_EXEC_PAGESIZE	4096

/* This is the location that an ET_DYN program is loaded if exec'ed.  Typical
   use of this is to invoke "./ld.so someprog" to test out a new version of
   the loader.  We need to make sure that it is out of the way of the program
   that it will "exec", and that there is sufficient room for the brk.  */

#define ELF_ET_DYN_BASE	(2 * TASK_SIZE / 3)

/* When the program starts, a1 contains a pointer to a function to be
   registered with atexit, as per the SVR4 ABI.  A value of 0 means we
   have no such handler.  */
#define ELF_PLAT_INIT(_r, load_addr)	{(_r)->UCreg_00 = 0; }

extern void elf_set_personality(const struct elf32_hdr *);
#define SET_PERSONALITY(ex)	elf_set_personality(&(ex))

struct mm_struct;
extern unsigned long arch_randomize_brk(struct mm_struct *mm);
#define arch_randomize_brk arch_randomize_brk

extern int vectors_user_mapping(void);
#define arch_setup_additional_pages(bprm, uses_interp) vectors_user_mapping()
#define ARCH_HAS_SETUP_ADDITIONAL_PAGES

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * linux/arch/unicore32/include/asm/irq.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_IRQ_H__
#define __UNICORE_IRQ_H__

#include <asm-generic/irq.h>

#define	IRQ_GPIOLOW0		0x00
#define	IRQ_GPIOLOW1		0x01
#define	IRQ_GPIOLOW2		0x02
#define	IRQ_GPIOLOW3		0x03
#define	IRQ_GPIOLOW4		0x04
#define	IRQ_GPIOLOW5		0x05
#define	IRQ_GPIOLOW6		0x06
#define	IRQ_GPIOLOW7		0x07
#define IRQ_GPIOHIGH		0x08
#define IRQ_USB			0x09
#define IRQ_SDC			0x0a
#define IRQ_AC97		0x0b
#define IRQ_SATA		0x0c
#define IRQ_MME			0x0d
#define IRQ_PCI_BRIDGE		0x0e
#define	IRQ_DDR			0x0f
#define	IRQ_SPI			0x10
#define	IRQ_UNIGFX		0x11
#define	IRQ_I2C			0x11
#define	IRQ_UART1		0x12
#define	IRQ_UART0		0x13
#define IRQ_UMAL		0x14
#define IRQ_NAND		0x15
#define IRQ_PS2_KBD		0x16
#define IRQ_PS2_AUX		0x17
#define IRQ_DMA			0x18
#define IRQ_DMAERR		0x19
#define	IRQ_TIMER0		0x1a
#define	IRQ_TIMER1		0x1b
#define	IRQ_TIMER2		0x1c
#define	IRQ_TIMER3		0x1d
#define	IRQ_RTC			0x1e
#define	IRQ_RTCAlarm		0x1f

#define	IRQ_GPIO0		0x20
#define	IRQ_GPIO1		0x21
#define	IRQ_GPIO2		0x22
#define	IRQ_GPIO3		0x23
#define	IRQ_GPIO4		0x24
#define	IRQ_GPIO5		0x25
#define	IRQ_GPIO6		0x26
#define	IRQ_GPIO7		0x27
#define IRQ_GPIO8		0x28
#define IRQ_GPIO9		0x29
#define IRQ_GPIO10		0x2a
#define IRQ_GPIO11		0x2b
#define IRQ_GPIO12		0x2c
#define IRQ_GPIO13		0x2d
#define IRQ_GPIO14		0x2e
#define IRQ_GPIO15		0x2f
#define IRQ_GPIO16		0x30
#define IRQ_GPIO17		0x31
#define IRQ_GPIO18		0x32
#define IRQ_GPIO19		0x33
#define IRQ_GPIO20		0x34
#define IRQ_GPIO21		0x35
#define IRQ_GPIO22		0x36
#define IRQ_GPIO23		0x37
#define IRQ_GPIO24		0x38
#define IRQ_GPIO25		0x39
#define IRQ_GPIO26		0x3a
#define IRQ_GPIO27		0x3b

#ifdef CONFIG_ARCH_FPGA
#define IRQ_PCIINTA             IRQ_GPIOLOW2
#define IRQ_PCIINTB             IRQ_GPIOLOW1
#define IRQ_PCIINTC             IRQ_GPIOLOW0
#define IRQ_PCIINTD             IRQ_GPIOLOW6
#endif

#if defined(CONFIG_PUV3_DB0913) || defined(CONFIG_PUV3_NB0916)	\
	|| defined(CONFIG_PUV3_SMW0919)
#define IRQ_PCIINTA             IRQ_GPIOLOW1
#define IRQ_PCIINTB             IRQ_GPIOLOW2
#define IRQ_PCIINTC             IRQ_GPIOLOW3
#define IRQ_PCIINTD             IRQ_GPIOLOW4
#endif

#define IRQ_SD_CD               IRQ_GPIO6 /* falling or rising trigger */

#ifndef __ASSEMBLY__
struct pt_regs;

extern void asm_do_IRQ(unsigned int, struct pt_regs *);

#endif

#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*
 * Co-processor register definitions for PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2012 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_HWDEF_COPRO_H__
#define __UNICORE_HWDEF_COPRO_H__

/*
 * Control Register bits (CP#0 CR1)
 */
#define CR_M	(1 << 0)	/* MMU enable				*/
#define CR_A	(1 << 1)	/* Alignment abort enable		*/
#define CR_D	(1 << 2)	/* Dcache enable			*/
#define CR_I	(1 << 3)	/* Icache enable			*/
#define CR_B	(1 << 4)	/* Dcache write mechanism: write back	*/
#define CR_T	(1 << 5)	/* Burst enable				*/
#define CR_V	(1 << 13)	/* Vectors relocated to 0xffff0000	*/

#ifndef __ASSEMBLY__

#define vectors_high()		(cr_alignment & CR_V)

extern unsigned long cr_no_alignment;	/* defined in entry.S */
extern unsigned long cr_alignment;	/* defined in entry.S */

static inline unsigned int get_cr(void)
{
	unsigned int val;
	asm("movc %0, p0.c1, #0" : "=r" (val) : : "cc");
	return val;
}

static inline void set_cr(unsigned int val)
{
	asm volatile("movc p0.c1, %0, #0" : : "r" (val) : "cc");
	isb();
}

extern void adjust_cr(unsigned long mask, unsigned long set);

#endif /* __ASSEMBLY__ */

#endif /* __UNICORE_HWDEF_COPRO_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * linux/arch/unicore32/include/asm/timex.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_TIMEX_H__
#define __UNICORE_TIMEX_H__

#ifdef	CONFIG_ARCH_FPGA

/* in FPGA, APB clock is 33M, and OST clock is 32K, */
/* so, 1M is selected for timer interrupt correctly */
#define	CLOCK_TICK_RATE		(32*1024)

#endif

#if defined(CONFIG_PUV3_DB0913)		\
	|| defined(CONFIG_PUV3_NB0916)	\
	|| defined(CONFIG_PUV3_SMW0919)

#define  CLOCK_TICK_RATE         (14318000)

#endif

#include <asm-generic/timex.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * linux/arch/unicore32/include/asm/fpstate.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_FPSTATE_H__
#define __UNICORE_FPSTATE_H__

#ifndef __ASSEMBLY__

#define FP_REGS_NUMBER		33

struct fp_state {
	unsigned int regs[FP_REGS_NUMBER];
} __attribute__((aligned(8)));

#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * linux/arch/unicore32/include/asm/pci.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_PCI_H__
#define __UNICORE_PCI_H__

#ifdef __KERNEL__
#include <asm-generic/pci.h>
#include <mach/hardware.h> /* for PCIBIOS_MIN_* */

#define HAVE_PCI_MMAP
extern int pci_mmap_page_range(struct pci_dev *dev, struct vm_area_struct *vma,
	enum pci_mmap_state mmap_state, int write_combine);

#endif /* __KERNEL__ */
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /*
 * Task switching for PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2012 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_SWITCH_TO_H__
#define __UNICORE_SWITCH_TO_H__

struct task_struct;
struct thread_info;

/*
 * switch_to(prev, next) should switch from task `prev' to `next'
 * `prev' will never be the same as `next'.  schedule() itself
 * contains the memory barrier to tell GCC not to cache `current'.
 */
extern struct task_struct *__switch_to(struct task_struct *,
		struct thread_info *, struct thread_info *);

#define switch_to(prev, next, last)					\
	do {								\
		last = __switch_to(prev, task_thread_info(prev),	\
					task_thread_info(next));	\
	} while (0)

#endif /* __UNICORE_SWITCH_TO_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * linux/arch/unicore32/include/asm/traps.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_TRAP_H__
#define __UNICORE_TRAP_H__

extern void __init early_trap_init(void);
extern void dump_backtrace_entry(unsigned long where,
		unsigned long from, unsigned long frame);

extern void do_DataAbort(unsigned long addr, unsigned int fsr,
		 struct pt_regs *regs);
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * linux/arch/unicore32/include/asm/string.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_STRING_H__
#define __UNICORE_STRING_H__

/*
 * We don't do inline string functions, since the
 * optimised inline asm versions are not small.
 */

#define __HAVE_ARCH_STRRCHR
extern char *strrchr(const char *s, int c);

#define __HAVE_ARCH_STRCHR
extern char *strchr(const char *s, int c);

#define __HAVE_ARCH_MEMCPY
extern void *memcpy(void *, const void *, __kernel_size_t);

#define __HAVE_ARCH_MEMMOVE
extern void *memmove(void *, const void *, __kernel_size_t);

#define __HAVE_ARCH_MEMCHR
extern void *memchr(const void *, int, __kernel_size_t);

#define __HAVE_ARCH_MEMSET
extern void *memset(void *, int, __kernel_size_t);

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * linux/arch/unicore32/include/asm/page.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_PAGE_H__
#define __UNICORE_PAGE_H__

/* PAGE_SHIFT determines the page size */
#define PAGE_SHIFT		12
#define PAGE_SIZE		(_AC(1, UL) << PAGE_SHIFT)
#define PAGE_MASK		(~(PAGE_SIZE-1))

#ifndef __ASSEMBLY__

struct page;
struct vm_area_struct;

#define clear_page(page)	memset((void *)(page), 0, PAGE_SIZE)
extern void copy_page(void *to, const void *from);

#define clear_user_page(page, vaddr, pg)	clear_page(page)
#define copy_user_page(to, from, vaddr, pg)	copy_page(to, from)

#undef STRICT_MM_TYPECHECKS

#ifdef STRICT_MM_TYPECHECKS
/*
 * These are used to make use of C type-checking..
 */
typedef struct { unsigned long pte; } pte_t;
typedef struct { unsigned long pgd; } pgd_t;
typedef struct { unsigned long pgprot; } pgprot_t;

#define pte_val(x)      ((x).pte)
#define pgd_val(x)	((x).pgd)
#define pgprot_val(x)   ((x).pgprot)

#define __pte(x)        ((pte_t) { (x) })
#define __pgd(x)	((pgd_t) { (x) })
#define __pgprot(x)     ((pgprot_t) { (x) })

#else
/*
 * .. while these make it easier on the compiler
 */
typedef unsigned long pte_t;
typedef unsigned long pgd_t;
typedef unsigned long pgprot_t;

#define pte_val(x)      (x)
#define pgd_val(x)      (x)
#define pgprot_val(x)   (x)

#define __pte(x)        (x)
#define __pgd(x)	(x)
#define __pgprot(x)     (x)

#endif /* STRICT_MM_TYPECHECKS */

typedef struct page *pgtable_t;

extern int pfn_valid(unsigned long);

#include <asm/memory.h>

#endif /* !__ASSEMBLY__ */

#define VM_DATA_DEFAULT_FLAGS \
	(VM_READ | VM_WRITE | VM_EXEC | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)

#include <asm-generic/getorder.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /*
 * linux/arch/unicore32/include/asm/pgtable.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_PGTABLE_H__
#define __UNICORE_PGTABLE_H__

#include <asm-generic/pgtable-nopmd.h>
#include <asm/cpu-single.h>

#include <asm/memory.h>
#include <asm/pgtable-hwdef.h>

/*
 * Just any arbitrary offset to the start of the vmalloc VM area: the
 * current 8MB value just means that there will be a 8MB "hole" after the
 * physical memory until the kernel virtual memory starts.  That means that
 * any out-of-bounds memory accesses will hopefully be caught.
 * The vmalloc() routines leaves a hole of 4kB between each vmalloced
 * area for the same reason. ;)
 *
 * Note that platforms may override VMALLOC_START, but they must provide
 * VMALLOC_END.  VMALLOC_END defines the (exclusive) limit of this space,
 * which may not overlap IO space.
 */
#ifndef VMALLOC_START
#define VMALLOC_OFFSET		SZ_8M
#define VMALLOC_START		(((unsigned long)high_memory + VMALLOC_OFFSET) \
					& ~(VMALLOC_OFFSET-1))
#define VMALLOC_END		(0xff000000UL)
#endif

#define PTRS_PER_PTE		1024
#define PTRS_PER_PGD		1024

/*
 * PGDIR_SHIFT determines what a third-level page table entry can map
 */
#define PGDIR_SHIFT		22

#ifndef __ASSEMBLY__
extern void __pte_error(const char *file, int line, unsigned long val);
extern void __pgd_error(const char *file, int line, unsigned long val);

#define pte_ERROR(pte)		__pte_error(__FILE__, __LINE__, pte_val(pte))
#define pgd_ERROR(pgd)		__pgd_error(__FILE__, __LINE__, pgd_val(pgd))
#endif /* !__ASSEMBLY__ */

#define PGDIR_SIZE		(1UL << PGDIR_SHIFT)
#define PGDIR_MASK		(~(PGDIR_SIZE-1))

/*
 * This is the lowest virtual address we can permit any user space
 * mapping to be mapped at.  This is particularly important for
 * non-high vector CPUs.
 */
#define FIRST_USER_ADDRESS	PAGE_SIZE

#define FIRST_USER_PGD_NR	1
#define USER_PTRS_PER_PGD	((TASK_SIZE/PGDIR_SIZE) - FIRST_USER_PGD_NR)

/*
 * section address mask and size definitions.
 */
#define SECTION_SHIFT		22
#define SECTION_SIZE		(1UL << SECTION_SHIFT)
#define SECTION_MASK		(~(SECTION_SIZE-1))

#ifndef __ASSEMBLY__

/*
 * The pgprot_* and protection_map entries will be fixed up in runtime
 * to include the cachable bits based on memory policy, as well as any
 * architecture dependent bits.
 */
#define _PTE_DEFAULT		(PTE_PRESENT | PTE_YOUNG | PTE_CACHEABLE)

extern pgprot_t pgprot_user;
extern pgprot_t pgprot_kernel;

#define PAGE_NONE		pgprot_user
#define PAGE_SHARED		__pgprot(pgprot_val(pgprot_user | PTE_READ \
								| PTE_WRITE))
#define PAGE_SHARED_EXEC	__pgprot(pgprot_val(pgprot_user | PTE_READ \
								| PTE_WRITE \
								| PTE_EXEC))
#define PAGE_COPY		__pgprot(pgprot_val(pgprot_user | PTE_READ)
#define PAGE_COPY_EXEC		__pgprot(pgprot_val(pgprot_user | PTE_READ \
								| PTE_EXEC))
#define PAGE_READONLY		__pgprot(pgprot_val(pgprot_user | PTE_READ))
#define PAGE_READONLY_EXEC	__pgprot(pgprot_val(pgprot_user | PTE_READ \
								| PTE_EXEC))
#define PAGE_KERNEL		pgprot_kernel
#define PAGE_KERNEL_EXEC	__pgprot(pgprot_val(pgprot_kernel | PTE_EXEC))

#define __PAGE_NONE		__pgprot(_PTE_DEFAULT)
#define __PAGE_SHARED		__pgprot(_PTE_DEFAULT | PTE_READ \
							| PTE_WRITE)
#define __PAGE_SHARED_EXEC	__pgprot(_PTE_DEFAULT | PTE_READ \
							| PTE_WRITE \
							| PTE_EXEC)
#define __PAGE_COPY		__pgprot(_PTE_DEFAULT | PTE_READ)
#define __PAGE_COPY_EXEC	__pgprot(_PTE_DEFAULT | PTE_READ \
							| PTE_EXEC)
#define __PAGE_READONLY		__pgprot(_PTE_DEFAULT | PTE_READ)
#define __PAGE_READONLY_EXEC	__pgprot(_PTE_DEFAULT | PTE_READ \
							| PTE_EXEC)

#endif /* __ASSEMBLY__ */

/*
 * The table below defines the page protection levels that we insert into our
 * Linux page table version.  These get translated into the best that the
 * architecture can perform.  Note that on UniCore hardware:
 *  1) We cannot do execute protection
 *  2) If we could do execute protection, then read is implied
 *  3) write implies read permissions
 */
#define __P000  __PAGE_NONE
#define __P001  __PAGE_READONLY
#define __P010  __PAGE_COPY
#define __P011  __PAGE_COPY
#define __P100  __PAGE_READONLY_EXEC
#define __P101  __PAGE_READONLY_EXEC
#define __P110  __PAGE_COPY_EXEC
#define __P111  __PAGE_COPY_EXEC

#define __S000  __PAGE_NONE
#define __S001  __PAGE_READONLY
#define __S010  __PAGE_SHARED
#define __S011  __PAGE_SHARED
#define __S100  __PAGE_READONLY_EXEC
#define __S101  __PAGE_READONLY_EXEC
#define __S110  __PAGE_SHARED_EXEC
#define __S111  __PAGE_SHARED_EXEC

#ifndef __ASSEMBLY__
/*
 * ZERO_PAGE is a global shared page that is always zero: used
 * for zero-mapped memory areas etc..
 */
extern struct page *empty_zero_page;
#define ZERO_PAGE(vaddr)		(empty_zero_page)

#define pte_pfn(pte)			(pte_val(pte) >> PAGE_SHIFT)
#define pfn_pte(pfn, prot)		(__pte(((pfn) << PAGE_SHIFT) \
						| pgprot_val(prot)))

#define pte_none(pte)			(!pte_val(pte))
#define pte_clear(mm, addr, ptep)	set_pte(ptep, __pte(0))
#define pte_page(pte)			(pfn_to_page(pte_pfn(pte)))
#define pte_offset_kernel(dir, addr)	(pmd_page_vaddr(*(dir)) \
						+ __pte_index(addr))

#define pte_offset_map(dir, addr)	(pmd_page_vaddr(*(dir)) \
						+ __pte_index(addr))
#define pte_unmap(pte)			do { } while (0)

#define set_pte(ptep, pte)	cpu_set_pte(ptep, pte)

#define set_pte_at(mm, addr, ptep, pteval)	\
	do {					\
		set_pte(ptep, pteval);          \
	} while (0)

/*
 * The following only work if pte_present() is true.
 * Undefined behaviour if not..
 */
#define pte_present(pte)	(pte_val(pte) & PTE_PRESENT)
#define pte_write(pte)		(pte_val(pte) & PTE_WRITE)
#define pte_dirty(pte)		(pte_val(pte) & PTE_DIRTY)
#define pte_young(pte)		(pte_val(pte) & PTE_YOUNG)
#define pte_exec(pte)		(pte_val(pte) & PTE_EXEC)
#define pte_special(pte)	(0)

#define PTE_BIT_FUNC(fn, op) \
static inline pte_t pte_##fn(pte_t pte) { pte_val(pte) op; return pte; }

PTE_BIT_FUNC(wrprotect, &= ~PTE_WRITE);
PTE_BIT_FUNC(mkwrite,   |= PTE_WRITE);
PTE_BIT_FUNC(mkclean,   &= ~PTE_DIRTY);
PTE_BIT_FUNC(mkdirty,   |= PTE_DIRTY);
PTE_BIT_FUNC(mkold,     &= ~PTE_YOUNG);
PTE_BIT_FUNC(mkyoung,   |= PTE_YOUNG);

static inline pte_t pte_mkspecial(pte_t pte) { return pte; }

/*
 * Mark the prot value as uncacheable.
 */
#define pgprot_noncached(prot)		\
	__pgprot(pgprot_val(prot) & ~PTE_CACHEABLE)
#define pgprot_writecombine(prot)	\
	__pgprot(pgprot_val(prot) & ~PTE_CACHEABLE)
#define pgprot_dmacoherent(prot)	\
	__pgprot(pgprot_val(prot) & ~PTE_CACHEABLE)

#define pmd_none(pmd)		(!pmd_val(pmd))
#define pmd_present(pmd)	(pmd_val(pmd) & PMD_PRESENT)
#define pmd_bad(pmd)		(((pmd_val(pmd) &		\
				(PMD_PRESENT | PMD_TYPE_MASK))	\
				!= (PMD_PRESENT | PMD_TYPE_TABLE)))

#define set_pmd(pmdpd, pmdval)		\
	do {				\
		*(pmdpd) = pmdval;	\
	} while (0)

#define pmd_clear(pmdp)			\
	do {				\
		set_pmd(pmdp, __pmd(0));\
		clean_pmd_entry(pmdp);	\
	} while (0)

#define pmd_page_vaddr(pmd) ((pte_t *)__va(pmd_val(pmd) & PAGE_MASK))
#define pmd_page(pmd)		pfn_to_page(__phys_to_pfn(pmd_val(pmd)))

/*
 * Conversion functions: convert a page and protection to a page entry,
 * and a page entry and page directory to the page they refer to.
 */
#define mk_pte(page, prot)	pfn_pte(page_to_pfn(page), prot)

/* to find an entry in a page-table-directory */
#define pgd_index(addr)		((addr) >> PGDIR_SHIFT)

#define pgd_offset(mm, addr)	((mm)->pgd+pgd_index(addr))

/* to find an entry in a kernel page-table-directory */
#define pgd_offset_k(addr)	pgd_offset(&init_mm, addr)

/* Find an entry in the third-level page table.. */
#define __pte_index(addr)	(((addr) >> PAGE_SHIFT) & (PTRS_PER_PTE - 1))

static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
	const unsigned long mask = PTE_EXEC | PTE_WRITE | PTE_READ;
	pte_val(pte) = (pte_val(pte) & ~mask) | (pgprot_val(newprot) & mask);
	return pte;
}

extern pgd_t swapper_pg_dir[PTRS_PER_PGD];

/*
 * Encode and decode a swap entry.  Swap entries are stored in the Linux
 * page tables as follows:
 *
 *   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
 *   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
 *   <--------------- offset --------------> <--- type --> 0 0 0 0 0
 *
 * This gives us up to 127 swap files and 32GB per swap file.  Note that
 * the offset field is always non-zero.
 */
#define __SWP_TYPE_SHIFT	5
#define __SWP_TYPE_BITS		7
#define __SWP_TYPE_MASK		((1 << __SWP_TYPE_BITS) - 1)
#define __SWP_OFFSET_SHIFT	(__SWP_TYPE_BITS + __SWP_TYPE_SHIFT)

#define __swp_type(x)		(((x).val >> __SWP_TYPE_SHIFT)		\
				& __SWP_TYPE_MASK)
#define __swp_offset(x)		((x).val >> __SWP_OFFSET_SHIFT)
#define __swp_entry(type, offset) ((swp_entry_t) {			\
				((type) << __SWP_TYPE_SHIFT) |		\
				((offset) << __SWP_OFFSET_SHIFT) })

#define __pte_to_swp_entry(pte)	((swp_entry_t) { pte_val(pte) })
#define __swp_entry_to_pte(swp)	((pte_t) { (swp).val })

/*
 * It is an error for the kernel to have more swap files than we can
 * encode in the PTEs.  This ensures that we know when MAX_SWAPFILES
 * is increased beyond what we presently support.
 */
#define MAX_SWAPFILES_CHECK()	\
	BUILD_BUG_ON(MAX_SWAPFILES_SHIFT > __SWP_TYPE_BITS)

/* Needs to be defined here and not in linux/mm.h, as it is arch dependent */
/* FIXME: this is not correct */
#define kern_addr_valid(addr)	(1)

#include <asm-generic/pgtable.h>

#define pgtable_cache_init() do { } while (0)

#endif /* !__ASSEMBLY__ */

#endif /* __UNICORE_PGTABLE_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * linux/arch/unicore32/include/asm/mmu_context.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_MMU_CONTEXT_H__
#define __UNICORE_MMU_CONTEXT_H__

#include <linux/compiler.h>
#include <linux/sched.h>
#include <linux/mm.h>
#include <linux/vmacache.h>
#include <linux/io.h>

#include <asm/cacheflush.h>
#include <asm/cpu-single.h>

#define init_new_context(tsk, mm)	0

#define destroy_context(mm)		do { } while (0)

/*
 * This is called when "tsk" is about to enter lazy TLB mode.
 *
 * mm:  describes the currently active mm context
 * tsk: task which is entering lazy tlb
 * cpu: cpu number which is entering lazy tlb
 *
 * tsk->mm will be NULL
 */
static inline void
enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
{
}

/*
 * This is the actual mm switch as far as the scheduler
 * is concerned.  No registers are touched.  We avoid
 * calling the CPU specific function when the mm hasn't
 * actually changed.
 */
static inline void
switch_mm(struct mm_struct *prev, struct mm_struct *next,
	  struct task_struct *tsk)
{
	unsigned int cpu = smp_processor_id();

	if (!cpumask_test_and_set_cpu(cpu, mm_cpumask(next)) || prev != next)
		cpu_switch_mm(next->pgd, next);
}

#define deactivate_mm(tsk, mm)	do { } while (0)
#define activate_mm(prev, next)	switch_mm(prev, next, NULL)

/*
 * We are inserting a "fake" vma for the user-accessible vector page so
 * gdb and friends can get to it through ptrace and /proc/<pid>/mem.
 * But we also want to remove it before the generic code gets to see it
 * during process exit or the unmapping of it would  cause total havoc.
 * (the macro is used as remove_vma() is static to mm/mmap.c)
 */
#define arch_exit_mmap(mm) \
do { \
	struct vm_area_struct *high_vma = find_vma(mm, 0xffff0000); \
	if (high_vma) { \
		BUG_ON(high_vma->vm_next);  /* it should be last */ \
		if (high_vma->vm_prev) \
			high_vma->vm_prev->vm_next = NULL; \
		else \
			mm->mmap = NULL; \
		rb_erase(&high_vma->vm_rb, &mm->mm_rb); \
		vmacache_invalidate(mm); \
		mm->map_count--; \
		remove_vma(high_vma); \
	} \
} while (0)

static inline void arch_dup_mmap(struct mm_struct *oldmm,
				 struct mm_struct *mm)
{
}

static inline void arch_unmap(struct mm_struct *mm,
			struct vm_area_struct *vma,
			unsigned long start, unsigned long end)
{
}

static inline void arch_bprm_mm_init(struct mm_struct *mm,
				     struct vm_area_struct *vma)
{
}

static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,
		bool write, bool execute, bool foreign)
{
	/* by default, allow everything */
	return true;
}

static inline bool arch_pte_access_permitted(pte_t pte, bool write)
{
	/* by default, allow everything */
	return true;
}
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /*
 * linux/arch/unicore32/include/asm/suspend.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_SUSPEND_H__
#define __UNICORE_SUSPEND_H__

#ifndef __ASSEMBLY__

#include <asm/ptrace.h>

struct swsusp_arch_regs {
	struct cpu_context_save	cpu_context;	/* cpu context */
#ifdef CONFIG_UNICORE_FPU_F64
	struct fp_state		fpstate __attribute__((aligned(8)));
#endif
};
#endif

#endif /* __UNICORE_SUSPEND_H__ */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * Bug handling for PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2012 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_BUG_H__
#define __UNICORE_BUG_H__

#include <asm-generic/bug.h>

struct pt_regs;
struct siginfo;

extern void die(const char *msg, struct pt_regs *regs, int err);
extern void uc32_notify_die(const char *str, struct pt_regs *regs,
		struct siginfo *info, unsigned long err, unsigned long trap);

#endif /* __UNICORE_BUG_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * linux/arch/unicore32/include/asm/assembler.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 *  Do not include any C declarations in this file - it is included by
 *  assembler source.
 */
#ifndef __ASSEMBLY__
#error "Only include this from assembly code"
#endif

#include <asm/ptrace.h>

/*
 * Little Endian independent macros for shifting bytes within registers.
 */
#define pull            >>
#define push            <<
#define get_byte_0      << #0
#define get_byte_1	>> #8
#define get_byte_2	>> #16
#define get_byte_3	>> #24
#define put_byte_0      << #0
#define put_byte_1	<< #8
#define put_byte_2	<< #16
#define put_byte_3	<< #24

#define cadd		cmpadd
#define cand		cmpand
#define csub		cmpsub
#define cxor		cmpxor

/*
 * Enable and disable interrupts
 */
	.macro disable_irq, temp
	mov	\temp, asr
	andn     \temp, \temp, #0xFF
	or	\temp, \temp, #PSR_I_BIT | PRIV_MODE
	mov.a	asr, \temp
	.endm

	.macro enable_irq, temp
	mov	\temp, asr
	andn     \temp, \temp, #0xFF
	or	\temp, \temp, #PRIV_MODE
	mov.a	asr, \temp
	.endm

#define USER(x...)				\
9999:	x;					\
	.pushsection __ex_table, "a";		\
	.align	3;				\
	.long	9999b, 9001f;			\
	.popsection

	.macro	notcond, cond, nexti = .+8
	.ifc	\cond, eq
		bne	\nexti
	.else;	.ifc	\cond, ne
		beq	\nexti
	.else;	.ifc	\cond, ea
		bub	\nexti
	.else;	.ifc	\cond, ub
		bea	\nexti
	.else;	.ifc	\cond, fs
		bns	\nexti
	.else;	.ifc	\cond, ns
		bfs	\nexti
	.else;	.ifc	\cond, fv
		bnv	\nexti
	.else;	.ifc	\cond, nv
		bfv	\nexti
	.else;	.ifc	\cond, ua
		beb	\nexti
	.else;	.ifc	\cond, eb
		bua	\nexti
	.else;	.ifc	\cond, eg
		bsl	\nexti
	.else;	.ifc	\cond, sl
		beg	\nexti
	.else;	.ifc	\cond, sg
		bel	\nexti
	.else;	.ifc	\cond, el
		bsg	\nexti
	.else;	.ifnc	\cond, al
		.error  "Unknown cond in notcond macro argument"
	.endif;	.endif;	.endif;	.endif;	.endif;	.endif;	.endif
	.endif;	.endif;	.endif;	.endif;	.endif;	.endif;	.endif
	.endif
	.endm

	.macro	usracc, instr, reg, ptr, inc, cond, rept, abort
	.rept	\rept
	notcond	\cond, .+8
9999 :
	.if	\inc == 1
	\instr\()b.u \reg, [\ptr], #\inc
	.elseif	\inc == 4
	\instr\()w.u \reg, [\ptr], #\inc
	.else
	.error	"Unsupported inc macro argument"
	.endif

	.pushsection __ex_table, "a"
	.align	3
	.long	9999b, \abort
	.popsection
	.endr
	.endm

	.macro	strusr, reg, ptr, inc, cond = al, rept = 1, abort = 9001f
	usracc	st, \reg, \ptr, \inc, \cond, \rept, \abort
	.endm

	.macro	ldrusr, reg, ptr, inc, cond = al, rept = 1, abort = 9001f
	usracc	ld, \reg, \ptr, \inc, \cond, \rept, \abort
	.endm

	.macro	nop8
	.rept	8
		nop
	.endr
	.endm
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * linux/arch/unicore32/include/asm/dma.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_DMA_H__
#define __UNICORE_DMA_H__

#include <asm/memory.h>
#include <asm-generic/dma.h>

#ifdef CONFIG_PCI
extern int isa_dma_bridge_buggy;
#endif

#endif /* __UNICORE_DMA_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * linux/arch/unicore32/include/asm/linkage.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_LINKAGE_H__
#define __UNICORE_LINKAGE_H__

#define __ALIGN .align 0
#define __ALIGN_STR ".align 0"

#define ENDPROC(name) \
	.type name, %function; \
	END(name)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*
 * linux/arch/unicore32/include/asm/gpio.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_GPIO_H__
#define __UNICORE_GPIO_H__

#include <linux/io.h>
#include <asm/irq.h>
#include <mach/hardware.h>
#include <asm-generic/gpio.h>

#define GPI_OTP_INT             0
#define GPI_PCI_INTA            1
#define GPI_PCI_INTB            2
#define GPI_PCI_INTC            3
#define GPI_PCI_INTD            4
#define GPI_BAT_DET             5
#define GPI_SD_CD               6
#define GPI_SOFF_REQ            7
#define GPI_SD_WP               8
#define GPI_LCD_CASE_OFF        9
#define GPO_WIFI_EN             10
#define GPO_HDD_LED             11
#define GPO_VGA_EN              12
#define GPO_LCD_EN              13
#define GPO_LED_DATA            14
#define GPO_LED_CLK             15
#define GPO_CAM_PWR_EN          16
#define GPO_LCD_VCC_EN          17
#define GPO_SOFT_OFF            18
#define GPO_BT_EN               19
#define GPO_FAN_ON              20
#define GPO_SPKR                21
#define GPO_SET_V1              23
#define GPO_SET_V2              24
#define GPO_CPU_HEALTH          25
#define GPO_LAN_SEL             26

#ifdef CONFIG_PUV3_NB0916
#define GPI_BTN_TOUCH		14
#define GPIO_IN			0x000043ff /* 1 for input */
#define GPIO_OUT		0x0fffbc00 /* 1 for output */
#endif	/* CONFIG_PUV3_NB0916 */

#ifdef CONFIG_PUV3_SMW0919
#define GPIO_IN			0x000003ff /* 1 for input */
#define GPIO_OUT		0x0ffffc00 /* 1 for output */
#endif  /* CONFIG_PUV3_SMW0919 */

#ifdef CONFIG_PUV3_DB0913
#define GPIO_IN			0x000001df /* 1 for input */
#define GPIO_OUT		0x03fee800 /* 1 for output */
#endif  /* CONFIG_PUV3_DB0913 */

#define GPIO_DIR                (~((GPIO_IN) | 0xf0000000))
				/* 0 input, 1 output */

static inline int gpio_get_value(unsigned gpio)
{
	if (__builtin_constant_p(gpio) && (gpio <= GPIO_MAX))
		return readl(GPIO_GPLR) & GPIO_GPIO(gpio);
	else
		return __gpio_get_value(gpio);
}

static inline void gpio_set_value(unsigned gpio, int value)
{
	if (__builtin_constant_p(gpio) && (gpio <= GPIO_MAX))
		if (value)
			writel(GPIO_GPIO(gpio), GPIO_GPSR);
		else
			writel(GPIO_GPIO(gpio), GPIO_GPCR);
	else
		__gpio_set_value(gpio, value);
}

#define gpio_cansleep	__gpio_cansleep

static inline unsigned gpio_to_irq(unsigned gpio)
{
	if ((gpio < IRQ_GPIOHIGH) && (FIELD(1, 1, gpio) & readl(GPIO_GPIR)))
		return IRQ_GPIOLOW0 + gpio;
	else
		return IRQ_GPIO0 + gpio;
}

static inline unsigned irq_to_gpio(unsigned irq)
{
	if (irq < IRQ_GPIOHIGH)
		return irq - IRQ_GPIOLOW0;
	else
		return irq - IRQ_GPIO0;
}

#endif /* __UNICORE_GPIO_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * linux/arch/unicore32/include/asm/cpu-single.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_CPU_SINGLE_H__
#define __UNICORE_CPU_SINGLE_H__

#include <asm/page.h>
#include <asm/memory.h>

#ifdef __KERNEL__
#ifndef __ASSEMBLY__

#define cpu_switch_mm(pgd, mm) cpu_do_switch_mm(virt_to_phys(pgd), mm)

#define cpu_get_pgd()					\
	({						\
		unsigned long pg;			\
		__asm__("movc	%0, p0.c2, #0"		\
			 : "=r" (pg) : : "cc");		\
		pg &= ~0x0fff;				\
		(pgd_t *)phys_to_virt(pg);		\
	})

struct mm_struct;

/* declare all the functions as extern */
extern void cpu_proc_fin(void);
extern int cpu_do_idle(void);
extern void cpu_dcache_clean_area(void *, int);
extern void cpu_do_switch_mm(unsigned long pgd_phys, struct mm_struct *mm);
extern void cpu_set_pte(pte_t *ptep, pte_t pte);
extern void cpu_reset(unsigned long addr) __attribute__((noreturn));

#endif /* __ASSEMBLY__ */
#endif /* __KERNEL__ */

#endif /* __UNICORE_CPU_SINGLE_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*
 * linux/arch/unicore32/include/asm/io.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_IO_H__
#define __UNICORE_IO_H__

#ifdef __KERNEL__

#include <asm/byteorder.h>
#include <asm/memory.h>

#define PCI_IOBASE	PKUNITY_PCILIO_BASE
#include <asm-generic/io.h>

/*
 * __uc32_ioremap and __uc32_ioremap_cached takes CPU physical address.
 */
extern void __iomem *__uc32_ioremap(unsigned long, size_t);
extern void __iomem *__uc32_ioremap_cached(unsigned long, size_t);
extern void __uc32_iounmap(volatile void __iomem *addr);

/*
 * ioremap and friends.
 *
 * ioremap takes a PCI memory address, as specified in
 * Documentation/io-mapping.txt.
 *
 */
#define ioremap(cookie, size)		__uc32_ioremap(cookie, size)
#define ioremap_cached(cookie, size)	__uc32_ioremap_cached(cookie, size)
#define ioremap_nocache(cookie, size)	__uc32_ioremap(cookie, size)
#define iounmap(cookie)			__uc32_iounmap(cookie)

#define readb_relaxed readb
#define readw_relaxed readw
#define readl_relaxed readl

#define HAVE_ARCH_PIO_SIZE
#define PIO_OFFSET		(unsigned int)(PCI_IOBASE)
#define PIO_MASK		(unsigned int)(IO_SPACE_LIMIT)
#define PIO_RESERVED		(PIO_OFFSET + PIO_MASK + 1)

#ifdef CONFIG_STRICT_DEVMEM

#include <linux/ioport.h>
#include <linux/mm.h>

/*
 * devmem_is_allowed() checks to see if /dev/mem access to a certain
 * address is valid. The argument is a physical page number.
 * We mimic x86 here by disallowing access to system RAM as well as
 * device-exclusive MMIO regions. This effectively disable read()/write()
 * on /dev/mem.
 */
static inline int devmem_is_allowed(unsigned long pfn)
{
	if (iomem_is_exclusive(pfn << PAGE_SHIFT))
		return 0;
	if (!page_is_ram(pfn))
		return 1;
	return 0;
}

#endif /* CONFIG_STRICT_DEVMEM */

#endif	/* __KERNEL__ */
#endif	/* __UNICORE_IO_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   /*
 * linux/arch/unicore32/include/asm/delay.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * Delay routines, using a pre-computed "loops_per_second" value.
 */
#ifndef __UNICORE_DELAY_H__
#define __UNICORE_DELAY_H__

#include <asm/param.h>	/* HZ */

extern void __delay(int loops);

/*
 * This function intentionally does not exist; if you see references to
 * it, it means that you're calling udelay() with an out of range value.
 *
 * With currently imposed limits, this means that we support a max delay
 * of 2000us. Further limits: HZ<=1000 and bogomips<=3355
 */
extern void __bad_udelay(void);

/*
 * division by multiplication: you don't have to worry about
 * loss of precision.
 *
 * Use only for very small delays ( < 1 msec).  Should probably use a
 * lookup table, really, as the multiplications take much too long with
 * short delays.  This is a "reasonable" implementation, though (and the
 * first constant multiplications gets optimized away if the delay is
 * a constant)
 */
extern void __udelay(unsigned long usecs);
extern void __const_udelay(unsigned long);

#define MAX_UDELAY_MS 2

#define udelay(n)							\
	(__builtin_constant_p(n) ?					\
	  ((n) > (MAX_UDELAY_MS * 1000) ? __bad_udelay() :		\
			__const_udelay((n) * ((2199023U*HZ)>>11))) :	\
	  __udelay(n))

#endif /* __UNICORE_DELAY_H__ */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * linux/arch/unicore32/include/asm/thread_info.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_THREAD_INFO_H__
#define __UNICORE_THREAD_INFO_H__

#ifdef __KERNEL__

#include <linux/compiler.h>
#include <asm/fpstate.h>

#define THREAD_SIZE_ORDER	1
#define THREAD_SIZE		8192
#define THREAD_START_SP		(THREAD_SIZE - 8)

#ifndef __ASSEMBLY__

struct task_struct;

#include <asm/types.h>

typedef struct {
	unsigned long seg;
} mm_segment_t;

struct cpu_context_save {
	__u32	r4;
	__u32	r5;
	__u32	r6;
	__u32	r7;
	__u32	r8;
	__u32	r9;
	__u32	r10;
	__u32	r11;
	__u32	r12;
	__u32	r13;
	__u32	r14;
	__u32	r15;
	__u32	r16;
	__u32	r17;
	__u32	r18;
	__u32	r19;
	__u32	r20;
	__u32	r21;
	__u32	r22;
	__u32	r23;
	__u32	r24;
	__u32	r25;
	__u32	r26;
	__u32	fp;
	__u32	sp;
	__u32	pc;
};

/*
 * low level task data that entry.S needs immediate access to.
 * __switch_to() assumes cpu_context follows immediately after cpu_domain.
 */
struct thread_info {
	unsigned long		flags;		/* low level flags */
	int			preempt_count;	/* 0 => preemptable */
						/* <0 => bug */
	mm_segment_t		addr_limit;	/* address limit */
	struct task_struct	*task;		/* main task structure */
	__u32			cpu;		/* cpu */
	struct cpu_context_save	cpu_context;	/* cpu context */
	__u32			syscall;	/* syscall number */
	__u8			used_cp[16];	/* thread used copro */
#ifdef CONFIG_UNICORE_FPU_F64
	struct fp_state		fpstate __attribute__((aligned(8)));
#endif
};

#define INIT_THREAD_INFO(tsk)						\
{									\
	.task		= &tsk,						\
	.flags		= 0,						\
	.preempt_count	= INIT_PREEMPT_COUNT,				\
	.addr_limit	= KERNEL_DS,					\
}

#define init_thread_info	(init_thread_union.thread_info)
#define init_stack		(init_thread_union.stack)

/*
 * how to get the thread information struct from C
 */
static inline struct thread_info *current_thread_info(void) __attribute_const__;

static inline struct thread_info *current_thread_info(void)
{
	register unsigned long sp asm ("sp");
	return (struct thread_info *)(sp & ~(THREAD_SIZE - 1));
}

#define thread_saved_pc(tsk)	\
	((unsigned long)(task_thread_info(tsk)->cpu_context.pc))
#define thread_saved_sp(tsk)	\
	((unsigned long)(task_thread_info(tsk)->cpu_context.sp))
#define thread_saved_fp(tsk)	\
	((unsigned long)(task_thread_info(tsk)->cpu_context.fp))

#endif

/*
 * thread information flags:
 *  TIF_SYSCALL_TRACE	- syscall trace active
 *  TIF_SIGPENDING	- signal pending
 *  TIF_NEED_RESCHED	- rescheduling necessary
 *  TIF_NOTIFY_RESUME	- callback before returning to user
 */
#define TIF_SIGPENDING		0
#define TIF_NEED_RESCHED	1
#define TIF_NOTIFY_RESUME	2	/* callback before returning to user */
#define TIF_SYSCALL_TRACE	8
#define TIF_MEMDIE		18
#define TIF_RESTORE_SIGMASK	20

#define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)
#define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
#define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)
#define _TIF_SYSCALL_TRACE	(1 << TIF_SYSCALL_TRACE)

/*
 * Change these and you break ASM code in entry-common.S
 */
#define _TIF_WORK_MASK \
	(_TIF_SIGPENDING | _TIF_NEED_RESCHED | _TIF_NOTIFY_RESUME)

#endif /* __KERNEL__ */
#endif /* __UNICORE_THREAD_INFO_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * linux/arch/unicore32/include/asm/tlb.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_TLB_H__
#define __UNICORE_TLB_H__

#define tlb_start_vma(tlb, vma)				do { } while (0)
#define tlb_end_vma(tlb, vma)				do { } while (0)
#define __tlb_remove_tlb_entry(tlb, ptep, address)	do { } while (0)
#define tlb_flush(tlb) flush_tlb_mm((tlb)->mm)

#define __pte_free_tlb(tlb, pte, addr)				\
	do {							\
		pgtable_page_dtor(pte);				\
		tlb_remove_page((tlb), (pte));			\
	} while (0)

#include <asm-generic/tlb.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   /*
 * linux/arch/unicore32/include/asm/dma-mapping.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_DMA_MAPPING_H__
#define __UNICORE_DMA_MAPPING_H__

#ifdef __KERNEL__

#include <linux/mm_types.h>
#include <linux/scatterlist.h>
#include <linux/swiotlb.h>

#include <asm/memory.h>
#include <asm/cacheflush.h>

extern struct dma_map_ops swiotlb_dma_map_ops;

static inline struct dma_map_ops *get_dma_ops(struct device *dev)
{
	return &swiotlb_dma_map_ops;
}

static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)
{
	if (dev && dev->dma_mask)
		return addr + size - 1 <= *dev->dma_mask;

	return 1;
}

static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
{
	return paddr;
}

static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
{
	return daddr;
}

static inline void dma_mark_clean(void *addr, size_t size) {}

static inline void dma_cache_sync(struct device *dev, void *vaddr,
		size_t size, enum dma_data_direction direction)
{
	unsigned long start = (unsigned long)vaddr;
	unsigned long end   = start + size;

	switch (direction) {
	case DMA_NONE:
		BUG();
	case DMA_FROM_DEVICE:
	case DMA_BIDIRECTIONAL:	/* writeback and invalidate */
		__cpuc_dma_flush_range(start, end);
		break;
	case DMA_TO_DEVICE:		/* writeback only */
		__cpuc_dma_clean_range(start, end);
		break;
	}
}

#endif /* __KERNEL__ */
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*
 * linux/arch/unicore32/include/asm/memblock.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_MEMBLOCK_H__
#define __UNICORE_MEMBLOCK_H__

/*
 * Memory map description
 */
# define NR_BANKS 8

struct membank {
	unsigned long start;
	unsigned long size;
	unsigned int highmem;
};

struct meminfo {
	int nr_banks;
	struct membank bank[NR_BANKS];
};

extern struct meminfo meminfo;

#define for_each_bank(iter, mi)				\
	for (iter = 0; iter < (mi)->nr_banks; iter++)

#define bank_pfn_start(bank)	__phys_to_pfn((bank)->start)
#define bank_pfn_end(bank)	__phys_to_pfn((bank)->start + (bank)->size)
#define bank_pfn_size(bank)	((bank)->size >> PAGE_SHIFT)
#define bank_phys_start(bank)	((bank)->start)
#define bank_phys_end(bank)	((bank)->start + (bank)->size)
#define bank_phys_size(bank)	((bank)->size)

extern void uc32_memblock_init(struct meminfo *);

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * linux/arch/unicore32/include/asm/stacktrace.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_STACKTRACE_H__
#define __UNICORE_STACKTRACE_H__

struct stackframe {
	unsigned long fp;
	unsigned long sp;
	unsigned long lr;
	unsigned long pc;
};

#ifdef CONFIG_FRAME_POINTER
extern int unwind_frame(struct stackframe *frame);
#else
#define unwind_frame(f) (-EINVAL)
#endif
extern void walk_stackframe(struct stackframe *frame,
			    int (*fn)(struct stackframe *, void *), void *data);

#endif	/* __UNICORE_STACKTRACE_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * linux/arch/unicore32/include/asm/pgalloc.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_PGALLOC_H__
#define __UNICORE_PGALLOC_H__

#include <asm/pgtable-hwdef.h>
#include <asm/processor.h>
#include <asm/cacheflush.h>
#include <asm/tlbflush.h>

#define check_pgt_cache()		do { } while (0)

#define _PAGE_USER_TABLE	(PMD_TYPE_TABLE | PMD_PRESENT)
#define _PAGE_KERNEL_TABLE	(PMD_TYPE_TABLE | PMD_PRESENT)

extern pgd_t *get_pgd_slow(struct mm_struct *mm);
extern void free_pgd_slow(struct mm_struct *mm, pgd_t *pgd);

#define pgd_alloc(mm)			get_pgd_slow(mm)
#define pgd_free(mm, pgd)		free_pgd_slow(mm, pgd)

#define PGALLOC_GFP	(GFP_KERNEL | __GFP_NOTRACK | __GFP_ZERO)

/*
 * Allocate one PTE table.
 */
static inline pte_t *
pte_alloc_one_kernel(struct mm_struct *mm, unsigned long addr)
{
	pte_t *pte;

	pte = (pte_t *)__get_free_page(PGALLOC_GFP);
	if (pte)
		clean_dcache_area(pte, PTRS_PER_PTE * sizeof(pte_t));

	return pte;
}

static inline pgtable_t
pte_alloc_one(struct mm_struct *mm, unsigned long addr)
{
	struct page *pte;

	pte = alloc_pages(PGALLOC_GFP, 0);
	if (!pte)
		return NULL;
	if (!PageHighMem(pte)) {
		void *page = page_address(pte);
		clean_dcache_area(page, PTRS_PER_PTE * sizeof(pte_t));
	}
	if (!pgtable_page_ctor(pte)) {
		__free_page(pte);
	}

	return pte;
}

/*
 * Free one PTE table.
 */
static inline void pte_free_kernel(struct mm_struct *mm, pte_t *pte)
{
	if (pte)
		free_page((unsigned long)pte);
}

static inline void pte_free(struct mm_struct *mm, pgtable_t pte)
{
	pgtable_page_dtor(pte);
	__free_page(pte);
}

static inline void __pmd_populate(pmd_t *pmdp, unsigned long pmdval)
{
	set_pmd(pmdp, __pmd(pmdval));
	flush_pmd_entry(pmdp);
}

/*
 * Populate the pmdp entry with a pointer to the pte.  This pmd is part
 * of the mm address space.
 */
static inline void
pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmdp, pte_t *ptep)
{
	unsigned long pte_ptr = (unsigned long)ptep;

	/*
	 * The pmd must be loaded with the physical
	 * address of the PTE table
	 */
	__pmd_populate(pmdp, __pa(pte_ptr) | _PAGE_KERNEL_TABLE);
}

static inline void
pmd_populate(struct mm_struct *mm, pmd_t *pmdp, pgtable_t ptep)
{
	__pmd_populate(pmdp,
			page_to_pfn(ptep) << PAGE_SHIFT | _PAGE_USER_TABLE);
}
#define pmd_pgtable(pmd) pmd_page(pmd)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * linux/arch/unicore32/include/asm/irqflags.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_IRQFLAGS_H__
#define __UNICORE_IRQFLAGS_H__

#ifdef __KERNEL__

#include <asm/ptrace.h>

#define ARCH_IRQ_DISABLED	(PRIV_MODE | PSR_I_BIT)
#define ARCH_IRQ_ENABLED	(PRIV_MODE)

/*
 * Save the current interrupt enable state.
 */
static inline unsigned long arch_local_save_flags(void)
{
	unsigned long temp;

	asm volatile("mov %0, asr" : "=r" (temp) : : "memory", "cc");

	return temp & PSR_c;
}

/*
 * restore saved IRQ state
 */
static inline void arch_local_irq_restore(unsigned long flags)
{
	unsigned long temp;

	asm volatile(
		"mov	%0, asr\n"
		"mov.a	asr, %1\n"
		"mov.f	asr, %0"
		: "=&r" (temp)
		: "r" (flags)
		: "memory", "cc");
}

#include <asm-generic/irqflags.h>

#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * linux/arch/unicore32/include/asm/cacheflush.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_CACHEFLUSH_H__
#define __UNICORE_CACHEFLUSH_H__

#include <linux/mm.h>

#include <asm/shmparam.h>

#define CACHE_COLOUR(vaddr)	((vaddr & (SHMLBA - 1)) >> PAGE_SHIFT)

/*
 * This flag is used to indicate that the page pointed to by a pte is clean
 * and does not require cleaning before returning it to the user.
 */
#define PG_dcache_clean PG_arch_1

/*
 *	MM Cache Management
 *	===================
 *
 *	The arch/unicore32/mm/cache.S files implement these methods.
 *
 *	Start addresses are inclusive and end addresses are exclusive;
 *	start addresses should be rounded down, end addresses up.
 *
 *	See Documentation/cachetlb.txt for more information.
 *	Please note that the implementation of these, and the required
 *	effects are cache-type (VIVT/VIPT/PIPT) specific.
 *
 *	flush_icache_all()
 *
 *		Unconditionally clean and invalidate the entire icache.
 *		Currently only needed for cache-v6.S and cache-v7.S, see
 *		__flush_icache_all for the generic implementation.
 *
 *	flush_kern_all()
 *
 *		Unconditionally clean and invalidate the entire cache.
 *
 *	flush_user_all()
 *
 *		Clean and invalidate all user space cache entries
 *		before a change of page tables.
 *
 *	flush_user_range(start, end, flags)
 *
 *		Clean and invalidate a range of cache entries in the
 *		specified address space before a change of page tables.
 *		- start - user start address (inclusive, page aligned)
 *		- end   - user end address   (exclusive, page aligned)
 *		- flags - vma->vm_flags field
 *
 *	coherent_kern_range(start, end)
 *
 *		Ensure coherency between the Icache and the Dcache in the
 *		region described by start, end.  If you have non-snooping
 *		Harvard caches, you need to implement this function.
 *		- start  - virtual start address
 *		- end    - virtual end address
 *
 *	coherent_user_range(start, end)
 *
 *		Ensure coherency between the Icache and the Dcache in the
 *		region described by start, end.  If you have non-snooping
 *		Harvard caches, you need to implement this function.
 *		- start  - virtual start address
 *		- end    - virtual end address
 *
 *	flush_kern_dcache_area(kaddr, size)
 *
 *		Ensure that the data held in page is written back.
 *		- kaddr  - page address
 *		- size   - region size
 *
 *	DMA Cache Coherency
 *	===================
 *
 *	dma_flush_range(start, end)
 *
 *		Clean and invalidate the specified virtual address range.
 *		- start  - virtual start address
 *		- end    - virtual end address
 */

extern void __cpuc_flush_icache_all(void);
extern void __cpuc_flush_kern_all(void);
extern void __cpuc_flush_user_all(void);
extern void __cpuc_flush_user_range(unsigned long, unsigned long, unsigned int);
extern void __cpuc_coherent_kern_range(unsigned long, unsigned long);
extern void __cpuc_coherent_user_range(unsigned long, unsigned long);
extern void __cpuc_flush_dcache_area(void *, size_t);
extern void __cpuc_flush_kern_dcache_area(void *addr, size_t size);

/*
 * These are private to the dma-mapping API.  Do not use directly.
 * Their sole purpose is to ensure that data held in the cache
 * is visible to DMA, or data written by DMA to system memory is
 * visible to the CPU.
 */
extern void __cpuc_dma_clean_range(unsigned long, unsigned long);
extern void __cpuc_dma_flush_range(unsigned long, unsigned long);

/*
 * Copy user data from/to a page which is mapped into a different
 * processes address space.  Really, we want to allow our "user
 * space" model to handle this.
 */
extern void copy_to_user_page(struct vm_area_struct *, struct page *,
	unsigned long, void *, const void *, unsigned long);
#define copy_from_user_page(vma, page, vaddr, dst, src, len)	\
	do {							\
		memcpy(dst, src, len);				\
	} while (0)

/*
 * Convert calls to our calling convention.
 */
/* Invalidate I-cache */
static inline void __flush_icache_all(void)
{
	asm("movc	p0.c5, %0, #20;\n"
	    "nop; nop; nop; nop; nop; nop; nop; nop\n"
	    :
	    : "r" (0));
}

#define flush_cache_all()		__cpuc_flush_kern_all()

extern void flush_cache_mm(struct mm_struct *mm);
extern void flush_cache_range(struct vm_area_struct *vma,
		unsigned long start, unsigned long end);
extern void flush_cache_page(struct vm_area_struct *vma,
		unsigned long user_addr, unsigned long pfn);

#define flush_cache_dup_mm(mm) flush_cache_mm(mm)

/*
 * flush_cache_user_range is used when we want to ensure that the
 * Harvard caches are synchronised for the user space address range.
 * This is used for the UniCore private sys_cacheflush system call.
 */
#define flush_cache_user_range(vma, start, end) \
	__cpuc_coherent_user_range((start) & PAGE_MASK, PAGE_ALIGN(end))

/*
 * Perform necessary cache operations to ensure that data previously
 * stored within this range of addresses can be executed by the CPU.
 */
#define flush_icache_range(s, e)	__cpuc_coherent_kern_range(s, e)

/*
 * Perform necessary cache operations to ensure that the TLB will
 * see data written in the specified area.
 */
#define clean_dcache_area(start, size)	cpu_dcache_clean_area(start, size)

/*
 * flush_dcache_page is used when the kernel has written to the page
 * cache page at virtual address page->virtual.
 *
 * If this page isn't mapped (ie, page_mapping == NULL), or it might
 * have userspace mappings, then we _must_ always clean + invalidate
 * the dcache entries associated with the kernel mapping.
 *
 * Otherwise we can defer the operation, and clean the cache when we are
 * about to change to user space.  This is the same method as used on SPARC64.
 * See update_mmu_cache for the user space part.
 */
#define ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE 1
extern void flush_dcache_page(struct page *);

#define flush_dcache_mmap_lock(mapping)			\
	spin_lock_irq(&(mapping)->tree_lock)
#define flush_dcache_mmap_unlock(mapping)		\
	spin_unlock_irq(&(mapping)->tree_lock)

#define flush_icache_user_range(vma, page, addr, len)	\
	flush_dcache_page(page)

/*
 * We don't appear to need to do anything here.  In fact, if we did, we'd
 * duplicate cache flushing elsewhere performed by flush_dcache_page().
 */
#define flush_icache_page(vma, page)	do { } while (0)

/*
 * flush_cache_vmap() is used when creating mappings (eg, via vmap,
 * vmalloc, ioremap etc) in kernel space for pages.  On non-VIPT
 * caches, since the direct-mappings of these pages may contain cached
 * data, we need to do a full cache flush to ensure that writebacks
 * don't corrupt data placed into these pages via the new mappings.
 */
static inline void flush_cache_vmap(unsigned long start, unsigned long end)
{
}

static inline void flush_cache_vunmap(unsigned long start, unsigned long end)
{
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * linux/arch/unicore32/include/asm/tlbflush.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_TLBFLUSH_H__
#define __UNICORE_TLBFLUSH_H__

#ifndef __ASSEMBLY__

#include <linux/sched.h>

extern void __cpu_flush_user_tlb_range(unsigned long, unsigned long,
					struct vm_area_struct *);
extern void __cpu_flush_kern_tlb_range(unsigned long, unsigned long);

/*
 *	TLB Management
 *	==============
 *
 *	The arch/unicore/mm/tlb-*.S files implement these methods.
 *
 *	The TLB specific code is expected to perform whatever tests it
 *	needs to determine if it should invalidate the TLB for each
 *	call.  Start addresses are inclusive and end addresses are
 *	exclusive; it is safe to round these addresses down.
 *
 *	flush_tlb_all()
 *
 *		Invalidate the entire TLB.
 *
 *	flush_tlb_mm(mm)
 *
 *		Invalidate all TLB entries in a particular address
 *		space.
 *		- mm	- mm_struct describing address space
 *
 *	flush_tlb_range(mm,start,end)
 *
 *		Invalidate a range of TLB entries in the specified
 *		address space.
 *		- mm	- mm_struct describing address space
 *		- start - start address (may not be aligned)
 *		- end	- end address (exclusive, may not be aligned)
 *
 *	flush_tlb_page(vaddr,vma)
 *
 *		Invalidate the specified page in the specified address range.
 *		- vaddr - virtual address (may not be aligned)
 *		- vma	- vma_struct describing address range
 *
 *	flush_kern_tlb_page(kaddr)
 *
 *		Invalidate the TLB entry for the specified page.  The address
 *		will be in the kernels virtual memory space.  Current uses
 *		only require the D-TLB to be invalidated.
 *		- kaddr - Kernel virtual memory address
 */

static inline void local_flush_tlb_all(void)
{
	const int zero = 0;

	/* TLB invalidate all */
	asm("movc p0.c6, %0, #6; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (zero) : "cc");
}

static inline void local_flush_tlb_mm(struct mm_struct *mm)
{
	const int zero = 0;

	if (cpumask_test_cpu(get_cpu(), mm_cpumask(mm))) {
		/* TLB invalidate all */
		asm("movc p0.c6, %0, #6; nop; nop; nop; nop; nop; nop; nop; nop"
			: : "r" (zero) : "cc");
	}
	put_cpu();
}

static inline void
local_flush_tlb_page(struct vm_area_struct *vma, unsigned long uaddr)
{
	if (cpumask_test_cpu(smp_processor_id(), mm_cpumask(vma->vm_mm))) {
#ifndef CONFIG_CPU_TLB_SINGLE_ENTRY_DISABLE
		/* iTLB invalidate page */
		asm("movc p0.c6, %0, #5; nop; nop; nop; nop; nop; nop; nop; nop"
			: : "r" (uaddr & PAGE_MASK) : "cc");
		/* dTLB invalidate page */
		asm("movc p0.c6, %0, #3; nop; nop; nop; nop; nop; nop; nop; nop"
			: : "r" (uaddr & PAGE_MASK) : "cc");
#else
		/* TLB invalidate all */
		asm("movc p0.c6, %0, #6; nop; nop; nop; nop; nop; nop; nop; nop"
			: : "r" (uaddr & PAGE_MASK) : "cc");
#endif
	}
}

static inline void local_flush_tlb_kernel_page(unsigned long kaddr)
{
#ifndef CONFIG_CPU_TLB_SINGLE_ENTRY_DISABLE
	/* iTLB invalidate page */
	asm("movc p0.c6, %0, #5; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (kaddr & PAGE_MASK) : "cc");
	/* dTLB invalidate page */
	asm("movc p0.c6, %0, #3; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (kaddr & PAGE_MASK) : "cc");
#else
	/* TLB invalidate all */
	asm("movc p0.c6, %0, #6; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (kaddr & PAGE_MASK) : "cc");
#endif
}

/*
 *	flush_pmd_entry
 *
 *	Flush a PMD entry (word aligned, or double-word aligned) to
 *	RAM if the TLB for the CPU we are running on requires this.
 *	This is typically used when we are creating PMD entries.
 *
 *	clean_pmd_entry
 *
 *	Clean (but don't drain the write buffer) if the CPU requires
 *	these operations.  This is typically used when we are removing
 *	PMD entries.
 */
static inline void flush_pmd_entry(pmd_t *pmd)
{
#ifndef CONFIG_CPU_DCACHE_LINE_DISABLE
	/* flush dcache line, see dcacheline_flush in proc-macros.S */
	asm("mov	r1, %0 << #20\n"
		"ldw	r2, =_stext\n"
		"add	r2, r2, r1 >> #20\n"
		"ldw	r1, [r2+], #0x0000\n"
		"ldw	r1, [r2+], #0x1000\n"
		"ldw	r1, [r2+], #0x2000\n"
		"ldw	r1, [r2+], #0x3000\n"
		: : "r" (pmd) : "r1", "r2");
#else
	/* flush dcache all */
	asm("movc p0.c5, %0, #14; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (pmd) : "cc");
#endif
}

static inline void clean_pmd_entry(pmd_t *pmd)
{
#ifndef CONFIG_CPU_DCACHE_LINE_DISABLE
	/* clean dcache line */
	asm("movc p0.c5, %0, #11; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (__pa(pmd) & ~(L1_CACHE_BYTES - 1)) : "cc");
#else
	/* clean dcache all */
	asm("movc p0.c5, %0, #10; nop; nop; nop; nop; nop; nop; nop; nop"
		: : "r" (pmd) : "cc");
#endif
}

/*
 * Convert calls to our calling convention.
 */
#define local_flush_tlb_range(vma, start, end)	\
	__cpu_flush_user_tlb_range(start, end, vma)
#define local_flush_tlb_kernel_range(s, e)	\
	__cpu_flush_kern_tlb_range(s, e)

#define flush_tlb_all		local_flush_tlb_all
#define flush_tlb_mm		local_flush_tlb_mm
#define flush_tlb_page		local_flush_tlb_page
#define flush_tlb_kernel_page	local_flush_tlb_kernel_page
#define flush_tlb_range		local_flush_tlb_range
#define flush_tlb_kernel_range	local_flush_tlb_kernel_range

/*
 * if PG_dcache_clean is not set for the page, we need to ensure that any
 * cache entries for the kernels virtual memory range are written
 * back to the page.
 */
extern void update_mmu_cache(struct vm_area_struct *vma,
		unsigned long addr, pte_t *ptep);

extern void do_bad_area(unsigned long addr, unsigned int fsr,
		struct pt_regs *regs);

#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * linux/arch/unicore32/include/asm/mmu.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_MMU_H__
#define __UNICORE_MMU_H__

typedef	unsigned long mm_context_t;

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /*
 * linux/arch/unicore32/include/asm/bitops.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_BITOPS_H__
#define __UNICORE_BITOPS_H__

#define _ASM_GENERIC_BITOPS_FLS_H_
#define _ASM_GENERIC_BITOPS___FLS_H_
#define _ASM_GENERIC_BITOPS_FFS_H_
#define _ASM_GENERIC_BITOPS___FFS_H_
/*
 * On UNICORE, those functions can be implemented around
 * the cntlz instruction for much better code efficiency.
 */

static inline int fls(int x)
{
	int ret;

	asm("cntlz\t%0, %1" : "=r" (ret) : "r" (x) : "cc");
	ret = 32 - ret;

	return ret;
}

#define __fls(x) (fls(x) - 1)
#define ffs(x) ({ unsigned long __t = (x); fls(__t & -__t); })
#define __ffs(x) (ffs(x) - 1)

#include <asm-generic/bitops.h>

/* following definitions: to avoid using codes in lib/find_*.c */
#define find_next_bit		find_next_bit
#define find_next_zero_bit	find_next_zero_bit
#define find_first_bit		find_first_bit
#define find_first_zero_bit	find_first_zero_bit

#endif /* __UNICORE_BITOPS_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * linux/arch/unicore32/include/asm/uaccess.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_UACCESS_H__
#define __UNICORE_UACCESS_H__

#include <linux/thread_info.h>
#include <linux/errno.h>

#include <asm/memory.h>

#define __copy_from_user	__copy_from_user
#define __copy_to_user		__copy_to_user
#define __strncpy_from_user	__strncpy_from_user
#define __strnlen_user		__strnlen_user
#define __clear_user		__clear_user

#define __kernel_ok		(segment_eq(get_fs(), KERNEL_DS))
#define __user_ok(addr, size)	(((size) <= TASK_SIZE)			\
				&& ((addr) <= TASK_SIZE - (size)))
#define __access_ok(addr, size)	(__kernel_ok || __user_ok((addr), (size)))

extern unsigned long __must_check
__copy_from_user(void *to, const void __user *from, unsigned long n);
extern unsigned long __must_check
__copy_to_user(void __user *to, const void *from, unsigned long n);
extern unsigned long __must_check
__clear_user(void __user *addr, unsigned long n);
extern unsigned long __must_check
__strncpy_from_user(char *to, const char __user *from, unsigned long count);
extern unsigned long
__strnlen_user(const char __user *s, long n);

#include <asm-generic/uaccess.h>

extern int fixup_exception(struct pt_regs *regs);

#endif /* __UNICORE_UACCESS_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
generic-y += atomic.h
generic-y += auxvec.h
generic-y += bitsperlong.h
generic-y += bugs.h
generic-y += clkdev.h
generic-y += cputime.h
generic-y += current.h
generic-y += device.h
generic-y += div64.h
generic-y += emergency-restart.h
generic-y += errno.h
generic-y += exec.h
generic-y += fb.h
generic-y += fcntl.h
generic-y += ftrace.h
generic-y += futex.h
generic-y += hardirq.h
generic-y += hw_irq.h
generic-y += ioctl.h
generic-y += ioctls.h
generic-y += ipcbuf.h
generic-y += irq_regs.h
generic-y += irq_work.h
generic-y += kdebug.h
generic-y += kmap_types.h
generic-y += local.h
generic-y += mcs_spinlock.h
generic-y += mm-arch-hooks.h
generic-y += mman.h
generic-y += module.h
generic-y += msgbuf.h
generic-y += param.h
generic-y += parport.h
generic-y += percpu.h
generic-y += poll.h
generic-y += posix_types.h
generic-y += preempt.h
generic-y += resource.h
generic-y += sections.h
generic-y += segment.h
generic-y += sembuf.h
generic-y += serial.h
generic-y += setup.h
generic-y += shmbuf.h
generic-y += shmparam.h
generic-y += siginfo.h
generic-y += signal.h
generic-y += sizes.h
generic-y += socket.h
generic-y += sockios.h
generic-y += stat.h
generic-y += statfs.h
generic-y += swab.h
generic-y += syscalls.h
generic-y += termbits.h
generic-y += termios.h
generic-y += topology.h
generic-y += trace_clock.h
generic-y += types.h
generic-y += ucontext.h
generic-y += unaligned.h
generic-y += user.h
generic-y += vga.h
generic-y += word-at-a-time.h
generic-y += xor.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * linux/arch/unicore32/include/asm/hwcap.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_HWCAP_H__
#define __UNICORE_HWCAP_H__

/*
 * HWCAP flags
 */
#define HWCAP_MSP		1
#define HWCAP_UNICORE16		2
#define HWCAP_CMOV		4
#define HWCAP_UNICORE_F64       8
#define HWCAP_TLS		0x80

#if defined(__KERNEL__) && !defined(__ASSEMBLY__)
/*
 * This yields a mask that user programs can use to figure out what
 * instruction set this cpu supports.
 */
#define ELF_HWCAP		(HWCAP_CMOV | HWCAP_UNICORE_F64)
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * linux/arch/unicore32/include/asm/pgtable-hwdef.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_PGTABLE_HWDEF_H__
#define __UNICORE_PGTABLE_HWDEF_H__

/*
 * Hardware page table definitions.
 *
 * + Level 1 descriptor (PMD)
 *   - common
 */
#define PMD_TYPE_MASK		(3 << 0)
#define PMD_TYPE_TABLE		(0 << 0)
/*#define PMD_TYPE_LARGE	(1 << 0) */
#define PMD_TYPE_INVALID	(2 << 0)
#define PMD_TYPE_SECT		(3 << 0)

#define PMD_PRESENT		(1 << 2)
#define PMD_YOUNG		(1 << 3)

/*#define PMD_SECT_DIRTY	(1 << 4) */
#define PMD_SECT_CACHEABLE	(1 << 5)
#define PMD_SECT_EXEC		(1 << 6)
#define PMD_SECT_WRITE		(1 << 7)
#define PMD_SECT_READ		(1 << 8)

/*
 * + Level 2 descriptor (PTE)
 *   - common
 */
#define PTE_TYPE_MASK		(3 << 0)
#define PTE_TYPE_SMALL		(0 << 0)
#define PTE_TYPE_MIDDLE		(1 << 0)
#define PTE_TYPE_LARGE		(2 << 0)
#define PTE_TYPE_INVALID	(3 << 0)

#define PTE_PRESENT		(1 << 2)
#define PTE_YOUNG		(1 << 3)
#define PTE_DIRTY		(1 << 4)
#define PTE_CACHEABLE		(1 << 5)
#define PTE_EXEC		(1 << 6)
#define PTE_WRITE		(1 << 7)
#define PTE_READ		(1 << 8)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * linux/arch/unicore32/include/asm/checksum.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * IP checksum routines
 */
#ifndef __UNICORE_CHECKSUM_H__
#define __UNICORE_CHECKSUM_H__

/*
 * computes the checksum of the TCP/UDP pseudo-header
 * returns a 16-bit checksum, already complemented
 */

static inline __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
		   __u8 proto, __wsum sum)
{
	__asm__(
	"add.a	%0, %1, %2\n"
	"addc.a	%0, %0, %3\n"
	"addc.a	%0, %0, %4 << #8\n"
	"addc.a	%0, %0, %5\n"
	"addc	%0, %0, #0\n"
	: "=&r"(sum)
	: "r" (sum), "r" (daddr), "r" (saddr), "r" (len), "Ir" (htons(proto))
	: "cc");
	return sum;
}
#define csum_tcpudp_nofold	csum_tcpudp_nofold

#include <asm-generic/checksum.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * linux/arch/unicore32/include/asm/memory.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 *  Note: this file should not be included by non-asm/.h files
 */
#ifndef __UNICORE_MEMORY_H__
#define __UNICORE_MEMORY_H__

#include <linux/compiler.h>
#include <linux/const.h>
#include <asm/sizes.h>
#include <mach/memory.h>

/*
 * Allow for constants defined here to be used from assembly code
 * by prepending the UL suffix only with actual C code compilation.
 */
#define UL(x) _AC(x, UL)

/*
 * PAGE_OFFSET - the virtual address of the start of the kernel image
 * TASK_SIZE - the maximum size of a user space task.
 * TASK_UNMAPPED_BASE - the lower boundary of the mmap VM area
 */
#define PAGE_OFFSET		UL(0xC0000000)
#define TASK_SIZE		(PAGE_OFFSET - UL(0x41000000))
#define TASK_UNMAPPED_BASE	(PAGE_OFFSET / 3)

/*
 * The module space lives between the addresses given by TASK_SIZE
 * and PAGE_OFFSET - it must be within 32MB of the kernel text.
 */
#define MODULES_VADDR		(PAGE_OFFSET - 16*1024*1024)
#if TASK_SIZE > MODULES_VADDR
#error Top of user space clashes with start of module space
#endif

#define MODULES_END		(PAGE_OFFSET)

/*
 * Allow 16MB-aligned ioremap pages
 */
#define IOREMAP_MAX_ORDER	24

/*
 * Physical vs virtual RAM address space conversion.  These are
 * private definitions which should NOT be used outside memory.h
 * files.  Use virt_to_phys/phys_to_virt/__pa/__va instead.
 */
#ifndef __virt_to_phys
#define __virt_to_phys(x)	((x) - PAGE_OFFSET + PHYS_OFFSET)
#define __phys_to_virt(x)	((x) - PHYS_OFFSET + PAGE_OFFSET)
#endif

/*
 * Convert a page to/from a physical address
 */
#define page_to_phys(page)	(__pfn_to_phys(page_to_pfn(page)))
#define phys_to_page(phys)	(pfn_to_page(__phys_to_pfn(phys)))

#ifndef __ASSEMBLY__

#ifndef arch_adjust_zones
#define arch_adjust_zones(size, holes) do { } while (0)
#endif

/*
 * PFNs are used to describe any physical page; this means
 * PFN 0 == physical address 0.
 *
 * This is the PFN of the first RAM page in the kernel
 * direct-mapped view.  We assume this is the first page
 * of RAM in the mem_map as well.
 */
#define PHYS_PFN_OFFSET	(PHYS_OFFSET >> PAGE_SHIFT)

/*
 * Drivers should NOT use these either.
 */
#define __pa(x)			__virt_to_phys((unsigned long)(x))
#define __va(x)			((void *)__phys_to_virt((unsigned long)(x)))
#define pfn_to_kaddr(pfn)	__va((pfn) << PAGE_SHIFT)

/*
 * Conversion between a struct page and a physical address.
 *
 *  page_to_pfn(page)	convert a struct page * to a PFN number
 *  pfn_to_page(pfn)	convert a _valid_ PFN number to struct page *
 *
 *  virt_to_page(k)	convert a _valid_ virtual address to struct page *
 *  virt_addr_valid(k)	indicates whether a virtual address is valid
 */
#define ARCH_PFN_OFFSET		PHYS_PFN_OFFSET

#define virt_to_page(kaddr)	pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
#define virt_addr_valid(kaddr)	((unsigned long)(kaddr) >= PAGE_OFFSET && \
		(unsigned long)(kaddr) < (unsigned long)high_memory)

#endif

#include <asm-generic/memory_model.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * linux/arch/unicore32/include/asm/ptrace.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_PTRACE_H__
#define __UNICORE_PTRACE_H__

#include <uapi/asm/ptrace.h>

#ifndef __ASSEMBLY__

#define user_mode(regs)	\
	(processor_mode(regs) == USER_MODE)

#define processor_mode(regs) \
	((regs)->UCreg_asr & MODE_MASK)

#define interrupts_enabled(regs) \
	(!((regs)->UCreg_asr & PSR_I_BIT))

#define fast_interrupts_enabled(regs) \
	(!((regs)->UCreg_asr & PSR_R_BIT))

/* Are the current registers suitable for user mode?
 * (used to maintain security in signal handlers)
 */
static inline int valid_user_regs(struct pt_regs *regs)
{
	unsigned long mode = regs->UCreg_asr & MODE_MASK;

	/*
	 * Always clear the R (REAL) bits
	 */
	regs->UCreg_asr &= ~(PSR_R_BIT);

	if ((regs->UCreg_asr & PSR_I_BIT) == 0) {
		if (mode == USER_MODE)
			return 1;
	}

	/*
	 * Force ASR to something logical...
	 */
	regs->UCreg_asr &= PSR_f | USER_MODE;

	return 0;
}

#define instruction_pointer(regs)	((regs)->UCreg_pc)
#define user_stack_pointer(regs)	((regs)->UCreg_sp)
#define profile_pc(regs)		instruction_pointer(regs)

#endif /* __ASSEMBLY__ */
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * Memory barrier implementations for PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2012 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_BARRIER_H__
#define __UNICORE_BARRIER_H__

#define isb() __asm__ __volatile__ ("" : : : "memory")
#define dsb() __asm__ __volatile__ ("" : : : "memory")
#define dmb() __asm__ __volatile__ ("" : : : "memory")

#include <asm-generic/barrier.h>

#endif /* __UNICORE_BARRIER_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /*
 * linux/arch/unicore32/include/asm/fpu-ucf64.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 *	Maintained by GUAN Xue-tao <gxt@mprc.pku.edu.cn>
 *	Copyright (C) 2001-2010 Guan Xuetao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#define FPSCR			s31

/* FPSCR bits */
#define FPSCR_DEFAULT_NAN	(1<<25)

#define FPSCR_CMPINSTR_BIT	(1<<31)

#define FPSCR_CON		(1<<29)
#define FPSCR_TRAP		(1<<27)

/* RND mode */
#define FPSCR_ROUND_NEAREST	(0<<0)
#define FPSCR_ROUND_PLUSINF	(2<<0)
#define FPSCR_ROUND_MINUSINF	(3<<0)
#define FPSCR_ROUND_TOZERO	(1<<0)
#define FPSCR_RMODE_BIT		(0)
#define FPSCR_RMODE_MASK	(7 << FPSCR_RMODE_BIT)

/* trap enable */
#define FPSCR_IOE		(1<<16)
#define FPSCR_OFE		(1<<14)
#define FPSCR_UFE		(1<<13)
#define FPSCR_IXE		(1<<12)
#define FPSCR_HIE		(1<<11)
#define FPSCR_NDE		(1<<10)	/* non denomal */

/* flags */
#define FPSCR_IDC		(1<<24)
#define FPSCR_HIC		(1<<23)
#define FPSCR_IXC		(1<<22)
#define FPSCR_OFC		(1<<21)
#define FPSCR_UFC		(1<<20)
#define FPSCR_IOC		(1<<19)

/* stick bits */
#define FPSCR_IOS		(1<<9)
#define FPSCR_OFS		(1<<7)
#define FPSCR_UFS		(1<<6)
#define FPSCR_IXS		(1<<5)
#define FPSCR_HIS		(1<<4)
#define FPSCR_NDS		(1<<3)	/*non denomal */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * linux/arch/unicore32/include/asm/mutex.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * UniCore optimized mutex locking primitives
 *
 * Please look into asm-generic/mutex-xchg.h for a formal definition.
 */
#ifndef __UNICORE_MUTEX_H__
#define __UNICORE_MUTEX_H__

# include <asm-generic/mutex-xchg.h>
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /*
 * linux/arch/unicore32/include/asm/cputype.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_CPUTYPE_H__
#define __UNICORE_CPUTYPE_H__

#include <linux/stringify.h>

#define CPUID_CPUID	0
#define CPUID_CACHETYPE	1

#define read_cpuid(reg)							\
	({								\
		unsigned int __val;					\
		asm("movc	%0, p0.c0, #" __stringify(reg)		\
		    : "=r" (__val)					\
		    :							\
		    : "cc");						\
		__val;							\
	})

#define uc32_cpuid		read_cpuid(CPUID_CPUID)
#define uc32_cachetype		read_cpuid(CPUID_CACHETYPE)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * linux/arch/unicore32/include/asm/cache.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_CACHE_H__
#define __UNICORE_CACHE_H__

#define L1_CACHE_SHIFT		(5)
#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)

/*
 * Memory returned by kmalloc() may be used for DMA, so we must make
 * sure that all such allocations are cache aligned. Otherwise,
 * unrelated code may cause parts of the buffer to be read into the
 * cache before the transfer is done, causing old data to be seen by
 * the CPU.
 */
#define ARCH_DMA_MINALIGN	L1_CACHE_BYTES

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*
 * linux/arch/unicore32/include/asm/processor.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __UNICORE_PROCESSOR_H__
#define __UNICORE_PROCESSOR_H__

/*
 * Default implementation of macro that returns current
 * instruction pointer ("program counter").
 */
#define current_text_addr() ({ __label__ _l; _l: &&_l; })

#ifdef __KERNEL__

#include <asm/ptrace.h>
#include <asm/types.h>

#ifdef __KERNEL__
#define STACK_TOP	TASK_SIZE
#define STACK_TOP_MAX	TASK_SIZE
#endif

struct debug_entry {
	u32			address;
	u32			insn;
};

struct debug_info {
	int			nsaved;
	struct debug_entry	bp[2];
};

struct thread_struct {
							/* fault info	  */
	unsigned long		address;
	unsigned long		trap_no;
	unsigned long		error_code;
							/* debugging	  */
	struct debug_info	debug;
};

#define INIT_THREAD  {	}

#define start_thread(regs, pc, sp)					\
({									\
	unsigned long *stack = (unsigned long *)sp;			\
	memset(regs->uregs, 0, sizeof(regs->uregs));			\
	regs->UCreg_asr = USER_MODE;					\
	regs->UCreg_pc = pc & ~1;	/* pc */                        \
	regs->UCreg_sp = sp;		/* sp */                        \
	regs->UCreg_02 = stack[2];	/* r2 (envp) */                 \
	regs->UCreg_01 = stack[1];	/* r1 (argv) */                 \
	regs->UCreg_00 = stack[0];	/* r0 (argc) */                 \
})

/* Forward declaration, a strange C thing */
struct task_struct;

/* Free all resources held by a thread. */
extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);

#define cpu_relax()			barrier()
#define cpu_relax_lowlatency()                cpu_relax()

#define task_pt_regs(p) \
	((struct pt_regs *)(THREAD_START_SP + task_stack_page(p)) - 1)

#define KSTK_EIP(tsk)	(task_pt_regs(tsk)->UCreg_pc)
#define KSTK_ESP(tsk)	(task_pt_regs(tsk)->UCreg_sp)

#endif

#endif /* __UNICORE_PROCESSOR_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /*
 * linux/arch/unicore32/include/asm/byteorder.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * UniCore ONLY support Little Endian mode, the data bus is connected such
 * that byte accesses appear as:
 *  0 = d0...d7, 1 = d8...d15, 2 = d16...d23, 3 = d24...d31
 * and word accesses (data or instruction) appear as:
 *  d0...d31
 */
#ifndef __UNICORE_BYTEORDER_H__
#define __UNICORE_BYTEORDER_H__

#include <linux/byteorder/little_endian.h>

#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * linux/arch/unicore32/include/asm/sigcontext.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __UNICORE_SIGCONTEXT_H__
#define __UNICORE_SIGCONTEXT_H__

#include <asm/ptrace.h>
/*
 * Signal context structure - contains all info to do with the state
 * before the signal handler was invoked.  Note: only add new entries
 * to the end of the structure.
 */
struct sigcontext {
	unsigned long trap_no;
	unsigned long error_code;
	unsigned long oldmask;
	unsigned long fault_address;
	struct pt_regs regs;
};

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 # UAPI Header export list
include include/uapi/asm-generic/Kbuild.asm

header-y += byteorder.h
header-y += kvm_para.h
header-y += ptrace.h
header-y += sigcontext.h
header-y += unistd.h

generic-y += kvm_para.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * linux/arch/unicore32/include/asm/ptrace.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef _UAPI__UNICORE_PTRACE_H__
#define _UAPI__UNICORE_PTRACE_H__

#define PTRACE_GET_THREAD_AREA	22

/*
 * PSR bits
 */
#define USER_MODE	0x00000010
#define REAL_MODE	0x00000011
#define INTR_MODE	0x00000012
#define PRIV_MODE	0x00000013
#define ABRT_MODE	0x00000017
#define EXTN_MODE	0x0000001b
#define SUSR_MODE	0x0000001f
#define MODE_MASK	0x0000001f
#define PSR_R_BIT	0x00000040
#define PSR_I_BIT	0x00000080
#define PSR_V_BIT	0x10000000
#define PSR_C_BIT	0x20000000
#define PSR_Z_BIT	0x40000000
#define PSR_S_BIT	0x80000000

/*
 * Groups of PSR bits
 */
#define PSR_f		0xff000000	/* Flags		*/
#define PSR_c		0x000000ff	/* Control		*/

#ifndef __ASSEMBLY__

/*
 * This struct defines the way the registers are stored on the
 * stack during a system call.  Note that sizeof(struct pt_regs)
 * has to be a multiple of 8.
 */
struct pt_regs {
	unsigned long uregs[34];
};

#define UCreg_asr		uregs[32]
#define UCreg_pc		uregs[31]
#define UCreg_lr		uregs[30]
#define UCreg_sp		uregs[29]
#define UCreg_ip		uregs[28]
#define UCreg_fp		uregs[27]
#define UCreg_26		uregs[26]
#define UCreg_25		uregs[25]
#define UCreg_24		uregs[24]
#define UCreg_23		uregs[23]
#define UCreg_22		uregs[22]
#define UCreg_21		uregs[21]
#define UCreg_20		uregs[20]
#define UCreg_19		uregs[19]
#define UCreg_18		uregs[18]
#define UCreg_17		uregs[17]
#define UCreg_16		uregs[16]
#define UCreg_15		uregs[15]
#define UCreg_14		uregs[14]
#define UCreg_13		uregs[13]
#define UCreg_12		uregs[12]
#define UCreg_11		uregs[11]
#define UCreg_10		uregs[10]
#define UCreg_09		uregs[9]
#define UCreg_08		uregs[8]
#define UCreg_07		uregs[7]
#define UCreg_06		uregs[6]
#define UCreg_05		uregs[5]
#define UCreg_04		uregs[4]
#define UCreg_03		uregs[3]
#define UCreg_02		uregs[2]
#define UCreg_01		uregs[1]
#define UCreg_00		uregs[0]
#define UCreg_ORIG_00		uregs[33]


#endif /* __ASSEMBLY__ */

#endif /* _UAPI__UNICORE_PTRACE_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*
 * linux/arch/unicore32/include/asm/unistd.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#define __ARCH_WANT_RENAMEAT

/* Use the standard ABI for syscalls. */
#include <asm-generic/unistd.h>
#define __ARCH_WANT_SYS_CLONE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * PKUnity Ultra Media Access Layer (UMAL) Ethernet MAC Registers
 */

/* MAC module of UMAL */
/* UMAL's MAC module includes G/MII interface, several additional PHY
 * interfaces, and MAC control sub-layer, which provides support for control
 * frames (e.g. PAUSE frames).
 */
/*
 * TX/RX reset and control UMAL_CFG1
 */
#define UMAL_CFG1		(PKUNITY_UMAL_BASE + 0x0000)
/*
 * MAC interface mode control UMAL_CFG2
 */
#define UMAL_CFG2		(PKUNITY_UMAL_BASE + 0x0004)
/*
 * Inter Packet/Frame Gap UMAL_IPGIFG
 */
#define UMAL_IPGIFG		(PKUNITY_UMAL_BASE + 0x0008)
/*
 * Collision retry or backoff UMAL_HALFDUPLEX
 */
#define UMAL_HALFDUPLEX		(PKUNITY_UMAL_BASE + 0x000c)
/*
 * Maximum Frame Length UMAL_MAXFRAME
 */
#define UMAL_MAXFRAME		(PKUNITY_UMAL_BASE + 0x0010)
/*
 * Test Regsiter UMAL_TESTREG
 */
#define UMAL_TESTREG		(PKUNITY_UMAL_BASE + 0x001c)
/*
 * MII Management Configure UMAL_MIICFG
 */
#define UMAL_MIICFG		(PKUNITY_UMAL_BASE + 0x0020)
/*
 * MII Management Command UMAL_MIICMD
 */
#define UMAL_MIICMD		(PKUNITY_UMAL_BASE + 0x0024)
/*
 * MII Management Address UMAL_MIIADDR
 */
#define UMAL_MIIADDR		(PKUNITY_UMAL_BASE + 0x0028)
/*
 * MII Management Control UMAL_MIICTRL
 */
#define UMAL_MIICTRL		(PKUNITY_UMAL_BASE + 0x002c)
/*
 * MII Management Status UMAL_MIISTATUS
 */
#define UMAL_MIISTATUS		(PKUNITY_UMAL_BASE + 0x0030)
/*
 * MII Management Indicator UMAL_MIIIDCT
 */
#define UMAL_MIIIDCT		(PKUNITY_UMAL_BASE + 0x0034)
/*
 * Interface Control UMAL_IFCTRL
 */
#define UMAL_IFCTRL		(PKUNITY_UMAL_BASE + 0x0038)
/*
 * Interface Status UMAL_IFSTATUS
 */
#define UMAL_IFSTATUS		(PKUNITY_UMAL_BASE + 0x003c)
/*
 * MAC address (high 4 bytes) UMAL_STADDR1
 */
#define UMAL_STADDR1		(PKUNITY_UMAL_BASE + 0x0040)
/*
 * MAC address (low 2 bytes) UMAL_STADDR2
 */
#define UMAL_STADDR2		(PKUNITY_UMAL_BASE + 0x0044)

/* FIFO MODULE OF UMAL */
/* UMAL's FIFO module provides data queuing for increased system level
 * throughput
 */
#define UMAL_FIFOCFG0		(PKUNITY_UMAL_BASE + 0x0048)
#define UMAL_FIFOCFG1		(PKUNITY_UMAL_BASE + 0x004c)
#define UMAL_FIFOCFG2		(PKUNITY_UMAL_BASE + 0x0050)
#define UMAL_FIFOCFG3		(PKUNITY_UMAL_BASE + 0x0054)
#define UMAL_FIFOCFG4		(PKUNITY_UMAL_BASE + 0x0058)
#define UMAL_FIFOCFG5		(PKUNITY_UMAL_BASE + 0x005c)
#define UMAL_FIFORAM0		(PKUNITY_UMAL_BASE + 0x0060)
#define UMAL_FIFORAM1		(PKUNITY_UMAL_BASE + 0x0064)
#define UMAL_FIFORAM2		(PKUNITY_UMAL_BASE + 0x0068)
#define UMAL_FIFORAM3		(PKUNITY_UMAL_BASE + 0x006c)
#define UMAL_FIFORAM4		(PKUNITY_UMAL_BASE + 0x0070)
#define UMAL_FIFORAM5		(PKUNITY_UMAL_BASE + 0x0074)
#define UMAL_FIFORAM6		(PKUNITY_UMAL_BASE + 0x0078)
#define UMAL_FIFORAM7		(PKUNITY_UMAL_BASE + 0x007c)

/* MAHBE MODULE OF UMAL */
/* UMAL's MAHBE module interfaces to the host system through 32-bit AHB Master
 * and Slave ports.Registers within the M-AHBE provide Control and Status
 * information concerning these transfers.
 */
/*
 * Transmit Control UMAL_DMATxCtrl
 */
#define UMAL_DMATxCtrl		(PKUNITY_UMAL_BASE + 0x0180)
/*
 * Pointer to TX Descripter UMAL_DMATxDescriptor
 */
#define UMAL_DMATxDescriptor	(PKUNITY_UMAL_BASE + 0x0184)
/*
 * Status of Tx Packet Transfers UMAL_DMATxStatus
 */
#define UMAL_DMATxStatus	(PKUNITY_UMAL_BASE + 0x0188)
/*
 * Receive Control UMAL_DMARxCtrl
 */
#define UMAL_DMARxCtrl		(PKUNITY_UMAL_BASE + 0x018c)
/*
 * Pointer to Rx Descriptor UMAL_DMARxDescriptor
 */
#define UMAL_DMARxDescriptor	(PKUNITY_UMAL_BASE + 0x0190)
/*
 * Status of Rx Packet Transfers UMAL_DMARxStatus
 */
#define UMAL_DMARxStatus	(PKUNITY_UMAL_BASE + 0x0194)
/*
 * Interrupt Mask UMAL_DMAIntrMask
 */
#define UMAL_DMAIntrMask	(PKUNITY_UMAL_BASE + 0x0198)
/*
 * Interrupts, read only UMAL_DMAInterrupt
 */
#define UMAL_DMAInterrupt	(PKUNITY_UMAL_BASE + 0x019c)

/*
 * Commands for UMAL_CFG1 register
 */
#define UMAL_CFG1_TXENABLE	FIELD(1, 1, 0)
#define UMAL_CFG1_RXENABLE	FIELD(1, 1, 2)
#define UMAL_CFG1_TXFLOWCTL	FIELD(1, 1, 4)
#define UMAL_CFG1_RXFLOWCTL	FIELD(1, 1, 5)
#define UMAL_CFG1_CONFLPBK	FIELD(1, 1, 8)
#define UMAL_CFG1_RESET		FIELD(1, 1, 31)
#define UMAL_CFG1_CONFFLCTL	(MAC_TX_FLOW_CTL | MAC_RX_FLOW_CTL)

/*
 * Commands for UMAL_CFG2 register
 */
#define UMAL_CFG2_FULLDUPLEX	FIELD(1, 1, 0)
#define UMAL_CFG2_CRCENABLE	FIELD(1, 1, 1)
#define UMAL_CFG2_PADCRC	FIELD(1, 1, 2)
#define UMAL_CFG2_LENGTHCHECK	FIELD(1, 1, 4)
#define UMAL_CFG2_MODEMASK	FMASK(2, 8)
#define UMAL_CFG2_NIBBLEMODE	FIELD(1, 2, 8)
#define UMAL_CFG2_BYTEMODE	FIELD(2, 2, 8)
#define UMAL_CFG2_PREAMBLENMASK	FMASK(4, 12)
#define UMAL_CFG2_DEFPREAMBLEN	FIELD(7, 4, 12)
#define UMAL_CFG2_FD100		(UMAL_CFG2_DEFPREAMBLEN | UMAL_CFG2_NIBBLEMODE \
				| UMAL_CFG2_LENGTHCHECK | UMAL_CFG2_PADCRC \
				| UMAL_CFG2_CRCENABLE | UMAL_CFG2_FULLDUPLEX)
#define UMAL_CFG2_FD1000	(UMAL_CFG2_DEFPREAMBLEN | UMAL_CFG2_BYTEMODE \
				| UMAL_CFG2_LENGTHCHECK | UMAL_CFG2_PADCRC \
				| UMAL_CFG2_CRCENABLE | UMAL_CFG2_FULLDUPLEX)
#define UMAL_CFG2_HD100		(UMAL_CFG2_DEFPREAMBLEN | UMAL_CFG2_NIBBLEMODE \
				| UMAL_CFG2_LENGTHCHECK | UMAL_CFG2_PADCRC \
				| UMAL_CFG2_CRCENABLE)

/*
 * Command for UMAL_IFCTRL register
 */
#define UMAL_IFCTRL_RESET	FIELD(1, 1, 31)

/*
 * Command for UMAL_MIICFG register
 */
#define UMAL_MIICFG_RESET	FIELD(1, 1, 31)

/*
 * Command for UMAL_MIICMD register
 */
#define UMAL_MIICMD_READ	FIELD(1, 1, 0)

/*
 * Command for UMAL_MIIIDCT register
 */
#define UMAL_MIIIDCT_BUSY	FIELD(1, 1, 0)
#define UMAL_MIIIDCT_NOTVALID	FIELD(1, 1, 2)

/*
 * Commands for DMATxCtrl regesters
 */
#define UMAL_DMA_Enable		FIELD(1, 1, 0)

/*
 * Commands for DMARxCtrl regesters
 */
#define UMAL_DMAIntrMask_ENABLEHALFWORD	FIELD(1, 1, 16)

/*
 * Command for DMARxStatus
 */
#define CLR_RX_BUS_ERR		FIELD(1, 1, 3)
#define CLR_RX_OVERFLOW		FIELD(1, 1, 2)
#define CLR_RX_PKT		FIELD(1, 1, 0)

/*
 * Command for DMATxStatus
 */
#define CLR_TX_BUS_ERR		FIELD(1, 1, 3)
#define CLR_TX_UNDERRUN		FIELD(1, 1, 1)
#define CLR_TX_PKT		FIELD(1, 1, 0)

/*
 * Commands for DMAIntrMask and DMAInterrupt register
 */
#define INT_RX_MASK		FIELD(0xd, 4, 4)
#define INT_TX_MASK		FIELD(0xb, 4, 0)

#define INT_RX_BUS_ERR		FIELD(1, 1, 7)
#define INT_RX_OVERFLOW		FIELD(1, 1, 6)
#define INT_RX_PKT		FIELD(1, 1, 4)
#define INT_TX_BUS_ERR		FIELD(1, 1, 3)
#define INT_TX_UNDERRUN		FIELD(1, 1, 1)
#define INT_TX_PKT		FIELD(1, 1, 0)

/*
 * MARCOS of UMAL's descriptors
 */
#define UMAL_DESC_PACKETSIZE_EMPTY	FIELD(1, 1, 31)
#define UMAL_DESC_PACKETSIZE_NONEMPTY	FIELD(0, 1, 31)
#define UMAL_DESC_PACKETSIZE_SIZEMASK	FMASK(12, 0)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*
 * PKUnity Inter-integrated Circuit (I2C) Registers
 */

/*
 * Control Reg I2C_CON.
 */
#define I2C_CON		(PKUNITY_I2C_BASE + 0x0000)
/*
 * Target Address Reg I2C_TAR.
 */
#define I2C_TAR		(PKUNITY_I2C_BASE + 0x0004)
/*
 * Data buffer and command Reg I2C_DATACMD.
 */
#define I2C_DATACMD	(PKUNITY_I2C_BASE + 0x0010)
/*
 * Enable Reg I2C_ENABLE.
 */
#define I2C_ENABLE	(PKUNITY_I2C_BASE + 0x006C)
/*
 * Status Reg I2C_STATUS.
 */
#define I2C_STATUS	(PKUNITY_I2C_BASE + 0x0070)
/*
 * Tx FIFO Length Reg I2C_TXFLR.
 */
#define I2C_TXFLR	(PKUNITY_I2C_BASE + 0x0074)
/*
 * Rx FIFO Length Reg I2C_RXFLR.
 */
#define I2C_RXFLR	(PKUNITY_I2C_BASE + 0x0078)
/*
 * Enable Status Reg I2C_ENSTATUS.
 */
#define I2C_ENSTATUS	(PKUNITY_I2C_BASE + 0x009C)

#define I2C_CON_MASTER          FIELD(1, 1, 0)
#define I2C_CON_SPEED_STD       FIELD(1, 2, 1)
#define I2C_CON_SPEED_FAST      FIELD(2, 2, 1)
#define I2C_CON_RESTART         FIELD(1, 1, 5)
#define I2C_CON_SLAVEDISABLE    FIELD(1, 1, 6)

#define I2C_DATACMD_READ        FIELD(1, 1, 8)
#define I2C_DATACMD_WRITE       FIELD(0, 1, 8)
#define I2C_DATACMD_DAT_MASK    FMASK(8, 0)
#define I2C_DATACMD_DAT(v)      FIELD((v), 8, 0)

#define I2C_ENABLE_ENABLE       FIELD(1, 1, 0)
#define I2C_ENABLE_DISABLE      FIELD(0, 1, 0)

#define I2C_STATUS_RFF          FIELD(1, 1, 4)
#define I2C_STATUS_RFNE         FIELD(1, 1, 3)
#define I2C_STATUS_TFE          FIELD(1, 1, 2)
#define I2C_STATUS_TFNF         FIELD(1, 1, 1)
#define I2C_STATUS_ACTIVITY     FIELD(1, 1, 0)

#define I2C_ENSTATUS_ENABLE	FIELD(1, 1, 0)

#define I2C_TAR_THERMAL	0x4f
#define I2C_TAR_SPD	0x50
#define I2C_TAR_PWIC    0x55
#define I2C_TAR_EEPROM	0x57
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * linux/arch/unicore32/include/mach/hardware.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This file contains the hardware definitions for PKUnity architecture
 */

#ifndef __MACH_PUV3_HARDWARE_H__
#define __MACH_PUV3_HARDWARE_H__

#include <mach/PKUnity.h>

#ifndef __ASSEMBLY__
#define io_p2v(x)	(void __iomem *)((x) - PKUNITY_MMIO_BASE)
#define io_v2p(x)	(phys_addr_t)((x) + PKUNITY_MMIO_BASE)
#else
#define io_p2v(x)	((x) - PKUNITY_MMIO_BASE)
#define io_v2p(x)	((x) + PKUNITY_MMIO_BASE)
#endif

#define PCIBIOS_MIN_IO			0x4000 /* should lower than 64KB */
#define PCIBIOS_MIN_MEM			io_v2p(PKUNITY_PCIMEM_BASE)

#define pcibios_assign_all_busses()	1

#endif  /* __MACH_PUV3_HARDWARE_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * PKUnity Reset Controller (RC) Registers
 */
/*
 * Software Reset Register
 */
#define RESETC_SWRR	(PKUNITY_RESETC_BASE + 0x0000)
/*
 * Reset Status Register
 */
#define RESETC_RSSR	(PKUNITY_RESETC_BASE + 0x0004)

/*
 * Software Reset Bit
 */
#define RESETC_SWRR_SRB		FIELD(1, 1, 0)

/*
 * Hardware Reset
 */
#define RESETC_RSSR_HWR		FIELD(1, 1, 0)
/*
 * Software Reset
 */
#define RESETC_RSSR_SWR		FIELD(1, 1, 1)
/*
 * Watchdog Reset
 */
#define RESETC_RSSR_WDR		FIELD(1, 1, 2)
/*
 * Sleep Mode Reset
 */
#define RESETC_RSSR_SMR		FIELD(1, 1, 3)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * linux/arch/unicore32/include/mach/ocd.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __MACH_PUV3_OCD_H__
#define __MACH_PUV3_OCD_H__

#if defined(CONFIG_DEBUG_OCD)
static inline void ocd_putc(unsigned int c)
{
	int status, i = 0x2000000;

	do {
		if (--i < 0)
			return;

		asm volatile ("movc %0, p1.c0, #0" : "=r" (status));
	} while (status & 2);

	asm("movc p1.c1, %0, #1" : : "r" (c));
}

#define putc(ch)	ocd_putc(ch)
#else
#define putc(ch)
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /*
 * PKUnity Serial Peripheral Interface (SPI) Registers
 */
/*
 * Control reg. 0 SPI_CR0
 */
#define SPI_CR0		(PKUNITY_SPI_BASE + 0x0000)
/*
 * Control reg. 1 SPI_CR1
 */
#define SPI_CR1		(PKUNITY_SPI_BASE + 0x0004)
/*
 * Enable reg SPI_SSIENR
 */
#define SPI_SSIENR	(PKUNITY_SPI_BASE + 0x0008)
/*
 * Status reg SPI_SR
 */
#define SPI_SR		(PKUNITY_SPI_BASE + 0x0028)
/*
 * Interrupt Mask reg SPI_IMR
 */
#define SPI_IMR		(PKUNITY_SPI_BASE + 0x002C)
/*
 * Interrupt Status reg SPI_ISR
 */
#define SPI_ISR		(PKUNITY_SPI_BASE + 0x0030)

/*
 * Enable SPI Controller SPI_SSIENR_EN
 */
#define SPI_SSIENR_EN		FIELD(1, 1, 0)

/*
 * SPI Busy SPI_SR_BUSY
 */
#define SPI_SR_BUSY		FIELD(1, 1, 0)
/*
 * Transmit FIFO Not Full SPI_SR_TFNF
 */
#define SPI_SR_TFNF		FIELD(1, 1, 1)
/*
 * Transmit FIFO Empty SPI_SR_TFE
 */
#define SPI_SR_TFE		FIELD(1, 1, 2)
/*
 * Receive FIFO Not Empty SPI_SR_RFNE
 */
#define SPI_SR_RFNE		FIELD(1, 1, 3)
/*
 * Receive FIFO Full SPI_SR_RFF
 */
#define SPI_SR_RFF		FIELD(1, 1, 4)

/*
 * Trans. FIFO Empty Interrupt Status SPI_ISR_TXEIS
 */
#define SPI_ISR_TXEIS		FIELD(1, 1, 0)
/*
 * Trans. FIFO Overflow Interrupt Status SPI_ISR_TXOIS
 */
#define SPI_ISR_TXOIS		FIELD(1, 1, 1)
/*
 * Receiv. FIFO Underflow Interrupt Status SPI_ISR_RXUIS
 */
#define SPI_ISR_RXUIS		FIELD(1, 1, 2)
/*
 * Receiv. FIFO Overflow Interrupt Status SPI_ISR_RXOIS
 */
#define SPI_ISR_RXOIS		FIELD(1, 1, 3)
/*
 * Receiv. FIFO Full Interrupt Status SPI_ISR_RXFIS
 */
#define SPI_ISR_RXFIS		FIELD(1, 1, 4)
#define SPI_ISR_MSTIS		FIELD(1, 1, 5)

/*
 * Trans. FIFO Empty Interrupt Mask SPI_IMR_TXEIM
 */
#define SPI_IMR_TXEIM		FIELD(1, 1, 0)
/*
 * Trans. FIFO Overflow Interrupt Mask SPI_IMR_TXOIM
 */
#define SPI_IMR_TXOIM		FIELD(1, 1, 1)
/*
 * Receiv. FIFO Underflow Interrupt Mask SPI_IMR_RXUIM
 */
#define SPI_IMR_RXUIM		FIELD(1, 1, 2)
/*
 * Receiv. FIFO Overflow Interrupt Mask SPI_IMR_RXOIM
 */
#define SPI_IMR_RXOIM		FIELD(1, 1, 3)
/*
 * Receiv. FIFO Full Interrupt Mask SPI_IMR_RXFIM
 */
#define SPI_IMR_RXFIM		FIELD(1, 1, 4)
#define SPI_IMR_MSTIM		FIELD(1, 1, 5)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * PKUnity AC97 Registers
 */

#define PKUNITY_AC97_CONR		(PKUNITY_AC97_BASE + 0x0000)
#define PKUNITY_AC97_OCR		(PKUNITY_AC97_BASE + 0x0004)
#define PKUNITY_AC97_ICR		(PKUNITY_AC97_BASE + 0x0008)
#define PKUNITY_AC97_CRAC		(PKUNITY_AC97_BASE + 0x000C)
#define PKUNITY_AC97_INTR		(PKUNITY_AC97_BASE + 0x0010)
#define PKUNITY_AC97_INTRSTAT		(PKUNITY_AC97_BASE + 0x0014)
#define PKUNITY_AC97_INTRCLEAR		(PKUNITY_AC97_BASE + 0x0018)
#define PKUNITY_AC97_ENABLE		(PKUNITY_AC97_BASE + 0x001C)
#define PKUNITY_AC97_OUT_FIFO		(PKUNITY_AC97_BASE + 0x0020)
#define PKUNITY_AC97_IN_FIFO		(PKUNITY_AC97_BASE + 0x0030)

#define AC97_CODEC_REG(v)               FIELD((v), 7, 16)
#define AC97_CODEC_VAL(v)               FIELD((v), 16, 0)
#define AC97_CODEC_WRITECOMPLETE        FIELD(1, 1, 2)

/*
 * VAR PLAY SAMPLE RATE
 */
#define AC97_CMD_VPSAMPLE		(FIELD(3, 2, 16) | FIELD(3, 2, 0))

/*
 * FIX CAPTURE SAMPLE RATE
 */
#define AC97_CMD_FCSAMPLE		FIELD(7, 3, 0)

#define AC97_CMD_RESET			FIELD(1, 1, 0)
#define AC97_CMD_ENABLE			FIELD(1, 1, 0)
#define AC97_CMD_DISABLE		FIELD(0, 1, 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * PKUnity UNIGFX Registers
 */

#define UDE_BASE      (PKUNITY_UNIGFX_BASE + 0x1400)
#define UGE_BASE      (PKUNITY_UNIGFX_BASE + 0x0000)

/*
 * command reg for UNIGFX DE
 */
/*
 * control reg UDE_CFG
 */
#define UDE_CFG       (UDE_BASE + 0x0000)
/*
 * framebuffer start address reg UDE_FSA
 */
#define UDE_FSA       (UDE_BASE + 0x0004)
/*
 * line size reg UDE_LS
 */
#define UDE_LS        (UDE_BASE + 0x0008)
/*
 * pitch size reg UDE_PS
 */
#define UDE_PS        (UDE_BASE + 0x000C)
/*
 * horizontal active time reg UDE_HAT
 */
#define UDE_HAT       (UDE_BASE + 0x0010)
/*
 * horizontal blank time reg UDE_HBT
 */
#define UDE_HBT       (UDE_BASE + 0x0014)
/*
 * horizontal sync time reg UDE_HST
 */
#define UDE_HST       (UDE_BASE + 0x0018)
/*
 * vertival active time reg UDE_VAT
 */
#define UDE_VAT       (UDE_BASE + 0x001C)
/*
 * vertival blank time reg UDE_VBT
 */
#define UDE_VBT       (UDE_BASE + 0x0020)
/*
 * vertival sync time reg UDE_VST
 */
#define UDE_VST       (UDE_BASE + 0x0024)
/*
 * cursor position UDE_CXY
 */
#define UDE_CXY       (UDE_BASE + 0x0028)
/*
 * cursor front color UDE_CC0
 */
#define UDE_CC0       (UDE_BASE + 0x002C)
/*
 * cursor background color UDE_CC1
 */
#define UDE_CC1       (UDE_BASE + 0x0030)
/*
 * video position UDE_VXY
 */
#define UDE_VXY       (UDE_BASE + 0x0034)
/*
 * video start address reg UDE_VSA
 */
#define UDE_VSA       (UDE_BASE + 0x0040)
/*
 * video size reg UDE_VS
 */
#define UDE_VS        (UDE_BASE + 0x004C)

/*
 * command reg for UNIGFX GE
 */
/*
 * src xy reg UGE_SRCXY
 */
#define UGE_SRCXY     (UGE_BASE + 0x0000)
/*
 * dst xy reg UGE_DSTXY
 */
#define UGE_DSTXY     (UGE_BASE + 0x0004)
/*
 * pitch reg UGE_PITCH
 */
#define UGE_PITCH     (UGE_BASE + 0x0008)
/*
 * src start reg UGE_SRCSTART
 */
#define UGE_SRCSTART  (UGE_BASE + 0x000C)
/*
 * dst start reg UGE_DSTSTART
 */
#define UGE_DSTSTART  (UGE_BASE + 0x0010)
/*
 * width height reg UGE_WIDHEIGHT
 */
#define UGE_WIDHEIGHT (UGE_BASE + 0x0014)
/*
 * rop alpah reg UGE_ROPALPHA
 */
#define UGE_ROPALPHA  (UGE_BASE + 0x0018)
/*
 * front color UGE_FCOLOR
 */
#define UGE_FCOLOR    (UGE_BASE + 0x001C)
/*
 * background color UGE_BCOLOR
 */
#define UGE_BCOLOR    (UGE_BASE + 0x0020)
/*
 * src color key for high value UGE_SCH
 */
#define UGE_SCH       (UGE_BASE + 0x0024)
/*
 * dst color key for high value UGE_DCH
 */
#define UGE_DCH       (UGE_BASE + 0x0028)
/*
 * src color key for low value UGE_SCL
 */
#define UGE_SCL       (UGE_BASE + 0x002C)
/*
 * dst color key for low value UGE_DCL
 */
#define UGE_DCL       (UGE_BASE + 0x0030)
/*
 * clip 0 reg UGE_CLIP0
 */
#define UGE_CLIP0     (UGE_BASE + 0x0034)
/*
 * clip 1 reg UGE_CLIP1
 */
#define UGE_CLIP1     (UGE_BASE + 0x0038)
/*
 * command reg UGE_COMMAND
 */
#define UGE_COMMAND   (UGE_BASE + 0x003C)
/*
 * pattern 0 UGE_P0
 */
#define UGE_P0        (UGE_BASE + 0x0040)
#define UGE_P1        (UGE_BASE + 0x0044)
#define UGE_P2        (UGE_BASE + 0x0048)
#define UGE_P3        (UGE_BASE + 0x004C)
#define UGE_P4        (UGE_BASE + 0x0050)
#define UGE_P5        (UGE_BASE + 0x0054)
#define UGE_P6        (UGE_BASE + 0x0058)
#define UGE_P7        (UGE_BASE + 0x005C)
#define UGE_P8        (UGE_BASE + 0x0060)
#define UGE_P9        (UGE_BASE + 0x0064)
#define UGE_P10       (UGE_BASE + 0x0068)
#define UGE_P11       (UGE_BASE + 0x006C)
#define UGE_P12       (UGE_BASE + 0x0070)
#define UGE_P13       (UGE_BASE + 0x0074)
#define UGE_P14       (UGE_BASE + 0x0078)
#define UGE_P15       (UGE_BASE + 0x007C)
#define UGE_P16       (UGE_BASE + 0x0080)
#define UGE_P17       (UGE_BASE + 0x0084)
#define UGE_P18       (UGE_BASE + 0x0088)
#define UGE_P19       (UGE_BASE + 0x008C)
#define UGE_P20       (UGE_BASE + 0x0090)
#define UGE_P21       (UGE_BASE + 0x0094)
#define UGE_P22       (UGE_BASE + 0x0098)
#define UGE_P23       (UGE_BASE + 0x009C)
#define UGE_P24       (UGE_BASE + 0x00A0)
#define UGE_P25       (UGE_BASE + 0x00A4)
#define UGE_P26       (UGE_BASE + 0x00A8)
#define UGE_P27       (UGE_BASE + 0x00AC)
#define UGE_P28       (UGE_BASE + 0x00B0)
#define UGE_P29       (UGE_BASE + 0x00B4)
#define UGE_P30       (UGE_BASE + 0x00B8)
#define UGE_P31       (UGE_BASE + 0x00BC)

#define UDE_CFG_DST_MASK	FMASK(2, 8)
#define UDE_CFG_DST8            FIELD(0x0, 2, 8)
#define UDE_CFG_DST16           FIELD(0x1, 2, 8)
#define UDE_CFG_DST24           FIELD(0x2, 2, 8)
#define UDE_CFG_DST32           FIELD(0x3, 2, 8)

/*
 * GDEN enable UDE_CFG_GDEN_ENABLE
 */
#define UDE_CFG_GDEN_ENABLE     FIELD(1, 1, 3)
/*
 * VDEN enable UDE_CFG_VDEN_ENABLE
 */
#define UDE_CFG_VDEN_ENABLE     FIELD(1, 1, 4)
/*
 * CDEN enable UDE_CFG_CDEN_ENABLE
 */
#define UDE_CFG_CDEN_ENABLE     FIELD(1, 1, 5)
/*
 * TIMEUP enable UDE_CFG_TIMEUP_ENABLE
 */
#define UDE_CFG_TIMEUP_ENABLE   FIELD(1, 1, 6)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * linux/arch/unicore32/include/mach/dma.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __MACH_PUV3_DMA_H__
#define __MACH_PUV3_DMA_H__

/*
 * The PKUnity has six internal DMA channels.
 */
#define MAX_DMA_CHANNELS	6

typedef enum {
	DMA_PRIO_HIGH = 0,
	DMA_PRIO_MEDIUM = 1,
	DMA_PRIO_LOW = 2
} puv3_dma_prio;

/*
 * DMA registration
 */

extern int puv3_request_dma(char *name,
			 puv3_dma_prio prio,
			 void (*irq_handler)(int, void *),
			 void (*err_handler)(int, void *),
			 void *data);

extern void puv3_free_dma(int dma_ch);

static inline void puv3_stop_dma(int ch)
{
	writel(readl(DMAC_CONFIG(ch)) & ~DMAC_CONFIG_EN, DMAC_CONFIG(ch));
}

static inline void puv3_resume_dma(int ch)
{
	writel(readl(DMAC_CONFIG(ch)) | DMAC_CONFIG_EN, DMAC_CONFIG(ch));
}

#endif /* __MACH_PUV3_DMA_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   /*
 * linux/arch/unicore32/include/mach/PKUnity.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

/* Be sure that virtual mapping is defined right */
#ifndef __MACH_PUV3_HARDWARE_H__
#error You must include hardware.h not PKUnity.h
#endif

#include <mach/bitfield.h>

/*
 * Memory Definitions
 */
#define PKUNITY_SDRAM_BASE		0x00000000 /* 0x00000000 - 0x7FFFFFFF 2GB */
#define PKUNITY_MMIO_BASE		0x80000000 /* 0x80000000 - 0xFFFFFFFF 2GB */

/*
 * PKUNITY System Bus Addresses (PCI): 0x80000000 - 0xBFFFFFFF (1GB)
 * 0x80000000 - 0x8000000B 12B    PCI Configuration regs
 * 0x80010000 - 0x80010250 592B   PCI Bridge Base
 * 0x80030000 - 0x8003FFFF 64KB   PCI Legacy IO
 * 0x90000000 - 0x97FFFFFF 128MB  PCI AHB-PCI MEM-mapping
 * 0x98000000 - 0x9FFFFFFF 128MB  PCI PCI-AHB MEM-mapping
 */
#define PKUNITY_PCI_BASE		io_p2v(0x80000000) /* 0x80000000 - 0xBFFFFFFF 1GB */
#include <mach/regs-pci.h>

#define PKUNITY_PCICFG_BASE		(PKUNITY_PCI_BASE + 0x0)
#define PKUNITY_PCIBRI_BASE		(PKUNITY_PCI_BASE + 0x00010000)
#define PKUNITY_PCILIO_BASE		(PKUNITY_PCI_BASE + 0x00030000)
#define PKUNITY_PCIMEM_BASE		(PKUNITY_PCI_BASE + 0x10000000)
#define PKUNITY_PCIAHB_BASE		(PKUNITY_PCI_BASE + 0x18000000)

/*
 * PKUNITY System Bus Addresses (AHB): 0xC0000000 - 0xEDFFFFFF (640MB)
 */
#define PKUNITY_AHB_BASE		io_p2v(0xC0000000)

/* AHB-0 is DDR2 SDRAM */
/* AHB-1 is PCI Space */
#define PKUNITY_ARBITER_BASE		(PKUNITY_AHB_BASE + 0x000000) /* AHB-2 */
#define PKUNITY_DDR2CTRL_BASE		(PKUNITY_AHB_BASE + 0x100000) /* AHB-3 */
#define PKUNITY_DMAC_BASE		(PKUNITY_AHB_BASE + 0x200000) /* AHB-4 */
#include <mach/regs-dmac.h>
#define PKUNITY_UMAL_BASE		(PKUNITY_AHB_BASE + 0x300000) /* AHB-5 */
#include <mach/regs-umal.h>
#define PKUNITY_USB_BASE		(PKUNITY_AHB_BASE + 0x400000) /* AHB-6 */
#define PKUNITY_SATA_BASE		(PKUNITY_AHB_BASE + 0x500000) /* AHB-7 */
#define PKUNITY_SMC_BASE		(PKUNITY_AHB_BASE + 0x600000) /* AHB-8 */
/* AHB-9 is for APB bridge */
#define PKUNITY_MME_BASE		(PKUNITY_AHB_BASE + 0x700000) /* AHB-10 */
#define PKUNITY_UNIGFX_BASE		(PKUNITY_AHB_BASE + 0x800000) /* AHB-11 */
#include <mach/regs-unigfx.h>
#define PKUNITY_NAND_BASE		(PKUNITY_AHB_BASE + 0x900000) /* AHB-12 */
#include <mach/regs-nand.h>
#define PKUNITY_H264D_BASE		(PKUNITY_AHB_BASE + 0xA00000) /* AHB-13 */
#define PKUNITY_H264E_BASE		(PKUNITY_AHB_BASE + 0xB00000) /* AHB-14 */

/*
 * PKUNITY Peripheral Bus Addresses (APB): 0xEE000000 - 0xEFFFFFFF (128MB)
 */
#define PKUNITY_APB_BASE		io_p2v(0xEE000000)

#define PKUNITY_UART0_BASE		(PKUNITY_APB_BASE + 0x000000) /* APB-0 */
#define PKUNITY_UART1_BASE		(PKUNITY_APB_BASE + 0x100000) /* APB-1 */
#include <mach/regs-uart.h>
#define PKUNITY_I2C_BASE		(PKUNITY_APB_BASE + 0x200000) /* APB-2 */
#include <mach/regs-i2c.h>
#define PKUNITY_SPI_BASE		(PKUNITY_APB_BASE + 0x300000) /* APB-3 */
#include <mach/regs-spi.h>
#define PKUNITY_AC97_BASE		(PKUNITY_APB_BASE + 0x400000) /* APB-4 */
#include <mach/regs-ac97.h>
#define PKUNITY_GPIO_BASE		(PKUNITY_APB_BASE + 0x500000) /* APB-5 */
#include <mach/regs-gpio.h>
#define PKUNITY_INTC_BASE		(PKUNITY_APB_BASE + 0x600000) /* APB-6 */
#include <mach/regs-intc.h>
#define PKUNITY_RTC_BASE		(PKUNITY_APB_BASE + 0x700000) /* APB-7 */
#include <mach/regs-rtc.h>
#define PKUNITY_OST_BASE		(PKUNITY_APB_BASE + 0x800000) /* APB-8 */
#include <mach/regs-ost.h>
#define PKUNITY_RESETC_BASE		(PKUNITY_APB_BASE + 0x900000) /* APB-9 */
#include <mach/regs-resetc.h>
#define PKUNITY_PM_BASE			(PKUNITY_APB_BASE + 0xA00000) /* APB-10 */
#include <mach/regs-pm.h>
#define PKUNITY_PS2_BASE		(PKUNITY_APB_BASE + 0xB00000) /* APB-11 */
#include <mach/regs-ps2.h>
#define PKUNITY_SDC_BASE		(PKUNITY_APB_BASE + 0xC00000) /* APB-12 */
#include <mach/regs-sdc.h>

                                                                                                                                              /*
 * PKUnity AHB-PCI Bridge Registers
 */

/*
 * AHB/PCI fixed physical address for pci addess configuration
 */
/*
 * PCICFG Bridge Base Reg.
 */
#define PCICFG_BRIBASE          (PKUNITY_PCICFG_BASE + 0x0000)
/*
 * PCICFG Address Reg.
 */
#define PCICFG_ADDR             (PKUNITY_PCICFG_BASE + 0x0004)
/*
 * PCICFG Address Reg.
 */
#define PCICFG_DATA             (PKUNITY_PCICFG_BASE + 0x0008)

/*
 * PCI Bridge configuration space
 */
#define PCIBRI_ID		(PKUNITY_PCIBRI_BASE + 0x0000)
#define PCIBRI_CMD		(PKUNITY_PCIBRI_BASE + 0x0004)
#define PCIBRI_CLASS		(PKUNITY_PCIBRI_BASE + 0x0008)
#define PCIBRI_LTR		(PKUNITY_PCIBRI_BASE + 0x000C)
#define PCIBRI_BAR0		(PKUNITY_PCIBRI_BASE + 0x0010)
#define PCIBRI_BAR1		(PKUNITY_PCIBRI_BASE + 0x0014)
#define PCIBRI_BAR2		(PKUNITY_PCIBRI_BASE + 0x0018)
#define PCIBRI_BAR3		(PKUNITY_PCIBRI_BASE + 0x001C)
#define PCIBRI_BAR4		(PKUNITY_PCIBRI_BASE + 0x0020)
#define PCIBRI_BAR5		(PKUNITY_PCIBRI_BASE + 0x0024)

#define PCIBRI_PCICTL0		(PKUNITY_PCIBRI_BASE + 0x0100)
#define PCIBRI_PCIBAR0		(PKUNITY_PCIBRI_BASE + 0x0104)
#define PCIBRI_PCIAMR0		(PKUNITY_PCIBRI_BASE + 0x0108)
#define PCIBRI_PCITAR0		(PKUNITY_PCIBRI_BASE + 0x010C)
#define PCIBRI_PCICTL1		(PKUNITY_PCIBRI_BASE + 0x0110)
#define PCIBRI_PCIBAR1		(PKUNITY_PCIBRI_BASE + 0x0114)
#define PCIBRI_PCIAMR1		(PKUNITY_PCIBRI_BASE + 0x0118)
#define PCIBRI_PCITAR1		(PKUNITY_PCIBRI_BASE + 0x011C)
#define PCIBRI_PCICTL2		(PKUNITY_PCIBRI_BASE + 0x0120)
#define PCIBRI_PCIBAR2		(PKUNITY_PCIBRI_BASE + 0x0124)
#define PCIBRI_PCIAMR2		(PKUNITY_PCIBRI_BASE + 0x0128)
#define PCIBRI_PCITAR2		(PKUNITY_PCIBRI_BASE + 0x012C)
#define PCIBRI_PCICTL3		(PKUNITY_PCIBRI_BASE + 0x0130)
#define PCIBRI_PCIBAR3		(PKUNITY_PCIBRI_BASE + 0x0134)
#define PCIBRI_PCIAMR3		(PKUNITY_PCIBRI_BASE + 0x0138)
#define PCIBRI_PCITAR3		(PKUNITY_PCIBRI_BASE + 0x013C)
#define PCIBRI_PCICTL4		(PKUNITY_PCIBRI_BASE + 0x0140)
#define PCIBRI_PCIBAR4		(PKUNITY_PCIBRI_BASE + 0x0144)
#define PCIBRI_PCIAMR4		(PKUNITY_PCIBRI_BASE + 0x0148)
#define PCIBRI_PCITAR4		(PKUNITY_PCIBRI_BASE + 0x014C)
#define PCIBRI_PCICTL5		(PKUNITY_PCIBRI_BASE + 0x0150)
#define PCIBRI_PCIBAR5		(PKUNITY_PCIBRI_BASE + 0x0154)
#define PCIBRI_PCIAMR5		(PKUNITY_PCIBRI_BASE + 0x0158)
#define PCIBRI_PCITAR5		(PKUNITY_PCIBRI_BASE + 0x015C)

#define PCIBRI_AHBCTL0		(PKUNITY_PCIBRI_BASE + 0x0180)
#define PCIBRI_AHBBAR0		(PKUNITY_PCIBRI_BASE + 0x0184)
#define PCIBRI_AHBAMR0		(PKUNITY_PCIBRI_BASE + 0x0188)
#define PCIBRI_AHBTAR0		(PKUNITY_PCIBRI_BASE + 0x018C)
#define PCIBRI_AHBCTL1		(PKUNITY_PCIBRI_BASE + 0x0190)
#define PCIBRI_AHBBAR1		(PKUNITY_PCIBRI_BASE + 0x0194)
#define PCIBRI_AHBAMR1		(PKUNITY_PCIBRI_BASE + 0x0198)
#define PCIBRI_AHBTAR1		(PKUNITY_PCIBRI_BASE + 0x019C)
#define PCIBRI_AHBCTL2		(PKUNITY_PCIBRI_BASE + 0x01A0)
#define PCIBRI_AHBBAR2		(PKUNITY_PCIBRI_BASE + 0x01A4)
#define PCIBRI_AHBAMR2		(PKUNITY_PCIBRI_BASE + 0x01A8)
#define PCIBRI_AHBTAR2		(PKUNITY_PCIBRI_BASE + 0x01AC)
#define PCIBRI_AHBCTL3		(PKUNITY_PCIBRI_BASE + 0x01B0)
#define PCIBRI_AHBBAR3		(PKUNITY_PCIBRI_BASE + 0x01B4)
#define PCIBRI_AHBAMR3		(PKUNITY_PCIBRI_BASE + 0x01B8)
#define PCIBRI_AHBTAR3		(PKUNITY_PCIBRI_BASE + 0x01BC)
#define PCIBRI_AHBCTL4		(PKUNITY_PCIBRI_BASE + 0x01C0)
#define PCIBRI_AHBBAR4		(PKUNITY_PCIBRI_BASE + 0x01C4)
#define PCIBRI_AHBAMR4		(PKUNITY_PCIBRI_BASE + 0x01C8)
#define PCIBRI_AHBTAR4		(PKUNITY_PCIBRI_BASE + 0x01CC)
#define PCIBRI_AHBCTL5		(PKUNITY_PCIBRI_BASE + 0x01D0)
#define PCIBRI_AHBBAR5		(PKUNITY_PCIBRI_BASE + 0x01D4)
#define PCIBRI_AHBAMR5		(PKUNITY_PCIBRI_BASE + 0x01D8)
#define PCIBRI_AHBTAR5		(PKUNITY_PCIBRI_BASE + 0x01DC)

#define PCIBRI_CTLx_AT          FIELD(1, 1, 2)
#define PCIBRI_CTLx_PREF        FIELD(1, 1, 1)
#define PCIBRI_CTLx_MRL         FIELD(1, 1, 0)

#define PCIBRI_BARx_ADDR        FIELD(0xFFFFFFFC, 30, 2)
#define PCIBRI_BARx_IO          FIELD(1, 1, 0)
#define PCIBRI_BARx_MEM         FIELD(0, 1, 0)

#define PCIBRI_CMD_IO           FIELD(1, 1, 0)
#define PCIBRI_CMD_MEM          FIELD(1, 1, 1)
                                                                                                             /*
 * PKUnity Direct Memory Access Controller (DMAC)
 */

/*
 * Interrupt Status Reg DMAC_ISR.
 */
#define DMAC_ISR		(PKUNITY_DMAC_BASE + 0x0020)
/*
 * Interrupt Transfer Complete Status Reg DMAC_ITCSR.
 */
#define DMAC_ITCSR		(PKUNITY_DMAC_BASE + 0x0050)
/*
 * Interrupt Transfer Complete Clear Reg DMAC_ITCCR.
 */
#define DMAC_ITCCR		(PKUNITY_DMAC_BASE + 0x0060)
/*
 * Interrupt Error Status Reg DMAC_IESR.
 */
#define DMAC_IESR		(PKUNITY_DMAC_BASE + 0x0080)
/*
 * Interrupt Error Clear Reg DMAC_IECR.
 */
#define DMAC_IECR		(PKUNITY_DMAC_BASE + 0x0090)
/*
 * Enable Channels Reg DMAC_ENCH.
 */
#define DMAC_ENCH		(PKUNITY_DMAC_BASE + 0x00B0)

/*
 * DMA control reg. Space [byte]
 */
#define DMASp                   0x00000100

/*
 * Source Addr DMAC_SRCADDR(ch).
 */
#define DMAC_SRCADDR(ch)	(PKUNITY_DMAC_BASE + (ch)*DMASp + 0x00)
/*
 * Destination Addr DMAC_DESTADDR(ch).
 */
#define DMAC_DESTADDR(ch)	(PKUNITY_DMAC_BASE + (ch)*DMASp + 0x04)
/*
 * Control Reg DMAC_CONTROL(ch).
 */
#define DMAC_CONTROL(ch)	(PKUNITY_DMAC_BASE + (ch)*DMASp + 0x0C)
/*
 * Configuration Reg DMAC_CONFIG(ch).
 */
#define DMAC_CONFIG(ch)		(PKUNITY_DMAC_BASE + (ch)*DMASp + 0x10)

#define DMAC_IR_MASK            FMASK(6, 0)
/*
 * select channel (ch)
 */
#define DMAC_CHANNEL(ch)	FIELD(1, 1, (ch))

#define DMAC_CONTROL_SIZE_BYTE(v)       (FIELD((v), 12, 14) | \
					FIELD(0, 3, 9) | FIELD(0, 3, 6))
#define DMAC_CONTROL_SIZE_HWORD(v)      (FIELD((v) >> 1, 12, 14) | \
					FIELD(1, 3, 9) | FIELD(1, 3, 6))
#define DMAC_CONTROL_SIZE_WORD(v)       (FIELD((v) >> 2, 12, 14) | \
					FIELD(2, 3, 9) | FIELD(2, 3, 6))
#define DMAC_CONTROL_DI                 FIELD(1, 1, 13)
#define DMAC_CONTROL_SI                 FIELD(1, 1, 12)
#define DMAC_CONTROL_BURST_1BYTE        (FIELD(0, 3, 3) | FIELD(0, 3, 0))
#define DMAC_CONTROL_BURST_4BYTE        (FIELD(3, 3, 3) | FIELD(3, 3, 0))
#define DMAC_CONTROL_BURST_8BYTE        (FIELD(5, 3, 3) | FIELD(5, 3, 0))
#define DMAC_CONTROL_BURST_16BYTE       (FIELD(7, 3, 3) | FIELD(7, 3, 0))

#define	DMAC_CONFIG_UART0_WR    (FIELD(2, 4, 11) | FIELD(1, 2, 1))
#define	DMAC_CONFIG_UART0_RD    (FIELD(2, 4, 7)  | FIELD(2, 2, 1))
#define	DMAC_CONFIG_UART1_WR    (FIELD(3, 4, 11) | FIELD(1, 2, 1))
#define	DMAC_CONFIG_UART1RD     (FIELD(3, 4, 7)  | FIELD(2, 2, 1))
#define	DMAC_CONFIG_AC97WR      (FIELD(4, 4, 11) | FIELD(1, 2, 1))
#define	DMAC_CONFIG_AC97RD      (FIELD(4, 4, 7)  | FIELD(2, 2, 1))
#define	DMAC_CONFIG_MMCWR       (FIELD(7, 4, 11) | FIELD(1, 2, 1))
#define	DMAC_CONFIG_MMCRD       (FIELD(7, 4, 7)  | FIELD(2, 2, 1))
#define DMAC_CONFIG_MASKITC     FIELD(1, 1, 4)
#define DMAC_CONFIG_MASKIE      FIELD(1, 1, 3)
#define DMAC_CONFIG_EN          FIELD(1, 1, 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * PKUNITY Interrupt Controller (INTC) Registers
 */
/*
 * INTC Level Reg INTC_ICLR.
 */
#define INTC_ICLR	(PKUNITY_INTC_BASE + 0x0000)
/*
 * INTC Mask Reg INTC_ICMR.
 */
#define INTC_ICMR	(PKUNITY_INTC_BASE + 0x0004)
/*
 * INTC Pending Reg INTC_ICPR.
 */
#define INTC_ICPR	(PKUNITY_INTC_BASE + 0x0008)
/*
 * INTC IRQ Pending Reg INTC_ICIP.
 */
#define INTC_ICIP	(PKUNITY_INTC_BASE + 0x000C)
/*
 * INTC REAL Pending Reg INTC_ICFP.
 */
#define INTC_ICFP	(PKUNITY_INTC_BASE + 0x0010)
/*
 * INTC Control Reg INTC_ICCR.
 */
#define INTC_ICCR	(PKUNITY_INTC_BASE + 0x0014)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*
 * linux/arch/unicore32/include/mach/bitfield.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __MACH_PUV3_BITFIELD_H__
#define __MACH_PUV3_BITFIELD_H__

#ifndef __ASSEMBLY__
#define UData(Data)	((unsigned long) (Data))
#else
#define UData(Data)	(Data)
#endif

#define FIELD(val, vmask, vshift)	(((val) & ((UData(1) << (vmask)) - 1)) << (vshift))
#define FMASK(vmask, vshift)		(((UData(1) << (vmask)) - 1) << (vshift))

#endif /* __MACH_PUV3_BITFIELD_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * PKUnity Operating System Timer (OST) Registers
 */
/*
 * Match Reg 0 OST_OSMR0
 */
#define OST_OSMR0	(PKUNITY_OST_BASE + 0x0000)
/*
 * Match Reg 1 OST_OSMR1
 */
#define OST_OSMR1	(PKUNITY_OST_BASE + 0x0004)
/*
 * Match Reg 2 OST_OSMR2
 */
#define OST_OSMR2	(PKUNITY_OST_BASE + 0x0008)
/*
 * Match Reg 3 OST_OSMR3
 */
#define OST_OSMR3	(PKUNITY_OST_BASE + 0x000C)
/*
 * Counter Reg OST_OSCR
 */
#define OST_OSCR	(PKUNITY_OST_BASE + 0x0010)
/*
 * Status Reg OST_OSSR
 */
#define OST_OSSR	(PKUNITY_OST_BASE + 0x0014)
/*
 * Watchdog Enable Reg OST_OWER
 */
#define OST_OWER	(PKUNITY_OST_BASE + 0x0018)
/*
 * Interrupt Enable Reg OST_OIER
 */
#define OST_OIER	(PKUNITY_OST_BASE + 0x001C)

/*
 * PWM Registers: IO base address: PKUNITY_OST_BASE + 0x80
 *      PWCR: Pulse Width Control Reg
 *      DCCR: Duty Cycle Control Reg
 *      PCR: Period Control Reg
 */
#define OST_PWM_PWCR	(0x00)
#define OST_PWM_DCCR	(0x04)
#define OST_PWM_PCR 	(0x08)

/*
 * Match detected 0 OST_OSSR_M0
 */
#define OST_OSSR_M0		FIELD(1, 1, 0)
/*
 * Match detected 1 OST_OSSR_M1
 */
#define OST_OSSR_M1		FIELD(1, 1, 1)
/*
 * Match detected 2 OST_OSSR_M2
 */
#define OST_OSSR_M2		FIELD(1, 1, 2)
/*
 * Match detected 3 OST_OSSR_M3
 */
#define OST_OSSR_M3		FIELD(1, 1, 3)

/*
 * Interrupt enable 0 OST_OIER_E0
 */
#define OST_OIER_E0		FIELD(1, 1, 0)
/*
 * Interrupt enable 1 OST_OIER_E1
 */
#define OST_OIER_E1		FIELD(1, 1, 1)
/*
 * Interrupt enable 2 OST_OIER_E2
 */
#define OST_OIER_E2		FIELD(1, 1, 2)
/*
 * Interrupt enable 3 OST_OIER_E3
 */
#define OST_OIER_E3		FIELD(1, 1, 3)

/*
 * Watchdog Match Enable OST_OWER_WME
 */
#define OST_OWER_WME		FIELD(1, 1, 0)

/*
 * PWM Full Duty Cycle OST_PWMDCCR_FDCYCLE
 */
#define OST_PWMDCCR_FDCYCLE	FIELD(1, 1, 10)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * PKUnity Real-Time Clock (RTC) control registers
 */
/*
 * RTC Alarm Reg RTC_RTAR
 */
#define RTC_RTAR	(PKUNITY_RTC_BASE + 0x0000)
/*
 * RTC Count Reg RTC_RCNR
 */
#define RTC_RCNR	(PKUNITY_RTC_BASE + 0x0004)
/*
 * RTC Trim Reg RTC_RTTR
 */
#define RTC_RTTR	(PKUNITY_RTC_BASE + 0x0008)
/*
 * RTC Status Reg RTC_RTSR
 */
#define RTC_RTSR	(PKUNITY_RTC_BASE + 0x0010)

/*
 * ALarm detected RTC_RTSR_AL
 */
#define RTC_RTSR_AL		FIELD(1, 1, 0)
/*
 * 1 Hz clock detected RTC_RTSR_HZ
 */
#define RTC_RTSR_HZ		FIELD(1, 1, 1)
/*
 * ALarm interrupt Enable RTC_RTSR_ALE
 */
#define RTC_RTSR_ALE		FIELD(1, 1, 2)
/*
 * 1 Hz clock interrupt Enable RTC_RTSR_HZE
 */
#define RTC_RTSR_HZE		FIELD(1, 1, 3)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * PKUnity PS2 Controller Registers
 */
/*
 * the same as I8042_DATA_REG PS2_DATA
 */
#define PS2_DATA	(PKUNITY_PS2_BASE + 0x0060)
/*
 * the same as I8042_COMMAND_REG PS2_COMMAND
 */
#define PS2_COMMAND	(PKUNITY_PS2_BASE + 0x0064)
/*
 * the same as I8042_STATUS_REG PS2_STATUS
 */
#define PS2_STATUS	(PKUNITY_PS2_BASE + 0x0064)
/*
 * counter reg PS2_CNT
 */
#define PS2_CNT		(PKUNITY_PS2_BASE + 0x0068)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*
 * linux/arch/unicore32/include/mach/uncompress.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __MACH_PUV3_UNCOMPRESS_H__
#define __MACH_PUV3_UNCOMPRESS_H__

#include <mach/hardware.h>
#include <mach/ocd.h>

extern char input_data[];
extern char input_data_end[];

static void arch_decomp_puts(const char *ptr)
{
	char c;

	while ((c = *ptr++) != '\0') {
		if (c == '\n')
			putc('\r');
		putc(c);
	}
}
#define ARCH_HAVE_DECOMP_PUTS

#endif /* __MACH_PUV3_UNCOMPRESS_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*
 * linux/arch/unicore32/include/mach/memory.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __MACH_PUV3_MEMORY_H__
#define __MACH_PUV3_MEMORY_H__

#include <mach/hardware.h>

/* Physical DRAM offset. */
#define PHYS_OFFSET	UL(0x00000000)
/* The base address of exception vectors. */
#define VECTORS_BASE	UL(0xffff0000)
/* The base address of kuser area. */
#define KUSER_BASE	UL(0x80000000)

#ifdef __ASSEMBLY__
/* The byte offset of the kernel image in RAM from the start of RAM. */
#define KERNEL_IMAGE_START	0x00408000
#endif

#if !defined(__ASSEMBLY__) && defined(CONFIG_PCI)

void puv3_pci_adjust_zones(unsigned long *size, unsigned long *holes);

#define arch_adjust_zones(size, holes) \
	puv3_pci_adjust_zones(size, holes)

#endif

/*
 * PCI controller in PKUnity-3 masks highest 5-bit for upstream channel,
 * so we must limit the DMA allocation within 128M physical memory for
 * supporting PCI devices.
 */
#define PCI_DMA_THRESHOLD	(PHYS_OFFSET + SZ_128M - 1)

#define is_pcibus_device(dev)	(dev &&			\
				(strncmp(dev->bus->name, "pci", 3) == 0))

#define __virt_to_pcibus(x)     (__virt_to_phys((x) + PKUNITY_PCIAHB_BASE))
#define __pcibus_to_virt(x)     (__phys_to_virt(x) - PKUNITY_PCIAHB_BASE)

/* kuser area */
#define KUSER_VECPAGE_BASE	(KUSER_BASE + UL(0x3fff0000))
/* kuser_vecpage (0xbfff0000) is ro, and vectors page (0xffff0000) is rw */
#define kuser_vecpage_to_vectors(x)	((x) - (KUSER_VECPAGE_BASE)	\
					+ (VECTORS_BASE))

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /*
 * PKUnity Multi-Media Card and Security Digital Card (MMC/SD) Registers
 */
/*
 * Clock Control Reg SDC_CCR
 */
#define SDC_CCR		(PKUNITY_SDC_BASE + 0x0000)
/*
 * Software Reset Reg SDC_SRR
 */
#define SDC_SRR		(PKUNITY_SDC_BASE + 0x0004)
/*
 * Argument Reg SDC_ARGUMENT
 */
#define SDC_ARGUMENT	(PKUNITY_SDC_BASE + 0x0008)
/*
 * Command Reg SDC_COMMAND
 */
#define SDC_COMMAND	(PKUNITY_SDC_BASE + 0x000C)
/*
 * Block Size Reg SDC_BLOCKSIZE
 */
#define SDC_BLOCKSIZE	(PKUNITY_SDC_BASE + 0x0010)
/*
 * Block Cound Reg SDC_BLOCKCOUNT
 */
#define SDC_BLOCKCOUNT	(PKUNITY_SDC_BASE + 0x0014)
/*
 * Transfer Mode Reg SDC_TMR
 */
#define SDC_TMR		(PKUNITY_SDC_BASE + 0x0018)
/*
 * Response Reg. 0 SDC_RES0
 */
#define SDC_RES0	(PKUNITY_SDC_BASE + 0x001C)
/*
 * Response Reg. 1 SDC_RES1
 */
#define SDC_RES1	(PKUNITY_SDC_BASE + 0x0020)
/*
 * Response Reg. 2 SDC_RES2
 */
#define SDC_RES2	(PKUNITY_SDC_BASE + 0x0024)
/*
 * Response Reg. 3 SDC_RES3
 */
#define SDC_RES3	(PKUNITY_SDC_BASE + 0x0028)
/*
 * Read Timeout Control Reg SDC_RTCR
 */
#define SDC_RTCR	(PKUNITY_SDC_BASE + 0x002C)
/*
 * Interrupt Status Reg SDC_ISR
 */
#define SDC_ISR		(PKUNITY_SDC_BASE + 0x0030)
/*
 * Interrupt Status Mask Reg SDC_ISMR
 */
#define SDC_ISMR	(PKUNITY_SDC_BASE + 0x0034)
/*
 * RX FIFO SDC_RXFIFO
 */
#define SDC_RXFIFO	(PKUNITY_SDC_BASE + 0x0038)
/*
 * TX FIFO SDC_TXFIFO
 */
#define SDC_TXFIFO	(PKUNITY_SDC_BASE + 0x003C)

/*
 * SD Clock Enable SDC_CCR_CLKEN
 */
#define SDC_CCR_CLKEN			FIELD(1, 1, 2)
/*
 * [15:8] SDC_CCR_PDIV(v)
 */
#define SDC_CCR_PDIV(v)			FIELD((v), 8, 8)

/*
 * Software reset enable SDC_SRR_ENABLE
 */
#define SDC_SRR_ENABLE			FIELD(0, 1, 0)
/*
 * Software reset disable SDC_SRR_DISABLE
 */
#define SDC_SRR_DISABLE			FIELD(1, 1, 0)

/*
 * Response type SDC_COMMAND_RESTYPE_MASK
 */
#define SDC_COMMAND_RESTYPE_MASK	FMASK(2, 0)
/*
 * No response SDC_COMMAND_RESTYPE_NONE
 */
#define SDC_COMMAND_RESTYPE_NONE	FIELD(0, 2, 0)
/*
 * 136-bit long response SDC_COMMAND_RESTYPE_LONG
 */
#define SDC_COMMAND_RESTYPE_LONG	FIELD(1, 2, 0)
/*
 * 48-bit short response SDC_COMMAND_RESTYPE_SHORT
 */
#define SDC_COMMAND_RESTYPE_SHORT	FIELD(2, 2, 0)
/*
 * 48-bit short and test if busy response SDC_COMMAND_RESTYPE_SHORTBUSY
 */
#define SDC_COMMAND_RESTYPE_SHORTBUSY	FIELD(3, 2, 0)
/*
 * data ready SDC_COMMAND_DATAREADY
 */
#define SDC_COMMAND_DATAREADY		FIELD(1, 1, 2)
#define SDC_COMMAND_CMDEN		FIELD(1, 1, 3)
/*
 * [10:5] SDC_COMMAND_CMDINDEX(v)
 */
#define SDC_COMMAND_CMDINDEX(v)		FIELD((v), 6, 5)

/*
 * [10:0] SDC_BLOCKSIZE_BSMASK(v)
 */
#define SDC_BLOCKSIZE_BSMASK(v)		FIELD((v), 11, 0)
/*
 * [11:0] SDC_BLOCKCOUNT_BCMASK(v)
 */
#define SDC_BLOCKCOUNT_BCMASK(v)	FIELD((v), 12, 0)

/*
 * Data Width 1bit SDC_TMR_WTH_1BIT
 */
#define SDC_TMR_WTH_1BIT		FIELD(0, 1, 0)
/*
 * Data Width 4bit SDC_TMR_WTH_4BIT
 */
#define SDC_TMR_WTH_4BIT		FIELD(1, 1, 0)
/*
 * Read SDC_TMR_DIR_READ
 */
#define SDC_TMR_DIR_READ		FIELD(0, 1, 1)
/*
 * Write SDC_TMR_DIR_WRITE
 */
#define SDC_TMR_DIR_WRITE		FIELD(1, 1, 1)

#define SDC_IR_MASK			FMASK(13, 0)
#define SDC_IR_RESTIMEOUT		FIELD(1, 1, 0)
#define SDC_IR_WRITECRC			FIELD(1, 1, 1)
#define SDC_IR_READCRC			FIELD(1, 1, 2)
#define SDC_IR_TXFIFOREAD		FIELD(1, 1, 3)
#define SDC_IR_RXFIFOWRITE		FIELD(1, 1, 4)
#define SDC_IR_READTIMEOUT		FIELD(1, 1, 5)
#define SDC_IR_DATACOMPLETE		FIELD(1, 1, 6)
#define SDC_IR_CMDCOMPLETE		FIELD(1, 1, 7)
#define SDC_IR_RXFIFOFULL		FIELD(1, 1, 8)
#define SDC_IR_RXFIFOEMPTY		FIELD(1, 1, 9)
#define SDC_IR_TXFIFOFULL		FIELD(1, 1, 10)
#define SDC_IR_TXFIFOEMPTY		FIELD(1, 1, 11)
#define SDC_IR_ENDCMDWITHRES		FIELD(1, 1, 12)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*
 * linux/arch/unicore32/include/mach/map.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 *  Page table mapping constructs and function prototypes
 */
#define MT_DEVICE		0
#define MT_DEVICE_CACHED	2
#define MT_KUSER		7
#define MT_HIGH_VECTORS		8
#define MT_MEMORY		9
#define MT_ROM			10

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * PKUnity NAND Controller Registers
 */
/*
 * ID Reg. 0 NAND_IDR0
 */
#define NAND_IDR0	(PKUNITY_NAND_BASE + 0x0000)
/*
 * ID Reg. 1 NAND_IDR1
 */
#define NAND_IDR1	(PKUNITY_NAND_BASE + 0x0004)
/*
 * ID Reg. 2 NAND_IDR2
 */
#define NAND_IDR2	(PKUNITY_NAND_BASE + 0x0008)
/*
 * ID Reg. 3 NAND_IDR3
 */
#define NAND_IDR3	(PKUNITY_NAND_BASE + 0x000C)
/*
 * Page Address Reg 0 NAND_PAR0
 */
#define NAND_PAR0	(PKUNITY_NAND_BASE + 0x0010)
/*
 * Page Address Reg 1 NAND_PAR1
 */
#define NAND_PAR1	(PKUNITY_NAND_BASE + 0x0014)
/*
 * Page Address Reg 2 NAND_PAR2
 */
#define NAND_PAR2	(PKUNITY_NAND_BASE + 0x0018)
/*
 * ECC Enable Reg NAND_ECCEN
 */
#define NAND_ECCEN	(PKUNITY_NAND_BASE + 0x001C)
/*
 * Buffer Reg NAND_BUF
 */
#define NAND_BUF	(PKUNITY_NAND_BASE + 0x0020)
/*
 * ECC Status Reg NAND_ECCSR
 */
#define NAND_ECCSR	(PKUNITY_NAND_BASE + 0x0024)
/*
 * Command Reg NAND_CMD
 */
#define NAND_CMD	(PKUNITY_NAND_BASE + 0x0028)
/*
 * DMA Configure Reg NAND_DMACR
 */
#define NAND_DMACR	(PKUNITY_NAND_BASE + 0x002C)
/*
 * Interrupt Reg NAND_IR
 */
#define NAND_IR		(PKUNITY_NAND_BASE + 0x0030)
/*
 * Interrupt Mask Reg NAND_IMR
 */
#define NAND_IMR	(PKUNITY_NAND_BASE + 0x0034)
/*
 * Chip Enable Reg NAND_CHIPEN
 */
#define NAND_CHIPEN	(PKUNITY_NAND_BASE + 0x0038)
/*
 * Address Reg NAND_ADDR
 */
#define NAND_ADDR	(PKUNITY_NAND_BASE + 0x003C)

/*
 * Command bits NAND_CMD_CMD_MASK
 */
#define NAND_CMD_CMD_MASK		FMASK(4, 4)
#define NAND_CMD_CMD_READPAGE		FIELD(0x0, 4, 4)
#define NAND_CMD_CMD_ERASEBLOCK		FIELD(0x6, 4, 4)
#define NAND_CMD_CMD_READSTATUS		FIELD(0x7, 4, 4)
#define NAND_CMD_CMD_WRITEPAGE		FIELD(0x8, 4, 4)
#define NAND_CMD_CMD_READID		FIELD(0x9, 4, 4)
#define NAND_CMD_CMD_RESET		FIELD(0xf, 4, 4)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * PKUnity Universal Asynchronous Receiver/Transmitter (UART) Registers
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * PKUNITY Power Manager (PM) Registers
 */
/*
 * PM Control Reg PM_PMCR
 */
#define PM_PMCR                 (PKUNITY_PM_BASE + 0x0000)
/*
 * PM General Conf. Reg PM_PGCR
 */
#define PM_PGCR                 (PKUNITY_PM_BASE + 0x0004)
/*
 * PM PLL Conf. Reg PM_PPCR
 */
#define PM_PPCR                 (PKUNITY_PM_BASE + 0x0008)
/*
 * PM Wakeup Enable Reg PM_PWER
 */
#define PM_PWER                 (PKUNITY_PM_BASE + 0x000C)
/*
 * PM GPIO Sleep Status Reg PM_PGSR
 */
#define PM_PGSR                 (PKUNITY_PM_BASE + 0x0010)
/*
 * PM Clock Gate Reg PM_PCGR
 */
#define PM_PCGR                 (PKUNITY_PM_BASE + 0x0014)
/*
 * PM SYS PLL Conf. Reg PM_PLLSYSCFG
 */
#define PM_PLLSYSCFG            (PKUNITY_PM_BASE + 0x0018)
/*
 * PM DDR PLL Conf. Reg PM_PLLDDRCFG
 */
#define PM_PLLDDRCFG            (PKUNITY_PM_BASE + 0x001C)
/*
 * PM VGA PLL Conf. Reg PM_PLLVGACFG
 */
#define PM_PLLVGACFG            (PKUNITY_PM_BASE + 0x0020)
/*
 * PM Div Conf. Reg PM_DIVCFG
 */
#define PM_DIVCFG               (PKUNITY_PM_BASE + 0x0024)
/*
 * PM SYS PLL Status Reg PM_PLLSYSSTATUS
 */
#define PM_PLLSYSSTATUS         (PKUNITY_PM_BASE + 0x0028)
/*
 * PM DDR PLL Status Reg PM_PLLDDRSTATUS
 */
#define PM_PLLDDRSTATUS         (PKUNITY_PM_BASE + 0x002C)
/*
 * PM VGA PLL Status Reg PM_PLLVGASTATUS
 */
#define PM_PLLVGASTATUS         (PKUNITY_PM_BASE + 0x0030)
/*
 * PM Div Status Reg PM_DIVSTATUS
 */
#define PM_DIVSTATUS            (PKUNITY_PM_BASE + 0x0034)
/*
 * PM Software Reset Reg PM_SWRESET
 */
#define PM_SWRESET              (PKUNITY_PM_BASE + 0x0038)
/*
 * PM DDR2 PAD Start Reg PM_DDR2START
 */
#define PM_DDR2START            (PKUNITY_PM_BASE + 0x003C)
/*
 * PM DDR2 PAD Status Reg PM_DDR2CAL0
 */
#define PM_DDR2CAL0             (PKUNITY_PM_BASE + 0x0040)
/*
 * PM PLL DFC Done Reg PM_PLLDFCDONE
 */
#define PM_PLLDFCDONE           (PKUNITY_PM_BASE + 0x0044)

#define PM_PMCR_SFB             FIELD(1, 1, 0)
#define PM_PMCR_IFB             FIELD(1, 1, 1)
#define PM_PMCR_CFBSYS          FIELD(1, 1, 2)
#define PM_PMCR_CFBDDR          FIELD(1, 1, 3)
#define PM_PMCR_CFBVGA          FIELD(1, 1, 4)
#define PM_PMCR_CFBDIVBCLK      FIELD(1, 1, 5)

/*
 * GPIO 8~27 wake-up enable PM_PWER_GPIOHIGH
 */
#define PM_PWER_GPIOHIGH        FIELD(1, 1, 8)
/*
 * RTC alarm wake-up enable PM_PWER_RTC
 */
#define PM_PWER_RTC             FIELD(1, 1, 31)

#define PM_PCGR_BCLK64DDR	FIELD(1, 1, 0)
#define PM_PCGR_BCLK64VGA	FIELD(1, 1, 1)
#define PM_PCGR_BCLKDDR		FIELD(1, 1, 2)
#define PM_PCGR_BCLKPCI		FIELD(1, 1, 4)
#define PM_PCGR_BCLKDMAC	FIELD(1, 1, 5)
#define PM_PCGR_BCLKUMAL	FIELD(1, 1, 6)
#define PM_PCGR_BCLKUSB		FIELD(1, 1, 7)
#define PM_PCGR_BCLKMME		FIELD(1, 1, 10)
#define PM_PCGR_BCLKNAND	FIELD(1, 1, 11)
#define PM_PCGR_BCLKH264E	FIELD(1, 1, 12)
#define PM_PCGR_BCLKVGA		FIELD(1, 1, 13)
#define PM_PCGR_BCLKH264D	FIELD(1, 1, 14)
#define PM_PCGR_VECLK		FIELD(1, 1, 15)
#define PM_PCGR_HECLK		FIELD(1, 1, 16)
#define PM_PCGR_HDCLK		FIELD(1, 1, 17)
#define PM_PCGR_NANDCLK		FIELD(1, 1, 18)
#define PM_PCGR_GECLK		FIELD(1, 1, 19)
#define PM_PCGR_VGACLK          FIELD(1, 1, 20)
#define PM_PCGR_PCICLK		FIELD(1, 1, 21)
#define PM_PCGR_SATACLK		FIELD(1, 1, 25)

/*
 * [23:20]PM_DIVCFG_VGACLK(v)
 */
#define PM_DIVCFG_VGACLK_MASK   FMASK(4, 20)
#define PM_DIVCFG_VGACLK(v)	FIELD((v), 4, 20)

#define PM_SWRESET_USB          FIELD(1, 1, 6)
#define PM_SWRESET_VGADIV       FIELD(1, 1, 26)
#define PM_SWRESET_GEDIV        FIELD(1, 1, 27)

#define PM_PLLDFCDONE_SYSDFC    FIELD(1, 1, 0)
#define PM_PLLDFCDONE_DDRDFC    FIELD(1, 1, 1)
#define PM_PLLDFCDONE_VGADFC    FIELD(1, 1, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * PKUnity General-Purpose Input/Output (GPIO) Registers
 */

/*
 * Voltage Status Reg GPIO_GPLR.
 */
#define GPIO_GPLR	(PKUNITY_GPIO_BASE + 0x0000)
/*
 * Pin Direction Reg GPIO_GPDR.
 */
#define GPIO_GPDR	(PKUNITY_GPIO_BASE + 0x0004)
/*
 * Output Pin Set Reg GPIO_GPSR.
 */
#define GPIO_GPSR	(PKUNITY_GPIO_BASE + 0x0008)
/*
 * Output Pin Clear Reg GPIO_GPCR.
 */
#define GPIO_GPCR	(PKUNITY_GPIO_BASE + 0x000C)
/*
 * Raise Edge Detect Reg GPIO_GRER.
 */
#define GPIO_GRER	(PKUNITY_GPIO_BASE + 0x0010)
/*
 * Fall Edge Detect Reg GPIO_GFER.
 */
#define GPIO_GFER	(PKUNITY_GPIO_BASE + 0x0014)
/*
 * Edge Status Reg GPIO_GEDR.
 */
#define GPIO_GEDR	(PKUNITY_GPIO_BASE + 0x0018)
/*
 * Sepcial Voltage Detect Reg GPIO_GPIR.
 */
#define GPIO_GPIR	(PKUNITY_GPIO_BASE + 0x0020)

#define GPIO_MIN	(0)
#define GPIO_MAX	(27)

#define GPIO_GPIO(Nb)	(0x00000001 << (Nb))	/* GPIO [0..27] */
#define GPIO_GPIO0	GPIO_GPIO(0)	/* GPIO  [0] */
#define GPIO_GPIO1	GPIO_GPIO(1)	/* GPIO  [1] */
#define GPIO_GPIO2	GPIO_GPIO(2)	/* GPIO  [2] */
#define GPIO_GPIO3	GPIO_GPIO(3)	/* GPIO  [3] */
#define GPIO_GPIO4	GPIO_GPIO(4)	/* GPIO  [4] */
#define GPIO_GPIO5	GPIO_GPIO(5)	/* GPIO  [5] */
#define GPIO_GPIO6	GPIO_GPIO(6)	/* GPIO  [6] */
#define GPIO_GPIO7	GPIO_GPIO(7)	/* GPIO  [7] */
#define GPIO_GPIO8	GPIO_GPIO(8)	/* GPIO  [8] */
#define GPIO_GPIO9	GPIO_GPIO(9)	/* GPIO  [9] */
#define GPIO_GPIO10	GPIO_GPIO(10)	/* GPIO [10] */
#define GPIO_GPIO11	GPIO_GPIO(11)	/* GPIO [11] */
#define GPIO_GPIO12	GPIO_GPIO(12)	/* GPIO [12] */
#define GPIO_GPIO13	GPIO_GPIO(13)	/* GPIO [13] */
#define GPIO_GPIO14	GPIO_GPIO(14)	/* GPIO [14] */
#define GPIO_GPIO15	GPIO_GPIO(15)	/* GPIO [15] */
#define GPIO_GPIO16	GPIO_GPIO(16)	/* GPIO [16] */
#define GPIO_GPIO17	GPIO_GPIO(17)	/* GPIO [17] */
#define GPIO_GPIO18	GPIO_GPIO(18)	/* GPIO [18] */
#define GPIO_GPIO19	GPIO_GPIO(19)	/* GPIO [19] */
#define GPIO_GPIO20	GPIO_GPIO(20)	/* GPIO [20] */
#define GPIO_GPIO21	GPIO_GPIO(21)	/* GPIO [21] */
#define GPIO_GPIO22	GPIO_GPIO(22)	/* GPIO [22] */
#define GPIO_GPIO23	GPIO_GPIO(23)	/* GPIO [23] */
#define GPIO_GPIO24	GPIO_GPIO(24)	/* GPIO [24] */
#define GPIO_GPIO25	GPIO_GPIO(25)	/* GPIO [25] */
#define GPIO_GPIO26	GPIO_GPIO(26)	/* GPIO [26] */
#define GPIO_GPIO27	GPIO_GPIO(27)	/* GPIO [27] */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*
 * linux/arch/unicore/include/mach/pm.h
 *
 * Code specific to PKUnity SoC and UniCore ISA
 *
 * Copyright (C) 2001-2010 GUAN Xue-tao
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __PUV3_PM_H__
#define __PUV3_PM_H__

#include <linux/suspend.h>

struct puv3_cpu_pm_fns {
	int	save_count;
	void	(*save)(unsigned long *);
	void	(*restore)(unsigned long *);
	int	(*valid)(suspend_state_t state);
	void	(*enter)(suspend_state_t state);
	int	(*prepare)(void);
	void	(*finish)(void);
};

extern struct puv3_cpu_pm_fns *puv3_cpu_pm_fns;

/* sleep.S */
extern void puv3_cpu_suspend(unsigned int);

extern void puv3_cpu_resume(void);

extern int puv3_pm_enter(suspend_state_t state);

/* Defined in hibernate_asm.S */
extern int restore_image(pgd_t *resume_pg_dir, struct pbe *restore_pblist);

extern struct pbe *restore_pblist;
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #
# Makefile for the linux unicore-specific parts of the memory manager.
#

obj-y				:= extable.o fault.o init.o pgd.o mmu.o
obj-y				+= flush.o ioremap.o

obj-$(CONFIG_SWIOTLB)		+= dma-swiotlb.o

obj-$(CONFIG_MODULES)		+= proc-syms.o

obj-$(CONFIG_ALIGNMENT_TRAP)	+= alignment.o

obj-$(CONFIG_CPU_UCV2)		+= cache-ucv2.o tlb-ucv2.o proc-ucv2.o

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       comment "Processor Type"

# Select CPU types depending on the architecture selected.  This selects
# which CPUs we support in the kernel image, and the compiler instruction
# optimiser behaviour.

config CPU_UCV2
	def_bool y

comment "Processor Features"

config CPU_ICACHE_DISABLE
	bool "Disable I-Cache (I-bit)"
	help
	  Say Y here to disable the processor instruction cache. Unless
	  you have a reason not to or are unsure, say N.

config CPU_DCACHE_DISABLE
	bool "Disable D-Cache (D-bit)"
	help
	  Say Y here to disable the processor data cache. Unless
	  you have a reason not to or are unsure, say N.

config CPU_DCACHE_WRITETHROUGH
	bool "Force write through D-cache"
	help
	  Say Y here to use the data cache in writethrough mode. Unless you
	  specifically require this or are unsure, say N.

config CPU_DCACHE_LINE_DISABLE
	bool "Disable D-cache line ops"
	default y
	help
	  Say Y here to disable the data cache line operations.

config CPU_TLB_SINGLE_ENTRY_DISABLE
	bool "Disable TLB single entry ops"
	default y
	help
	  Say Y here to disable the TLB single entry operations.

config SWIOTLB
	def_bool y

config IOMMU_HELPER
	def_bool SWIOTLB

config NEED_SG_DMA_LENGTH
	def_bool SWIOTLB

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #
# arch/unicore32/boot/Makefile
#
# This file is included by the global makefile so that you can add your own
# architecture-specific flags and dependencies.
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 2001~2010 GUAN Xue-tao
#

targets := Image zImage uImage

$(obj)/Image: vmlinux FORCE
	$(call if_changed,objcopy)
	@echo '  Kernel: $@ is ready'

$(obj)/compressed/vmlinux: $(obj)/Image FORCE
	$(Q)$(MAKE) $(build)=$(obj)/compressed $@

$(obj)/zImage: $(obj)/compressed/vmlinux FORCE
	$(call if_changed,objcopy)
	@echo '  Kernel: $@ is ready'

UIMAGE_ARCH = unicore
UIMAGE_LOADADDR = 0x0

$(obj)/uImage: $(obj)/zImage FORCE
	$(call if_changed,uimage)
	@echo '  Image $@ is ready'

PHONY += initrd
initrd:
	@test "$(INITRD)" != "" || \
	(echo You must specify INITRD; exit -1)

subdir- := compressed
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             #
# linux/arch/unicore32/boot/compressed/Makefile
#
# create a compressed vmlinuz image from the original vmlinux
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 2001~2010 GUAN Xue-tao
#

ccflags-y	:= -fpic -fno-builtin
asflags-y	:= -Wa,-march=all

OBJS		:= misc.o

# font.c and font.o
CFLAGS_font.o	:= -Dstatic=
$(obj)/font.c: $(srctree)/lib/fonts/font_8x8.c
	$(call cmd,shipped)

# piggy.S and piggy.o
suffix_$(CONFIG_KERNEL_GZIP)	:= gzip
suffix_$(CONFIG_KERNEL_BZIP2)	:= bz2
suffix_$(CONFIG_KERNEL_LZO)	:= lzo
suffix_$(CONFIG_KERNEL_LZMA)	:= lzma

$(obj)/piggy.$(suffix_y): $(obj)/../Image FORCE
	$(call if_changed,$(suffix_y))

SEDFLAGS_piggy	= s/DECOMP_SUFFIX/$(suffix_y)/
$(obj)/piggy.S: $(obj)/piggy.S.in
	@sed "$(SEDFLAGS_piggy)" < $< > $@

$(obj)/piggy.o:  $(obj)/piggy.$(suffix_y) $(obj)/piggy.S FORCE

targets		:= vmlinux vmlinux.lds font.o font.c head.o misc.o \
			piggy.$(suffix_y) piggy.o piggy.S \

# Make sure files are removed during clean
extra-y		+= piggy.gzip piggy.bz2 piggy.lzo piggy.lzma

# ?
LDFLAGS_vmlinux += -p
# Report unresolved symbol references
LDFLAGS_vmlinux += --no-undefined
# Delete all temporary local symbols
LDFLAGS_vmlinux += -X
# Next argument is a linker script
LDFLAGS_vmlinux += -T

# For uidivmod
$(obj)/vmlinux: $(obj)/vmlinux.lds $(obj)/head.o $(obj)/piggy.o \
		$(obj)/misc.o FORCE
	$(call if_changed,ld)

# We now have a PIC decompressor implementation.  Decompressors running
# from RAM should not define ZTEXTADDR.  Decompressors running directly
# from ROM or Flash must define ZTEXTADDR (preferably via the config)
ZTEXTADDR	:= 0x03000000
ZBSSADDR	:= ALIGN(4)

SEDFLAGS_lds	= s/TEXT_START/$(ZTEXTADDR)/;s/BSS_START/$(ZBSSADDR)/
$(obj)/vmlinux.lds: $(obj)/vmlinux.lds.in arch/unicore32/boot/Makefile $(KCONFIG_CONFIG)
	@sed "$(SEDFLAGS_lds)" < $< > $@

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #
# Makefile for alpha-specific library files..
#

asflags-y := $(KBUILD_CFLAGS)
ccflags-y := -Werror

# Many of these routines have implementations tuned for ev6.
# Choose them iff we're targeting ev6 specifically.
ev6-$(CONFIG_ALPHA_EV6) := ev6-

# Several make use of the cttz instruction introduced in ev67.
ev67-$(CONFIG_ALPHA_EV67) := ev67-

lib-y =	__divqu.o __remqu.o __divlu.o __remlu.o \
	udelay.o \
	$(ev6-y)memset.o \
	$(ev6-y)memcpy.o \
	memmove.o \
	checksum.o \
	csum_partial_copy.o \
	$(ev67-y)strlen.o \
	$(ev67-y)strcat.o \
	strcpy.o \
	$(ev67-y)strncat.o \
	strncpy.o \
	$(ev6-y)stxcpy.o \
	$(ev6-y)stxncpy.o \
	$(ev67-y)strchr.o \
	$(ev67-y)strrchr.o \
	$(ev6-y)memchr.o \
	$(ev6-y)copy_user.o \
	$(ev6-y)clear_user.o \
	$(ev6-y)csum_ipv6_magic.o \
	$(ev6-y)clear_page.o \
	$(ev6-y)copy_page.o \
	fpreg.o \
	callback_srm.o srm_puts.o srm_printk.o \
	fls.o

lib-$(CONFIG_SMP) += dec_and_lock.o

# The division routines are built from single source, with different defines.
AFLAGS___divqu.o = -DDIV
AFLAGS___remqu.o =       -DREM
AFLAGS___divlu.o = -DDIV       -DINTSIZE
AFLAGS___remlu.o =       -DREM -DINTSIZE

$(obj)/__divqu.o: $(obj)/$(ev6-y)divide.S
	$(cmd_as_o_S)
$(obj)/__remqu.o: $(obj)/$(ev6-y)divide.S
	$(cmd_as_o_S)
$(obj)/__divlu.o: $(obj)/$(ev6-y)divide.S
	$(cmd_as_o_S)
$(obj)/__remlu.o: $(obj)/$(ev6-y)divide.S
	$(cmd_as_o_S)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #
# Makefile for the linux kernel.
#

extra-y		:= head.o vmlinux.lds
asflags-y	:= $(KBUILD_CFLAGS)
ccflags-y	:= -Wno-sign-compare

obj-y    := entry.o traps.o process.o osf_sys.o irq.o \
	    irq_alpha.o signal.o setup.o ptrace.o time.o \
	    systbls.o err_common.o io.o

obj-$(CONFIG_VGA_HOSE)	+= console.o
obj-$(CONFIG_SMP)	+= smp.o
obj-$(CONFIG_PCI)	+= pci.o pci_iommu.o pci-sysfs.o
obj-$(CONFIG_SRM_ENV)	+= srm_env.o
obj-$(CONFIG_MODULES)	+= module.o
obj-$(CONFIG_PERF_EVENTS) += perf_event.o
obj-$(CONFIG_RTC_DRV_ALPHA) += rtc.o
obj-$(CONFIG_AUDIT)	+= audit.o

ifdef CONFIG_ALPHA_GENERIC

obj-y 	 += core_apecs.o core_cia.o core_irongate.o core_lca.o \
	    core_mcpcia.o core_polaris.o core_t2.o \
	    core_tsunami.o

obj-y	 += sys_alcor.o sys_cabriolet.o sys_dp264.o sys_eb64p.o sys_eiger.o \
	    sys_jensen.o sys_miata.o sys_mikasa.o sys_nautilus.o \
	    sys_noritake.o sys_rawhide.o sys_ruffian.o sys_rx164.o \
	    sys_sable.o sys_sio.o sys_sx164.o sys_takara.o

ifndef CONFIG_ALPHA_LEGACY_START_ADDRESS
obj-y	 += core_marvel.o core_titan.o core_wildfire.o
obj-y	 += sys_marvel.o sys_titan.o sys_wildfire.o
obj-y    += err_ev7.o err_titan.o err_marvel.o
endif

obj-y	 += irq_pyxis.o irq_i8259.o irq_srm.o
obj-y	 += err_ev6.o
obj-y	 += es1888.o smc37c669.o smc37c93x.o pc873xx.o gct.o
obj-y    += srmcons.o

else

# Misc support
obj-$(CONFIG_ALPHA_SRM)		+= srmcons.o

ifdef CONFIG_BINFMT_AOUT
obj-y	+= binfmt_loader.o
endif

# Core logic support
obj-$(CONFIG_ALPHA_APECS)	+= core_apecs.o
obj-$(CONFIG_ALPHA_CIA)		+= core_cia.o
obj-$(CONFIG_ALPHA_IRONGATE)	+= core_irongate.o
obj-$(CONFIG_ALPHA_LCA)		+= core_lca.o
obj-$(CONFIG_ALPHA_MARVEL)	+= core_marvel.o gct.o
obj-$(CONFIG_ALPHA_MCPCIA)	+= core_mcpcia.o
obj-$(CONFIG_ALPHA_POLARIS)	+= core_polaris.o
obj-$(CONFIG_ALPHA_T2)		+= core_t2.o
obj-$(CONFIG_ALPHA_TSUNAMI)	+= core_tsunami.o
obj-$(CONFIG_ALPHA_TITAN)	+= core_titan.o
obj-$(CONFIG_ALPHA_WILDFIRE)	+= core_wildfire.o

# Board support
obj-$(CONFIG_ALPHA_ALCOR)	+= sys_alcor.o irq_i8259.o irq_srm.o
obj-$(CONFIG_ALPHA_CABRIOLET)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \
				   pc873xx.o
obj-$(CONFIG_ALPHA_EB164)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \
				   pc873xx.o
obj-$(CONFIG_ALPHA_EB66P)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \
				   pc873xx.o
obj-$(CONFIG_ALPHA_LX164)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \
				   smc37c93x.o
obj-$(CONFIG_ALPHA_PC164)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \
				   smc37c93x.o
obj-$(CONFIG_ALPHA_DP264)	+= sys_dp264.o irq_i8259.o es1888.o smc37c669.o
obj-$(CONFIG_ALPHA_SHARK)	+= sys_dp264.o irq_i8259.o es1888.o smc37c669.o
obj-$(CONFIG_ALPHA_TITAN)	+= sys_titan.o irq_i8259.o smc37c669.o
obj-$(CONFIG_ALPHA_EB64P)	+= sys_eb64p.o irq_i8259.o
obj-$(CONFIG_ALPHA_EB66)	+= sys_eb64p.o irq_i8259.o
obj-$(CONFIG_ALPHA_EIGER)	+= sys_eiger.o irq_i8259.o
obj-$(CONFIG_ALPHA_JENSEN)	+= sys_jensen.o pci-noop.o irq_i8259.o
obj-$(CONFIG_ALPHA_MARVEL)	+= sys_marvel.o 
obj-$(CONFIG_ALPHA_MIATA)	+= sys_miata.o irq_pyxis.o irq_i8259.o \
				   es1888.o smc37c669.o
obj-$(CONFIG_ALPHA_MIKASA)	+= sys_mikasa.o irq_i8259.o irq_srm.o
obj-$(CONFIG_ALPHA_NAUTILUS)	+= sys_nautilus.o irq_i8259.o irq_srm.o
obj-$(CONFIG_ALPHA_NORITAKE)	+= sys_noritake.o irq_i8259.o
obj-$(CONFIG_ALPHA_RAWHIDE)	+= sys_rawhide.o irq_i8259.o
obj-$(CONFIG_ALPHA_RUFFIAN)	+= sys_ruffian.o irq_pyxis.o irq_i8259.o
obj-$(CONFIG_ALPHA_RX164)	+= sys_rx164.o irq_i8259.o
obj-$(CONFIG_ALPHA_SABLE)	+= sys_sable.o
obj-$(CONFIG_ALPHA_LYNX)	+= sys_sable.o
obj-$(CONFIG_ALPHA_BOOK1)	+= sys_sio.o irq_i8259.o irq_srm.o pc873xx.o
obj-$(CONFIG_ALPHA_AVANTI)	+= sys_sio.o irq_i8259.o irq_srm.o pc873xx.o
obj-$(CONFIG_ALPHA_NONAME)	+= sys_sio.o irq_i8259.o irq_srm.o pc873xx.o
obj-$(CONFIG_ALPHA_P2K)		+= sys_sio.o irq_i8259.o irq_srm.o pc873xx.o
obj-$(CONFIG_ALPHA_XL)		+= sys_sio.o irq_i8259.o irq_srm.o pc873xx.o
obj-$(CONFIG_ALPHA_SX164)	+= sys_sx164.o irq_pyxis.o irq_i8259.o \
				   irq_srm.o smc37c669.o
obj-$(CONFIG_ALPHA_TAKARA)	+= sys_takara.o irq_i8259.o pc873xx.o
obj-$(CONFIG_ALPHA_WILDFIRE)	+= sys_wildfire.o irq_i8259.o

# Error support
obj-$(CONFIG_ALPHA_MARVEL)	+= err_ev7.o err_marvel.o
obj-$(CONFIG_ALPHA_NAUTILUS)	+= err_ev6.o
obj-$(CONFIG_ALPHA_TITAN)	+= err_ev6.o err_titan.o

endif # GENERIC
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               menu "Kernel hacking"

source "lib/Kconfig.debug"

config EARLY_PRINTK
	bool
	depends on ALPHA_GENERIC || ALPHA_SRM
	default y

config ALPHA_LEGACY_START_ADDRESS
	bool "Legacy kernel start address"
	depends on ALPHA_GENERIC
	default n
	---help---
	  The 2.4 kernel changed the kernel start address from 0x310000
	  to 0x810000 to make room for the Wildfire's larger SRM console.
	  Recent consoles on Titan and Marvel machines also require the
	  extra room.

	  If you're using aboot 0.7 or later, the bootloader will examine the
	  ELF headers to determine where to transfer control. Unfortunately,
	  most older bootloaders -- APB or MILO -- hardcoded the kernel start
	  address rather than examining the ELF headers, and the result is a
	  hard lockup.

	  Say Y if you have a broken bootloader.  Say N if you do not, or if
	  you wish to run on Wildfire, Titan, or Marvel.

config ALPHA_LEGACY_START_ADDRESS
	bool
	depends on !ALPHA_GENERIC && !ALPHA_TITAN && !ALPHA_MARVEL && !ALPHA_WILDFIRE
	default y

config MATHEMU
	tristate "Kernel FP software completion" if DEBUG_KERNEL && !SMP
	default y if !DEBUG_KERNEL || SMP
	help
	  This option is required for IEEE compliant floating point arithmetic
	  on the Alpha. The only time you would ever not say Y is to say M in
	  order to debug the code. Say Y unless you know what you are doing.

endmenu
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #
# alpha/Makefile
#
# This file is subject to the terms and conditions of the GNU General Public
# License.  See the file "COPYING" in the main directory of this archive
# for more details.
#
# Copyright (C) 1994 by Linus Torvalds
#

NM := $(NM) -B

LDFLAGS_vmlinux	:= -static -N #-relax
CHECKFLAGS	+= -D__alpha__ -m64
cflags-y	:= -pipe -mno-fp-regs -ffixed-8
cflags-y	+= $(call cc-option, -fno-jump-tables)

cpuflags-$(CONFIG_ALPHA_EV4)		:= -mcpu=ev4
cpuflags-$(CONFIG_ALPHA_EV5)		:= -mcpu=ev5
cpuflags-$(CONFIG_ALPHA_EV56)		:= -mcpu=ev56
cpuflags-$(CONFIG_ALPHA_POLARIS)	:= -mcpu=pca56
cpuflags-$(CONFIG_ALPHA_SX164)		:= -mcpu=pca56
cpuflags-$(CONFIG_ALPHA_EV6)		:= -mcpu=ev6
cpuflags-$(CONFIG_ALPHA_EV67)		:= -mcpu=ev67
# If GENERIC, make sure to turn off any instruction set extensions that
# the host compiler might have on by default.  Given that EV4 and EV5
# have the same instruction set, prefer EV5 because an EV5 schedule is
# more likely to keep an EV4 processor busy than vice-versa.
cpuflags-$(CONFIG_ALPHA_GENERIC)	:= -mcpu=ev5

cflags-y				+= $(cpuflags-y)


# For TSUNAMI, we must have the assembler not emulate our instructions.
# The same is true for IRONGATE, POLARIS, PYXIS.
# BWX is most important, but we don't really want any emulation ever.
KBUILD_CFLAGS += $(cflags-y) -Wa,-mev6

head-y := arch/alpha/kernel/head.o

core-y				+= arch/alpha/kernel/ arch/alpha/mm/
core-$(CONFIG_MATHEMU)		+= arch/alpha/math-emu/
drivers-$(CONFIG_OPROFILE)	+= arch/alpha/oprofile/
libs-y				+= arch/alpha/lib/

# export what is needed by arch/alpha/boot/Makefile
LIBS_Y := $(patsubst %/, %/lib.a, $(libs-y))
export LIBS_Y

boot := arch/alpha/boot

#Default target when executing make with no arguments
all boot: $(boot)/vmlinux.gz

$(boot)/vmlinux.gz: vmlinux
	$(Q)$(MAKE) $(build)=$(boot) $@

bootimage bootpfile bootpzfile: vmlinux
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

archclean:
	$(Q)$(MAKE) $(clean)=$(boot)

define archhelp
  echo '* boot		- Compressed kernel image (arch/alpha/boot/vmlinux.gz)'
  echo '  bootimage	- SRM bootable image (arch/alpha/boot/bootimage)'
  echo '  bootpfile	- BOOTP bootable image (arch/alpha/boot/bootpfile)'
  echo '  bootpzfile	- compressed kernel BOOTP image (arch/alpha/boot/bootpzfile)'
endef
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           config ALPHA
	bool
	default y
	select ARCH_MIGHT_HAVE_PC_PARPORT
	select ARCH_MIGHT_HAVE_PC_SERIO
	select ARCH_USE_CMPXCHG_LOCKREF
	select HAVE_AOUT
	select HAVE_IDE
	select HAVE_OPROFILE
	select HAVE_PCSPKR_PLATFORM
	select HAVE_PERF_EVENTS
	select VIRT_TO_BUS
	select GENERIC_IRQ_PROBE
	select AUTO_IRQ_AFFINITY if SMP
	select GENERIC_IRQ_SHOW
	select ARCH_WANT_IPC_PARSE_VERSION
	select ARCH_HAVE_NMI_SAFE_CMPXCHG
	select AUDIT_ARCH
	select GENERIC_CLOCKEVENTS
	select GENERIC_SMP_IDLE_THREAD
	select GENERIC_STRNCPY_FROM_USER
	select GENERIC_STRNLEN_USER
	select HAVE_ARCH_AUDITSYSCALL
	select HAVE_MOD_ARCH_SPECIFIC
	select MODULES_USE_ELF_RELA
	select ODD_RT_SIGACTION
	select OLD_SIGSUSPEND
	select CPU_NO_EFFICIENT_FFS if !ALPHA_EV67
	help
	  The Alpha is a 64-bit general-purpose processor designed and
	  marketed by the Digital Equipment Corporation of blessed memory,
	  now Hewlett-Packard.  The Alpha Linux project has a home page at
	  <http://www.alphalinux.org/>.

config 64BIT
	def_bool y

config MMU
	bool
	default y

config RWSEM_GENERIC_SPINLOCK
	bool

config RWSEM_XCHGADD_ALGORITHM
	bool
	default y

config ARCH_HAS_ILOG2_U32
	bool
	default n

config ARCH_HAS_ILOG2_U64
	bool
	default n

config GENERIC_CALIBRATE_DELAY
	bool
	default y

config ZONE_DMA
	bool
	default y

config ARCH_DMA_ADDR_T_64BIT
	def_bool y

config NEED_DMA_MAP_STATE
       def_bool y

config NEED_SG_DMA_LENGTH
	def_bool y

config GENERIC_ISA_DMA
	bool
	default y

config PGTABLE_LEVELS
	int
	default 3

source "init/Kconfig"
source "kernel/Kconfig.freezer"

config AUDIT_ARCH
	bool

menu "System setup"

choice
	prompt "Alpha system type"
	default ALPHA_GENERIC
	---help---
	  This is the system type of your hardware.  A "generic" kernel will
	  run on any supported Alpha system. However, if you configure a
	  kernel for your specific system, it will be faster and smaller.

	  To find out what type of Alpha system you have, you may want to
	  check out the Linux/Alpha FAQ, accessible on the WWW from
	  <http://www.alphalinux.org/>. In summary:

	  Alcor/Alpha-XLT     AS 600, AS 500, XL-300, XL-366
	  Alpha-XL            XL-233, XL-266
	  AlphaBook1          Alpha laptop
	  Avanti              AS 200, AS 205, AS 250, AS 255, AS 300, AS 400
	  Cabriolet           AlphaPC64, AlphaPCI64
	  DP264               DP264 / DS20 / ES40 / DS10 / DS10L
	  EB164               EB164 21164 evaluation board
	  EB64+               EB64+ 21064 evaluation board
	  EB66                EB66 21066 evaluation board
	  EB66+               EB66+ 21066 evaluation board
	  Jensen              DECpc 150, DEC 2000 models 300, 500
	  LX164               AlphaPC164-LX
	  Lynx                AS 2100A
	  Miata               Personal Workstation 433/500/600 a/au
	  Marvel              AlphaServer ES47 / ES80 / GS1280
	  Mikasa              AS 1000
	  Noname              AXPpci33, UDB (Multia)
	  Noritake            AS 1000A, AS 600A, AS 800
	  PC164               AlphaPC164
	  Rawhide             AS 1200, AS 4000, AS 4100
	  Ruffian             RPX164-2, AlphaPC164-UX, AlphaPC164-BX
	  SX164               AlphaPC164-SX
	  Sable               AS 2000, AS 2100
	  Shark               DS 20L
	  Takara              Takara (OEM)
	  Titan               AlphaServer ES45 / DS25 / DS15
	  Wildfire            AlphaServer GS 40/80/160/320

	  If you don't know what to do, choose "generic".

config ALPHA_GENERIC
	bool "Generic"
	depends on TTY
	help
	  A generic kernel will run on all supported Alpha hardware.

config ALPHA_ALCOR
	bool "Alcor/Alpha-XLT"
	help
	  For systems using the Digital ALCOR chipset: 5 chips (4, 64-bit data
	  slices (Data Switch, DSW) - 208-pin PQFP and 1 control (Control, I/O
	  Address, CIA) - a 383 pin plastic PGA).  It provides a DRAM
	  controller (256-bit memory bus) and a PCI interface.  It also does
	  all the work required to support an external Bcache and to maintain
	  memory coherence when a PCI device DMAs into (or out of) memory.

config ALPHA_XL
	bool "Alpha-XL"
	help
	  XL-233 and XL-266-based Alpha systems.

config ALPHA_BOOK1
	bool "AlphaBook1"
	help
	  Dec AlphaBook1/Burns Alpha-based laptops.

config ALPHA_AVANTI_CH
	bool "Avanti"

config ALPHA_CABRIOLET
	bool "Cabriolet"
	help
	  Cabriolet AlphaPC64, AlphaPCI64 systems.  Derived from EB64+ but now
	  baby-AT with Flash boot ROM, no on-board SCSI or Ethernet. 3 ISA
	  slots, 4 PCI slots (one pair are on a shared slot), uses plug-in
	  Bcache SIMMs.  Requires power supply with 3.3V output.

config ALPHA_DP264
	bool "DP264"
	help
	  Various 21264 systems with the tsunami core logic chipset.
	  API Networks: 264DP, UP2000(+), CS20;
	  Compaq: DS10(E,L), XP900, XP1000, DS20(E), ES40.

config ALPHA_EB164
	bool "EB164"
	help
	  EB164 21164 evaluation board from DEC.  Uses 21164 and ALCOR.  Has
	  ISA and PCI expansion (3 ISA slots, 2 64-bit PCI slots (one is
	  shared with an ISA slot) and 2 32-bit PCI slots.  Uses plus-in
	  Bcache SIMMs. I/O sub-system provides SuperI/O (2S, 1P, FD), KBD,
	  MOUSE (PS2 style), RTC/NVRAM.  Boot ROM is Flash.  PC-AT-sized
	  motherboard.  Requires power supply with 3.3V output.

config ALPHA_EB64P_CH
	bool "EB64+"

config ALPHA_EB66
	bool "EB66"
	help
	  A Digital DS group board.  Uses 21066 or 21066A.  I/O sub-system is
	  identical to EB64+.  Baby PC-AT size.  Runs from standard PC power
	  supply.  The EB66 schematic was published as a marketing poster
	  advertising the 21066 as "the first microprocessor in the world with
	  embedded PCI".

config ALPHA_EB66P
	bool "EB66+"
	help
	  Later variant of the EB66 board.

config ALPHA_EIGER
	bool "Eiger"
	help
	  Apparently an obscure OEM single-board computer based on the
	  Typhoon/Tsunami chipset family. Information on it is scanty.

config ALPHA_JENSEN
	bool "Jensen"
	help
	  DEC PC 150 AXP (aka Jensen): This is a very old Digital system - one
	  of the first-generation Alpha systems. A number of these systems
	  seem to be available on the second- hand market. The Jensen is a
	  floor-standing tower system which originally used a 150MHz 21064 It
	  used programmable logic to interface a 486 EISA I/O bridge to the
	  CPU.

config ALPHA_LX164
	bool "LX164"
	help
	  A technical overview of this board is available at
	  <http://www.unix-ag.org/Linux-Alpha/Architectures/LX164.html>.

config ALPHA_LYNX
	bool "Lynx"
	help
	  AlphaServer 2100A-based systems.

config ALPHA_MARVEL
	bool "Marvel"
	help
	  AlphaServer ES47 / ES80 / GS1280 based on EV7.

config ALPHA_MIATA
	bool "Miata"
	help
	  The Digital PersonalWorkStation (PWS 433a, 433au, 500a, 500au, 600a,
	  or 600au).

config ALPHA_MIKASA
	bool "Mikasa"
	help
	  AlphaServer 1000-based Alpha systems.

config ALPHA_NAUTILUS
	bool "Nautilus"
	help
	  Alpha systems based on the AMD 751 & ALI 1543C chipsets.

config ALPHA_NONAME_CH
	bool "Noname"

config ALPHA_NORITAKE
	bool "Noritake"
	help
	  AlphaServer 1000A, AlphaServer 600A, and AlphaServer 800-based
	  systems.

config ALPHA_PC164
	bool "PC164"

config ALPHA_P2K
	bool "Platform2000"

config ALPHA_RAWHIDE
	bool "Rawhide"
	help
	  AlphaServer 1200, AlphaServer 4000 and AlphaServer 4100 machines.
	  See HOWTO at
	  <http://www.alphalinux.org/docs/rawhide/4100_install.shtml>.

config ALPHA_RUFFIAN
	bool "Ruffian"
	help
	  Samsung APC164UX.  There is a page on known problems and workarounds
	  at <http://www.alphalinux.org/faq/FAQ-11.html>.

config ALPHA_RX164
	bool "RX164"

config ALPHA_SX164
	bool "SX164"

config ALPHA_SABLE
	bool "Sable"
	help
	  Digital AlphaServer 2000 and 2100-based systems.

config ALPHA_SHARK
	bool "Shark"

config ALPHA_TAKARA
	bool "Takara"
	help
	  Alpha 11164-based OEM single-board computer.

config ALPHA_TITAN
	bool "Titan"
	help
	  AlphaServer ES45/DS25 SMP based on EV68 and Titan chipset.

config ALPHA_WILDFIRE
	bool "Wildfire"
	help
	  AlphaServer GS 40/80/160/320 SMP based on the EV67 core.

endchoice

# clear all implied options (don't want default values for those):
# Most of these machines have ISA slots; not exactly sure which don't,
# and this doesn't activate hordes of code, so do it always.
config ISA
	bool
	default y
	help
	  Find out whether you have ISA slots on your motherboard.  ISA is the
	  name of a bus system, i.e. the way the CPU talks to the other stuff
	  inside your box.  Other bus systems are PCI, EISA, MicroChannel
	  (MCA) or VESA.  ISA is an older system, now being displaced by PCI;
	  newer boards don't support it.  If you have ISA, say Y, otherwise N.

config ISA_DMA_API
	bool
	default y

config PCI
	bool
	depends on !ALPHA_JENSEN
	select GENERIC_PCI_IOMAP
	default y
	help
	  Find out whether you have a PCI motherboard. PCI is the name of a
	  bus system, i.e. the way the CPU talks to the other stuff inside
	  your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
	  VESA. If you have PCI, say Y, otherwise N.

config PCI_DOMAINS
	bool
	default y

config PCI_SYSCALL
	def_bool PCI

config IOMMU_HELPER
	def_bool PCI

config ALPHA_NONAME
	bool
	depends on ALPHA_BOOK1 || ALPHA_NONAME_CH
	default y
	help
	  The AXPpci33 (aka NoName), is based on the EB66 (includes the Multia
	  UDB).  This design was produced by Digital's Technical OEM (TOEM)
	  group. It uses the 21066 processor running at 166MHz or 233MHz. It
	  is a baby-AT size, and runs from a standard PC power supply. It has
	  5 ISA slots and 3 PCI slots (one pair are a shared slot). There are
	  2 versions, with either PS/2 or large DIN connectors for the
	  keyboard.

config ALPHA_EV4
	bool
	depends on ALPHA_JENSEN || (ALPHA_SABLE && !ALPHA_GAMMA) || ALPHA_LYNX || ALPHA_NORITAKE && !ALPHA_PRIMO || ALPHA_MIKASA && !ALPHA_PRIMO || ALPHA_CABRIOLET || ALPHA_AVANTI_CH || ALPHA_EB64P_CH || ALPHA_XL || ALPHA_NONAME || ALPHA_EB66 || ALPHA_EB66P || ALPHA_P2K
	default y if !ALPHA_LYNX

config ALPHA_LCA
	bool
	depends on ALPHA_NONAME || ALPHA_EB66 || ALPHA_EB66P || ALPHA_P2K
	default y

config ALPHA_APECS
	bool
	depends on !ALPHA_PRIMO && (ALPHA_NORITAKE || ALPHA_MIKASA) || ALPHA_CABRIOLET || ALPHA_AVANTI_CH || ALPHA_EB64P_CH || ALPHA_XL
	default y

config ALPHA_EB64P
	bool
	depends on ALPHA_CABRIOLET || ALPHA_EB64P_CH
	default y
	help
	  Uses 21064 or 21064A and APECs.  Has ISA and PCI expansion (3 ISA,
	  2 PCI, one pair are on a shared slot). Supports 36-bit DRAM SIMs.
	  ISA bus generated by Intel SaturnI/O PCI-ISA bridge. On-board SCSI
	  (NCR 810 on PCI) Ethernet (Digital 21040), KBD, MOUSE (PS2 style),
	  SuperI/O (2S, 1P, FD), RTC/NVRAM. Boot ROM is EPROM.  PC-AT size.
	  Runs from standard PC power supply.

config ALPHA_EV5
	bool "EV5 CPU(s) (model 5/xxx)?" if ALPHA_LYNX
	default y if ALPHA_RX164 || ALPHA_RAWHIDE || ALPHA_MIATA || ALPHA_LX164 || ALPHA_SX164 || ALPHA_RUFFIAN || ALPHA_SABLE && ALPHA_GAMMA || ALPHA_NORITAKE && ALPHA_PRIMO || ALPHA_MIKASA && ALPHA_PRIMO || ALPHA_PC164 || ALPHA_TAKARA || ALPHA_EB164 || ALPHA_ALCOR

config ALPHA_EV4
	bool
	default y if ALPHA_LYNX && !ALPHA_EV5

config ALPHA_CIA
	bool
	depends on ALPHA_MIATA || ALPHA_LX164 || ALPHA_SX164 || ALPHA_RUFFIAN || ALPHA_NORITAKE && ALPHA_PRIMO || ALPHA_MIKASA && ALPHA_PRIMO || ALPHA_PC164 || ALPHA_TAKARA || ALPHA_EB164 || ALPHA_ALCOR
	default y

config ALPHA_EV56
	bool "EV56 CPU (speed >= 366MHz)?" if ALPHA_ALCOR
	default y if ALPHA_RX164 || ALPHA_MIATA || ALPHA_LX164 || ALPHA_SX164 || ALPHA_RUFFIAN || ALPHA_PC164 || ALPHA_TAKARA

config ALPHA_EV56
	prompt "EV56 CPU (speed >= 333MHz)?"
	depends on ALPHA_NORITAKE || ALPHA_PRIMO

config ALPHA_EV56
	prompt "EV56 CPU (speed >= 400MHz)?"
	depends on ALPHA_RAWHIDE

config ALPHA_PRIMO
	bool "EV5 CPU daughtercard (model 5/xxx)?"
	depends on ALPHA_NORITAKE || ALPHA_MIKASA
	help
	  Say Y if you have an AS 1000 5/xxx or an AS 1000A 5/xxx.

config ALPHA_GAMMA
	bool "EV5 CPU(s) (model 5/xxx)?"
	depends on ALPHA_SABLE
	help
	  Say Y if you have an AS 2000 5/xxx or an AS 2100 5/xxx.

config ALPHA_GAMMA
	bool
	depends on ALPHA_LYNX
	default y

config ALPHA_T2
	bool
	depends on ALPHA_SABLE || ALPHA_LYNX
	default y

config ALPHA_PYXIS
	bool
	depends on ALPHA_MIATA || ALPHA_LX164 || ALPHA_SX164 || ALPHA_RUFFIAN
	default y

config ALPHA_EV6
	bool
	depends on ALPHA_NAUTILUS || ALPHA_WILDFIRE || ALPHA_TITAN || ALPHA_SHARK || ALPHA_DP264 || ALPHA_EIGER || ALPHA_MARVEL
	default y

config ALPHA_TSUNAMI
	bool
	depends on ALPHA_SHARK || ALPHA_DP264 || ALPHA_EIGER
	default y

config ALPHA_EV67
	bool "EV67 (or later) CPU (speed > 600MHz)?" if ALPHA_DP264 || ALPHA_EIGER
	default y if ALPHA_NAUTILUS || ALPHA_WILDFIRE || ALPHA_TITAN || ALPHA_SHARK || ALPHA_MARVEL
	help
	  Is this a machine based on the EV67 core?  If in doubt, select N here
	  and the machine will be treated as an EV6.

config ALPHA_MCPCIA
	bool
	depends on ALPHA_RAWHIDE
	default y

config ALPHA_POLARIS
	bool
	depends on ALPHA_RX164
	default y

config ALPHA_IRONGATE
	bool
	depends on ALPHA_NAUTILUS
	default y

config GENERIC_HWEIGHT
	bool
	default y if !ALPHA_EV67

config ALPHA_AVANTI
	bool
	depends on ALPHA_XL || ALPHA_AVANTI_CH
	default y
	help
	  Avanti AS 200, AS 205, AS 250, AS 255, AS 300, and AS 400-based
	  Alphas. Info at
	  <http://www.unix-ag.org/Linux-Alpha/Architectures/Avanti.html>.

config ALPHA_BROKEN_IRQ_MASK
	bool
	depends on ALPHA_GENERIC || ALPHA_PC164
	default y

config VGA_HOSE
	bool
	depends on VGA_CONSOLE && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL || ALPHA_TSUNAMI)
	default y
	help
	  Support VGA on an arbitrary hose; needed for several platforms
	  which always have multiple hoses, and whose consoles support it.


config ALPHA_QEMU
	bool "Run under QEMU emulation"
	depends on !ALPHA_GENERIC
	---help---
	  Assume the presence of special features supported by QEMU PALcode
	  that reduce the overhead of system emulation.

	  Generic kernels will auto-detect QEMU.  But when building a
	  system-specific kernel, the assumption is that we want to
	  elimiate as many runtime tests as possible.

	  If unsure, say N.


config ALPHA_SRM
	bool "Use SRM as bootloader" if ALPHA_CABRIOLET || ALPHA_AVANTI_CH || ALPHA_EB64P || ALPHA_PC164 || ALPHA_TAKARA || ALPHA_EB164 || ALPHA_ALCOR || ALPHA_MIATA || ALPHA_LX164 || ALPHA_SX164 || ALPHA_NAUTILUS || ALPHA_NONAME
	depends on TTY
	default y if ALPHA_JENSEN || ALPHA_MIKASA || ALPHA_SABLE || ALPHA_LYNX || ALPHA_NORITAKE || ALPHA_DP264 || ALPHA_RAWHIDE || ALPHA_EIGER || ALPHA_WILDFIRE || ALPHA_TITAN || ALPHA_SHARK || ALPHA_MARVEL
	---help---
	  There are two different types of booting firmware on Alphas: SRM,
	  which is command line driven, and ARC, which uses menus and arrow
	  keys. Details about the Linux/Alpha booting process are contained in
	  the Linux/Alpha FAQ, accessible on the WWW from
	  <http://www.alphalinux.org/>.

	  The usual way to load Linux on an Alpha machine is to use MILO
	  (a bootloader that lets you pass command line parameters to the
	  kernel just like lilo does for the x86 architecture) which can be
	  loaded either from ARC or can be installed directly as a permanent
	  firmware replacement from floppy (which requires changing a certain
	  jumper on the motherboard). If you want to do either of these, say N
	  here. If MILO doesn't work on your system (true for Jensen
	  motherboards), you can bypass it altogether and boot Linux directly
	  from an SRM console; say Y here in order to do that. Note that you
	  won't be able to boot from an IDE disk using SRM.

	  If unsure, say N.

config EISA
	bool
	depends on ALPHA_GENERIC || ALPHA_JENSEN || ALPHA_ALCOR || ALPHA_MIKASA || ALPHA_SABLE || ALPHA_LYNX || ALPHA_NORITAKE || ALPHA_RAWHIDE
	default y

config ARCH_MAY_HAVE_PC_FDC
	def_bool y

config SMP
	bool "Symmetric multi-processing support"
	depends on ALPHA_SABLE || ALPHA_LYNX || ALPHA_RAWHIDE || ALPHA_DP264 || ALPHA_WILDFIRE || ALPHA_TITAN || ALPHA_GENERIC || ALPHA_SHARK || ALPHA_MARVEL
	---help---
	  This enables support for systems with more than one CPU. If you have
	  a system with only one CPU, say N. If you have a system with more
	  than one CPU, say Y.

	  If you say N here, the kernel will run on uni- and multiprocessor
	  machines, but will use only one CPU of a multiprocessor machine. If
	  you say Y here, the kernel will run on many, but not all,
	  uniprocessor machines. On a uniprocessor machine, the kernel
	  will run faster if you say N here.

	  See also the SMP-HOWTO available at
	  <http://www.tldp.org/docs.html#howto>.

	  If you don't know what to do here, say N.

config HAVE_DEC_LOCK
	bool
	depends on SMP
	default y

config NR_CPUS
	int "Maximum number of CPUs (2-32)"
	range 2 32
	depends on SMP
	default "32" if ALPHA_GENERIC || ALPHA_MARVEL
	default "4" if !ALPHA_GENERIC && !ALPHA_MARVEL
	help
	  MARVEL support can handle a maximum of 32 CPUs, all the others
          with working support have a maximum of 4 CPUs.

config ARCH_DISCONTIGMEM_ENABLE
	bool "Discontiguous Memory Support"
	help
	  Say Y to support efficient handling of discontiguous physical memory,
	  for architectures which are either NUMA (Non-Uniform Memory Access)
	  or have huge holes in the physical address space for other reasons.
	  See <file:Documentation/vm/numa> for more.

source "mm/Kconfig"

config NUMA
	bool "NUMA Support (EXPERIMENTAL)"
	depends on DISCONTIGMEM && BROKEN
	help
	  Say Y to compile the kernel to support NUMA (Non-Uniform Memory
	  Access).  This option is for configuring high-end multiprocessor
	  server machines.  If in doubt, say N.

config ALPHA_WTINT
	bool "Use WTINT" if ALPHA_SRM || ALPHA_GENERIC
	default y if ALPHA_QEMU
	default n if ALPHA_EV5 || ALPHA_EV56 || (ALPHA_EV4 && !ALPHA_LCA)
	default n if !ALPHA_SRM && !ALPHA_GENERIC
	default y if SMP
	---help---
	  The Wait for Interrupt (WTINT) PALcall attempts to place the CPU
	  to sleep until the next interrupt.  This may reduce the power
	  consumed, and the heat produced by the computer.  However, it has
	  the side effect of making the cycle counter unreliable as a timing
	  device across the sleep.

	  For emulation under QEMU, definitely say Y here, as we have other
	  mechanisms for measuring time than the cycle counter.

	  For EV4 (but not LCA), EV5 and EV56 systems, or for systems running
	  MILO, sleep mode is not supported so you might as well say N here.

	  For SMP systems we cannot use the cycle counter for timing anyway,
	  so you might as well say Y here.

	  If unsure, say N.

config NODES_SHIFT
	int
	default "7"
	depends on NEED_MULTIPLE_NODES

# LARGE_VMALLOC is racy, if you *really* need it then fix it first
config ALPHA_LARGE_VMALLOC
	bool
	---help---
	  Process creation and other aspects of virtual memory management can
	  be streamlined if we restrict the kernel to one PGD for all vmalloc
	  allocations.  This equates to about 8GB.

	  Under normal circumstances, this is so far and above what is needed
	  as to be laughable.  However, there are certain applications (such
	  as benchmark-grade in-kernel web serving) that can make use of as
	  much vmalloc space as is available.

	  Say N unless you know you need gobs and gobs of vmalloc space.

config VERBOSE_MCHECK
	bool "Verbose Machine Checks"

config VERBOSE_MCHECK_ON
	int "Verbose Printing Mode (0=off, 1=on, 2=all)"
	depends on VERBOSE_MCHECK
	default 1
	---help---
	  This option allows the default printing mode to be set, and then
	  possibly overridden by a boot command argument.

	  For example, if one wanted the option of printing verbose
	  machine checks, but wanted the default to be as if verbose
	  machine check printing was turned off, then one would choose
	  the printing mode to be 0. Then, upon reboot, one could add
	  the boot command line "verbose_mcheck=1" to get the normal
	  verbose machine check printing, or "verbose_mcheck=2" to get
	  the maximum information available.

	  Take the default (1) unless you want more control or more info.

choice
	prompt "Timer interrupt frequency (HZ)?"
	default HZ_128 if ALPHA_QEMU
	default HZ_1200 if ALPHA_RAWHIDE
	default HZ_1024
	---help---
	  The frequency at which timer interrupts occur.  A high frequency
	  minimizes latency, whereas a low frequency minimizes overhead of
	  process accounting.  The later effect is especially significant
	  when being run under QEMU.

	  Note that some Alpha hardware cannot change the interrupt frequency
	  of the timer.  If unsure, say 1024 (or 1200 for Rawhide).

	config HZ_32
		bool "32 Hz"
	config HZ_64
		bool "64 Hz"
	config HZ_128
		bool "128 Hz"
	config HZ_256
		bool "256 Hz"
	config HZ_1024
		bool "1024 Hz"
	config HZ_1200
		bool "1200 Hz"
endchoice

config HZ
	int 
	default 32 if HZ_32
	default 64 if HZ_64
	default 128 if HZ_128
	default 256 if HZ_256
	default 1200 if HZ_1200
	default 1024

source "drivers/pci/Kconfig"
source "drivers/eisa/Kconfig"

source "drivers/pcmcia/Kconfig"

config SRM_ENV
	tristate "SRM environment through procfs"
	depends on PROC_FS
	---help---
	  If you enable this option, a subdirectory inside /proc called
	  /proc/srm_environment will give you access to the all important
	  SRM environment variables (those which have a name) and also
	  to all others (by their internal number).

	  SRM is something like a BIOS for Alpha machines. There are some
	  other such BIOSes, like AlphaBIOS, which this driver cannot
	  support (hey, that's not SRM!).

	  Despite the fact that this driver doesn't work on all Alphas (but
	  only on those which have SRM as their firmware), it's save to
	  build it even if your particular machine doesn't know about SRM
	  (or if you intend to compile a generic kernel). It will simply
	  not create those subdirectory in /proc (and give you some warning,
	  of course).

	  This driver is also available as a module and will be called
	  srm_env then.

source "fs/Kconfig.binfmt"

endmenu

source "net/Kconfig"

source "drivers/Kconfig"

source "fs/Kconfig"

source "arch/alpha/Kconfig.debug"

# DUMMY_CONSOLE may be defined in drivers/video/console/Kconfig
# but we also need it if VGA_HOSE is set
config DUMMY_CONSOLE
	bool
	depends on VGA_HOSE
	default y

source "security/Kconfig"

source "crypto/Kconfig"

source "lib/Kconfig"

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _ASMAXP_SHMPARAM_H
#define _ASMAXP_SHMPARAM_H

#define	SHMLBA PAGE_SIZE		 /* attach addr a multiple of this */

#endif /* _ASMAXP_SHMPARAM_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * parport.h: platform-specific PC-style parport initialisation
 *
 * Copyright (C) 1999, 2000  Tim Waugh <tim@cyberelk.demon.co.uk>
 *
 * This file should only be included by drivers/parport/parport_pc.c.
 */

#ifndef _ASM_AXP_PARPORT_H
#define _ASM_AXP_PARPORT_H 1

static int parport_pc_find_isa_ports (int autoirq, int autodma);
static int parport_pc_find_nonpci_ports (int autoirq, int autodma)
{
	return parport_pc_find_isa_ports (autoirq, autodma);
}

#endif /* !(_ASM_AXP_PARPORT_H) */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               /* Trivial implementations of basic i/o routines.  Assumes that all
   of the hard work has been done by ioremap and ioportmap, and that
   access to i/o space is linear.  */

/* This file may be included multiple times.  */

#if IO_CONCAT(__IO_PREFIX,trivial_io_bw)
__EXTERN_INLINE unsigned int
IO_CONCAT(__IO_PREFIX,ioread8)(void __iomem *a)
{
	return __kernel_ldbu(*(volatile u8 __force *)a);
}

__EXTERN_INLINE unsigned int
IO_CONCAT(__IO_PREFIX,ioread16)(void __iomem *a)
{
	return __kernel_ldwu(*(volatile u16 __force *)a);
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,iowrite8)(u8 b, void __iomem *a)
{
	__kernel_stb(b, *(volatile u8 __force *)a);
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,iowrite16)(u16 b, void __iomem *a)
{
	__kernel_stw(b, *(volatile u16 __force *)a);
}
#endif

#if IO_CONCAT(__IO_PREFIX,trivial_io_lq)
__EXTERN_INLINE unsigned int
IO_CONCAT(__IO_PREFIX,ioread32)(void __iomem *a)
{
	return *(volatile u32 __force *)a;
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,iowrite32)(u32 b, void __iomem *a)
{
	*(volatile u32 __force *)a = b;
}
#endif

#if IO_CONCAT(__IO_PREFIX,trivial_rw_bw) == 1
__EXTERN_INLINE u8
IO_CONCAT(__IO_PREFIX,readb)(const volatile void __iomem *a)
{
	return __kernel_ldbu(*(const volatile u8 __force *)a);
}

__EXTERN_INLINE u16
IO_CONCAT(__IO_PREFIX,readw)(const volatile void __iomem *a)
{
	return __kernel_ldwu(*(const volatile u16 __force *)a);
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,writeb)(u8 b, volatile void __iomem *a)
{
	__kernel_stb(b, *(volatile u8 __force *)a);
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,writew)(u16 b, volatile void __iomem *a)
{
	__kernel_stw(b, *(volatile u16 __force *)a);
}
#elif IO_CONCAT(__IO_PREFIX,trivial_rw_bw) == 2
__EXTERN_INLINE u8
IO_CONCAT(__IO_PREFIX,readb)(const volatile void __iomem *a)
{
	void __iomem *addr = (void __iomem *)a;
	return IO_CONCAT(__IO_PREFIX,ioread8)(addr);
}

__EXTERN_INLINE u16
IO_CONCAT(__IO_PREFIX,readw)(const volatile void __iomem *a)
{
	void __iomem *addr = (void __iomem *)a;
	return IO_CONCAT(__IO_PREFIX,ioread16)(addr);
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,writeb)(u8 b, volatile void __iomem *a)
{
	void __iomem *addr = (void __iomem *)a;
	IO_CONCAT(__IO_PREFIX,iowrite8)(b, addr);
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,writew)(u16 b, volatile void __iomem *a)
{
	void __iomem *addr = (void __iomem *)a;
	IO_CONCAT(__IO_PREFIX,iowrite16)(b, addr);
}
#endif

#if IO_CONCAT(__IO_PREFIX,trivial_rw_lq) == 1
__EXTERN_INLINE u32
IO_CONCAT(__IO_PREFIX,readl)(const volatile void __iomem *a)
{
	return *(const volatile u32 __force *)a;
}

__EXTERN_INLINE u64
IO_CONCAT(__IO_PREFIX,readq)(const volatile void __iomem *a)
{
	return *(const volatile u64 __force *)a;
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,writel)(u32 b, volatile void __iomem *a)
{
	*(volatile u32 __force *)a = b;
}

__EXTERN_INLINE void
IO_CONCAT(__IO_PREFIX,writeq)(u64 b, volatile void __iomem *a)
{
	*(volatile u64 __force *)a = b;
}
#endif

#if IO_CONCAT(__IO_PREFIX,trivial_iounmap)
__EXTERN_INLINE void IO_CONCAT(__IO_PREFIX,iounmap)(volatile void __iomem *a)
{
}
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 * Machine dependent access functions for RTC registers.
 */
#ifndef __ASM_ALPHA_MC146818RTC_H
#define __ASM_ALPHA_MC146818RTC_H

#include <asm/io.h>

#ifndef RTC_PORT
#define RTC_PORT(x)	(0x70 + (x))
#define RTC_ALWAYS_BCD	1	/* RTC operates in binary mode */
#endif

/*
 * The yet supported machines all access the RTC index register via
 * an ISA port access but the way to access the date register differs ...
 */
#define CMOS_READ(addr) ({ \
outb_p((addr),RTC_PORT(0)); \
inb_p(RTC_PORT(1)); \
})
#define CMOS_WRITE(val, addr) ({ \
outb_p((addr),RTC_PORT(0)); \
outb_p((val),RTC_PORT(1)); \
})

#endif /* __ASM_ALPHA_MC146818RTC_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef _ALPHA_LOCAL_H
#define _ALPHA_LOCAL_H

#include <linux/percpu.h>
#include <linux/atomic.h>

typedef struct
{
	atomic_long_t a;
} local_t;

#define LOCAL_INIT(i)	{ ATOMIC_LONG_INIT(i) }
#define local_read(l)	atomic_long_read(&(l)->a)
#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
#define local_inc(l)	atomic_long_inc(&(l)->a)
#define local_dec(l)	atomic_long_dec(&(l)->a)
#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))

static __inline__ long local_add_return(long i, local_t * l)
{
	long temp, result;
	__asm__ __volatile__(
	"1:	ldq_l %0,%1\n"
	"	addq %0,%3,%2\n"
	"	addq %0,%3,%0\n"
	"	stq_c %0,%1\n"
	"	beq %0,2f\n"
	".subsection 2\n"
	"2:	br 1b\n"
	".previous"
	:"=&r" (temp), "=m" (l->a.counter), "=&r" (result)
	:"Ir" (i), "m" (l->a.counter) : "memory");
	return result;
}

static __inline__ long local_sub_return(long i, local_t * l)
{
	long temp, result;
	__asm__ __volatile__(
	"1:	ldq_l %0,%1\n"
	"	subq %0,%3,%2\n"
	"	subq %0,%3,%0\n"
	"	stq_c %0,%1\n"
	"	beq %0,2f\n"
	".subsection 2\n"
	"2:	br 1b\n"
	".previous"
	:"=&r" (temp), "=m" (l->a.counter), "=&r" (result)
	:"Ir" (i), "m" (l->a.counter) : "memory");
	return result;
}

#define local_cmpxchg(l, o, n) \
	(cmpxchg_local(&((l)->a.counter), (o), (n)))
#define local_xchg(l, n) (xchg_local(&((l)->a.counter), (n)))

/**
 * local_add_unless - add unless the number is a given value
 * @l: pointer of type local_t
 * @a: the amount to add to l...
 * @u: ...unless l is equal to u.
 *
 * Atomically adds @a to @l, so long as it was not @u.
 * Returns non-zero if @l was not @u, and zero otherwise.
 */
#define local_add_unless(l, a, u)				\
({								\
	long c, old;						\
	c = local_read(l);					\
	for (;;) {						\
		if (unlikely(c == (u)))				\
			break;					\
		old = local_cmpxchg((l), c, c + (a));	\
		if (likely(old == c))				\
			break;					\
		c = old;					\
	}							\
	c != (u);						\
})
#define local_inc_not_zero(l) local_add_unless((l), 1, 0)

#define local_add_negative(a, l) (local_add_return((a), (l)) < 0)

#define local_dec_return(l) local_sub_return(1,(l))

#define local_inc_return(l) local_add_return(1,(l))

#define local_sub_and_test(i,l) (local_sub_return((i), (l)) == 0)

#define local_inc_and_test(l) (local_add_return(1, (l)) == 0)

#define local_dec_and_test(l) (local_sub_return(1, (l)) == 0)

/* Verify if faster than atomic ops */
#define __local_inc(l)		((l)->a.counter++)
#define __local_dec(l)		((l)->a.counter++)
#define __local_add(i,l)	((l)->a.counter+=(i))
#define __local_sub(i,l)	((l)->a.counter-=(i))

#endif /* _ALPHA_LOCAL_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #ifndef __ALPHA_MACHVEC_H
#define __ALPHA_MACHVEC_H 1

#include <linux/types.h>

/*
 *	This file gets pulled in by asm/io.h from user space. We don't
 *	want most of this escaping.
 */
 
#ifdef __KERNEL__

/* The following structure vectors all of the I/O and IRQ manipulation
   from the generic kernel to the hardware specific backend.  */

struct task_struct;
struct mm_struct;
struct vm_area_struct;
struct linux_hose_info;
struct pci_dev;
struct pci_ops;
struct pci_controller;
struct _alpha_agp_info;
struct rtc_time;

struct alpha_machine_vector
{
	/* This "belongs" down below with the rest of the runtime
	   variables, but it is convenient for entry.S if these 
	   two slots are at the beginning of the struct.  */
	unsigned long hae_cache;
	unsigned long *hae_register;

	int nr_irqs;
	int rtc_port;
	int rtc_boot_cpu_only;
	unsigned int max_asn;
	unsigned long max_isa_dma_address;
	unsigned long irq_probe_mask;
	unsigned long iack_sc;
	unsigned long min_io_address;
	unsigned long min_mem_address;
	unsigned long pci_dac_offset;

	void (*mv_pci_tbi)(struct pci_controller *hose,
			   dma_addr_t start, dma_addr_t end);

	unsigned int (*mv_ioread8)(void __iomem *);
	unsigned int (*mv_ioread16)(void __iomem *);
	unsigned int (*mv_ioread32)(void __iomem *);

	void (*mv_iowrite8)(u8, void __iomem *);
	void (*mv_iowrite16)(u16, void __iomem *);
	void (*mv_iowrite32)(u32, void __iomem *);

	u8 (*mv_readb)(const volatile void __iomem *);
	u16 (*mv_readw)(const volatile void __iomem *);
	u32 (*mv_readl)(const volatile void __iomem *);
	u64 (*mv_readq)(const volatile void __iomem *);

	void (*mv_writeb)(u8, volatile void __iomem *);
	void (*mv_writew)(u16, volatile void __iomem *);
	void (*mv_writel)(u32, volatile void __iomem *);
	void (*mv_writeq)(u64, volatile void __iomem *);

	void __iomem *(*mv_ioportmap)(unsigned long);
	void __iomem *(*mv_ioremap)(unsigned long, unsigned long);
	void (*mv_iounmap)(volatile void __iomem *);
	int (*mv_is_ioaddr)(unsigned long);
	int (*mv_is_mmio)(const volatile void __iomem *);

	void (*mv_switch_mm)(struct mm_struct *, struct mm_struct *,
			     struct task_struct *);
	void (*mv_activate_mm)(struct mm_struct *, struct mm_struct *);

	void (*mv_flush_tlb_current)(struct mm_struct *);
	void (*mv_flush_tlb_current_page)(struct mm_struct * mm,
					  struct vm_area_struct *vma,
					  unsigned long addr);

	void (*update_irq_hw)(unsigned long, unsigned long, int);
	void (*ack_irq)(unsigned long);
	void (*device_interrupt)(unsigned long vector);
	void (*machine_check)(unsigned long vector, unsigned long la);

	void (*smp_callin)(void);
	void (*init_arch)(void);
	void (*init_irq)(void);
	void (*init_rtc)(void);
	void (*init_pci)(void);
	void (*kill_arch)(int);

	u8 (*pci_swizzle)(struct pci_dev *, u8 *);
	int (*pci_map_irq)(const struct pci_dev *, u8, u8);
	struct pci_ops *pci_ops;

	struct _alpha_agp_info *(*agp_info)(void);

	const char *vector_name;

	/* NUMA information */
	int (*pa_to_nid)(unsigned long);
	int (*cpuid_to_nid)(int);
	unsigned long (*node_mem_start)(int);
	unsigned long (*node_mem_size)(int);

	/* System specific parameters.  */
	union {
	    struct {
		unsigned long gru_int_req_bits;
	    } cia;

	    struct {
		unsigned long gamma_bias;
	    } t2;

	    struct {
		unsigned int route_tab;
	    } sio;
	} sys;
};

extern struct alpha_machine_vector alpha_mv;

#ifdef CONFIG_ALPHA_GENERIC
extern int alpha_using_srm;
extern int alpha_using_qemu;
#else
# ifdef CONFIG_ALPHA_SRM
#  define alpha_using_srm 1
# else
#  define alpha_using_srm 0
# endif
# ifdef CONFIG_ALPHA_QEMU
#  define alpha_using_qemu 1
# else
#  define alpha_using_qemu 0
# endif
#endif /* GENERIC */

#endif /* __KERNEL__ */
#endif /* __ALPHA_MACHVEC_H */
                                                                                                                                                                                                                                                                                                                                                                                 #ifndef _ALPHA_CMPXCHG_H
#define _ALPHA_CMPXCHG_H

/*
 * Atomic exchange routines.
 */

#define __ASM__MB
#define ____xchg(type, args...)		__xchg ## type ## _local(args)
#define ____cmpxchg(type, args...)	__cmpxchg ## type ## _local(args)
#include <asm/xchg.h>

#define xchg_local(ptr, x)						\
({									\
	__typeof__(*(ptr)) _x_ = (x);					\
	(__typeof__(*(ptr))) __xchg_local((ptr), (unsigned long)_x_,	\
				       sizeof(*(ptr)));			\
})

#define cmpxchg_local(ptr, o, n)					\
({									\
	__typeof__(*(ptr)) _o_ = (o);					\
	__typeof__(*(ptr)) _n_ = (n);					\
	(__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,	\
					  (unsigned long)_n_,		\
					  sizeof(*(ptr)));		\
})

#define cmpxchg64_local(ptr, o, n)					\
({									\
	BUILD_BUG_ON(sizeof(*(ptr)) != 8);				\
	cmpxchg_local((ptr), (o), (n));					\
})

#ifdef CONFIG_SMP
#undef __ASM__MB
#define __ASM__MB	"\tmb\n"
#endif
#undef ____xchg
#undef ____cmpxchg
#define ____xchg(type, args...)		__xchg ##type(args)
#define ____cmpxchg(type, args...)	__cmpxchg ##type(args)
#include <asm/xchg.h>

#define xchg(ptr, x)							\
({									\
	__typeof__(*(ptr)) _x_ = (x);					\
	(__typeof__(*(ptr))) __xchg((ptr), (unsigned long)_x_,		\
				 sizeof(*(ptr)));			\
})

#define cmpxchg(ptr, o, n)						\
({									\
	__typeof__(*(ptr)) _o_ = (o);					\
	__typeof__(*(ptr)) _n_ = (n);					\
	(__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,	\
				    (unsigned long)_n_,	sizeof(*(ptr)));\
})

#define cmpxchg64(ptr, o, n)						\
({									\
	BUILD_BUG_ON(sizeof(*(ptr)) != 8);				\
	cmpxchg((ptr), (o), (n));					\
})

#undef __ASM__MB
#undef ____cmpxchg

#endif /* _ALPHA_CMPXCHG_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #ifndef __AXP_CONSOLE_H
#define __AXP_CONSOLE_H

#include <uapi/asm/console.h>

#ifndef __ASSEMBLY__
extern long callback_puts(long unit, const char *s, long length);
extern long callback_getc(long unit);
extern long callback_open_console(void);
extern long callback_close_console(void);
extern long callback_open(const char *device, long length);
extern long callback_close(long unit);
extern long callback_read(long channel, long count, const char *buf, long lbn);
extern long callback_getenv(long id, const char *buf, unsigned long buf_size);
extern long callback_setenv(long id, const char *buf, unsigned long buf_size);
extern long callback_save_env(void);

extern int srm_fixup(unsigned long new_callback_addr,
		     unsigned long new_hwrpb_addr);
extern long srm_puts(const char *, long);
extern long srm_printk(const char *, ...)
	__attribute__ ((format (printf, 1, 2)));

struct crb_struct;
struct hwrpb_struct;
extern int callback_init_done;
extern void * callback_init(void *);
#endif /* __ASSEMBLY__ */
#endif /* __AXP_CONSOLE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef __ASM_ALPHA_ELF_H
#define __ASM_ALPHA_ELF_H

#include <asm/auxvec.h>
#include <asm/special_insns.h>

/* Special values for the st_other field in the symbol table.  */

#define STO_ALPHA_NOPV		0x80
#define STO_ALPHA_STD_GPLOAD	0x88

/*
 * Alpha ELF relocation types
 */
#define R_ALPHA_NONE            0       /* No reloc */
#define R_ALPHA_REFLONG         1       /* Direct 32 bit */
#define R_ALPHA_REFQUAD         2       /* Direct 64 bit */
#define R_ALPHA_GPREL32         3       /* GP relative 32 bit */
#define R_ALPHA_LITERAL         4       /* GP relative 16 bit w/optimization */
#define R_ALPHA_LITUSE          5       /* Optimization hint for LITERAL */
#define R_ALPHA_GPDISP          6       /* Add displacement to GP */
#define R_ALPHA_BRADDR          7       /* PC+4 relative 23 bit shifted */
#define R_ALPHA_HINT            8       /* PC+4 relative 16 bit shifted */
#define R_ALPHA_SREL16          9       /* PC relative 16 bit */
#define R_ALPHA_SREL32          10      /* PC relative 32 bit */
#define R_ALPHA_SREL64          11      /* PC relative 64 bit */
#define R_ALPHA_GPRELHIGH       17      /* GP relative 32 bit, high 16 bits */
#define R_ALPHA_GPRELLOW        18      /* GP relative 32 bit, low 16 bits */
#define R_ALPHA_GPREL16         19      /* GP relative 16 bit */
#define R_ALPHA_COPY            24      /* Copy symbol at runtime */
#define R_ALPHA_GLOB_DAT        25      /* Create GOT entry */
#define R_ALPHA_JMP_SLOT        26      /* Create PLT entry */
#define R_ALPHA_RELATIVE        27      /* Adjust by program base */
#define R_ALPHA_BRSGP		28
#define R_ALPHA_TLSGD           29
#define R_ALPHA_TLS_LDM         30
#define R_ALPHA_DTPMOD64        31
#define R_ALPHA_GOTDTPREL       32
#define R_ALPHA_DTPREL64        33
#define R_ALPHA_DTPRELHI        34
#define R_ALPHA_DTPRELLO        35
#define R_ALPHA_DTPREL16        36
#define R_ALPHA_GOTTPREL        37
#define R_ALPHA_TPREL64         38
#define R_ALPHA_TPRELHI         39
#define R_ALPHA_TPRELLO         40
#define R_ALPHA_TPREL16         41

#define SHF_ALPHA_GPREL		0x10000000

/* Legal values for e_flags field of Elf64_Ehdr.  */

#define EF_ALPHA_32BIT		1	/* All addresses are below 2GB */

/*
 * ELF register definitions..
 */

/*
 * The OSF/1 version of <sys/procfs.h> makes gregset_t 46 entries long.
 * I have no idea why that is so.  For now, we just leave it at 33
 * (32 general regs + processor status word). 
 */
#define ELF_NGREG	33
#define ELF_NFPREG	32

typedef unsigned long elf_greg_t;
typedef elf_greg_t elf_gregset_t[ELF_NGREG];

typedef double elf_fpreg_t;
typedef elf_fpreg_t elf_fpregset_t[ELF_NFPREG];

/*
 * This is used to ensure we don't load something for the wrong architecture.
 */
#define elf_check_arch(x) ((x)->e_machine == EM_ALPHA)

/*
 * These are used to set parameters in the core dumps.
 */
#define ELF_CLASS	ELFCLASS64
#define ELF_DATA	ELFDATA2LSB
#define ELF_ARCH	EM_ALPHA

#define ELF_EXEC_PAGESIZE	8192

/* This is the location that an ET_DYN program is loaded if exec'ed.  Typical
   use of this is to invoke "./ld.so someprog" to test out a new version of
   the loader.  We need to make sure that it is out of the way of the program
   that it will "exec", and that there is sufficient room for the brk.  */

#define ELF_ET_DYN_BASE		(TASK_UNMAPPED_BASE + 0x1000000)

/* $0 is set by ld.so to a pointer to a function which might be 
   registered using atexit.  This provides a mean for the dynamic
   linker to call DT_FINI functions for shared libraries that have
   been loaded before the code runs.

   So that we can use the same startup file with static executables,
   we start programs with a value of 0 to indicate that there is no
   such function.  */

#define ELF_PLAT_INIT(_r, load_addr)	_r->r0 = 0

/* The registers are laid out in pt_regs for PAL and syscall
   convenience.  Re-order them for the linear elf_gregset_t.  */

struct pt_regs;
struct thread_info;
struct task_struct;
extern void dump_elf_thread(elf_greg_t *dest, struct pt_regs *pt,
			    struct thread_info *ti);
#define ELF_CORE_COPY_REGS(DEST, REGS) \
	dump_elf_thread(DEST, REGS, current_thread_info());

/* Similar, but for a thread other than current.  */

extern int dump_elf_task(elf_greg_t *dest, struct task_struct *task);
#define ELF_CORE_COPY_TASK_REGS(TASK, DEST) \
	dump_elf_task(*(DEST), TASK)

/* Similar, but for the FP registers.  */

extern int dump_elf_task_fp(elf_fpreg_t *dest, struct task_struct *task);
#define ELF_CORE_COPY_FPREGS(TASK, DEST) \
	dump_elf_task_fp(*(DEST), TASK)

/* This yields a mask that user programs can use to figure out what
   instruction set this CPU supports.  This is trivial on Alpha, 
   but not so on other machines. */

#define ELF_HWCAP  (~amask(-1))

/* This yields a string that ld.so will use to load implementation
   specific libraries for optimization.  This is more specific in
   intent than poking at uname or /proc/cpuinfo.  */

#define ELF_PLATFORM				\
({						\
	enum implver_enum i_ = implver();	\
	( i_ == IMPLVER_EV4 ? "ev4"		\
	: i_ == IMPLVER_EV5			\
	  ? (amask(AMASK_BWX) ? "ev5" : "ev56")	\
	: amask (AMASK_CIX) ? "ev6" : "ev67");	\
})

#define SET_PERSONALITY(EX)					\
	set_personality(((EX).e_flags & EF_ALPHA_32BIT)		\
	   ? PER_LINUX_32BIT : PER_LINUX)

extern int alpha_l1i_cacheshape;
extern int alpha_l1d_cacheshape;
extern int alpha_l2_cacheshape;
extern int alpha_l3_cacheshape;

/* update AT_VECTOR_SIZE_ARCH if the number of NEW_AUX_ENT entries changes */
#define ARCH_DLINFO						\
  do {								\
    NEW_AUX_ENT(AT_L1I_CACHESHAPE, alpha_l1i_cacheshape);	\
    NEW_AUX_ENT(AT_L1D_CACHESHAPE, alpha_l1d_cacheshape);	\
    NEW_AUX_ENT(AT_L2_CACHESHAPE, alpha_l2_cacheshape);		\
    NEW_AUX_ENT(AT_L3_CACHESHAPE, alpha_l3_cacheshape);		\
  } while (0)

#endif /* __ASM_ALPHA_ELF_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #ifndef _ASM_ALPHA_SYSCALL_H
#define _ASM_ALPHA_SYSCALL_H

#include <uapi/linux/audit.h>

static inline int syscall_get_arch(void)
{
	return AUDIT_ARCH_ALPHA;
}

#endif	/* _ASM_ALPHA_SYSCALL_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef _ALPHA_IRQ_H
#define _ALPHA_IRQ_H

/*
 *	linux/include/alpha/irq.h
 *
 *	(C) 1994 Linus Torvalds
 */

#include <linux/linkage.h>

#if   defined(CONFIG_ALPHA_GENERIC)

/* Here NR_IRQS is not exact, but rather an upper bound.  This is used
   many places throughout the kernel to size static arrays.  That's ok,
   we'll use alpha_mv.nr_irqs when we want the real thing.  */

/* When LEGACY_START_ADDRESS is selected, we leave out:
     TITAN
     WILDFIRE
     MARVEL

   This helps keep the kernel object size reasonable for the majority
   of machines.
*/

# if defined(CONFIG_ALPHA_LEGACY_START_ADDRESS)
#  define NR_IRQS      (128)           /* max is RAWHIDE/TAKARA */
# else
#  define NR_IRQS      (32768 + 16)    /* marvel - 32 pids */
# endif

#elif defined(CONFIG_ALPHA_CABRIOLET) || \
      defined(CONFIG_ALPHA_EB66P)     || \
      defined(CONFIG_ALPHA_EB164)     || \
      defined(CONFIG_ALPHA_PC164)     || \
      defined(CONFIG_ALPHA_LX164)
# define NR_IRQS	35

#elif defined(CONFIG_ALPHA_EB66)      || \
      defined(CONFIG_ALPHA_EB64P)     || \
      defined(CONFIG_ALPHA_MIKASA)
# define NR_IRQS	32

#elif defined(CONFIG_ALPHA_ALCOR)     || \
      defined(CONFIG_ALPHA_MIATA)     || \
      defined(CONFIG_ALPHA_RUFFIAN)   || \
      defined(CONFIG_ALPHA_RX164)     || \
      defined(CONFIG_ALPHA_NORITAKE)
# define NR_IRQS	48

#elif defined(CONFIG_ALPHA_SABLE)     || \
      defined(CONFIG_ALPHA_SX164)
# define NR_IRQS	40

#elif defined(CONFIG_ALPHA_DP264) || \
      defined(CONFIG_ALPHA_LYNX)  || \
      defined(CONFIG_ALPHA_SHARK) || \
      defined(CONFIG_ALPHA_EIGER)
# define NR_IRQS	64

#elif defined(CONFIG_ALPHA_TITAN)
#define NR_IRQS		80

#elif defined(CONFIG_ALPHA_RAWHIDE) || \
	defined(CONFIG_ALPHA_TAKARA)
# define NR_IRQS	128

#elif defined(CONFIG_ALPHA_WILDFIRE)
# define NR_IRQS	2048 /* enuff for 8 QBBs */

#elif defined(CONFIG_ALPHA_MARVEL)
# define NR_IRQS	(32768 + 16) 	/* marvel - 32 pids*/

#else /* everyone else */
# define NR_IRQS	16
#endif

static __inline__ int irq_canonicalize(int irq)
{
	/*
	 * XXX is this true for all Alpha's?  The old serial driver
	 * did it this way for years without any complaints, so....
	 */
	return ((irq == 2) ? 9 : irq);
}

struct pt_regs;
extern void (*perf_irq)(unsigned long, struct pt_regs *);

#endif /* _ALPHA_IRQ_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * Definitions for use with the Alpha wrperfmon PAL call.
 */

#ifndef __ALPHA_WRPERFMON_H
#define __ALPHA_WRPERFMON_H

/* Following commands are implemented on all CPUs */
#define PERFMON_CMD_DISABLE 0
#define PERFMON_CMD_ENABLE 1
#define PERFMON_CMD_DESIRED_EVENTS 2
#define PERFMON_CMD_LOGGING_OPTIONS 3
/* Following commands on EV5/EV56/PCA56 only */
#define PERFMON_CMD_INT_FREQ 4
#define PERFMON_CMD_ENABLE_CLEAR 7
/* Following commands are on EV5 and better CPUs */
#define PERFMON_CMD_READ 5
#define PERFMON_CMD_WRITE 6
/* Following command are on EV6 and better CPUs */
#define PERFMON_CMD_ENABLE_WRITE 7
/* Following command are on EV67 and better CPUs */
#define PERFMON_CMD_I_STAT 8
#define PERFMON_CMD_PMPC 9


/* EV5/EV56/PCA56 Counters */
#define EV5_PCTR_0 (1UL<<0)
#define EV5_PCTR_1 (1UL<<1)
#define EV5_PCTR_2 (1UL<<2)

#define EV5_PCTR_0_COUNT_SHIFT 48
#define EV5_PCTR_1_COUNT_SHIFT 32
#define EV5_PCTR_2_COUNT_SHIFT 16

#define EV5_PCTR_0_COUNT_MASK 0xffffUL
#define EV5_PCTR_1_COUNT_MASK 0xffffUL
#define EV5_PCTR_2_COUNT_MASK 0x3fffUL

/* EV6 Counters */
#define EV6_PCTR_0 (1UL<<0)
#define EV6_PCTR_1 (1UL<<1)

#define EV6_PCTR_0_COUNT_SHIFT 28
#define EV6_PCTR_1_COUNT_SHIFT 6

#define EV6_PCTR_0_COUNT_MASK 0xfffffUL
#define EV6_PCTR_1_COUNT_MASK 0xfffffUL

/* EV67 (and subsequent) counters */
#define EV67_PCTR_0 (1UL<<0)
#define EV67_PCTR_1 (1UL<<1)

#define EV67_PCTR_0_COUNT_SHIFT 28
#define EV67_PCTR_1_COUNT_SHIFT 6

#define EV67_PCTR_0_COUNT_MASK 0xfffffUL
#define EV67_PCTR_1_COUNT_MASK 0xfffffUL


/*
 * The Alpha Architecure Handbook, vers. 4 (1998) appears to have a misprint
 *  in Table E-23 regarding the bits that set the event PCTR 1 counts.
 *  Hopefully what we have here is correct.
 */
#define EV6_PCTR_0_EVENT_MASK 0x10UL
#define EV6_PCTR_1_EVENT_MASK 0x0fUL

/* EV6 Events */
#define EV6_PCTR_0_CYCLES (0UL << 4)
#define EV6_PCTR_0_INSTRUCTIONS (1UL << 4)

#define EV6_PCTR_1_CYCLES 0
#define EV6_PCTR_1_BRANCHES 1
#define EV6_PCTR_1_BRANCH_MISPREDICTS 2
#define EV6_PCTR_1_DTB_SINGLE_MISSES 3
#define EV6_PCTR_1_DTB_DOUBLE_MISSES 4
#define EV6_PCTR_1_ITB_MISSES 5
#define EV6_PCTR_1_UNALIGNED_TRAPS 6
#define EV6_PCTR_1_REPLY_TRAPS 7

/* From the Alpha Architecture Reference Manual, 4th edn., 2002 */
#define EV67_PCTR_MODE_MASK 0x10UL
#define EV67_PCTR_EVENT_MASK 0x0CUL

#define EV67_PCTR_MODE_PROFILEME (1UL<<4)
#define EV67_PCTR_MODE_AGGREGATE (0UL<<4)

#define EV67_PCTR_INSTR_CYCLES (0UL<<2)
#define EV67_PCTR_CYCLES_UNDEF (1UL<<2)
#define EV67_PCTR_INSTR_BCACHEMISS (2UL<<2)
#define EV67_PCTR_CYCLES_MBOX (3UL<<2)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 *	Access to VGA videoram
 *
 *	(c) 1998 Martin Mares <mj@ucw.cz>
 */

#ifndef _LINUX_ASM_VGA_H_
#define _LINUX_ASM_VGA_H_

#include <asm/io.h>

#define VT_BUF_HAVE_RW
#define VT_BUF_HAVE_MEMSETW
#define VT_BUF_HAVE_MEMCPYW

static inline void scr_writew(u16 val, volatile u16 *addr)
{
	if (__is_ioaddr(addr))
		__raw_writew(val, (volatile u16 __iomem *) addr);
	else
		*addr = val;
}

static inline u16 scr_readw(volatile const u16 *addr)
{
	if (__is_ioaddr(addr))
		return __raw_readw((volatile const u16 __iomem *) addr);
	else
		return *addr;
}

static inline void scr_memsetw(u16 *s, u16 c, unsigned int count)
{
	if (__is_ioaddr(s))
		memsetw_io((u16 __iomem *) s, c, count);
	else
		memsetw(s, c, count);
}

/* Do not trust that the usage will be correct; analyze the arguments.  */
extern void scr_memcpyw(u16 *d, const u16 *s, unsigned int count);

/* ??? These are currently only used for downloading character sets.  As
   such, they don't need memory barriers.  Is this all they are intended
   to be used for?  */
#define vga_readb(a)	readb((u8 __iomem *)(a))
#define vga_writeb(v,a)	writeb(v, (u8 __iomem *)(a))

#ifdef CONFIG_VGA_HOSE
#include <linux/ioport.h>
#include <linux/pci.h>

extern struct pci_controller *pci_vga_hose;

# define __is_port_vga(a)       \
	(((a) >= 0x3b0) && ((a) < 0x3e0) && \
	 ((a) != 0x3b3) && ((a) != 0x3d3))

# define __is_mem_vga(a) \
	(((a) >= 0xa0000) && ((a) <= 0xc0000))

# define FIXUP_IOADDR_VGA(a) do {                       \
	if (pci_vga_hose && __is_port_vga(a))     \
		(a) += pci_vga_hose->io_space->start;	  \
 } while(0)

# define FIXUP_MEMADDR_VGA(a) do {                       \
	if (pci_vga_hose && __is_mem_vga(a))     \
		(a) += pci_vga_hose->mem_space->start; \
 } while(0)

#else /* CONFIG_VGA_HOSE */
# define pci_vga_hose 0
# define __is_port_vga(a) 0
# define __is_mem_vga(a) 0
# define FIXUP_IOADDR_VGA(a)
# define FIXUP_MEMADDR_VGA(a)
#endif /* CONFIG_VGA_HOSE */

#define VGA_MAP_MEM(x,s)	((unsigned long) ioremap(x, s))

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #ifndef _ALPHA_AGP_BACKEND_H
#define _ALPHA_AGP_BACKEND_H 1

typedef	union _alpha_agp_mode {
	struct {
		u32 rate : 3;
		u32 reserved0 : 1;
		u32 fw : 1;
		u32 fourgb : 1;
		u32 reserved1 : 2;
		u32 enable : 1;
		u32 sba : 1;
		u32 reserved2 : 14;
		u32 rq : 8;
	} bits;
	u32 lw;
} alpha_agp_mode;

typedef struct _alpha_agp_info {
	struct pci_controller *hose;
	struct {
		dma_addr_t bus_base;
		unsigned long size;
		void *sysdata;
	} aperture;
	alpha_agp_mode capability;
	alpha_agp_mode mode;
	void *private;
	struct alpha_agp_ops *ops;
} alpha_agp_info;

struct alpha_agp_ops {
	int (*setup)(alpha_agp_info *);
	void (*cleanup)(alpha_agp_info *);
	int (*configure)(alpha_agp_info *);
	int (*bind)(alpha_agp_info *, off_t, struct agp_memory *);
	int (*unbind)(alpha_agp_info *, off_t, struct agp_memory *);
	unsigned long (*translate)(alpha_agp_info *, dma_addr_t);
};


#endif /* _ALPHA_AGP_BACKEND_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   #ifndef _ASM_SOCKET_H
#define _ASM_SOCKET_H

#include <uapi/asm/socket.h>

/* O_NONBLOCK clashes with the bits used for socket types.  Therefore we
 * have to define SOCK_NONBLOCK to a different value here.
 */
#define SOCK_NONBLOCK	0x40000000
#endif /* _ASM_SOCKET_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*
 * linux/include/asm-alpha/timex.h
 *
 * ALPHA architecture timex specifications
 */
#ifndef _ASMALPHA_TIMEX_H
#define _ASMALPHA_TIMEX_H

/* With only one or two oddballs, we use the RTC as the ticker, selecting
   the 32.768kHz reference clock, which nicely divides down to our HZ.  */
#define CLOCK_TICK_RATE	32768

/*
 * Standard way to access the cycle counter.
 * Currently only used on SMP for scheduling.
 *
 * Only the low 32 bits are available as a continuously counting entity. 
 * But this only means we'll force a reschedule every 8 seconds or so,
 * which isn't an evil thing.
 */

typedef unsigned int cycles_t;

static inline cycles_t get_cycles (void)
{
	cycles_t ret;
	__asm__ __volatile__ ("rpcc %0" : "=r"(ret));
	return ret;
}

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #ifndef __ALPHA_ERR_EV6_H
#define __ALPHA_ERR_EV6_H 1

/* Dummy include for now. */

#endif /* __ALPHA_ERR_EV6_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef __ALPHA_JENSEN_H
#define __ALPHA_JENSEN_H

#include <asm/compiler.h>

/*
 * Defines for the AlphaPC EISA IO and memory address space.
 */

/*
 * NOTE! The memory operations do not set any memory barriers, as it's
 * not needed for cases like a frame buffer that is essentially memory-like.
 * You need to do them by hand if the operations depend on ordering.
 *
 * Similarly, the port IO operations do a "mb" only after a write operation:
 * if an mb is needed before (as in the case of doing memory mapped IO
 * first, and then a port IO operation to the same device), it needs to be
 * done by hand.
 *
 * After the above has bitten me 100 times, I'll give up and just do the
 * mb all the time, but right now I'm hoping this will work out.  Avoiding
 * mb's may potentially be a noticeable speed improvement, but I can't
 * honestly say I've tested it.
 *
 * Handling interrupts that need to do mb's to synchronize to non-interrupts
 * is another fun race area.  Don't do it (because if you do, I'll have to
 * do *everything* with interrupts disabled, ugh).
 */

/*
 * EISA Interrupt Acknowledge address
 */
#define EISA_INTA		(IDENT_ADDR + 0x100000000UL)

/*
 * FEPROM addresses
 */
#define EISA_FEPROM0		(IDENT_ADDR + 0x180000000UL)
#define EISA_FEPROM1		(IDENT_ADDR + 0x1A0000000UL)

/*
 * VL82C106 base address
 */
#define EISA_VL82C106		(IDENT_ADDR + 0x1C0000000UL)

/*
 * EISA "Host Address Extension" address (bits 25-31 of the EISA address)
 */
#define EISA_HAE		(IDENT_ADDR + 0x1D0000000UL)

/*
 * "SYSCTL" register address
 */
#define EISA_SYSCTL		(IDENT_ADDR + 0x1E0000000UL)

/*
 * "spare" register address
 */
#define EISA_SPARE		(IDENT_ADDR + 0x1F0000000UL)

/*
 * EISA memory address offset
 */
#define EISA_MEM		(IDENT_ADDR + 0x200000000UL)

/*
 * EISA IO address offset
 */
#define EISA_IO			(IDENT_ADDR + 0x300000000UL)


#ifdef __KERNEL__

#ifndef __EXTERN_INLINE
#define __EXTERN_INLINE extern inline
#define __IO_EXTERN_INLINE
#endif

/*
 * Handle the "host address register". This needs to be set
 * to the high 7 bits of the EISA address.  This is also needed
 * for EISA IO addresses, which are only 16 bits wide (the
 * hae needs to be set to 0).
 *
 * HAE isn't needed for the local IO operations, though.
 */

#define JENSEN_HAE_ADDRESS	EISA_HAE
#define JENSEN_HAE_MASK		0x1ffffff

__EXTERN_INLINE void jensen_set_hae(unsigned long addr)
{
	/* hae on the Jensen is bits 31:25 shifted right */
	addr >>= 25;
	if (addr != alpha_mv.hae_cache)
		set_hae(addr);
}

#define vuip	volatile unsigned int *

/*
 * IO functions
 *
 * The "local" functions are those that don't go out to the EISA bus,
 * but instead act on the VL82C106 chip directly.. This is mainly the
 * keyboard, RTC,  printer and first two serial lines..
 *
 * The local stuff makes for some complications, but it seems to be
 * gone in the PCI version. I hope I can get DEC suckered^H^H^H^H^H^H^H^H
 * convinced that I need one of the newer machines.
 */

static inline unsigned int jensen_local_inb(unsigned long addr)
{
	return 0xff & *(vuip)((addr << 9) + EISA_VL82C106);
}

static inline void jensen_local_outb(u8 b, unsigned long addr)
{
	*(vuip)((addr << 9) + EISA_VL82C106) = b;
	mb();
}

static inline unsigned int jensen_bus_inb(unsigned long addr)
{
	long result;

	jensen_set_hae(0);
	result = *(volatile int *)((addr << 7) + EISA_IO + 0x00);
	return __kernel_extbl(result, addr & 3);
}

static inline void jensen_bus_outb(u8 b, unsigned long addr)
{
	jensen_set_hae(0);
	*(vuip)((addr << 7) + EISA_IO + 0x00) = b * 0x01010101;
	mb();
}

/*
 * It seems gcc is not very good at optimizing away logical
 * operations that result in operations across inline functions.
 * Which is why this is a macro.
 */

#define jensen_is_local(addr) ( \
/* keyboard */	(addr == 0x60 || addr == 0x64) || \
/* RTC */	(addr == 0x170 || addr == 0x171) || \
/* mb COM2 */	(addr >= 0x2f8 && addr <= 0x2ff) || \
/* mb LPT1 */	(addr >= 0x3bc && addr <= 0x3be) || \
/* mb COM2 */	(addr >= 0x3f8 && addr <= 0x3ff))

__EXTERN_INLINE u8 jensen_inb(unsigned long addr)
{
	if (jensen_is_local(addr))
		return jensen_local_inb(addr);
	else
		return jensen_bus_inb(addr);
}

__EXTERN_INLINE void jensen_outb(u8 b, unsigned long addr)
{
	if (jensen_is_local(addr))
		jensen_local_outb(b, addr);
	else
		jensen_bus_outb(b, addr);
}

__EXTERN_INLINE u16 jensen_inw(unsigned long addr)
{
	long result;

	jensen_set_hae(0);
	result = *(volatile int *) ((addr << 7) + EISA_IO + 0x20);
	result >>= (addr & 3) * 8;
	return 0xffffUL & result;
}

__EXTERN_INLINE u32 jensen_inl(unsigned long addr)
{
	jensen_set_hae(0);
	return *(vuip) ((addr << 7) + EISA_IO + 0x60);
}

__EXTERN_INLINE void jensen_outw(u16 b, unsigned long addr)
{
	jensen_set_hae(0);
	*(vuip) ((addr << 7) + EISA_IO + 0x20) = b * 0x00010001;
	mb();
}

__EXTERN_INLINE void jensen_outl(u32 b, unsigned long addr)
{
	jensen_set_hae(0);
	*(vuip) ((addr << 7) + EISA_IO + 0x60) = b;
	mb();
}

/*
 * Memory functions.
 */

__EXTERN_INLINE u8 jensen_readb(const volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	long result;

	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	result = *(volatile int *) ((addr << 7) + EISA_MEM + 0x00);
	result >>= (addr & 3) * 8;
	return 0xffUL & result;
}

__EXTERN_INLINE u16 jensen_readw(const volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	long result;

	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	result = *(volatile int *) ((addr << 7) + EISA_MEM + 0x20);
	result >>= (addr & 3) * 8;
	return 0xffffUL & result;
}

__EXTERN_INLINE u32 jensen_readl(const volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	return *(vuip) ((addr << 7) + EISA_MEM + 0x60);
}

__EXTERN_INLINE u64 jensen_readq(const volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	unsigned long r0, r1;

	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	addr = (addr << 7) + EISA_MEM + 0x60;
	r0 = *(vuip) (addr);
	r1 = *(vuip) (addr + (4 << 7));
	return r1 << 32 | r0;
}

__EXTERN_INLINE void jensen_writeb(u8 b, volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	*(vuip) ((addr << 7) + EISA_MEM + 0x00) = b * 0x01010101;
}

__EXTERN_INLINE void jensen_writew(u16 b, volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	*(vuip) ((addr << 7) + EISA_MEM + 0x20) = b * 0x00010001;
}

__EXTERN_INLINE void jensen_writel(u32 b, volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	*(vuip) ((addr << 7) + EISA_MEM + 0x60) = b;
}

__EXTERN_INLINE void jensen_writeq(u64 b, volatile void __iomem *xaddr)
{
	unsigned long addr = (unsigned long) xaddr;
	jensen_set_hae(addr);
	addr &= JENSEN_HAE_MASK;
	addr = (addr << 7) + EISA_MEM + 0x60;
	*(vuip) (addr) = b;
	*(vuip) (addr + (4 << 7)) = b >> 32;
}

__EXTERN_INLINE void __iomem *jensen_ioportmap(unsigned long addr)
{
	return (void __iomem *)addr;
}

__EXTERN_INLINE void __iomem *jensen_ioremap(unsigned long addr,
					     unsigned long size)
{
	return (void __iomem *)(addr + 0x100000000ul);
}

__EXTERN_INLINE int jensen_is_ioaddr(unsigned long addr)
{
	return (long)addr >= 0;
}

__EXTERN_INLINE int jensen_is_mmio(const volatile void __iomem *addr)
{
	return (unsigned long)addr >= 0x100000000ul;
}

/* New-style ioread interface.  All the routines are so ugly for Jensen
   that it doesn't make sense to merge them.  */

#define IOPORT(OS, NS)							\
__EXTERN_INLINE unsigned int jensen_ioread##NS(void __iomem *xaddr)	\
{									\
	if (jensen_is_mmio(xaddr))					\
		return jensen_read##OS(xaddr - 0x100000000ul);		\
	else								\
		return jensen_in##OS((unsigned long)xaddr);		\
}									\
__EXTERN_INLINE void jensen_iowrite##NS(u##NS b, void __iomem *xaddr)	\
{									\
	if (jensen_is_mmio(xaddr))					\
		jensen_write##OS(b, xaddr - 0x100000000ul);		\
	else								\
		jensen_out##OS(b, (unsigned long)xaddr);		\
}

IOPORT(b, 8)
IOPORT(w, 16)
IOPORT(l, 32)

#undef IOPORT

#undef vuip

#undef __IO_PREFIX
#define __IO_PREFIX		jensen
#define jensen_trivial_rw_bw	0
#define jensen_trivial_rw_lq	0
#define jensen_trivial_io_bw	0
#define jensen_trivial_io_lq	0
#define jensen_trivial_iounmap	1
#include <asm/io_trivial.h>

#ifdef __IO_EXTERN_INLINE
#undef __EXTERN_INLINE
#undef __IO_EXTERN_INLINE
#endif

#endif /* __KERNEL__ */

#endif /* __ALPHA_JENSEN_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*
 * include/asm-alpha/xor.h
 *
 * Optimized RAID-5 checksumming functions for alpha EV5 and EV6
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * You should have received a copy of the GNU General Public License
 * (for example /usr/src/linux/COPYING); if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

extern void xor_alpha_2(unsigned long, unsigned long *, unsigned long *);
extern void xor_alpha_3(unsigned long, unsigned long *, unsigned long *,
		        unsigned long *);
extern void xor_alpha_4(unsigned long, unsigned long *, unsigned long *,
		        unsigned long *, unsigned long *);
extern void xor_alpha_5(unsigned long, unsigned long *, unsigned long *,
		        unsigned long *, unsigned long *, unsigned long *);

extern void xor_alpha_prefetch_2(unsigned long, unsigned long *,
				 unsigned long *);
extern void xor_alpha_prefetch_3(unsigned long, unsigned long *,
				 unsigned long *, unsigned long *);
extern void xor_alpha_prefetch_4(unsigned long, unsigned long *,
				 unsigned long *, unsigned long *,
				 unsigned long *);
extern void xor_alpha_prefetch_5(unsigned long, unsigned long *,
				 unsigned long *, unsigned long *,
				 unsigned long *, unsigned long *);

asm("								\n\
	.text							\n\
	.align 3						\n\
	.ent xor_alpha_2					\n\
xor_alpha_2:							\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
	.align 4						\n\
2:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,8($17)						\n\
	ldq $3,8($18)						\n\
								\n\
	ldq $4,16($17)						\n\
	ldq $5,16($18)						\n\
	ldq $6,24($17)						\n\
	ldq $7,24($18)						\n\
								\n\
	ldq $19,32($17)						\n\
	ldq $20,32($18)						\n\
	ldq $21,40($17)						\n\
	ldq $22,40($18)						\n\
								\n\
	ldq $23,48($17)						\n\
	ldq $24,48($18)						\n\
	ldq $25,56($17)						\n\
	xor $0,$1,$0		# 7 cycles from $1 load		\n\
								\n\
	ldq $27,56($18)						\n\
	xor $2,$3,$2						\n\
	stq $0,0($17)						\n\
	xor $4,$5,$4						\n\
								\n\
	stq $2,8($17)						\n\
	xor $6,$7,$6						\n\
	stq $4,16($17)						\n\
	xor $19,$20,$19						\n\
								\n\
	stq $6,24($17)						\n\
	xor $21,$22,$21						\n\
	stq $19,32($17)						\n\
	xor $23,$24,$23						\n\
								\n\
	stq $21,40($17)						\n\
	xor $25,$27,$25						\n\
	stq $23,48($17)						\n\
	subq $16,1,$16						\n\
								\n\
	stq $25,56($17)						\n\
	addq $17,64,$17						\n\
	addq $18,64,$18						\n\
	bgt $16,2b						\n\
								\n\
	ret							\n\
	.end xor_alpha_2					\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_3					\n\
xor_alpha_3:							\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
	.align 4						\n\
3:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,0($19)						\n\
	ldq $3,8($17)						\n\
								\n\
	ldq $4,8($18)						\n\
	ldq $6,16($17)						\n\
	ldq $7,16($18)						\n\
	ldq $21,24($17)						\n\
								\n\
	ldq $22,24($18)						\n\
	ldq $24,32($17)						\n\
	ldq $25,32($18)						\n\
	ldq $5,8($19)						\n\
								\n\
	ldq $20,16($19)						\n\
	ldq $23,24($19)						\n\
	ldq $27,32($19)						\n\
	nop							\n\
								\n\
	xor $0,$1,$1		# 8 cycles from $0 load		\n\
	xor $3,$4,$4		# 6 cycles from $4 load		\n\
	xor $6,$7,$7		# 6 cycles from $7 load		\n\
	xor $21,$22,$22		# 5 cycles from $22 load	\n\
								\n\
	xor $1,$2,$2		# 9 cycles from $2 load		\n\
	xor $24,$25,$25		# 5 cycles from $25 load	\n\
	stq $2,0($17)						\n\
	xor $4,$5,$5		# 6 cycles from $5 load		\n\
								\n\
	stq $5,8($17)						\n\
	xor $7,$20,$20		# 7 cycles from $20 load	\n\
	stq $20,16($17)						\n\
	xor $22,$23,$23		# 7 cycles from $23 load	\n\
								\n\
	stq $23,24($17)						\n\
	xor $25,$27,$27		# 7 cycles from $27 load	\n\
	stq $27,32($17)						\n\
	nop							\n\
								\n\
	ldq $0,40($17)						\n\
	ldq $1,40($18)						\n\
	ldq $3,48($17)						\n\
	ldq $4,48($18)						\n\
								\n\
	ldq $6,56($17)						\n\
	ldq $7,56($18)						\n\
	ldq $2,40($19)						\n\
	ldq $5,48($19)						\n\
								\n\
	ldq $20,56($19)						\n\
	xor $0,$1,$1		# 4 cycles from $1 load		\n\
	xor $3,$4,$4		# 5 cycles from $4 load		\n\
	xor $6,$7,$7		# 5 cycles from $7 load		\n\
								\n\
	xor $1,$2,$2		# 4 cycles from $2 load		\n\
	xor $4,$5,$5		# 5 cycles from $5 load		\n\
	stq $2,40($17)						\n\
	xor $7,$20,$20		# 4 cycles from $20 load	\n\
								\n\
	stq $5,48($17)						\n\
	subq $16,1,$16						\n\
	stq $20,56($17)						\n\
	addq $19,64,$19						\n\
								\n\
	addq $18,64,$18						\n\
	addq $17,64,$17						\n\
	bgt $16,3b						\n\
	ret							\n\
	.end xor_alpha_3					\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_4					\n\
xor_alpha_4:							\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
	.align 4						\n\
4:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,0($19)						\n\
	ldq $3,0($20)						\n\
								\n\
	ldq $4,8($17)						\n\
	ldq $5,8($18)						\n\
	ldq $6,8($19)						\n\
	ldq $7,8($20)						\n\
								\n\
	ldq $21,16($17)						\n\
	ldq $22,16($18)						\n\
	ldq $23,16($19)						\n\
	ldq $24,16($20)						\n\
								\n\
	ldq $25,24($17)						\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
	ldq $27,24($18)						\n\
	xor $2,$3,$3		# 6 cycles from $3 load		\n\
								\n\
	ldq $0,24($19)						\n\
	xor $1,$3,$3						\n\
	ldq $1,24($20)						\n\
	xor $4,$5,$5		# 7 cycles from $5 load		\n\
								\n\
	stq $3,0($17)						\n\
	xor $6,$7,$7						\n\
	xor $21,$22,$22		# 7 cycles from $22 load	\n\
	xor $5,$7,$7						\n\
								\n\
	stq $7,8($17)						\n\
	xor $23,$24,$24		# 7 cycles from $24 load	\n\
	ldq $2,32($17)						\n\
	xor $22,$24,$24						\n\
								\n\
	ldq $3,32($18)						\n\
	ldq $4,32($19)						\n\
	ldq $5,32($20)						\n\
	xor $25,$27,$27		# 8 cycles from $27 load	\n\
								\n\
	ldq $6,40($17)						\n\
	ldq $7,40($18)						\n\
	ldq $21,40($19)						\n\
	ldq $22,40($20)						\n\
								\n\
	stq $24,16($17)						\n\
	xor $0,$1,$1		# 9 cycles from $1 load		\n\
	xor $2,$3,$3		# 5 cycles from $3 load		\n\
	xor $27,$1,$1						\n\
								\n\
	stq $1,24($17)						\n\
	xor $4,$5,$5		# 5 cycles from $5 load		\n\
	ldq $23,48($17)						\n\
	ldq $24,48($18)						\n\
								\n\
	ldq $25,48($19)						\n\
	xor $3,$5,$5						\n\
	ldq $27,48($20)						\n\
	ldq $0,56($17)						\n\
								\n\
	ldq $1,56($18)						\n\
	ldq $2,56($19)						\n\
	xor $6,$7,$7		# 8 cycles from $6 load		\n\
	ldq $3,56($20)						\n\
								\n\
	stq $5,32($17)						\n\
	xor $21,$22,$22		# 8 cycles from $22 load	\n\
	xor $7,$22,$22						\n\
	xor $23,$24,$24		# 5 cycles from $24 load	\n\
								\n\
	stq $22,40($17)						\n\
	xor $25,$27,$27		# 5 cycles from $27 load	\n\
	xor $24,$27,$27						\n\
	xor $0,$1,$1		# 5 cycles from $1 load		\n\
								\n\
	stq $27,48($17)						\n\
	xor $2,$3,$3		# 4 cycles from $3 load		\n\
	xor $1,$3,$3						\n\
	subq $16,1,$16						\n\
								\n\
	stq $3,56($17)						\n\
	addq $20,64,$20						\n\
	addq $19,64,$19						\n\
	addq $18,64,$18						\n\
								\n\
	addq $17,64,$17						\n\
	bgt $16,4b						\n\
	ret							\n\
	.end xor_alpha_4					\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_5					\n\
xor_alpha_5:							\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
	.align 4						\n\
5:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,0($19)						\n\
	ldq $3,0($20)						\n\
								\n\
	ldq $4,0($21)						\n\
	ldq $5,8($17)						\n\
	ldq $6,8($18)						\n\
	ldq $7,8($19)						\n\
								\n\
	ldq $22,8($20)						\n\
	ldq $23,8($21)						\n\
	ldq $24,16($17)						\n\
	ldq $25,16($18)						\n\
								\n\
	ldq $27,16($19)						\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
	ldq $28,16($20)						\n\
	xor $2,$3,$3		# 6 cycles from $3 load		\n\
								\n\
	ldq $0,16($21)						\n\
	xor $1,$3,$3						\n\
	ldq $1,24($17)						\n\
	xor $3,$4,$4		# 7 cycles from $4 load		\n\
								\n\
	stq $4,0($17)						\n\
	xor $5,$6,$6		# 7 cycles from $6 load		\n\
	xor $7,$22,$22		# 7 cycles from $22 load	\n\
	xor $6,$23,$23		# 7 cycles from $23 load	\n\
								\n\
	ldq $2,24($18)						\n\
	xor $22,$23,$23						\n\
	ldq $3,24($19)						\n\
	xor $24,$25,$25		# 8 cycles from $25 load	\n\
								\n\
	stq $23,8($17)						\n\
	xor $25,$27,$27		# 8 cycles from $27 load	\n\
	ldq $4,24($20)						\n\
	xor $28,$0,$0		# 7 cycles from $0 load		\n\
								\n\
	ldq $5,24($21)						\n\
	xor $27,$0,$0						\n\
	ldq $6,32($17)						\n\
	ldq $7,32($18)						\n\
								\n\
	stq $0,16($17)						\n\
	xor $1,$2,$2		# 6 cycles from $2 load		\n\
	ldq $22,32($19)						\n\
	xor $3,$4,$4		# 4 cycles from $4 load		\n\
								\n\
	ldq $23,32($20)						\n\
	xor $2,$4,$4						\n\
	ldq $24,32($21)						\n\
	ldq $25,40($17)						\n\
								\n\
	ldq $27,40($18)						\n\
	ldq $28,40($19)						\n\
	ldq $0,40($20)						\n\
	xor $4,$5,$5		# 7 cycles from $5 load		\n\
								\n\
	stq $5,24($17)						\n\
	xor $6,$7,$7		# 7 cycles from $7 load		\n\
	ldq $1,40($21)						\n\
	ldq $2,48($17)						\n\
								\n\
	ldq $3,48($18)						\n\
	xor $7,$22,$22		# 7 cycles from $22 load	\n\
	ldq $4,48($19)						\n\
	xor $23,$24,$24		# 6 cycles from $24 load	\n\
								\n\
	ldq $5,48($20)						\n\
	xor $22,$24,$24						\n\
	ldq $6,48($21)						\n\
	xor $25,$27,$27		# 7 cycles from $27 load	\n\
								\n\
	stq $24,32($17)						\n\
	xor $27,$28,$28		# 8 cycles from $28 load	\n\
	ldq $7,56($17)						\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
								\n\
	ldq $22,56($18)						\n\
	ldq $23,56($19)						\n\
	ldq $24,56($20)						\n\
	ldq $25,56($21)						\n\
								\n\
	xor $28,$1,$1						\n\
	xor $2,$3,$3		# 9 cycles from $3 load		\n\
	xor $3,$4,$4		# 9 cycles from $4 load		\n\
	xor $5,$6,$6		# 8 cycles from $6 load		\n\
								\n\
	stq $1,40($17)						\n\
	xor $4,$6,$6						\n\
	xor $7,$22,$22		# 7 cycles from $22 load	\n\
	xor $23,$24,$24		# 6 cycles from $24 load	\n\
								\n\
	stq $6,48($17)						\n\
	xor $22,$24,$24						\n\
	subq $16,1,$16						\n\
	xor $24,$25,$25		# 8 cycles from $25 load	\n\
								\n\
	stq $25,56($17)						\n\
	addq $21,64,$21						\n\
	addq $20,64,$20						\n\
	addq $19,64,$19						\n\
								\n\
	addq $18,64,$18						\n\
	addq $17,64,$17						\n\
	bgt $16,5b						\n\
	ret							\n\
	.end xor_alpha_5					\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_prefetch_2				\n\
xor_alpha_prefetch_2:						\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
								\n\
	ldq $31, 0($17)						\n\
	ldq $31, 0($18)						\n\
								\n\
	ldq $31, 64($17)					\n\
	ldq $31, 64($18)					\n\
								\n\
	ldq $31, 128($17)					\n\
	ldq $31, 128($18)					\n\
								\n\
	ldq $31, 192($17)					\n\
	ldq $31, 192($18)					\n\
	.align 4						\n\
2:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,8($17)						\n\
	ldq $3,8($18)						\n\
								\n\
	ldq $4,16($17)						\n\
	ldq $5,16($18)						\n\
	ldq $6,24($17)						\n\
	ldq $7,24($18)						\n\
								\n\
	ldq $19,32($17)						\n\
	ldq $20,32($18)						\n\
	ldq $21,40($17)						\n\
	ldq $22,40($18)						\n\
								\n\
	ldq $23,48($17)						\n\
	ldq $24,48($18)						\n\
	ldq $25,56($17)						\n\
	ldq $27,56($18)						\n\
								\n\
	ldq $31,256($17)					\n\
	xor $0,$1,$0		# 8 cycles from $1 load		\n\
	ldq $31,256($18)					\n\
	xor $2,$3,$2						\n\
								\n\
	stq $0,0($17)						\n\
	xor $4,$5,$4						\n\
	stq $2,8($17)						\n\
	xor $6,$7,$6						\n\
								\n\
	stq $4,16($17)						\n\
	xor $19,$20,$19						\n\
	stq $6,24($17)						\n\
	xor $21,$22,$21						\n\
								\n\
	stq $19,32($17)						\n\
	xor $23,$24,$23						\n\
	stq $21,40($17)						\n\
	xor $25,$27,$25						\n\
								\n\
	stq $23,48($17)						\n\
	subq $16,1,$16						\n\
	stq $25,56($17)						\n\
	addq $17,64,$17						\n\
								\n\
	addq $18,64,$18						\n\
	bgt $16,2b						\n\
	ret							\n\
	.end xor_alpha_prefetch_2				\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_prefetch_3				\n\
xor_alpha_prefetch_3:						\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
								\n\
	ldq $31, 0($17)						\n\
	ldq $31, 0($18)						\n\
	ldq $31, 0($19)						\n\
								\n\
	ldq $31, 64($17)					\n\
	ldq $31, 64($18)					\n\
	ldq $31, 64($19)					\n\
								\n\
	ldq $31, 128($17)					\n\
	ldq $31, 128($18)					\n\
	ldq $31, 128($19)					\n\
								\n\
	ldq $31, 192($17)					\n\
	ldq $31, 192($18)					\n\
	ldq $31, 192($19)					\n\
	.align 4						\n\
3:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,0($19)						\n\
	ldq $3,8($17)						\n\
								\n\
	ldq $4,8($18)						\n\
	ldq $6,16($17)						\n\
	ldq $7,16($18)						\n\
	ldq $21,24($17)						\n\
								\n\
	ldq $22,24($18)						\n\
	ldq $24,32($17)						\n\
	ldq $25,32($18)						\n\
	ldq $5,8($19)						\n\
								\n\
	ldq $20,16($19)						\n\
	ldq $23,24($19)						\n\
	ldq $27,32($19)						\n\
	nop							\n\
								\n\
	xor $0,$1,$1		# 8 cycles from $0 load		\n\
	xor $3,$4,$4		# 7 cycles from $4 load		\n\
	xor $6,$7,$7		# 6 cycles from $7 load		\n\
	xor $21,$22,$22		# 5 cycles from $22 load	\n\
								\n\
	xor $1,$2,$2		# 9 cycles from $2 load		\n\
	xor $24,$25,$25		# 5 cycles from $25 load	\n\
	stq $2,0($17)						\n\
	xor $4,$5,$5		# 6 cycles from $5 load		\n\
								\n\
	stq $5,8($17)						\n\
	xor $7,$20,$20		# 7 cycles from $20 load	\n\
	stq $20,16($17)						\n\
	xor $22,$23,$23		# 7 cycles from $23 load	\n\
								\n\
	stq $23,24($17)						\n\
	xor $25,$27,$27		# 7 cycles from $27 load	\n\
	stq $27,32($17)						\n\
	nop							\n\
								\n\
	ldq $0,40($17)						\n\
	ldq $1,40($18)						\n\
	ldq $3,48($17)						\n\
	ldq $4,48($18)						\n\
								\n\
	ldq $6,56($17)						\n\
	ldq $7,56($18)						\n\
	ldq $2,40($19)						\n\
	ldq $5,48($19)						\n\
								\n\
	ldq $20,56($19)						\n\
	ldq $31,256($17)					\n\
	ldq $31,256($18)					\n\
	ldq $31,256($19)					\n\
								\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
	xor $3,$4,$4		# 5 cycles from $4 load		\n\
	xor $6,$7,$7		# 5 cycles from $7 load		\n\
	xor $1,$2,$2		# 4 cycles from $2 load		\n\
								\n\
	xor $4,$5,$5		# 5 cycles from $5 load		\n\
	xor $7,$20,$20		# 4 cycles from $20 load	\n\
	stq $2,40($17)						\n\
	subq $16,1,$16						\n\
								\n\
	stq $5,48($17)						\n\
	addq $19,64,$19						\n\
	stq $20,56($17)						\n\
	addq $18,64,$18						\n\
								\n\
	addq $17,64,$17						\n\
	bgt $16,3b						\n\
	ret							\n\
	.end xor_alpha_prefetch_3				\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_prefetch_4				\n\
xor_alpha_prefetch_4:						\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
								\n\
	ldq $31, 0($17)						\n\
	ldq $31, 0($18)						\n\
	ldq $31, 0($19)						\n\
	ldq $31, 0($20)						\n\
								\n\
	ldq $31, 64($17)					\n\
	ldq $31, 64($18)					\n\
	ldq $31, 64($19)					\n\
	ldq $31, 64($20)					\n\
								\n\
	ldq $31, 128($17)					\n\
	ldq $31, 128($18)					\n\
	ldq $31, 128($19)					\n\
	ldq $31, 128($20)					\n\
								\n\
	ldq $31, 192($17)					\n\
	ldq $31, 192($18)					\n\
	ldq $31, 192($19)					\n\
	ldq $31, 192($20)					\n\
	.align 4						\n\
4:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,0($19)						\n\
	ldq $3,0($20)						\n\
								\n\
	ldq $4,8($17)						\n\
	ldq $5,8($18)						\n\
	ldq $6,8($19)						\n\
	ldq $7,8($20)						\n\
								\n\
	ldq $21,16($17)						\n\
	ldq $22,16($18)						\n\
	ldq $23,16($19)						\n\
	ldq $24,16($20)						\n\
								\n\
	ldq $25,24($17)						\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
	ldq $27,24($18)						\n\
	xor $2,$3,$3		# 6 cycles from $3 load		\n\
								\n\
	ldq $0,24($19)						\n\
	xor $1,$3,$3						\n\
	ldq $1,24($20)						\n\
	xor $4,$5,$5		# 7 cycles from $5 load		\n\
								\n\
	stq $3,0($17)						\n\
	xor $6,$7,$7						\n\
	xor $21,$22,$22		# 7 cycles from $22 load	\n\
	xor $5,$7,$7						\n\
								\n\
	stq $7,8($17)						\n\
	xor $23,$24,$24		# 7 cycles from $24 load	\n\
	ldq $2,32($17)						\n\
	xor $22,$24,$24						\n\
								\n\
	ldq $3,32($18)						\n\
	ldq $4,32($19)						\n\
	ldq $5,32($20)						\n\
	xor $25,$27,$27		# 8 cycles from $27 load	\n\
								\n\
	ldq $6,40($17)						\n\
	ldq $7,40($18)						\n\
	ldq $21,40($19)						\n\
	ldq $22,40($20)						\n\
								\n\
	stq $24,16($17)						\n\
	xor $0,$1,$1		# 9 cycles from $1 load		\n\
	xor $2,$3,$3		# 5 cycles from $3 load		\n\
	xor $27,$1,$1						\n\
								\n\
	stq $1,24($17)						\n\
	xor $4,$5,$5		# 5 cycles from $5 load		\n\
	ldq $23,48($17)						\n\
	xor $3,$5,$5						\n\
								\n\
	ldq $24,48($18)						\n\
	ldq $25,48($19)						\n\
	ldq $27,48($20)						\n\
	ldq $0,56($17)						\n\
								\n\
	ldq $1,56($18)						\n\
	ldq $2,56($19)						\n\
	ldq $3,56($20)						\n\
	xor $6,$7,$7		# 8 cycles from $6 load		\n\
								\n\
	ldq $31,256($17)					\n\
	xor $21,$22,$22		# 8 cycles from $22 load	\n\
	ldq $31,256($18)					\n\
	xor $7,$22,$22						\n\
								\n\
	ldq $31,256($19)					\n\
	xor $23,$24,$24		# 6 cycles from $24 load	\n\
	ldq $31,256($20)					\n\
	xor $25,$27,$27		# 6 cycles from $27 load	\n\
								\n\
	stq $5,32($17)						\n\
	xor $24,$27,$27						\n\
	xor $0,$1,$1		# 7 cycles from $1 load		\n\
	xor $2,$3,$3		# 6 cycles from $3 load		\n\
								\n\
	stq $22,40($17)						\n\
	xor $1,$3,$3						\n\
	stq $27,48($17)						\n\
	subq $16,1,$16						\n\
								\n\
	stq $3,56($17)						\n\
	addq $20,64,$20						\n\
	addq $19,64,$19						\n\
	addq $18,64,$18						\n\
								\n\
	addq $17,64,$17						\n\
	bgt $16,4b						\n\
	ret							\n\
	.end xor_alpha_prefetch_4				\n\
								\n\
	.align 3						\n\
	.ent xor_alpha_prefetch_5				\n\
xor_alpha_prefetch_5:						\n\
	.prologue 0						\n\
	srl $16, 6, $16						\n\
								\n\
	ldq $31, 0($17)						\n\
	ldq $31, 0($18)						\n\
	ldq $31, 0($19)						\n\
	ldq $31, 0($20)						\n\
	ldq $31, 0($21)						\n\
								\n\
	ldq $31, 64($17)					\n\
	ldq $31, 64($18)					\n\
	ldq $31, 64($19)					\n\
	ldq $31, 64($20)					\n\
	ldq $31, 64($21)					\n\
								\n\
	ldq $31, 128($17)					\n\
	ldq $31, 128($18)					\n\
	ldq $31, 128($19)					\n\
	ldq $31, 128($20)					\n\
	ldq $31, 128($21)					\n\
								\n\
	ldq $31, 192($17)					\n\
	ldq $31, 192($18)					\n\
	ldq $31, 192($19)					\n\
	ldq $31, 192($20)					\n\
	ldq $31, 192($21)					\n\
	.align 4						\n\
5:								\n\
	ldq $0,0($17)						\n\
	ldq $1,0($18)						\n\
	ldq $2,0($19)						\n\
	ldq $3,0($20)						\n\
								\n\
	ldq $4,0($21)						\n\
	ldq $5,8($17)						\n\
	ldq $6,8($18)						\n\
	ldq $7,8($19)						\n\
								\n\
	ldq $22,8($20)						\n\
	ldq $23,8($21)						\n\
	ldq $24,16($17)						\n\
	ldq $25,16($18)						\n\
								\n\
	ldq $27,16($19)						\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
	ldq $28,16($20)						\n\
	xor $2,$3,$3		# 6 cycles from $3 load		\n\
								\n\
	ldq $0,16($21)						\n\
	xor $1,$3,$3						\n\
	ldq $1,24($17)						\n\
	xor $3,$4,$4		# 7 cycles from $4 load		\n\
								\n\
	stq $4,0($17)						\n\
	xor $5,$6,$6		# 7 cycles from $6 load		\n\
	xor $7,$22,$22		# 7 cycles from $22 load	\n\
	xor $6,$23,$23		# 7 cycles from $23 load	\n\
								\n\
	ldq $2,24($18)						\n\
	xor $22,$23,$23						\n\
	ldq $3,24($19)						\n\
	xor $24,$25,$25		# 8 cycles from $25 load	\n\
								\n\
	stq $23,8($17)						\n\
	xor $25,$27,$27		# 8 cycles from $27 load	\n\
	ldq $4,24($20)						\n\
	xor $28,$0,$0		# 7 cycles from $0 load		\n\
								\n\
	ldq $5,24($21)						\n\
	xor $27,$0,$0						\n\
	ldq $6,32($17)						\n\
	ldq $7,32($18)						\n\
								\n\
	stq $0,16($17)						\n\
	xor $1,$2,$2		# 6 cycles from $2 load		\n\
	ldq $22,32($19)						\n\
	xor $3,$4,$4		# 4 cycles from $4 load		\n\
								\n\
	ldq $23,32($20)						\n\
	xor $2,$4,$4						\n\
	ldq $24,32($21)						\n\
	ldq $25,40($17)						\n\
								\n\
	ldq $27,40($18)						\n\
	ldq $28,40($19)						\n\
	ldq $0,40($20)						\n\
	xor $4,$5,$5		# 7 cycles from $5 load		\n\
								\n\
	stq $5,24($17)						\n\
	xor $6,$7,$7		# 7 cycles from $7 load		\n\
	ldq $1,40($21)						\n\
	ldq $2,48($17)						\n\
								\n\
	ldq $3,48($18)						\n\
	xor $7,$22,$22		# 7 cycles from $22 load	\n\
	ldq $4,48($19)						\n\
	xor $23,$24,$24		# 6 cycles from $24 load	\n\
								\n\
	ldq $5,48($20)						\n\
	xor $22,$24,$24						\n\
	ldq $6,48($21)						\n\
	xor $25,$27,$27		# 7 cycles from $27 load	\n\
								\n\
	stq $24,32($17)						\n\
	xor $27,$28,$28		# 8 cycles from $28 load	\n\
	ldq $7,56($17)						\n\
	xor $0,$1,$1		# 6 cycles from $1 load		\n\
								\n\
	ldq $22,56($18)						\n\
	ldq $23,56($19)						\n\
	ldq $24,56($20)						\n\
	ldq $25,56($21)						\n\
								\n\
	ldq $31,256($17)					\n\
	xor $28,$1,$1						\n\
	ldq $31,256($18)					\n\
	xor $2,$3,$3		# 9 cycles from $3 load		\n\
								\n\
	ldq $31,256($19)					\n\
	xor $3,$4,$4		# 9 cycles from $4 load		\n\
	ldq $31,256($20)					\n\
	xor $5,$6,$6		# 8 cycles from $6 load		\n\
								\n\
	stq $1,40($17)						\n\
	xor $4,$6,$6						\n\
	xor $7,$22,$22		# 7 cycles from $22 load	\n\
	xor $23,$24,$24		# 6 cycles from $24 load	\n\
								\n\
	stq $6,48($17)						\n\
	xor $22,$24,$24						\n\
	ldq $31,256($21)					\n\
	xor $24,$25,$25		# 8 cycles from $25 load	\n\
								\n\
	stq $25,56($17)						\n\
	subq $16,1,$16						\n\
	addq $21,64,$21						\n\
	addq $20,64,$20						\n\
								\n\
	addq $19,64,$19						\n\
	addq $18,64,$18						\n\
	addq $17,64,$17						\n\
	bgt $16,5b						\n\
								\n\
	ret							\n\
	.end xor_alpha_prefetch_5				\n\
");

static struct xor_block_template xor_block_alpha = {
	.name	= "alpha",
	.do_2	= xor_alpha_2,
	.do_3	= xor_alpha_3,
	.do_4	= xor_alpha_4,
	.do_5	= xor_alpha_5,
};

static struct xor_block_template xor_block_alpha_prefetch = {
	.name	= "alpha prefetch",
	.do_2	= xor_alpha_prefetch_2,
	.do_3	= xor_alpha_prefetch_3,
	.do_4	= xor_alpha_prefetch_4,
	.do_5	= xor_alpha_prefetch_5,
};

/* For grins, also test the generic routines.  */
#include <asm-generic/xor.h>

#undef XOR_TRY_TEMPLATES
#define XOR_TRY_TEMPLATES				\
	do {						\
		xor_speed(&xor_block_8regs);		\
		xor_speed(&xor_block_32regs);		\
		xor_speed(&xor_block_alpha);		\
		xor_speed(&xor_block_alpha_prefetch);	\
	} while (0)

/* Force the use of alpha_prefetch if EV6, as it is significantly
   faster in the cold cache case.  */
#define XOR_SELECT_TEMPLATE(FASTEST) \
	(implver() == IMPLVER_EV6 ? &xor_block_alpha_prefetch : FASTEST)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #ifndef __ALPHA_COMPILER_H
#define __ALPHA_COMPILER_H

#include <uapi/asm/compiler.h>

/* Some idiots over in <linux/compiler.h> thought inline should imply
   always_inline.  This breaks stuff.  We'll include this file whenever
   we run into such problems.  */

#include <linux/compiler.h>
#undef inline
#undef __inline__
#undef __inline
#undef __always_inline
#define __always_inline		inline __attribute__((always_inline))

#endif /* __ALPHA_COMPILER_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef __ALPHA_PCI_H
#define __ALPHA_PCI_H

#ifdef __KERNEL__

#include <linux/spinlock.h>
#include <linux/dma-mapping.h>
#include <linux/scatterlist.h>
#include <asm/machvec.h>

/*
 * The following structure is used to manage multiple PCI busses.
 */

struct pci_dev;
struct pci_bus;
struct resource;
struct pci_iommu_arena;
struct page;

/* A controller.  Used to manage multiple PCI busses.  */

struct pci_controller {
	struct pci_controller *next;
        struct pci_bus *bus;
	struct resource *io_space;
	struct resource *mem_space;

	/* The following are for reporting to userland.  The invariant is
	   that if we report a BWX-capable dense memory, we do not report
	   a sparse memory at all, even if it exists.  */
	unsigned long sparse_mem_base;
	unsigned long dense_mem_base;
	unsigned long sparse_io_base;
	unsigned long dense_io_base;

	/* This one's for the kernel only.  It's in KSEG somewhere.  */
	unsigned long config_space_base;

	unsigned int index;
	/* For compatibility with current (as of July 2003) pciutils
	   and XFree86. Eventually will be removed. */
	unsigned int need_domain_info;

	struct pci_iommu_arena *sg_pci;
	struct pci_iommu_arena *sg_isa;

	void *sysdata;
};

/* Override the logic in pci_scan_bus for skipping already-configured
   bus numbers.  */

#define pcibios_assign_all_busses()	1

#define PCIBIOS_MIN_IO		alpha_mv.min_io_address
#define PCIBIOS_MIN_MEM		alpha_mv.min_mem_address

extern void pcibios_set_master(struct pci_dev *dev);

/* IOMMU controls.  */

/* The PCI address space does not equal the physical memory address space.
   The networking and block device layers use this boolean for bounce buffer
   decisions.  */
#define PCI_DMA_BUS_IS_PHYS  0

/* TODO: integrate with include/asm-generic/pci.h ? */
static inline int pci_get_legacy_ide_irq(struct pci_dev *dev, int channel)
{
	return channel ? 15 : 14;
}

#define pci_domain_nr(bus) ((struct pci_controller *)(bus)->sysdata)->index

static inline int pci_proc_domain(struct pci_bus *bus)
{
	struct pci_controller *hose = bus->sysdata;
	return hose->need_domain_info;
}

#endif /* __KERNEL__ */

/* Values for the `which' argument to sys_pciconfig_iobase.  */
#define IOBASE_HOSE		0
#define IOBASE_SPARSE_MEM	1
#define IOBASE_DENSE_MEM	2
#define IOBASE_SPARSE_IO	3
#define IOBASE_DENSE_IO		4
#define IOBASE_ROOT_BUS		5
#define IOBASE_FROM_HOSE	0x10000

extern struct pci_dev *isa_bridge;

extern int pci_legacy_read(struct pci_bus *bus, loff_t port, u32 *val,
			   size_t count);
extern int pci_legacy_write(struct pci_bus *bus, loff_t port, u32 val,
			    size_t count);
extern int pci_mmap_legacy_page_range(struct pci_bus *bus,
				      struct vm_area_struct *vma,
				      enum pci_mmap_state mmap_state);
extern void pci_adjust_legacy_attr(struct pci_bus *bus,
				   enum pci_mmap_state mmap_type);
#define HAVE_PCI_LEGACY	1

extern int pci_create_resource_files(struct pci_dev *dev);
extern void pci_remove_resource_files(struct pci_dev *dev);

#endif /* __ALPHA_PCI_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #ifndef _ALPHA_ATOMIC_H
#define _ALPHA_ATOMIC_H

#include <linux/types.h>
#include <asm/barrier.h>
#include <asm/cmpxchg.h>

/*
 * Atomic operations that C can't guarantee us.  Useful for
 * resource counting etc...
 *
 * But use these as seldom as possible since they are much slower
 * than regular operations.
 */


#define ATOMIC_INIT(i)		{ (i) }
#define ATOMIC64_INIT(i)	{ (i) }

#define atomic_read(v)		READ_ONCE((v)->counter)
#define atomic64_read(v)	READ_ONCE((v)->counter)

#define atomic_set(v,i)		WRITE_ONCE((v)->counter, (i))
#define atomic64_set(v,i)	WRITE_ONCE((v)->counter, (i))

/*
 * To get proper branch prediction for the main line, we must branch
 * forward to code at the end of this object's .text section, then
 * branch back to restart the operation.
 */

#define ATOMIC_OP(op, asm_op)						\
static __inline__ void atomic_##op(int i, atomic_t * v)			\
{									\
	unsigned long temp;						\
	__asm__ __volatile__(						\
	"1:	ldl_l %0,%1\n"						\
	"	" #asm_op " %0,%2,%0\n"					\
	"	stl_c %0,%1\n"						\
	"	beq %0,2f\n"						\
	".subsection 2\n"						\
	"2:	br 1b\n"						\
	".previous"							\
	:"=&r" (temp), "=m" (v->counter)				\
	:"Ir" (i), "m" (v->counter));					\
}									\

#define ATOMIC_OP_RETURN(op, asm_op)					\
static inline int atomic_##op##_return_relaxed(int i, atomic_t *v)	\
{									\
	long temp, result;						\
	__asm__ __volatile__(						\
	"1:	ldl_l %0,%1\n"						\
	"	" #asm_op " %0,%3,%2\n"					\
	"	" #asm_op " %0,%3,%0\n"					\
	"	stl_c %0,%1\n"						\
	"	beq %0,2f\n"						\
	".subsection 2\n"						\
	"2:	br 1b\n"						\
	".previous"							\
	:"=&r" (temp), "=m" (v->counter), "=&r" (result)		\
	:"Ir" (i), "m" (v->counter) : "memory");			\
	return result;							\
}

#define ATOMIC_FETCH_OP(op, asm_op)					\
static inline int atomic_fetch_##op##_relaxed(int i, atomic_t *v)	\
{									\
	long temp, result;						\
	__asm__ __volatile__(						\
	"1:	ldl_l %2,%1\n"						\
	"	" #asm_op " %2,%3,%0\n"					\
	"	stl_c %0,%1\n"						\
	"	beq %0,2f\n"						\
	".subsection 2\n"						\
	"2:	br 1b\n"						\
	".previous"							\
	:"=&r" (temp), "=m" (v->counter), "=&r" (result)		\
	:"Ir" (i), "m" (v->counter) : "memory");			\
	return result;							\
}

#define ATOMIC64_OP(op, asm_op)						\
static __inline__ void atomic64_##op(long i, atomic64_t * v)		\
{									\
	unsigned long temp;						\
	__asm__ __volatile__(						\
	"1:	ldq_l %0,%1\n"						\
	"	" #asm_op " %0,%2,%0\n"					\
	"	stq_c %0,%1\n"						\
	"	beq %0,2f\n"						\
	".subsection 2\n"						\
	"2:	br 1b\n"						\
	".previous"							\
	:"=&r" (temp), "=m" (v->counter)				\
	:"Ir" (i), "m" (v->counter));					\
}									\

#define ATOMIC64_OP_RETURN(op, asm_op)					\
static __inline__ long atomic64_##op##_return_relaxed(long i, atomic64_t * v)	\
{									\
	long temp, result;						\
	__asm__ __volatile__(						\
	"1:	ldq_l %0,%1\n"						\
	"	" #asm_op " %0,%3,%2\n"					\
	"	" #asm_op " %0,%3,%0\n"					\
	"	stq_c %0,%1\n"						\
	"	beq %0,2f\n"						\
	".subsection 2\n"						\
	"2:	br 1b\n"						\
	".previous"							\
	:"=&r" (temp), "=m" (v->counter), "=&r" (result)		\
	:"Ir" (i), "m" (v->counter) : "memory");			\
	return result;							\
}

#define ATOMIC64_FETCH_OP(op, asm_op)					\
static __inline__ long atomic64_fetch_##op##_relaxed(long i, atomic64_t * v)	\
{									\
	long temp, result;						\
	__asm__ __volatile__(						\
	"1:	ldq_l %2,%1\n"						\
	"	" #asm_op " %2,%3,%0\n"					\
	"	stq_c %0,%1\n"						\
	"	beq %0,2f\n"						\
	".subsection 2\n"						\
	"2:	br 1b\n"						\
	".previous"							\
	:"=&r" (temp), "=m" (v->counter), "=&r" (result)		\
	:"Ir" (i), "m" (v->counter) : "memory");			\
	return result;							\
}

#define ATOMIC_OPS(op)							\
	ATOMIC_OP(op, op##l)						\
	ATOMIC_OP_RETURN(op, op##l)					\
	ATOMIC_FETCH_OP(op, op##l)					\
	ATOMIC64_OP(op, op##q)						\
	ATOMIC64_OP_RETURN(op, op##q)					\
	ATOMIC64_FETCH_OP(op, op##q)

ATOMIC_OPS(add)
ATOMIC_OPS(sub)

#define atomic_add_return_relaxed	atomic_add_return_relaxed
#define atomic_sub_return_relaxed	atomic_sub_return_relaxed
#define atomic_fetch_add_relaxed	atomic_fetch_add_relaxed
#define atomic_fetch_sub_relaxed	atomic_fetch_sub_relaxed

#define atomic64_add_return_relaxed	atomic64_add_return_relaxed
#define atomic64_sub_return_relaxed	atomic64_sub_return_relaxed
#define atomic64_fetch_add_relaxed	atomic64_fetch_add_relaxed
#define atomic64_fetch_sub_relaxed	atomic64_fetch_sub_relaxed

#define atomic_andnot atomic_andnot
#define atomic64_andnot atomic64_andnot

#undef ATOMIC_OPS
#define ATOMIC_OPS(op, asm)						\
	ATOMIC_OP(op, asm)						\
	ATOMIC_FETCH_OP(op, asm)					\
	ATOMIC64_OP(op, asm)						\
	ATOMIC64_FETCH_OP(op, asm)

ATOMIC_OPS(and, and)
ATOMIC_OPS(andnot, bic)
ATOMIC_OPS(or, bis)
ATOMIC_OPS(xor, xor)

#define atomic_fetch_and_relaxed	atomic_fetch_and_relaxed
#define atomic_fetch_andnot_relaxed	atomic_fetch_andnot_relaxed
#define atomic_fetch_or_relaxed		atomic_fetch_or_relaxed
#define atomic_fetch_xor_relaxed	atomic_fetch_xor_relaxed

#define atomic64_fetch_and_relaxed	atomic64_fetch_and_relaxed
#define atomic64_fetch_andnot_relaxed	atomic64_fetch_andnot_relaxed
#define atomic64_fetch_or_relaxed	atomic64_fetch_or_relaxed
#define atomic64_fetch_xor_relaxed	atomic64_fetch_xor_relaxed

#undef ATOMIC_OPS
#undef ATOMIC64_FETCH_OP
#undef ATOMIC64_OP_RETURN
#undef ATOMIC64_OP
#undef ATOMIC_FETCH_OP
#undef ATOMIC_OP_RETURN
#undef ATOMIC_OP

#define atomic64_cmpxchg(v, old, new) (cmpxchg(&((v)->counter), old, new))
#define atomic64_xchg(v, new) (xchg(&((v)->counter), new))

#define atomic_cmpxchg(v, old, new) (cmpxchg(&((v)->counter), old, new))
#define atomic_xchg(v, new) (xchg(&((v)->counter), new))

/**
 * __atomic_add_unless - add unless the number is a given value
 * @v: pointer of type atomic_t
 * @a: the amount to add to v...
 * @u: ...unless v is equal to u.
 *
 * Atomically adds @a to @v, so long as it was not @u.
 * Returns the old value of @v.
 */
static __inline__ int __atomic_add_unless(atomic_t *v, int a, int u)
{
	int c, new, old;
	smp_mb();
	__asm__ __volatile__(
	"1:	ldl_l	%[old],%[mem]\n"
	"	cmpeq	%[old],%[u],%[c]\n"
	"	addl	%[old],%[a],%[new]\n"
	"	bne	%[c],2f\n"
	"	stl_c	%[new],%[mem]\n"
	"	beq	%[new],3f\n"
	"2:\n"
	".subsection 2\n"
	"3:	br	1b\n"
	".previous"
	: [old] "=&r"(old), [new] "=&r"(new), [c] "=&r"(c)
	: [mem] "m"(*v), [a] "rI"(a), [u] "rI"((long)u)
	: "memory");
	smp_mb();
	return old;
}


/**
 * atomic64_add_unless - add unless the number is a given value
 * @v: pointer of type atomic64_t
 * @a: the amount to add to v...
 * @u: ...unless v is equal to u.
 *
 * Atomically adds @a to @v, so long as it was not @u.
 * Returns true iff @v was not @u.
 */
static __inline__ int atomic64_add_unless(atomic64_t *v, long a, long u)
{
	long c, tmp;
	smp_mb();
	__asm__ __volatile__(
	"1:	ldq_l	%[tmp],%[mem]\n"
	"	cmpeq	%[tmp],%[u],%[c]\n"
	"	addq	%[tmp],%[a],%[tmp]\n"
	"	bne	%[c],2f\n"
	"	stq_c	%[tmp],%[mem]\n"
	"	beq	%[tmp],3f\n"
	"2:\n"
	".subsection 2\n"
	"3:	br	1b\n"
	".previous"
	: [tmp] "=&r"(tmp), [c] "=&r"(c)
	: [mem] "m"(*v), [a] "rI"(a), [u] "rI"(u)
	: "memory");
	smp_mb();
	return !c;
}

/*
 * atomic64_dec_if_positive - decrement by 1 if old value positive
 * @v: pointer of type atomic_t
 *
 * The function returns the old value of *v minus 1, even if
 * the atomic variable, v, was not decremented.
 */
static inline long atomic64_dec_if_positive(atomic64_t *v)
{
	long old, tmp;
	smp_mb();
	__asm__ __volatile__(
	"1:	ldq_l	%[old],%[mem]\n"
	"	subq	%[old],1,%[tmp]\n"
	"	ble	%[old],2f\n"
	"	stq_c	%[tmp],%[mem]\n"
	"	beq	%[tmp],3f\n"
	"2:\n"
	".subsection 2\n"
	"3:	br	1b\n"
	".previous"
	: [old] "=&r"(old), [tmp] "=&r"(tmp)
	: [mem] "m"(*v)
	: "memory");
	smp_mb();
	return old - 1;
}

#define atomic64_inc_not_zero(v) atomic64_add_unless((v), 1, 0)

#define atomic_add_negative(a, v) (atomic_add_return((a), (v)) < 0)
#define atomic64_add_negative(a, v) (atomic64_add_return((a), (v)) < 0)

#define atomic_dec_return(v) atomic_sub_return(1,(v))
#define atomic64_dec_return(v) atomic64_sub_return(1,(v))

#define atomic_inc_return(v) atomic_add_return(1,(v))
#define atomic64_inc_return(v) atomic64_add_return(1,(v))

#define atomic_sub_and_test(i,v) (atomic_sub_return((i), (v)) == 0)
#define atomic64_sub_and_test(i,v) (atomic64_sub_return((i), (v)) == 0)

#define atomic_inc_and_test(v) (atomic_add_return(1, (v)) == 0)
#define atomic64_inc_and_test(v) (atomic64_add_return(1, (v)) == 0)

#define atomic_dec_and_test(v) (atomic_sub_return(1, (v)) == 0)
#define atomic64_dec_and_test(v) (atomic64_sub_return(1, (v)) == 0)

#define atomic_inc(v) atomic_add(1,(v))
#define atomic64_inc(v) atomic64_add(1,(v))

#define atomic_dec(v) atomic_sub(1,(v))
#define atomic64_dec(v) atomic64_sub(1,(v))

#endif /* _ALPHA_ATOMIC_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  #ifndef _ASM_FB_H_
#define _ASM_FB_H_
#include <linux/device.h>

/* Caching is off in the I/O space quadrant by design.  */
#define fb_pgprotect(...) do {} while (0)

static inline int fb_is_primary_device(struct fb_info *info)
{
	return 0;
}

#endif /* _ASM_FB_H_ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef __ALPHA_SWITCH_TO_H
#define __ALPHA_SWITCH_TO_H


struct task_struct;
extern struct task_struct *alpha_switch_to(unsigned long, struct task_struct *);

#define switch_to(P,N,L)						 \
  do {									 \
    (L) = alpha_switch_to(virt_to_phys(&task_thread_info(N)->pcb), (P)); \
    check_mmu_context();						 \
  } while (0)

#endif /* __ALPHA_SWITCH_TO_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /* empty */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ASM_ALPHA_TOPOLOGY_H
#define _ASM_ALPHA_TOPOLOGY_H

#include <linux/smp.h>
#include <linux/threads.h>
#include <asm/machvec.h>

#ifdef CONFIG_NUMA
static inline int cpu_to_node(int cpu)
{
	int node;
	
	if (!alpha_mv.cpuid_to_nid)
		return 0;

	node = alpha_mv.cpuid_to_nid(cpu);

#ifdef DEBUG_NUMA
	BUG_ON(node < 0);
#endif

	return node;
}

extern struct cpumask node_to_cpumask_map[];
/* FIXME: This is dumb, recalculating every time.  But simple. */
static const struct cpumask *cpumask_of_node(int node)
{
	int cpu;

	if (node == -1)
		return cpu_all_mask;

	cpumask_clear(&node_to_cpumask_map[node]);

	for_each_online_cpu(cpu) {
		if (cpu_to_node(cpu) == node)
			cpumask_set_cpu(cpu, node_to_cpumask_map[node]);
	}

	return &node_to_cpumask_map[node];
}

#define cpumask_of_pcibus(bus)	(cpu_online_mask)

#endif /* !CONFIG_NUMA */
# include <asm-generic/topology.h>

#endif /* _ASM_ALPHA_TOPOLOGY_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          #ifndef __ALPHA_STRING_H__
#define __ALPHA_STRING_H__

#ifdef __KERNEL__

/*
 * GCC of any recent vintage doesn't do stupid things with bcopy.
 * EGCS 1.1 knows all about expanding memcpy inline, others don't.
 *
 * Similarly for a memset with data = 0.
 */

#define __HAVE_ARCH_MEMCPY
extern void * memcpy(void *, const void *, size_t);
#define __HAVE_ARCH_MEMMOVE
extern void * memmove(void *, const void *, size_t);

/* For backward compatibility with modules.  Unused otherwise.  */
extern void * __memcpy(void *, const void *, size_t);

#define memcpy __builtin_memcpy

#define __HAVE_ARCH_MEMSET
extern void * __constant_c_memset(void *, unsigned long, size_t);
extern void * ___memset(void *, int, size_t);
extern void * __memset(void *, int, size_t);
extern void * memset(void *, int, size_t);

/* For gcc 3.x, we cannot have the inline function named "memset" because
   the __builtin_memset will attempt to resolve to the inline as well,
   leading to a "sorry" about unimplemented recursive inlining.  */
extern inline void *__memset(void *s, int c, size_t n)
{
	if (__builtin_constant_p(c)) {
		if (__builtin_constant_p(n)) {
			return __builtin_memset(s, c, n);
		} else {
			unsigned long c8 = (c & 0xff) * 0x0101010101010101UL;
			return __constant_c_memset(s, c8, n);
		}
	}
	return ___memset(s, c, n);
}

#define memset __memset

#define __HAVE_ARCH_STRCPY
extern char * strcpy(char *,const char *);
#define __HAVE_ARCH_STRNCPY
extern char * strncpy(char *, const char *, size_t);
#define __HAVE_ARCH_STRCAT
extern char * strcat(char *, const char *);
#define __HAVE_ARCH_STRNCAT
extern char * strncat(char *, const char *, size_t);
#define __HAVE_ARCH_STRCHR
extern char * strchr(const char *,int);
#define __HAVE_ARCH_STRRCHR
extern char * strrchr(const char *,int);
#define __HAVE_ARCH_STRLEN
extern size_t strlen(const char *);
#define __HAVE_ARCH_MEMCHR
extern void * memchr(const void *, int, size_t);

/* The following routine is like memset except that it writes 16-bit
   aligned values.  The DEST and COUNT parameters must be even for 
   correct operation.  */

#define __HAVE_ARCH_MEMSETW
extern void * __memsetw(void *dest, unsigned short, size_t count);

#define memsetw(s, c, n)						 \
(__builtin_constant_p(c)						 \
 ? __constant_c_memset((s),0x0001000100010001UL*(unsigned short)(c),(n)) \
 : __memsetw((s),(c),(n)))

#endif /* __KERNEL__ */

#endif /* __ALPHA_STRING_H__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #ifndef _ALPHA_PAGE_H
#define _ALPHA_PAGE_H

#include <linux/const.h>
#include <asm/pal.h>

/* PAGE_SHIFT determines the page size */
#define PAGE_SHIFT	13
#define PAGE_SIZE	(_AC(1,UL) << PAGE_SHIFT)
#define PAGE_MASK	(~(PAGE_SIZE-1))

#ifndef __ASSEMBLY__

#define STRICT_MM_TYPECHECKS

extern void clear_page(void *page);
#define clear_user_page(page, vaddr, pg)	clear_page(page)

#define __alloc_zeroed_user_highpage(movableflags, vma, vaddr) \
	alloc_page_vma(GFP_HIGHUSER | __GFP_ZERO | movableflags, vma, vmaddr)
#define __HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE

extern void copy_page(void * _to, void * _from);
#define copy_user_page(to, from, vaddr, pg)	copy_page(to, from)

#ifdef STRICT_MM_TYPECHECKS
/*
 * These are used to make use of C type-checking..
 */
typedef struct { unsigned long pte; } pte_t;
typedef struct { unsigned long pmd; } pmd_t;
typedef struct { unsigned long pgd; } pgd_t;
typedef struct { unsigned long pgprot; } pgprot_t;

#define pte_val(x)	((x).pte)
#define pmd_val(x)	((x).pmd)
#define pgd_val(x)	((x).pgd)
#define pgprot_val(x)	((x).pgprot)

#define __pte(x)	((pte_t) { (x) } )
#define __pmd(x)	((pmd_t) { (x) } )
#define __pgd(x)	((pgd_t) { (x) } )
#define __pgprot(x)	((pgprot_t) { (x) } )

#else
/*
 * .. while these make it easier on the compiler
 */
typedef unsigned long pte_t;
typedef unsigned long pmd_t;
typedef unsigned long pgd_t;
typedef unsigned long pgprot_t;

#define pte_val(x)	(x)
#define pmd_val(x)	(x)
#define pgd_val(x)	(x)
#define pgprot_val(x)	(x)

#define __pte(x)	(x)
#define __pgd(x)	(x)
#define __pgprot(x)	(x)

#endif /* STRICT_MM_TYPECHECKS */

typedef struct page *pgtable_t;

#ifdef USE_48_BIT_KSEG
#define PAGE_OFFSET		0xffff800000000000UL
#else
#define PAGE_OFFSET		0xfffffc0000000000UL
#endif

#else

#ifdef USE_48_BIT_KSEG
#define PAGE_OFFSET		0xffff800000000000
#else
#define PAGE_OFFSET		0xfffffc0000000000
#endif

#endif /* !__ASSEMBLY__ */

#define __pa(x)			((unsigned long) (x) - PAGE_OFFSET)
#define __va(x)			((void *)((unsigned long) (x) + PAGE_OFFSET))
#ifndef CONFIG_DISCONTIGMEM
#define virt_to_page(kaddr)	pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)

#define pfn_valid(pfn)		((pfn) < max_mapnr)
#define virt_addr_valid(kaddr)	pfn_valid(__pa(kaddr) >> PAGE_SHIFT)
#endif /* CONFIG_DISCONTIGMEM */

#define VM_DATA_DEFAULT_FLAGS		(VM_READ | VM_WRITE | VM_EXEC | \
					 VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)

#include <asm-generic/memory_model.h>
#include <asm-generic/getorder.h>

#endif /* _ALPHA_PAGE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _ALPHA_TERMIOS_H
#define _ALPHA_TERMIOS_H

#include <uapi/asm/termios.h>

/*	eof=^D		eol=\0		eol2=\0		erase=del
	werase=^W	kill=^U		reprint=^R	sxtc=\0
	intr=^C		quit=^\		susp=^Z		<OSF/1 VDSUSP>
	start=^Q	stop=^S		lnext=^V	discard=^U
	vmin=\1		vtime=\0
*/
#define INIT_C_CC "\004\000\000\177\027\025\022\000\003\034\032\000\021\023\026\025\001\000"

/*
 * Translate a "termio" structure into a "termios". Ugh.
 */

#define user_termio_to_kernel_termios(a_termios, u_termio)			\
({										\
	struct ktermios *k_termios = (a_termios);				\
	struct termio k_termio;							\
	int canon, ret;								\
										\
	ret = copy_from_user(&k_termio, u_termio, sizeof(k_termio));		\
	if (!ret) {								\
		/* Overwrite only the low bits.  */				\
		*(unsigned short *)&k_termios->c_iflag = k_termio.c_iflag;	\
		*(unsigned short *)&k_termios->c_oflag = k_termio.c_oflag;	\
		*(unsigned short *)&k_termios->c_cflag = k_termio.c_cflag;	\
		*(unsigned short *)&k_termios->c_lflag = k_termio.c_lflag;	\
		canon = k_termio.c_lflag & ICANON;				\
										\
		k_termios->c_cc[VINTR]  = k_termio.c_cc[_VINTR];		\
		k_termios->c_cc[VQUIT]  = k_termio.c_cc[_VQUIT];		\
		k_termios->c_cc[VERASE] = k_termio.c_cc[_VERASE];		\
		k_termios->c_cc[VKILL]  = k_termio.c_cc[_VKILL];		\
		k_termios->c_cc[VEOL2]  = k_termio.c_cc[_VEOL2];		\
		k_termios->c_cc[VSWTC]  = k_termio.c_cc[_VSWTC];		\
		k_termios->c_cc[canon ? VEOF : VMIN]  = k_termio.c_cc[_VEOF];	\
		k_termios->c_cc[canon ? VEOL : VTIME] = k_termio.c_cc[_VEOL];	\
	}									\
	ret;									\
})

/*
 * Translate a "termios" structure into a "termio". Ugh.
 *
 * Note the "fun" _VMIN overloading.
 */
#define kernel_termios_to_user_termio(u_termio, a_termios)		\
({									\
	struct ktermios *k_termios = (a_termios);			\
	struct termio k_termio;						\
	int canon;							\
									\
	k_termio.c_iflag = k_termios->c_iflag;				\
	k_termio.c_oflag = k_termios->c_oflag;				\
	k_termio.c_cflag = k_termios->c_cflag;				\
	canon = (k_termio.c_lflag = k_termios->c_lflag) & ICANON;	\
									\
	k_termio.c_line = k_termios->c_line;				\
	k_termio.c_cc[_VINTR]  = k_termios->c_cc[VINTR];		\
	k_termio.c_cc[_VQUIT]  = k_termios->c_cc[VQUIT];		\
	k_termio.c_cc[_VERASE] = k_termios->c_cc[VERASE];		\
	k_termio.c_cc[_VKILL]  = k_termios->c_cc[VKILL];		\
	k_termio.c_cc[_VEOF]   = k_termios->c_cc[canon ? VEOF : VMIN];	\
	k_termio.c_cc[_VEOL]   = k_termios->c_cc[canon ? VEOL : VTIME];	\
	k_termio.c_cc[_VEOL2]  = k_termios->c_cc[VEOL2];		\
	k_termio.c_cc[_VSWTC]  = k_termios->c_cc[VSWTC];		\
									\
	copy_to_user(u_termio, &k_termio, sizeof(k_termio));		\
})

#define user_termios_to_kernel_termios(k, u) \
	copy_from_user(k, u, sizeof(struct termios))

#define kernel_termios_to_user_termios(u, k) \
	copy_to_user(u, k, sizeof(struct termios))

#endif	/* _ALPHA_TERMIOS_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #ifndef _ALPHA_PGTABLE_H
#define _ALPHA_PGTABLE_H

#include <asm-generic/4level-fixup.h>

/*
 * This file contains the functions and defines necessary to modify and use
 * the Alpha page table tree.
 *
 * This hopefully works with any standard Alpha page-size, as defined
 * in <asm/page.h> (currently 8192).
 */
#include <linux/mmzone.h>

#include <asm/page.h>
#include <asm/processor.h>	/* For TASK_SIZE */
#include <asm/machvec.h>
#include <asm/setup.h>

struct mm_struct;
struct vm_area_struct;

/* Certain architectures need to do special things when PTEs
 * within a page table are directly modified.  Thus, the following
 * hook is made available.
 */
#define set_pte(pteptr, pteval) ((*(pteptr)) = (pteval))
#define set_pte_at(mm,addr,ptep,pteval) set_pte(ptep,pteval)

/* PMD_SHIFT determines the size of the area a second-level page table can map */
#define PMD_SHIFT	(PAGE_SHIFT + (PAGE_SHIFT-3))
#define PMD_SIZE	(1UL << PMD_SHIFT)
#define PMD_MASK	(~(PMD_SIZE-1))

/* PGDIR_SHIFT determines what a third-level page table entry can map */
#define PGDIR_SHIFT	(PAGE_SHIFT + 2*(PAGE_SHIFT-3))
#define PGDIR_SIZE	(1UL << PGDIR_SHIFT)
#define PGDIR_MASK	(~(PGDIR_SIZE-1))

/*
 * Entries per page directory level:  the Alpha is three-level, with
 * all levels having a one-page page table.
 */
#define PTRS_PER_PTE	(1UL << (PAGE_SHIFT-3))
#define PTRS_PER_PMD	(1UL << (PAGE_SHIFT-3))
#define PTRS_PER_PGD	(1UL << (PAGE_SHIFT-3))
#define USER_PTRS_PER_PGD	(TASK_SIZE / PGDIR_SIZE)
#define FIRST_USER_ADDRESS	0UL

/* Number of pointers that fit on a page:  this will go away. */
#define PTRS_PER_PAGE	(1UL << (PAGE_SHIFT-3))

#ifdef CONFIG_ALPHA_LARGE_VMALLOC
#define VMALLOC_START		0xfffffe0000000000
#else
#define VMALLOC_START		(-2*PGDIR_SIZE)
#endif
#define VMALLOC_END		(-PGDIR_SIZE)

/*
 * OSF/1 PAL-code-imposed page table bits
 */
#define _PAGE_VALID	0x0001
#define _PAGE_FOR	0x0002	/* used for page protection (fault on read) */
#define _PAGE_FOW	0x0004	/* used for page protection (fault on write) */
#define _PAGE_FOE	0x0008	/* used for page protection (fault on exec) */
#define _PAGE_ASM	0x0010
#define _PAGE_KRE	0x0100	/* xxx - see below on the "accessed" bit */
#define _PAGE_URE	0x0200	/* xxx */
#define _PAGE_KWE	0x1000	/* used to do the dirty bit in software */
#define _PAGE_UWE	0x2000	/* used to do the dirty bit in software */

/* .. and these are ours ... */
#define _PAGE_DIRTY	0x20000
#define _PAGE_ACCESSED	0x40000

/*
 * NOTE! The "accessed" bit isn't necessarily exact:  it can be kept exactly
 * by software (use the KRE/URE/KWE/UWE bits appropriately), but I'll fake it.
 * Under Linux/AXP, the "accessed" bit just means "read", and I'll just use
 * the KRE/URE bits to watch for it. That way we don't need to overload the
 * KWE/UWE bits with both handling dirty and accessed.
 *
 * Note that the kernel uses the accessed bit just to check whether to page
 * out a page or not, so it doesn't have to be exact anyway.
 */

#define __DIRTY_BITS	(_PAGE_DIRTY | _PAGE_KWE | _PAGE_UWE)
#define __ACCESS_BITS	(_PAGE_ACCESSED | _PAGE_KRE | _PAGE_URE)

#define _PFN_MASK	0xFFFFFFFF00000000UL

#define _PAGE_TABLE	(_PAGE_VALID | __DIRTY_BITS | __ACCESS_BITS)
#define _PAGE_CHG_MASK	(_PFN_MASK | __DIRTY_BITS | __ACCESS_BITS)

/*
 * All the normal masks have the "page accessed" bits on, as any time they are used,
 * the page is accessed. They are cleared only by the page-out routines
 */
#define PAGE_NONE	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOR | _PAGE_FOW | _PAGE_FOE)
#define PAGE_SHARED	__pgprot(_PAGE_VALID | __ACCESS_BITS)
#define PAGE_COPY	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOW)
#define PAGE_READONLY	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOW)
#define PAGE_KERNEL	__pgprot(_PAGE_VALID | _PAGE_ASM | _PAGE_KRE | _PAGE_KWE)

#define _PAGE_NORMAL(x) __pgprot(_PAGE_VALID | __ACCESS_BITS | (x))

#define _PAGE_P(x) _PAGE_NORMAL((x) | (((x) & _PAGE_FOW)?0:_PAGE_FOW))
#define _PAGE_S(x) _PAGE_NORMAL(x)

/*
 * The hardware can handle write-only mappings, but as the Alpha
 * architecture does byte-wide writes with a read-modify-write
 * sequence, it's not practical to have write-without-read privs.
 * Thus the "-w- -> rw-" and "-wx -> rwx" mapping here (and in
 * arch/alpha/mm/fault.c)
 */
	/* xwr */
#define __P000	_PAGE_P(_PAGE_FOE | _PAGE_FOW | _PAGE_FOR)
#define __P001	_PAGE_P(_PAGE_FOE | _PAGE_FOW)
#define __P010	_PAGE_P(_PAGE_FOE)
#define __P011	_PAGE_P(_PAGE_FOE)
#define __P100	_PAGE_P(_PAGE_FOW | _PAGE_FOR)
#define __P101	_PAGE_P(_PAGE_FOW)
#define __P110	_PAGE_P(0)
#define __P111	_PAGE_P(0)

#define __S000	_PAGE_S(_PAGE_FOE | _PAGE_FOW | _PAGE_FOR)
#define __S001	_PAGE_S(_PAGE_FOE | _PAGE_FOW)
#define __S010	_PAGE_S(_PAGE_FOE)
#define __S011	_PAGE_S(_PAGE_FOE)
#define __S100	_PAGE_S(_PAGE_FOW | _PAGE_FOR)
#define __S101	_PAGE_S(_PAGE_FOW)
#define __S110	_PAGE_S(0)
#define __S111	_PAGE_S(0)

/*
 * pgprot_noncached() is only for infiniband pci support, and a real
 * implementation for RAM would be more complicated.
 */
#define pgprot_noncached(prot)	(prot)

/*
 * BAD_PAGETABLE is used when we need a bogus page-table, while
 * BAD_PAGE is used for a bogus page.
 *
 * ZERO_PAGE is a global shared page that is always zero:  used
 * for zero-mapped memory areas etc..
 */
extern pte_t __bad_page(void);
extern pmd_t * __bad_pagetable(void);

extern unsigned long __zero_page(void);

#define BAD_PAGETABLE	__bad_pagetable()
#define BAD_PAGE	__bad_page()
#define ZERO_PAGE(vaddr)	(virt_to_page(ZERO_PGE))

/* number of bits that fit into a memory pointer */
#define BITS_PER_PTR			(8*sizeof(unsigned long))

/* to align the pointer to a pointer address */
#define PTR_MASK			(~(sizeof(void*)-1))

/* sizeof(void*)==1<<SIZEOF_PTR_LOG2 */
#define SIZEOF_PTR_LOG2			3

/* to find an entry in a page-table */
#define PAGE_PTR(address)		\
  ((unsigned long)(address)>>(PAGE_SHIFT-SIZEOF_PTR_LOG2)&PTR_MASK&~PAGE_MASK)

/*
 * On certain platforms whose physical address space can overlap KSEG,
 * namely EV6 and above, we must re-twiddle the physaddr to restore the
 * correct high-order bits.
 *
 * This is extremely confusing until you realize that this is actually
 * just working around a userspace bug.  The X server was intending to
 * provide the physical address but instead provided the KSEG address.
 * Or tried to, except it's not representable.
 * 
 * On Tsunami there's nothing meaningful at 0x40000000000, so this is
 * a safe thing to do.  Come the first core logic that does put something
 * in this area -- memory or whathaveyou -- then this hack will have
 * to go away.  So be prepared!
 */

#if defined(CONFIG_ALPHA_GENERIC) && defined(USE_48_BIT_KSEG)
#error "EV6-only feature in a generic kernel"
#endif
#if defined(CONFIG_ALPHA_GENERIC) || \
    (defined(CONFIG_ALPHA_EV6) && !defined(USE_48_BIT_KSEG))
#define KSEG_PFN	(0xc0000000000UL >> PAGE_SHIFT)
#define PHYS_TWIDDLE(pfn) \
  ((((pfn) & KSEG_PFN) == (0x40000000000UL >> PAGE_SHIFT)) \
  ? ((pfn) ^= KSEG_PFN) : (pfn))
#else
#define PHYS_TWIDDLE(pfn) (pfn)
#endif

/*
 * Conversion functions:  convert a page and protection to a page entry,
 * and a page entry and page directory to the page they refer to.
 */
#ifndef CONFIG_DISCONTIGMEM
#define page_to_pa(page)	(((page) - mem_map) << PAGE_SHIFT)

#define pte_pfn(pte)	(pte_val(pte) >> 32)
#define pte_page(pte)	pfn_to_page(pte_pfn(pte))
#define mk_pte(page, pgprot)						\
({									\
	pte_t pte;							\
									\
	pte_val(pte) = (page_to_pfn(page) << 32) | pgprot_val(pgprot);	\
	pte;								\
})
#endif

extern inline pte_t pfn_pte(unsigned long physpfn, pgprot_t pgprot)
{ pte_t pte; pte_val(pte) = (PHYS_TWIDDLE(physpfn) << 32) | pgprot_val(pgprot); return pte; }

extern inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
{ pte_val(pte) = (pte_val(pte) & _PAGE_CHG_MASK) | pgprot_val(newprot); return pte; }

extern inline void pmd_set(pmd_t * pmdp, pte_t * ptep)
{ pmd_val(*pmdp) = _PAGE_TABLE | ((((unsigned long) ptep) - PAGE_OFFSET) << (32-PAGE_SHIFT)); }

extern inline void pgd_set(pgd_t * pgdp, pmd_t * pmdp)
{ pgd_val(*pgdp) = _PAGE_TABLE | ((((unsigned long) pmdp) - PAGE_OFFSET) << (32-PAGE_SHIFT)); }


extern inline unsigned long
pmd_page_vaddr(pmd_t pmd)
{
	return ((pmd_val(pmd) & _PFN_MASK) >> (32-PAGE_SHIFT)) + PAGE_OFFSET;
}

#ifndef CONFIG_DISCONTIGMEM
#define pmd_page(pmd)	(mem_map + ((pmd_val(pmd) & _PFN_MASK) >> 32))
#define pgd_page(pgd)	(mem_map + ((pgd_val(pgd) & _PFN_MASK) >> 32))
#endif

extern inline unsigned long pgd_page_vaddr(pgd_t pgd)
{ return PAGE_OFFSET + ((pgd_val(pgd) & _PFN_MASK) >> (32-PAGE_SHIFT)); }

extern inline int pte_none(pte_t pte)		{ return !pte_val(pte); }
extern inline int pte_present(pte_t pte)	{ return pte_val(pte) & _PAGE_VALID; }
extern inline void pte_clear(struct mm_struct *mm, unsigned long addr, pte_t *ptep)
{
	pte_val(*ptep) = 0;
}

extern inline int pmd_none(pmd_t pmd)		{ return !pmd_val(pmd); }
extern inline int pmd_bad(pmd_t pmd)		{ return (pmd_val(pmd) & ~_PFN_MASK) != _PAGE_TABLE; }
extern inline int pmd_present(pmd_t pmd)	{ return pmd_val(pmd) & _PAGE_VALID; }
extern inline void pmd_clear(pmd_t * pmdp)	{ pmd_val(*pmdp) = 0; }

extern inline int pgd_none(pgd_t pgd)		{ return !pgd_val(pgd); }
extern inline int pgd_bad(pgd_t pgd)		{ return (pgd_val(pgd) & ~_PFN_MASK) != _PAGE_TABLE; }
extern inline int pgd_present(pgd_t pgd)	{ return pgd_val(pgd) & _PAGE_VALID; }
extern inline void pgd_clear(pgd_t * pgdp)	{ pgd_val(*pgdp) = 0; }

/*
 * The following only work if pte_present() is true.
 * Undefined behaviour if not..
 */
extern inline int pte_write(pte_t pte)		{ return !(pte_val(pte) & _PAGE_FOW); }
extern inline int pte_dirty(pte_t pte)		{ return pte_val(pte) & _PAGE_DIRTY; }
extern inline int pte_young(pte_t pte)		{ return pte_val(pte) & _PAGE_ACCESSED; }
extern inline int pte_special(pte_t pte)	{ return 0; }

extern inline pte_t pte_wrprotect(pte_t pte)	{ pte_val(pte) |= _PAGE_FOW; return pte; }
extern inline pte_t pte_mkclean(pte_t pte)	{ pte_val(pte) &= ~(__DIRTY_BITS); return pte; }
extern inline pte_t pte_mkold(pte_t pte)	{ pte_val(pte) &= ~(__ACCESS_BITS); return pte; }
extern inline pte_t pte_mkwrite(pte_t pte)	{ pte_val(pte) &= ~_PAGE_FOW; return pte; }
extern inline pte_t pte_mkdirty(pte_t pte)	{ pte_val(pte) |= __DIRTY_BITS; return pte; }
extern inline pte_t pte_mkyoung(pte_t pte)	{ pte_val(pte) |= __ACCESS_BITS; return pte; }
extern inline pte_t pte_mkspecial(pte_t pte)	{ return pte; }

#define PAGE_DIR_OFFSET(tsk,address) pgd_offset((tsk),(address))

/* to find an entry in a kernel page-table-directory */
#define pgd_offset_k(address) pgd_offset(&init_mm, (address))

/* to find an entry in a page-table-directory. */
#define pgd_index(address)	(((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD-1))
#define pgd_offset(mm, address)	((mm)->pgd+pgd_index(address))

/*
 * The smp_read_barrier_depends() in the following functions are required to
 * order the load of *dir (the pointer in the top level page table) with any
 * subsequent load of the returned pmd_t *ret (ret is data dependent on *dir).
 *
 * If this ordering is not enforced, the CPU might load an older value of
 * *ret, which may be uninitialized data. See mm/memory.c:__pte_alloc for
 * more details.
 *
 * Note that we never change the mm->pgd pointer after the task is running, so
 * pgd_offset does not require such a barrier.
 */

/* Find an entry in the second-level page table.. */
extern inline pmd_t * pmd_offset(pgd_t * dir, unsigned long address)
{
	pmd_t *ret = (pmd_t *) pgd_page_vaddr(*dir) + ((address >> PMD_SHIFT) & (PTRS_PER_PAGE - 1));
	smp_read_barrier_depends(); /* see above */
	return ret;
}

/* Find an entry in the third-level page table.. */
extern inline pte_t * pte_offset_kernel(pmd_t * dir, unsigned long address)
{
	pte_t *ret = (pte_t *) pmd_page_vaddr(*dir)
		+ ((address >> PAGE_SHIFT) & (PTRS_PER_PAGE - 1));
	smp_read_barrier_depends(); /* see above */
	return ret;
}

#define pte_offset_map(dir,addr)	pte_offset_kernel((dir),(addr))
#define pte_unmap(pte)			do { } while (0)

extern pgd_t swapper_pg_dir[1024];

/*
 * The Alpha doesn't have any external MMU info:  the kernel page
 * tables contain all the necessary information.
 */
extern inline void update_mmu_cache(struct vm_area_struct * vma,
	unsigned long address, pte_t *ptep)
{
}

/*
 * Non-present pages:  high 24 bits are offset, next 8 bits type,
 * low 32 bits zero.
 */
extern inline pte_t mk_swap_pte(unsigned long type, unsigned long offset)
{ pte_t pte; pte_val(pte) = (type << 32) | (offset << 40); return pte; }

#define __swp_type(x)		(((x).val >> 32) & 0xff)
#define __swp_offset(x)		((x).val >> 40)
#define __swp_entry(type, off)	((swp_entry_t) { pte_val(mk_swap_pte((type), (off))) })
#define __pte_to_swp_entry(pte)	((swp_entry_t) { pte_val(pte) })
#define __swp_entry_to_pte(x)	((pte_t) { (x).val })

#ifndef CONFIG_DISCONTIGMEM
#define kern_addr_valid(addr)	(1)
#endif

#define pte_ERROR(e) \
	printk("%s:%d: bad pte %016lx.\n", __FILE__, __LINE__, pte_val(e))
#define pmd_ERROR(e) \
	printk("%s:%d: bad pmd %016lx.\n", __FILE__, __LINE__, pmd_val(e))
#define pgd_ERROR(e) \
	printk("%s:%d: bad pgd %016lx.\n", __FILE__, __LINE__, pgd_val(e))

extern void paging_init(void);

#include <asm-generic/pgtable.h>

/*
 * No page table caches to initialise
 */
#define pgtable_cache_init()	do { } while (0)

/* We have our own get_unmapped_area to cope with ADDR_LIMIT_32BIT.  */
#define HAVE_ARCH_UNMAPPED_AREA

#endif /* _ALPHA_PGTABLE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef __ALPHA_MMU_CONTEXT_H
#define __ALPHA_MMU_CONTEXT_H

/*
 * get a new mmu context..
 *
 * Copyright (C) 1996, Linus Torvalds
 */

#include <asm/machvec.h>
#include <asm/compiler.h>
#include <asm-generic/mm_hooks.h>

/*
 * Force a context reload. This is needed when we change the page
 * table pointer or when we update the ASN of the current process.
 */

/* Don't get into trouble with dueling __EXTERN_INLINEs.  */
#ifndef __EXTERN_INLINE
#include <asm/io.h>
#endif


static inline unsigned long
__reload_thread(struct pcb_struct *pcb)
{
	register unsigned long a0 __asm__("$16");
	register unsigned long v0 __asm__("$0");

	a0 = virt_to_phys(pcb);
	__asm__ __volatile__(
		"call_pal %2 #__reload_thread"
		: "=r"(v0), "=r"(a0)
		: "i"(PAL_swpctx), "r"(a0)
		: "$1", "$22", "$23", "$24", "$25");

	return v0;
}


/*
 * The maximum ASN's the processor supports.  On the EV4 this is 63
 * but the PAL-code doesn't actually use this information.  On the
 * EV5 this is 127, and EV6 has 255.
 *
 * On the EV4, the ASNs are more-or-less useless anyway, as they are
 * only used as an icache tag, not for TB entries.  On the EV5 and EV6,
 * ASN's also validate the TB entries, and thus make a lot more sense.
 *
 * The EV4 ASN's don't even match the architecture manual, ugh.  And
 * I quote: "If a processor implements address space numbers (ASNs),
 * and the old PTE has the Address Space Match (ASM) bit clear (ASNs
 * in use) and the Valid bit set, then entries can also effectively be
 * made coherent by assigning a new, unused ASN to the currently
 * running process and not reusing the previous ASN before calling the
 * appropriate PALcode routine to invalidate the translation buffer (TB)". 
 *
 * In short, the EV4 has a "kind of" ASN capability, but it doesn't actually
 * work correctly and can thus not be used (explaining the lack of PAL-code
 * support).
 */
#define EV4_MAX_ASN 63
#define EV5_MAX_ASN 127
#define EV6_MAX_ASN 255

#ifdef CONFIG_ALPHA_GENERIC
# define MAX_ASN	(alpha_mv.max_asn)
#else
# ifdef CONFIG_ALPHA_EV4
#  define MAX_ASN	EV4_MAX_ASN
# elif defined(CONFIG_ALPHA_EV5)
#  define MAX_ASN	EV5_MAX_ASN
# else
#  define MAX_ASN	EV6_MAX_ASN
# endif
#endif

/*
 * cpu_last_asn(processor):
 * 63                                            0
 * +-------------+----------------+--------------+
 * | asn version | this processor | hardware asn |
 * +-------------+----------------+--------------+
 */

#include <asm/smp.h>
#ifdef CONFIG_SMP
#define cpu_last_asn(cpuid)	(cpu_data[cpuid].last_asn)
#else
extern unsigned long last_asn;
#define cpu_last_asn(cpuid)	last_asn
#endif /* CONFIG_SMP */

#define WIDTH_HARDWARE_ASN	8
#define ASN_FIRST_VERSION (1UL << WIDTH_HARDWARE_ASN)
#define HARDWARE_ASN_MASK ((1UL << WIDTH_HARDWARE_ASN) - 1)

/*
 * NOTE! The way this is set up, the high bits of the "asn_cache" (and
 * the "mm->context") are the ASN _version_ code. A version of 0 is
 * always considered invalid, so to invalidate another process you only
 * need to do "p->mm->context = 0".
 *
 * If we need more ASN's than the processor has, we invalidate the old
 * user TLB's (tbiap()) and start a new ASN version. That will automatically
 * force a new asn for any other processes the next time they want to
 * run.
 */

#ifndef __EXTERN_INLINE
#define __EXTERN_INLINE extern inline
#define __MMU_EXTERN_INLINE
#endif

extern inline unsigned long
__get_new_mm_context(struct mm_struct *mm, long cpu)
{
	unsigned long asn = cpu_last_asn(cpu);
	unsigned long next = asn + 1;

	if ((asn & HARDWARE_ASN_MASK) >= MAX_ASN) {
		tbiap();
		imb();
		next = (asn & ~HARDWARE_ASN_MASK) + ASN_FIRST_VERSION;
	}
	cpu_last_asn(cpu) = next;
	return next;
}

__EXTERN_INLINE void
ev5_switch_mm(struct mm_struct *prev_mm, struct mm_struct *next_mm,
	      struct task_struct *next)
{
	/* Check if our ASN is of an older version, and thus invalid. */
	unsigned long asn;
	unsigned long mmc;
	long cpu = smp_processor_id();

#ifdef CONFIG_SMP
	cpu_data[cpu].asn_lock = 1;
	barrier();
#endif
	asn = cpu_last_asn(cpu);
	mmc = next_mm->context[cpu];
	if ((mmc ^ asn) & ~HARDWARE_ASN_MASK) {
		mmc = __get_new_mm_context(next_mm, cpu);
		next_mm->context[cpu] = mmc;
	}
#ifdef CONFIG_SMP
	else
		cpu_data[cpu].need_new_asn = 1;
#endif

	/* Always update the PCB ASN.  Another thread may have allocated
	   a new mm->context (via flush_tlb_mm) without the ASN serial
	   number wrapping.  We have no way to detect when this is needed.  */
	task_thread_info(next)->pcb.asn = mmc & HARDWARE_ASN_MASK;
}

__EXTERN_INLINE void
ev4_switch_mm(struct mm_struct *prev_mm, struct mm_struct *next_mm,
	      struct task_struct *next)
{
	/* As described, ASN's are broken for TLB usage.  But we can
	   optimize for switching between threads -- if the mm is
	   unchanged from current we needn't flush.  */
	/* ??? May not be needed because EV4 PALcode recognizes that
	   ASN's are broken and does a tbiap itself on swpctx, under
	   the "Must set ASN or flush" rule.  At least this is true
	   for a 1992 SRM, reports Joseph Martin (jmartin@hlo.dec.com).
	   I'm going to leave this here anyway, just to Be Sure.  -- r~  */
	if (prev_mm != next_mm)
		tbiap();

	/* Do continue to allocate ASNs, because we can still use them
	   to avoid flushing the icache.  */
	ev5_switch_mm(prev_mm, next_mm, next);
}

extern void __load_new_mm_context(struct mm_struct *);

#ifdef CONFIG_SMP
#define check_mmu_context()					\
do {								\
	int cpu = smp_processor_id();				\
	cpu_data[cpu].asn_lock = 0;				\
	barrier();						\
	if (cpu_data[cpu].need_new_asn) {			\
		struct mm_struct * mm = current->active_mm;	\
		cpu_data[cpu].need_new_asn = 0;			\
		if (!mm->context[cpu])			\
			__load_new_mm_context(mm);		\
	}							\
} while(0)
#else
#define check_mmu_context()  do { } while(0)
#endif

__EXTERN_INLINE void
ev5_activate_mm(struct mm_struct *prev_mm, struct mm_struct *next_mm)
{
	__load_new_mm_context(next_mm);
}

__EXTERN_INLINE void
ev4_activate_mm(struct mm_struct *prev_mm, struct mm_struct *next_mm)
{
	__load_new_mm_context(next_mm);
	tbiap();
}

#define deactivate_mm(tsk,mm)	do { } while (0)

#ifdef CONFIG_ALPHA_GENERIC
# define switch_mm(a,b,c)	alpha_mv.mv_switch_mm((a),(b),(c))
# define activate_mm(x,y)	alpha_mv.mv_activate_mm((x),(y))
#else
# ifdef CONFIG_ALPHA_EV4
#  define switch_mm(a,b,c)	ev4_switch_mm((a),(b),(c))
#  define activate_mm(x,y)	ev4_activate_mm((x),(y))
# else
#  define switch_mm(a,b,c)	ev5_switch_mm((a),(b),(c))
#  define activate_mm(x,y)	ev5_activate_mm((x),(y))
# endif
#endif

static inline int
init_new_context(struct task_struct *tsk, struct mm_struct *mm)
{
	int i;

	for_each_online_cpu(i)
		mm->context[i] = 0;
	if (tsk != current)
		task_thread_info(tsk)->pcb.ptbr
		  = ((unsigned long)mm->pgd - IDENT_ADDR) >> PAGE_SHIFT;
	return 0;
}

extern inline void
destroy_context(struct mm_struct *mm)
{
	/* Nothing to do.  */
}

static inline void
enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
{
	task_thread_info(tsk)->pcb.ptbr
	  = ((unsigned long)mm->pgd - IDENT_ADDR) >> PAGE_SHIFT;
}

#ifdef __MMU_EXTERN_INLINE
#undef __EXTERN_INLINE
#undef __MMU_EXTERN_INLINE
#endif

#endif /* __ALPHA_MMU_CONTEXT_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     #ifndef _ALPHA_BUG_H
#define _ALPHA_BUG_H

#include <linux/linkage.h>

#ifdef CONFIG_BUG
#include <asm/pal.h>

/* ??? Would be nice to use .gprel32 here, but we can't be sure that the
   function loaded the GP, so this could fail in modules.  */
#define BUG()	do {							\
	__asm__ __volatile__(						\
		"call_pal %0  # bugchk\n\t"				\
		".long %1\n\t.8byte %2"					\
		: : "i"(PAL_bugchk), "i"(__LINE__), "i"(__FILE__));	\
	unreachable();							\
  } while (0)

#define HAVE_ARCH_BUG
#endif

#include <asm-generic/bug.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef _ASMAXP_UCONTEXT_H
#define _ASMAXP_UCONTEXT_H

struct ucontext {
	unsigned long	  uc_flags;
	struct ucontext  *uc_link;
	old_sigset_t	  uc_osf_sigmask;
	stack_t		  uc_stack;
	struct sigcontext uc_mcontext;
	sigset_t	  uc_sigmask;	/* mask last for extensibility */
};

#endif /* !_ASMAXP_UCONTEXT_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #ifndef _ASM_WORD_AT_A_TIME_H
#define _ASM_WORD_AT_A_TIME_H

#include <asm/compiler.h>

/*
 * word-at-a-time interface for Alpha.
 */

/*
 * We do not use the word_at_a_time struct on Alpha, but it needs to be
 * implemented to humour the generic code.
 */
struct word_at_a_time {
	const unsigned long unused;
};

#define WORD_AT_A_TIME_CONSTANTS { 0 }

/* Return nonzero if val has a zero */
static inline unsigned long has_zero(unsigned long val, unsigned long *bits, const struct word_at_a_time *c)
{
	unsigned long zero_locations = __kernel_cmpbge(0, val);
	*bits = zero_locations;
	return zero_locations;
}

static inline unsigned long prep_zero_mask(unsigned long val, unsigned long bits, const struct word_at_a_time *c)
{
	return bits;
}

#define create_zero_mask(bits) (bits)

static inline unsigned long find_zero(unsigned long bits)
{
#if defined(CONFIG_ALPHA_EV6) && defined(CONFIG_ALPHA_EV67)
	/* Simple if have CIX instructions */
	return __kernel_cttz(bits);
#else
	unsigned long t1, t2, t3;
	/* Retain lowest set bit only */
	bits &= -bits;
	/* Binary search for lowest set bit */
	t1 = bits & 0xf0;
	t2 = bits & 0xcc;
	t3 = bits & 0xaa;
	if (t1) t1 = 4;
	if (t2) t2 = 2;
	if (t3) t3 = 1;
	return t1 + t2 + t3;
#endif
}

#define zero_bytemask(mask) ((2ul << (find_zero(mask) * 8)) - 1)

#endif /* _ASM_WORD_AT_A_TIME_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*
 * include/asm-alpha/dma.h
 *
 * This is essentially the same as the i386 DMA stuff, as the AlphaPCs
 * use ISA-compatible dma.  The only extension is support for high-page
 * registers that allow to set the top 8 bits of a 32-bit DMA address.
 * This register should be written last when setting up a DMA address
 * as this will also enable DMA across 64 KB boundaries.
 */

/* $Id: dma.h,v 1.7 1992/12/14 00:29:34 root Exp root $
 * linux/include/asm/dma.h: Defines for using and allocating dma channels.
 * Written by Hennus Bergman, 1992.
 * High DMA channel support & info by Hannu Savolainen
 * and John Boyd, Nov. 1992.
 */

#ifndef _ASM_DMA_H
#define _ASM_DMA_H

#include <linux/spinlock.h>
#include <asm/io.h>

#define dma_outb	outb
#define dma_inb		inb

/*
 * NOTES about DMA transfers:
 *
 *  controller 1: channels 0-3, byte operations, ports 00-1F
 *  controller 2: channels 4-7, word operations, ports C0-DF
 *
 *  - ALL registers are 8 bits only, regardless of transfer size
 *  - channel 4 is not used - cascades 1 into 2.
 *  - channels 0-3 are byte - addresses/counts are for physical bytes
 *  - channels 5-7 are word - addresses/counts are for physical words
 *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries
 *  - transfer count loaded to registers is 1 less than actual count
 *  - controller 2 offsets are all even (2x offsets for controller 1)
 *  - page registers for 5-7 don't use data bit 0, represent 128K pages
 *  - page registers for 0-3 use bit 0, represent 64K pages
 *
 * DMA transfers are limited to the lower 16MB of _physical_ memory.  
 * Note that addresses loaded into registers must be _physical_ addresses,
 * not logical addresses (which may differ if paging is active).
 *
 *  Address mapping for channels 0-3:
 *
 *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)
 *    |  ...  |   |  ... |   |  ... |
 *    |  ...  |   |  ... |   |  ... |
 *    |  ...  |   |  ... |   |  ... |
 *   P7  ...  P0  A7 ... A0  A7 ... A0   
 * |    Page    | Addr MSB | Addr LSB |   (DMA registers)
 *
 *  Address mapping for channels 5-7:
 *
 *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)
 *    |  ...  |   \   \   ... \  \  \  ... \  \
 *    |  ...  |    \   \   ... \  \  \  ... \  (not used)
 *    |  ...  |     \   \   ... \  \  \  ... \
 *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0   
 * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)
 *
 * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses
 * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at
 * the hardware level, so odd-byte transfers aren't possible).
 *
 * Transfer count (_not # bytes_) is limited to 64K, represented as actual
 * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,
 * and up to 128K bytes may be transferred on channels 5-7 in one operation. 
 *
 */

#define MAX_DMA_CHANNELS	8

/*
  ISA DMA limitations on Alpha platforms,

  These may be due to SIO (PCI<->ISA bridge) chipset limitation, or
  just a wiring limit.
*/

/* The maximum address for ISA DMA transfer on Alpha XL, due to an
   hardware SIO limitation, is 64MB.
*/
#define ALPHA_XL_MAX_ISA_DMA_ADDRESS		0x04000000UL

/* The maximum address for ISA DMA transfer on RUFFIAN,
   due to an hardware SIO limitation, is 16MB.
*/
#define ALPHA_RUFFIAN_MAX_ISA_DMA_ADDRESS	0x01000000UL

/* The maximum address for ISA DMA transfer on SABLE, and some ALCORs,
   due to an hardware SIO chip limitation, is 2GB.
*/
#define ALPHA_SABLE_MAX_ISA_DMA_ADDRESS		0x80000000UL
#define ALPHA_ALCOR_MAX_ISA_DMA_ADDRESS		0x80000000UL

/*
  Maximum address for all the others is the complete 32-bit bus
  address space.
*/
#define ALPHA_MAX_ISA_DMA_ADDRESS		0x100000000UL

#ifdef CONFIG_ALPHA_GENERIC
# define MAX_ISA_DMA_ADDRESS		(alpha_mv.max_isa_dma_address)
#else
# if defined(CONFIG_ALPHA_XL)
#  define MAX_ISA_DMA_ADDRESS		ALPHA_XL_MAX_ISA_DMA_ADDRESS
# elif defined(CONFIG_ALPHA_RUFFIAN)
#  define MAX_ISA_DMA_ADDRESS		ALPHA_RUFFIAN_MAX_ISA_DMA_ADDRESS
# elif defined(CONFIG_ALPHA_SABLE)
#  define MAX_ISA_DMA_ADDRESS		ALPHA_SABLE_MAX_ISA_DMA_ADDRESS
# elif defined(CONFIG_ALPHA_ALCOR)
#  define MAX_ISA_DMA_ADDRESS		ALPHA_ALCOR_MAX_ISA_DMA_ADDRESS
# else
#  define MAX_ISA_DMA_ADDRESS		ALPHA_MAX_ISA_DMA_ADDRESS
# endif
#endif

/* If we have the iommu, we don't have any address limitations on DMA.
   Otherwise (Nautilus, RX164), we have to have 0-16 Mb DMA zone
   like i386. */
#define MAX_DMA_ADDRESS		(alpha_mv.mv_pci_tbi ?	\
				 ~0UL : IDENT_ADDR + 0x01000000)

/* 8237 DMA controllers */
#define IO_DMA1_BASE	0x00	/* 8 bit slave DMA, channels 0..3 */
#define IO_DMA2_BASE	0xC0	/* 16 bit master DMA, ch 4(=slave input)..7 */

/* DMA controller registers */
#define DMA1_CMD_REG		0x08	/* command register (w) */
#define DMA1_STAT_REG		0x08	/* status register (r) */
#define DMA1_REQ_REG            0x09    /* request register (w) */
#define DMA1_MASK_REG		0x0A	/* single-channel mask (w) */
#define DMA1_MODE_REG		0x0B	/* mode register (w) */
#define DMA1_CLEAR_FF_REG	0x0C	/* clear pointer flip-flop (w) */
#define DMA1_TEMP_REG           0x0D    /* Temporary Register (r) */
#define DMA1_RESET_REG		0x0D	/* Master Clear (w) */
#define DMA1_CLR_MASK_REG       0x0E    /* Clear Mask */
#define DMA1_MASK_ALL_REG       0x0F    /* all-channels mask (w) */
#define DMA1_EXT_MODE_REG	(0x400 | DMA1_MODE_REG)

#define DMA2_CMD_REG		0xD0	/* command register (w) */
#define DMA2_STAT_REG		0xD0	/* status register (r) */
#define DMA2_REQ_REG            0xD2    /* request register (w) */
#define DMA2_MASK_REG		0xD4	/* single-channel mask (w) */
#define DMA2_MODE_REG		0xD6	/* mode register (w) */
#define DMA2_CLEAR_FF_REG	0xD8	/* clear pointer flip-flop (w) */
#define DMA2_TEMP_REG           0xDA    /* Temporary Register (r) */
#define DMA2_RESET_REG		0xDA	/* Master Clear (w) */
#define DMA2_CLR_MASK_REG       0xDC    /* Clear Mask */
#define DMA2_MASK_ALL_REG       0xDE    /* all-channels mask (w) */
#define DMA2_EXT_MODE_REG	(0x400 | DMA2_MODE_REG)

#define DMA_ADDR_0              0x00    /* DMA address registers */
#define DMA_ADDR_1              0x02
#define DMA_ADDR_2              0x04
#define DMA_ADDR_3              0x06
#define DMA_ADDR_4              0xC0
#define DMA_ADDR_5              0xC4
#define DMA_ADDR_6              0xC8
#define DMA_ADDR_7              0xCC

#define DMA_CNT_0               0x01    /* DMA count registers */
#define DMA_CNT_1               0x03
#define DMA_CNT_2               0x05
#define DMA_CNT_3               0x07
#define DMA_CNT_4               0xC2
#define DMA_CNT_5               0xC6
#define DMA_CNT_6               0xCA
#define DMA_CNT_7               0xCE

#define DMA_PAGE_0              0x87    /* DMA page registers */
#define DMA_PAGE_1              0x83
#define DMA_PAGE_2              0x81
#define DMA_PAGE_3              0x82
#define DMA_PAGE_5              0x8B
#define DMA_PAGE_6              0x89
#define DMA_PAGE_7              0x8A

#define DMA_HIPAGE_0		(0x400 | DMA_PAGE_0)
#define DMA_HIPAGE_1		(0x400 | DMA_PAGE_1)
#define DMA_HIPAGE_2		(0x400 | DMA_PAGE_2)
#define DMA_HIPAGE_3		(0x400 | DMA_PAGE_3)
#define DMA_HIPAGE_4		(0x400 | DMA_PAGE_4)
#define DMA_HIPAGE_5		(0x400 | DMA_PAGE_5)
#define DMA_HIPAGE_6		(0x400 | DMA_PAGE_6)
#define DMA_HIPAGE_7		(0x400 | DMA_PAGE_7)

#define DMA_MODE_READ	0x44	/* I/O to memory, no autoinit, increment, single mode */
#define DMA_MODE_WRITE	0x48	/* memory to I/O, no autoinit, increment, single mode */
#define DMA_MODE_CASCADE 0xC0   /* pass thru DREQ->HRQ, DACK<-HLDA only */

#define DMA_AUTOINIT	0x10

extern spinlock_t  dma_spin_lock;

static __inline__ unsigned long claim_dma_lock(void)
{
	unsigned long flags;
	spin_lock_irqsave(&dma_spin_lock, flags);
	return flags;
}

static __inline__ void release_dma_lock(unsigned long flags)
{
	spin_unlock_irqrestore(&dma_spin_lock, flags);
}

/* enable/disable a specific DMA channel */
static __inline__ void enable_dma(unsigned int dmanr)
{
	if (dmanr<=3)
		dma_outb(dmanr,  DMA1_MASK_REG);
	else
		dma_outb(dmanr & 3,  DMA2_MASK_REG);
}

static __inline__ void disable_dma(unsigned int dmanr)
{
	if (dmanr<=3)
		dma_outb(dmanr | 4,  DMA1_MASK_REG);
	else
		dma_outb((dmanr & 3) | 4,  DMA2_MASK_REG);
}

/* Clear the 'DMA Pointer Flip Flop'.
 * Write 0 for LSB/MSB, 1 for MSB/LSB access.
 * Use this once to initialize the FF to a known state.
 * After that, keep track of it. :-)
 * --- In order to do that, the DMA routines below should ---
 * --- only be used while interrupts are disabled! ---
 */
static __inline__ void clear_dma_ff(unsigned int dmanr)
{
	if (dmanr<=3)
		dma_outb(0,  DMA1_CLEAR_FF_REG);
	else
		dma_outb(0,  DMA2_CLEAR_FF_REG);
}

/* set mode (above) for a specific DMA channel */
static __inline__ void set_dma_mode(unsigned int dmanr, char mode)
{
	if (dmanr<=3)
		dma_outb(mode | dmanr,  DMA1_MODE_REG);
	else
		dma_outb(mode | (dmanr&3),  DMA2_MODE_REG);
}

/* set extended mode for a specific DMA channel */
static __inline__ void set_dma_ext_mode(unsigned int dmanr, char ext_mode)
{
	if (dmanr<=3)
		dma_outb(ext_mode | dmanr,  DMA1_EXT_MODE_REG);
	else
		dma_outb(ext_mode | (dmanr&3),  DMA2_EXT_MODE_REG);
}

/* Set only the page register bits of the transfer address.
 * This is used for successive transfers when we know the contents of
 * the lower 16 bits of the DMA current address register.
 */
static __inline__ void set_dma_page(unsigned int dmanr, unsigned int pagenr)
{
	switch(dmanr) {
		case 0:
			dma_outb(pagenr, DMA_PAGE_0);
			dma_outb((pagenr >> 8), DMA_HIPAGE_0);
			break;
		case 1:
			dma_outb(pagenr, DMA_PAGE_1);
			dma_outb((pagenr >> 8), DMA_HIPAGE_1);
			break;
		case 2:
			dma_outb(pagenr, DMA_PAGE_2);
			dma_outb((pagenr >> 8), DMA_HIPAGE_2);
			break;
		case 3:
			dma_outb(pagenr, DMA_PAGE_3);
			dma_outb((pagenr >> 8), DMA_HIPAGE_3);
			break;
		case 5:
			dma_outb(pagenr & 0xfe, DMA_PAGE_5);
			dma_outb((pagenr >> 8), DMA_HIPAGE_5);
			break;
		case 6:
			dma_outb(pagenr & 0xfe, DMA_PAGE_6);
			dma_outb((pagenr >> 8), DMA_HIPAGE_6);
			break;
		case 7:
			dma_outb(pagenr & 0xfe, DMA_PAGE_7);
			dma_outb((pagenr >> 8), DMA_HIPAGE_7);
			break;
	}
}


/* Set transfer address & page bits for specific DMA channel.
 * Assumes dma flipflop is clear.
 */
static __inline__ void set_dma_addr(unsigned int dmanr, unsigned int a)
{
	if (dmanr <= 3)  {
	    dma_outb( a & 0xff, ((dmanr&3)<<1) + IO_DMA1_BASE );
            dma_outb( (a>>8) & 0xff, ((dmanr&3)<<1) + IO_DMA1_BASE );
	}  else  {
	    dma_outb( (a>>1) & 0xff, ((dmanr&3)<<2) + IO_DMA2_BASE );
	    dma_outb( (a>>9) & 0xff, ((dmanr&3)<<2) + IO_DMA2_BASE );
	}
	set_dma_page(dmanr, a>>16);	/* set hipage last to enable 32-bit mode */
}


/* Set transfer size (max 64k for DMA1..3, 128k for DMA5..7) for
 * a specific DMA channel.
 * You must ensure the parameters are valid.
 * NOTE: from a manual: "the number of transfers is one more
 * than the initial word count"! This is taken into account.
 * Assumes dma flip-flop is clear.
 * NOTE 2: "count" represents _bytes_ and must be even for channels 5-7.
 */
static __inline__ void set_dma_count(unsigned int dmanr, unsigned int count)
{
        count--;
	if (dmanr <= 3)  {
	    dma_outb( count & 0xff, ((dmanr&3)<<1) + 1 + IO_DMA1_BASE );
	    dma_outb( (count>>8) & 0xff, ((dmanr&3)<<1) + 1 + IO_DMA1_BASE );
        } else {
	    dma_outb( (count>>1) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA2_BASE );
	    dma_outb( (count>>9) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA2_BASE );
        }
}


/* Get DMA residue count. After a DMA transfer, this
 * should return zero. Reading this while a DMA transfer is
 * still in progress will return unpredictable results.
 * If called before the channel has been used, it may return 1.
 * Otherwise, it returns the number of _bytes_ left to transfer.
 *
 * Assumes DMA flip-flop is clear.
 */
static __inline__ int get_dma_residue(unsigned int dmanr)
{
	unsigned int io_port = (dmanr<=3)? ((dmanr&3)<<1) + 1 + IO_DMA1_BASE
					 : ((dmanr&3)<<2) + 2 + IO_DMA2_BASE;

	/* using short to get 16-bit wrap around */
	unsigned short count;

	count = 1 + dma_inb(io_port);
	count += dma_inb(io_port) << 8;
	
	return (dmanr<=3)? count : (count<<1);
}


/* These are in kernel/dma.c: */
extern int request_dma(unsigned int dmanr, const char * device_id);	/* reserve a DMA channel */
extern void free_dma(unsigned int dmanr);	/* release it again */
#define KERNEL_HAVE_CHECK_DMA
extern int check_dma(unsigned int dmanr);

/* From PCI */

#ifdef CONFIG_PCI
extern int isa_dma_bridge_buggy;
#else
#define isa_dma_bridge_buggy 	(0)
#endif


#endif /* _ASM_DMA_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #ifndef _ALPHA_HARDIRQ_H
#define _ALPHA_HARDIRQ_H

void ack_bad_irq(unsigned int irq);
#define ack_bad_irq ack_bad_irq

#include <asm-generic/hardirq.h>

#endif /* _ALPHA_HARDIRQ_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #ifndef __ASM_LINKAGE_H
#define __ASM_LINKAGE_H

#define cond_syscall(x)  asm(".weak\t" #x "\n" #x " = sys_ni_syscall")
#define SYSCALL_ALIAS(alias, name)					\
	asm ( #alias " = " #name "\n\t.globl " #alias)

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #ifndef _ASM_EMERGENCY_RESTART_H
#define _ASM_EMERGENCY_RESTART_H

#include <asm-generic/emergency-restart.h>

#endif /* _ASM_EMERGENCY_RESTART_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           