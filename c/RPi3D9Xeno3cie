/***********************license start***************
 * Author: Cavium Networks
 *
 * Contact: support@caviumnetworks.com
 * This file is part of the OCTEON SDK
 *
 * Copyright (c) 2003-2012 Cavium Networks
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, Version 2, as
 * published by the Free Software Foundation.
 *
 * This file is distributed in the hope that it will be useful, but
 * AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 * NONINFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 * or visit http://www.gnu.org/licenses/.
 *
 * This file may also be available under a different license from Cavium.
 * Contact Cavium Networks for more information
 ***********************license end**************************************/

#ifndef __CVMX_NPI_DEFS_H__
#define __CVMX_NPI_DEFS_H__

#define CVMX_NPI_BASE_ADDR_INPUT0 CVMX_NPI_BASE_ADDR_INPUTX(0)
#define CVMX_NPI_BASE_ADDR_INPUT1 CVMX_NPI_BASE_ADDR_INPUTX(1)
#define CVMX_NPI_BASE_ADDR_INPUT2 CVMX_NPI_BASE_ADDR_INPUTX(2)
#define CVMX_NPI_BASE_ADDR_INPUT3 CVMX_NPI_BASE_ADDR_INPUTX(3)
#define CVMX_NPI_BASE_ADDR_INPUTX(offset) (CVMX_ADD_IO_SEG(0x00011F0000000070ull) + ((offset) & 3) * 16)
#define CVMX_NPI_BASE_ADDR_OUTPUT0 CVMX_NPI_BASE_ADDR_OUTPUTX(0)
#define CVMX_NPI_BASE_ADDR_OUTPUT1 CVMX_NPI_BASE_ADDR_OUTPUTX(1)
#define CVMX_NPI_BASE_ADDR_OUTPUT2 CVMX_NPI_BASE_ADDR_OUTPUTX(2)
#define CVMX_NPI_BASE_ADDR_OUTPUT3 CVMX_NPI_BASE_ADDR_OUTPUTX(3)
#define CVMX_NPI_BASE_ADDR_OUTPUTX(offset) (CVMX_ADD_IO_SEG(0x00011F00000000B8ull) + ((offset) & 3) * 8)
#define CVMX_NPI_BIST_STATUS (CVMX_ADD_IO_SEG(0x00011F00000003F8ull))
#define CVMX_NPI_BUFF_SIZE_OUTPUT0 CVMX_NPI_BUFF_SIZE_OUTPUTX(0)
#define CVMX_NPI_BUFF_SIZE_OUTPUT1 CVMX_NPI_BUFF_SIZE_OUTPUTX(1)
#define CVMX_NPI_BUFF_SIZE_OUTPUT2 CVMX_NPI_BUFF_SIZE_OUTPUTX(2)
#define CVMX_NPI_BUFF_SIZE_OUTPUT3 CVMX_NPI_BUFF_SIZE_OUTPUTX(3)
#define CVMX_NPI_BUFF_SIZE_OUTPUTX(offset) (CVMX_ADD_IO_SEG(0x00011F00000000E0ull) + ((offset) & 3) * 8)
#define CVMX_NPI_COMP_CTL (CVMX_ADD_IO_SEG(0x00011F0000000218ull))
#define CVMX_NPI_CTL_STATUS (CVMX_ADD_IO_SEG(0x00011F0000000010ull))
#define CVMX_NPI_DBG_SELECT (CVMX_ADD_IO_SEG(0x00011F0000000008ull))
#define CVMX_NPI_DMA_CONTROL (CVMX_ADD_IO_SEG(0x00011F0000000128ull))
#define CVMX_NPI_DMA_HIGHP_COUNTS (CVMX_ADD_IO_SEG(0x00011F0000000148ull))
#define CVMX_NPI_DMA_HIGHP_NADDR (CVMX_ADD_IO_SEG(0x00011F0000000158ull))
#define CVMX_NPI_DMA_LOWP_COUNTS (CVMX_ADD_IO_SEG(0x00011F0000000140ull))
#define CVMX_NPI_DMA_LOWP_NADDR (CVMX_ADD_IO_SEG(0x00011F0000000150ull))
#define CVMX_NPI_HIGHP_DBELL (CVMX_ADD_IO_SEG(0x00011F0000000120ull))
#define CVMX_NPI_HIGHP_IBUFF_SADDR (CVMX_ADD_IO_SEG(0x00011F0000000110ull))
#define CVMX_NPI_INPUT_CONTROL (CVMX_ADD_IO_SEG(0x00011F0000000138ull))
#define CVMX_NPI_INT_ENB (CVMX_ADD_IO_SEG(0x00011F0000000020ull))
#define CVMX_NPI_INT_SUM (CVMX_ADD_IO_SEG(0x00011F0000000018ull))
#define CVMX_NPI_LOWP_DBELL (CVMX_ADD_IO_SEG(0x00011F0000000118ull))
#define CVMX_NPI_LOWP_IBUFF_SADDR (CVMX_ADD_IO_SEG(0x00011F0000000108ull))
#define CVMX_NPI_MEM_ACCESS_SUBID3 CVMX_NPI_MEM_ACCESS_SUBIDX(3)
#define CVMX_NPI_MEM_ACCESS_SUBID4 CVMX_NPI_MEM_ACCESS_SUBIDX(4)
#define CVMX_NPI_MEM_ACCESS_SUBID5 CVMX_NPI_MEM_ACCESS_SUBIDX(5)
#define CVMX_NPI_MEM_ACCESS_SUBID6 CVMX_NPI_MEM_ACCESS_SUBIDX(6)
#define CVMX_NPI_MEM_ACCESS_SUBIDX(offset) (CVMX_ADD_IO_SEG(0x00011F0000000028ull) + ((offset) & 7) * 8 - 8*3)
#define CVMX_NPI_MSI_RCV (0x0000000000000190ull)
#define CVMX_NPI_NPI_MSI_RCV (CVMX_ADD_IO_SEG(0x00011F0000001190ull))
#define CVMX_NPI_NUM_DESC_OUTPUT0 CVMX_NPI_NUM_DESC_OUTPUTX(0)
#define CVMX_NPI_NUM_DESC_OUTPUT1 CVMX_NPI_NUM_DESC_OUTPUTX(1)
#define CVMX_NPI_NUM_DESC_OUTPUT2 CVMX_NPI_NUM_DESC_OUTPUTX(2)
#define CVMX_NPI_NUM_DESC_OUTPUT3 CVMX_NPI_NUM_DESC_OUTPUTX(3)
#define CVMX_NPI_NUM_DESC_OUTPUTX(offset) (CVMX_ADD_IO_SEG(0x00011F0000000050ull) + ((offset) & 3) * 8)
#define CVMX_NPI_OUTPUT_CONTROL (CVMX_ADD_IO_SEG(0x00011F0000000100ull))
#define CVMX_NPI_P0_DBPAIR_ADDR CVMX_NPI_PX_DBPAIR_ADDR(0)
#define CVMX_NPI_P0_INSTR_ADDR CVMX_NPI_PX_INSTR_ADDR(0)
#define CVMX_NPI_P0_INSTR_CNTS CVMX_NPI_PX_INSTR_CNTS(0)
#define CVMX_NPI_P0_PAIR_CNTS CVMX_NPI_PX_PAIR_CNTS(0)
#define CVMX_NPI_P1_DBPAIR_ADDR CVMX_NPI_PX_DBPAIR_ADDR(1)
#define CVMX_NPI_P1_INSTR_ADDR CVMX_NPI_PX_INSTR_ADDR(1)
#define CVMX_NPI_P1_INSTR_CNTS CVMX_NPI_PX_INSTR_CNTS(1)
#define CVMX_NPI_P1_PAIR_CNTS CVMX_NPI_PX_PAIR_CNTS(1)
#define CVMX_NPI_P2_DBPAIR_ADDR CVMX_NPI_PX_DBPAIR_ADDR(2)
#define CVMX_NPI_P2_INSTR_ADDR CVMX_NPI_PX_INSTR_ADDR(2)
#define CVMX_NPI_P2_INSTR_CNTS CVMX_NPI_PX_INSTR_CNTS(2)
#define CVMX_NPI_P2_PAIR_CNTS CVMX_NPI_PX_PAIR_CNTS(2)
#define CVMX_NPI_P3_DBPAIR_ADDR CVMX_NPI_PX_DBPAIR_ADDR(3)
#define CVMX_NPI_P3_INSTR_ADDR CVMX_NPI_PX_INSTR_ADDR(3)
#define CVMX_NPI_P3_INSTR_CNTS CVMX_NPI_PX_INSTR_CNTS(3)
#define CVMX_NPI_P3_PAIR_CNTS CVMX_NPI_PX_PAIR_CNTS(3)
#define CVMX_NPI_PCI_BAR1_INDEXX(offset) (CVMX_ADD_IO_SEG(0x00011F0000001100ull) + ((offset) & 31) * 4)
#define CVMX_NPI_PCI_BIST_REG (CVMX_ADD_IO_SEG(0x00011F00000011C0ull))
#define CVMX_NPI_PCI_BURST_SIZE (CVMX_ADD_IO_SEG(0x00011F00000000D8ull))
#define CVMX_NPI_PCI_CFG00 (CVMX_ADD_IO_SEG(0x00011F0000001800ull))
#define CVMX_NPI_PCI_CFG01 (CVMX_ADD_IO_SEG(0x00011F0000001804ull))
#define CVMX_NPI_PCI_CFG02 (CVMX_ADD_IO_SEG(0x00011F0000001808ull))
#define CVMX_NPI_PCI_CFG03 (CVMX_ADD_IO_SEG(0x00011F000000180Cull))
#define CVMX_NPI_PCI_CFG04 (CVMX_ADD_IO_SEG(0x00011F0000001810ull))
#define CVMX_NPI_PCI_CFG05 (CVMX_ADD_IO_SEG(0x00011F0000001814ull))
#define CVMX_NPI_PCI_CFG06 (CVMX_ADD_IO_SEG(0x00011F0000001818ull))
#define CVMX_NPI_PCI_CFG07 (CVMX_ADD_IO_SEG(0x00011F000000181Cull))
#define CVMX_NPI_PCI_CFG08 (CVMX_ADD_IO_SEG(0x00011F0000001820ull))
#define CVMX_NPI_PCI_CFG09 (CVMX_ADD_IO_SEG(0x00011F0000001824ull))
#define CVMX_NPI_PCI_CFG10 (CVMX_ADD_IO_SEG(0x00011F0000001828ull))
#define CVMX_NPI_PCI_CFG11 (CVMX_ADD_IO_SEG(0x00011F000000182Cull))
#define CVMX_NPI_PCI_CFG12 (CVMX_ADD_IO_SEG(0x00011F0000001830ull))
#define CVMX_NPI_PCI_CFG13 (CVMX_ADD_IO_SEG(0x00011F0000001834ull))
#define CVMX_NPI_PCI_CFG15 (CVMX_ADD_IO_SEG(0x00011F000000183Cull))
#define CVMX_NPI_PCI_CFG16 (CVMX_ADD_IO_SEG(0x00011F0000001840ull))
#define CVMX_NPI_PCI_CFG17 (CVMX_ADD_IO_SEG(0x00011F0000001844ull))
#define CVMX_NPI_PCI_CFG18 (CVMX_ADD_IO_SEG(0x00011F0000001848ull))
#define CVMX_NPI_PCI_CFG19 (CVMX_ADD_IO_SEG(0x00011F000000184Cull))
#define CVMX_NPI_PCI_CFG20 (CVMX_ADD_IO_SEG(0x00011F0000001850ull))
#define CVMX_NPI_PCI_CFG21 (CVMX_ADD_IO_SEG(0x00011F0000001854ull))
#define CVMX_NPI_PCI_CFG22 (CVMX_ADD_IO_SEG(0x00011F0000001858ull))
#define CVMX_NPI_PCI_CFG56 (CVMX_ADD_IO_SEG(0x00011F00000018E0ull))
#define CVMX_NPI_PCI_CFG57 (CVMX_ADD_IO_SEG(0x00011F00000018E4ull))
#define CVMX_NPI_PCI_CFG58 (CVMX_ADD_IO_SEG(0x00011F00000018E8ull))
#define CVMX_NPI_PCI_CFG59 (CVMX_ADD_IO_SEG(0x00011F00000018ECull))
#define CVMX_NPI_PCI_CFG60 (CVMX_ADD_IO_SEG(0x00011F00000018F0ull))
#define CVMX_NPI_PCI_CFG61 (CVMX_ADD_IO_SEG(0x00011F00000018F4ull))
#define CVMX_NPI_PCI_CFG62 (CVMX_ADD_IO_SEG(0x00011F00000018F8ull))
#define CVMX_NPI_PCI_CFG63 (CVMX_ADD_IO_SEG(0x00011F00000018FCull))
#define CVMX_NPI_PCI_CNT_REG (CVMX_ADD_IO_SEG(0x00011F00000011B8ull))
#define CVMX_NPI_PCI_CTL_STATUS_2 (CVMX_ADD_IO_SEG(0x00011F000000118Cull))
#define CVMX_NPI_PCI_INT_ARB_CFG (CVMX_ADD_IO_SEG(0x00011F0000000130ull))
#define CVMX_NPI_PCI_INT_ENB2 (CVMX_ADD_IO_SEG(0x00011F00000011A0ull))
#define CVMX_NPI_PCI_INT_SUM2 (CVMX_ADD_IO_SEG(0x00011F0000001198ull))
#define CVMX_NPI_PCI_READ_CMD (CVMX_ADD_IO_SEG(0x00011F0000000048ull))
#define CVMX_NPI_PCI_READ_CMD_6 (CVMX_ADD_IO_SEG(0x00011F0000001180ull))
#define CVMX_NPI_PCI_READ_CMD_C (CVMX_ADD_IO_SEG(0x00011F0000001184ull))
#define CVMX_NPI_PCI_READ_CMD_E (CVMX_ADD_IO_SEG(0x00011F0000001188ull))
#define CVMX_NPI_PCI_SCM_REG (CVMX_ADD_IO_SEG(0x00011F00000011A8ull))
#define CVMX_NPI_PCI_TSR_REG (CVMX_ADD_IO_SEG(0x00011F00000011B0ull))
#define CVMX_NPI_PORT32_INSTR_HDR (CVMX_ADD_IO_SEG(0x00011F00000001F8ull))
#define CVMX_NPI_PORT33_INSTR_HDR (CVMX_ADD_IO_SEG(0x00011F0000000200ull))
#define CVMX_NPI_PORT34_INSTR_HDR (CVMX_ADD_IO_SEG(0x00011F0000000208ull))
#define CVMX_NPI_PORT35_INSTR_HDR (CVMX_ADD_IO_SEG(0x00011F0000000210ull))
#define CVMX_NPI_PORT_BP_CONTROL (CVMX_ADD_IO_SEG(0x00011F00000001F0ull))
#define CVMX_NPI_PX_DBPAIR_ADDR(offset) (CVMX_ADD_IO_SEG(0x00011F0000000180ull) + ((offset) & 3) * 8)
#define CVMX_NPI_PX_INSTR_ADDR(offset) (CVMX_ADD_IO_SEG(0x00011F00000001C0ull) + ((offset) & 3) * 8)
#define CVMX_NPI_PX_INSTR_CNTS(offset) (CVMX_ADD_IO_SEG(0x00011F00000001A0ull) + ((offset) & 3) * 8)
#define CVMX_NPI_PX_PAIR_CNTS(offset) (CVMX_ADD_IO_SEG(0x00011F0000000160ull) + ((offset) & 3) * 8)
#define CVMX_NPI_RSL_INT_BLOCKS (CVMX_ADD_IO_SEG(0x00011F0000000000ull))
#define CVMX_NPI_SIZE_INPUT0 CVMX_NPI_SIZE_INPUTX(0)
#define CVMX_NPI_SIZE_INPUT1 CVMX_NPI_SIZE_INPUTX(1)
#define CVMX_NPI_SIZE_INPUT2 CVMX_NPI_SIZE_INPUTX(2)
#define CVMX_NPI_SIZE_INPUT3 CVMX_NPI_SIZE_INPUTX(3)
#define CVMX_NPI_SIZE_INPUTX(offset) (CVMX_ADD_IO_SEG(0x00011F0000000078ull) + ((offset) & 3) * 16)
#define CVMX_NPI_WIN_READ_TO (CVMX_ADD_IO_SEG(0x00011F00000001E0ull))

union cvmx_npi_base_addr_inputx {
	uint64_t u64;
	struct cvmx_npi_base_addr_inputx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t baddr:61;
		uint64_t reserved_0_2:3;
#else
		uint64_t reserved_0_2:3;
		uint64_t baddr:61;
#endif
	} s;
	struct cvmx_npi_base_addr_inputx_s cn30xx;
	struct cvmx_npi_base_addr_inputx_s cn31xx;
	struct cvmx_npi_base_addr_inputx_s cn38xx;
	struct cvmx_npi_base_addr_inputx_s cn38xxp2;
	struct cvmx_npi_base_addr_inputx_s cn50xx;
	struct cvmx_npi_base_addr_inputx_s cn58xx;
	struct cvmx_npi_base_addr_inputx_s cn58xxp1;
};

union cvmx_npi_base_addr_outputx {
	uint64_t u64;
	struct cvmx_npi_base_addr_outputx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t baddr:61;
		uint64_t reserved_0_2:3;
#else
		uint64_t reserved_0_2:3;
		uint64_t baddr:61;
#endif
	} s;
	struct cvmx_npi_base_addr_outputx_s cn30xx;
	struct cvmx_npi_base_addr_outputx_s cn31xx;
	struct cvmx_npi_base_addr_outputx_s cn38xx;
	struct cvmx_npi_base_addr_outputx_s cn38xxp2;
	struct cvmx_npi_base_addr_outputx_s cn50xx;
	struct cvmx_npi_base_addr_outputx_s cn58xx;
	struct cvmx_npi_base_addr_outputx_s cn58xxp1;
};

union cvmx_npi_bist_status {
	uint64_t u64;
	struct cvmx_npi_bist_status_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_20_63:44;
		uint64_t csr_bs:1;
		uint64_t dif_bs:1;
		uint64_t rdp_bs:1;
		uint64_t pcnc_bs:1;
		uint64_t pcn_bs:1;
		uint64_t rdn_bs:1;
		uint64_t pcac_bs:1;
		uint64_t pcad_bs:1;
		uint64_t rdnl_bs:1;
		uint64_t pgf_bs:1;
		uint64_t pig_bs:1;
		uint64_t pof0_bs:1;
		uint64_t pof1_bs:1;
		uint64_t pof2_bs:1;
		uint64_t pof3_bs:1;
		uint64_t pos_bs:1;
		uint64_t nus_bs:1;
		uint64_t dob_bs:1;
		uint64_t pdf_bs:1;
		uint64_t dpi_bs:1;
#else
		uint64_t dpi_bs:1;
		uint64_t pdf_bs:1;
		uint64_t dob_bs:1;
		uint64_t nus_bs:1;
		uint64_t pos_bs:1;
		uint64_t pof3_bs:1;
		uint64_t pof2_bs:1;
		uint64_t pof1_bs:1;
		uint64_t pof0_bs:1;
		uint64_t pig_bs:1;
		uint64_t pgf_bs:1;
		uint64_t rdnl_bs:1;
		uint64_t pcad_bs:1;
		uint64_t pcac_bs:1;
		uint64_t rdn_bs:1;
		uint64_t pcn_bs:1;
		uint64_t pcnc_bs:1;
		uint64_t rdp_bs:1;
		uint64_t dif_bs:1;
		uint64_t csr_bs:1;
		uint64_t reserved_20_63:44;
#endif
	} s;
	struct cvmx_npi_bist_status_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_20_63:44;
		uint64_t csr_bs:1;
		uint64_t dif_bs:1;
		uint64_t rdp_bs:1;
		uint64_t pcnc_bs:1;
		uint64_t pcn_bs:1;
		uint64_t rdn_bs:1;
		uint64_t pcac_bs:1;
		uint64_t pcad_bs:1;
		uint64_t rdnl_bs:1;
		uint64_t pgf_bs:1;
		uint64_t pig_bs:1;
		uint64_t pof0_bs:1;
		uint64_t reserved_5_7:3;
		uint64_t pos_bs:1;
		uint64_t nus_bs:1;
		uint64_t dob_bs:1;
		uint64_t pdf_bs:1;
		uint64_t dpi_bs:1;
#else
		uint64_t dpi_bs:1;
		uint64_t pdf_bs:1;
		uint64_t dob_bs:1;
		uint64_t nus_bs:1;
		uint64_t pos_bs:1;
		uint64_t reserved_5_7:3;
		uint64_t pof0_bs:1;
		uint64_t pig_bs:1;
		uint64_t pgf_bs:1;
		uint64_t rdnl_bs:1;
		uint64_t pcad_bs:1;
		uint64_t pcac_bs:1;
		uint64_t rdn_bs:1;
		uint64_t pcn_bs:1;
		uint64_t pcnc_bs:1;
		uint64_t rdp_bs:1;
		uint64_t dif_bs:1;
		uint64_t csr_bs:1;
		uint64_t reserved_20_63:44;
#endif
	} cn30xx;
	struct cvmx_npi_bist_status_s cn31xx;
	struct cvmx_npi_bist_status_s cn38xx;
	struct cvmx_npi_bist_status_s cn38xxp2;
	struct cvmx_npi_bist_status_cn50xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_20_63:44;
		uint64_t csr_bs:1;
		uint64_t dif_bs:1;
		uint64_t rdp_bs:1;
		uint64_t pcnc_bs:1;
		uint64_t pcn_bs:1;
		uint64_t rdn_bs:1;
		uint64_t pcac_bs:1;
		uint64_t pcad_bs:1;
		uint64_t rdnl_bs:1;
		uint64_t pgf_bs:1;
		uint64_t pig_bs:1;
		uint64_t pof0_bs:1;
		uint64_t pof1_bs:1;
		uint64_t reserved_5_6:2;
		uint64_t pos_bs:1;
		uint64_t nus_bs:1;
		uint64_t dob_bs:1;
		uint64_t pdf_bs:1;
		uint64_t dpi_bs:1;
#else
		uint64_t dpi_bs:1;
		uint64_t pdf_bs:1;
		uint64_t dob_bs:1;
		uint64_t nus_bs:1;
		uint64_t pos_bs:1;
		uint64_t reserved_5_6:2;
		uint64_t pof1_bs:1;
		uint64_t pof0_bs:1;
		uint64_t pig_bs:1;
		uint64_t pgf_bs:1;
		uint64_t rdnl_bs:1;
		uint64_t pcad_bs:1;
		uint64_t pcac_bs:1;
		uint64_t rdn_bs:1;
		uint64_t pcn_bs:1;
		uint64_t pcnc_bs:1;
		uint64_t rdp_bs:1;
		uint64_t dif_bs:1;
		uint64_t csr_bs:1;
		uint64_t reserved_20_63:44;
#endif
	} cn50xx;
	struct cvmx_npi_bist_status_s cn58xx;
	struct cvmx_npi_bist_status_s cn58xxp1;
};

union cvmx_npi_buff_size_outputx {
	uint64_t u64;
	struct cvmx_npi_buff_size_outputx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_23_63:41;
		uint64_t isize:7;
		uint64_t bsize:16;
#else
		uint64_t bsize:16;
		uint64_t isize:7;
		uint64_t reserved_23_63:41;
#endif
	} s;
	struct cvmx_npi_buff_size_outputx_s cn30xx;
	struct cvmx_npi_buff_size_outputx_s cn31xx;
	struct cvmx_npi_buff_size_outputx_s cn38xx;
	struct cvmx_npi_buff_size_outputx_s cn38xxp2;
	struct cvmx_npi_buff_size_outputx_s cn50xx;
	struct cvmx_npi_buff_size_outputx_s cn58xx;
	struct cvmx_npi_buff_size_outputx_s cn58xxp1;
};

union cvmx_npi_comp_ctl {
	uint64_t u64;
	struct cvmx_npi_comp_ctl_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_10_63:54;
		uint64_t pctl:5;
		uint64_t nctl:5;
#else
		uint64_t nctl:5;
		uint64_t pctl:5;
		uint64_t reserved_10_63:54;
#endif
	} s;
	struct cvmx_npi_comp_ctl_s cn50xx;
	struct cvmx_npi_comp_ctl_s cn58xx;
	struct cvmx_npi_comp_ctl_s cn58xxp1;
};

union cvmx_npi_ctl_status {
	uint64_t u64;
	struct cvmx_npi_ctl_status_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_63_63:1;
		uint64_t chip_rev:8;
		uint64_t dis_pniw:1;
		uint64_t out3_enb:1;
		uint64_t out2_enb:1;
		uint64_t out1_enb:1;
		uint64_t out0_enb:1;
		uint64_t ins3_enb:1;
		uint64_t ins2_enb:1;
		uint64_t ins1_enb:1;
		uint64_t ins0_enb:1;
		uint64_t ins3_64b:1;
		uint64_t ins2_64b:1;
		uint64_t ins1_64b:1;
		uint64_t ins0_64b:1;
		uint64_t pci_wdis:1;
		uint64_t wait_com:1;
		uint64_t reserved_37_39:3;
		uint64_t max_word:5;
		uint64_t reserved_10_31:22;
		uint64_t timer:10;
#else
		uint64_t timer:10;
		uint64_t reserved_10_31:22;
		uint64_t max_word:5;
		uint64_t reserved_37_39:3;
		uint64_t wait_com:1;
		uint64_t pci_wdis:1;
		uint64_t ins0_64b:1;
		uint64_t ins1_64b:1;
		uint64_t ins2_64b:1;
		uint64_t ins3_64b:1;
		uint64_t ins0_enb:1;
		uint64_t ins1_enb:1;
		uint64_t ins2_enb:1;
		uint64_t ins3_enb:1;
		uint64_t out0_enb:1;
		uint64_t out1_enb:1;
		uint64_t out2_enb:1;
		uint64_t out3_enb:1;
		uint64_t dis_pniw:1;
		uint64_t chip_rev:8;
		uint64_t reserved_63_63:1;
#endif
	} s;
	struct cvmx_npi_ctl_status_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_63_63:1;
		uint64_t chip_rev:8;
		uint64_t dis_pniw:1;
		uint64_t reserved_51_53:3;
		uint64_t out0_enb:1;
		uint64_t reserved_47_49:3;
		uint64_t ins0_enb:1;
		uint64_t reserved_43_45:3;
		uint64_t ins0_64b:1;
		uint64_t pci_wdis:1;
		uint64_t wait_com:1;
		uint64_t reserved_37_39:3;
		uint64_t max_word:5;
		uint64_t reserved_10_31:22;
		uint64_t timer:10;
#else
		uint64_t timer:10;
		uint64_t reserved_10_31:22;
		uint64_t max_word:5;
		uint64_t reserved_37_39:3;
		uint64_t wait_com:1;
		uint64_t pci_wdis:1;
		uint64_t ins0_64b:1;
		uint64_t reserved_43_45:3;
		uint64_t ins0_enb:1;
		uint64_t reserved_47_49:3;
		uint64_t out0_enb:1;
		uint64_t reserved_51_53:3;
		uint64_t dis_pniw:1;
		uint64_t chip_rev:8;
		uint64_t reserved_63_63:1;
#endif
	} cn30xx;
	struct cvmx_npi_ctl_status_cn31xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_63_63:1;
		uint64_t chip_rev:8;
		uint64_t dis_pniw:1;
		uint64_t reserved_52_53:2;
		uint64_t out1_enb:1;
		uint64_t out0_enb:1;
		uint64_t reserved_48_49:2;
		uint64_t ins1_enb:1;
		uint64_t ins0_enb:1;
		uint64_t reserved_44_45:2;
		uint64_t ins1_64b:1;
		uint64_t ins0_64b:1;
		uint64_t pci_wdis:1;
		uint64_t wait_com:1;
		uint64_t reserved_37_39:3;
		uint64_t max_word:5;
		uint64_t reserved_10_31:22;
		uint64_t timer:10;
#else
		uint64_t timer:10;
		uint64_t reserved_10_31:22;
		uint64_t max_word:5;
		uint64_t reserved_37_39:3;
		uint64_t wait_com:1;
		uint64_t pci_wdis:1;
		uint64_t ins0_64b:1;
		uint64_t ins1_64b:1;
		uint64_t reserved_44_45:2;
		uint64_t ins0_enb:1;
		uint64_t ins1_enb:1;
		uint64_t reserved_48_49:2;
		uint64_t out0_enb:1;
		uint64_t out1_enb:1;
		uint64_t reserved_52_53:2;
		uint64_t dis_pniw:1;
		uint64_t chip_rev:8;
		uint64_t reserved_63_63:1;
#endif
	} cn31xx;
	struct cvmx_npi_ctl_status_s cn38xx;
	struct cvmx_npi_ctl_status_s cn38xxp2;
	struct cvmx_npi_ctl_status_cn31xx cn50xx;
	struct cvmx_npi_ctl_status_s cn58xx;
	struct cvmx_npi_ctl_status_s cn58xxp1;
};

union cvmx_npi_dbg_select {
	uint64_t u64;
	struct cvmx_npi_dbg_select_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t dbg_sel:16;
#else
		uint64_t dbg_sel:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_npi_dbg_select_s cn30xx;
	struct cvmx_npi_dbg_select_s cn31xx;
	struct cvmx_npi_dbg_select_s cn38xx;
	struct cvmx_npi_dbg_select_s cn38xxp2;
	struct cvmx_npi_dbg_select_s cn50xx;
	struct cvmx_npi_dbg_select_s cn58xx;
	struct cvmx_npi_dbg_select_s cn58xxp1;
};

union cvmx_npi_dma_control {
	uint64_t u64;
	struct cvmx_npi_dma_control_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_36_63:28;
		uint64_t b0_lend:1;
		uint64_t dwb_denb:1;
		uint64_t dwb_ichk:9;
		uint64_t fpa_que:3;
		uint64_t o_add1:1;
		uint64_t o_ro:1;
		uint64_t o_ns:1;
		uint64_t o_es:2;
		uint64_t o_mode:1;
		uint64_t hp_enb:1;
		uint64_t lp_enb:1;
		uint64_t csize:14;
#else
		uint64_t csize:14;
		uint64_t lp_enb:1;
		uint64_t hp_enb:1;
		uint64_t o_mode:1;
		uint64_t o_es:2;
		uint64_t o_ns:1;
		uint64_t o_ro:1;
		uint64_t o_add1:1;
		uint64_t fpa_que:3;
		uint64_t dwb_ichk:9;
		uint64_t dwb_denb:1;
		uint64_t b0_lend:1;
		uint64_t reserved_36_63:28;
#endif
	} s;
	struct cvmx_npi_dma_control_s cn30xx;
	struct cvmx_npi_dma_control_s cn31xx;
	struct cvmx_npi_dma_control_s cn38xx;
	struct cvmx_npi_dma_control_s cn38xxp2;
	struct cvmx_npi_dma_control_s cn50xx;
	struct cvmx_npi_dma_control_s cn58xx;
	struct cvmx_npi_dma_control_s cn58xxp1;
};

union cvmx_npi_dma_highp_counts {
	uint64_t u64;
	struct cvmx_npi_dma_highp_counts_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_39_63:25;
		uint64_t fcnt:7;
		uint64_t dbell:32;
#else
		uint64_t dbell:32;
		uint64_t fcnt:7;
		uint64_t reserved_39_63:25;
#endif
	} s;
	struct cvmx_npi_dma_highp_counts_s cn30xx;
	struct cvmx_npi_dma_highp_counts_s cn31xx;
	struct cvmx_npi_dma_highp_counts_s cn38xx;
	struct cvmx_npi_dma_highp_counts_s cn38xxp2;
	struct cvmx_npi_dma_highp_counts_s cn50xx;
	struct cvmx_npi_dma_highp_counts_s cn58xx;
	struct cvmx_npi_dma_highp_counts_s cn58xxp1;
};

union cvmx_npi_dma_highp_naddr {
	uint64_t u64;
	struct cvmx_npi_dma_highp_naddr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_40_63:24;
		uint64_t state:4;
		uint64_t addr:36;
#else
		uint64_t addr:36;
		uint64_t state:4;
		uint64_t reserved_40_63:24;
#endif
	} s;
	struct cvmx_npi_dma_highp_naddr_s cn30xx;
	struct cvmx_npi_dma_highp_naddr_s cn31xx;
	struct cvmx_npi_dma_highp_naddr_s cn38xx;
	struct cvmx_npi_dma_highp_naddr_s cn38xxp2;
	struct cvmx_npi_dma_highp_naddr_s cn50xx;
	struct cvmx_npi_dma_highp_naddr_s cn58xx;
	struct cvmx_npi_dma_highp_naddr_s cn58xxp1;
};

union cvmx_npi_dma_lowp_counts {
	uint64_t u64;
	struct cvmx_npi_dma_lowp_counts_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_39_63:25;
		uint64_t fcnt:7;
		uint64_t dbell:32;
#else
		uint64_t dbell:32;
		uint64_t fcnt:7;
		uint64_t reserved_39_63:25;
#endif
	} s;
	struct cvmx_npi_dma_lowp_counts_s cn30xx;
	struct cvmx_npi_dma_lowp_counts_s cn31xx;
	struct cvmx_npi_dma_lowp_counts_s cn38xx;
	struct cvmx_npi_dma_lowp_counts_s cn38xxp2;
	struct cvmx_npi_dma_lowp_counts_s cn50xx;
	struct cvmx_npi_dma_lowp_counts_s cn58xx;
	struct cvmx_npi_dma_lowp_counts_s cn58xxp1;
};

union cvmx_npi_dma_lowp_naddr {
	uint64_t u64;
	struct cvmx_npi_dma_lowp_naddr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_40_63:24;
		uint64_t state:4;
		uint64_t addr:36;
#else
		uint64_t addr:36;
		uint64_t state:4;
		uint64_t reserved_40_63:24;
#endif
	} s;
	struct cvmx_npi_dma_lowp_naddr_s cn30xx;
	struct cvmx_npi_dma_lowp_naddr_s cn31xx;
	struct cvmx_npi_dma_lowp_naddr_s cn38xx;
	struct cvmx_npi_dma_lowp_naddr_s cn38xxp2;
	struct cvmx_npi_dma_lowp_naddr_s cn50xx;
	struct cvmx_npi_dma_lowp_naddr_s cn58xx;
	struct cvmx_npi_dma_lowp_naddr_s cn58xxp1;
};

union cvmx_npi_highp_dbell {
	uint64_t u64;
	struct cvmx_npi_highp_dbell_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t dbell:16;
#else
		uint64_t dbell:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_npi_highp_dbell_s cn30xx;
	struct cvmx_npi_highp_dbell_s cn31xx;
	struct cvmx_npi_highp_dbell_s cn38xx;
	struct cvmx_npi_highp_dbell_s cn38xxp2;
	struct cvmx_npi_highp_dbell_s cn50xx;
	struct cvmx_npi_highp_dbell_s cn58xx;
	struct cvmx_npi_highp_dbell_s cn58xxp1;
};

union cvmx_npi_highp_ibuff_saddr {
	uint64_t u64;
	struct cvmx_npi_highp_ibuff_saddr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_36_63:28;
		uint64_t saddr:36;
#else
		uint64_t saddr:36;
		uint64_t reserved_36_63:28;
#endif
	} s;
	struct cvmx_npi_highp_ibuff_saddr_s cn30xx;
	struct cvmx_npi_highp_ibuff_saddr_s cn31xx;
	struct cvmx_npi_highp_ibuff_saddr_s cn38xx;
	struct cvmx_npi_highp_ibuff_saddr_s cn38xxp2;
	struct cvmx_npi_highp_ibuff_saddr_s cn50xx;
	struct cvmx_npi_highp_ibuff_saddr_s cn58xx;
	struct cvmx_npi_highp_ibuff_saddr_s cn58xxp1;
};

union cvmx_npi_input_control {
	uint64_t u64;
	struct cvmx_npi_input_control_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_23_63:41;
		uint64_t pkt_rr:1;
		uint64_t pbp_dhi:13;
		uint64_t d_nsr:1;
		uint64_t d_esr:2;
		uint64_t d_ror:1;
		uint64_t use_csr:1;
		uint64_t nsr:1;
		uint64_t esr:2;
		uint64_t ror:1;
#else
		uint64_t ror:1;
		uint64_t esr:2;
		uint64_t nsr:1;
		uint64_t use_csr:1;
		uint64_t d_ror:1;
		uint64_t d_esr:2;
		uint64_t d_nsr:1;
		uint64_t pbp_dhi:13;
		uint64_t pkt_rr:1;
		uint64_t reserved_23_63:41;
#endif
	} s;
	struct cvmx_npi_input_control_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_22_63:42;
		uint64_t pbp_dhi:13;
		uint64_t d_nsr:1;
		uint64_t d_esr:2;
		uint64_t d_ror:1;
		uint64_t use_csr:1;
		uint64_t nsr:1;
		uint64_t esr:2;
		uint64_t ror:1;
#else
		uint64_t ror:1;
		uint64_t esr:2;
		uint64_t nsr:1;
		uint64_t use_csr:1;
		uint64_t d_ror:1;
		uint64_t d_esr:2;
		uint64_t d_nsr:1;
		uint64_t pbp_dhi:13;
		uint64_t reserved_22_63:42;
#endif
	} cn30xx;
	struct cvmx_npi_input_control_cn30xx cn31xx;
	struct cvmx_npi_input_control_s cn38xx;
	struct cvmx_npi_input_control_cn30xx cn38xxp2;
	struct cvmx_npi_input_control_s cn50xx;
	struct cvmx_npi_input_control_s cn58xx;
	struct cvmx_npi_input_control_s cn58xxp1;
};

union cvmx_npi_int_enb {
	uint64_t u64;
	struct cvmx_npi_int_enb_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_62_63:2;
		uint64_t q1_a_f:1;
		uint64_t q1_s_e:1;
		uint64_t pdf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pcf_p_e:1;
		uint64_t rdx_s_e:1;
		uint64_t rwx_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t com_a_f:1;
		uint64_t com_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t fcr_s_e:1;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t i3_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i0_pperr:1;
		uint64_t p3_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p0_ptout:1;
		uint64_t p3_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p0_pperr:1;
		uint64_t g3_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g0_rtout:1;
		uint64_t p3_perr:1;
		uint64_t p2_perr:1;
		uint64_t p1_perr:1;
		uint64_t p0_perr:1;
		uint64_t p3_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p0_rtout:1;
		uint64_t i3_overf:1;
		uint64_t i2_overf:1;
		uint64_t i1_overf:1;
		uint64_t i0_overf:1;
		uint64_t i3_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i0_rtout:1;
		uint64_t po3_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po3_2sml:1;
		uint64_t i0_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i3_rtout:1;
		uint64_t i0_overf:1;
		uint64_t i1_overf:1;
		uint64_t i2_overf:1;
		uint64_t i3_overf:1;
		uint64_t p0_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p3_rtout:1;
		uint64_t p0_perr:1;
		uint64_t p1_perr:1;
		uint64_t p2_perr:1;
		uint64_t p3_perr:1;
		uint64_t g0_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g3_rtout:1;
		uint64_t p0_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p3_pperr:1;
		uint64_t p0_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p3_ptout:1;
		uint64_t i0_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i3_pperr:1;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t fcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t com_s_e:1;
		uint64_t com_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t rwx_s_e:1;
		uint64_t rdx_s_e:1;
		uint64_t pcf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pdf_p_f:1;
		uint64_t q1_s_e:1;
		uint64_t q1_a_f:1;
		uint64_t reserved_62_63:2;
#endif
	} s;
	struct cvmx_npi_int_enb_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_62_63:2;
		uint64_t q1_a_f:1;
		uint64_t q1_s_e:1;
		uint64_t pdf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pcf_p_e:1;
		uint64_t rdx_s_e:1;
		uint64_t rwx_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t com_a_f:1;
		uint64_t com_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t fcr_s_e:1;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t reserved_36_38:3;
		uint64_t i0_pperr:1;
		uint64_t reserved_32_34:3;
		uint64_t p0_ptout:1;
		uint64_t reserved_28_30:3;
		uint64_t p0_pperr:1;
		uint64_t reserved_24_26:3;
		uint64_t g0_rtout:1;
		uint64_t reserved_20_22:3;
		uint64_t p0_perr:1;
		uint64_t reserved_16_18:3;
		uint64_t p0_rtout:1;
		uint64_t reserved_12_14:3;
		uint64_t i0_overf:1;
		uint64_t reserved_8_10:3;
		uint64_t i0_rtout:1;
		uint64_t reserved_4_6:3;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t reserved_4_6:3;
		uint64_t i0_rtout:1;
		uint64_t reserved_8_10:3;
		uint64_t i0_overf:1;
		uint64_t reserved_12_14:3;
		uint64_t p0_rtout:1;
		uint64_t reserved_16_18:3;
		uint64_t p0_perr:1;
		uint64_t reserved_20_22:3;
		uint64_t g0_rtout:1;
		uint64_t reserved_24_26:3;
		uint64_t p0_pperr:1;
		uint64_t reserved_28_30:3;
		uint64_t p0_ptout:1;
		uint64_t reserved_32_34:3;
		uint64_t i0_pperr:1;
		uint64_t reserved_36_38:3;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t fcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t com_s_e:1;
		uint64_t com_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t rwx_s_e:1;
		uint64_t rdx_s_e:1;
		uint64_t pcf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pdf_p_f:1;
		uint64_t q1_s_e:1;
		uint64_t q1_a_f:1;
		uint64_t reserved_62_63:2;
#endif
	} cn30xx;
	struct cvmx_npi_int_enb_cn31xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_62_63:2;
		uint64_t q1_a_f:1;
		uint64_t q1_s_e:1;
		uint64_t pdf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pcf_p_e:1;
		uint64_t rdx_s_e:1;
		uint64_t rwx_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t com_a_f:1;
		uint64_t com_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t fcr_s_e:1;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t reserved_37_38:2;
		uint64_t i1_pperr:1;
		uint64_t i0_pperr:1;
		uint64_t reserved_33_34:2;
		uint64_t p1_ptout:1;
		uint64_t p0_ptout:1;
		uint64_t reserved_29_30:2;
		uint64_t p1_pperr:1;
		uint64_t p0_pperr:1;
		uint64_t reserved_25_26:2;
		uint64_t g1_rtout:1;
		uint64_t g0_rtout:1;
		uint64_t reserved_21_22:2;
		uint64_t p1_perr:1;
		uint64_t p0_perr:1;
		uint64_t reserved_17_18:2;
		uint64_t p1_rtout:1;
		uint64_t p0_rtout:1;
		uint64_t reserved_13_14:2;
		uint64_t i1_overf:1;
		uint64_t i0_overf:1;
		uint64_t reserved_9_10:2;
		uint64_t i1_rtout:1;
		uint64_t i0_rtout:1;
		uint64_t reserved_5_6:2;
		uint64_t po1_2sml:1;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t reserved_5_6:2;
		uint64_t i0_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t reserved_9_10:2;
		uint64_t i0_overf:1;
		uint64_t i1_overf:1;
		uint64_t reserved_13_14:2;
		uint64_t p0_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t reserved_17_18:2;
		uint64_t p0_perr:1;
		uint64_t p1_perr:1;
		uint64_t reserved_21_22:2;
		uint64_t g0_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t reserved_25_26:2;
		uint64_t p0_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t reserved_29_30:2;
		uint64_t p0_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t reserved_33_34:2;
		uint64_t i0_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t reserved_37_38:2;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t fcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t com_s_e:1;
		uint64_t com_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t rwx_s_e:1;
		uint64_t rdx_s_e:1;
		uint64_t pcf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pdf_p_f:1;
		uint64_t q1_s_e:1;
		uint64_t q1_a_f:1;
		uint64_t reserved_62_63:2;
#endif
	} cn31xx;
	struct cvmx_npi_int_enb_s cn38xx;
	struct cvmx_npi_int_enb_cn38xxp2 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_42_63:22;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t i3_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i0_pperr:1;
		uint64_t p3_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p0_ptout:1;
		uint64_t p3_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p0_pperr:1;
		uint64_t g3_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g0_rtout:1;
		uint64_t p3_perr:1;
		uint64_t p2_perr:1;
		uint64_t p1_perr:1;
		uint64_t p0_perr:1;
		uint64_t p3_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p0_rtout:1;
		uint64_t i3_overf:1;
		uint64_t i2_overf:1;
		uint64_t i1_overf:1;
		uint64_t i0_overf:1;
		uint64_t i3_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i0_rtout:1;
		uint64_t po3_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po3_2sml:1;
		uint64_t i0_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i3_rtout:1;
		uint64_t i0_overf:1;
		uint64_t i1_overf:1;
		uint64_t i2_overf:1;
		uint64_t i3_overf:1;
		uint64_t p0_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p3_rtout:1;
		uint64_t p0_perr:1;
		uint64_t p1_perr:1;
		uint64_t p2_perr:1;
		uint64_t p3_perr:1;
		uint64_t g0_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g3_rtout:1;
		uint64_t p0_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p3_pperr:1;
		uint64_t p0_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p3_ptout:1;
		uint64_t i0_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i3_pperr:1;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t reserved_42_63:22;
#endif
	} cn38xxp2;
	struct cvmx_npi_int_enb_cn31xx cn50xx;
	struct cvmx_npi_int_enb_s cn58xx;
	struct cvmx_npi_int_enb_s cn58xxp1;
};

union cvmx_npi_int_sum {
	uint64_t u64;
	struct cvmx_npi_int_sum_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_62_63:2;
		uint64_t q1_a_f:1;
		uint64_t q1_s_e:1;
		uint64_t pdf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pcf_p_e:1;
		uint64_t rdx_s_e:1;
		uint64_t rwx_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t com_a_f:1;
		uint64_t com_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t fcr_s_e:1;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t i3_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i0_pperr:1;
		uint64_t p3_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p0_ptout:1;
		uint64_t p3_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p0_pperr:1;
		uint64_t g3_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g0_rtout:1;
		uint64_t p3_perr:1;
		uint64_t p2_perr:1;
		uint64_t p1_perr:1;
		uint64_t p0_perr:1;
		uint64_t p3_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p0_rtout:1;
		uint64_t i3_overf:1;
		uint64_t i2_overf:1;
		uint64_t i1_overf:1;
		uint64_t i0_overf:1;
		uint64_t i3_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i0_rtout:1;
		uint64_t po3_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po3_2sml:1;
		uint64_t i0_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i3_rtout:1;
		uint64_t i0_overf:1;
		uint64_t i1_overf:1;
		uint64_t i2_overf:1;
		uint64_t i3_overf:1;
		uint64_t p0_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p3_rtout:1;
		uint64_t p0_perr:1;
		uint64_t p1_perr:1;
		uint64_t p2_perr:1;
		uint64_t p3_perr:1;
		uint64_t g0_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g3_rtout:1;
		uint64_t p0_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p3_pperr:1;
		uint64_t p0_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p3_ptout:1;
		uint64_t i0_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i3_pperr:1;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t fcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t com_s_e:1;
		uint64_t com_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t rwx_s_e:1;
		uint64_t rdx_s_e:1;
		uint64_t pcf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pdf_p_f:1;
		uint64_t q1_s_e:1;
		uint64_t q1_a_f:1;
		uint64_t reserved_62_63:2;
#endif
	} s;
	struct cvmx_npi_int_sum_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_62_63:2;
		uint64_t q1_a_f:1;
		uint64_t q1_s_e:1;
		uint64_t pdf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pcf_p_e:1;
		uint64_t rdx_s_e:1;
		uint64_t rwx_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t com_a_f:1;
		uint64_t com_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t fcr_s_e:1;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t reserved_36_38:3;
		uint64_t i0_pperr:1;
		uint64_t reserved_32_34:3;
		uint64_t p0_ptout:1;
		uint64_t reserved_28_30:3;
		uint64_t p0_pperr:1;
		uint64_t reserved_24_26:3;
		uint64_t g0_rtout:1;
		uint64_t reserved_20_22:3;
		uint64_t p0_perr:1;
		uint64_t reserved_16_18:3;
		uint64_t p0_rtout:1;
		uint64_t reserved_12_14:3;
		uint64_t i0_overf:1;
		uint64_t reserved_8_10:3;
		uint64_t i0_rtout:1;
		uint64_t reserved_4_6:3;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t reserved_4_6:3;
		uint64_t i0_rtout:1;
		uint64_t reserved_8_10:3;
		uint64_t i0_overf:1;
		uint64_t reserved_12_14:3;
		uint64_t p0_rtout:1;
		uint64_t reserved_16_18:3;
		uint64_t p0_perr:1;
		uint64_t reserved_20_22:3;
		uint64_t g0_rtout:1;
		uint64_t reserved_24_26:3;
		uint64_t p0_pperr:1;
		uint64_t reserved_28_30:3;
		uint64_t p0_ptout:1;
		uint64_t reserved_32_34:3;
		uint64_t i0_pperr:1;
		uint64_t reserved_36_38:3;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t fcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t com_s_e:1;
		uint64_t com_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t rwx_s_e:1;
		uint64_t rdx_s_e:1;
		uint64_t pcf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pdf_p_f:1;
		uint64_t q1_s_e:1;
		uint64_t q1_a_f:1;
		uint64_t reserved_62_63:2;
#endif
	} cn30xx;
	struct cvmx_npi_int_sum_cn31xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_62_63:2;
		uint64_t q1_a_f:1;
		uint64_t q1_s_e:1;
		uint64_t pdf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pcf_p_e:1;
		uint64_t rdx_s_e:1;
		uint64_t rwx_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t com_a_f:1;
		uint64_t com_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t fcr_s_e:1;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t reserved_37_38:2;
		uint64_t i1_pperr:1;
		uint64_t i0_pperr:1;
		uint64_t reserved_33_34:2;
		uint64_t p1_ptout:1;
		uint64_t p0_ptout:1;
		uint64_t reserved_29_30:2;
		uint64_t p1_pperr:1;
		uint64_t p0_pperr:1;
		uint64_t reserved_25_26:2;
		uint64_t g1_rtout:1;
		uint64_t g0_rtout:1;
		uint64_t reserved_21_22:2;
		uint64_t p1_perr:1;
		uint64_t p0_perr:1;
		uint64_t reserved_17_18:2;
		uint64_t p1_rtout:1;
		uint64_t p0_rtout:1;
		uint64_t reserved_13_14:2;
		uint64_t i1_overf:1;
		uint64_t i0_overf:1;
		uint64_t reserved_9_10:2;
		uint64_t i1_rtout:1;
		uint64_t i0_rtout:1;
		uint64_t reserved_5_6:2;
		uint64_t po1_2sml:1;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t reserved_5_6:2;
		uint64_t i0_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t reserved_9_10:2;
		uint64_t i0_overf:1;
		uint64_t i1_overf:1;
		uint64_t reserved_13_14:2;
		uint64_t p0_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t reserved_17_18:2;
		uint64_t p0_perr:1;
		uint64_t p1_perr:1;
		uint64_t reserved_21_22:2;
		uint64_t g0_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t reserved_25_26:2;
		uint64_t p0_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t reserved_29_30:2;
		uint64_t p0_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t reserved_33_34:2;
		uint64_t i0_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t reserved_37_38:2;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t fcr_s_e:1;
		uint64_t fcr_a_f:1;
		uint64_t pcr_s_e:1;
		uint64_t pcr_a_f:1;
		uint64_t q2_s_e:1;
		uint64_t q2_a_f:1;
		uint64_t q3_s_e:1;
		uint64_t q3_a_f:1;
		uint64_t com_s_e:1;
		uint64_t com_a_f:1;
		uint64_t pnc_s_e:1;
		uint64_t pnc_a_f:1;
		uint64_t rwx_s_e:1;
		uint64_t rdx_s_e:1;
		uint64_t pcf_p_e:1;
		uint64_t pcf_p_f:1;
		uint64_t pdf_p_e:1;
		uint64_t pdf_p_f:1;
		uint64_t q1_s_e:1;
		uint64_t q1_a_f:1;
		uint64_t reserved_62_63:2;
#endif
	} cn31xx;
	struct cvmx_npi_int_sum_s cn38xx;
	struct cvmx_npi_int_sum_cn38xxp2 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_42_63:22;
		uint64_t iobdma:1;
		uint64_t p_dperr:1;
		uint64_t win_rto:1;
		uint64_t i3_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i0_pperr:1;
		uint64_t p3_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p0_ptout:1;
		uint64_t p3_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p0_pperr:1;
		uint64_t g3_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g0_rtout:1;
		uint64_t p3_perr:1;
		uint64_t p2_perr:1;
		uint64_t p1_perr:1;
		uint64_t p0_perr:1;
		uint64_t p3_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p0_rtout:1;
		uint64_t i3_overf:1;
		uint64_t i2_overf:1;
		uint64_t i1_overf:1;
		uint64_t i0_overf:1;
		uint64_t i3_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i0_rtout:1;
		uint64_t po3_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po0_2sml:1;
		uint64_t pci_rsl:1;
		uint64_t rml_wto:1;
		uint64_t rml_rto:1;
#else
		uint64_t rml_rto:1;
		uint64_t rml_wto:1;
		uint64_t pci_rsl:1;
		uint64_t po0_2sml:1;
		uint64_t po1_2sml:1;
		uint64_t po2_2sml:1;
		uint64_t po3_2sml:1;
		uint64_t i0_rtout:1;
		uint64_t i1_rtout:1;
		uint64_t i2_rtout:1;
		uint64_t i3_rtout:1;
		uint64_t i0_overf:1;
		uint64_t i1_overf:1;
		uint64_t i2_overf:1;
		uint64_t i3_overf:1;
		uint64_t p0_rtout:1;
		uint64_t p1_rtout:1;
		uint64_t p2_rtout:1;
		uint64_t p3_rtout:1;
		uint64_t p0_perr:1;
		uint64_t p1_perr:1;
		uint64_t p2_perr:1;
		uint64_t p3_perr:1;
		uint64_t g0_rtout:1;
		uint64_t g1_rtout:1;
		uint64_t g2_rtout:1;
		uint64_t g3_rtout:1;
		uint64_t p0_pperr:1;
		uint64_t p1_pperr:1;
		uint64_t p2_pperr:1;
		uint64_t p3_pperr:1;
		uint64_t p0_ptout:1;
		uint64_t p1_ptout:1;
		uint64_t p2_ptout:1;
		uint64_t p3_ptout:1;
		uint64_t i0_pperr:1;
		uint64_t i1_pperr:1;
		uint64_t i2_pperr:1;
		uint64_t i3_pperr:1;
		uint64_t win_rto:1;
		uint64_t p_dperr:1;
		uint64_t iobdma:1;
		uint64_t reserved_42_63:22;
#endif
	} cn38xxp2;
	struct cvmx_npi_int_sum_cn31xx cn50xx;
	struct cvmx_npi_int_sum_s cn58xx;
	struct cvmx_npi_int_sum_s cn58xxp1;
};

union cvmx_npi_lowp_dbell {
	uint64_t u64;
	struct cvmx_npi_lowp_dbell_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t dbell:16;
#else
		uint64_t dbell:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_npi_lowp_dbell_s cn30xx;
	struct cvmx_npi_lowp_dbell_s cn31xx;
	struct cvmx_npi_lowp_dbell_s cn38xx;
	struct cvmx_npi_lowp_dbell_s cn38xxp2;
	struct cvmx_npi_lowp_dbell_s cn50xx;
	struct cvmx_npi_lowp_dbell_s cn58xx;
	struct cvmx_npi_lowp_dbell_s cn58xxp1;
};

union cvmx_npi_lowp_ibuff_saddr {
	uint64_t u64;
	struct cvmx_npi_lowp_ibuff_saddr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_36_63:28;
		uint64_t saddr:36;
#else
		uint64_t saddr:36;
		uint64_t reserved_36_63:28;
#endif
	} s;
	struct cvmx_npi_lowp_ibuff_saddr_s cn30xx;
	struct cvmx_npi_lowp_ibuff_saddr_s cn31xx;
	struct cvmx_npi_lowp_ibuff_saddr_s cn38xx;
	struct cvmx_npi_lowp_ibuff_saddr_s cn38xxp2;
	struct cvmx_npi_lowp_ibuff_saddr_s cn50xx;
	struct cvmx_npi_lowp_ibuff_saddr_s cn58xx;
	struct cvmx_npi_lowp_ibuff_saddr_s cn58xxp1;
};

union cvmx_npi_mem_access_subidx {
	uint64_t u64;
	struct cvmx_npi_mem_access_subidx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_38_63:26;
		uint64_t shortl:1;
		uint64_t nmerge:1;
		uint64_t esr:2;
		uint64_t esw:2;
		uint64_t nsr:1;
		uint64_t nsw:1;
		uint64_t ror:1;
		uint64_t row:1;
		uint64_t ba:28;
#else
		uint64_t ba:28;
		uint64_t row:1;
		uint64_t ror:1;
		uint64_t nsw:1;
		uint64_t nsr:1;
		uint64_t esw:2;
		uint64_t esr:2;
		uint64_t nmerge:1;
		uint64_t shortl:1;
		uint64_t reserved_38_63:26;
#endif
	} s;
	struct cvmx_npi_mem_access_subidx_s cn30xx;
	struct cvmx_npi_mem_access_subidx_cn31xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_36_63:28;
		uint64_t esr:2;
		uint64_t esw:2;
		uint64_t nsr:1;
		uint64_t nsw:1;
		uint64_t ror:1;
		uint64_t row:1;
		uint64_t ba:28;
#else
		uint64_t ba:28;
		uint64_t row:1;
		uint64_t ror:1;
		uint64_t nsw:1;
		uint64_t nsr:1;
		uint64_t esw:2;
		uint64_t esr:2;
		uint64_t reserved_36_63:28;
#endif
	} cn31xx;
	struct cvmx_npi_mem_access_subidx_s cn38xx;
	struct cvmx_npi_mem_access_subidx_cn31xx cn38xxp2;
	struct cvmx_npi_mem_access_subidx_s cn50xx;
	struct cvmx_npi_mem_access_subidx_s cn58xx;
	struct cvmx_npi_mem_access_subidx_s cn58xxp1;
};

union cvmx_npi_msi_rcv {
	uint64_t u64;
	struct cvmx_npi_msi_rcv_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t int_vec:64;
#else
		uint64_t int_vec:64;
#endif
	} s;
	struct cvmx_npi_msi_rcv_s cn30xx;
	struct cvmx_npi_msi_rcv_s cn31xx;
	struct cvmx_npi_msi_rcv_s cn38xx;
	struct cvmx_npi_msi_rcv_s cn38xxp2;
	struct cvmx_npi_msi_rcv_s cn50xx;
	struct cvmx_npi_msi_rcv_s cn58xx;
	struct cvmx_npi_msi_rcv_s cn58xxp1;
};

union cvmx_npi_num_desc_outputx {
	uint64_t u64;
	struct cvmx_npi_num_desc_outputx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t size:32;
#else
		uint64_t size:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_npi_num_desc_outputx_s cn30xx;
	struct cvmx_npi_num_desc_outputx_s cn31xx;
	struct cvmx_npi_num_desc_outputx_s cn38xx;
	struct cvmx_npi_num_desc_outputx_s cn38xxp2;
	struct cvmx_npi_num_desc_outputx_s cn50xx;
	struct cvmx_npi_num_desc_outputx_s cn58xx;
	struct cvmx_npi_num_desc_outputx_s cn58xxp1;
};

union cvmx_npi_output_control {
	uint64_t u64;
	struct cvmx_npi_output_control_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t pkt_rr:1;
		uint64_t p3_bmode:1;
		uint64_t p2_bmode:1;
		uint64_t p1_bmode:1;
		uint64_t p0_bmode:1;
		uint64_t o3_es:2;
		uint64_t o3_ns:1;
		uint64_t o3_ro:1;
		uint64_t o2_es:2;
		uint64_t o2_ns:1;
		uint64_t o2_ro:1;
		uint64_t o1_es:2;
		uint64_t o1_ns:1;
		uint64_t o1_ro:1;
		uint64_t o0_es:2;
		uint64_t o0_ns:1;
		uint64_t o0_ro:1;
		uint64_t o3_csrm:1;
		uint64_t o2_csrm:1;
		uint64_t o1_csrm:1;
		uint64_t o0_csrm:1;
		uint64_t reserved_20_23:4;
		uint64_t iptr_o3:1;
		uint64_t iptr_o2:1;
		uint64_t iptr_o1:1;
		uint64_t iptr_o0:1;
		uint64_t esr_sl3:2;
		uint64_t nsr_sl3:1;
		uint64_t ror_sl3:1;
		uint64_t esr_sl2:2;
		uint64_t nsr_sl2:1;
		uint64_t ror_sl2:1;
		uint64_t esr_sl1:2;
		uint64_t nsr_sl1:1;
		uint64_t ror_sl1:1;
		uint64_t esr_sl0:2;
		uint64_t nsr_sl0:1;
		uint64_t ror_sl0:1;
#else
		uint64_t ror_sl0:1;
		uint64_t nsr_sl0:1;
		uint64_t esr_sl0:2;
		uint64_t ror_sl1:1;
		uint64_t nsr_sl1:1;
		uint64_t esr_sl1:2;
		uint64_t ror_sl2:1;
		uint64_t nsr_sl2:1;
		uint64_t esr_sl2:2;
		uint64_t ror_sl3:1;
		uint64_t nsr_sl3:1;
		uint64_t esr_sl3:2;
		uint64_t iptr_o0:1;
		uint64_t iptr_o1:1;
		uint64_t iptr_o2:1;
		uint64_t iptr_o3:1;
		uint64_t reserved_20_23:4;
		uint64_t o0_csrm:1;
		uint64_t o1_csrm:1;
		uint64_t o2_csrm:1;
		uint64_t o3_csrm:1;
		uint64_t o0_ro:1;
		uint64_t o0_ns:1;
		uint64_t o0_es:2;
		uint64_t o1_ro:1;
		uint64_t o1_ns:1;
		uint64_t o1_es:2;
		uint64_t o2_ro:1;
		uint64_t o2_ns:1;
		uint64_t o2_es:2;
		uint64_t o3_ro:1;
		uint64_t o3_ns:1;
		uint64_t o3_es:2;
		uint64_t p0_bmode:1;
		uint64_t p1_bmode:1;
		uint64_t p2_bmode:1;
		uint64_t p3_bmode:1;
		uint64_t pkt_rr:1;
		uint64_t reserved_49_63:15;
#endif
	} s;
	struct cvmx_npi_output_control_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_45_63:19;
		uint64_t p0_bmode:1;
		uint64_t reserved_32_43:12;
		uint64_t o0_es:2;
		uint64_t o0_ns:1;
		uint64_t o0_ro:1;
		uint64_t reserved_25_27:3;
		uint64_t o0_csrm:1;
		uint64_t reserved_17_23:7;
		uint64_t iptr_o0:1;
		uint64_t reserved_4_15:12;
		uint64_t esr_sl0:2;
		uint64_t nsr_sl0:1;
		uint64_t ror_sl0:1;
#else
		uint64_t ror_sl0:1;
		uint64_t nsr_sl0:1;
		uint64_t esr_sl0:2;
		uint64_t reserved_4_15:12;
		uint64_t iptr_o0:1;
		uint64_t reserved_17_23:7;
		uint64_t o0_csrm:1;
		uint64_t reserved_25_27:3;
		uint64_t o0_ro:1;
		uint64_t o0_ns:1;
		uint64_t o0_es:2;
		uint64_t reserved_32_43:12;
		uint64_t p0_bmode:1;
		uint64_t reserved_45_63:19;
#endif
	} cn30xx;
	struct cvmx_npi_output_control_cn31xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_46_63:18;
		uint64_t p1_bmode:1;
		uint64_t p0_bmode:1;
		uint64_t reserved_36_43:8;
		uint64_t o1_es:2;
		uint64_t o1_ns:1;
		uint64_t o1_ro:1;
		uint64_t o0_es:2;
		uint64_t o0_ns:1;
		uint64_t o0_ro:1;
		uint64_t reserved_26_27:2;
		uint64_t o1_csrm:1;
		uint64_t o0_csrm:1;
		uint64_t reserved_18_23:6;
		uint64_t iptr_o1:1;
		uint64_t iptr_o0:1;
		uint64_t reserved_8_15:8;
		uint64_t esr_sl1:2;
		uint64_t nsr_sl1:1;
		uint64_t ror_sl1:1;
		uint64_t esr_sl0:2;
		uint64_t nsr_sl0:1;
		uint64_t ror_sl0:1;
#else
		uint64_t ror_sl0:1;
		uint64_t nsr_sl0:1;
		uint64_t esr_sl0:2;
		uint64_t ror_sl1:1;
		uint64_t nsr_sl1:1;
		uint64_t esr_sl1:2;
		uint64_t reserved_8_15:8;
		uint64_t iptr_o0:1;
		uint64_t iptr_o1:1;
		uint64_t reserved_18_23:6;
		uint64_t o0_csrm:1;
		uint64_t o1_csrm:1;
		uint64_t reserved_26_27:2;
		uint64_t o0_ro:1;
		uint64_t o0_ns:1;
		uint64_t o0_es:2;
		uint64_t o1_ro:1;
		uint64_t o1_ns:1;
		uint64_t o1_es:2;
		uint64_t reserved_36_43:8;
		uint64_t p0_bmode:1;
		uint64_t p1_bmode:1;
		uint64_t reserved_46_63:18;
#endif
	} cn31xx;
	struct cvmx_npi_output_control_s cn38xx;
	struct cvmx_npi_output_control_cn38xxp2 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_48_63:16;
		uint64_t p3_bmode:1;
		uint64_t p2_bmode:1;
		uint64_t p1_bmode:1;
		uint64_t p0_bmode:1;
		uint64_t o3_es:2;
		uint64_t o3_ns:1;
		uint64_t o3_ro:1;
		uint64_t o2_es:2;
		uint64_t o2_ns:1;
		uint64_t o2_ro:1;
		uint64_t o1_es:2;
		uint64_t o1_ns:1;
		uint64_t o1_ro:1;
		uint64_t o0_es:2;
		uint64_t o0_ns:1;
		uint64_t o0_ro:1;
		uint64_t o3_csrm:1;
		uint64_t o2_csrm:1;
		uint64_t o1_csrm:1;
		uint64_t o0_csrm:1;
		uint64_t reserved_20_23:4;
		uint64_t iptr_o3:1;
		uint64_t iptr_o2:1;
		uint64_t iptr_o1:1;
		uint64_t iptr_o0:1;
		uint64_t esr_sl3:2;
		uint64_t nsr_sl3:1;
		uint64_t ror_sl3:1;
		uint64_t esr_sl2:2;
		uint64_t nsr_sl2:1;
		uint64_t ror_sl2:1;
		uint64_t esr_sl1:2;
		uint64_t nsr_sl1:1;
		uint64_t ror_sl1:1;
		uint64_t esr_sl0:2;
		uint64_t nsr_sl0:1;
		uint64_t ror_sl0:1;
#else
		uint64_t ror_sl0:1;
		uint64_t nsr_sl0:1;
		uint64_t esr_sl0:2;
		uint64_t ror_sl1:1;
		uint64_t nsr_sl1:1;
		uint64_t esr_sl1:2;
		uint64_t ror_sl2:1;
		uint64_t nsr_sl2:1;
		uint64_t esr_sl2:2;
		uint64_t ror_sl3:1;
		uint64_t nsr_sl3:1;
		uint64_t esr_sl3:2;
		uint64_t iptr_o0:1;
		uint64_t iptr_o1:1;
		uint64_t iptr_o2:1;
		uint64_t iptr_o3:1;
		uint64_t reserved_20_23:4;
		uint64_t o0_csrm:1;
		uint64_t o1_csrm:1;
		uint64_t o2_csrm:1;
		uint64_t o3_csrm:1;
		uint64_t o0_ro:1;
		uint64_t o0_ns:1;
		uint64_t o0_es:2;
		uint64_t o1_ro:1;
		uint64_t o1_ns:1;
		uint64_t o1_es:2;
		uint64_t o2_ro:1;
		uint64_t o2_ns:1;
		uint64_t o2_es:2;
		uint64_t o3_ro:1;
		uint64_t o3_ns:1;
		uint64_t o3_es:2;
		uint64_t p0_bmode:1;
		uint64_t p1_bmode:1;
		uint64_t p2_bmode:1;
		uint64_t p3_bmode:1;
		uint64_t reserved_48_63:16;
#endif
	} cn38xxp2;
	struct cvmx_npi_output_control_cn50xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t pkt_rr:1;
		uint64_t reserved_46_47:2;
		uint64_t p1_bmode:1;
		uint64_t p0_bmode:1;
		uint64_t reserved_36_43:8;
		uint64_t o1_es:2;
		uint64_t o1_ns:1;
		uint64_t o1_ro:1;
		uint64_t o0_es:2;
		uint64_t o0_ns:1;
		uint64_t o0_ro:1;
		uint64_t reserved_26_27:2;
		uint64_t o1_csrm:1;
		uint64_t o0_csrm:1;
		uint64_t reserved_18_23:6;
		uint64_t iptr_o1:1;
		uint64_t iptr_o0:1;
		uint64_t reserved_8_15:8;
		uint64_t esr_sl1:2;
		uint64_t nsr_sl1:1;
		uint64_t ror_sl1:1;
		uint64_t esr_sl0:2;
		uint64_t nsr_sl0:1;
		uint64_t ror_sl0:1;
#else
		uint64_t ror_sl0:1;
		uint64_t nsr_sl0:1;
		uint64_t esr_sl0:2;
		uint64_t ror_sl1:1;
		uint64_t nsr_sl1:1;
		uint64_t esr_sl1:2;
		uint64_t reserved_8_15:8;
		uint64_t iptr_o0:1;
		uint64_t iptr_o1:1;
		uint64_t reserved_18_23:6;
		uint64_t o0_csrm:1;
		uint64_t o1_csrm:1;
		uint64_t reserved_26_27:2;
		uint64_t o0_ro:1;
		uint64_t o0_ns:1;
		uint64_t o0_es:2;
		uint64_t o1_ro:1;
		uint64_t o1_ns:1;
		uint64_t o1_es:2;
		uint64_t reserved_36_43:8;
		uint64_t p0_bmode:1;
		uint64_t p1_bmode:1;
		uint64_t reserved_46_47:2;
		uint64_t pkt_rr:1;
		uint64_t reserved_49_63:15;
#endif
	} cn50xx;
	struct cvmx_npi_output_control_s cn58xx;
	struct cvmx_npi_output_control_s cn58xxp1;
};

union cvmx_npi_px_dbpair_addr {
	uint64_t u64;
	struct cvmx_npi_px_dbpair_addr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_63_63:1;
		uint64_t state:2;
		uint64_t naddr:61;
#else
		uint64_t naddr:61;
		uint64_t state:2;
		uint64_t reserved_63_63:1;
#endif
	} s;
	struct cvmx_npi_px_dbpair_addr_s cn30xx;
	struct cvmx_npi_px_dbpair_addr_s cn31xx;
	struct cvmx_npi_px_dbpair_addr_s cn38xx;
	struct cvmx_npi_px_dbpair_addr_s cn38xxp2;
	struct cvmx_npi_px_dbpair_addr_s cn50xx;
	struct cvmx_npi_px_dbpair_addr_s cn58xx;
	struct cvmx_npi_px_dbpair_addr_s cn58xxp1;
};

union cvmx_npi_px_instr_addr {
	uint64_t u64;
	struct cvmx_npi_px_instr_addr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t state:3;
		uint64_t naddr:61;
#else
		uint64_t naddr:61;
		uint64_t state:3;
#endif
	} s;
	struct cvmx_npi_px_instr_addr_s cn30xx;
	struct cvmx_npi_px_instr_addr_s cn31xx;
	struct cvmx_npi_px_instr_addr_s cn38xx;
	struct cvmx_npi_px_instr_addr_s cn38xxp2;
	struct cvmx_npi_px_instr_addr_s cn50xx;
	struct cvmx_npi_px_instr_addr_s cn58xx;
	struct cvmx_npi_px_instr_addr_s cn58xxp1;
};

union cvmx_npi_px_instr_cnts {
	uint64_t u64;
	struct cvmx_npi_px_instr_cnts_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_38_63:26;
		uint64_t fcnt:6;
		uint64_t avail:32;
#else
		uint64_t avail:32;
		uint64_t fcnt:6;
		uint64_t reserved_38_63:26;
#endif
	} s;
	struct cvmx_npi_px_instr_cnts_s cn30xx;
	struct cvmx_npi_px_instr_cnts_s cn31xx;
	struct cvmx_npi_px_instr_cnts_s cn38xx;
	struct cvmx_npi_px_instr_cnts_s cn38xxp2;
	struct cvmx_npi_px_instr_cnts_s cn50xx;
	struct cvmx_npi_px_instr_cnts_s cn58xx;
	struct cvmx_npi_px_instr_cnts_s cn58xxp1;
};

union cvmx_npi_px_pair_cnts {
	uint64_t u64;
	struct cvmx_npi_px_pair_cnts_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_37_63:27;
		uint64_t fcnt:5;
		uint64_t avail:32;
#else
		uint64_t avail:32;
		uint64_t fcnt:5;
		uint64_t reserved_37_63:27;
#endif
	} s;
	struct cvmx_npi_px_pair_cnts_s cn30xx;
	struct cvmx_npi_px_pair_cnts_s cn31xx;
	struct cvmx_npi_px_pair_cnts_s cn38xx;
	struct cvmx_npi_px_pair_cnts_s cn38xxp2;
	struct cvmx_npi_px_pair_cnts_s cn50xx;
	struct cvmx_npi_px_pair_cnts_s cn58xx;
	struct cvmx_npi_px_pair_cnts_s cn58xxp1;
};

union cvmx_npi_pci_burst_size {
	uint64_t u64;
	struct cvmx_npi_pci_burst_size_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_14_63:50;
		uint64_t wr_brst:7;
		uint64_t rd_brst:7;
#else
		uint64_t rd_brst:7;
		uint64_t wr_brst:7;
		uint64_t reserved_14_63:50;
#endif
	} s;
	struct cvmx_npi_pci_burst_size_s cn30xx;
	struct cvmx_npi_pci_burst_size_s cn31xx;
	struct cvmx_npi_pci_burst_size_s cn38xx;
	struct cvmx_npi_pci_burst_size_s cn38xxp2;
	struct cvmx_npi_pci_burst_size_s cn50xx;
	struct cvmx_npi_pci_burst_size_s cn58xx;
	struct cvmx_npi_pci_burst_size_s cn58xxp1;
};

union cvmx_npi_pci_int_arb_cfg {
	uint64_t u64;
	struct cvmx_npi_pci_int_arb_cfg_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_13_63:51;
		uint64_t hostmode:1;
		uint64_t pci_ovr:4;
		uint64_t reserved_5_7:3;
		uint64_t en:1;
		uint64_t park_mod:1;
		uint64_t park_dev:3;
#else
		uint64_t park_dev:3;
		uint64_t park_mod:1;
		uint64_t en:1;
		uint64_t reserved_5_7:3;
		uint64_t pci_ovr:4;
		uint64_t hostmode:1;
		uint64_t reserved_13_63:51;
#endif
	} s;
	struct cvmx_npi_pci_int_arb_cfg_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_5_63:59;
		uint64_t en:1;
		uint64_t park_mod:1;
		uint64_t park_dev:3;
#else
		uint64_t park_dev:3;
		uint64_t park_mod:1;
		uint64_t en:1;
		uint64_t reserved_5_63:59;
#endif
	} cn30xx;
	struct cvmx_npi_pci_int_arb_cfg_cn30xx cn31xx;
	struct cvmx_npi_pci_int_arb_cfg_cn30xx cn38xx;
	struct cvmx_npi_pci_int_arb_cfg_cn30xx cn38xxp2;
	struct cvmx_npi_pci_int_arb_cfg_s cn50xx;
	struct cvmx_npi_pci_int_arb_cfg_s cn58xx;
	struct cvmx_npi_pci_int_arb_cfg_s cn58xxp1;
};

union cvmx_npi_pci_read_cmd {
	uint64_t u64;
	struct cvmx_npi_pci_read_cmd_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_11_63:53;
		uint64_t cmd_size:11;
#else
		uint64_t cmd_size:11;
		uint64_t reserved_11_63:53;
#endif
	} s;
	struct cvmx_npi_pci_read_cmd_s cn30xx;
	struct cvmx_npi_pci_read_cmd_s cn31xx;
	struct cvmx_npi_pci_read_cmd_s cn38xx;
	struct cvmx_npi_pci_read_cmd_s cn38xxp2;
	struct cvmx_npi_pci_read_cmd_s cn50xx;
	struct cvmx_npi_pci_read_cmd_s cn58xx;
	struct cvmx_npi_pci_read_cmd_s cn58xxp1;
};

union cvmx_npi_port32_instr_hdr {
	uint64_t u64;
	struct cvmx_npi_port32_instr_hdr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_44_63:20;
		uint64_t pbp:1;
		uint64_t rsv_f:5;
		uint64_t rparmode:2;
		uint64_t rsv_e:1;
		uint64_t rskp_len:7;
		uint64_t rsv_d:6;
		uint64_t use_ihdr:1;
		uint64_t rsv_c:5;
		uint64_t par_mode:2;
		uint64_t rsv_b:1;
		uint64_t skp_len:7;
		uint64_t rsv_a:6;
#else
		uint64_t rsv_a:6;
		uint64_t skp_len:7;
		uint64_t rsv_b:1;
		uint64_t par_mode:2;
		uint64_t rsv_c:5;
		uint64_t use_ihdr:1;
		uint64_t rsv_d:6;
		uint64_t rskp_len:7;
		uint64_t rsv_e:1;
		uint64_t rparmode:2;
		uint64_t rsv_f:5;
		uint64_t pbp:1;
		uint64_t reserved_44_63:20;
#endif
	} s;
	struct cvmx_npi_port32_instr_hdr_s cn30xx;
	struct cvmx_npi_port32_instr_hdr_s cn31xx;
	struct cvmx_npi_port32_instr_hdr_s cn38xx;
	struct cvmx_npi_port32_instr_hdr_s cn38xxp2;
	struct cvmx_npi_port32_instr_hdr_s cn50xx;
	struct cvmx_npi_port32_instr_hdr_s cn58xx;
	struct cvmx_npi_port32_instr_hdr_s cn58xxp1;
};

union cvmx_npi_port33_instr_hdr {
	uint64_t u64;
	struct cvmx_npi_port33_instr_hdr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_44_63:20;
		uint64_t pbp:1;
		uint64_t rsv_f:5;
		uint64_t rparmode:2;
		uint64_t rsv_e:1;
		uint64_t rskp_len:7;
		uint64_t rsv_d:6;
		uint64_t use_ihdr:1;
		uint64_t rsv_c:5;
		uint64_t par_mode:2;
		uint64_t rsv_b:1;
		uint64_t skp_len:7;
		uint64_t rsv_a:6;
#else
		uint64_t rsv_a:6;
		uint64_t skp_len:7;
		uint64_t rsv_b:1;
		uint64_t par_mode:2;
		uint64_t rsv_c:5;
		uint64_t use_ihdr:1;
		uint64_t rsv_d:6;
		uint64_t rskp_len:7;
		uint64_t rsv_e:1;
		uint64_t rparmode:2;
		uint64_t rsv_f:5;
		uint64_t pbp:1;
		uint64_t reserved_44_63:20;
#endif
	} s;
	struct cvmx_npi_port33_instr_hdr_s cn31xx;
	struct cvmx_npi_port33_instr_hdr_s cn38xx;
	struct cvmx_npi_port33_instr_hdr_s cn38xxp2;
	struct cvmx_npi_port33_instr_hdr_s cn50xx;
	struct cvmx_npi_port33_instr_hdr_s cn58xx;
	struct cvmx_npi_port33_instr_hdr_s cn58xxp1;
};

union cvmx_npi_port34_instr_hdr {
	uint64_t u64;
	struct cvmx_npi_port34_instr_hdr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_44_63:20;
		uint64_t pbp:1;
		uint64_t rsv_f:5;
		uint64_t rparmode:2;
		uint64_t rsv_e:1;
		uint64_t rskp_len:7;
		uint64_t rsv_d:6;
		uint64_t use_ihdr:1;
		uint64_t rsv_c:5;
		uint64_t par_mode:2;
		uint64_t rsv_b:1;
		uint64_t skp_len:7;
		uint64_t rsv_a:6;
#else
		uint64_t rsv_a:6;
		uint64_t skp_len:7;
		uint64_t rsv_b:1;
		uint64_t par_mode:2;
		uint64_t rsv_c:5;
		uint64_t use_ihdr:1;
		uint64_t rsv_d:6;
		uint64_t rskp_len:7;
		uint64_t rsv_e:1;
		uint64_t rparmode:2;
		uint64_t rsv_f:5;
		uint64_t pbp:1;
		uint64_t reserved_44_63:20;
#endif
	} s;
	struct cvmx_npi_port34_instr_hdr_s cn38xx;
	struct cvmx_npi_port34_instr_hdr_s cn38xxp2;
	struct cvmx_npi_port34_instr_hdr_s cn58xx;
	struct cvmx_npi_port34_instr_hdr_s cn58xxp1;
};

union cvmx_npi_port35_instr_hdr {
	uint64_t u64;
	struct cvmx_npi_port35_instr_hdr_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_44_63:20;
		uint64_t pbp:1;
		uint64_t rsv_f:5;
		uint64_t rparmode:2;
		uint64_t rsv_e:1;
		uint64_t rskp_len:7;
		uint64_t rsv_d:6;
		uint64_t use_ihdr:1;
		uint64_t rsv_c:5;
		uint64_t par_mode:2;
		uint64_t rsv_b:1;
		uint64_t skp_len:7;
		uint64_t rsv_a:6;
#else
		uint64_t rsv_a:6;
		uint64_t skp_len:7;
		uint64_t rsv_b:1;
		uint64_t par_mode:2;
		uint64_t rsv_c:5;
		uint64_t use_ihdr:1;
		uint64_t rsv_d:6;
		uint64_t rskp_len:7;
		uint64_t rsv_e:1;
		uint64_t rparmode:2;
		uint64_t rsv_f:5;
		uint64_t pbp:1;
		uint64_t reserved_44_63:20;
#endif
	} s;
	struct cvmx_npi_port35_instr_hdr_s cn38xx;
	struct cvmx_npi_port35_instr_hdr_s cn38xxp2;
	struct cvmx_npi_port35_instr_hdr_s cn58xx;
	struct cvmx_npi_port35_instr_hdr_s cn58xxp1;
};

union cvmx_npi_port_bp_control {
	uint64_t u64;
	struct cvmx_npi_port_bp_control_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_8_63:56;
		uint64_t bp_on:4;
		uint64_t enb:4;
#else
		uint64_t enb:4;
		uint64_t bp_on:4;
		uint64_t reserved_8_63:56;
#endif
	} s;
	struct cvmx_npi_port_bp_control_s cn30xx;
	struct cvmx_npi_port_bp_control_s cn31xx;
	struct cvmx_npi_port_bp_control_s cn38xx;
	struct cvmx_npi_port_bp_control_s cn38xxp2;
	struct cvmx_npi_port_bp_control_s cn50xx;
	struct cvmx_npi_port_bp_control_s cn58xx;
	struct cvmx_npi_port_bp_control_s cn58xxp1;
};

union cvmx_npi_rsl_int_blocks {
	uint64_t u64;
	struct cvmx_npi_rsl_int_blocks_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t rint_31:1;
		uint64_t iob:1;
		uint64_t reserved_28_29:2;
		uint64_t rint_27:1;
		uint64_t rint_26:1;
		uint64_t rint_25:1;
		uint64_t rint_24:1;
		uint64_t asx1:1;
		uint64_t asx0:1;
		uint64_t rint_21:1;
		uint64_t pip:1;
		uint64_t spx1:1;
		uint64_t spx0:1;
		uint64_t lmc:1;
		uint64_t l2c:1;
		uint64_t rint_15:1;
		uint64_t reserved_13_14:2;
		uint64_t pow:1;
		uint64_t tim:1;
		uint64_t pko:1;
		uint64_t ipd:1;
		uint64_t rint_8:1;
		uint64_t zip:1;
		uint64_t dfa:1;
		uint64_t fpa:1;
		uint64_t key:1;
		uint64_t npi:1;
		uint64_t gmx1:1;
		uint64_t gmx0:1;
		uint64_t mio:1;
#else
		uint64_t mio:1;
		uint64_t gmx0:1;
		uint64_t gmx1:1;
		uint64_t npi:1;
		uint64_t key:1;
		uint64_t fpa:1;
		uint64_t dfa:1;
		uint64_t zip:1;
		uint64_t rint_8:1;
		uint64_t ipd:1;
		uint64_t pko:1;
		uint64_t tim:1;
		uint64_t pow:1;
		uint64_t reserved_13_14:2;
		uint64_t rint_15:1;
		uint64_t l2c:1;
		uint64_t lmc:1;
		uint64_t spx0:1;
		uint64_t spx1:1;
		uint64_t pip:1;
		uint64_t rint_21:1;
		uint64_t asx0:1;
		uint64_t asx1:1;
		uint64_t rint_24:1;
		uint64_t rint_25:1;
		uint64_t rint_26:1;
		uint64_t rint_27:1;
		uint64_t reserved_28_29:2;
		uint64_t iob:1;
		uint64_t rint_31:1;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_npi_rsl_int_blocks_cn30xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t rint_31:1;
		uint64_t iob:1;
		uint64_t rint_29:1;
		uint64_t rint_28:1;
		uint64_t rint_27:1;
		uint64_t rint_26:1;
		uint64_t rint_25:1;
		uint64_t rint_24:1;
		uint64_t asx1:1;
		uint64_t asx0:1;
		uint64_t rint_21:1;
		uint64_t pip:1;
		uint64_t spx1:1;
		uint64_t spx0:1;
		uint64_t lmc:1;
		uint64_t l2c:1;
		uint64_t rint_15:1;
		uint64_t rint_14:1;
		uint64_t usb:1;
		uint64_t pow:1;
		uint64_t tim:1;
		uint64_t pko:1;
		uint64_t ipd:1;
		uint64_t rint_8:1;
		uint64_t zip:1;
		uint64_t dfa:1;
		uint64_t fpa:1;
		uint64_t key:1;
		uint64_t npi:1;
		uint64_t gmx1:1;
		uint64_t gmx0:1;
		uint64_t mio:1;
#else
		uint64_t mio:1;
		uint64_t gmx0:1;
		uint64_t gmx1:1;
		uint64_t npi:1;
		uint64_t key:1;
		uint64_t fpa:1;
		uint64_t dfa:1;
		uint64_t zip:1;
		uint64_t rint_8:1;
		uint64_t ipd:1;
		uint64_t pko:1;
		uint64_t tim:1;
		uint64_t pow:1;
		uint64_t usb:1;
		uint64_t rint_14:1;
		uint64_t rint_15:1;
		uint64_t l2c:1;
		uint64_t lmc:1;
		uint64_t spx0:1;
		uint64_t spx1:1;
		uint64_t pip:1;
		uint64_t rint_21:1;
		uint64_t asx0:1;
		uint64_t asx1:1;
		uint64_t rint_24:1;
		uint64_t rint_25:1;
		uint64_t rint_26:1;
		uint64_t rint_27:1;
		uint64_t rint_28:1;
		uint64_t rint_29:1;
		uint64_t iob:1;
		uint64_t rint_31:1;
		uint64_t reserved_32_63:32;
#endif
	} cn30xx;
	struct cvmx_npi_rsl_int_blocks_cn30xx cn31xx;
	struct cvmx_npi_rsl_int_blocks_cn38xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t rint_31:1;
		uint64_t iob:1;
		uint64_t rint_29:1;
		uint64_t rint_28:1;
		uint64_t rint_27:1;
		uint64_t rint_26:1;
		uint64_t rint_25:1;
		uint64_t rint_24:1;
		uint64_t asx1:1;
		uint64_t asx0:1;
		uint64_t rint_21:1;
		uint64_t pip:1;
		uint64_t spx1:1;
		uint64_t spx0:1;
		uint64_t lmc:1;
		uint64_t l2c:1;
		uint64_t rint_15:1;
		uint64_t rint_14:1;
		uint64_t rint_13:1;
		uint64_t pow:1;
		uint64_t tim:1;
		uint64_t pko:1;
		uint64_t ipd:1;
		uint64_t rint_8:1;
		uint64_t zip:1;
		uint64_t dfa:1;
		uint64_t fpa:1;
		uint64_t key:1;
		uint64_t npi:1;
		uint64_t gmx1:1;
		uint64_t gmx0:1;
		uint64_t mio:1;
#else
		uint64_t mio:1;
		uint64_t gmx0:1;
		uint64_t gmx1:1;
		uint64_t npi:1;
		uint64_t key:1;
		uint64_t fpa:1;
		uint64_t dfa:1;
		uint64_t zip:1;
		uint64_t rint_8:1;
		uint64_t ipd:1;
		uint64_t pko:1;
		uint64_t tim:1;
		uint64_t pow:1;
		uint64_t rint_13:1;
		uint64_t rint_14:1;
		uint64_t rint_15:1;
		uint64_t l2c:1;
		uint64_t lmc:1;
		uint64_t spx0:1;
		uint64_t spx1:1;
		uint64_t pip:1;
		uint64_t rint_21:1;
		uint64_t asx0:1;
		uint64_t asx1:1;
		uint64_t rint_24:1;
		uint64_t rint_25:1;
		uint64_t rint_26:1;
		uint64_t rint_27:1;
		uint64_t rint_28:1;
		uint64_t rint_29:1;
		uint64_t iob:1;
		uint64_t rint_31:1;
		uint64_t reserved_32_63:32;
#endif
	} cn38xx;
	struct cvmx_npi_rsl_int_blocks_cn38xx cn38xxp2;
	struct cvmx_npi_rsl_int_blocks_cn50xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_31_63:33;
		uint64_t iob:1;
		uint64_t lmc1:1;
		uint64_t agl:1;
		uint64_t reserved_24_27:4;
		uint64_t asx1:1;
		uint64_t asx0:1;
		uint64_t reserved_21_21:1;
		uint64_t pip:1;
		uint64_t spx1:1;
		uint64_t spx0:1;
		uint64_t lmc:1;
		uint64_t l2c:1;
		uint64_t reserved_15_15:1;
		uint64_t rad:1;
		uint64_t usb:1;
		uint64_t pow:1;
		uint64_t tim:1;
		uint64_t pko:1;
		uint64_t ipd:1;
		uint64_t reserved_8_8:1;
		uint64_t zip:1;
		uint64_t dfa:1;
		uint64_t fpa:1;
		uint64_t key:1;
		uint64_t npi:1;
		uint64_t gmx1:1;
		uint64_t gmx0:1;
		uint64_t mio:1;
#else
		uint64_t mio:1;
		uint64_t gmx0:1;
		uint64_t gmx1:1;
		uint64_t npi:1;
		uint64_t key:1;
		uint64_t fpa:1;
		uint64_t dfa:1;
		uint64_t zip:1;
		uint64_t reserved_8_8:1;
		uint64_t ipd:1;
		uint64_t pko:1;
		uint64_t tim:1;
		uint64_t pow:1;
		uint64_t usb:1;
		uint64_t rad:1;
		uint64_t reserved_15_15:1;
		uint64_t l2c:1;
		uint64_t lmc:1;
		uint64_t spx0:1;
		uint64_t spx1:1;
		uint64_t pip:1;
		uint64_t reserved_21_21:1;
		uint64_t asx0:1;
		uint64_t asx1:1;
		uint64_t reserved_24_27:4;
		uint64_t agl:1;
		uint64_t lmc1:1;
		uint64_t iob:1;
		uint64_t reserved_31_63:33;
#endif
	} cn50xx;
	struct cvmx_npi_rsl_int_blocks_cn38xx cn58xx;
	struct cvmx_npi_rsl_int_blocks_cn38xx cn58xxp1;
};

union cvmx_npi_size_inputx {
	uint64_t u64;
	struct cvmx_npi_size_inputx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t size:32;
#else
		uint64_t size:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_npi_size_inputx_s cn30xx;
	struct cvmx_npi_size_inputx_s cn31xx;
	struct cvmx_npi_size_inputx_s cn38xx;
	struct cvmx_npi_size_inputx_s cn38xxp2;
	struct cvmx_npi_size_inputx_s cn50xx;
	struct cvmx_npi_size_inputx_s cn58xx;
	struct cvmx_npi_size_inputx_s cn58xxp1;
};

union cvmx_npi_win_read_to {
	uint64_t u64;
	struct cvmx_npi_win_read_to_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t time:32;
#else
		uint64_t time:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_npi_win_read_to_s cn30xx;
	struct cvmx_npi_win_read_to_s cn31xx;
	struct cvmx_npi_win_read_to_s cn38xx;
	struct cvmx_npi_win_read_to_s cn38xxp2;
	struct cvmx_npi_win_read_to_s cn50xx;
	struct cvmx_npi_win_read_to_s cn58xx;
	struct cvmx_npi_win_read_to_s cn58xxp1;
};

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /***********************license start***************
 * Author: Cavium Networks
 *
 * Contact: support@caviumnetworks.com
 * This file is part of the OCTEON SDK
 *
 * Copyright (c) 2003-2012 Cavium Networks
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, Version 2, as
 * published by the Free Software Foundation.
 *
 * This file is distributed in the hope that it will be useful, but
 * AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 * NONINFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 * or visit http://www.gnu.org/licenses/.
 *
 * This file may also be available under a different license from Cavium.
 * Contact Cavium Networks for more information
 ***********************license end**************************************/

#ifndef __CVMX_PCIERCX_DEFS_H__
#define __CVMX_PCIERCX_DEFS_H__

#define CVMX_PCIERCX_CFG000(block_id) (0x0000000000000000ull)
#define CVMX_PCIERCX_CFG001(block_id) (0x0000000000000004ull)
#define CVMX_PCIERCX_CFG002(block_id) (0x0000000000000008ull)
#define CVMX_PCIERCX_CFG003(block_id) (0x000000000000000Cull)
#define CVMX_PCIERCX_CFG004(block_id) (0x0000000000000010ull)
#define CVMX_PCIERCX_CFG005(block_id) (0x0000000000000014ull)
#define CVMX_PCIERCX_CFG006(block_id) (0x0000000000000018ull)
#define CVMX_PCIERCX_CFG007(block_id) (0x000000000000001Cull)
#define CVMX_PCIERCX_CFG008(block_id) (0x0000000000000020ull)
#define CVMX_PCIERCX_CFG009(block_id) (0x0000000000000024ull)
#define CVMX_PCIERCX_CFG010(block_id) (0x0000000000000028ull)
#define CVMX_PCIERCX_CFG011(block_id) (0x000000000000002Cull)
#define CVMX_PCIERCX_CFG012(block_id) (0x0000000000000030ull)
#define CVMX_PCIERCX_CFG013(block_id) (0x0000000000000034ull)
#define CVMX_PCIERCX_CFG014(block_id) (0x0000000000000038ull)
#define CVMX_PCIERCX_CFG015(block_id) (0x000000000000003Cull)
#define CVMX_PCIERCX_CFG016(block_id) (0x0000000000000040ull)
#define CVMX_PCIERCX_CFG017(block_id) (0x0000000000000044ull)
#define CVMX_PCIERCX_CFG020(block_id) (0x0000000000000050ull)
#define CVMX_PCIERCX_CFG021(block_id) (0x0000000000000054ull)
#define CVMX_PCIERCX_CFG022(block_id) (0x0000000000000058ull)
#define CVMX_PCIERCX_CFG023(block_id) (0x000000000000005Cull)
#define CVMX_PCIERCX_CFG028(block_id) (0x0000000000000070ull)
#define CVMX_PCIERCX_CFG029(block_id) (0x0000000000000074ull)
#define CVMX_PCIERCX_CFG030(block_id) (0x0000000000000078ull)
#define CVMX_PCIERCX_CFG031(block_id) (0x000000000000007Cull)
#define CVMX_PCIERCX_CFG032(block_id) (0x0000000000000080ull)
#define CVMX_PCIERCX_CFG033(block_id) (0x0000000000000084ull)
#define CVMX_PCIERCX_CFG034(block_id) (0x0000000000000088ull)
#define CVMX_PCIERCX_CFG035(block_id) (0x000000000000008Cull)
#define CVMX_PCIERCX_CFG036(block_id) (0x0000000000000090ull)
#define CVMX_PCIERCX_CFG037(block_id) (0x0000000000000094ull)
#define CVMX_PCIERCX_CFG038(block_id) (0x0000000000000098ull)
#define CVMX_PCIERCX_CFG039(block_id) (0x000000000000009Cull)
#define CVMX_PCIERCX_CFG040(block_id) (0x00000000000000A0ull)
#define CVMX_PCIERCX_CFG041(block_id) (0x00000000000000A4ull)
#define CVMX_PCIERCX_CFG042(block_id) (0x00000000000000A8ull)
#define CVMX_PCIERCX_CFG064(block_id) (0x0000000000000100ull)
#define CVMX_PCIERCX_CFG065(block_id) (0x0000000000000104ull)
#define CVMX_PCIERCX_CFG066(block_id) (0x0000000000000108ull)
#define CVMX_PCIERCX_CFG067(block_id) (0x000000000000010Cull)
#define CVMX_PCIERCX_CFG068(block_id) (0x0000000000000110ull)
#define CVMX_PCIERCX_CFG069(block_id) (0x0000000000000114ull)
#define CVMX_PCIERCX_CFG070(block_id) (0x0000000000000118ull)
#define CVMX_PCIERCX_CFG071(block_id) (0x000000000000011Cull)
#define CVMX_PCIERCX_CFG072(block_id) (0x0000000000000120ull)
#define CVMX_PCIERCX_CFG073(block_id) (0x0000000000000124ull)
#define CVMX_PCIERCX_CFG074(block_id) (0x0000000000000128ull)
#define CVMX_PCIERCX_CFG075(block_id) (0x000000000000012Cull)
#define CVMX_PCIERCX_CFG076(block_id) (0x0000000000000130ull)
#define CVMX_PCIERCX_CFG077(block_id) (0x0000000000000134ull)
#define CVMX_PCIERCX_CFG448(block_id) (0x0000000000000700ull)
#define CVMX_PCIERCX_CFG449(block_id) (0x0000000000000704ull)
#define CVMX_PCIERCX_CFG450(block_id) (0x0000000000000708ull)
#define CVMX_PCIERCX_CFG451(block_id) (0x000000000000070Cull)
#define CVMX_PCIERCX_CFG452(block_id) (0x0000000000000710ull)
#define CVMX_PCIERCX_CFG453(block_id) (0x0000000000000714ull)
#define CVMX_PCIERCX_CFG454(block_id) (0x0000000000000718ull)
#define CVMX_PCIERCX_CFG455(block_id) (0x000000000000071Cull)
#define CVMX_PCIERCX_CFG456(block_id) (0x0000000000000720ull)
#define CVMX_PCIERCX_CFG458(block_id) (0x0000000000000728ull)
#define CVMX_PCIERCX_CFG459(block_id) (0x000000000000072Cull)
#define CVMX_PCIERCX_CFG460(block_id) (0x0000000000000730ull)
#define CVMX_PCIERCX_CFG461(block_id) (0x0000000000000734ull)
#define CVMX_PCIERCX_CFG462(block_id) (0x0000000000000738ull)
#define CVMX_PCIERCX_CFG463(block_id) (0x000000000000073Cull)
#define CVMX_PCIERCX_CFG464(block_id) (0x0000000000000740ull)
#define CVMX_PCIERCX_CFG465(block_id) (0x0000000000000744ull)
#define CVMX_PCIERCX_CFG466(block_id) (0x0000000000000748ull)
#define CVMX_PCIERCX_CFG467(block_id) (0x000000000000074Cull)
#define CVMX_PCIERCX_CFG468(block_id) (0x0000000000000750ull)
#define CVMX_PCIERCX_CFG490(block_id) (0x00000000000007A8ull)
#define CVMX_PCIERCX_CFG491(block_id) (0x00000000000007ACull)
#define CVMX_PCIERCX_CFG492(block_id) (0x00000000000007B0ull)
#define CVMX_PCIERCX_CFG515(block_id) (0x000000000000080Cull)
#define CVMX_PCIERCX_CFG516(block_id) (0x0000000000000810ull)
#define CVMX_PCIERCX_CFG517(block_id) (0x0000000000000814ull)

union cvmx_pciercx_cfg000 {
	uint32_t u32;
	struct cvmx_pciercx_cfg000_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t devid:16;
		uint32_t vendid:16;
#else
		uint32_t vendid:16;
		uint32_t devid:16;
#endif
	} s;
	struct cvmx_pciercx_cfg000_s cn52xx;
	struct cvmx_pciercx_cfg000_s cn52xxp1;
	struct cvmx_pciercx_cfg000_s cn56xx;
	struct cvmx_pciercx_cfg000_s cn56xxp1;
	struct cvmx_pciercx_cfg000_s cn61xx;
	struct cvmx_pciercx_cfg000_s cn63xx;
	struct cvmx_pciercx_cfg000_s cn63xxp1;
	struct cvmx_pciercx_cfg000_s cn66xx;
	struct cvmx_pciercx_cfg000_s cn68xx;
	struct cvmx_pciercx_cfg000_s cn68xxp1;
	struct cvmx_pciercx_cfg000_s cnf71xx;
};

union cvmx_pciercx_cfg001 {
	uint32_t u32;
	struct cvmx_pciercx_cfg001_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dpe:1;
		uint32_t sse:1;
		uint32_t rma:1;
		uint32_t rta:1;
		uint32_t sta:1;
		uint32_t devt:2;
		uint32_t mdpe:1;
		uint32_t fbb:1;
		uint32_t reserved_22_22:1;
		uint32_t m66:1;
		uint32_t cl:1;
		uint32_t i_stat:1;
		uint32_t reserved_11_18:8;
		uint32_t i_dis:1;
		uint32_t fbbe:1;
		uint32_t see:1;
		uint32_t ids_wcc:1;
		uint32_t per:1;
		uint32_t vps:1;
		uint32_t mwice:1;
		uint32_t scse:1;
		uint32_t me:1;
		uint32_t msae:1;
		uint32_t isae:1;
#else
		uint32_t isae:1;
		uint32_t msae:1;
		uint32_t me:1;
		uint32_t scse:1;
		uint32_t mwice:1;
		uint32_t vps:1;
		uint32_t per:1;
		uint32_t ids_wcc:1;
		uint32_t see:1;
		uint32_t fbbe:1;
		uint32_t i_dis:1;
		uint32_t reserved_11_18:8;
		uint32_t i_stat:1;
		uint32_t cl:1;
		uint32_t m66:1;
		uint32_t reserved_22_22:1;
		uint32_t fbb:1;
		uint32_t mdpe:1;
		uint32_t devt:2;
		uint32_t sta:1;
		uint32_t rta:1;
		uint32_t rma:1;
		uint32_t sse:1;
		uint32_t dpe:1;
#endif
	} s;
	struct cvmx_pciercx_cfg001_s cn52xx;
	struct cvmx_pciercx_cfg001_s cn52xxp1;
	struct cvmx_pciercx_cfg001_s cn56xx;
	struct cvmx_pciercx_cfg001_s cn56xxp1;
	struct cvmx_pciercx_cfg001_s cn61xx;
	struct cvmx_pciercx_cfg001_s cn63xx;
	struct cvmx_pciercx_cfg001_s cn63xxp1;
	struct cvmx_pciercx_cfg001_s cn66xx;
	struct cvmx_pciercx_cfg001_s cn68xx;
	struct cvmx_pciercx_cfg001_s cn68xxp1;
	struct cvmx_pciercx_cfg001_s cnf71xx;
};

union cvmx_pciercx_cfg002 {
	uint32_t u32;
	struct cvmx_pciercx_cfg002_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t bcc:8;
		uint32_t sc:8;
		uint32_t pi:8;
		uint32_t rid:8;
#else
		uint32_t rid:8;
		uint32_t pi:8;
		uint32_t sc:8;
		uint32_t bcc:8;
#endif
	} s;
	struct cvmx_pciercx_cfg002_s cn52xx;
	struct cvmx_pciercx_cfg002_s cn52xxp1;
	struct cvmx_pciercx_cfg002_s cn56xx;
	struct cvmx_pciercx_cfg002_s cn56xxp1;
	struct cvmx_pciercx_cfg002_s cn61xx;
	struct cvmx_pciercx_cfg002_s cn63xx;
	struct cvmx_pciercx_cfg002_s cn63xxp1;
	struct cvmx_pciercx_cfg002_s cn66xx;
	struct cvmx_pciercx_cfg002_s cn68xx;
	struct cvmx_pciercx_cfg002_s cn68xxp1;
	struct cvmx_pciercx_cfg002_s cnf71xx;
};

union cvmx_pciercx_cfg003 {
	uint32_t u32;
	struct cvmx_pciercx_cfg003_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t bist:8;
		uint32_t mfd:1;
		uint32_t chf:7;
		uint32_t lt:8;
		uint32_t cls:8;
#else
		uint32_t cls:8;
		uint32_t lt:8;
		uint32_t chf:7;
		uint32_t mfd:1;
		uint32_t bist:8;
#endif
	} s;
	struct cvmx_pciercx_cfg003_s cn52xx;
	struct cvmx_pciercx_cfg003_s cn52xxp1;
	struct cvmx_pciercx_cfg003_s cn56xx;
	struct cvmx_pciercx_cfg003_s cn56xxp1;
	struct cvmx_pciercx_cfg003_s cn61xx;
	struct cvmx_pciercx_cfg003_s cn63xx;
	struct cvmx_pciercx_cfg003_s cn63xxp1;
	struct cvmx_pciercx_cfg003_s cn66xx;
	struct cvmx_pciercx_cfg003_s cn68xx;
	struct cvmx_pciercx_cfg003_s cn68xxp1;
	struct cvmx_pciercx_cfg003_s cnf71xx;
};

union cvmx_pciercx_cfg004 {
	uint32_t u32;
	struct cvmx_pciercx_cfg004_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} s;
	struct cvmx_pciercx_cfg004_s cn52xx;
	struct cvmx_pciercx_cfg004_s cn52xxp1;
	struct cvmx_pciercx_cfg004_s cn56xx;
	struct cvmx_pciercx_cfg004_s cn56xxp1;
	struct cvmx_pciercx_cfg004_s cn61xx;
	struct cvmx_pciercx_cfg004_s cn63xx;
	struct cvmx_pciercx_cfg004_s cn63xxp1;
	struct cvmx_pciercx_cfg004_s cn66xx;
	struct cvmx_pciercx_cfg004_s cn68xx;
	struct cvmx_pciercx_cfg004_s cn68xxp1;
	struct cvmx_pciercx_cfg004_s cnf71xx;
};

union cvmx_pciercx_cfg005 {
	uint32_t u32;
	struct cvmx_pciercx_cfg005_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} s;
	struct cvmx_pciercx_cfg005_s cn52xx;
	struct cvmx_pciercx_cfg005_s cn52xxp1;
	struct cvmx_pciercx_cfg005_s cn56xx;
	struct cvmx_pciercx_cfg005_s cn56xxp1;
	struct cvmx_pciercx_cfg005_s cn61xx;
	struct cvmx_pciercx_cfg005_s cn63xx;
	struct cvmx_pciercx_cfg005_s cn63xxp1;
	struct cvmx_pciercx_cfg005_s cn66xx;
	struct cvmx_pciercx_cfg005_s cn68xx;
	struct cvmx_pciercx_cfg005_s cn68xxp1;
	struct cvmx_pciercx_cfg005_s cnf71xx;
};

union cvmx_pciercx_cfg006 {
	uint32_t u32;
	struct cvmx_pciercx_cfg006_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t slt:8;
		uint32_t subbnum:8;
		uint32_t sbnum:8;
		uint32_t pbnum:8;
#else
		uint32_t pbnum:8;
		uint32_t sbnum:8;
		uint32_t subbnum:8;
		uint32_t slt:8;
#endif
	} s;
	struct cvmx_pciercx_cfg006_s cn52xx;
	struct cvmx_pciercx_cfg006_s cn52xxp1;
	struct cvmx_pciercx_cfg006_s cn56xx;
	struct cvmx_pciercx_cfg006_s cn56xxp1;
	struct cvmx_pciercx_cfg006_s cn61xx;
	struct cvmx_pciercx_cfg006_s cn63xx;
	struct cvmx_pciercx_cfg006_s cn63xxp1;
	struct cvmx_pciercx_cfg006_s cn66xx;
	struct cvmx_pciercx_cfg006_s cn68xx;
	struct cvmx_pciercx_cfg006_s cn68xxp1;
	struct cvmx_pciercx_cfg006_s cnf71xx;
};

union cvmx_pciercx_cfg007 {
	uint32_t u32;
	struct cvmx_pciercx_cfg007_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dpe:1;
		uint32_t sse:1;
		uint32_t rma:1;
		uint32_t rta:1;
		uint32_t sta:1;
		uint32_t devt:2;
		uint32_t mdpe:1;
		uint32_t fbb:1;
		uint32_t reserved_22_22:1;
		uint32_t m66:1;
		uint32_t reserved_16_20:5;
		uint32_t lio_limi:4;
		uint32_t reserved_9_11:3;
		uint32_t io32b:1;
		uint32_t lio_base:4;
		uint32_t reserved_1_3:3;
		uint32_t io32a:1;
#else
		uint32_t io32a:1;
		uint32_t reserved_1_3:3;
		uint32_t lio_base:4;
		uint32_t io32b:1;
		uint32_t reserved_9_11:3;
		uint32_t lio_limi:4;
		uint32_t reserved_16_20:5;
		uint32_t m66:1;
		uint32_t reserved_22_22:1;
		uint32_t fbb:1;
		uint32_t mdpe:1;
		uint32_t devt:2;
		uint32_t sta:1;
		uint32_t rta:1;
		uint32_t rma:1;
		uint32_t sse:1;
		uint32_t dpe:1;
#endif
	} s;
	struct cvmx_pciercx_cfg007_s cn52xx;
	struct cvmx_pciercx_cfg007_s cn52xxp1;
	struct cvmx_pciercx_cfg007_s cn56xx;
	struct cvmx_pciercx_cfg007_s cn56xxp1;
	struct cvmx_pciercx_cfg007_s cn61xx;
	struct cvmx_pciercx_cfg007_s cn63xx;
	struct cvmx_pciercx_cfg007_s cn63xxp1;
	struct cvmx_pciercx_cfg007_s cn66xx;
	struct cvmx_pciercx_cfg007_s cn68xx;
	struct cvmx_pciercx_cfg007_s cn68xxp1;
	struct cvmx_pciercx_cfg007_s cnf71xx;
};

union cvmx_pciercx_cfg008 {
	uint32_t u32;
	struct cvmx_pciercx_cfg008_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t ml_addr:12;
		uint32_t reserved_16_19:4;
		uint32_t mb_addr:12;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t mb_addr:12;
		uint32_t reserved_16_19:4;
		uint32_t ml_addr:12;
#endif
	} s;
	struct cvmx_pciercx_cfg008_s cn52xx;
	struct cvmx_pciercx_cfg008_s cn52xxp1;
	struct cvmx_pciercx_cfg008_s cn56xx;
	struct cvmx_pciercx_cfg008_s cn56xxp1;
	struct cvmx_pciercx_cfg008_s cn61xx;
	struct cvmx_pciercx_cfg008_s cn63xx;
	struct cvmx_pciercx_cfg008_s cn63xxp1;
	struct cvmx_pciercx_cfg008_s cn66xx;
	struct cvmx_pciercx_cfg008_s cn68xx;
	struct cvmx_pciercx_cfg008_s cn68xxp1;
	struct cvmx_pciercx_cfg008_s cnf71xx;
};

union cvmx_pciercx_cfg009 {
	uint32_t u32;
	struct cvmx_pciercx_cfg009_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t lmem_limit:12;
		uint32_t reserved_17_19:3;
		uint32_t mem64b:1;
		uint32_t lmem_base:12;
		uint32_t reserved_1_3:3;
		uint32_t mem64a:1;
#else
		uint32_t mem64a:1;
		uint32_t reserved_1_3:3;
		uint32_t lmem_base:12;
		uint32_t mem64b:1;
		uint32_t reserved_17_19:3;
		uint32_t lmem_limit:12;
#endif
	} s;
	struct cvmx_pciercx_cfg009_s cn52xx;
	struct cvmx_pciercx_cfg009_s cn52xxp1;
	struct cvmx_pciercx_cfg009_s cn56xx;
	struct cvmx_pciercx_cfg009_s cn56xxp1;
	struct cvmx_pciercx_cfg009_s cn61xx;
	struct cvmx_pciercx_cfg009_s cn63xx;
	struct cvmx_pciercx_cfg009_s cn63xxp1;
	struct cvmx_pciercx_cfg009_s cn66xx;
	struct cvmx_pciercx_cfg009_s cn68xx;
	struct cvmx_pciercx_cfg009_s cn68xxp1;
	struct cvmx_pciercx_cfg009_s cnf71xx;
};

union cvmx_pciercx_cfg010 {
	uint32_t u32;
	struct cvmx_pciercx_cfg010_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t umem_base:32;
#else
		uint32_t umem_base:32;
#endif
	} s;
	struct cvmx_pciercx_cfg010_s cn52xx;
	struct cvmx_pciercx_cfg010_s cn52xxp1;
	struct cvmx_pciercx_cfg010_s cn56xx;
	struct cvmx_pciercx_cfg010_s cn56xxp1;
	struct cvmx_pciercx_cfg010_s cn61xx;
	struct cvmx_pciercx_cfg010_s cn63xx;
	struct cvmx_pciercx_cfg010_s cn63xxp1;
	struct cvmx_pciercx_cfg010_s cn66xx;
	struct cvmx_pciercx_cfg010_s cn68xx;
	struct cvmx_pciercx_cfg010_s cn68xxp1;
	struct cvmx_pciercx_cfg010_s cnf71xx;
};

union cvmx_pciercx_cfg011 {
	uint32_t u32;
	struct cvmx_pciercx_cfg011_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t umem_limit:32;
#else
		uint32_t umem_limit:32;
#endif
	} s;
	struct cvmx_pciercx_cfg011_s cn52xx;
	struct cvmx_pciercx_cfg011_s cn52xxp1;
	struct cvmx_pciercx_cfg011_s cn56xx;
	struct cvmx_pciercx_cfg011_s cn56xxp1;
	struct cvmx_pciercx_cfg011_s cn61xx;
	struct cvmx_pciercx_cfg011_s cn63xx;
	struct cvmx_pciercx_cfg011_s cn63xxp1;
	struct cvmx_pciercx_cfg011_s cn66xx;
	struct cvmx_pciercx_cfg011_s cn68xx;
	struct cvmx_pciercx_cfg011_s cn68xxp1;
	struct cvmx_pciercx_cfg011_s cnf71xx;
};

union cvmx_pciercx_cfg012 {
	uint32_t u32;
	struct cvmx_pciercx_cfg012_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t uio_limit:16;
		uint32_t uio_base:16;
#else
		uint32_t uio_base:16;
		uint32_t uio_limit:16;
#endif
	} s;
	struct cvmx_pciercx_cfg012_s cn52xx;
	struct cvmx_pciercx_cfg012_s cn52xxp1;
	struct cvmx_pciercx_cfg012_s cn56xx;
	struct cvmx_pciercx_cfg012_s cn56xxp1;
	struct cvmx_pciercx_cfg012_s cn61xx;
	struct cvmx_pciercx_cfg012_s cn63xx;
	struct cvmx_pciercx_cfg012_s cn63xxp1;
	struct cvmx_pciercx_cfg012_s cn66xx;
	struct cvmx_pciercx_cfg012_s cn68xx;
	struct cvmx_pciercx_cfg012_s cn68xxp1;
	struct cvmx_pciercx_cfg012_s cnf71xx;
};

union cvmx_pciercx_cfg013 {
	uint32_t u32;
	struct cvmx_pciercx_cfg013_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_8_31:24;
		uint32_t cp:8;
#else
		uint32_t cp:8;
		uint32_t reserved_8_31:24;
#endif
	} s;
	struct cvmx_pciercx_cfg013_s cn52xx;
	struct cvmx_pciercx_cfg013_s cn52xxp1;
	struct cvmx_pciercx_cfg013_s cn56xx;
	struct cvmx_pciercx_cfg013_s cn56xxp1;
	struct cvmx_pciercx_cfg013_s cn61xx;
	struct cvmx_pciercx_cfg013_s cn63xx;
	struct cvmx_pciercx_cfg013_s cn63xxp1;
	struct cvmx_pciercx_cfg013_s cn66xx;
	struct cvmx_pciercx_cfg013_s cn68xx;
	struct cvmx_pciercx_cfg013_s cn68xxp1;
	struct cvmx_pciercx_cfg013_s cnf71xx;
};

union cvmx_pciercx_cfg014 {
	uint32_t u32;
	struct cvmx_pciercx_cfg014_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} s;
	struct cvmx_pciercx_cfg014_s cn52xx;
	struct cvmx_pciercx_cfg014_s cn52xxp1;
	struct cvmx_pciercx_cfg014_s cn56xx;
	struct cvmx_pciercx_cfg014_s cn56xxp1;
	struct cvmx_pciercx_cfg014_s cn61xx;
	struct cvmx_pciercx_cfg014_s cn63xx;
	struct cvmx_pciercx_cfg014_s cn63xxp1;
	struct cvmx_pciercx_cfg014_s cn66xx;
	struct cvmx_pciercx_cfg014_s cn68xx;
	struct cvmx_pciercx_cfg014_s cn68xxp1;
	struct cvmx_pciercx_cfg014_s cnf71xx;
};

union cvmx_pciercx_cfg015 {
	uint32_t u32;
	struct cvmx_pciercx_cfg015_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_28_31:4;
		uint32_t dtsees:1;
		uint32_t dts:1;
		uint32_t sdt:1;
		uint32_t pdt:1;
		uint32_t fbbe:1;
		uint32_t sbrst:1;
		uint32_t mam:1;
		uint32_t vga16d:1;
		uint32_t vgae:1;
		uint32_t isae:1;
		uint32_t see:1;
		uint32_t pere:1;
		uint32_t inta:8;
		uint32_t il:8;
#else
		uint32_t il:8;
		uint32_t inta:8;
		uint32_t pere:1;
		uint32_t see:1;
		uint32_t isae:1;
		uint32_t vgae:1;
		uint32_t vga16d:1;
		uint32_t mam:1;
		uint32_t sbrst:1;
		uint32_t fbbe:1;
		uint32_t pdt:1;
		uint32_t sdt:1;
		uint32_t dts:1;
		uint32_t dtsees:1;
		uint32_t reserved_28_31:4;
#endif
	} s;
	struct cvmx_pciercx_cfg015_s cn52xx;
	struct cvmx_pciercx_cfg015_s cn52xxp1;
	struct cvmx_pciercx_cfg015_s cn56xx;
	struct cvmx_pciercx_cfg015_s cn56xxp1;
	struct cvmx_pciercx_cfg015_s cn61xx;
	struct cvmx_pciercx_cfg015_s cn63xx;
	struct cvmx_pciercx_cfg015_s cn63xxp1;
	struct cvmx_pciercx_cfg015_s cn66xx;
	struct cvmx_pciercx_cfg015_s cn68xx;
	struct cvmx_pciercx_cfg015_s cn68xxp1;
	struct cvmx_pciercx_cfg015_s cnf71xx;
};

union cvmx_pciercx_cfg016 {
	uint32_t u32;
	struct cvmx_pciercx_cfg016_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t pmes:5;
		uint32_t d2s:1;
		uint32_t d1s:1;
		uint32_t auxc:3;
		uint32_t dsi:1;
		uint32_t reserved_20_20:1;
		uint32_t pme_clock:1;
		uint32_t pmsv:3;
		uint32_t ncp:8;
		uint32_t pmcid:8;
#else
		uint32_t pmcid:8;
		uint32_t ncp:8;
		uint32_t pmsv:3;
		uint32_t pme_clock:1;
		uint32_t reserved_20_20:1;
		uint32_t dsi:1;
		uint32_t auxc:3;
		uint32_t d1s:1;
		uint32_t d2s:1;
		uint32_t pmes:5;
#endif
	} s;
	struct cvmx_pciercx_cfg016_s cn52xx;
	struct cvmx_pciercx_cfg016_s cn52xxp1;
	struct cvmx_pciercx_cfg016_s cn56xx;
	struct cvmx_pciercx_cfg016_s cn56xxp1;
	struct cvmx_pciercx_cfg016_s cn61xx;
	struct cvmx_pciercx_cfg016_s cn63xx;
	struct cvmx_pciercx_cfg016_s cn63xxp1;
	struct cvmx_pciercx_cfg016_s cn66xx;
	struct cvmx_pciercx_cfg016_s cn68xx;
	struct cvmx_pciercx_cfg016_s cn68xxp1;
	struct cvmx_pciercx_cfg016_s cnf71xx;
};

union cvmx_pciercx_cfg017 {
	uint32_t u32;
	struct cvmx_pciercx_cfg017_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t pmdia:8;
		uint32_t bpccee:1;
		uint32_t bd3h:1;
		uint32_t reserved_16_21:6;
		uint32_t pmess:1;
		uint32_t pmedsia:2;
		uint32_t pmds:4;
		uint32_t pmeens:1;
		uint32_t reserved_4_7:4;
		uint32_t nsr:1;
		uint32_t reserved_2_2:1;
		uint32_t ps:2;
#else
		uint32_t ps:2;
		uint32_t reserved_2_2:1;
		uint32_t nsr:1;
		uint32_t reserved_4_7:4;
		uint32_t pmeens:1;
		uint32_t pmds:4;
		uint32_t pmedsia:2;
		uint32_t pmess:1;
		uint32_t reserved_16_21:6;
		uint32_t bd3h:1;
		uint32_t bpccee:1;
		uint32_t pmdia:8;
#endif
	} s;
	struct cvmx_pciercx_cfg017_s cn52xx;
	struct cvmx_pciercx_cfg017_s cn52xxp1;
	struct cvmx_pciercx_cfg017_s cn56xx;
	struct cvmx_pciercx_cfg017_s cn56xxp1;
	struct cvmx_pciercx_cfg017_s cn61xx;
	struct cvmx_pciercx_cfg017_s cn63xx;
	struct cvmx_pciercx_cfg017_s cn63xxp1;
	struct cvmx_pciercx_cfg017_s cn66xx;
	struct cvmx_pciercx_cfg017_s cn68xx;
	struct cvmx_pciercx_cfg017_s cn68xxp1;
	struct cvmx_pciercx_cfg017_s cnf71xx;
};

union cvmx_pciercx_cfg020 {
	uint32_t u32;
	struct cvmx_pciercx_cfg020_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t pvm:1;
		uint32_t m64:1;
		uint32_t mme:3;
		uint32_t mmc:3;
		uint32_t msien:1;
		uint32_t ncp:8;
		uint32_t msicid:8;
#else
		uint32_t msicid:8;
		uint32_t ncp:8;
		uint32_t msien:1;
		uint32_t mmc:3;
		uint32_t mme:3;
		uint32_t m64:1;
		uint32_t pvm:1;
		uint32_t reserved_25_31:7;
#endif
	} s;
	struct cvmx_pciercx_cfg020_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_24_31:8;
		uint32_t m64:1;
		uint32_t mme:3;
		uint32_t mmc:3;
		uint32_t msien:1;
		uint32_t ncp:8;
		uint32_t msicid:8;
#else
		uint32_t msicid:8;
		uint32_t ncp:8;
		uint32_t msien:1;
		uint32_t mmc:3;
		uint32_t mme:3;
		uint32_t m64:1;
		uint32_t reserved_24_31:8;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg020_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg020_cn52xx cn56xx;
	struct cvmx_pciercx_cfg020_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg020_s cn61xx;
	struct cvmx_pciercx_cfg020_cn52xx cn63xx;
	struct cvmx_pciercx_cfg020_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg020_cn52xx cn66xx;
	struct cvmx_pciercx_cfg020_cn52xx cn68xx;
	struct cvmx_pciercx_cfg020_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg020_s cnf71xx;
};

union cvmx_pciercx_cfg021 {
	uint32_t u32;
	struct cvmx_pciercx_cfg021_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t lmsi:30;
		uint32_t reserved_0_1:2;
#else
		uint32_t reserved_0_1:2;
		uint32_t lmsi:30;
#endif
	} s;
	struct cvmx_pciercx_cfg021_s cn52xx;
	struct cvmx_pciercx_cfg021_s cn52xxp1;
	struct cvmx_pciercx_cfg021_s cn56xx;
	struct cvmx_pciercx_cfg021_s cn56xxp1;
	struct cvmx_pciercx_cfg021_s cn61xx;
	struct cvmx_pciercx_cfg021_s cn63xx;
	struct cvmx_pciercx_cfg021_s cn63xxp1;
	struct cvmx_pciercx_cfg021_s cn66xx;
	struct cvmx_pciercx_cfg021_s cn68xx;
	struct cvmx_pciercx_cfg021_s cn68xxp1;
	struct cvmx_pciercx_cfg021_s cnf71xx;
};

union cvmx_pciercx_cfg022 {
	uint32_t u32;
	struct cvmx_pciercx_cfg022_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t umsi:32;
#else
		uint32_t umsi:32;
#endif
	} s;
	struct cvmx_pciercx_cfg022_s cn52xx;
	struct cvmx_pciercx_cfg022_s cn52xxp1;
	struct cvmx_pciercx_cfg022_s cn56xx;
	struct cvmx_pciercx_cfg022_s cn56xxp1;
	struct cvmx_pciercx_cfg022_s cn61xx;
	struct cvmx_pciercx_cfg022_s cn63xx;
	struct cvmx_pciercx_cfg022_s cn63xxp1;
	struct cvmx_pciercx_cfg022_s cn66xx;
	struct cvmx_pciercx_cfg022_s cn68xx;
	struct cvmx_pciercx_cfg022_s cn68xxp1;
	struct cvmx_pciercx_cfg022_s cnf71xx;
};

union cvmx_pciercx_cfg023 {
	uint32_t u32;
	struct cvmx_pciercx_cfg023_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_16_31:16;
		uint32_t msimd:16;
#else
		uint32_t msimd:16;
		uint32_t reserved_16_31:16;
#endif
	} s;
	struct cvmx_pciercx_cfg023_s cn52xx;
	struct cvmx_pciercx_cfg023_s cn52xxp1;
	struct cvmx_pciercx_cfg023_s cn56xx;
	struct cvmx_pciercx_cfg023_s cn56xxp1;
	struct cvmx_pciercx_cfg023_s cn61xx;
	struct cvmx_pciercx_cfg023_s cn63xx;
	struct cvmx_pciercx_cfg023_s cn63xxp1;
	struct cvmx_pciercx_cfg023_s cn66xx;
	struct cvmx_pciercx_cfg023_s cn68xx;
	struct cvmx_pciercx_cfg023_s cn68xxp1;
	struct cvmx_pciercx_cfg023_s cnf71xx;
};

union cvmx_pciercx_cfg028 {
	uint32_t u32;
	struct cvmx_pciercx_cfg028_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_30_31:2;
		uint32_t imn:5;
		uint32_t si:1;
		uint32_t dpt:4;
		uint32_t pciecv:4;
		uint32_t ncp:8;
		uint32_t pcieid:8;
#else
		uint32_t pcieid:8;
		uint32_t ncp:8;
		uint32_t pciecv:4;
		uint32_t dpt:4;
		uint32_t si:1;
		uint32_t imn:5;
		uint32_t reserved_30_31:2;
#endif
	} s;
	struct cvmx_pciercx_cfg028_s cn52xx;
	struct cvmx_pciercx_cfg028_s cn52xxp1;
	struct cvmx_pciercx_cfg028_s cn56xx;
	struct cvmx_pciercx_cfg028_s cn56xxp1;
	struct cvmx_pciercx_cfg028_s cn61xx;
	struct cvmx_pciercx_cfg028_s cn63xx;
	struct cvmx_pciercx_cfg028_s cn63xxp1;
	struct cvmx_pciercx_cfg028_s cn66xx;
	struct cvmx_pciercx_cfg028_s cn68xx;
	struct cvmx_pciercx_cfg028_s cn68xxp1;
	struct cvmx_pciercx_cfg028_s cnf71xx;
};

union cvmx_pciercx_cfg029 {
	uint32_t u32;
	struct cvmx_pciercx_cfg029_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_28_31:4;
		uint32_t cspls:2;
		uint32_t csplv:8;
		uint32_t reserved_16_17:2;
		uint32_t rber:1;
		uint32_t reserved_12_14:3;
		uint32_t el1al:3;
		uint32_t el0al:3;
		uint32_t etfs:1;
		uint32_t pfs:2;
		uint32_t mpss:3;
#else
		uint32_t mpss:3;
		uint32_t pfs:2;
		uint32_t etfs:1;
		uint32_t el0al:3;
		uint32_t el1al:3;
		uint32_t reserved_12_14:3;
		uint32_t rber:1;
		uint32_t reserved_16_17:2;
		uint32_t csplv:8;
		uint32_t cspls:2;
		uint32_t reserved_28_31:4;
#endif
	} s;
	struct cvmx_pciercx_cfg029_s cn52xx;
	struct cvmx_pciercx_cfg029_s cn52xxp1;
	struct cvmx_pciercx_cfg029_s cn56xx;
	struct cvmx_pciercx_cfg029_s cn56xxp1;
	struct cvmx_pciercx_cfg029_s cn61xx;
	struct cvmx_pciercx_cfg029_s cn63xx;
	struct cvmx_pciercx_cfg029_s cn63xxp1;
	struct cvmx_pciercx_cfg029_s cn66xx;
	struct cvmx_pciercx_cfg029_s cn68xx;
	struct cvmx_pciercx_cfg029_s cn68xxp1;
	struct cvmx_pciercx_cfg029_s cnf71xx;
};

union cvmx_pciercx_cfg030 {
	uint32_t u32;
	struct cvmx_pciercx_cfg030_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_22_31:10;
		uint32_t tp:1;
		uint32_t ap_d:1;
		uint32_t ur_d:1;
		uint32_t fe_d:1;
		uint32_t nfe_d:1;
		uint32_t ce_d:1;
		uint32_t reserved_15_15:1;
		uint32_t mrrs:3;
		uint32_t ns_en:1;
		uint32_t ap_en:1;
		uint32_t pf_en:1;
		uint32_t etf_en:1;
		uint32_t mps:3;
		uint32_t ro_en:1;
		uint32_t ur_en:1;
		uint32_t fe_en:1;
		uint32_t nfe_en:1;
		uint32_t ce_en:1;
#else
		uint32_t ce_en:1;
		uint32_t nfe_en:1;
		uint32_t fe_en:1;
		uint32_t ur_en:1;
		uint32_t ro_en:1;
		uint32_t mps:3;
		uint32_t etf_en:1;
		uint32_t pf_en:1;
		uint32_t ap_en:1;
		uint32_t ns_en:1;
		uint32_t mrrs:3;
		uint32_t reserved_15_15:1;
		uint32_t ce_d:1;
		uint32_t nfe_d:1;
		uint32_t fe_d:1;
		uint32_t ur_d:1;
		uint32_t ap_d:1;
		uint32_t tp:1;
		uint32_t reserved_22_31:10;
#endif
	} s;
	struct cvmx_pciercx_cfg030_s cn52xx;
	struct cvmx_pciercx_cfg030_s cn52xxp1;
	struct cvmx_pciercx_cfg030_s cn56xx;
	struct cvmx_pciercx_cfg030_s cn56xxp1;
	struct cvmx_pciercx_cfg030_s cn61xx;
	struct cvmx_pciercx_cfg030_s cn63xx;
	struct cvmx_pciercx_cfg030_s cn63xxp1;
	struct cvmx_pciercx_cfg030_s cn66xx;
	struct cvmx_pciercx_cfg030_s cn68xx;
	struct cvmx_pciercx_cfg030_s cn68xxp1;
	struct cvmx_pciercx_cfg030_s cnf71xx;
};

union cvmx_pciercx_cfg031 {
	uint32_t u32;
	struct cvmx_pciercx_cfg031_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t pnum:8;
		uint32_t reserved_23_23:1;
		uint32_t aspm:1;
		uint32_t lbnc:1;
		uint32_t dllarc:1;
		uint32_t sderc:1;
		uint32_t cpm:1;
		uint32_t l1el:3;
		uint32_t l0el:3;
		uint32_t aslpms:2;
		uint32_t mlw:6;
		uint32_t mls:4;
#else
		uint32_t mls:4;
		uint32_t mlw:6;
		uint32_t aslpms:2;
		uint32_t l0el:3;
		uint32_t l1el:3;
		uint32_t cpm:1;
		uint32_t sderc:1;
		uint32_t dllarc:1;
		uint32_t lbnc:1;
		uint32_t aspm:1;
		uint32_t reserved_23_23:1;
		uint32_t pnum:8;
#endif
	} s;
	struct cvmx_pciercx_cfg031_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t pnum:8;
		uint32_t reserved_22_23:2;
		uint32_t lbnc:1;
		uint32_t dllarc:1;
		uint32_t sderc:1;
		uint32_t cpm:1;
		uint32_t l1el:3;
		uint32_t l0el:3;
		uint32_t aslpms:2;
		uint32_t mlw:6;
		uint32_t mls:4;
#else
		uint32_t mls:4;
		uint32_t mlw:6;
		uint32_t aslpms:2;
		uint32_t l0el:3;
		uint32_t l1el:3;
		uint32_t cpm:1;
		uint32_t sderc:1;
		uint32_t dllarc:1;
		uint32_t lbnc:1;
		uint32_t reserved_22_23:2;
		uint32_t pnum:8;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg031_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg031_cn52xx cn56xx;
	struct cvmx_pciercx_cfg031_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg031_s cn61xx;
	struct cvmx_pciercx_cfg031_cn52xx cn63xx;
	struct cvmx_pciercx_cfg031_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg031_s cn66xx;
	struct cvmx_pciercx_cfg031_s cn68xx;
	struct cvmx_pciercx_cfg031_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg031_s cnf71xx;
};

union cvmx_pciercx_cfg032 {
	uint32_t u32;
	struct cvmx_pciercx_cfg032_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t lab:1;
		uint32_t lbm:1;
		uint32_t dlla:1;
		uint32_t scc:1;
		uint32_t lt:1;
		uint32_t reserved_26_26:1;
		uint32_t nlw:6;
		uint32_t ls:4;
		uint32_t reserved_12_15:4;
		uint32_t lab_int_enb:1;
		uint32_t lbm_int_enb:1;
		uint32_t hawd:1;
		uint32_t ecpm:1;
		uint32_t es:1;
		uint32_t ccc:1;
		uint32_t rl:1;
		uint32_t ld:1;
		uint32_t rcb:1;
		uint32_t reserved_2_2:1;
		uint32_t aslpc:2;
#else
		uint32_t aslpc:2;
		uint32_t reserved_2_2:1;
		uint32_t rcb:1;
		uint32_t ld:1;
		uint32_t rl:1;
		uint32_t ccc:1;
		uint32_t es:1;
		uint32_t ecpm:1;
		uint32_t hawd:1;
		uint32_t lbm_int_enb:1;
		uint32_t lab_int_enb:1;
		uint32_t reserved_12_15:4;
		uint32_t ls:4;
		uint32_t nlw:6;
		uint32_t reserved_26_26:1;
		uint32_t lt:1;
		uint32_t scc:1;
		uint32_t dlla:1;
		uint32_t lbm:1;
		uint32_t lab:1;
#endif
	} s;
	struct cvmx_pciercx_cfg032_s cn52xx;
	struct cvmx_pciercx_cfg032_s cn52xxp1;
	struct cvmx_pciercx_cfg032_s cn56xx;
	struct cvmx_pciercx_cfg032_s cn56xxp1;
	struct cvmx_pciercx_cfg032_s cn61xx;
	struct cvmx_pciercx_cfg032_s cn63xx;
	struct cvmx_pciercx_cfg032_s cn63xxp1;
	struct cvmx_pciercx_cfg032_s cn66xx;
	struct cvmx_pciercx_cfg032_s cn68xx;
	struct cvmx_pciercx_cfg032_s cn68xxp1;
	struct cvmx_pciercx_cfg032_s cnf71xx;
};

union cvmx_pciercx_cfg033 {
	uint32_t u32;
	struct cvmx_pciercx_cfg033_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t ps_num:13;
		uint32_t nccs:1;
		uint32_t emip:1;
		uint32_t sp_ls:2;
		uint32_t sp_lv:8;
		uint32_t hp_c:1;
		uint32_t hp_s:1;
		uint32_t pip:1;
		uint32_t aip:1;
		uint32_t mrlsp:1;
		uint32_t pcp:1;
		uint32_t abp:1;
#else
		uint32_t abp:1;
		uint32_t pcp:1;
		uint32_t mrlsp:1;
		uint32_t aip:1;
		uint32_t pip:1;
		uint32_t hp_s:1;
		uint32_t hp_c:1;
		uint32_t sp_lv:8;
		uint32_t sp_ls:2;
		uint32_t emip:1;
		uint32_t nccs:1;
		uint32_t ps_num:13;
#endif
	} s;
	struct cvmx_pciercx_cfg033_s cn52xx;
	struct cvmx_pciercx_cfg033_s cn52xxp1;
	struct cvmx_pciercx_cfg033_s cn56xx;
	struct cvmx_pciercx_cfg033_s cn56xxp1;
	struct cvmx_pciercx_cfg033_s cn61xx;
	struct cvmx_pciercx_cfg033_s cn63xx;
	struct cvmx_pciercx_cfg033_s cn63xxp1;
	struct cvmx_pciercx_cfg033_s cn66xx;
	struct cvmx_pciercx_cfg033_s cn68xx;
	struct cvmx_pciercx_cfg033_s cn68xxp1;
	struct cvmx_pciercx_cfg033_s cnf71xx;
};

union cvmx_pciercx_cfg034 {
	uint32_t u32;
	struct cvmx_pciercx_cfg034_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t dlls_c:1;
		uint32_t emis:1;
		uint32_t pds:1;
		uint32_t mrlss:1;
		uint32_t ccint_d:1;
		uint32_t pd_c:1;
		uint32_t mrls_c:1;
		uint32_t pf_d:1;
		uint32_t abp_d:1;
		uint32_t reserved_13_15:3;
		uint32_t dlls_en:1;
		uint32_t emic:1;
		uint32_t pcc:1;
		uint32_t pic:2;
		uint32_t aic:2;
		uint32_t hpint_en:1;
		uint32_t ccint_en:1;
		uint32_t pd_en:1;
		uint32_t mrls_en:1;
		uint32_t pf_en:1;
		uint32_t abp_en:1;
#else
		uint32_t abp_en:1;
		uint32_t pf_en:1;
		uint32_t mrls_en:1;
		uint32_t pd_en:1;
		uint32_t ccint_en:1;
		uint32_t hpint_en:1;
		uint32_t aic:2;
		uint32_t pic:2;
		uint32_t pcc:1;
		uint32_t emic:1;
		uint32_t dlls_en:1;
		uint32_t reserved_13_15:3;
		uint32_t abp_d:1;
		uint32_t pf_d:1;
		uint32_t mrls_c:1;
		uint32_t pd_c:1;
		uint32_t ccint_d:1;
		uint32_t mrlss:1;
		uint32_t pds:1;
		uint32_t emis:1;
		uint32_t dlls_c:1;
		uint32_t reserved_25_31:7;
#endif
	} s;
	struct cvmx_pciercx_cfg034_s cn52xx;
	struct cvmx_pciercx_cfg034_s cn52xxp1;
	struct cvmx_pciercx_cfg034_s cn56xx;
	struct cvmx_pciercx_cfg034_s cn56xxp1;
	struct cvmx_pciercx_cfg034_s cn61xx;
	struct cvmx_pciercx_cfg034_s cn63xx;
	struct cvmx_pciercx_cfg034_s cn63xxp1;
	struct cvmx_pciercx_cfg034_s cn66xx;
	struct cvmx_pciercx_cfg034_s cn68xx;
	struct cvmx_pciercx_cfg034_s cn68xxp1;
	struct cvmx_pciercx_cfg034_s cnf71xx;
};

union cvmx_pciercx_cfg035 {
	uint32_t u32;
	struct cvmx_pciercx_cfg035_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_17_31:15;
		uint32_t crssv:1;
		uint32_t reserved_5_15:11;
		uint32_t crssve:1;
		uint32_t pmeie:1;
		uint32_t sefee:1;
		uint32_t senfee:1;
		uint32_t secee:1;
#else
		uint32_t secee:1;
		uint32_t senfee:1;
		uint32_t sefee:1;
		uint32_t pmeie:1;
		uint32_t crssve:1;
		uint32_t reserved_5_15:11;
		uint32_t crssv:1;
		uint32_t reserved_17_31:15;
#endif
	} s;
	struct cvmx_pciercx_cfg035_s cn52xx;
	struct cvmx_pciercx_cfg035_s cn52xxp1;
	struct cvmx_pciercx_cfg035_s cn56xx;
	struct cvmx_pciercx_cfg035_s cn56xxp1;
	struct cvmx_pciercx_cfg035_s cn61xx;
	struct cvmx_pciercx_cfg035_s cn63xx;
	struct cvmx_pciercx_cfg035_s cn63xxp1;
	struct cvmx_pciercx_cfg035_s cn66xx;
	struct cvmx_pciercx_cfg035_s cn68xx;
	struct cvmx_pciercx_cfg035_s cn68xxp1;
	struct cvmx_pciercx_cfg035_s cnf71xx;
};

union cvmx_pciercx_cfg036 {
	uint32_t u32;
	struct cvmx_pciercx_cfg036_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_18_31:14;
		uint32_t pme_pend:1;
		uint32_t pme_stat:1;
		uint32_t pme_rid:16;
#else
		uint32_t pme_rid:16;
		uint32_t pme_stat:1;
		uint32_t pme_pend:1;
		uint32_t reserved_18_31:14;
#endif
	} s;
	struct cvmx_pciercx_cfg036_s cn52xx;
	struct cvmx_pciercx_cfg036_s cn52xxp1;
	struct cvmx_pciercx_cfg036_s cn56xx;
	struct cvmx_pciercx_cfg036_s cn56xxp1;
	struct cvmx_pciercx_cfg036_s cn61xx;
	struct cvmx_pciercx_cfg036_s cn63xx;
	struct cvmx_pciercx_cfg036_s cn63xxp1;
	struct cvmx_pciercx_cfg036_s cn66xx;
	struct cvmx_pciercx_cfg036_s cn68xx;
	struct cvmx_pciercx_cfg036_s cn68xxp1;
	struct cvmx_pciercx_cfg036_s cnf71xx;
};

union cvmx_pciercx_cfg037 {
	uint32_t u32;
	struct cvmx_pciercx_cfg037_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_20_31:12;
		uint32_t obffs:2;
		uint32_t reserved_12_17:6;
		uint32_t ltrs:1;
		uint32_t noroprpr:1;
		uint32_t atom128s:1;
		uint32_t atom64s:1;
		uint32_t atom32s:1;
		uint32_t atom_ops:1;
		uint32_t reserved_5_5:1;
		uint32_t ctds:1;
		uint32_t ctrs:4;
#else
		uint32_t ctrs:4;
		uint32_t ctds:1;
		uint32_t reserved_5_5:1;
		uint32_t atom_ops:1;
		uint32_t atom32s:1;
		uint32_t atom64s:1;
		uint32_t atom128s:1;
		uint32_t noroprpr:1;
		uint32_t ltrs:1;
		uint32_t reserved_12_17:6;
		uint32_t obffs:2;
		uint32_t reserved_20_31:12;
#endif
	} s;
	struct cvmx_pciercx_cfg037_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_5_31:27;
		uint32_t ctds:1;
		uint32_t ctrs:4;
#else
		uint32_t ctrs:4;
		uint32_t ctds:1;
		uint32_t reserved_5_31:27;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg037_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg037_cn52xx cn56xx;
	struct cvmx_pciercx_cfg037_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg037_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_14_31:18;
		uint32_t tph:2;
		uint32_t reserved_11_11:1;
		uint32_t noroprpr:1;
		uint32_t atom128s:1;
		uint32_t atom64s:1;
		uint32_t atom32s:1;
		uint32_t atom_ops:1;
		uint32_t ari_fw:1;
		uint32_t ctds:1;
		uint32_t ctrs:4;
#else
		uint32_t ctrs:4;
		uint32_t ctds:1;
		uint32_t ari_fw:1;
		uint32_t atom_ops:1;
		uint32_t atom32s:1;
		uint32_t atom64s:1;
		uint32_t atom128s:1;
		uint32_t noroprpr:1;
		uint32_t reserved_11_11:1;
		uint32_t tph:2;
		uint32_t reserved_14_31:18;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg037_cn52xx cn63xx;
	struct cvmx_pciercx_cfg037_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg037_cn66xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_14_31:18;
		uint32_t tph:2;
		uint32_t reserved_11_11:1;
		uint32_t noroprpr:1;
		uint32_t atom128s:1;
		uint32_t atom64s:1;
		uint32_t atom32s:1;
		uint32_t atom_ops:1;
		uint32_t ari:1;
		uint32_t ctds:1;
		uint32_t ctrs:4;
#else
		uint32_t ctrs:4;
		uint32_t ctds:1;
		uint32_t ari:1;
		uint32_t atom_ops:1;
		uint32_t atom32s:1;
		uint32_t atom64s:1;
		uint32_t atom128s:1;
		uint32_t noroprpr:1;
		uint32_t reserved_11_11:1;
		uint32_t tph:2;
		uint32_t reserved_14_31:18;
#endif
	} cn66xx;
	struct cvmx_pciercx_cfg037_cn66xx cn68xx;
	struct cvmx_pciercx_cfg037_cn66xx cn68xxp1;
	struct cvmx_pciercx_cfg037_cnf71xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_20_31:12;
		uint32_t obffs:2;
		uint32_t reserved_14_17:4;
		uint32_t tphs:2;
		uint32_t ltrs:1;
		uint32_t noroprpr:1;
		uint32_t atom128s:1;
		uint32_t atom64s:1;
		uint32_t atom32s:1;
		uint32_t atom_ops:1;
		uint32_t ari_fw:1;
		uint32_t ctds:1;
		uint32_t ctrs:4;
#else
		uint32_t ctrs:4;
		uint32_t ctds:1;
		uint32_t ari_fw:1;
		uint32_t atom_ops:1;
		uint32_t atom32s:1;
		uint32_t atom64s:1;
		uint32_t atom128s:1;
		uint32_t noroprpr:1;
		uint32_t ltrs:1;
		uint32_t tphs:2;
		uint32_t reserved_14_17:4;
		uint32_t obffs:2;
		uint32_t reserved_20_31:12;
#endif
	} cnf71xx;
};

union cvmx_pciercx_cfg038 {
	uint32_t u32;
	struct cvmx_pciercx_cfg038_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_15_31:17;
		uint32_t obffe:2;
		uint32_t reserved_11_12:2;
		uint32_t ltre:1;
		uint32_t id0_cp:1;
		uint32_t id0_rq:1;
		uint32_t atom_op_eb:1;
		uint32_t atom_op:1;
		uint32_t ari:1;
		uint32_t ctd:1;
		uint32_t ctv:4;
#else
		uint32_t ctv:4;
		uint32_t ctd:1;
		uint32_t ari:1;
		uint32_t atom_op:1;
		uint32_t atom_op_eb:1;
		uint32_t id0_rq:1;
		uint32_t id0_cp:1;
		uint32_t ltre:1;
		uint32_t reserved_11_12:2;
		uint32_t obffe:2;
		uint32_t reserved_15_31:17;
#endif
	} s;
	struct cvmx_pciercx_cfg038_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_5_31:27;
		uint32_t ctd:1;
		uint32_t ctv:4;
#else
		uint32_t ctv:4;
		uint32_t ctd:1;
		uint32_t reserved_5_31:27;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg038_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg038_cn52xx cn56xx;
	struct cvmx_pciercx_cfg038_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg038_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_10_31:22;
		uint32_t id0_cp:1;
		uint32_t id0_rq:1;
		uint32_t atom_op_eb:1;
		uint32_t atom_op:1;
		uint32_t ari:1;
		uint32_t ctd:1;
		uint32_t ctv:4;
#else
		uint32_t ctv:4;
		uint32_t ctd:1;
		uint32_t ari:1;
		uint32_t atom_op:1;
		uint32_t atom_op_eb:1;
		uint32_t id0_rq:1;
		uint32_t id0_cp:1;
		uint32_t reserved_10_31:22;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg038_cn52xx cn63xx;
	struct cvmx_pciercx_cfg038_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg038_cn61xx cn66xx;
	struct cvmx_pciercx_cfg038_cn61xx cn68xx;
	struct cvmx_pciercx_cfg038_cn61xx cn68xxp1;
	struct cvmx_pciercx_cfg038_s cnf71xx;
};

union cvmx_pciercx_cfg039 {
	uint32_t u32;
	struct cvmx_pciercx_cfg039_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_9_31:23;
		uint32_t cls:1;
		uint32_t slsv:7;
		uint32_t reserved_0_0:1;
#else
		uint32_t reserved_0_0:1;
		uint32_t slsv:7;
		uint32_t cls:1;
		uint32_t reserved_9_31:23;
#endif
	} s;
	struct cvmx_pciercx_cfg039_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg039_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg039_cn52xx cn56xx;
	struct cvmx_pciercx_cfg039_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg039_s cn61xx;
	struct cvmx_pciercx_cfg039_s cn63xx;
	struct cvmx_pciercx_cfg039_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg039_s cn66xx;
	struct cvmx_pciercx_cfg039_s cn68xx;
	struct cvmx_pciercx_cfg039_s cn68xxp1;
	struct cvmx_pciercx_cfg039_s cnf71xx;
};

union cvmx_pciercx_cfg040 {
	uint32_t u32;
	struct cvmx_pciercx_cfg040_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_17_31:15;
		uint32_t cdl:1;
		uint32_t reserved_13_15:3;
		uint32_t cde:1;
		uint32_t csos:1;
		uint32_t emc:1;
		uint32_t tm:3;
		uint32_t sde:1;
		uint32_t hasd:1;
		uint32_t ec:1;
		uint32_t tls:4;
#else
		uint32_t tls:4;
		uint32_t ec:1;
		uint32_t hasd:1;
		uint32_t sde:1;
		uint32_t tm:3;
		uint32_t emc:1;
		uint32_t csos:1;
		uint32_t cde:1;
		uint32_t reserved_13_15:3;
		uint32_t cdl:1;
		uint32_t reserved_17_31:15;
#endif
	} s;
	struct cvmx_pciercx_cfg040_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg040_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg040_cn52xx cn56xx;
	struct cvmx_pciercx_cfg040_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg040_s cn61xx;
	struct cvmx_pciercx_cfg040_s cn63xx;
	struct cvmx_pciercx_cfg040_s cn63xxp1;
	struct cvmx_pciercx_cfg040_s cn66xx;
	struct cvmx_pciercx_cfg040_s cn68xx;
	struct cvmx_pciercx_cfg040_s cn68xxp1;
	struct cvmx_pciercx_cfg040_s cnf71xx;
};

union cvmx_pciercx_cfg041 {
	uint32_t u32;
	struct cvmx_pciercx_cfg041_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} s;
	struct cvmx_pciercx_cfg041_s cn52xx;
	struct cvmx_pciercx_cfg041_s cn52xxp1;
	struct cvmx_pciercx_cfg041_s cn56xx;
	struct cvmx_pciercx_cfg041_s cn56xxp1;
	struct cvmx_pciercx_cfg041_s cn61xx;
	struct cvmx_pciercx_cfg041_s cn63xx;
	struct cvmx_pciercx_cfg041_s cn63xxp1;
	struct cvmx_pciercx_cfg041_s cn66xx;
	struct cvmx_pciercx_cfg041_s cn68xx;
	struct cvmx_pciercx_cfg041_s cn68xxp1;
	struct cvmx_pciercx_cfg041_s cnf71xx;
};

union cvmx_pciercx_cfg042 {
	uint32_t u32;
	struct cvmx_pciercx_cfg042_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_0_31:32;
#else
		uint32_t reserved_0_31:32;
#endif
	} s;
	struct cvmx_pciercx_cfg042_s cn52xx;
	struct cvmx_pciercx_cfg042_s cn52xxp1;
	struct cvmx_pciercx_cfg042_s cn56xx;
	struct cvmx_pciercx_cfg042_s cn56xxp1;
	struct cvmx_pciercx_cfg042_s cn61xx;
	struct cvmx_pciercx_cfg042_s cn63xx;
	struct cvmx_pciercx_cfg042_s cn63xxp1;
	struct cvmx_pciercx_cfg042_s cn66xx;
	struct cvmx_pciercx_cfg042_s cn68xx;
	struct cvmx_pciercx_cfg042_s cn68xxp1;
	struct cvmx_pciercx_cfg042_s cnf71xx;
};

union cvmx_pciercx_cfg064 {
	uint32_t u32;
	struct cvmx_pciercx_cfg064_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t nco:12;
		uint32_t cv:4;
		uint32_t pcieec:16;
#else
		uint32_t pcieec:16;
		uint32_t cv:4;
		uint32_t nco:12;
#endif
	} s;
	struct cvmx_pciercx_cfg064_s cn52xx;
	struct cvmx_pciercx_cfg064_s cn52xxp1;
	struct cvmx_pciercx_cfg064_s cn56xx;
	struct cvmx_pciercx_cfg064_s cn56xxp1;
	struct cvmx_pciercx_cfg064_s cn61xx;
	struct cvmx_pciercx_cfg064_s cn63xx;
	struct cvmx_pciercx_cfg064_s cn63xxp1;
	struct cvmx_pciercx_cfg064_s cn66xx;
	struct cvmx_pciercx_cfg064_s cn68xx;
	struct cvmx_pciercx_cfg064_s cn68xxp1;
	struct cvmx_pciercx_cfg064_s cnf71xx;
};

union cvmx_pciercx_cfg065 {
	uint32_t u32;
	struct cvmx_pciercx_cfg065_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t uatombs:1;
		uint32_t reserved_23_23:1;
		uint32_t ucies:1;
		uint32_t reserved_21_21:1;
		uint32_t ures:1;
		uint32_t ecrces:1;
		uint32_t mtlps:1;
		uint32_t ros:1;
		uint32_t ucs:1;
		uint32_t cas:1;
		uint32_t cts:1;
		uint32_t fcpes:1;
		uint32_t ptlps:1;
		uint32_t reserved_6_11:6;
		uint32_t sdes:1;
		uint32_t dlpes:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpes:1;
		uint32_t sdes:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlps:1;
		uint32_t fcpes:1;
		uint32_t cts:1;
		uint32_t cas:1;
		uint32_t ucs:1;
		uint32_t ros:1;
		uint32_t mtlps:1;
		uint32_t ecrces:1;
		uint32_t ures:1;
		uint32_t reserved_21_21:1;
		uint32_t ucies:1;
		uint32_t reserved_23_23:1;
		uint32_t uatombs:1;
		uint32_t reserved_25_31:7;
#endif
	} s;
	struct cvmx_pciercx_cfg065_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_21_31:11;
		uint32_t ures:1;
		uint32_t ecrces:1;
		uint32_t mtlps:1;
		uint32_t ros:1;
		uint32_t ucs:1;
		uint32_t cas:1;
		uint32_t cts:1;
		uint32_t fcpes:1;
		uint32_t ptlps:1;
		uint32_t reserved_6_11:6;
		uint32_t sdes:1;
		uint32_t dlpes:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpes:1;
		uint32_t sdes:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlps:1;
		uint32_t fcpes:1;
		uint32_t cts:1;
		uint32_t cas:1;
		uint32_t ucs:1;
		uint32_t ros:1;
		uint32_t mtlps:1;
		uint32_t ecrces:1;
		uint32_t ures:1;
		uint32_t reserved_21_31:11;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg065_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg065_cn52xx cn56xx;
	struct cvmx_pciercx_cfg065_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg065_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t uatombs:1;
		uint32_t reserved_21_23:3;
		uint32_t ures:1;
		uint32_t ecrces:1;
		uint32_t mtlps:1;
		uint32_t ros:1;
		uint32_t ucs:1;
		uint32_t cas:1;
		uint32_t cts:1;
		uint32_t fcpes:1;
		uint32_t ptlps:1;
		uint32_t reserved_6_11:6;
		uint32_t sdes:1;
		uint32_t dlpes:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpes:1;
		uint32_t sdes:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlps:1;
		uint32_t fcpes:1;
		uint32_t cts:1;
		uint32_t cas:1;
		uint32_t ucs:1;
		uint32_t ros:1;
		uint32_t mtlps:1;
		uint32_t ecrces:1;
		uint32_t ures:1;
		uint32_t reserved_21_23:3;
		uint32_t uatombs:1;
		uint32_t reserved_25_31:7;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg065_cn52xx cn63xx;
	struct cvmx_pciercx_cfg065_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg065_cn61xx cn66xx;
	struct cvmx_pciercx_cfg065_cn61xx cn68xx;
	struct cvmx_pciercx_cfg065_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg065_s cnf71xx;
};

union cvmx_pciercx_cfg066 {
	uint32_t u32;
	struct cvmx_pciercx_cfg066_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t uatombm:1;
		uint32_t reserved_23_23:1;
		uint32_t uciem:1;
		uint32_t reserved_21_21:1;
		uint32_t urem:1;
		uint32_t ecrcem:1;
		uint32_t mtlpm:1;
		uint32_t rom:1;
		uint32_t ucm:1;
		uint32_t cam:1;
		uint32_t ctm:1;
		uint32_t fcpem:1;
		uint32_t ptlpm:1;
		uint32_t reserved_6_11:6;
		uint32_t sdem:1;
		uint32_t dlpem:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpem:1;
		uint32_t sdem:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlpm:1;
		uint32_t fcpem:1;
		uint32_t ctm:1;
		uint32_t cam:1;
		uint32_t ucm:1;
		uint32_t rom:1;
		uint32_t mtlpm:1;
		uint32_t ecrcem:1;
		uint32_t urem:1;
		uint32_t reserved_21_21:1;
		uint32_t uciem:1;
		uint32_t reserved_23_23:1;
		uint32_t uatombm:1;
		uint32_t reserved_25_31:7;
#endif
	} s;
	struct cvmx_pciercx_cfg066_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_21_31:11;
		uint32_t urem:1;
		uint32_t ecrcem:1;
		uint32_t mtlpm:1;
		uint32_t rom:1;
		uint32_t ucm:1;
		uint32_t cam:1;
		uint32_t ctm:1;
		uint32_t fcpem:1;
		uint32_t ptlpm:1;
		uint32_t reserved_6_11:6;
		uint32_t sdem:1;
		uint32_t dlpem:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpem:1;
		uint32_t sdem:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlpm:1;
		uint32_t fcpem:1;
		uint32_t ctm:1;
		uint32_t cam:1;
		uint32_t ucm:1;
		uint32_t rom:1;
		uint32_t mtlpm:1;
		uint32_t ecrcem:1;
		uint32_t urem:1;
		uint32_t reserved_21_31:11;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg066_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg066_cn52xx cn56xx;
	struct cvmx_pciercx_cfg066_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg066_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t uatombm:1;
		uint32_t reserved_21_23:3;
		uint32_t urem:1;
		uint32_t ecrcem:1;
		uint32_t mtlpm:1;
		uint32_t rom:1;
		uint32_t ucm:1;
		uint32_t cam:1;
		uint32_t ctm:1;
		uint32_t fcpem:1;
		uint32_t ptlpm:1;
		uint32_t reserved_6_11:6;
		uint32_t sdem:1;
		uint32_t dlpem:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpem:1;
		uint32_t sdem:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlpm:1;
		uint32_t fcpem:1;
		uint32_t ctm:1;
		uint32_t cam:1;
		uint32_t ucm:1;
		uint32_t rom:1;
		uint32_t mtlpm:1;
		uint32_t ecrcem:1;
		uint32_t urem:1;
		uint32_t reserved_21_23:3;
		uint32_t uatombm:1;
		uint32_t reserved_25_31:7;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg066_cn52xx cn63xx;
	struct cvmx_pciercx_cfg066_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg066_cn61xx cn66xx;
	struct cvmx_pciercx_cfg066_cn61xx cn68xx;
	struct cvmx_pciercx_cfg066_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg066_s cnf71xx;
};

union cvmx_pciercx_cfg067 {
	uint32_t u32;
	struct cvmx_pciercx_cfg067_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t uatombs:1;
		uint32_t reserved_23_23:1;
		uint32_t ucies:1;
		uint32_t reserved_21_21:1;
		uint32_t ures:1;
		uint32_t ecrces:1;
		uint32_t mtlps:1;
		uint32_t ros:1;
		uint32_t ucs:1;
		uint32_t cas:1;
		uint32_t cts:1;
		uint32_t fcpes:1;
		uint32_t ptlps:1;
		uint32_t reserved_6_11:6;
		uint32_t sdes:1;
		uint32_t dlpes:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpes:1;
		uint32_t sdes:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlps:1;
		uint32_t fcpes:1;
		uint32_t cts:1;
		uint32_t cas:1;
		uint32_t ucs:1;
		uint32_t ros:1;
		uint32_t mtlps:1;
		uint32_t ecrces:1;
		uint32_t ures:1;
		uint32_t reserved_21_21:1;
		uint32_t ucies:1;
		uint32_t reserved_23_23:1;
		uint32_t uatombs:1;
		uint32_t reserved_25_31:7;
#endif
	} s;
	struct cvmx_pciercx_cfg067_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_21_31:11;
		uint32_t ures:1;
		uint32_t ecrces:1;
		uint32_t mtlps:1;
		uint32_t ros:1;
		uint32_t ucs:1;
		uint32_t cas:1;
		uint32_t cts:1;
		uint32_t fcpes:1;
		uint32_t ptlps:1;
		uint32_t reserved_6_11:6;
		uint32_t sdes:1;
		uint32_t dlpes:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpes:1;
		uint32_t sdes:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlps:1;
		uint32_t fcpes:1;
		uint32_t cts:1;
		uint32_t cas:1;
		uint32_t ucs:1;
		uint32_t ros:1;
		uint32_t mtlps:1;
		uint32_t ecrces:1;
		uint32_t ures:1;
		uint32_t reserved_21_31:11;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg067_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg067_cn52xx cn56xx;
	struct cvmx_pciercx_cfg067_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg067_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_25_31:7;
		uint32_t uatombs:1;
		uint32_t reserved_21_23:3;
		uint32_t ures:1;
		uint32_t ecrces:1;
		uint32_t mtlps:1;
		uint32_t ros:1;
		uint32_t ucs:1;
		uint32_t cas:1;
		uint32_t cts:1;
		uint32_t fcpes:1;
		uint32_t ptlps:1;
		uint32_t reserved_6_11:6;
		uint32_t sdes:1;
		uint32_t dlpes:1;
		uint32_t reserved_0_3:4;
#else
		uint32_t reserved_0_3:4;
		uint32_t dlpes:1;
		uint32_t sdes:1;
		uint32_t reserved_6_11:6;
		uint32_t ptlps:1;
		uint32_t fcpes:1;
		uint32_t cts:1;
		uint32_t cas:1;
		uint32_t ucs:1;
		uint32_t ros:1;
		uint32_t mtlps:1;
		uint32_t ecrces:1;
		uint32_t ures:1;
		uint32_t reserved_21_23:3;
		uint32_t uatombs:1;
		uint32_t reserved_25_31:7;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg067_cn52xx cn63xx;
	struct cvmx_pciercx_cfg067_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg067_cn61xx cn66xx;
	struct cvmx_pciercx_cfg067_cn61xx cn68xx;
	struct cvmx_pciercx_cfg067_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg067_s cnf71xx;
};

union cvmx_pciercx_cfg068 {
	uint32_t u32;
	struct cvmx_pciercx_cfg068_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_15_31:17;
		uint32_t cies:1;
		uint32_t anfes:1;
		uint32_t rtts:1;
		uint32_t reserved_9_11:3;
		uint32_t rnrs:1;
		uint32_t bdllps:1;
		uint32_t btlps:1;
		uint32_t reserved_1_5:5;
		uint32_t res:1;
#else
		uint32_t res:1;
		uint32_t reserved_1_5:5;
		uint32_t btlps:1;
		uint32_t bdllps:1;
		uint32_t rnrs:1;
		uint32_t reserved_9_11:3;
		uint32_t rtts:1;
		uint32_t anfes:1;
		uint32_t cies:1;
		uint32_t reserved_15_31:17;
#endif
	} s;
	struct cvmx_pciercx_cfg068_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_14_31:18;
		uint32_t anfes:1;
		uint32_t rtts:1;
		uint32_t reserved_9_11:3;
		uint32_t rnrs:1;
		uint32_t bdllps:1;
		uint32_t btlps:1;
		uint32_t reserved_1_5:5;
		uint32_t res:1;
#else
		uint32_t res:1;
		uint32_t reserved_1_5:5;
		uint32_t btlps:1;
		uint32_t bdllps:1;
		uint32_t rnrs:1;
		uint32_t reserved_9_11:3;
		uint32_t rtts:1;
		uint32_t anfes:1;
		uint32_t reserved_14_31:18;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg068_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg068_cn52xx cn56xx;
	struct cvmx_pciercx_cfg068_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg068_cn52xx cn61xx;
	struct cvmx_pciercx_cfg068_cn52xx cn63xx;
	struct cvmx_pciercx_cfg068_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg068_cn52xx cn66xx;
	struct cvmx_pciercx_cfg068_cn52xx cn68xx;
	struct cvmx_pciercx_cfg068_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg068_s cnf71xx;
};

union cvmx_pciercx_cfg069 {
	uint32_t u32;
	struct cvmx_pciercx_cfg069_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_15_31:17;
		uint32_t ciem:1;
		uint32_t anfem:1;
		uint32_t rttm:1;
		uint32_t reserved_9_11:3;
		uint32_t rnrm:1;
		uint32_t bdllpm:1;
		uint32_t btlpm:1;
		uint32_t reserved_1_5:5;
		uint32_t rem:1;
#else
		uint32_t rem:1;
		uint32_t reserved_1_5:5;
		uint32_t btlpm:1;
		uint32_t bdllpm:1;
		uint32_t rnrm:1;
		uint32_t reserved_9_11:3;
		uint32_t rttm:1;
		uint32_t anfem:1;
		uint32_t ciem:1;
		uint32_t reserved_15_31:17;
#endif
	} s;
	struct cvmx_pciercx_cfg069_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_14_31:18;
		uint32_t anfem:1;
		uint32_t rttm:1;
		uint32_t reserved_9_11:3;
		uint32_t rnrm:1;
		uint32_t bdllpm:1;
		uint32_t btlpm:1;
		uint32_t reserved_1_5:5;
		uint32_t rem:1;
#else
		uint32_t rem:1;
		uint32_t reserved_1_5:5;
		uint32_t btlpm:1;
		uint32_t bdllpm:1;
		uint32_t rnrm:1;
		uint32_t reserved_9_11:3;
		uint32_t rttm:1;
		uint32_t anfem:1;
		uint32_t reserved_14_31:18;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg069_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg069_cn52xx cn56xx;
	struct cvmx_pciercx_cfg069_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg069_cn52xx cn61xx;
	struct cvmx_pciercx_cfg069_cn52xx cn63xx;
	struct cvmx_pciercx_cfg069_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg069_cn52xx cn66xx;
	struct cvmx_pciercx_cfg069_cn52xx cn68xx;
	struct cvmx_pciercx_cfg069_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg069_s cnf71xx;
};

union cvmx_pciercx_cfg070 {
	uint32_t u32;
	struct cvmx_pciercx_cfg070_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_9_31:23;
		uint32_t ce:1;
		uint32_t cc:1;
		uint32_t ge:1;
		uint32_t gc:1;
		uint32_t fep:5;
#else
		uint32_t fep:5;
		uint32_t gc:1;
		uint32_t ge:1;
		uint32_t cc:1;
		uint32_t ce:1;
		uint32_t reserved_9_31:23;
#endif
	} s;
	struct cvmx_pciercx_cfg070_s cn52xx;
	struct cvmx_pciercx_cfg070_s cn52xxp1;
	struct cvmx_pciercx_cfg070_s cn56xx;
	struct cvmx_pciercx_cfg070_s cn56xxp1;
	struct cvmx_pciercx_cfg070_s cn61xx;
	struct cvmx_pciercx_cfg070_s cn63xx;
	struct cvmx_pciercx_cfg070_s cn63xxp1;
	struct cvmx_pciercx_cfg070_s cn66xx;
	struct cvmx_pciercx_cfg070_s cn68xx;
	struct cvmx_pciercx_cfg070_s cn68xxp1;
	struct cvmx_pciercx_cfg070_s cnf71xx;
};

union cvmx_pciercx_cfg071 {
	uint32_t u32;
	struct cvmx_pciercx_cfg071_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dword1:32;
#else
		uint32_t dword1:32;
#endif
	} s;
	struct cvmx_pciercx_cfg071_s cn52xx;
	struct cvmx_pciercx_cfg071_s cn52xxp1;
	struct cvmx_pciercx_cfg071_s cn56xx;
	struct cvmx_pciercx_cfg071_s cn56xxp1;
	struct cvmx_pciercx_cfg071_s cn61xx;
	struct cvmx_pciercx_cfg071_s cn63xx;
	struct cvmx_pciercx_cfg071_s cn63xxp1;
	struct cvmx_pciercx_cfg071_s cn66xx;
	struct cvmx_pciercx_cfg071_s cn68xx;
	struct cvmx_pciercx_cfg071_s cn68xxp1;
	struct cvmx_pciercx_cfg071_s cnf71xx;
};

union cvmx_pciercx_cfg072 {
	uint32_t u32;
	struct cvmx_pciercx_cfg072_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dword2:32;
#else
		uint32_t dword2:32;
#endif
	} s;
	struct cvmx_pciercx_cfg072_s cn52xx;
	struct cvmx_pciercx_cfg072_s cn52xxp1;
	struct cvmx_pciercx_cfg072_s cn56xx;
	struct cvmx_pciercx_cfg072_s cn56xxp1;
	struct cvmx_pciercx_cfg072_s cn61xx;
	struct cvmx_pciercx_cfg072_s cn63xx;
	struct cvmx_pciercx_cfg072_s cn63xxp1;
	struct cvmx_pciercx_cfg072_s cn66xx;
	struct cvmx_pciercx_cfg072_s cn68xx;
	struct cvmx_pciercx_cfg072_s cn68xxp1;
	struct cvmx_pciercx_cfg072_s cnf71xx;
};

union cvmx_pciercx_cfg073 {
	uint32_t u32;
	struct cvmx_pciercx_cfg073_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dword3:32;
#else
		uint32_t dword3:32;
#endif
	} s;
	struct cvmx_pciercx_cfg073_s cn52xx;
	struct cvmx_pciercx_cfg073_s cn52xxp1;
	struct cvmx_pciercx_cfg073_s cn56xx;
	struct cvmx_pciercx_cfg073_s cn56xxp1;
	struct cvmx_pciercx_cfg073_s cn61xx;
	struct cvmx_pciercx_cfg073_s cn63xx;
	struct cvmx_pciercx_cfg073_s cn63xxp1;
	struct cvmx_pciercx_cfg073_s cn66xx;
	struct cvmx_pciercx_cfg073_s cn68xx;
	struct cvmx_pciercx_cfg073_s cn68xxp1;
	struct cvmx_pciercx_cfg073_s cnf71xx;
};

union cvmx_pciercx_cfg074 {
	uint32_t u32;
	struct cvmx_pciercx_cfg074_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dword4:32;
#else
		uint32_t dword4:32;
#endif
	} s;
	struct cvmx_pciercx_cfg074_s cn52xx;
	struct cvmx_pciercx_cfg074_s cn52xxp1;
	struct cvmx_pciercx_cfg074_s cn56xx;
	struct cvmx_pciercx_cfg074_s cn56xxp1;
	struct cvmx_pciercx_cfg074_s cn61xx;
	struct cvmx_pciercx_cfg074_s cn63xx;
	struct cvmx_pciercx_cfg074_s cn63xxp1;
	struct cvmx_pciercx_cfg074_s cn66xx;
	struct cvmx_pciercx_cfg074_s cn68xx;
	struct cvmx_pciercx_cfg074_s cn68xxp1;
	struct cvmx_pciercx_cfg074_s cnf71xx;
};

union cvmx_pciercx_cfg075 {
	uint32_t u32;
	struct cvmx_pciercx_cfg075_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_3_31:29;
		uint32_t fere:1;
		uint32_t nfere:1;
		uint32_t cere:1;
#else
		uint32_t cere:1;
		uint32_t nfere:1;
		uint32_t fere:1;
		uint32_t reserved_3_31:29;
#endif
	} s;
	struct cvmx_pciercx_cfg075_s cn52xx;
	struct cvmx_pciercx_cfg075_s cn52xxp1;
	struct cvmx_pciercx_cfg075_s cn56xx;
	struct cvmx_pciercx_cfg075_s cn56xxp1;
	struct cvmx_pciercx_cfg075_s cn61xx;
	struct cvmx_pciercx_cfg075_s cn63xx;
	struct cvmx_pciercx_cfg075_s cn63xxp1;
	struct cvmx_pciercx_cfg075_s cn66xx;
	struct cvmx_pciercx_cfg075_s cn68xx;
	struct cvmx_pciercx_cfg075_s cn68xxp1;
	struct cvmx_pciercx_cfg075_s cnf71xx;
};

union cvmx_pciercx_cfg076 {
	uint32_t u32;
	struct cvmx_pciercx_cfg076_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t aeimn:5;
		uint32_t reserved_7_26:20;
		uint32_t femr:1;
		uint32_t nfemr:1;
		uint32_t fuf:1;
		uint32_t multi_efnfr:1;
		uint32_t efnfr:1;
		uint32_t multi_ecr:1;
		uint32_t ecr:1;
#else
		uint32_t ecr:1;
		uint32_t multi_ecr:1;
		uint32_t efnfr:1;
		uint32_t multi_efnfr:1;
		uint32_t fuf:1;
		uint32_t nfemr:1;
		uint32_t femr:1;
		uint32_t reserved_7_26:20;
		uint32_t aeimn:5;
#endif
	} s;
	struct cvmx_pciercx_cfg076_s cn52xx;
	struct cvmx_pciercx_cfg076_s cn52xxp1;
	struct cvmx_pciercx_cfg076_s cn56xx;
	struct cvmx_pciercx_cfg076_s cn56xxp1;
	struct cvmx_pciercx_cfg076_s cn61xx;
	struct cvmx_pciercx_cfg076_s cn63xx;
	struct cvmx_pciercx_cfg076_s cn63xxp1;
	struct cvmx_pciercx_cfg076_s cn66xx;
	struct cvmx_pciercx_cfg076_s cn68xx;
	struct cvmx_pciercx_cfg076_s cn68xxp1;
	struct cvmx_pciercx_cfg076_s cnf71xx;
};

union cvmx_pciercx_cfg077 {
	uint32_t u32;
	struct cvmx_pciercx_cfg077_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t efnfsi:16;
		uint32_t ecsi:16;
#else
		uint32_t ecsi:16;
		uint32_t efnfsi:16;
#endif
	} s;
	struct cvmx_pciercx_cfg077_s cn52xx;
	struct cvmx_pciercx_cfg077_s cn52xxp1;
	struct cvmx_pciercx_cfg077_s cn56xx;
	struct cvmx_pciercx_cfg077_s cn56xxp1;
	struct cvmx_pciercx_cfg077_s cn61xx;
	struct cvmx_pciercx_cfg077_s cn63xx;
	struct cvmx_pciercx_cfg077_s cn63xxp1;
	struct cvmx_pciercx_cfg077_s cn66xx;
	struct cvmx_pciercx_cfg077_s cn68xx;
	struct cvmx_pciercx_cfg077_s cn68xxp1;
	struct cvmx_pciercx_cfg077_s cnf71xx;
};

union cvmx_pciercx_cfg448 {
	uint32_t u32;
	struct cvmx_pciercx_cfg448_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t rtl:16;
		uint32_t rtltl:16;
#else
		uint32_t rtltl:16;
		uint32_t rtl:16;
#endif
	} s;
	struct cvmx_pciercx_cfg448_s cn52xx;
	struct cvmx_pciercx_cfg448_s cn52xxp1;
	struct cvmx_pciercx_cfg448_s cn56xx;
	struct cvmx_pciercx_cfg448_s cn56xxp1;
	struct cvmx_pciercx_cfg448_s cn61xx;
	struct cvmx_pciercx_cfg448_s cn63xx;
	struct cvmx_pciercx_cfg448_s cn63xxp1;
	struct cvmx_pciercx_cfg448_s cn66xx;
	struct cvmx_pciercx_cfg448_s cn68xx;
	struct cvmx_pciercx_cfg448_s cn68xxp1;
	struct cvmx_pciercx_cfg448_s cnf71xx;
};

union cvmx_pciercx_cfg449 {
	uint32_t u32;
	struct cvmx_pciercx_cfg449_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t omr:32;
#else
		uint32_t omr:32;
#endif
	} s;
	struct cvmx_pciercx_cfg449_s cn52xx;
	struct cvmx_pciercx_cfg449_s cn52xxp1;
	struct cvmx_pciercx_cfg449_s cn56xx;
	struct cvmx_pciercx_cfg449_s cn56xxp1;
	struct cvmx_pciercx_cfg449_s cn61xx;
	struct cvmx_pciercx_cfg449_s cn63xx;
	struct cvmx_pciercx_cfg449_s cn63xxp1;
	struct cvmx_pciercx_cfg449_s cn66xx;
	struct cvmx_pciercx_cfg449_s cn68xx;
	struct cvmx_pciercx_cfg449_s cn68xxp1;
	struct cvmx_pciercx_cfg449_s cnf71xx;
};

union cvmx_pciercx_cfg450 {
	uint32_t u32;
	struct cvmx_pciercx_cfg450_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t lpec:8;
		uint32_t reserved_22_23:2;
		uint32_t link_state:6;
		uint32_t force_link:1;
		uint32_t reserved_8_14:7;
		uint32_t link_num:8;
#else
		uint32_t link_num:8;
		uint32_t reserved_8_14:7;
		uint32_t force_link:1;
		uint32_t link_state:6;
		uint32_t reserved_22_23:2;
		uint32_t lpec:8;
#endif
	} s;
	struct cvmx_pciercx_cfg450_s cn52xx;
	struct cvmx_pciercx_cfg450_s cn52xxp1;
	struct cvmx_pciercx_cfg450_s cn56xx;
	struct cvmx_pciercx_cfg450_s cn56xxp1;
	struct cvmx_pciercx_cfg450_s cn61xx;
	struct cvmx_pciercx_cfg450_s cn63xx;
	struct cvmx_pciercx_cfg450_s cn63xxp1;
	struct cvmx_pciercx_cfg450_s cn66xx;
	struct cvmx_pciercx_cfg450_s cn68xx;
	struct cvmx_pciercx_cfg450_s cn68xxp1;
	struct cvmx_pciercx_cfg450_s cnf71xx;
};

union cvmx_pciercx_cfg451 {
	uint32_t u32;
	struct cvmx_pciercx_cfg451_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_31_31:1;
		uint32_t easpml1:1;
		uint32_t l1el:3;
		uint32_t l0el:3;
		uint32_t n_fts_cc:8;
		uint32_t n_fts:8;
		uint32_t ack_freq:8;
#else
		uint32_t ack_freq:8;
		uint32_t n_fts:8;
		uint32_t n_fts_cc:8;
		uint32_t l0el:3;
		uint32_t l1el:3;
		uint32_t easpml1:1;
		uint32_t reserved_31_31:1;
#endif
	} s;
	struct cvmx_pciercx_cfg451_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_30_31:2;
		uint32_t l1el:3;
		uint32_t l0el:3;
		uint32_t n_fts_cc:8;
		uint32_t n_fts:8;
		uint32_t ack_freq:8;
#else
		uint32_t ack_freq:8;
		uint32_t n_fts:8;
		uint32_t n_fts_cc:8;
		uint32_t l0el:3;
		uint32_t l1el:3;
		uint32_t reserved_30_31:2;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg451_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg451_cn52xx cn56xx;
	struct cvmx_pciercx_cfg451_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg451_s cn61xx;
	struct cvmx_pciercx_cfg451_cn52xx cn63xx;
	struct cvmx_pciercx_cfg451_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg451_s cn66xx;
	struct cvmx_pciercx_cfg451_s cn68xx;
	struct cvmx_pciercx_cfg451_s cn68xxp1;
	struct cvmx_pciercx_cfg451_s cnf71xx;
};

union cvmx_pciercx_cfg452 {
	uint32_t u32;
	struct cvmx_pciercx_cfg452_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_26_31:6;
		uint32_t eccrc:1;
		uint32_t reserved_22_24:3;
		uint32_t lme:6;
		uint32_t reserved_8_15:8;
		uint32_t flm:1;
		uint32_t reserved_6_6:1;
		uint32_t dllle:1;
		uint32_t reserved_4_4:1;
		uint32_t ra:1;
		uint32_t le:1;
		uint32_t sd:1;
		uint32_t omr:1;
#else
		uint32_t omr:1;
		uint32_t sd:1;
		uint32_t le:1;
		uint32_t ra:1;
		uint32_t reserved_4_4:1;
		uint32_t dllle:1;
		uint32_t reserved_6_6:1;
		uint32_t flm:1;
		uint32_t reserved_8_15:8;
		uint32_t lme:6;
		uint32_t reserved_22_24:3;
		uint32_t eccrc:1;
		uint32_t reserved_26_31:6;
#endif
	} s;
	struct cvmx_pciercx_cfg452_s cn52xx;
	struct cvmx_pciercx_cfg452_s cn52xxp1;
	struct cvmx_pciercx_cfg452_s cn56xx;
	struct cvmx_pciercx_cfg452_s cn56xxp1;
	struct cvmx_pciercx_cfg452_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_22_31:10;
		uint32_t lme:6;
		uint32_t reserved_8_15:8;
		uint32_t flm:1;
		uint32_t reserved_6_6:1;
		uint32_t dllle:1;
		uint32_t reserved_4_4:1;
		uint32_t ra:1;
		uint32_t le:1;
		uint32_t sd:1;
		uint32_t omr:1;
#else
		uint32_t omr:1;
		uint32_t sd:1;
		uint32_t le:1;
		uint32_t ra:1;
		uint32_t reserved_4_4:1;
		uint32_t dllle:1;
		uint32_t reserved_6_6:1;
		uint32_t flm:1;
		uint32_t reserved_8_15:8;
		uint32_t lme:6;
		uint32_t reserved_22_31:10;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg452_s cn63xx;
	struct cvmx_pciercx_cfg452_s cn63xxp1;
	struct cvmx_pciercx_cfg452_cn61xx cn66xx;
	struct cvmx_pciercx_cfg452_cn61xx cn68xx;
	struct cvmx_pciercx_cfg452_cn61xx cn68xxp1;
	struct cvmx_pciercx_cfg452_cn61xx cnf71xx;
};

union cvmx_pciercx_cfg453 {
	uint32_t u32;
	struct cvmx_pciercx_cfg453_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dlld:1;
		uint32_t reserved_26_30:5;
		uint32_t ack_nak:1;
		uint32_t fcd:1;
		uint32_t ilst:24;
#else
		uint32_t ilst:24;
		uint32_t fcd:1;
		uint32_t ack_nak:1;
		uint32_t reserved_26_30:5;
		uint32_t dlld:1;
#endif
	} s;
	struct cvmx_pciercx_cfg453_s cn52xx;
	struct cvmx_pciercx_cfg453_s cn52xxp1;
	struct cvmx_pciercx_cfg453_s cn56xx;
	struct cvmx_pciercx_cfg453_s cn56xxp1;
	struct cvmx_pciercx_cfg453_s cn61xx;
	struct cvmx_pciercx_cfg453_s cn63xx;
	struct cvmx_pciercx_cfg453_s cn63xxp1;
	struct cvmx_pciercx_cfg453_s cn66xx;
	struct cvmx_pciercx_cfg453_s cn68xx;
	struct cvmx_pciercx_cfg453_s cn68xxp1;
	struct cvmx_pciercx_cfg453_s cnf71xx;
};

union cvmx_pciercx_cfg454 {
	uint32_t u32;
	struct cvmx_pciercx_cfg454_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t cx_nfunc:3;
		uint32_t tmfcwt:5;
		uint32_t tmanlt:5;
		uint32_t tmrt:5;
		uint32_t reserved_11_13:3;
		uint32_t nskps:3;
		uint32_t reserved_0_7:8;
#else
		uint32_t reserved_0_7:8;
		uint32_t nskps:3;
		uint32_t reserved_11_13:3;
		uint32_t tmrt:5;
		uint32_t tmanlt:5;
		uint32_t tmfcwt:5;
		uint32_t cx_nfunc:3;
#endif
	} s;
	struct cvmx_pciercx_cfg454_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_29_31:3;
		uint32_t tmfcwt:5;
		uint32_t tmanlt:5;
		uint32_t tmrt:5;
		uint32_t reserved_11_13:3;
		uint32_t nskps:3;
		uint32_t reserved_4_7:4;
		uint32_t ntss:4;
#else
		uint32_t ntss:4;
		uint32_t reserved_4_7:4;
		uint32_t nskps:3;
		uint32_t reserved_11_13:3;
		uint32_t tmrt:5;
		uint32_t tmanlt:5;
		uint32_t tmfcwt:5;
		uint32_t reserved_29_31:3;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg454_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg454_cn52xx cn56xx;
	struct cvmx_pciercx_cfg454_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg454_cn61xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t cx_nfunc:3;
		uint32_t tmfcwt:5;
		uint32_t tmanlt:5;
		uint32_t tmrt:5;
		uint32_t reserved_8_13:6;
		uint32_t mfuncn:8;
#else
		uint32_t mfuncn:8;
		uint32_t reserved_8_13:6;
		uint32_t tmrt:5;
		uint32_t tmanlt:5;
		uint32_t tmfcwt:5;
		uint32_t cx_nfunc:3;
#endif
	} cn61xx;
	struct cvmx_pciercx_cfg454_cn52xx cn63xx;
	struct cvmx_pciercx_cfg454_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg454_cn61xx cn66xx;
	struct cvmx_pciercx_cfg454_cn61xx cn68xx;
	struct cvmx_pciercx_cfg454_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg454_cn61xx cnf71xx;
};

union cvmx_pciercx_cfg455 {
	uint32_t u32;
	struct cvmx_pciercx_cfg455_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t m_cfg0_filt:1;
		uint32_t m_io_filt:1;
		uint32_t msg_ctrl:1;
		uint32_t m_cpl_ecrc_filt:1;
		uint32_t m_ecrc_filt:1;
		uint32_t m_cpl_len_err:1;
		uint32_t m_cpl_attr_err:1;
		uint32_t m_cpl_tc_err:1;
		uint32_t m_cpl_fun_err:1;
		uint32_t m_cpl_rid_err:1;
		uint32_t m_cpl_tag_err:1;
		uint32_t m_lk_filt:1;
		uint32_t m_cfg1_filt:1;
		uint32_t m_bar_match:1;
		uint32_t m_pois_filt:1;
		uint32_t m_fun:1;
		uint32_t dfcwt:1;
		uint32_t reserved_11_14:4;
		uint32_t skpiv:11;
#else
		uint32_t skpiv:11;
		uint32_t reserved_11_14:4;
		uint32_t dfcwt:1;
		uint32_t m_fun:1;
		uint32_t m_pois_filt:1;
		uint32_t m_bar_match:1;
		uint32_t m_cfg1_filt:1;
		uint32_t m_lk_filt:1;
		uint32_t m_cpl_tag_err:1;
		uint32_t m_cpl_rid_err:1;
		uint32_t m_cpl_fun_err:1;
		uint32_t m_cpl_tc_err:1;
		uint32_t m_cpl_attr_err:1;
		uint32_t m_cpl_len_err:1;
		uint32_t m_ecrc_filt:1;
		uint32_t m_cpl_ecrc_filt:1;
		uint32_t msg_ctrl:1;
		uint32_t m_io_filt:1;
		uint32_t m_cfg0_filt:1;
#endif
	} s;
	struct cvmx_pciercx_cfg455_s cn52xx;
	struct cvmx_pciercx_cfg455_s cn52xxp1;
	struct cvmx_pciercx_cfg455_s cn56xx;
	struct cvmx_pciercx_cfg455_s cn56xxp1;
	struct cvmx_pciercx_cfg455_s cn61xx;
	struct cvmx_pciercx_cfg455_s cn63xx;
	struct cvmx_pciercx_cfg455_s cn63xxp1;
	struct cvmx_pciercx_cfg455_s cn66xx;
	struct cvmx_pciercx_cfg455_s cn68xx;
	struct cvmx_pciercx_cfg455_s cn68xxp1;
	struct cvmx_pciercx_cfg455_s cnf71xx;
};

union cvmx_pciercx_cfg456 {
	uint32_t u32;
	struct cvmx_pciercx_cfg456_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_4_31:28;
		uint32_t m_handle_flush:1;
		uint32_t m_dabort_4ucpl:1;
		uint32_t m_vend1_drp:1;
		uint32_t m_vend0_drp:1;
#else
		uint32_t m_vend0_drp:1;
		uint32_t m_vend1_drp:1;
		uint32_t m_dabort_4ucpl:1;
		uint32_t m_handle_flush:1;
		uint32_t reserved_4_31:28;
#endif
	} s;
	struct cvmx_pciercx_cfg456_cn52xx {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_2_31:30;
		uint32_t m_vend1_drp:1;
		uint32_t m_vend0_drp:1;
#else
		uint32_t m_vend0_drp:1;
		uint32_t m_vend1_drp:1;
		uint32_t reserved_2_31:30;
#endif
	} cn52xx;
	struct cvmx_pciercx_cfg456_cn52xx cn52xxp1;
	struct cvmx_pciercx_cfg456_cn52xx cn56xx;
	struct cvmx_pciercx_cfg456_cn52xx cn56xxp1;
	struct cvmx_pciercx_cfg456_s cn61xx;
	struct cvmx_pciercx_cfg456_cn52xx cn63xx;
	struct cvmx_pciercx_cfg456_cn52xx cn63xxp1;
	struct cvmx_pciercx_cfg456_s cn66xx;
	struct cvmx_pciercx_cfg456_s cn68xx;
	struct cvmx_pciercx_cfg456_cn52xx cn68xxp1;
	struct cvmx_pciercx_cfg456_s cnf71xx;
};

union cvmx_pciercx_cfg458 {
	uint32_t u32;
	struct cvmx_pciercx_cfg458_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dbg_info_l32:32;
#else
		uint32_t dbg_info_l32:32;
#endif
	} s;
	struct cvmx_pciercx_cfg458_s cn52xx;
	struct cvmx_pciercx_cfg458_s cn52xxp1;
	struct cvmx_pciercx_cfg458_s cn56xx;
	struct cvmx_pciercx_cfg458_s cn56xxp1;
	struct cvmx_pciercx_cfg458_s cn61xx;
	struct cvmx_pciercx_cfg458_s cn63xx;
	struct cvmx_pciercx_cfg458_s cn63xxp1;
	struct cvmx_pciercx_cfg458_s cn66xx;
	struct cvmx_pciercx_cfg458_s cn68xx;
	struct cvmx_pciercx_cfg458_s cn68xxp1;
	struct cvmx_pciercx_cfg458_s cnf71xx;
};

union cvmx_pciercx_cfg459 {
	uint32_t u32;
	struct cvmx_pciercx_cfg459_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t dbg_info_u32:32;
#else
		uint32_t dbg_info_u32:32;
#endif
	} s;
	struct cvmx_pciercx_cfg459_s cn52xx;
	struct cvmx_pciercx_cfg459_s cn52xxp1;
	struct cvmx_pciercx_cfg459_s cn56xx;
	struct cvmx_pciercx_cfg459_s cn56xxp1;
	struct cvmx_pciercx_cfg459_s cn61xx;
	struct cvmx_pciercx_cfg459_s cn63xx;
	struct cvmx_pciercx_cfg459_s cn63xxp1;
	struct cvmx_pciercx_cfg459_s cn66xx;
	struct cvmx_pciercx_cfg459_s cn68xx;
	struct cvmx_pciercx_cfg459_s cn68xxp1;
	struct cvmx_pciercx_cfg459_s cnf71xx;
};

union cvmx_pciercx_cfg460 {
	uint32_t u32;
	struct cvmx_pciercx_cfg460_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_20_31:12;
		uint32_t tphfcc:8;
		uint32_t tpdfcc:12;
#else
		uint32_t tpdfcc:12;
		uint32_t tphfcc:8;
		uint32_t reserved_20_31:12;
#endif
	} s;
	struct cvmx_pciercx_cfg460_s cn52xx;
	struct cvmx_pciercx_cfg460_s cn52xxp1;
	struct cvmx_pciercx_cfg460_s cn56xx;
	struct cvmx_pciercx_cfg460_s cn56xxp1;
	struct cvmx_pciercx_cfg460_s cn61xx;
	struct cvmx_pciercx_cfg460_s cn63xx;
	struct cvmx_pciercx_cfg460_s cn63xxp1;
	struct cvmx_pciercx_cfg460_s cn66xx;
	struct cvmx_pciercx_cfg460_s cn68xx;
	struct cvmx_pciercx_cfg460_s cn68xxp1;
	struct cvmx_pciercx_cfg460_s cnf71xx;
};

union cvmx_pciercx_cfg461 {
	uint32_t u32;
	struct cvmx_pciercx_cfg461_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_20_31:12;
		uint32_t tchfcc:8;
		uint32_t tcdfcc:12;
#else
		uint32_t tcdfcc:12;
		uint32_t tchfcc:8;
		uint32_t reserved_20_31:12;
#endif
	} s;
	struct cvmx_pciercx_cfg461_s cn52xx;
	struct cvmx_pciercx_cfg461_s cn52xxp1;
	struct cvmx_pciercx_cfg461_s cn56xx;
	struct cvmx_pciercx_cfg461_s cn56xxp1;
	struct cvmx_pciercx_cfg461_s cn61xx;
	struct cvmx_pciercx_cfg461_s cn63xx;
	struct cvmx_pciercx_cfg461_s cn63xxp1;
	struct cvmx_pciercx_cfg461_s cn66xx;
	struct cvmx_pciercx_cfg461_s cn68xx;
	struct cvmx_pciercx_cfg461_s cn68xxp1;
	struct cvmx_pciercx_cfg461_s cnf71xx;
};

union cvmx_pciercx_cfg462 {
	uint32_t u32;
	struct cvmx_pciercx_cfg462_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_20_31:12;
		uint32_t tchfcc:8;
		uint32_t tcdfcc:12;
#else
		uint32_t tcdfcc:12;
		uint32_t tchfcc:8;
		uint32_t reserved_20_31:12;
#endif
	} s;
	struct cvmx_pciercx_cfg462_s cn52xx;
	struct cvmx_pciercx_cfg462_s cn52xxp1;
	struct cvmx_pciercx_cfg462_s cn56xx;
	struct cvmx_pciercx_cfg462_s cn56xxp1;
	struct cvmx_pciercx_cfg462_s cn61xx;
	struct cvmx_pciercx_cfg462_s cn63xx;
	struct cvmx_pciercx_cfg462_s cn63xxp1;
	struct cvmx_pciercx_cfg462_s cn66xx;
	struct cvmx_pciercx_cfg462_s cn68xx;
	struct cvmx_pciercx_cfg462_s cn68xxp1;
	struct cvmx_pciercx_cfg462_s cnf71xx;
};

union cvmx_pciercx_cfg463 {
	uint32_t u32;
	struct cvmx_pciercx_cfg463_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_3_31:29;
		uint32_t rqne:1;
		uint32_t trbne:1;
		uint32_t rtlpfccnr:1;
#else
		uint32_t rtlpfccnr:1;
		uint32_t trbne:1;
		uint32_t rqne:1;
		uint32_t reserved_3_31:29;
#endif
	} s;
	struct cvmx_pciercx_cfg463_s cn52xx;
	struct cvmx_pciercx_cfg463_s cn52xxp1;
	struct cvmx_pciercx_cfg463_s cn56xx;
	struct cvmx_pciercx_cfg463_s cn56xxp1;
	struct cvmx_pciercx_cfg463_s cn61xx;
	struct cvmx_pciercx_cfg463_s cn63xx;
	struct cvmx_pciercx_cfg463_s cn63xxp1;
	struct cvmx_pciercx_cfg463_s cn66xx;
	struct cvmx_pciercx_cfg463_s cn68xx;
	struct cvmx_pciercx_cfg463_s cn68xxp1;
	struct cvmx_pciercx_cfg463_s cnf71xx;
};

union cvmx_pciercx_cfg464 {
	uint32_t u32;
	struct cvmx_pciercx_cfg464_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t wrr_vc3:8;
		uint32_t wrr_vc2:8;
		uint32_t wrr_vc1:8;
		uint32_t wrr_vc0:8;
#else
		uint32_t wrr_vc0:8;
		uint32_t wrr_vc1:8;
		uint32_t wrr_vc2:8;
		uint32_t wrr_vc3:8;
#endif
	} s;
	struct cvmx_pciercx_cfg464_s cn52xx;
	struct cvmx_pciercx_cfg464_s cn52xxp1;
	struct cvmx_pciercx_cfg464_s cn56xx;
	struct cvmx_pciercx_cfg464_s cn56xxp1;
	struct cvmx_pciercx_cfg464_s cn61xx;
	struct cvmx_pciercx_cfg464_s cn63xx;
	struct cvmx_pciercx_cfg464_s cn63xxp1;
	struct cvmx_pciercx_cfg464_s cn66xx;
	struct cvmx_pciercx_cfg464_s cn68xx;
	struct cvmx_pciercx_cfg464_s cn68xxp1;
	struct cvmx_pciercx_cfg464_s cnf71xx;
};

union cvmx_pciercx_cfg465 {
	uint32_t u32;
	struct cvmx_pciercx_cfg465_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t wrr_vc7:8;
		uint32_t wrr_vc6:8;
		uint32_t wrr_vc5:8;
		uint32_t wrr_vc4:8;
#else
		uint32_t wrr_vc4:8;
		uint32_t wrr_vc5:8;
		uint32_t wrr_vc6:8;
		uint32_t wrr_vc7:8;
#endif
	} s;
	struct cvmx_pciercx_cfg465_s cn52xx;
	struct cvmx_pciercx_cfg465_s cn52xxp1;
	struct cvmx_pciercx_cfg465_s cn56xx;
	struct cvmx_pciercx_cfg465_s cn56xxp1;
	struct cvmx_pciercx_cfg465_s cn61xx;
	struct cvmx_pciercx_cfg465_s cn63xx;
	struct cvmx_pciercx_cfg465_s cn63xxp1;
	struct cvmx_pciercx_cfg465_s cn66xx;
	struct cvmx_pciercx_cfg465_s cn68xx;
	struct cvmx_pciercx_cfg465_s cn68xxp1;
	struct cvmx_pciercx_cfg465_s cnf71xx;
};

union cvmx_pciercx_cfg466 {
	uint32_t u32;
	struct cvmx_pciercx_cfg466_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t rx_queue_order:1;
		uint32_t type_ordering:1;
		uint32_t reserved_24_29:6;
		uint32_t queue_mode:3;
		uint32_t reserved_20_20:1;
		uint32_t header_credits:8;
		uint32_t data_credits:12;
#else
		uint32_t data_credits:12;
		uint32_t header_credits:8;
		uint32_t reserved_20_20:1;
		uint32_t queue_mode:3;
		uint32_t reserved_24_29:6;
		uint32_t type_ordering:1;
		uint32_t rx_queue_order:1;
#endif
	} s;
	struct cvmx_pciercx_cfg466_s cn52xx;
	struct cvmx_pciercx_cfg466_s cn52xxp1;
	struct cvmx_pciercx_cfg466_s cn56xx;
	struct cvmx_pciercx_cfg466_s cn56xxp1;
	struct cvmx_pciercx_cfg466_s cn61xx;
	struct cvmx_pciercx_cfg466_s cn63xx;
	struct cvmx_pciercx_cfg466_s cn63xxp1;
	struct cvmx_pciercx_cfg466_s cn66xx;
	struct cvmx_pciercx_cfg466_s cn68xx;
	struct cvmx_pciercx_cfg466_s cn68xxp1;
	struct cvmx_pciercx_cfg466_s cnf71xx;
};

union cvmx_pciercx_cfg467 {
	uint32_t u32;
	struct cvmx_pciercx_cfg467_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_24_31:8;
		uint32_t queue_mode:3;
		uint32_t reserved_20_20:1;
		uint32_t header_credits:8;
		uint32_t data_credits:12;
#else
		uint32_t data_credits:12;
		uint32_t header_credits:8;
		uint32_t reserved_20_20:1;
		uint32_t queue_mode:3;
		uint32_t reserved_24_31:8;
#endif
	} s;
	struct cvmx_pciercx_cfg467_s cn52xx;
	struct cvmx_pciercx_cfg467_s cn52xxp1;
	struct cvmx_pciercx_cfg467_s cn56xx;
	struct cvmx_pciercx_cfg467_s cn56xxp1;
	struct cvmx_pciercx_cfg467_s cn61xx;
	struct cvmx_pciercx_cfg467_s cn63xx;
	struct cvmx_pciercx_cfg467_s cn63xxp1;
	struct cvmx_pciercx_cfg467_s cn66xx;
	struct cvmx_pciercx_cfg467_s cn68xx;
	struct cvmx_pciercx_cfg467_s cn68xxp1;
	struct cvmx_pciercx_cfg467_s cnf71xx;
};

union cvmx_pciercx_cfg468 {
	uint32_t u32;
	struct cvmx_pciercx_cfg468_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_24_31:8;
		uint32_t queue_mode:3;
		uint32_t reserved_20_20:1;
		uint32_t header_credits:8;
		uint32_t data_credits:12;
#else
		uint32_t data_credits:12;
		uint32_t header_credits:8;
		uint32_t reserved_20_20:1;
		uint32_t queue_mode:3;
		uint32_t reserved_24_31:8;
#endif
	} s;
	struct cvmx_pciercx_cfg468_s cn52xx;
	struct cvmx_pciercx_cfg468_s cn52xxp1;
	struct cvmx_pciercx_cfg468_s cn56xx;
	struct cvmx_pciercx_cfg468_s cn56xxp1;
	struct cvmx_pciercx_cfg468_s cn61xx;
	struct cvmx_pciercx_cfg468_s cn63xx;
	struct cvmx_pciercx_cfg468_s cn63xxp1;
	struct cvmx_pciercx_cfg468_s cn66xx;
	struct cvmx_pciercx_cfg468_s cn68xx;
	struct cvmx_pciercx_cfg468_s cn68xxp1;
	struct cvmx_pciercx_cfg468_s cnf71xx;
};

union cvmx_pciercx_cfg490 {
	uint32_t u32;
	struct cvmx_pciercx_cfg490_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_26_31:6;
		uint32_t header_depth:10;
		uint32_t reserved_14_15:2;
		uint32_t data_depth:14;
#else
		uint32_t data_depth:14;
		uint32_t reserved_14_15:2;
		uint32_t header_depth:10;
		uint32_t reserved_26_31:6;
#endif
	} s;
	struct cvmx_pciercx_cfg490_s cn52xx;
	struct cvmx_pciercx_cfg490_s cn52xxp1;
	struct cvmx_pciercx_cfg490_s cn56xx;
	struct cvmx_pciercx_cfg490_s cn56xxp1;
	struct cvmx_pciercx_cfg490_s cn61xx;
	struct cvmx_pciercx_cfg490_s cn63xx;
	struct cvmx_pciercx_cfg490_s cn63xxp1;
	struct cvmx_pciercx_cfg490_s cn66xx;
	struct cvmx_pciercx_cfg490_s cn68xx;
	struct cvmx_pciercx_cfg490_s cn68xxp1;
	struct cvmx_pciercx_cfg490_s cnf71xx;
};

union cvmx_pciercx_cfg491 {
	uint32_t u32;
	struct cvmx_pciercx_cfg491_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_26_31:6;
		uint32_t header_depth:10;
		uint32_t reserved_14_15:2;
		uint32_t data_depth:14;
#else
		uint32_t data_depth:14;
		uint32_t reserved_14_15:2;
		uint32_t header_depth:10;
		uint32_t reserved_26_31:6;
#endif
	} s;
	struct cvmx_pciercx_cfg491_s cn52xx;
	struct cvmx_pciercx_cfg491_s cn52xxp1;
	struct cvmx_pciercx_cfg491_s cn56xx;
	struct cvmx_pciercx_cfg491_s cn56xxp1;
	struct cvmx_pciercx_cfg491_s cn61xx;
	struct cvmx_pciercx_cfg491_s cn63xx;
	struct cvmx_pciercx_cfg491_s cn63xxp1;
	struct cvmx_pciercx_cfg491_s cn66xx;
	struct cvmx_pciercx_cfg491_s cn68xx;
	struct cvmx_pciercx_cfg491_s cn68xxp1;
	struct cvmx_pciercx_cfg491_s cnf71xx;
};

union cvmx_pciercx_cfg492 {
	uint32_t u32;
	struct cvmx_pciercx_cfg492_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_26_31:6;
		uint32_t header_depth:10;
		uint32_t reserved_14_15:2;
		uint32_t data_depth:14;
#else
		uint32_t data_depth:14;
		uint32_t reserved_14_15:2;
		uint32_t header_depth:10;
		uint32_t reserved_26_31:6;
#endif
	} s;
	struct cvmx_pciercx_cfg492_s cn52xx;
	struct cvmx_pciercx_cfg492_s cn52xxp1;
	struct cvmx_pciercx_cfg492_s cn56xx;
	struct cvmx_pciercx_cfg492_s cn56xxp1;
	struct cvmx_pciercx_cfg492_s cn61xx;
	struct cvmx_pciercx_cfg492_s cn63xx;
	struct cvmx_pciercx_cfg492_s cn63xxp1;
	struct cvmx_pciercx_cfg492_s cn66xx;
	struct cvmx_pciercx_cfg492_s cn68xx;
	struct cvmx_pciercx_cfg492_s cn68xxp1;
	struct cvmx_pciercx_cfg492_s cnf71xx;
};

union cvmx_pciercx_cfg515 {
	uint32_t u32;
	struct cvmx_pciercx_cfg515_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t reserved_21_31:11;
		uint32_t s_d_e:1;
		uint32_t ctcrb:1;
		uint32_t cpyts:1;
		uint32_t dsc:1;
		uint32_t le:9;
		uint32_t n_fts:8;
#else
		uint32_t n_fts:8;
		uint32_t le:9;
		uint32_t dsc:1;
		uint32_t cpyts:1;
		uint32_t ctcrb:1;
		uint32_t s_d_e:1;
		uint32_t reserved_21_31:11;
#endif
	} s;
	struct cvmx_pciercx_cfg515_s cn61xx;
	struct cvmx_pciercx_cfg515_s cn63xx;
	struct cvmx_pciercx_cfg515_s cn63xxp1;
	struct cvmx_pciercx_cfg515_s cn66xx;
	struct cvmx_pciercx_cfg515_s cn68xx;
	struct cvmx_pciercx_cfg515_s cn68xxp1;
	struct cvmx_pciercx_cfg515_s cnf71xx;
};

union cvmx_pciercx_cfg516 {
	uint32_t u32;
	struct cvmx_pciercx_cfg516_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t phy_stat:32;
#else
		uint32_t phy_stat:32;
#endif
	} s;
	struct cvmx_pciercx_cfg516_s cn52xx;
	struct cvmx_pciercx_cfg516_s cn52xxp1;
	struct cvmx_pciercx_cfg516_s cn56xx;
	struct cvmx_pciercx_cfg516_s cn56xxp1;
	struct cvmx_pciercx_cfg516_s cn61xx;
	struct cvmx_pciercx_cfg516_s cn63xx;
	struct cvmx_pciercx_cfg516_s cn63xxp1;
	struct cvmx_pciercx_cfg516_s cn66xx;
	struct cvmx_pciercx_cfg516_s cn68xx;
	struct cvmx_pciercx_cfg516_s cn68xxp1;
	struct cvmx_pciercx_cfg516_s cnf71xx;
};

union cvmx_pciercx_cfg517 {
	uint32_t u32;
	struct cvmx_pciercx_cfg517_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint32_t phy_ctrl:32;
#else
		uint32_t phy_ctrl:32;
#endif
	} s;
	struct cvmx_pciercx_cfg517_s cn52xx;
	struct cvmx_pciercx_cfg517_s cn52xxp1;
	struct cvmx_pciercx_cfg517_s cn56xx;
	struct cvmx_pciercx_cfg517_s cn56xxp1;
	struct cvmx_pciercx_cfg517_s cn61xx;
	struct cvmx_pciercx_cfg517_s cn63xx;
	struct cvmx_pciercx_cfg517_s cn63xxp1;
	struct cvmx_pciercx_cfg517_s cn66xx;
	struct cvmx_pciercx_cfg517_s cn68xx;
	struct cvmx_pciercx_cfg517_s cn68xxp1;
	struct cvmx_pciercx_cfg517_s cnf71xx;
};

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /***********************license start***************
 * Author: Cavium Networks
 *
 * Contact: support@caviumnetworks.com
 * This file is part of the OCTEON SDK
 *
 * Copyright (c) 2003-2012 Cavium Networks
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, Version 2, as
 * published by the Free Software Foundation.
 *
 * This file is distributed in the hope that it will be useful, but
 * AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 * NONINFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 * or visit http://www.gnu.org/licenses/.
 *
 * This file may also be available under a different license from Cavium.
 * Contact Cavium Networks for more information
 ***********************license end**************************************/

#ifndef __CVMX_CIU2_DEFS_H__
#define __CVMX_CIU2_DEFS_H__

#define CVMX_CIU2_ACK_IOX_INT(block_id) (CVMX_ADD_IO_SEG(0x00010701080C0800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_ACK_PPX_IP2(block_id) (CVMX_ADD_IO_SEG(0x00010701000C0000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_ACK_PPX_IP3(block_id) (CVMX_ADD_IO_SEG(0x00010701000C0200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_ACK_PPX_IP4(block_id) (CVMX_ADD_IO_SEG(0x00010701000C0400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070108097800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_GPIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B7800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_GPIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A7800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070108094800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_IO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B4800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_IO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A4800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070108098800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MBOX_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B8800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MBOX_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A8800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070108095800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MEM_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B5800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MEM_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A5800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070108093800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B3800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_MIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A3800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070108096800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_PKT_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B6800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_PKT_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A6800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070108092800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_RML_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B2800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_RML_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A2800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070108091800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_WDOG_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B1800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_WDOG_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A1800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070108090800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_WRKQ_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701080B0800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_IOX_INT_WRKQ_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701080A0800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100097000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_GPIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B7000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_GPIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A7000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100094000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_IO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B4000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_IO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A4000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070100098000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MBOX_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B8000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MBOX_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A8000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100095000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MEM_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B5000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MEM_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A5000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100093000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B3000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_MIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A3000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100096000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_PKT_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B6000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_PKT_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A6000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100092000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_RML_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B2000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_RML_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A2000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100091000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_WDOG_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B1000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_WDOG_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A1000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100090000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_WRKQ_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B0000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP2_WRKQ_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A0000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100097200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_GPIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B7200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_GPIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A7200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100094200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_IO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B4200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_IO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A4200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070100098200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MBOX_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B8200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MBOX_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A8200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100095200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MEM_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B5200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MEM_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A5200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100093200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B3200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_MIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A3200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100096200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_PKT_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B6200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_PKT_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A6200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100092200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_RML_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B2200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_RML_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A2200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100091200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_WDOG_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B1200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_WDOG_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A1200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100090200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_WRKQ_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B0200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP3_WRKQ_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A0200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100097400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_GPIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B7400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_GPIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A7400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100094400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_IO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B4400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_IO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A4400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070100098400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MBOX_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B8400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MBOX_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A8400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100095400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MEM_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B5400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MEM_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A5400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100093400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MIO_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B3400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_MIO_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A3400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100096400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_PKT_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B6400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_PKT_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A6400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100092400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_RML_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B2400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_RML_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A2400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100091400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_WDOG_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B1400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_WDOG_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A1400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100090400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_WRKQ_W1C(block_id) (CVMX_ADD_IO_SEG(0x00010701000B0400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_EN_PPX_IP4_WRKQ_W1S(block_id) (CVMX_ADD_IO_SEG(0x00010701000A0400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_INTR_CIU_READY (CVMX_ADD_IO_SEG(0x0001070100102008ull))
#define CVMX_CIU2_INTR_RAM_ECC_CTL (CVMX_ADD_IO_SEG(0x0001070100102010ull))
#define CVMX_CIU2_INTR_RAM_ECC_ST (CVMX_ADD_IO_SEG(0x0001070100102018ull))
#define CVMX_CIU2_INTR_SLOWDOWN (CVMX_ADD_IO_SEG(0x0001070100102000ull))
#define CVMX_CIU2_MSIRED_PPX_IP2(block_id) (CVMX_ADD_IO_SEG(0x00010701000C1000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_MSIRED_PPX_IP3(block_id) (CVMX_ADD_IO_SEG(0x00010701000C1200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_MSIRED_PPX_IP4(block_id) (CVMX_ADD_IO_SEG(0x00010701000C1400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_MSI_RCVX(offset) (CVMX_ADD_IO_SEG(0x00010701000C2000ull) + ((offset) & 255) * 8)
#define CVMX_CIU2_MSI_SELX(offset) (CVMX_ADD_IO_SEG(0x00010701000C3000ull) + ((offset) & 255) * 8)
#define CVMX_CIU2_RAW_IOX_INT_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070108047800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070108044800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070108045800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070108043800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070108046800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070108042800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070108041800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_IOX_INT_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070108040800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100047000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100044000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100045000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100043000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100046000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100042000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100041000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP2_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100040000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100047200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100044200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100045200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100043200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100046200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100042200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100041200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP3_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100040200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100047400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100044400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100045400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100043400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100046400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100042400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100041400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_RAW_PPX_IP4_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100040400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070108087800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070108084800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070108088800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070108085800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070108083800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070108086800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070108082800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070108081800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_IOX_INT_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070108080800ull) + ((block_id) & 1) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100087000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100084000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070100088000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100085000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100083000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100086000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100082000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100081000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP2_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100080000ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100087200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100084200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070100088200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100085200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100083200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100086200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100082200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100081200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP3_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100080200ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_GPIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100087400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_IO(block_id) (CVMX_ADD_IO_SEG(0x0001070100084400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_MBOX(block_id) (CVMX_ADD_IO_SEG(0x0001070100088400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_MEM(block_id) (CVMX_ADD_IO_SEG(0x0001070100085400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_MIO(block_id) (CVMX_ADD_IO_SEG(0x0001070100083400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_PKT(block_id) (CVMX_ADD_IO_SEG(0x0001070100086400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_RML(block_id) (CVMX_ADD_IO_SEG(0x0001070100082400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_WDOG(block_id) (CVMX_ADD_IO_SEG(0x0001070100081400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SRC_PPX_IP4_WRKQ(block_id) (CVMX_ADD_IO_SEG(0x0001070100080400ull) + ((block_id) & 31) * 0x200000ull)
#define CVMX_CIU2_SUM_IOX_INT(offset) (CVMX_ADD_IO_SEG(0x0001070100000800ull) + ((offset) & 1) * 8)
#define CVMX_CIU2_SUM_PPX_IP2(offset) (CVMX_ADD_IO_SEG(0x0001070100000000ull) + ((offset) & 31) * 8)
#define CVMX_CIU2_SUM_PPX_IP3(offset) (CVMX_ADD_IO_SEG(0x0001070100000200ull) + ((offset) & 31) * 8)
#define CVMX_CIU2_SUM_PPX_IP4(offset) (CVMX_ADD_IO_SEG(0x0001070100000400ull) + ((offset) & 31) * 8)

union cvmx_ciu2_ack_iox_int {
	uint64_t u64;
	struct cvmx_ciu2_ack_iox_int_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_1_63:63;
		uint64_t ack:1;
#else
		uint64_t ack:1;
		uint64_t reserved_1_63:63;
#endif
	} s;
	struct cvmx_ciu2_ack_iox_int_s cn68xx;
	struct cvmx_ciu2_ack_iox_int_s cn68xxp1;
};

union cvmx_ciu2_ack_ppx_ip2 {
	uint64_t u64;
	struct cvmx_ciu2_ack_ppx_ip2_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_1_63:63;
		uint64_t ack:1;
#else
		uint64_t ack:1;
		uint64_t reserved_1_63:63;
#endif
	} s;
	struct cvmx_ciu2_ack_ppx_ip2_s cn68xx;
	struct cvmx_ciu2_ack_ppx_ip2_s cn68xxp1;
};

union cvmx_ciu2_ack_ppx_ip3 {
	uint64_t u64;
	struct cvmx_ciu2_ack_ppx_ip3_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_1_63:63;
		uint64_t ack:1;
#else
		uint64_t ack:1;
		uint64_t reserved_1_63:63;
#endif
	} s;
	struct cvmx_ciu2_ack_ppx_ip3_s cn68xx;
	struct cvmx_ciu2_ack_ppx_ip3_s cn68xxp1;
};

union cvmx_ciu2_ack_ppx_ip4 {
	uint64_t u64;
	struct cvmx_ciu2_ack_ppx_ip4_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_1_63:63;
		uint64_t ack:1;
#else
		uint64_t ack:1;
		uint64_t reserved_1_63:63;
#endif
	} s;
	struct cvmx_ciu2_ack_ppx_ip4_s cn68xx;
	struct cvmx_ciu2_ack_ppx_ip4_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_gpio {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_gpio_s cn68xx;
	struct cvmx_ciu2_en_iox_int_gpio_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_gpio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_gpio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_gpio_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_gpio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_gpio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_gpio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_gpio_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_gpio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_io {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_io_s cn68xx;
	struct cvmx_ciu2_en_iox_int_io_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_io_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_io_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_io_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_io_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_io_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_io_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_io_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_io_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mbox {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mbox_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mbox_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mbox_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mbox_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mbox_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mbox_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mbox_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mbox_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mbox_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mbox_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mem {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mem_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mem_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mem_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mem_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mem_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mem_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mem_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mem_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mem_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mem_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mio {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mio_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mio_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mio_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_mio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_mio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_mio_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_mio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_pkt {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_pkt_s cn68xx;
	struct cvmx_ciu2_en_iox_int_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_iox_int_pkt_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_pkt_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_pkt_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_pkt_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_iox_int_pkt_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_pkt_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_pkt_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_pkt_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_iox_int_rml {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_rml_s cn68xx;
	struct cvmx_ciu2_en_iox_int_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_iox_int_rml_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_rml_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_rml_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_rml_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_iox_int_rml_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_rml_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_rml_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_rml_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_iox_int_wdog {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_wdog_s cn68xx;
	struct cvmx_ciu2_en_iox_int_wdog_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_wdog_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_wdog_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_wdog_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_wdog_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_wdog_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_wdog_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_wdog_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_wdog_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_wrkq_s cn68xx;
	struct cvmx_ciu2_en_iox_int_wrkq_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_wrkq_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_wrkq_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_wrkq_w1c_s cn68xx;
	struct cvmx_ciu2_en_iox_int_wrkq_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_iox_int_wrkq_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_iox_int_wrkq_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_iox_int_wrkq_w1s_s cn68xx;
	struct cvmx_ciu2_en_iox_int_wrkq_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_gpio {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_gpio_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_gpio_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_gpio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_gpio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_gpio_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_gpio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_gpio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_gpio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_gpio_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_gpio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_io {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_io_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_io_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_io_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_io_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_io_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_io_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_io_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_io_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_io_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_io_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mbox {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mbox_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mbox_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mbox_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mbox_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mbox_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mbox_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mbox_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mbox_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mbox_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mbox_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mem {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mem_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mem_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mem_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mem_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mem_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mem_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mem_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mem_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mem_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mem_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mio {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mio_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mio_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mio_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_mio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_mio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_mio_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_mio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_pkt {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_pkt_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_pkt_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_pkt_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_pkt_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_pkt_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_pkt_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_pkt_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_pkt_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_pkt_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_rml {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_rml_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_rml_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_rml_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_rml_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_rml_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_rml_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_rml_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_rml_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_rml_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_wdog {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_wdog_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_wdog_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_wdog_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_wdog_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_wdog_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_wdog_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_wdog_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_wdog_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_wdog_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_wdog_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_wrkq_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip2_wrkq_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip2_wrkq_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_gpio {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_gpio_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_gpio_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_gpio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_gpio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_gpio_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_gpio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_gpio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_gpio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_gpio_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_gpio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_io {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_io_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_io_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_io_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_io_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_io_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_io_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_io_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_io_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_io_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_io_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mbox {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mbox_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mbox_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mbox_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mbox_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mbox_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mbox_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mbox_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mbox_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mbox_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mbox_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mem {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mem_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mem_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mem_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mem_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mem_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mem_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mem_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mem_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mem_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mem_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mio {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mio_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mio_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mio_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_mio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_mio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_mio_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_mio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_pkt {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_pkt_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_pkt_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_pkt_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_pkt_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_pkt_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_pkt_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_pkt_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_pkt_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_pkt_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_rml {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_rml_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_rml_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_rml_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_rml_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_rml_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_rml_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_rml_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_rml_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_rml_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_wdog {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_wdog_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_wdog_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_wdog_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_wdog_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_wdog_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_wdog_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_wdog_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_wdog_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_wdog_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_wdog_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_wrkq_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip3_wrkq_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip3_wrkq_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_gpio {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_gpio_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_gpio_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_gpio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_gpio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_gpio_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_gpio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_gpio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_gpio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_gpio_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_gpio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_io {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_io_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_io_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_io_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_io_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_io_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_io_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_io_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_io_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_io_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_io_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mbox {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mbox_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mbox_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mbox_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mbox_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mbox_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mbox_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mbox_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mbox_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mbox_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mbox_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mem {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mem_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mem_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mem_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mem_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mem_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mem_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mem_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mem_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mem_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mem_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mio {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mio_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mio_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mio_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mio_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mio_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mio_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_mio_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_mio_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_mio_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_mio_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_pkt {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_pkt_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_pkt_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_pkt_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_pkt_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_pkt_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_pkt_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_pkt_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_pkt_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_pkt_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_rml {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_rml_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_rml_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_rml_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_rml_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_rml_w1c_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_rml_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_rml_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_rml_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_rml_w1s_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_wdog {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_wdog_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_wdog_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_wdog_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_wdog_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_wdog_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_wdog_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_wdog_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_wdog_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_wdog_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_wdog_w1s_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_wrkq_w1c {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_w1c_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_w1c_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_w1c_s cn68xxp1;
};

union cvmx_ciu2_en_ppx_ip4_wrkq_w1s {
	uint64_t u64;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_w1s_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_w1s_s cn68xx;
	struct cvmx_ciu2_en_ppx_ip4_wrkq_w1s_s cn68xxp1;
};

union cvmx_ciu2_intr_ciu_ready {
	uint64_t u64;
	struct cvmx_ciu2_intr_ciu_ready_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_1_63:63;
		uint64_t ready:1;
#else
		uint64_t ready:1;
		uint64_t reserved_1_63:63;
#endif
	} s;
	struct cvmx_ciu2_intr_ciu_ready_s cn68xx;
	struct cvmx_ciu2_intr_ciu_ready_s cn68xxp1;
};

union cvmx_ciu2_intr_ram_ecc_ctl {
	uint64_t u64;
	struct cvmx_ciu2_intr_ram_ecc_ctl_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_3_63:61;
		uint64_t flip_synd:2;
		uint64_t ecc_ena:1;
#else
		uint64_t ecc_ena:1;
		uint64_t flip_synd:2;
		uint64_t reserved_3_63:61;
#endif
	} s;
	struct cvmx_ciu2_intr_ram_ecc_ctl_s cn68xx;
	struct cvmx_ciu2_intr_ram_ecc_ctl_s cn68xxp1;
};

union cvmx_ciu2_intr_ram_ecc_st {
	uint64_t u64;
	struct cvmx_ciu2_intr_ram_ecc_st_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_23_63:41;
		uint64_t addr:7;
		uint64_t reserved_13_15:3;
		uint64_t syndrom:9;
		uint64_t reserved_2_3:2;
		uint64_t dbe:1;
		uint64_t sbe:1;
#else
		uint64_t sbe:1;
		uint64_t dbe:1;
		uint64_t reserved_2_3:2;
		uint64_t syndrom:9;
		uint64_t reserved_13_15:3;
		uint64_t addr:7;
		uint64_t reserved_23_63:41;
#endif
	} s;
	struct cvmx_ciu2_intr_ram_ecc_st_s cn68xx;
	struct cvmx_ciu2_intr_ram_ecc_st_s cn68xxp1;
};

union cvmx_ciu2_intr_slowdown {
	uint64_t u64;
	struct cvmx_ciu2_intr_slowdown_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_3_63:61;
		uint64_t ctl:3;
#else
		uint64_t ctl:3;
		uint64_t reserved_3_63:61;
#endif
	} s;
	struct cvmx_ciu2_intr_slowdown_s cn68xx;
	struct cvmx_ciu2_intr_slowdown_s cn68xxp1;
};

union cvmx_ciu2_msi_rcvx {
	uint64_t u64;
	struct cvmx_ciu2_msi_rcvx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_1_63:63;
		uint64_t msi_rcv:1;
#else
		uint64_t msi_rcv:1;
		uint64_t reserved_1_63:63;
#endif
	} s;
	struct cvmx_ciu2_msi_rcvx_s cn68xx;
	struct cvmx_ciu2_msi_rcvx_s cn68xxp1;
};

union cvmx_ciu2_msi_selx {
	uint64_t u64;
	struct cvmx_ciu2_msi_selx_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_13_63:51;
		uint64_t pp_num:5;
		uint64_t reserved_6_7:2;
		uint64_t ip_num:2;
		uint64_t reserved_1_3:3;
		uint64_t en:1;
#else
		uint64_t en:1;
		uint64_t reserved_1_3:3;
		uint64_t ip_num:2;
		uint64_t reserved_6_7:2;
		uint64_t pp_num:5;
		uint64_t reserved_13_63:51;
#endif
	} s;
	struct cvmx_ciu2_msi_selx_s cn68xx;
	struct cvmx_ciu2_msi_selx_s cn68xxp1;
};

union cvmx_ciu2_msired_ppx_ip2 {
	uint64_t u64;
	struct cvmx_ciu2_msired_ppx_ip2_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_21_63:43;
		uint64_t intr:1;
		uint64_t reserved_17_19:3;
		uint64_t newint:1;
		uint64_t reserved_8_15:8;
		uint64_t msi_num:8;
#else
		uint64_t msi_num:8;
		uint64_t reserved_8_15:8;
		uint64_t newint:1;
		uint64_t reserved_17_19:3;
		uint64_t intr:1;
		uint64_t reserved_21_63:43;
#endif
	} s;
	struct cvmx_ciu2_msired_ppx_ip2_s cn68xx;
	struct cvmx_ciu2_msired_ppx_ip2_s cn68xxp1;
};

union cvmx_ciu2_msired_ppx_ip3 {
	uint64_t u64;
	struct cvmx_ciu2_msired_ppx_ip3_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_21_63:43;
		uint64_t intr:1;
		uint64_t reserved_17_19:3;
		uint64_t newint:1;
		uint64_t reserved_8_15:8;
		uint64_t msi_num:8;
#else
		uint64_t msi_num:8;
		uint64_t reserved_8_15:8;
		uint64_t newint:1;
		uint64_t reserved_17_19:3;
		uint64_t intr:1;
		uint64_t reserved_21_63:43;
#endif
	} s;
	struct cvmx_ciu2_msired_ppx_ip3_s cn68xx;
	struct cvmx_ciu2_msired_ppx_ip3_s cn68xxp1;
};

union cvmx_ciu2_msired_ppx_ip4 {
	uint64_t u64;
	struct cvmx_ciu2_msired_ppx_ip4_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_21_63:43;
		uint64_t intr:1;
		uint64_t reserved_17_19:3;
		uint64_t newint:1;
		uint64_t reserved_8_15:8;
		uint64_t msi_num:8;
#else
		uint64_t msi_num:8;
		uint64_t reserved_8_15:8;
		uint64_t newint:1;
		uint64_t reserved_17_19:3;
		uint64_t intr:1;
		uint64_t reserved_21_63:43;
#endif
	} s;
	struct cvmx_ciu2_msired_ppx_ip4_s cn68xx;
	struct cvmx_ciu2_msired_ppx_ip4_s cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_gpio {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_gpio_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_gpio_s cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_io {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_io_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_io_s cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_mem {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_mem_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_mem_s cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_mio {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_mio_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_mio_s cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_pkt {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_pkt_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_rml {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_rml_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_wdog {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_wdog_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_wdog_s cn68xxp1;
};

union cvmx_ciu2_raw_iox_int_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_raw_iox_int_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_raw_iox_int_wrkq_s cn68xx;
	struct cvmx_ciu2_raw_iox_int_wrkq_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_gpio {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_gpio_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_gpio_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_io {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_io_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_io_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_mem {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_mem_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_mem_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_mio {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_mio_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_mio_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_pkt {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_pkt_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_rml {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_rml_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_wdog {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_wdog_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_wdog_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip2_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip2_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip2_wrkq_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip2_wrkq_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_gpio {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_gpio_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_gpio_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_io {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_io_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_io_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_mem {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_mem_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_mem_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_mio {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_mio_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_mio_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_pkt {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_pkt_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_rml {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_rml_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_wdog {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_wdog_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_wdog_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip3_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip3_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip3_wrkq_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip3_wrkq_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_gpio {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_gpio_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_gpio_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_io {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_io_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_io_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_mem {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_mem_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_mem_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_mio {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_mio_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_mio_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_pkt {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_pkt_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_rml {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_rml_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_wdog {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_wdog_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_wdog_s cn68xxp1;
};

union cvmx_ciu2_raw_ppx_ip4_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_raw_ppx_ip4_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_raw_ppx_ip4_wrkq_s cn68xx;
	struct cvmx_ciu2_raw_ppx_ip4_wrkq_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_gpio {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_gpio_s cn68xx;
	struct cvmx_ciu2_src_iox_int_gpio_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_io {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_io_s cn68xx;
	struct cvmx_ciu2_src_iox_int_io_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_mbox {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_mbox_s cn68xx;
	struct cvmx_ciu2_src_iox_int_mbox_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_mem {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_mem_s cn68xx;
	struct cvmx_ciu2_src_iox_int_mem_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_mio {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_mio_s cn68xx;
	struct cvmx_ciu2_src_iox_int_mio_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_pkt {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_pkt_s cn68xx;
	struct cvmx_ciu2_src_iox_int_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_iox_int_rml {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_rml_s cn68xx;
	struct cvmx_ciu2_src_iox_int_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_iox_int_wdog {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_wdog_s cn68xx;
	struct cvmx_ciu2_src_iox_int_wdog_s cn68xxp1;
};

union cvmx_ciu2_src_iox_int_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_src_iox_int_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_src_iox_int_wrkq_s cn68xx;
	struct cvmx_ciu2_src_iox_int_wrkq_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_gpio {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_gpio_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_gpio_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_io {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_io_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_io_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_mbox {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_mbox_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_mbox_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_mem {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_mem_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_mem_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_mio {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_mio_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_mio_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_pkt {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_pkt_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_rml {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_rml_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_wdog {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_wdog_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_wdog_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip2_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip2_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip2_wrkq_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip2_wrkq_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_gpio {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_gpio_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_gpio_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_io {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_io_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_io_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_mbox {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_mbox_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_mbox_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_mem {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_mem_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_mem_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_mio {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_mio_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_mio_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_pkt {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_pkt_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_rml {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_rml_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_wdog {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_wdog_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_wdog_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip3_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip3_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip3_wrkq_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip3_wrkq_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_gpio {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_gpio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_16_63:48;
		uint64_t gpio:16;
#else
		uint64_t gpio:16;
		uint64_t reserved_16_63:48;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_gpio_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_gpio_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_io {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_io_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_34_63:30;
		uint64_t pem:2;
		uint64_t reserved_18_31:14;
		uint64_t pci_inta:2;
		uint64_t reserved_13_15:3;
		uint64_t msired:1;
		uint64_t pci_msi:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_intr:4;
#else
		uint64_t pci_intr:4;
		uint64_t reserved_4_7:4;
		uint64_t pci_msi:4;
		uint64_t msired:1;
		uint64_t reserved_13_15:3;
		uint64_t pci_inta:2;
		uint64_t reserved_18_31:14;
		uint64_t pem:2;
		uint64_t reserved_34_63:30;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_io_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_io_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_mbox {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_mbox_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t mbox:4;
#else
		uint64_t mbox:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_mbox_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_mbox_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_mem {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_mem_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_4_63:60;
		uint64_t lmc:4;
#else
		uint64_t lmc:4;
		uint64_t reserved_4_63:60;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_mem_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_mem_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_mio {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_mio_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t rst:1;
		uint64_t reserved_49_62:14;
		uint64_t ptp:1;
		uint64_t reserved_45_47:3;
		uint64_t usb_hci:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_uctl:1;
		uint64_t reserved_38_39:2;
		uint64_t uart:2;
		uint64_t reserved_34_35:2;
		uint64_t twsi:2;
		uint64_t reserved_19_31:13;
		uint64_t bootdma:1;
		uint64_t mio:1;
		uint64_t nand:1;
		uint64_t reserved_12_15:4;
		uint64_t timer:4;
		uint64_t reserved_3_7:5;
		uint64_t ipd_drp:1;
		uint64_t ssoiq:1;
		uint64_t ipdppthr:1;
#else
		uint64_t ipdppthr:1;
		uint64_t ssoiq:1;
		uint64_t ipd_drp:1;
		uint64_t reserved_3_7:5;
		uint64_t timer:4;
		uint64_t reserved_12_15:4;
		uint64_t nand:1;
		uint64_t mio:1;
		uint64_t bootdma:1;
		uint64_t reserved_19_31:13;
		uint64_t twsi:2;
		uint64_t reserved_34_35:2;
		uint64_t uart:2;
		uint64_t reserved_38_39:2;
		uint64_t usb_uctl:1;
		uint64_t reserved_41_43:3;
		uint64_t usb_hci:1;
		uint64_t reserved_45_47:3;
		uint64_t ptp:1;
		uint64_t reserved_49_62:14;
		uint64_t rst:1;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_mio_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_mio_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_pkt {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_pkt_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_54_63:10;
		uint64_t ilk_drp:2;
		uint64_t reserved_49_51:3;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_51:3;
		uint64_t ilk_drp:2;
		uint64_t reserved_54_63:10;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_pkt_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_pkt_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_49_63:15;
		uint64_t ilk:1;
		uint64_t reserved_41_47:7;
		uint64_t mii:1;
		uint64_t reserved_33_39:7;
		uint64_t agl:1;
		uint64_t reserved_13_31:19;
		uint64_t gmx_drp:5;
		uint64_t reserved_5_7:3;
		uint64_t agx:5;
#else
		uint64_t agx:5;
		uint64_t reserved_5_7:3;
		uint64_t gmx_drp:5;
		uint64_t reserved_13_31:19;
		uint64_t agl:1;
		uint64_t reserved_33_39:7;
		uint64_t mii:1;
		uint64_t reserved_41_47:7;
		uint64_t ilk:1;
		uint64_t reserved_49_63:15;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_rml {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_rml_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_37_39:3;
		uint64_t dpi_dma:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_35:2;
		uint64_t dpi_dma:1;
		uint64_t reserved_37_39:3;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_rml_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_rml_cn68xxp1 {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_56_63:8;
		uint64_t trace:4;
		uint64_t reserved_49_51:3;
		uint64_t l2c:1;
		uint64_t reserved_41_47:7;
		uint64_t dfa:1;
		uint64_t reserved_34_39:6;
		uint64_t dpi:1;
		uint64_t sli:1;
		uint64_t reserved_31_31:1;
		uint64_t key:1;
		uint64_t rad:1;
		uint64_t tim:1;
		uint64_t reserved_25_27:3;
		uint64_t zip:1;
		uint64_t reserved_17_23:7;
		uint64_t sso:1;
		uint64_t reserved_8_15:8;
		uint64_t pko:1;
		uint64_t pip:1;
		uint64_t ipd:1;
		uint64_t fpa:1;
		uint64_t reserved_1_3:3;
		uint64_t iob:1;
#else
		uint64_t iob:1;
		uint64_t reserved_1_3:3;
		uint64_t fpa:1;
		uint64_t ipd:1;
		uint64_t pip:1;
		uint64_t pko:1;
		uint64_t reserved_8_15:8;
		uint64_t sso:1;
		uint64_t reserved_17_23:7;
		uint64_t zip:1;
		uint64_t reserved_25_27:3;
		uint64_t tim:1;
		uint64_t rad:1;
		uint64_t key:1;
		uint64_t reserved_31_31:1;
		uint64_t sli:1;
		uint64_t dpi:1;
		uint64_t reserved_34_39:6;
		uint64_t dfa:1;
		uint64_t reserved_41_47:7;
		uint64_t l2c:1;
		uint64_t reserved_49_51:3;
		uint64_t trace:4;
		uint64_t reserved_56_63:8;
#endif
	} cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_wdog {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_wdog_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t reserved_32_63:32;
		uint64_t wdog:32;
#else
		uint64_t wdog:32;
		uint64_t reserved_32_63:32;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_wdog_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_wdog_s cn68xxp1;
};

union cvmx_ciu2_src_ppx_ip4_wrkq {
	uint64_t u64;
	struct cvmx_ciu2_src_ppx_ip4_wrkq_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t workq:64;
#else
		uint64_t workq:64;
#endif
	} s;
	struct cvmx_ciu2_src_ppx_ip4_wrkq_s cn68xx;
	struct cvmx_ciu2_src_ppx_ip4_wrkq_s cn68xxp1;
};

union cvmx_ciu2_sum_iox_int {
	uint64_t u64;
	struct cvmx_ciu2_sum_iox_int_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t mbox:4;
		uint64_t reserved_8_59:52;
		uint64_t gpio:1;
		uint64_t pkt:1;
		uint64_t mem:1;
		uint64_t io:1;
		uint64_t mio:1;
		uint64_t rml:1;
		uint64_t wdog:1;
		uint64_t workq:1;
#else
		uint64_t workq:1;
		uint64_t wdog:1;
		uint64_t rml:1;
		uint64_t mio:1;
		uint64_t io:1;
		uint64_t mem:1;
		uint64_t pkt:1;
		uint64_t gpio:1;
		uint64_t reserved_8_59:52;
		uint64_t mbox:4;
#endif
	} s;
	struct cvmx_ciu2_sum_iox_int_s cn68xx;
	struct cvmx_ciu2_sum_iox_int_s cn68xxp1;
};

union cvmx_ciu2_sum_ppx_ip2 {
	uint64_t u64;
	struct cvmx_ciu2_sum_ppx_ip2_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t mbox:4;
		uint64_t reserved_8_59:52;
		uint64_t gpio:1;
		uint64_t pkt:1;
		uint64_t mem:1;
		uint64_t io:1;
		uint64_t mio:1;
		uint64_t rml:1;
		uint64_t wdog:1;
		uint64_t workq:1;
#else
		uint64_t workq:1;
		uint64_t wdog:1;
		uint64_t rml:1;
		uint64_t mio:1;
		uint64_t io:1;
		uint64_t mem:1;
		uint64_t pkt:1;
		uint64_t gpio:1;
		uint64_t reserved_8_59:52;
		uint64_t mbox:4;
#endif
	} s;
	struct cvmx_ciu2_sum_ppx_ip2_s cn68xx;
	struct cvmx_ciu2_sum_ppx_ip2_s cn68xxp1;
};

union cvmx_ciu2_sum_ppx_ip3 {
	uint64_t u64;
	struct cvmx_ciu2_sum_ppx_ip3_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t mbox:4;
		uint64_t reserved_8_59:52;
		uint64_t gpio:1;
		uint64_t pkt:1;
		uint64_t mem:1;
		uint64_t io:1;
		uint64_t mio:1;
		uint64_t rml:1;
		uint64_t wdog:1;
		uint64_t workq:1;
#else
		uint64_t workq:1;
		uint64_t wdog:1;
		uint64_t rml:1;
		uint64_t mio:1;
		uint64_t io:1;
		uint64_t mem:1;
		uint64_t pkt:1;
		uint64_t gpio:1;
		uint64_t reserved_8_59:52;
		uint64_t mbox:4;
#endif
	} s;
	struct cvmx_ciu2_sum_ppx_ip3_s cn68xx;
	struct cvmx_ciu2_sum_ppx_ip3_s cn68xxp1;
};

union cvmx_ciu2_sum_ppx_ip4 {
	uint64_t u64;
	struct cvmx_ciu2_sum_ppx_ip4_s {
#ifdef __BIG_ENDIAN_BITFIELD
		uint64_t mbox:4;
		uint64_t reserved_8_59:52;
		uint64_t gpio:1;
		uint64_t pkt:1;
		uint64_t mem:1;
		uint64_t io:1;
		uint64_t mio:1;
		uint64_t rml:1;
		uint64_t wdog:1;
		uint64_t workq:1;
#else
		uint64_t workq:1;
		uint64_t wdog:1;
		uint64_t rml:1;
		uint64_t mio:1;
		uint64_t io:1;
		uint64_t mem:1;
		uint64_t pkt:1;
		uint64_t gpio:1;
		uint64_t reserved_8_59:52;
		uint64_t mbox:4;
#endif
	} s;
	struct cvmx_ciu2_sum_ppx_ip4_s cn68xx;
	struct cvmx_ciu2_sum_ppx_ip4_s cn68xxp1;
};

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*
 * IEEE 802.11 defines
 *
 * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
 * <jkmaline@cc.hut.fi>
 * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
 * Copyright (c) 2005, Devicescape Software, Inc.
 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>
 * Copyright (c) 2013 - 2014 Intel Mobile Communications GmbH
 * Copyright (c) 2016 Intel Deutschland GmbH
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef LINUX_IEEE80211_H
#define LINUX_IEEE80211_H

#include <linux/types.h>
#include <linux/if_ether.h>
#include <linux/etherdevice.h>
#include <asm/byteorder.h>
#include <asm/unaligned.h>

/*
 * DS bit usage
 *
 * TA = transmitter address
 * RA = receiver address
 * DA = destination address
 * SA = source address
 *
 * ToDS    FromDS  A1(RA)  A2(TA)  A3      A4      Use
 * -----------------------------------------------------------------
 *  0       0       DA      SA      BSSID   -       IBSS/DLS
 *  0       1       DA      BSSID   SA      -       AP -> STA
 *  1       0       BSSID   SA      DA      -       AP <- STA
 *  1       1       RA      TA      DA      SA      unspecified (WDS)
 */

#define FCS_LEN 4

#define IEEE80211_FCTL_VERS		0x0003
#define IEEE80211_FCTL_FTYPE		0x000c
#define IEEE80211_FCTL_STYPE		0x00f0
#define IEEE80211_FCTL_TODS		0x0100
#define IEEE80211_FCTL_FROMDS		0x0200
#define IEEE80211_FCTL_MOREFRAGS	0x0400
#define IEEE80211_FCTL_RETRY		0x0800
#define IEEE80211_FCTL_PM		0x1000
#define IEEE80211_FCTL_MOREDATA		0x2000
#define IEEE80211_FCTL_PROTECTED	0x4000
#define IEEE80211_FCTL_ORDER		0x8000
#define IEEE80211_FCTL_CTL_EXT		0x0f00

#define IEEE80211_SCTL_FRAG		0x000F
#define IEEE80211_SCTL_SEQ		0xFFF0

#define IEEE80211_FTYPE_MGMT		0x0000
#define IEEE80211_FTYPE_CTL		0x0004
#define IEEE80211_FTYPE_DATA		0x0008
#define IEEE80211_FTYPE_EXT		0x000c

/* management */
#define IEEE80211_STYPE_ASSOC_REQ	0x0000
#define IEEE80211_STYPE_ASSOC_RESP	0x0010
#define IEEE80211_STYPE_REASSOC_REQ	0x0020
#define IEEE80211_STYPE_REASSOC_RESP	0x0030
#define IEEE80211_STYPE_PROBE_REQ	0x0040
#define IEEE80211_STYPE_PROBE_RESP	0x0050
#define IEEE80211_STYPE_BEACON		0x0080
#define IEEE80211_STYPE_ATIM		0x0090
#define IEEE80211_STYPE_DISASSOC	0x00A0
#define IEEE80211_STYPE_AUTH		0x00B0
#define IEEE80211_STYPE_DEAUTH		0x00C0
#define IEEE80211_STYPE_ACTION		0x00D0

/* control */
#define IEEE80211_STYPE_CTL_EXT		0x0060
#define IEEE80211_STYPE_BACK_REQ	0x0080
#define IEEE80211_STYPE_BACK		0x0090
#define IEEE80211_STYPE_PSPOLL		0x00A0
#define IEEE80211_STYPE_RTS		0x00B0
#define IEEE80211_STYPE_CTS		0x00C0
#define IEEE80211_STYPE_ACK		0x00D0
#define IEEE80211_STYPE_CFEND		0x00E0
#define IEEE80211_STYPE_CFENDACK	0x00F0

/* data */
#define IEEE80211_STYPE_DATA			0x0000
#define IEEE80211_STYPE_DATA_CFACK		0x0010
#define IEEE80211_STYPE_DATA_CFPOLL		0x0020
#define IEEE80211_STYPE_DATA_CFACKPOLL		0x0030
#define IEEE80211_STYPE_NULLFUNC		0x0040
#define IEEE80211_STYPE_CFACK			0x0050
#define IEEE80211_STYPE_CFPOLL			0x0060
#define IEEE80211_STYPE_CFACKPOLL		0x0070
#define IEEE80211_STYPE_QOS_DATA		0x0080
#define IEEE80211_STYPE_QOS_DATA_CFACK		0x0090
#define IEEE80211_STYPE_QOS_DATA_CFPOLL		0x00A0
#define IEEE80211_STYPE_QOS_DATA_CFACKPOLL	0x00B0
#define IEEE80211_STYPE_QOS_NULLFUNC		0x00C0
#define IEEE80211_STYPE_QOS_CFACK		0x00D0
#define IEEE80211_STYPE_QOS_CFPOLL		0x00E0
#define IEEE80211_STYPE_QOS_CFACKPOLL		0x00F0

/* extension, added by 802.11ad */
#define IEEE80211_STYPE_DMG_BEACON		0x0000

/* control extension - for IEEE80211_FTYPE_CTL | IEEE80211_STYPE_CTL_EXT */
#define IEEE80211_CTL_EXT_POLL		0x2000
#define IEEE80211_CTL_EXT_SPR		0x3000
#define IEEE80211_CTL_EXT_GRANT	0x4000
#define IEEE80211_CTL_EXT_DMG_CTS	0x5000
#define IEEE80211_CTL_EXT_DMG_DTS	0x6000
#define IEEE80211_CTL_EXT_SSW		0x8000
#define IEEE80211_CTL_EXT_SSW_FBACK	0x9000
#define IEEE80211_CTL_EXT_SSW_ACK	0xa000


#define IEEE80211_SN_MASK		((IEEE80211_SCTL_SEQ) >> 4)
#define IEEE80211_MAX_SN		IEEE80211_SN_MASK
#define IEEE80211_SN_MODULO		(IEEE80211_MAX_SN + 1)

static inline bool ieee80211_sn_less(u16 sn1, u16 sn2)
{
	return ((sn1 - sn2) & IEEE80211_SN_MASK) > (IEEE80211_SN_MODULO >> 1);
}

static inline u16 ieee80211_sn_add(u16 sn1, u16 sn2)
{
	return (sn1 + sn2) & IEEE80211_SN_MASK;
}

static inline u16 ieee80211_sn_inc(u16 sn)
{
	return ieee80211_sn_add(sn, 1);
}

static inline u16 ieee80211_sn_sub(u16 sn1, u16 sn2)
{
	return (sn1 - sn2) & IEEE80211_SN_MASK;
}

#define IEEE80211_SEQ_TO_SN(seq)	(((seq) & IEEE80211_SCTL_SEQ) >> 4)
#define IEEE80211_SN_TO_SEQ(ssn)	(((ssn) << 4) & IEEE80211_SCTL_SEQ)

/* miscellaneous IEEE 802.11 constants */
#define IEEE80211_MAX_FRAG_THRESHOLD	2352
#define IEEE80211_MAX_RTS_THRESHOLD	2353
#define IEEE80211_MAX_AID		2007
#define IEEE80211_MAX_TIM_LEN		251
#define IEEE80211_MAX_MESH_PEERINGS	63
/* Maximum size for the MA-UNITDATA primitive, 802.11 standard section
   6.2.1.1.2.

   802.11e clarifies the figure in section 7.1.2. The frame body is
   up to 2304 octets long (maximum MSDU size) plus any crypt overhead. */
#define IEEE80211_MAX_DATA_LEN		2304
/* 802.11ad extends maximum MSDU size for DMG (freq > 40Ghz) networks
 * to 7920 bytes, see 8.2.3 General frame format
 */
#define IEEE80211_MAX_DATA_LEN_DMG	7920
/* 30 byte 4 addr hdr, 2 byte QoS, 2304 byte MSDU, 12 byte crypt, 4 byte FCS */
#define IEEE80211_MAX_FRAME_LEN		2352

/* Maximal size of an A-MSDU that can be transported in a HT BA session */
#define IEEE80211_MAX_MPDU_LEN_HT_BA		4095

/* Maximal size of an A-MSDU */
#define IEEE80211_MAX_MPDU_LEN_HT_3839		3839
#define IEEE80211_MAX_MPDU_LEN_HT_7935		7935

#define IEEE80211_MAX_MPDU_LEN_VHT_3895		3895
#define IEEE80211_MAX_MPDU_LEN_VHT_7991		7991
#define IEEE80211_MAX_MPDU_LEN_VHT_11454	11454

#define IEEE80211_MAX_SSID_LEN		32

#define IEEE80211_MAX_MESH_ID_LEN	32

#define IEEE80211_FIRST_TSPEC_TSID	8
#define IEEE80211_NUM_TIDS		16

/* number of user priorities 802.11 uses */
#define IEEE80211_NUM_UPS		8

#define IEEE80211_QOS_CTL_LEN		2
/* 1d tag mask */
#define IEEE80211_QOS_CTL_TAG1D_MASK		0x0007
/* TID mask */
#define IEEE80211_QOS_CTL_TID_MASK		0x000f
/* EOSP */
#define IEEE80211_QOS_CTL_EOSP			0x0010
/* ACK policy */
#define IEEE80211_QOS_CTL_ACK_POLICY_NORMAL	0x0000
#define IEEE80211_QOS_CTL_ACK_POLICY_NOACK	0x0020
#define IEEE80211_QOS_CTL_ACK_POLICY_NO_EXPL	0x0040
#define IEEE80211_QOS_CTL_ACK_POLICY_BLOCKACK	0x0060
#define IEEE80211_QOS_CTL_ACK_POLICY_MASK	0x0060
/* A-MSDU 802.11n */
#define IEEE80211_QOS_CTL_A_MSDU_PRESENT	0x0080
/* Mesh Control 802.11s */
#define IEEE80211_QOS_CTL_MESH_CONTROL_PRESENT  0x0100

/* Mesh Power Save Level */
#define IEEE80211_QOS_CTL_MESH_PS_LEVEL		0x0200
/* Mesh Receiver Service Period Initiated */
#define IEEE80211_QOS_CTL_RSPI			0x0400

/* U-APSD queue for WMM IEs sent by AP */
#define IEEE80211_WMM_IE_AP_QOSINFO_UAPSD	(1<<7)
#define IEEE80211_WMM_IE_AP_QOSINFO_PARAM_SET_CNT_MASK	0x0f

/* U-APSD queues for WMM IEs sent by STA */
#define IEEE80211_WMM_IE_STA_QOSINFO_AC_VO	(1<<0)
#define IEEE80211_WMM_IE_STA_QOSINFO_AC_VI	(1<<1)
#define IEEE80211_WMM_IE_STA_QOSINFO_AC_BK	(1<<2)
#define IEEE80211_WMM_IE_STA_QOSINFO_AC_BE	(1<<3)
#define IEEE80211_WMM_IE_STA_QOSINFO_AC_MASK	0x0f

/* U-APSD max SP length for WMM IEs sent by STA */
#define IEEE80211_WMM_IE_STA_QOSINFO_SP_ALL	0x00
#define IEEE80211_WMM_IE_STA_QOSINFO_SP_2	0x01
#define IEEE80211_WMM_IE_STA_QOSINFO_SP_4	0x02
#define IEEE80211_WMM_IE_STA_QOSINFO_SP_6	0x03
#define IEEE80211_WMM_IE_STA_QOSINFO_SP_MASK	0x03
#define IEEE80211_WMM_IE_STA_QOSINFO_SP_SHIFT	5

#define IEEE80211_HT_CTL_LEN		4

struct ieee80211_hdr {
	__le16 frame_control;
	__le16 duration_id;
	u8 addr1[ETH_ALEN];
	u8 addr2[ETH_ALEN];
	u8 addr3[ETH_ALEN];
	__le16 seq_ctrl;
	u8 addr4[ETH_ALEN];
} __packed __aligned(2);

struct ieee80211_hdr_3addr {
	__le16 frame_control;
	__le16 duration_id;
	u8 addr1[ETH_ALEN];
	u8 addr2[ETH_ALEN];
	u8 addr3[ETH_ALEN];
	__le16 seq_ctrl;
} __packed __aligned(2);

struct ieee80211_qos_hdr {
	__le16 frame_control;
	__le16 duration_id;
	u8 addr1[ETH_ALEN];
	u8 addr2[ETH_ALEN];
	u8 addr3[ETH_ALEN];
	__le16 seq_ctrl;
	__le16 qos_ctrl;
} __packed __aligned(2);

/**
 * ieee80211_has_tods - check if IEEE80211_FCTL_TODS is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_tods(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_TODS)) != 0;
}

/**
 * ieee80211_has_fromds - check if IEEE80211_FCTL_FROMDS is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_fromds(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FROMDS)) != 0;
}

/**
 * ieee80211_has_a4 - check if IEEE80211_FCTL_TODS and IEEE80211_FCTL_FROMDS are set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_a4(__le16 fc)
{
	__le16 tmp = cpu_to_le16(IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS);
	return (fc & tmp) == tmp;
}

/**
 * ieee80211_has_morefrags - check if IEEE80211_FCTL_MOREFRAGS is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_morefrags(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_MOREFRAGS)) != 0;
}

/**
 * ieee80211_has_retry - check if IEEE80211_FCTL_RETRY is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_retry(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_RETRY)) != 0;
}

/**
 * ieee80211_has_pm - check if IEEE80211_FCTL_PM is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_pm(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_PM)) != 0;
}

/**
 * ieee80211_has_moredata - check if IEEE80211_FCTL_MOREDATA is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_moredata(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_MOREDATA)) != 0;
}

/**
 * ieee80211_has_protected - check if IEEE80211_FCTL_PROTECTED is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_protected(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_PROTECTED)) != 0;
}

/**
 * ieee80211_has_order - check if IEEE80211_FCTL_ORDER is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_has_order(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_ORDER)) != 0;
}

/**
 * ieee80211_is_mgmt - check if type is IEEE80211_FTYPE_MGMT
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_mgmt(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT);
}

/**
 * ieee80211_is_ctl - check if type is IEEE80211_FTYPE_CTL
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_ctl(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL);
}

/**
 * ieee80211_is_data - check if type is IEEE80211_FTYPE_DATA
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_data(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_DATA);
}

/**
 * ieee80211_is_data_qos - check if type is IEEE80211_FTYPE_DATA and IEEE80211_STYPE_QOS_DATA is set
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_data_qos(__le16 fc)
{
	/*
	 * mask with QOS_DATA rather than IEEE80211_FCTL_STYPE as we just need
	 * to check the one bit
	 */
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_STYPE_QOS_DATA)) ==
	       cpu_to_le16(IEEE80211_FTYPE_DATA | IEEE80211_STYPE_QOS_DATA);
}

/**
 * ieee80211_is_data_present - check if type is IEEE80211_FTYPE_DATA and has data
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_data_present(__le16 fc)
{
	/*
	 * mask with 0x40 and test that that bit is clear to only return true
	 * for the data-containing substypes.
	 */
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | 0x40)) ==
	       cpu_to_le16(IEEE80211_FTYPE_DATA);
}

/**
 * ieee80211_is_assoc_req - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ASSOC_REQ
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_assoc_req(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_ASSOC_REQ);
}

/**
 * ieee80211_is_assoc_resp - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ASSOC_RESP
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_assoc_resp(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_ASSOC_RESP);
}

/**
 * ieee80211_is_reassoc_req - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_REASSOC_REQ
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_reassoc_req(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_REASSOC_REQ);
}

/**
 * ieee80211_is_reassoc_resp - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_REASSOC_RESP
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_reassoc_resp(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_REASSOC_RESP);
}

/**
 * ieee80211_is_probe_req - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_PROBE_REQ
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_probe_req(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_PROBE_REQ);
}

/**
 * ieee80211_is_probe_resp - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_PROBE_RESP
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_probe_resp(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_PROBE_RESP);
}

/**
 * ieee80211_is_beacon - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_BEACON
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_beacon(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_BEACON);
}

/**
 * ieee80211_is_atim - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ATIM
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_atim(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_ATIM);
}

/**
 * ieee80211_is_disassoc - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_DISASSOC
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_disassoc(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_DISASSOC);
}

/**
 * ieee80211_is_auth - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_AUTH
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_auth(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_AUTH);
}

/**
 * ieee80211_is_deauth - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_DEAUTH
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_deauth(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_DEAUTH);
}

/**
 * ieee80211_is_action - check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ACTION
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_action(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_MGMT | IEEE80211_STYPE_ACTION);
}

/**
 * ieee80211_is_back_req - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_BACK_REQ
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_back_req(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_BACK_REQ);
}

/**
 * ieee80211_is_back - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_BACK
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_back(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_BACK);
}

/**
 * ieee80211_is_pspoll - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_PSPOLL
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_pspoll(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_PSPOLL);
}

/**
 * ieee80211_is_rts - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_RTS
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_rts(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_RTS);
}

/**
 * ieee80211_is_cts - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_CTS
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_cts(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_CTS);
}

/**
 * ieee80211_is_ack - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_ACK
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_ack(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_ACK);
}

/**
 * ieee80211_is_cfend - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_CFEND
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_cfend(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_CFEND);
}

/**
 * ieee80211_is_cfendack - check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_CFENDACK
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_cfendack(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_CTL | IEEE80211_STYPE_CFENDACK);
}

/**
 * ieee80211_is_nullfunc - check if frame is a regular (non-QoS) nullfunc frame
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_nullfunc(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_DATA | IEEE80211_STYPE_NULLFUNC);
}

/**
 * ieee80211_is_qos_nullfunc - check if frame is a QoS nullfunc frame
 * @fc: frame control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_qos_nullfunc(__le16 fc)
{
	return (fc & cpu_to_le16(IEEE80211_FCTL_FTYPE | IEEE80211_FCTL_STYPE)) ==
	       cpu_to_le16(IEEE80211_FTYPE_DATA | IEEE80211_STYPE_QOS_NULLFUNC);
}

/**
 * ieee80211_is_bufferable_mmpdu - check if frame is bufferable MMPDU
 * @fc: frame control field in little-endian byteorder
 */
static inline bool ieee80211_is_bufferable_mmpdu(__le16 fc)
{
	/* IEEE 802.11-2012, definition of "bufferable management frame";
	 * note that this ignores the IBSS special case. */
	return ieee80211_is_mgmt(fc) &&
	       (ieee80211_is_action(fc) ||
		ieee80211_is_disassoc(fc) ||
		ieee80211_is_deauth(fc));
}

/**
 * ieee80211_is_first_frag - check if IEEE80211_SCTL_FRAG is not set
 * @seq_ctrl: frame sequence control bytes in little-endian byteorder
 */
static inline bool ieee80211_is_first_frag(__le16 seq_ctrl)
{
	return (seq_ctrl & cpu_to_le16(IEEE80211_SCTL_FRAG)) == 0;
}

/**
 * ieee80211_is_frag - check if a frame is a fragment
 * @hdr: 802.11 header of the frame
 */
static inline bool ieee80211_is_frag(struct ieee80211_hdr *hdr)
{
	return ieee80211_has_morefrags(hdr->frame_control) ||
	       hdr->seq_ctrl & cpu_to_le16(IEEE80211_SCTL_FRAG);
}

struct ieee80211s_hdr {
	u8 flags;
	u8 ttl;
	__le32 seqnum;
	u8 eaddr1[ETH_ALEN];
	u8 eaddr2[ETH_ALEN];
} __packed __aligned(2);

/* Mesh flags */
#define MESH_FLAGS_AE_A4 	0x1
#define MESH_FLAGS_AE_A5_A6	0x2
#define MESH_FLAGS_AE		0x3
#define MESH_FLAGS_PS_DEEP	0x4

/**
 * enum ieee80211_preq_flags - mesh PREQ element flags
 *
 * @IEEE80211_PREQ_PROACTIVE_PREP_FLAG: proactive PREP subfield
 */
enum ieee80211_preq_flags {
	IEEE80211_PREQ_PROACTIVE_PREP_FLAG	= 1<<2,
};

/**
 * enum ieee80211_preq_target_flags - mesh PREQ element per target flags
 *
 * @IEEE80211_PREQ_TO_FLAG: target only subfield
 * @IEEE80211_PREQ_USN_FLAG: unknown target HWMP sequence number subfield
 */
enum ieee80211_preq_target_flags {
	IEEE80211_PREQ_TO_FLAG	= 1<<0,
	IEEE80211_PREQ_USN_FLAG	= 1<<2,
};

/**
 * struct ieee80211_quiet_ie
 *
 * This structure refers to "Quiet information element"
 */
struct ieee80211_quiet_ie {
	u8 count;
	u8 period;
	__le16 duration;
	__le16 offset;
} __packed;

/**
 * struct ieee80211_msrment_ie
 *
 * This structure refers to "Measurement Request/Report information element"
 */
struct ieee80211_msrment_ie {
	u8 token;
	u8 mode;
	u8 type;
	u8 request[0];
} __packed;

/**
 * struct ieee80211_channel_sw_ie
 *
 * This structure refers to "Channel Switch Announcement information element"
 */
struct ieee80211_channel_sw_ie {
	u8 mode;
	u8 new_ch_num;
	u8 count;
} __packed;

/**
 * struct ieee80211_ext_chansw_ie
 *
 * This structure represents the "Extended Channel Switch Announcement element"
 */
struct ieee80211_ext_chansw_ie {
	u8 mode;
	u8 new_operating_class;
	u8 new_ch_num;
	u8 count;
} __packed;

/**
 * struct ieee80211_sec_chan_offs_ie - secondary channel offset IE
 * @sec_chan_offs: secondary channel offset, uses IEEE80211_HT_PARAM_CHA_SEC_*
 *	values here
 * This structure represents the "Secondary Channel Offset element"
 */
struct ieee80211_sec_chan_offs_ie {
	u8 sec_chan_offs;
} __packed;

/**
 * struct ieee80211_mesh_chansw_params_ie - mesh channel switch parameters IE
 *
 * This structure represents the "Mesh Channel Switch Paramters element"
 */
struct ieee80211_mesh_chansw_params_ie {
	u8 mesh_ttl;
	u8 mesh_flags;
	__le16 mesh_reason;
	__le16 mesh_pre_value;
} __packed;

/**
 * struct ieee80211_wide_bw_chansw_ie - wide bandwidth channel switch IE
 */
struct ieee80211_wide_bw_chansw_ie {
	u8 new_channel_width;
	u8 new_center_freq_seg0, new_center_freq_seg1;
} __packed;

/**
 * struct ieee80211_tim
 *
 * This structure refers to "Traffic Indication Map information element"
 */
struct ieee80211_tim_ie {
	u8 dtim_count;
	u8 dtim_period;
	u8 bitmap_ctrl;
	/* variable size: 1 - 251 bytes */
	u8 virtual_map[1];
} __packed;

/**
 * struct ieee80211_meshconf_ie
 *
 * This structure refers to "Mesh Configuration information element"
 */
struct ieee80211_meshconf_ie {
	u8 meshconf_psel;
	u8 meshconf_pmetric;
	u8 meshconf_congest;
	u8 meshconf_synch;
	u8 meshconf_auth;
	u8 meshconf_form;
	u8 meshconf_cap;
} __packed;

/**
 * enum mesh_config_capab_flags - Mesh Configuration IE capability field flags
 *
 * @IEEE80211_MESHCONF_CAPAB_ACCEPT_PLINKS: STA is willing to establish
 *	additional mesh peerings with other mesh STAs
 * @IEEE80211_MESHCONF_CAPAB_FORWARDING: the STA forwards MSDUs
 * @IEEE80211_MESHCONF_CAPAB_TBTT_ADJUSTING: TBTT adjustment procedure
 *	is ongoing
 * @IEEE80211_MESHCONF_CAPAB_POWER_SAVE_LEVEL: STA is in deep sleep mode or has
 *	neighbors in deep sleep mode
 */
enum mesh_config_capab_flags {
	IEEE80211_MESHCONF_CAPAB_ACCEPT_PLINKS		= 0x01,
	IEEE80211_MESHCONF_CAPAB_FORWARDING		= 0x08,
	IEEE80211_MESHCONF_CAPAB_TBTT_ADJUSTING		= 0x20,
	IEEE80211_MESHCONF_CAPAB_POWER_SAVE_LEVEL	= 0x40,
};

/**
 * mesh channel switch parameters element's flag indicator
 *
 */
#define WLAN_EID_CHAN_SWITCH_PARAM_TX_RESTRICT BIT(0)
#define WLAN_EID_CHAN_SWITCH_PARAM_INITIATOR BIT(1)
#define WLAN_EID_CHAN_SWITCH_PARAM_REASON BIT(2)

/**
 * struct ieee80211_rann_ie
 *
 * This structure refers to "Root Announcement information element"
 */
struct ieee80211_rann_ie {
	u8 rann_flags;
	u8 rann_hopcount;
	u8 rann_ttl;
	u8 rann_addr[ETH_ALEN];
	__le32 rann_seq;
	__le32 rann_interval;
	__le32 rann_metric;
} __packed;

enum ieee80211_rann_flags {
	RANN_FLAG_IS_GATE = 1 << 0,
};

enum ieee80211_ht_chanwidth_values {
	IEEE80211_HT_CHANWIDTH_20MHZ = 0,
	IEEE80211_HT_CHANWIDTH_ANY = 1,
};

/**
 * enum ieee80211_opmode_bits - VHT operating mode field bits
 * @IEEE80211_OPMODE_NOTIF_CHANWIDTH_MASK: channel width mask
 * @IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ: 20 MHz channel width
 * @IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ: 40 MHz channel width
 * @IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ: 80 MHz channel width
 * @IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ: 160 MHz or 80+80 MHz channel width
 * @IEEE80211_OPMODE_NOTIF_RX_NSS_MASK: number of spatial streams mask
 *	(the NSS value is the value of this field + 1)
 * @IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT: number of spatial streams shift
 * @IEEE80211_OPMODE_NOTIF_RX_NSS_TYPE_BF: indicates streams in SU-MIMO PPDU
 *	using a beamforming steering matrix
 */
enum ieee80211_vht_opmode_bits {
	IEEE80211_OPMODE_NOTIF_CHANWIDTH_MASK	= 3,
	IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ	= 0,
	IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ	= 1,
	IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ	= 2,
	IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ	= 3,
	IEEE80211_OPMODE_NOTIF_RX_NSS_MASK	= 0x70,
	IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT	= 4,
	IEEE80211_OPMODE_NOTIF_RX_NSS_TYPE_BF	= 0x80,
};

#define WLAN_SA_QUERY_TR_ID_LEN 2
#define WLAN_MEMBERSHIP_LEN 8
#define WLAN_USER_POSITION_LEN 16

/**
 * struct ieee80211_tpc_report_ie
 *
 * This structure refers to "TPC Report element"
 */
struct ieee80211_tpc_report_ie {
	u8 tx_power;
	u8 link_margin;
} __packed;

struct ieee80211_mgmt {
	__le16 frame_control;
	__le16 duration;
	u8 da[ETH_ALEN];
	u8 sa[ETH_ALEN];
	u8 bssid[ETH_ALEN];
	__le16 seq_ctrl;
	union {
		struct {
			__le16 auth_alg;
			__le16 auth_transaction;
			__le16 status_code;
			/* possibly followed by Challenge text */
			u8 variable[0];
		} __packed auth;
		struct {
			__le16 reason_code;
		} __packed deauth;
		struct {
			__le16 capab_info;
			__le16 listen_interval;
			/* followed by SSID and Supported rates */
			u8 variable[0];
		} __packed assoc_req;
		struct {
			__le16 capab_info;
			__le16 status_code;
			__le16 aid;
			/* followed by Supported rates */
			u8 variable[0];
		} __packed assoc_resp, reassoc_resp;
		struct {
			__le16 capab_info;
			__le16 listen_interval;
			u8 current_ap[ETH_ALEN];
			/* followed by SSID and Supported rates */
			u8 variable[0];
		} __packed reassoc_req;
		struct {
			__le16 reason_code;
		} __packed disassoc;
		struct {
			__le64 timestamp;
			__le16 beacon_int;
			__le16 capab_info;
			/* followed by some of SSID, Supported rates,
			 * FH Params, DS Params, CF Params, IBSS Params, TIM */
			u8 variable[0];
		} __packed beacon;
		struct {
			/* only variable items: SSID, Supported rates */
			u8 variable[0];
		} __packed probe_req;
		struct {
			__le64 timestamp;
			__le16 beacon_int;
			__le16 capab_info;
			/* followed by some of SSID, Supported rates,
			 * FH Params, DS Params, CF Params, IBSS Params */
			u8 variable[0];
		} __packed probe_resp;
		struct {
			u8 category;
			union {
				struct {
					u8 action_code;
					u8 dialog_token;
					u8 status_code;
					u8 variable[0];
				} __packed wme_action;
				struct{
					u8 action_code;
					u8 variable[0];
				} __packed chan_switch;
				struct{
					u8 action_code;
					struct ieee80211_ext_chansw_ie data;
					u8 variable[0];
				} __packed ext_chan_switch;
				struct{
					u8 action_code;
					u8 dialog_token;
					u8 element_id;
					u8 length;
					struct ieee80211_msrment_ie msr_elem;
				} __packed measurement;
				struct{
					u8 action_code;
					u8 dialog_token;
					__le16 capab;
					__le16 timeout;
					__le16 start_seq_num;
				} __packed addba_req;
				struct{
					u8 action_code;
					u8 dialog_token;
					__le16 status;
					__le16 capab;
					__le16 timeout;
				} __packed addba_resp;
				struct{
					u8 action_code;
					__le16 params;
					__le16 reason_code;
				} __packed delba;
				struct {
					u8 action_code;
					u8 variable[0];
				} __packed self_prot;
				struct{
					u8 action_code;
					u8 variable[0];
				} __packed mesh_action;
				struct {
					u8 action;
					u8 trans_id[WLAN_SA_QUERY_TR_ID_LEN];
				} __packed sa_query;
				struct {
					u8 action;
					u8 smps_control;
				} __packed ht_smps;
				struct {
					u8 action_code;
					u8 chanwidth;
				} __packed ht_notify_cw;
				struct {
					u8 action_code;
					u8 dialog_token;
					__le16 capability;
					u8 variable[0];
				} __packed tdls_discover_resp;
				struct {
					u8 action_code;
					u8 operating_mode;
				} __packed vht_opmode_notif;
				struct {
					u8 action_code;
					u8 membership[WLAN_MEMBERSHIP_LEN];
					u8 position[WLAN_USER_POSITION_LEN];
				} __packed vht_group_notif;
				struct {
					u8 action_code;
					u8 dialog_token;
					u8 tpc_elem_id;
					u8 tpc_elem_length;
					struct ieee80211_tpc_report_ie tpc;
				} __packed tpc_report;
				struct {
					u8 action_code;
					u8 dialog_token;
					u8 follow_up;
					u8 tod[6];
					u8 toa[6];
					__le16 tod_error;
					__le16 toa_error;
					u8 variable[0];
				} __packed ftm;
			} u;
		} __packed action;
	} u;
} __packed __aligned(2);

/* Supported Rates value encodings in 802.11n-2009 7.3.2.2 */
#define BSS_MEMBERSHIP_SELECTOR_HT_PHY	127

/* mgmt header + 1 byte category code */
#define IEEE80211_MIN_ACTION_SIZE offsetof(struct ieee80211_mgmt, u.action.u)


/* Management MIC information element (IEEE 802.11w) */
struct ieee80211_mmie {
	u8 element_id;
	u8 length;
	__le16 key_id;
	u8 sequence_number[6];
	u8 mic[8];
} __packed;

/* Management MIC information element (IEEE 802.11w) for GMAC and CMAC-256 */
struct ieee80211_mmie_16 {
	u8 element_id;
	u8 length;
	__le16 key_id;
	u8 sequence_number[6];
	u8 mic[16];
} __packed;

struct ieee80211_vendor_ie {
	u8 element_id;
	u8 len;
	u8 oui[3];
	u8 oui_type;
} __packed;

struct ieee80211_wmm_ac_param {
	u8 aci_aifsn; /* AIFSN, ACM, ACI */
	u8 cw; /* ECWmin, ECWmax (CW = 2^ECW - 1) */
	__le16 txop_limit;
} __packed;

struct ieee80211_wmm_param_ie {
	u8 element_id; /* Element ID: 221 (0xdd); */
	u8 len; /* Length: 24 */
	/* required fields for WMM version 1 */
	u8 oui[3]; /* 00:50:f2 */
	u8 oui_type; /* 2 */
	u8 oui_subtype; /* 1 */
	u8 version; /* 1 for WMM version 1.0 */
	u8 qos_info; /* AP/STA specific QoS info */
	u8 reserved; /* 0 */
	/* AC_BE, AC_BK, AC_VI, AC_VO */
	struct ieee80211_wmm_ac_param ac[4];
} __packed;

/* Control frames */
struct ieee80211_rts {
	__le16 frame_control;
	__le16 duration;
	u8 ra[ETH_ALEN];
	u8 ta[ETH_ALEN];
} __packed __aligned(2);

struct ieee80211_cts {
	__le16 frame_control;
	__le16 duration;
	u8 ra[ETH_ALEN];
} __packed __aligned(2);

struct ieee80211_pspoll {
	__le16 frame_control;
	__le16 aid;
	u8 bssid[ETH_ALEN];
	u8 ta[ETH_ALEN];
} __packed __aligned(2);

/* TDLS */

/* Channel switch timing */
struct ieee80211_ch_switch_timing {
	__le16 switch_time;
	__le16 switch_timeout;
} __packed;

/* Link-id information element */
struct ieee80211_tdls_lnkie {
	u8 ie_type; /* Link Identifier IE */
	u8 ie_len;
	u8 bssid[ETH_ALEN];
	u8 init_sta[ETH_ALEN];
	u8 resp_sta[ETH_ALEN];
} __packed;

struct ieee80211_tdls_data {
	u8 da[ETH_ALEN];
	u8 sa[ETH_ALEN];
	__be16 ether_type;
	u8 payload_type;
	u8 category;
	u8 action_code;
	union {
		struct {
			u8 dialog_token;
			__le16 capability;
			u8 variable[0];
		} __packed setup_req;
		struct {
			__le16 status_code;
			u8 dialog_token;
			__le16 capability;
			u8 variable[0];
		} __packed setup_resp;
		struct {
			__le16 status_code;
			u8 dialog_token;
			u8 variable[0];
		} __packed setup_cfm;
		struct {
			__le16 reason_code;
			u8 variable[0];
		} __packed teardown;
		struct {
			u8 dialog_token;
			u8 variable[0];
		} __packed discover_req;
		struct {
			u8 target_channel;
			u8 oper_class;
			u8 variable[0];
		} __packed chan_switch_req;
		struct {
			__le16 status_code;
			u8 variable[0];
		} __packed chan_switch_resp;
	} u;
} __packed;

/*
 * Peer-to-Peer IE attribute related definitions.
 */
/**
 * enum ieee80211_p2p_attr_id - identifies type of peer-to-peer attribute.
 */
enum ieee80211_p2p_attr_id {
	IEEE80211_P2P_ATTR_STATUS = 0,
	IEEE80211_P2P_ATTR_MINOR_REASON,
	IEEE80211_P2P_ATTR_CAPABILITY,
	IEEE80211_P2P_ATTR_DEVICE_ID,
	IEEE80211_P2P_ATTR_GO_INTENT,
	IEEE80211_P2P_ATTR_GO_CONFIG_TIMEOUT,
	IEEE80211_P2P_ATTR_LISTEN_CHANNEL,
	IEEE80211_P2P_ATTR_GROUP_BSSID,
	IEEE80211_P2P_ATTR_EXT_LISTEN_TIMING,
	IEEE80211_P2P_ATTR_INTENDED_IFACE_ADDR,
	IEEE80211_P2P_ATTR_MANAGABILITY,
	IEEE80211_P2P_ATTR_CHANNEL_LIST,
	IEEE80211_P2P_ATTR_ABSENCE_NOTICE,
	IEEE80211_P2P_ATTR_DEVICE_INFO,
	IEEE80211_P2P_ATTR_GROUP_INFO,
	IEEE80211_P2P_ATTR_GROUP_ID,
	IEEE80211_P2P_ATTR_INTERFACE,
	IEEE80211_P2P_ATTR_OPER_CHANNEL,
	IEEE80211_P2P_ATTR_INVITE_FLAGS,
	/* 19 - 220: Reserved */
	IEEE80211_P2P_ATTR_VENDOR_SPECIFIC = 221,

	IEEE80211_P2P_ATTR_MAX
};

/* Notice of Absence attribute - described in P2P spec 4.1.14 */
/* Typical max value used here */
#define IEEE80211_P2P_NOA_DESC_MAX	4

struct ieee80211_p2p_noa_desc {
	u8 count;
	__le32 duration;
	__le32 interval;
	__le32 start_time;
} __packed;

struct ieee80211_p2p_noa_attr {
	u8 index;
	u8 oppps_ctwindow;
	struct ieee80211_p2p_noa_desc desc[IEEE80211_P2P_NOA_DESC_MAX];
} __packed;

#define IEEE80211_P2P_OPPPS_ENABLE_BIT		BIT(7)
#define IEEE80211_P2P_OPPPS_CTWINDOW_MASK	0x7F

/**
 * struct ieee80211_bar - HT Block Ack Request
 *
 * This structure refers to "HT BlockAckReq" as
 * described in 802.11n draft section 7.2.1.7.1
 */
struct ieee80211_bar {
	__le16 frame_control;
	__le16 duration;
	__u8 ra[ETH_ALEN];
	__u8 ta[ETH_ALEN];
	__le16 control;
	__le16 start_seq_num;
} __packed;

/* 802.11 BAR control masks */
#define IEEE80211_BAR_CTRL_ACK_POLICY_NORMAL	0x0000
#define IEEE80211_BAR_CTRL_MULTI_TID		0x0002
#define IEEE80211_BAR_CTRL_CBMTID_COMPRESSED_BA	0x0004
#define IEEE80211_BAR_CTRL_TID_INFO_MASK	0xf000
#define IEEE80211_BAR_CTRL_TID_INFO_SHIFT	12

#define IEEE80211_HT_MCS_MASK_LEN		10

/**
 * struct ieee80211_mcs_info - MCS information
 * @rx_mask: RX mask
 * @rx_highest: highest supported RX rate. If set represents
 *	the highest supported RX data rate in units of 1 Mbps.
 *	If this field is 0 this value should not be used to
 *	consider the highest RX data rate supported.
 * @tx_params: TX parameters
 */
struct ieee80211_mcs_info {
	u8 rx_mask[IEEE80211_HT_MCS_MASK_LEN];
	__le16 rx_highest;
	u8 tx_params;
	u8 reserved[3];
} __packed;

/* 802.11n HT capability MSC set */
#define IEEE80211_HT_MCS_RX_HIGHEST_MASK	0x3ff
#define IEEE80211_HT_MCS_TX_DEFINED		0x01
#define IEEE80211_HT_MCS_TX_RX_DIFF		0x02
/* value 0 == 1 stream etc */
#define IEEE80211_HT_MCS_TX_MAX_STREAMS_MASK	0x0C
#define IEEE80211_HT_MCS_TX_MAX_STREAMS_SHIFT	2
#define		IEEE80211_HT_MCS_TX_MAX_STREAMS	4
#define IEEE80211_HT_MCS_TX_UNEQUAL_MODULATION	0x10

/*
 * 802.11n D5.0 20.3.5 / 20.6 says:
 * - indices 0 to 7 and 32 are single spatial stream
 * - 8 to 31 are multiple spatial streams using equal modulation
 *   [8..15 for two streams, 16..23 for three and 24..31 for four]
 * - remainder are multiple spatial streams using unequal modulation
 */
#define IEEE80211_HT_MCS_UNEQUAL_MODULATION_START 33
#define IEEE80211_HT_MCS_UNEQUAL_MODULATION_START_BYTE \
	(IEEE80211_HT_MCS_UNEQUAL_MODULATION_START / 8)

/**
 * struct ieee80211_ht_cap - HT capabilities
 *
 * This structure is the "HT capabilities element" as
 * described in 802.11n D5.0 7.3.2.57
 */
struct ieee80211_ht_cap {
	__le16 cap_info;
	u8 ampdu_params_info;

	/* 16 bytes MCS information */
	struct ieee80211_mcs_info mcs;

	__le16 extended_ht_cap_info;
	__le32 tx_BF_cap_info;
	u8 antenna_selection_info;
} __packed;

/* 802.11n HT capabilities masks (for cap_info) */
#define IEEE80211_HT_CAP_LDPC_CODING		0x0001
#define IEEE80211_HT_CAP_SUP_WIDTH_20_40	0x0002
#define IEEE80211_HT_CAP_SM_PS			0x000C
#define		IEEE80211_HT_CAP_SM_PS_SHIFT	2
#define IEEE80211_HT_CAP_GRN_FLD		0x0010
#define IEEE80211_HT_CAP_SGI_20			0x0020
#define IEEE80211_HT_CAP_SGI_40			0x0040
#define IEEE80211_HT_CAP_TX_STBC		0x0080
#define IEEE80211_HT_CAP_RX_STBC		0x0300
#define		IEEE80211_HT_CAP_RX_STBC_SHIFT	8
#define IEEE80211_HT_CAP_DELAY_BA		0x0400
#define IEEE80211_HT_CAP_MAX_AMSDU		0x0800
#define IEEE80211_HT_CAP_DSSSCCK40		0x1000
#define IEEE80211_HT_CAP_RESERVED		0x2000
#define IEEE80211_HT_CAP_40MHZ_INTOLERANT	0x4000
#define IEEE80211_HT_CAP_LSIG_TXOP_PROT		0x8000

/* 802.11n HT extended capabilities masks (for extended_ht_cap_info) */
#define IEEE80211_HT_EXT_CAP_PCO		0x0001
#define IEEE80211_HT_EXT_CAP_PCO_TIME		0x0006
#define		IEEE80211_HT_EXT_CAP_PCO_TIME_SHIFT	1
#define IEEE80211_HT_EXT_CAP_MCS_FB		0x0300
#define		IEEE80211_HT_EXT_CAP_MCS_FB_SHIFT	8
#define IEEE80211_HT_EXT_CAP_HTC_SUP		0x0400
#define IEEE80211_HT_EXT_CAP_RD_RESPONDER	0x0800

/* 802.11n HT capability AMPDU settings (for ampdu_params_info) */
#define IEEE80211_HT_AMPDU_PARM_FACTOR		0x03
#define IEEE80211_HT_AMPDU_PARM_DENSITY		0x1C
#define		IEEE80211_HT_AMPDU_PARM_DENSITY_SHIFT	2

/*
 * Maximum length of AMPDU that the STA can receive in high-throughput (HT).
 * Length = 2 ^ (13 + max_ampdu_length_exp) - 1 (octets)
 */
enum ieee80211_max_ampdu_length_exp {
	IEEE80211_HT_MAX_AMPDU_8K = 0,
	IEEE80211_HT_MAX_AMPDU_16K = 1,
	IEEE80211_HT_MAX_AMPDU_32K = 2,
	IEEE80211_HT_MAX_AMPDU_64K = 3
};

/*
 * Maximum length of AMPDU that the STA can receive in VHT.
 * Length = 2 ^ (13 + max_ampdu_length_exp) - 1 (octets)
 */
enum ieee80211_vht_max_ampdu_length_exp {
	IEEE80211_VHT_MAX_AMPDU_8K = 0,
	IEEE80211_VHT_MAX_AMPDU_16K = 1,
	IEEE80211_VHT_MAX_AMPDU_32K = 2,
	IEEE80211_VHT_MAX_AMPDU_64K = 3,
	IEEE80211_VHT_MAX_AMPDU_128K = 4,
	IEEE80211_VHT_MAX_AMPDU_256K = 5,
	IEEE80211_VHT_MAX_AMPDU_512K = 6,
	IEEE80211_VHT_MAX_AMPDU_1024K = 7
};

#define IEEE80211_HT_MAX_AMPDU_FACTOR 13

/* Minimum MPDU start spacing */
enum ieee80211_min_mpdu_spacing {
	IEEE80211_HT_MPDU_DENSITY_NONE = 0,	/* No restriction */
	IEEE80211_HT_MPDU_DENSITY_0_25 = 1,	/* 1/4 usec */
	IEEE80211_HT_MPDU_DENSITY_0_5 = 2,	/* 1/2 usec */
	IEEE80211_HT_MPDU_DENSITY_1 = 3,	/* 1 usec */
	IEEE80211_HT_MPDU_DENSITY_2 = 4,	/* 2 usec */
	IEEE80211_HT_MPDU_DENSITY_4 = 5,	/* 4 usec */
	IEEE80211_HT_MPDU_DENSITY_8 = 6,	/* 8 usec */
	IEEE80211_HT_MPDU_DENSITY_16 = 7	/* 16 usec */
};

/**
 * struct ieee80211_ht_operation - HT operation IE
 *
 * This structure is the "HT operation element" as
 * described in 802.11n-2009 7.3.2.57
 */
struct ieee80211_ht_operation {
	u8 primary_chan;
	u8 ht_param;
	__le16 operation_mode;
	__le16 stbc_param;
	u8 basic_set[16];
} __packed;

/* for ht_param */
#define IEEE80211_HT_PARAM_CHA_SEC_OFFSET		0x03
#define		IEEE80211_HT_PARAM_CHA_SEC_NONE		0x00
#define		IEEE80211_HT_PARAM_CHA_SEC_ABOVE	0x01
#define		IEEE80211_HT_PARAM_CHA_SEC_BELOW	0x03
#define IEEE80211_HT_PARAM_CHAN_WIDTH_ANY		0x04
#define IEEE80211_HT_PARAM_RIFS_MODE			0x08

/* for operation_mode */
#define IEEE80211_HT_OP_MODE_PROTECTION			0x0003
#define		IEEE80211_HT_OP_MODE_PROTECTION_NONE		0
#define		IEEE80211_HT_OP_MODE_PROTECTION_NONMEMBER	1
#define		IEEE80211_HT_OP_MODE_PROTECTION_20MHZ		2
#define		IEEE80211_HT_OP_MODE_PROTECTION_NONHT_MIXED	3
#define IEEE80211_HT_OP_MODE_NON_GF_STA_PRSNT		0x0004
#define IEEE80211_HT_OP_MODE_NON_HT_STA_PRSNT		0x0010

/* for stbc_param */
#define IEEE80211_HT_STBC_PARAM_DUAL_BEACON		0x0040
#define IEEE80211_HT_STBC_PARAM_DUAL_CTS_PROT		0x0080
#define IEEE80211_HT_STBC_PARAM_STBC_BEACON		0x0100
#define IEEE80211_HT_STBC_PARAM_LSIG_TXOP_FULLPROT	0x0200
#define IEEE80211_HT_STBC_PARAM_PCO_ACTIVE		0x0400
#define IEEE80211_HT_STBC_PARAM_PCO_PHASE		0x0800


/* block-ack parameters */
#define IEEE80211_ADDBA_PARAM_AMSDU_MASK 0x0001
#define IEEE80211_ADDBA_PARAM_POLICY_MASK 0x0002
#define IEEE80211_ADDBA_PARAM_TID_MASK 0x003C
#define IEEE80211_ADDBA_PARAM_BUF_SIZE_MASK 0xFFC0
#define IEEE80211_DELBA_PARAM_TID_MASK 0xF000
#define IEEE80211_DELBA_PARAM_INITIATOR_MASK 0x0800

/*
 * A-PMDU buffer sizes
 * According to IEEE802.11n spec size varies from 8K to 64K (in powers of 2)
 */
#define IEEE80211_MIN_AMPDU_BUF 0x8
#define IEEE80211_MAX_AMPDU_BUF 0x40


/* Spatial Multiplexing Power Save Modes (for capability) */
#define WLAN_HT_CAP_SM_PS_STATIC	0
#define WLAN_HT_CAP_SM_PS_DYNAMIC	1
#define WLAN_HT_CAP_SM_PS_INVALID	2
#define WLAN_HT_CAP_SM_PS_DISABLED	3

/* for SM power control field lower two bits */
#define WLAN_HT_SMPS_CONTROL_DISABLED	0
#define WLAN_HT_SMPS_CONTROL_STATIC	1
#define WLAN_HT_SMPS_CONTROL_DYNAMIC	3

/**
 * struct ieee80211_vht_mcs_info - VHT MCS information
 * @rx_mcs_map: RX MCS map 2 bits for each stream, total 8 streams
 * @rx_highest: Indicates highest long GI VHT PPDU data rate
 *	STA can receive. Rate expressed in units of 1 Mbps.
 *	If this field is 0 this value should not be used to
 *	consider the highest RX data rate supported.
 *	The top 3 bits of this field are reserved.
 * @tx_mcs_map: TX MCS map 2 bits for each stream, total 8 streams
 * @tx_highest: Indicates highest long GI VHT PPDU data rate
 *	STA can transmit. Rate expressed in units of 1 Mbps.
 *	If this field is 0 this value should not be used to
 *	consider the highest TX data rate supported.
 *	The top 3 bits of this field are reserved.
 */
struct ieee80211_vht_mcs_info {
	__le16 rx_mcs_map;
	__le16 rx_highest;
	__le16 tx_mcs_map;
	__le16 tx_highest;
} __packed;

/**
 * enum ieee80211_vht_mcs_support - VHT MCS support definitions
 * @IEEE80211_VHT_MCS_SUPPORT_0_7: MCSes 0-7 are supported for the
 *	number of streams
 * @IEEE80211_VHT_MCS_SUPPORT_0_8: MCSes 0-8 are supported
 * @IEEE80211_VHT_MCS_SUPPORT_0_9: MCSes 0-9 are supported
 * @IEEE80211_VHT_MCS_NOT_SUPPORTED: This number of streams isn't supported
 *
 * These definitions are used in each 2-bit subfield of the @rx_mcs_map
 * and @tx_mcs_map fields of &struct ieee80211_vht_mcs_info, which are
 * both split into 8 subfields by number of streams. These values indicate
 * which MCSes are supported for the number of streams the value appears
 * for.
 */
enum ieee80211_vht_mcs_support {
	IEEE80211_VHT_MCS_SUPPORT_0_7	= 0,
	IEEE80211_VHT_MCS_SUPPORT_0_8	= 1,
	IEEE80211_VHT_MCS_SUPPORT_0_9	= 2,
	IEEE80211_VHT_MCS_NOT_SUPPORTED	= 3,
};

/**
 * struct ieee80211_vht_cap - VHT capabilities
 *
 * This structure is the "VHT capabilities element" as
 * described in 802.11ac D3.0 8.4.2.160
 * @vht_cap_info: VHT capability info
 * @supp_mcs: VHT MCS supported rates
 */
struct ieee80211_vht_cap {
	__le32 vht_cap_info;
	struct ieee80211_vht_mcs_info supp_mcs;
} __packed;

/**
 * enum ieee80211_vht_chanwidth - VHT channel width
 * @IEEE80211_VHT_CHANWIDTH_USE_HT: use the HT operation IE to
 *	determine the channel width (20 or 40 MHz)
 * @IEEE80211_VHT_CHANWIDTH_80MHZ: 80 MHz bandwidth
 * @IEEE80211_VHT_CHANWIDTH_160MHZ: 160 MHz bandwidth
 * @IEEE80211_VHT_CHANWIDTH_80P80MHZ: 80+80 MHz bandwidth
 */
enum ieee80211_vht_chanwidth {
	IEEE80211_VHT_CHANWIDTH_USE_HT		= 0,
	IEEE80211_VHT_CHANWIDTH_80MHZ		= 1,
	IEEE80211_VHT_CHANWIDTH_160MHZ		= 2,
	IEEE80211_VHT_CHANWIDTH_80P80MHZ	= 3,
};

/**
 * struct ieee80211_vht_operation - VHT operation IE
 *
 * This structure is the "VHT operation element" as
 * described in 802.11ac D3.0 8.4.2.161
 * @chan_width: Operating channel width
 * @center_freq_seg1_idx: center freq segment 1 index
 * @center_freq_seg2_idx: center freq segment 2 index
 * @basic_mcs_set: VHT Basic MCS rate set
 */
struct ieee80211_vht_operation {
	u8 chan_width;
	u8 center_freq_seg1_idx;
	u8 center_freq_seg2_idx;
	__le16 basic_mcs_set;
} __packed;


/* 802.11ac VHT Capabilities */
#define IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_3895			0x00000000
#define IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_7991			0x00000001
#define IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_11454			0x00000002
#define IEEE80211_VHT_CAP_MAX_MPDU_MASK				0x00000003
#define IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ		0x00000004
#define IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ	0x00000008
#define IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK			0x0000000C
#define IEEE80211_VHT_CAP_RXLDPC				0x00000010
#define IEEE80211_VHT_CAP_SHORT_GI_80				0x00000020
#define IEEE80211_VHT_CAP_SHORT_GI_160				0x00000040
#define IEEE80211_VHT_CAP_TXSTBC				0x00000080
#define IEEE80211_VHT_CAP_RXSTBC_1				0x00000100
#define IEEE80211_VHT_CAP_RXSTBC_2				0x00000200
#define IEEE80211_VHT_CAP_RXSTBC_3				0x00000300
#define IEEE80211_VHT_CAP_RXSTBC_4				0x00000400
#define IEEE80211_VHT_CAP_RXSTBC_MASK				0x00000700
#define IEEE80211_VHT_CAP_SU_BEAMFORMER_CAPABLE			0x00000800
#define IEEE80211_VHT_CAP_SU_BEAMFORMEE_CAPABLE			0x00001000
#define IEEE80211_VHT_CAP_BEAMFORMEE_STS_SHIFT                  13
#define IEEE80211_VHT_CAP_BEAMFORMEE_STS_MASK			\
		(7 << IEEE80211_VHT_CAP_BEAMFORMEE_STS_SHIFT)
#define IEEE80211_VHT_CAP_SOUNDING_DIMENSIONS_SHIFT		16
#define IEEE80211_VHT_CAP_SOUNDING_DIMENSIONS_MASK		\
		(7 << IEEE80211_VHT_CAP_SOUNDING_DIMENSIONS_SHIFT)
#define IEEE80211_VHT_CAP_MU_BEAMFORMER_CAPABLE			0x00080000
#define IEEE80211_VHT_CAP_MU_BEAMFORMEE_CAPABLE			0x00100000
#define IEEE80211_VHT_CAP_VHT_TXOP_PS				0x00200000
#define IEEE80211_VHT_CAP_HTC_VHT				0x00400000
#define IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_SHIFT	23
#define IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MASK	\
		(7 << IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_SHIFT)
#define IEEE80211_VHT_CAP_VHT_LINK_ADAPTATION_VHT_UNSOL_MFB	0x08000000
#define IEEE80211_VHT_CAP_VHT_LINK_ADAPTATION_VHT_MRQ_MFB	0x0c000000
#define IEEE80211_VHT_CAP_RX_ANTENNA_PATTERN			0x10000000
#define IEEE80211_VHT_CAP_TX_ANTENNA_PATTERN			0x20000000

/* Authentication algorithms */
#define WLAN_AUTH_OPEN 0
#define WLAN_AUTH_SHARED_KEY 1
#define WLAN_AUTH_FT 2
#define WLAN_AUTH_SAE 3
#define WLAN_AUTH_LEAP 128

#define WLAN_AUTH_CHALLENGE_LEN 128

#define WLAN_CAPABILITY_ESS		(1<<0)
#define WLAN_CAPABILITY_IBSS		(1<<1)

/*
 * A mesh STA sets the ESS and IBSS capability bits to zero.
 * however, this holds true for p2p probe responses (in the p2p_find
 * phase) as well.
 */
#define WLAN_CAPABILITY_IS_STA_BSS(cap)	\
	(!((cap) & (WLAN_CAPABILITY_ESS | WLAN_CAPABILITY_IBSS)))

#define WLAN_CAPABILITY_CF_POLLABLE	(1<<2)
#define WLAN_CAPABILITY_CF_POLL_REQUEST	(1<<3)
#define WLAN_CAPABILITY_PRIVACY		(1<<4)
#define WLAN_CAPABILITY_SHORT_PREAMBLE	(1<<5)
#define WLAN_CAPABILITY_PBCC		(1<<6)
#define WLAN_CAPABILITY_CHANNEL_AGILITY	(1<<7)

/* 802.11h */
#define WLAN_CAPABILITY_SPECTRUM_MGMT	(1<<8)
#define WLAN_CAPABILITY_QOS		(1<<9)
#define WLAN_CAPABILITY_SHORT_SLOT_TIME	(1<<10)
#define WLAN_CAPABILITY_APSD		(1<<11)
#define WLAN_CAPABILITY_RADIO_MEASURE	(1<<12)
#define WLAN_CAPABILITY_DSSS_OFDM	(1<<13)
#define WLAN_CAPABILITY_DEL_BACK	(1<<14)
#define WLAN_CAPABILITY_IMM_BACK	(1<<15)

/* DMG (60gHz) 802.11ad */
/* type - bits 0..1 */
#define WLAN_CAPABILITY_DMG_TYPE_MASK		(3<<0)
#define WLAN_CAPABILITY_DMG_TYPE_IBSS		(1<<0) /* Tx by: STA */
#define WLAN_CAPABILITY_DMG_TYPE_PBSS		(2<<0) /* Tx by: PCP */
#define WLAN_CAPABILITY_DMG_TYPE_AP		(3<<0) /* Tx by: AP */

#define WLAN_CAPABILITY_DMG_CBAP_ONLY		(1<<2)
#define WLAN_CAPABILITY_DMG_CBAP_SOURCE		(1<<3)
#define WLAN_CAPABILITY_DMG_PRIVACY		(1<<4)
#define WLAN_CAPABILITY_DMG_ECPAC		(1<<5)

#define WLAN_CAPABILITY_DMG_SPECTRUM_MGMT	(1<<8)
#define WLAN_CAPABILITY_DMG_RADIO_MEASURE	(1<<12)

/* measurement */
#define IEEE80211_SPCT_MSR_RPRT_MODE_LATE	(1<<0)
#define IEEE80211_SPCT_MSR_RPRT_MODE_INCAPABLE	(1<<1)
#define IEEE80211_SPCT_MSR_RPRT_MODE_REFUSED	(1<<2)

#define IEEE80211_SPCT_MSR_RPRT_TYPE_BASIC	0
#define IEEE80211_SPCT_MSR_RPRT_TYPE_CCA	1
#define IEEE80211_SPCT_MSR_RPRT_TYPE_RPI	2

/* 802.11g ERP information element */
#define WLAN_ERP_NON_ERP_PRESENT (1<<0)
#define WLAN_ERP_USE_PROTECTION (1<<1)
#define WLAN_ERP_BARKER_PREAMBLE (1<<2)

/* WLAN_ERP_BARKER_PREAMBLE values */
enum {
	WLAN_ERP_PREAMBLE_SHORT = 0,
	WLAN_ERP_PREAMBLE_LONG = 1,
};

/* Band ID, 802.11ad #8.4.1.45 */
enum {
	IEEE80211_BANDID_TV_WS = 0, /* TV white spaces */
	IEEE80211_BANDID_SUB1  = 1, /* Sub-1 GHz (excluding TV white spaces) */
	IEEE80211_BANDID_2G    = 2, /* 2.4 GHz */
	IEEE80211_BANDID_3G    = 3, /* 3.6 GHz */
	IEEE80211_BANDID_5G    = 4, /* 4.9 and 5 GHz */
	IEEE80211_BANDID_60G   = 5, /* 60 GHz */
};

/* Status codes */
enum ieee80211_statuscode {
	WLAN_STATUS_SUCCESS = 0,
	WLAN_STATUS_UNSPECIFIED_FAILURE = 1,
	WLAN_STATUS_CAPS_UNSUPPORTED = 10,
	WLAN_STATUS_REASSOC_NO_ASSOC = 11,
	WLAN_STATUS_ASSOC_DENIED_UNSPEC = 12,
	WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG = 13,
	WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION = 14,
	WLAN_STATUS_CHALLENGE_FAIL = 15,
	WLAN_STATUS_AUTH_TIMEOUT = 16,
	WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA = 17,
	WLAN_STATUS_ASSOC_DENIED_RATES = 18,
	/* 802.11b */
	WLAN_STATUS_ASSOC_DENIED_NOSHORTPREAMBLE = 19,
	WLAN_STATUS_ASSOC_DENIED_NOPBCC = 20,
	WLAN_STATUS_ASSOC_DENIED_NOAGILITY = 21,
	/* 802.11h */
	WLAN_STATUS_ASSOC_DENIED_NOSPECTRUM = 22,
	WLAN_STATUS_ASSOC_REJECTED_BAD_POWER = 23,
	WLAN_STATUS_ASSOC_REJECTED_BAD_SUPP_CHAN = 24,
	/* 802.11g */
	WLAN_STATUS_ASSOC_DENIED_NOSHORTTIME = 25,
	WLAN_STATUS_ASSOC_DENIED_NODSSSOFDM = 26,
	/* 802.11w */
	WLAN_STATUS_ASSOC_REJECTED_TEMPORARILY = 30,
	WLAN_STATUS_ROBUST_MGMT_FRAME_POLICY_VIOLATION = 31,
	/* 802.11i */
	WLAN_STATUS_INVALID_IE = 40,
	WLAN_STATUS_INVALID_GROUP_CIPHER = 41,
	WLAN_STATUS_INVALID_PAIRWISE_CIPHER = 42,
	WLAN_STATUS_INVALID_AKMP = 43,
	WLAN_STATUS_UNSUPP_RSN_VERSION = 44,
	WLAN_STATUS_INVALID_RSN_IE_CAP = 45,
	WLAN_STATUS_CIPHER_SUITE_REJECTED = 46,
	/* 802.11e */
	WLAN_STATUS_UNSPECIFIED_QOS = 32,
	WLAN_STATUS_ASSOC_DENIED_NOBANDWIDTH = 33,
	WLAN_STATUS_ASSOC_DENIED_LOWACK = 34,
	WLAN_STATUS_ASSOC_DENIED_UNSUPP_QOS = 35,
	WLAN_STATUS_REQUEST_DECLINED = 37,
	WLAN_STATUS_INVALID_QOS_PARAM = 38,
	WLAN_STATUS_CHANGE_TSPEC = 39,
	WLAN_STATUS_WAIT_TS_DELAY = 47,
	WLAN_STATUS_NO_DIRECT_LINK = 48,
	WLAN_STATUS_STA_NOT_PRESENT = 49,
	WLAN_STATUS_STA_NOT_QSTA = 50,
	/* 802.11s */
	WLAN_STATUS_ANTI_CLOG_REQUIRED = 76,
	WLAN_STATUS_FCG_NOT_SUPP = 78,
	WLAN_STATUS_STA_NO_TBTT = 78,
	/* 802.11ad */
	WLAN_STATUS_REJECTED_WITH_SUGGESTED_CHANGES = 39,
	WLAN_STATUS_REJECTED_FOR_DELAY_PERIOD = 47,
	WLAN_STATUS_REJECT_WITH_SCHEDULE = 83,
	WLAN_STATUS_PENDING_ADMITTING_FST_SESSION = 86,
	WLAN_STATUS_PERFORMING_FST_NOW = 87,
	WLAN_STATUS_PENDING_GAP_IN_BA_WINDOW = 88,
	WLAN_STATUS_REJECT_U_PID_SETTING = 89,
	WLAN_STATUS_REJECT_DSE_BAND = 96,
	WLAN_STATUS_DENIED_WITH_SUGGESTED_BAND_AND_CHANNEL = 99,
	WLAN_STATUS_DENIED_DUE_TO_SPECTRUM_MANAGEMENT = 103,
};


/* Reason codes */
enum ieee80211_reasoncode {
	WLAN_REASON_UNSPECIFIED = 1,
	WLAN_REASON_PREV_AUTH_NOT_VALID = 2,
	WLAN_REASON_DEAUTH_LEAVING = 3,
	WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY = 4,
	WLAN_REASON_DISASSOC_AP_BUSY = 5,
	WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA = 6,
	WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA = 7,
	WLAN_REASON_DISASSOC_STA_HAS_LEFT = 8,
	WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH = 9,
	/* 802.11h */
	WLAN_REASON_DISASSOC_BAD_POWER = 10,
	WLAN_REASON_DISASSOC_BAD_SUPP_CHAN = 11,
	/* 802.11i */
	WLAN_REASON_INVALID_IE = 13,
	WLAN_REASON_MIC_FAILURE = 14,
	WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT = 15,
	WLAN_REASON_GROUP_KEY_HANDSHAKE_TIMEOUT = 16,
	WLAN_REASON_IE_DIFFERENT = 17,
	WLAN_REASON_INVALID_GROUP_CIPHER = 18,
	WLAN_REASON_INVALID_PAIRWISE_CIPHER = 19,
	WLAN_REASON_INVALID_AKMP = 20,
	WLAN_REASON_UNSUPP_RSN_VERSION = 21,
	WLAN_REASON_INVALID_RSN_IE_CAP = 22,
	WLAN_REASON_IEEE8021X_FAILED = 23,
	WLAN_REASON_CIPHER_SUITE_REJECTED = 24,
	/* TDLS (802.11z) */
	WLAN_REASON_TDLS_TEARDOWN_UNREACHABLE = 25,
	WLAN_REASON_TDLS_TEARDOWN_UNSPECIFIED = 26,
	/* 802.11e */
	WLAN_REASON_DISASSOC_UNSPECIFIED_QOS = 32,
	WLAN_REASON_DISASSOC_QAP_NO_BANDWIDTH = 33,
	WLAN_REASON_DISASSOC_LOW_ACK = 34,
	WLAN_REASON_DISASSOC_QAP_EXCEED_TXOP = 35,
	WLAN_REASON_QSTA_LEAVE_QBSS = 36,
	WLAN_REASON_QSTA_NOT_USE = 37,
	WLAN_REASON_QSTA_REQUIRE_SETUP = 38,
	WLAN_REASON_QSTA_TIMEOUT = 39,
	WLAN_REASON_QSTA_CIPHER_NOT_SUPP = 45,
	/* 802.11s */
	WLAN_REASON_MESH_PEER_CANCELED = 52,
	WLAN_REASON_MESH_MAX_PEERS = 53,
	WLAN_REASON_MESH_CONFIG = 54,
	WLAN_REASON_MESH_CLOSE = 55,
	WLAN_REASON_MESH_MAX_RETRIES = 56,
	WLAN_REASON_MESH_CONFIRM_TIMEOUT = 57,
	WLAN_REASON_MESH_INVALID_GTK = 58,
	WLAN_REASON_MESH_INCONSISTENT_PARAM = 59,
	WLAN_REASON_MESH_INVALID_SECURITY = 60,
	WLAN_REASON_MESH_PATH_ERROR = 61,
	WLAN_REASON_MESH_PATH_NOFORWARD = 62,
	WLAN_REASON_MESH_PATH_DEST_UNREACHABLE = 63,
	WLAN_REASON_MAC_EXISTS_IN_MBSS = 64,
	WLAN_REASON_MESH_CHAN_REGULATORY = 65,
	WLAN_REASON_MESH_CHAN = 66,
};


/* Information Element IDs */
enum ieee80211_eid {
	WLAN_EID_SSID = 0,
	WLAN_EID_SUPP_RATES = 1,
	WLAN_EID_FH_PARAMS = 2, /* reserved now */
	WLAN_EID_DS_PARAMS = 3,
	WLAN_EID_CF_PARAMS = 4,
	WLAN_EID_TIM = 5,
	WLAN_EID_IBSS_PARAMS = 6,
	WLAN_EID_COUNTRY = 7,
	/* 8, 9 reserved */
	WLAN_EID_REQUEST = 10,
	WLAN_EID_QBSS_LOAD = 11,
	WLAN_EID_EDCA_PARAM_SET = 12,
	WLAN_EID_TSPEC = 13,
	WLAN_EID_TCLAS = 14,
	WLAN_EID_SCHEDULE = 15,
	WLAN_EID_CHALLENGE = 16,
	/* 17-31 reserved for challenge text extension */
	WLAN_EID_PWR_CONSTRAINT = 32,
	WLAN_EID_PWR_CAPABILITY = 33,
	WLAN_EID_TPC_REQUEST = 34,
	WLAN_EID_TPC_REPORT = 35,
	WLAN_EID_SUPPORTED_CHANNELS = 36,
	WLAN_EID_CHANNEL_SWITCH = 37,
	WLAN_EID_MEASURE_REQUEST = 38,
	WLAN_EID_MEASURE_REPORT = 39,
	WLAN_EID_QUIET = 40,
	WLAN_EID_IBSS_DFS = 41,
	WLAN_EID_ERP_INFO = 42,
	WLAN_EID_TS_DELAY = 43,
	WLAN_EID_TCLAS_PROCESSING = 44,
	WLAN_EID_HT_CAPABILITY = 45,
	WLAN_EID_QOS_CAPA = 46,
	/* 47 reserved for Broadcom */
	WLAN_EID_RSN = 48,
	WLAN_EID_802_15_COEX = 49,
	WLAN_EID_EXT_SUPP_RATES = 50,
	WLAN_EID_AP_CHAN_REPORT = 51,
	WLAN_EID_NEIGHBOR_REPORT = 52,
	WLAN_EID_RCPI = 53,
	WLAN_EID_MOBILITY_DOMAIN = 54,
	WLAN_EID_FAST_BSS_TRANSITION = 55,
	WLAN_EID_TIMEOUT_INTERVAL = 56,
	WLAN_EID_RIC_DATA = 57,
	WLAN_EID_DSE_REGISTERED_LOCATION = 58,
	WLAN_EID_SUPPORTED_REGULATORY_CLASSES = 59,
	WLAN_EID_EXT_CHANSWITCH_ANN = 60,
	WLAN_EID_HT_OPERATION = 61,
	WLAN_EID_SECONDARY_CHANNEL_OFFSET = 62,
	WLAN_EID_BSS_AVG_ACCESS_DELAY = 63,
	WLAN_EID_ANTENNA_INFO = 64,
	WLAN_EID_RSNI = 65,
	WLAN_EID_MEASUREMENT_PILOT_TX_INFO = 66,
	WLAN_EID_BSS_AVAILABLE_CAPACITY = 67,
	WLAN_EID_BSS_AC_ACCESS_DELAY = 68,
	WLAN_EID_TIME_ADVERTISEMENT = 69,
	WLAN_EID_RRM_ENABLED_CAPABILITIES = 70,
	WLAN_EID_MULTIPLE_BSSID = 71,
	WLAN_EID_BSS_COEX_2040 = 72,
	WLAN_EID_BSS_INTOLERANT_CHL_REPORT = 73,
	WLAN_EID_OVERLAP_BSS_SCAN_PARAM = 74,
	WLAN_EID_RIC_DESCRIPTOR = 75,
	WLAN_EID_MMIE = 76,
	WLAN_EID_ASSOC_COMEBACK_TIME = 77,
	WLAN_EID_EVENT_REQUEST = 78,
	WLAN_EID_EVENT_REPORT = 79,
	WLAN_EID_DIAGNOSTIC_REQUEST = 80,
	WLAN_EID_DIAGNOSTIC_REPORT = 81,
	WLAN_EID_LOCATION_PARAMS = 82,
	WLAN_EID_NON_TX_BSSID_CAP =  83,
	WLAN_EID_SSID_LIST = 84,
	WLAN_EID_MULTI_BSSID_IDX = 85,
	WLAN_EID_FMS_DESCRIPTOR = 86,
	WLAN_EID_FMS_REQUEST = 87,
	WLAN_EID_FMS_RESPONSE = 88,
	WLAN_EID_QOS_TRAFFIC_CAPA = 89,
	WLAN_EID_BSS_MAX_IDLE_PERIOD = 90,
	WLAN_EID_TSF_REQUEST = 91,
	WLAN_EID_TSF_RESPOSNE = 92,
	WLAN_EID_WNM_SLEEP_MODE = 93,
	WLAN_EID_TIM_BCAST_REQ = 94,
	WLAN_EID_TIM_BCAST_RESP = 95,
	WLAN_EID_COLL_IF_REPORT = 96,
	WLAN_EID_CHANNEL_USAGE = 97,
	WLAN_EID_TIME_ZONE = 98,
	WLAN_EID_DMS_REQUEST = 99,
	WLAN_EID_DMS_RESPONSE = 100,
	WLAN_EID_LINK_ID = 101,
	WLAN_EID_WAKEUP_SCHEDUL = 102,
	/* 103 reserved */
	WLAN_EID_CHAN_SWITCH_TIMING = 104,
	WLAN_EID_PTI_CONTROL = 105,
	WLAN_EID_PU_BUFFER_STATUS = 106,
	WLAN_EID_INTERWORKING = 107,
	WLAN_EID_ADVERTISEMENT_PROTOCOL = 108,
	WLAN_EID_EXPEDITED_BW_REQ = 109,
	WLAN_EID_QOS_MAP_SET = 110,
	WLAN_EID_ROAMING_CONSORTIUM = 111,
	WLAN_EID_EMERGENCY_ALERT = 112,
	WLAN_EID_MESH_CONFIG = 113,
	WLAN_EID_MESH_ID = 114,
	WLAN_EID_LINK_METRIC_REPORT = 115,
	WLAN_EID_CONGESTION_NOTIFICATION = 116,
	WLAN_EID_PEER_MGMT = 117,
	WLAN_EID_CHAN_SWITCH_PARAM = 118,
	WLAN_EID_MESH_AWAKE_WINDOW = 119,
	WLAN_EID_BEACON_TIMING = 120,
	WLAN_EID_MCCAOP_SETUP_REQ = 121,
	WLAN_EID_MCCAOP_SETUP_RESP = 122,
	WLAN_EID_MCCAOP_ADVERT = 123,
	WLAN_EID_MCCAOP_TEARDOWN = 124,
	WLAN_EID_GANN = 125,
	WLAN_EID_RANN = 126,
	WLAN_EID_EXT_CAPABILITY = 127,
	/* 128, 129 reserved for Agere */
	WLAN_EID_PREQ = 130,
	WLAN_EID_PREP = 131,
	WLAN_EID_PERR = 132,
	/* 133-136 reserved for Cisco */
	WLAN_EID_PXU = 137,
	WLAN_EID_PXUC = 138,
	WLAN_EID_AUTH_MESH_PEER_EXCH = 139,
	WLAN_EID_MIC = 140,
	WLAN_EID_DESTINATION_URI = 141,
	WLAN_EID_UAPSD_COEX = 142,
	WLAN_EID_WAKEUP_SCHEDULE = 143,
	WLAN_EID_EXT_SCHEDULE = 144,
	WLAN_EID_STA_AVAILABILITY = 145,
	WLAN_EID_DMG_TSPEC = 146,
	WLAN_EID_DMG_AT = 147,
	WLAN_EID_DMG_CAP = 148,
	/* 149 reserved for Cisco */
	WLAN_EID_CISCO_VENDOR_SPECIFIC = 150,
	WLAN_EID_DMG_OPERATION = 151,
	WLAN_EID_DMG_BSS_PARAM_CHANGE = 152,
	WLAN_EID_DMG_BEAM_REFINEMENT = 153,
	WLAN_EID_CHANNEL_MEASURE_FEEDBACK = 154,
	/* 155-156 reserved for Cisco */
	WLAN_EID_AWAKE_WINDOW = 157,
	WLAN_EID_MULTI_BAND = 158,
	WLAN_EID_ADDBA_EXT = 159,
	WLAN_EID_NEXT_PCP_LIST = 160,
	WLAN_EID_PCP_HANDOVER = 161,
	WLAN_EID_DMG_LINK_MARGIN = 162,
	WLAN_EID_SWITCHING_STREAM = 163,
	WLAN_EID_SESSION_TRANSITION = 164,
	WLAN_EID_DYN_TONE_PAIRING_REPORT = 165,
	WLAN_EID_CLUSTER_REPORT = 166,
	WLAN_EID_RELAY_CAP = 167,
	WLAN_EID_RELAY_XFER_PARAM_SET = 168,
	WLAN_EID_BEAM_LINK_MAINT = 169,
	WLAN_EID_MULTIPLE_MAC_ADDR = 170,
	WLAN_EID_U_PID = 171,
	WLAN_EID_DMG_LINK_ADAPT_ACK = 172,
	/* 173 reserved for Symbol */
	WLAN_EID_MCCAOP_ADV_OVERVIEW = 174,
	WLAN_EID_QUIET_PERIOD_REQ = 175,
	/* 176 reserved for Symbol */
	WLAN_EID_QUIET_PERIOD_RESP = 177,
	/* 178-179 reserved for Symbol */
	/* 180 reserved for ISO/IEC 20011 */
	WLAN_EID_EPAC_POLICY = 182,
	WLAN_EID_CLISTER_TIME_OFF = 183,
	WLAN_EID_INTER_AC_PRIO = 184,
	WLAN_EID_SCS_DESCRIPTOR = 185,
	WLAN_EID_QLOAD_REPORT = 186,
	WLAN_EID_HCCA_TXOP_UPDATE_COUNT = 187,
	WLAN_EID_HL_STREAM_ID = 188,
	WLAN_EID_GCR_GROUP_ADDR = 189,
	WLAN_EID_ANTENNA_SECTOR_ID_PATTERN = 190,
	WLAN_EID_VHT_CAPABILITY = 191,
	WLAN_EID_VHT_OPERATION = 192,
	WLAN_EID_EXTENDED_BSS_LOAD = 193,
	WLAN_EID_WIDE_BW_CHANNEL_SWITCH = 194,
	WLAN_EID_VHT_TX_POWER_ENVELOPE = 195,
	WLAN_EID_CHANNEL_SWITCH_WRAPPER = 196,
	WLAN_EID_AID = 197,
	WLAN_EID_QUIET_CHANNEL = 198,
	WLAN_EID_OPMODE_NOTIF = 199,

	WLAN_EID_VENDOR_SPECIFIC = 221,
	WLAN_EID_QOS_PARAMETER = 222,
};

/* Action category code */
enum ieee80211_category {
	WLAN_CATEGORY_SPECTRUM_MGMT = 0,
	WLAN_CATEGORY_QOS = 1,
	WLAN_CATEGORY_DLS = 2,
	WLAN_CATEGORY_BACK = 3,
	WLAN_CATEGORY_PUBLIC = 4,
	WLAN_CATEGORY_RADIO_MEASUREMENT = 5,
	WLAN_CATEGORY_HT = 7,
	WLAN_CATEGORY_SA_QUERY = 8,
	WLAN_CATEGORY_PROTECTED_DUAL_OF_ACTION = 9,
	WLAN_CATEGORY_WNM = 10,
	WLAN_CATEGORY_WNM_UNPROTECTED = 11,
	WLAN_CATEGORY_TDLS = 12,
	WLAN_CATEGORY_MESH_ACTION = 13,
	WLAN_CATEGORY_MULTIHOP_ACTION = 14,
	WLAN_CATEGORY_SELF_PROTECTED = 15,
	WLAN_CATEGORY_DMG = 16,
	WLAN_CATEGORY_WMM = 17,
	WLAN_CATEGORY_FST = 18,
	WLAN_CATEGORY_UNPROT_DMG = 20,
	WLAN_CATEGORY_VHT = 21,
	WLAN_CATEGORY_VENDOR_SPECIFIC_PROTECTED = 126,
	WLAN_CATEGORY_VENDOR_SPECIFIC = 127,
};

/* SPECTRUM_MGMT action code */
enum ieee80211_spectrum_mgmt_actioncode {
	WLAN_ACTION_SPCT_MSR_REQ = 0,
	WLAN_ACTION_SPCT_MSR_RPRT = 1,
	WLAN_ACTION_SPCT_TPC_REQ = 2,
	WLAN_ACTION_SPCT_TPC_RPRT = 3,
	WLAN_ACTION_SPCT_CHL_SWITCH = 4,
};

/* HT action codes */
enum ieee80211_ht_actioncode {
	WLAN_HT_ACTION_NOTIFY_CHANWIDTH = 0,
	WLAN_HT_ACTION_SMPS = 1,
	WLAN_HT_ACTION_PSMP = 2,
	WLAN_HT_ACTION_PCO_PHASE = 3,
	WLAN_HT_ACTION_CSI = 4,
	WLAN_HT_ACTION_NONCOMPRESSED_BF = 5,
	WLAN_HT_ACTION_COMPRESSED_BF = 6,
	WLAN_HT_ACTION_ASEL_IDX_FEEDBACK = 7,
};

/* VHT action codes */
enum ieee80211_vht_actioncode {
	WLAN_VHT_ACTION_COMPRESSED_BF = 0,
	WLAN_VHT_ACTION_GROUPID_MGMT = 1,
	WLAN_VHT_ACTION_OPMODE_NOTIF = 2,
};

/* Self Protected Action codes */
enum ieee80211_self_protected_actioncode {
	WLAN_SP_RESERVED = 0,
	WLAN_SP_MESH_PEERING_OPEN = 1,
	WLAN_SP_MESH_PEERING_CONFIRM = 2,
	WLAN_SP_MESH_PEERING_CLOSE = 3,
	WLAN_SP_MGK_INFORM = 4,
	WLAN_SP_MGK_ACK = 5,
};

/* Mesh action codes */
enum ieee80211_mesh_actioncode {
	WLAN_MESH_ACTION_LINK_METRIC_REPORT,
	WLAN_MESH_ACTION_HWMP_PATH_SELECTION,
	WLAN_MESH_ACTION_GATE_ANNOUNCEMENT,
	WLAN_MESH_ACTION_CONGESTION_CONTROL_NOTIFICATION,
	WLAN_MESH_ACTION_MCCA_SETUP_REQUEST,
	WLAN_MESH_ACTION_MCCA_SETUP_REPLY,
	WLAN_MESH_ACTION_MCCA_ADVERTISEMENT_REQUEST,
	WLAN_MESH_ACTION_MCCA_ADVERTISEMENT,
	WLAN_MESH_ACTION_MCCA_TEARDOWN,
	WLAN_MESH_ACTION_TBTT_ADJUSTMENT_REQUEST,
	WLAN_MESH_ACTION_TBTT_ADJUSTMENT_RESPONSE,
};

/* Security key length */
enum ieee80211_key_len {
	WLAN_KEY_LEN_WEP40 = 5,
	WLAN_KEY_LEN_WEP104 = 13,
	WLAN_KEY_LEN_CCMP = 16,
	WLAN_KEY_LEN_CCMP_256 = 32,
	WLAN_KEY_LEN_TKIP = 32,
	WLAN_KEY_LEN_AES_CMAC = 16,
	WLAN_KEY_LEN_SMS4 = 32,
	WLAN_KEY_LEN_GCMP = 16,
	WLAN_KEY_LEN_GCMP_256 = 32,
	WLAN_KEY_LEN_BIP_CMAC_256 = 32,
	WLAN_KEY_LEN_BIP_GMAC_128 = 16,
	WLAN_KEY_LEN_BIP_GMAC_256 = 32,
};

#define IEEE80211_WEP_IV_LEN		4
#define IEEE80211_WEP_ICV_LEN		4
#define IEEE80211_CCMP_HDR_LEN		8
#define IEEE80211_CCMP_MIC_LEN		8
#define IEEE80211_CCMP_PN_LEN		6
#define IEEE80211_CCMP_256_HDR_LEN	8
#define IEEE80211_CCMP_256_MIC_LEN	16
#define IEEE80211_CCMP_256_PN_LEN	6
#define IEEE80211_TKIP_IV_LEN		8
#define IEEE80211_TKIP_ICV_LEN		4
#define IEEE80211_CMAC_PN_LEN		6
#define IEEE80211_GMAC_PN_LEN		6
#define IEEE80211_GCMP_HDR_LEN		8
#define IEEE80211_GCMP_MIC_LEN		16
#define IEEE80211_GCMP_PN_LEN		6

/* Public action codes */
enum ieee80211_pub_actioncode {
	WLAN_PUB_ACTION_EXT_CHANSW_ANN = 4,
	WLAN_PUB_ACTION_TDLS_DISCOVER_RES = 14,
};

/* TDLS action codes */
enum ieee80211_tdls_actioncode {
	WLAN_TDLS_SETUP_REQUEST = 0,
	WLAN_TDLS_SETUP_RESPONSE = 1,
	WLAN_TDLS_SETUP_CONFIRM = 2,
	WLAN_TDLS_TEARDOWN = 3,
	WLAN_TDLS_PEER_TRAFFIC_INDICATION = 4,
	WLAN_TDLS_CHANNEL_SWITCH_REQUEST = 5,
	WLAN_TDLS_CHANNEL_SWITCH_RESPONSE = 6,
	WLAN_TDLS_PEER_PSM_REQUEST = 7,
	WLAN_TDLS_PEER_PSM_RESPONSE = 8,
	WLAN_TDLS_PEER_TRAFFIC_RESPONSE = 9,
	WLAN_TDLS_DISCOVERY_REQUEST = 10,
};

/* Extended Channel Switching capability to be set in the 1st byte of
 * the @WLAN_EID_EXT_CAPABILITY information element
 */
#define WLAN_EXT_CAPA1_EXT_CHANNEL_SWITCHING	BIT(2)

/* TDLS capabilities in the the 4th byte of @WLAN_EID_EXT_CAPABILITY */
#define WLAN_EXT_CAPA4_TDLS_BUFFER_STA		BIT(4)
#define WLAN_EXT_CAPA4_TDLS_PEER_PSM		BIT(5)
#define WLAN_EXT_CAPA4_TDLS_CHAN_SWITCH		BIT(6)

/* Interworking capabilities are set in 7th bit of 4th byte of the
 * @WLAN_EID_EXT_CAPABILITY information element
 */
#define WLAN_EXT_CAPA4_INTERWORKING_ENABLED	BIT(7)

/*
 * TDLS capabililites to be enabled in the 5th byte of the
 * @WLAN_EID_EXT_CAPABILITY information element
 */
#define WLAN_EXT_CAPA5_TDLS_ENABLED	BIT(5)
#define WLAN_EXT_CAPA5_TDLS_PROHIBITED	BIT(6)
#define WLAN_EXT_CAPA5_TDLS_CH_SW_PROHIBITED	BIT(7)

#define WLAN_EXT_CAPA8_TDLS_WIDE_BW_ENABLED	BIT(5)
#define WLAN_EXT_CAPA8_OPMODE_NOTIF	BIT(6)

/* Defines the maximal number of MSDUs in an A-MSDU. */
#define WLAN_EXT_CAPA8_MAX_MSDU_IN_AMSDU_LSB	BIT(7)
#define WLAN_EXT_CAPA9_MAX_MSDU_IN_AMSDU_MSB	BIT(0)

/*
 * Fine Timing Measurement Initiator - bit 71 of @WLAN_EID_EXT_CAPABILITY
 * information element
 */
#define WLAN_EXT_CAPA9_FTM_INITIATOR	BIT(7)

/* TDLS specific payload type in the LLC/SNAP header */
#define WLAN_TDLS_SNAP_RFTYPE	0x2

/* BSS Coex IE information field bits */
#define WLAN_BSS_COEX_INFORMATION_REQUEST	BIT(0)

/**
 * enum - mesh synchronization method identifier
 *
 * @IEEE80211_SYNC_METHOD_NEIGHBOR_OFFSET: the default synchronization method
 * @IEEE80211_SYNC_METHOD_VENDOR: a vendor specific synchronization method
 *	that will be specified in a vendor specific information element
 */
enum {
	IEEE80211_SYNC_METHOD_NEIGHBOR_OFFSET = 1,
	IEEE80211_SYNC_METHOD_VENDOR = 255,
};

/**
 * enum - mesh path selection protocol identifier
 *
 * @IEEE80211_PATH_PROTOCOL_HWMP: the default path selection protocol
 * @IEEE80211_PATH_PROTOCOL_VENDOR: a vendor specific protocol that will
 *	be specified in a vendor specific information element
 */
enum {
	IEEE80211_PATH_PROTOCOL_HWMP = 1,
	IEEE80211_PATH_PROTOCOL_VENDOR = 255,
};

/**
 * enum - mesh path selection metric identifier
 *
 * @IEEE80211_PATH_METRIC_AIRTIME: the default path selection metric
 * @IEEE80211_PATH_METRIC_VENDOR: a vendor specific metric that will be
 *	specified in a vendor specific information element
 */
enum {
	IEEE80211_PATH_METRIC_AIRTIME = 1,
	IEEE80211_PATH_METRIC_VENDOR = 255,
};

/**
 * enum ieee80211_root_mode_identifier - root mesh STA mode identifier
 *
 * These attribute are used by dot11MeshHWMPRootMode to set root mesh STA mode
 *
 * @IEEE80211_ROOTMODE_NO_ROOT: the mesh STA is not a root mesh STA (default)
 * @IEEE80211_ROOTMODE_ROOT: the mesh STA is a root mesh STA if greater than
 *	this value
 * @IEEE80211_PROACTIVE_PREQ_NO_PREP: the mesh STA is a root mesh STA supports
 *	the proactive PREQ with proactive PREP subfield set to 0
 * @IEEE80211_PROACTIVE_PREQ_WITH_PREP: the mesh STA is a root mesh STA
 *	supports the proactive PREQ with proactive PREP subfield set to 1
 * @IEEE80211_PROACTIVE_RANN: the mesh STA is a root mesh STA supports
 *	the proactive RANN
 */
enum ieee80211_root_mode_identifier {
	IEEE80211_ROOTMODE_NO_ROOT = 0,
	IEEE80211_ROOTMODE_ROOT = 1,
	IEEE80211_PROACTIVE_PREQ_NO_PREP = 2,
	IEEE80211_PROACTIVE_PREQ_WITH_PREP = 3,
	IEEE80211_PROACTIVE_RANN = 4,
};

/*
 * IEEE 802.11-2007 7.3.2.9 Country information element
 *
 * Minimum length is 8 octets, ie len must be evenly
 * divisible by 2
 */

/* Although the spec says 8 I'm seeing 6 in practice */
#define IEEE80211_COUNTRY_IE_MIN_LEN	6

/* The Country String field of the element shall be 3 octets in length */
#define IEEE80211_COUNTRY_STRING_LEN	3

/*
 * For regulatory extension stuff see IEEE 802.11-2007
 * Annex I (page 1141) and Annex J (page 1147). Also
 * review 7.3.2.9.
 *
 * When dot11RegulatoryClassesRequired is true and the
 * first_channel/reg_extension_id is >= 201 then the IE
 * compromises of the 'ext' struct represented below:
 *
 *  - Regulatory extension ID - when generating IE this just needs
 *    to be monotonically increasing for each triplet passed in
 *    the IE
 *  - Regulatory class - index into set of rules
 *  - Coverage class - index into air propagation time (Table 7-27),
 *    in microseconds, you can compute the air propagation time from
 *    the index by multiplying by 3, so index 10 yields a propagation
 *    of 10 us. Valid values are 0-31, values 32-255 are not defined
 *    yet. A value of 0 inicates air propagation of <= 1 us.
 *
 *  See also Table I.2 for Emission limit sets and table
 *  I.3 for Behavior limit sets. Table J.1 indicates how to map
 *  a reg_class to an emission limit set and behavior limit set.
 */
#define IEEE80211_COUNTRY_EXTENSION_ID 201

/*
 *  Channels numbers in the IE must be monotonically increasing
 *  if dot11RegulatoryClassesRequired is not true.
 *
 *  If dot11RegulatoryClassesRequired is true consecutive
 *  subband triplets following a regulatory triplet shall
 *  have monotonically increasing first_channel number fields.
 *
 *  Channel numbers shall not overlap.
 *
 *  Note that max_power is signed.
 */
struct ieee80211_country_ie_triplet {
	union {
		struct {
			u8 first_channel;
			u8 num_channels;
			s8 max_power;
		} __packed chans;
		struct {
			u8 reg_extension_id;
			u8 reg_class;
			u8 coverage_class;
		} __packed ext;
	};
} __packed;

enum ieee80211_timeout_interval_type {
	WLAN_TIMEOUT_REASSOC_DEADLINE = 1 /* 802.11r */,
	WLAN_TIMEOUT_KEY_LIFETIME = 2 /* 802.11r */,
	WLAN_TIMEOUT_ASSOC_COMEBACK = 3 /* 802.11w */,
};

/**
 * struct ieee80211_timeout_interval_ie - Timeout Interval element
 * @type: type, see &enum ieee80211_timeout_interval_type
 * @value: timeout interval value
 */
struct ieee80211_timeout_interval_ie {
	u8 type;
	__le32 value;
} __packed;

/* BACK action code */
enum ieee80211_back_actioncode {
	WLAN_ACTION_ADDBA_REQ = 0,
	WLAN_ACTION_ADDBA_RESP = 1,
	WLAN_ACTION_DELBA = 2,
};

/* BACK (block-ack) parties */
enum ieee80211_back_parties {
	WLAN_BACK_RECIPIENT = 0,
	WLAN_BACK_INITIATOR = 1,
};

/* SA Query action */
enum ieee80211_sa_query_action {
	WLAN_ACTION_SA_QUERY_REQUEST = 0,
	WLAN_ACTION_SA_QUERY_RESPONSE = 1,
};


/* cipher suite selectors */
#define WLAN_CIPHER_SUITE_USE_GROUP	0x000FAC00
#define WLAN_CIPHER_SUITE_WEP40		0x000FAC01
#define WLAN_CIPHER_SUITE_TKIP		0x000FAC02
/* reserved: 				0x000FAC03 */
#define WLAN_CIPHER_SUITE_CCMP		0x000FAC04
#define WLAN_CIPHER_SUITE_WEP104	0x000FAC05
#define WLAN_CIPHER_SUITE_AES_CMAC	0x000FAC06
#define WLAN_CIPHER_SUITE_GCMP		0x000FAC08
#define WLAN_CIPHER_SUITE_GCMP_256	0x000FAC09
#define WLAN_CIPHER_SUITE_CCMP_256	0x000FAC0A
#define WLAN_CIPHER_SUITE_BIP_GMAC_128	0x000FAC0B
#define WLAN_CIPHER_SUITE_BIP_GMAC_256	0x000FAC0C
#define WLAN_CIPHER_SUITE_BIP_CMAC_256	0x000FAC0D

#define WLAN_CIPHER_SUITE_SMS4		0x00147201

/* AKM suite selectors */
#define WLAN_AKM_SUITE_8021X		0x000FAC01
#define WLAN_AKM_SUITE_PSK		0x000FAC02
#define WLAN_AKM_SUITE_8021X_SHA256	0x000FAC05
#define WLAN_AKM_SUITE_PSK_SHA256	0x000FAC06
#define WLAN_AKM_SUITE_TDLS		0x000FAC07
#define WLAN_AKM_SUITE_SAE		0x000FAC08
#define WLAN_AKM_SUITE_FT_OVER_SAE	0x000FAC09

#define WLAN_MAX_KEY_LEN		32

#define WLAN_PMKID_LEN			16

#define WLAN_OUI_WFA			0x506f9a
#define WLAN_OUI_TYPE_WFA_P2P		9
#define WLAN_OUI_MICROSOFT		0x0050f2
#define WLAN_OUI_TYPE_MICROSOFT_WPA	1
#define WLAN_OUI_TYPE_MICROSOFT_WMM	2
#define WLAN_OUI_TYPE_MICROSOFT_WPS	4

/*
 * WMM/802.11e Tspec Element
 */
#define IEEE80211_WMM_IE_TSPEC_TID_MASK		0x0F
#define IEEE80211_WMM_IE_TSPEC_TID_SHIFT	1

enum ieee80211_tspec_status_code {
	IEEE80211_TSPEC_STATUS_ADMISS_ACCEPTED = 0,
	IEEE80211_TSPEC_STATUS_ADDTS_INVAL_PARAMS = 0x1,
};

struct ieee80211_tspec_ie {
	u8 element_id;
	u8 len;
	u8 oui[3];
	u8 oui_type;
	u8 oui_subtype;
	u8 version;
	__le16 tsinfo;
	u8 tsinfo_resvd;
	__le16 nominal_msdu;
	__le16 max_msdu;
	__le32 min_service_int;
	__le32 max_service_int;
	__le32 inactivity_int;
	__le32 suspension_int;
	__le32 service_start_time;
	__le32 min_data_rate;
	__le32 mean_data_rate;
	__le32 peak_data_rate;
	__le32 max_burst_size;
	__le32 delay_bound;
	__le32 min_phy_rate;
	__le16 sba;
	__le16 medium_time;
} __packed;

/**
 * ieee80211_get_qos_ctl - get pointer to qos control bytes
 * @hdr: the frame
 *
 * The qos ctrl bytes come after the frame_control, duration, seq_num
 * and 3 or 4 addresses of length ETH_ALEN.
 * 3 addr: 2 + 2 + 2 + 3*6 = 24
 * 4 addr: 2 + 2 + 2 + 4*6 = 30
 */
static inline u8 *ieee80211_get_qos_ctl(struct ieee80211_hdr *hdr)
{
	if (ieee80211_has_a4(hdr->frame_control))
		return (u8 *)hdr + 30;
	else
		return (u8 *)hdr + 24;
}

/**
 * ieee80211_get_SA - get pointer to SA
 * @hdr: the frame
 *
 * Given an 802.11 frame, this function returns the offset
 * to the source address (SA). It does not verify that the
 * header is long enough to contain the address, and the
 * header must be long enough to contain the frame control
 * field.
 */
static inline u8 *ieee80211_get_SA(struct ieee80211_hdr *hdr)
{
	if (ieee80211_has_a4(hdr->frame_control))
		return hdr->addr4;
	if (ieee80211_has_fromds(hdr->frame_control))
		return hdr->addr3;
	return hdr->addr2;
}

/**
 * ieee80211_get_DA - get pointer to DA
 * @hdr: the frame
 *
 * Given an 802.11 frame, this function returns the offset
 * to the destination address (DA). It does not verify that
 * the header is long enough to contain the address, and the
 * header must be long enough to contain the frame control
 * field.
 */
static inline u8 *ieee80211_get_DA(struct ieee80211_hdr *hdr)
{
	if (ieee80211_has_tods(hdr->frame_control))
		return hdr->addr3;
	else
		return hdr->addr1;
}

/**
 * _ieee80211_is_robust_mgmt_frame - check if frame is a robust management frame
 * @hdr: the frame (buffer must include at least the first octet of payload)
 */
static inline bool _ieee80211_is_robust_mgmt_frame(struct ieee80211_hdr *hdr)
{
	if (ieee80211_is_disassoc(hdr->frame_control) ||
	    ieee80211_is_deauth(hdr->frame_control))
		return true;

	if (ieee80211_is_action(hdr->frame_control)) {
		u8 *category;

		/*
		 * Action frames, excluding Public Action frames, are Robust
		 * Management Frames. However, if we are looking at a Protected
		 * frame, skip the check since the data may be encrypted and
		 * the frame has already been found to be a Robust Management
		 * Frame (by the other end).
		 */
		if (ieee80211_has_protected(hdr->frame_control))
			return true;
		category = ((u8 *) hdr) + 24;
		return *category != WLAN_CATEGORY_PUBLIC &&
			*category != WLAN_CATEGORY_HT &&
			*category != WLAN_CATEGORY_WNM_UNPROTECTED &&
			*category != WLAN_CATEGORY_SELF_PROTECTED &&
			*category != WLAN_CATEGORY_UNPROT_DMG &&
			*category != WLAN_CATEGORY_VHT &&
			*category != WLAN_CATEGORY_VENDOR_SPECIFIC;
	}

	return false;
}

/**
 * ieee80211_is_robust_mgmt_frame - check if skb contains a robust mgmt frame
 * @skb: the skb containing the frame, length will be checked
 */
static inline bool ieee80211_is_robust_mgmt_frame(struct sk_buff *skb)
{
	if (skb->len < IEEE80211_MIN_ACTION_SIZE)
		return false;
	return _ieee80211_is_robust_mgmt_frame((void *)skb->data);
}

/**
 * ieee80211_is_public_action - check if frame is a public action frame
 * @hdr: the frame
 * @len: length of the frame
 */
static inline bool ieee80211_is_public_action(struct ieee80211_hdr *hdr,
					      size_t len)
{
	struct ieee80211_mgmt *mgmt = (void *)hdr;

	if (len < IEEE80211_MIN_ACTION_SIZE)
		return false;
	if (!ieee80211_is_action(hdr->frame_control))
		return false;
	return mgmt->u.action.category == WLAN_CATEGORY_PUBLIC;
}

/**
 * _ieee80211_is_group_privacy_action - check if frame is a group addressed
 * privacy action frame
 * @hdr: the frame
 */
static inline bool _ieee80211_is_group_privacy_action(struct ieee80211_hdr *hdr)
{
	struct ieee80211_mgmt *mgmt = (void *)hdr;

	if (!ieee80211_is_action(hdr->frame_control) ||
	    !is_multicast_ether_addr(hdr->addr1))
		return false;

	return mgmt->u.action.category == WLAN_CATEGORY_MESH_ACTION ||
	       mgmt->u.action.category == WLAN_CATEGORY_MULTIHOP_ACTION;
}

/**
 * ieee80211_is_group_privacy_action - check if frame is a group addressed
 * privacy action frame
 * @skb: the skb containing the frame, length will be checked
 */
static inline bool ieee80211_is_group_privacy_action(struct sk_buff *skb)
{
	if (skb->len < IEEE80211_MIN_ACTION_SIZE)
		return false;
	return _ieee80211_is_group_privacy_action((void *)skb->data);
}

/**
 * ieee80211_tu_to_usec - convert time units (TU) to microseconds
 * @tu: the TUs
 */
static inline unsigned long ieee80211_tu_to_usec(unsigned long tu)
{
	return 1024 * tu;
}

/**
 * ieee80211_check_tim - check if AID bit is set in TIM
 * @tim: the TIM IE
 * @tim_len: length of the TIM IE
 * @aid: the AID to look for
 */
static inline bool ieee80211_check_tim(const struct ieee80211_tim_ie *tim,
				       u8 tim_len, u16 aid)
{
	u8 mask;
	u8 index, indexn1, indexn2;

	if (unlikely(!tim || tim_len < sizeof(*tim)))
		return false;

	aid &= 0x3fff;
	index = aid / 8;
	mask  = 1 << (aid & 7);

	indexn1 = tim->bitmap_ctrl & 0xfe;
	indexn2 = tim_len + indexn1 - 4;

	if (index < indexn1 || index > indexn2)
		return false;

	index -= indexn1;

	return !!(tim->virtual_map[index] & mask);
}

/**
 * ieee80211_get_tdls_action - get tdls packet action (or -1, if not tdls packet)
 * @skb: the skb containing the frame, length will not be checked
 * @hdr_size: the size of the ieee80211_hdr that starts at skb->data
 *
 * This function assumes the frame is a data frame, and that the network header
 * is in the correct place.
 */
static inline int ieee80211_get_tdls_action(struct sk_buff *skb, u32 hdr_size)
{
	if (!skb_is_nonlinear(skb) &&
	    skb->len > (skb_network_offset(skb) + 2)) {
		/* Point to where the indication of TDLS should start */
		const u8 *tdls_data = skb_network_header(skb) - 2;

		if (get_unaligned_be16(tdls_data) == ETH_P_TDLS &&
		    tdls_data[2] == WLAN_TDLS_SNAP_RFTYPE &&
		    tdls_data[3] == WLAN_CATEGORY_TDLS)
			return tdls_data[4];
	}

	return -1;
}

/* convert time units */
#define TU_TO_JIFFIES(x)	(usecs_to_jiffies((x) * 1024))
#define TU_TO_EXP_TIME(x)	(jiffies + TU_TO_JIFFIES(x))

/**
 * ieee80211_action_contains_tpc - checks if the frame contains TPC element
 * @skb: the skb containing the frame, length will be checked
 *
 * This function checks if it's either TPC report action frame or Link
 * Measurement report action frame as defined in IEEE Std. 802.11-2012 8.5.2.5
 * and 8.5.7.5 accordingly.
 */
static inline bool ieee80211_action_contains_tpc(struct sk_buff *skb)
{
	struct ieee80211_mgmt *mgmt = (void *)skb->data;

	if (!ieee80211_is_action(mgmt->frame_control))
		return false;

	if (skb->len < IEEE80211_MIN_ACTION_SIZE +
		       sizeof(mgmt->u.action.u.tpc_report))
		return false;

	/*
	 * TPC report - check that:
	 * category = 0 (Spectrum Management) or 5 (Radio Measurement)
	 * spectrum management action = 3 (TPC/Link Measurement report)
	 * TPC report EID = 35
	 * TPC report element length = 2
	 *
	 * The spectrum management's tpc_report struct is used here both for
	 * parsing tpc_report and radio measurement's link measurement report
	 * frame, since the relevant part is identical in both frames.
	 */
	if (mgmt->u.action.category != WLAN_CATEGORY_SPECTRUM_MGMT &&
	    mgmt->u.action.category != WLAN_CATEGORY_RADIO_MEASUREMENT)
		return false;

	/* both spectrum mgmt and link measurement have same action code */
	if (mgmt->u.action.u.tpc_report.action_code !=
	    WLAN_ACTION_SPCT_TPC_RPRT)
		return false;

	if (mgmt->u.action.u.tpc_report.tpc_elem_id != WLAN_EID_TPC_REPORT ||
	    mgmt->u.action.u.tpc_report.tpc_elem_length !=
	    sizeof(struct ieee80211_tpc_report_ie))
		return false;

	return true;
}

#endif /* LINUX_IEEE80211_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /*
 *	pci.h
 *
 *	PCI defines and function prototypes
 *	Copyright 1994, Drew Eckhardt
 *	Copyright 1997--1999 Martin Mares <mj@ucw.cz>
 *
 *	For more information, please consult the following manuals (look at
 *	http://www.pcisig.com/ for how to get them):
 *
 *	PCI BIOS Specification
 *	PCI Local Bus Specification
 *	PCI to PCI Bridge Specification
 *	PCI System Design Guide
 */
#ifndef LINUX_PCI_H
#define LINUX_PCI_H


#include <linux/mod_devicetable.h>

#include <linux/types.h>
#include <linux/init.h>
#include <linux/ioport.h>
#include <linux/list.h>
#include <linux/compiler.h>
#include <linux/errno.h>
#include <linux/kobject.h>
#include <linux/atomic.h>
#include <linux/device.h>
#include <linux/io.h>
#include <linux/resource_ext.h>
#include <uapi/linux/pci.h>

#include <linux/pci_ids.h>

/*
 * The PCI interface treats multi-function devices as independent
 * devices.  The slot/function address of each device is encoded
 * in a single byte as follows:
 *
 *	7:3 = slot
 *	2:0 = function
 *
 * PCI_DEVFN(), PCI_SLOT(), and PCI_FUNC() are defined in uapi/linux/pci.h.
 * In the interest of not exposing interfaces to user-space unnecessarily,
 * the following kernel-only defines are being added here.
 */
#define PCI_DEVID(bus, devfn)  ((((u16)(bus)) << 8) | (devfn))
/* return bus from PCI devid = ((u16)bus_number) << 8) | devfn */
#define PCI_BUS_NUM(x) (((x) >> 8) & 0xff)

/* pci_slot represents a physical slot */
struct pci_slot {
	struct pci_bus *bus;		/* The bus this slot is on */
	struct list_head list;		/* node in list of slots on this bus */
	struct hotplug_slot *hotplug;	/* Hotplug info (migrate over time) */
	unsigned char number;		/* PCI_SLOT(pci_dev->devfn) */
	struct kobject kobj;
};

static inline const char *pci_slot_name(const struct pci_slot *slot)
{
	return kobject_name(&slot->kobj);
}

/* File state for mmap()s on /proc/bus/pci/X/Y */
enum pci_mmap_state {
	pci_mmap_io,
	pci_mmap_mem
};

/*
 *  For PCI devices, the region numbers are assigned this way:
 */
enum {
	/* #0-5: standard PCI resources */
	PCI_STD_RESOURCES,
	PCI_STD_RESOURCE_END = 5,

	/* #6: expansion ROM resource */
	PCI_ROM_RESOURCE,

	/* device specific resources */
#ifdef CONFIG_PCI_IOV
	PCI_IOV_RESOURCES,
	PCI_IOV_RESOURCE_END = PCI_IOV_RESOURCES + PCI_SRIOV_NUM_BARS - 1,
#endif

	/* resources assigned to buses behind the bridge */
#define PCI_BRIDGE_RESOURCE_NUM 4

	PCI_BRIDGE_RESOURCES,
	PCI_BRIDGE_RESOURCE_END = PCI_BRIDGE_RESOURCES +
				  PCI_BRIDGE_RESOURCE_NUM - 1,

	/* total resources associated with a PCI device */
	PCI_NUM_RESOURCES,

	/* preserve this for compatibility */
	DEVICE_COUNT_RESOURCE = PCI_NUM_RESOURCES,
};

/*
 * pci_power_t values must match the bits in the Capabilities PME_Support
 * and Control/Status PowerState fields in the Power Management capability.
 */
typedef int __bitwise pci_power_t;

#define PCI_D0		((pci_power_t __force) 0)
#define PCI_D1		((pci_power_t __force) 1)
#define PCI_D2		((pci_power_t __force) 2)
#define PCI_D3hot	((pci_power_t __force) 3)
#define PCI_D3cold	((pci_power_t __force) 4)
#define PCI_UNKNOWN	((pci_power_t __force) 5)
#define PCI_POWER_ERROR	((pci_power_t __force) -1)

/* Remember to update this when the list above changes! */
extern const char *pci_power_names[];

static inline const char *pci_power_name(pci_power_t state)
{
	return pci_power_names[1 + (__force int) state];
}

#define PCI_PM_D2_DELAY		200
#define PCI_PM_D3_WAIT		10
#define PCI_PM_D3COLD_WAIT	100
#define PCI_PM_BUS_WAIT		50

/** The pci_channel state describes connectivity between the CPU and
 *  the pci device.  If some PCI bus between here and the pci device
 *  has crashed or locked up, this info is reflected here.
 */
typedef unsigned int __bitwise pci_channel_state_t;

enum pci_channel_state {
	/* I/O channel is in normal state */
	pci_channel_io_normal = (__force pci_channel_state_t) 1,

	/* I/O to channel is blocked */
	pci_channel_io_frozen = (__force pci_channel_state_t) 2,

	/* PCI card is dead */
	pci_channel_io_perm_failure = (__force pci_channel_state_t) 3,
};

typedef unsigned int __bitwise pcie_reset_state_t;

enum pcie_reset_state {
	/* Reset is NOT asserted (Use to deassert reset) */
	pcie_deassert_reset = (__force pcie_reset_state_t) 1,

	/* Use #PERST to reset PCIe device */
	pcie_warm_reset = (__force pcie_reset_state_t) 2,

	/* Use PCIe Hot Reset to reset device */
	pcie_hot_reset = (__force pcie_reset_state_t) 3
};

typedef unsigned short __bitwise pci_dev_flags_t;
enum pci_dev_flags {
	/* INTX_DISABLE in PCI_COMMAND register disables MSI
	 * generation too.
	 */
	PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = (__force pci_dev_flags_t) (1 << 0),
	/* Device configuration is irrevocably lost if disabled into D3 */
	PCI_DEV_FLAGS_NO_D3 = (__force pci_dev_flags_t) (1 << 1),
	/* Provide indication device is assigned by a Virtual Machine Manager */
	PCI_DEV_FLAGS_ASSIGNED = (__force pci_dev_flags_t) (1 << 2),
	/* Flag for quirk use to store if quirk-specific ACS is enabled */
	PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = (__force pci_dev_flags_t) (1 << 3),
	/* Use a PCIe-to-PCI bridge alias even if !pci_is_pcie */
	PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS = (__force pci_dev_flags_t) (1 << 5),
	/* Do not use bus resets for device */
	PCI_DEV_FLAGS_NO_BUS_RESET = (__force pci_dev_flags_t) (1 << 6),
	/* Do not use PM reset even if device advertises NoSoftRst- */
	PCI_DEV_FLAGS_NO_PM_RESET = (__force pci_dev_flags_t) (1 << 7),
	/* Get VPD from function 0 VPD */
	PCI_DEV_FLAGS_VPD_REF_F0 = (__force pci_dev_flags_t) (1 << 8),
	/*
	 * Resume before calling the driver's system suspend hooks, disabling
	 * the direct_complete optimization.
	 */
	PCI_DEV_FLAGS_NEEDS_RESUME = (__force pci_dev_flags_t) (1 << 11),
};

enum pci_irq_reroute_variant {
	INTEL_IRQ_REROUTE_VARIANT = 1,
	MAX_IRQ_REROUTE_VARIANTS = 3
};

typedef unsigned short __bitwise pci_bus_flags_t;
enum pci_bus_flags {
	PCI_BUS_FLAGS_NO_MSI	= (__force pci_bus_flags_t) 1,
	PCI_BUS_FLAGS_NO_MMRBC	= (__force pci_bus_flags_t) 2,
	PCI_BUS_FLAGS_NO_AERSID	= (__force pci_bus_flags_t) 4,
};

/* These values come from the PCI Express Spec */
enum pcie_link_width {
	PCIE_LNK_WIDTH_RESRV	= 0x00,
	PCIE_LNK_X1		= 0x01,
	PCIE_LNK_X2		= 0x02,
	PCIE_LNK_X4		= 0x04,
	PCIE_LNK_X8		= 0x08,
	PCIE_LNK_X12		= 0x0C,
	PCIE_LNK_X16		= 0x10,
	PCIE_LNK_X32		= 0x20,
	PCIE_LNK_WIDTH_UNKNOWN  = 0xFF,
};

/* Based on the PCI Hotplug Spec, but some values are made up by us */
enum pci_bus_speed {
	PCI_SPEED_33MHz			= 0x00,
	PCI_SPEED_66MHz			= 0x01,
	PCI_SPEED_66MHz_PCIX		= 0x02,
	PCI_SPEED_100MHz_PCIX		= 0x03,
	PCI_SPEED_133MHz_PCIX		= 0x04,
	PCI_SPEED_66MHz_PCIX_ECC	= 0x05,
	PCI_SPEED_100MHz_PCIX_ECC	= 0x06,
	PCI_SPEED_133MHz_PCIX_ECC	= 0x07,
	PCI_SPEED_66MHz_PCIX_266	= 0x09,
	PCI_SPEED_100MHz_PCIX_266	= 0x0a,
	PCI_SPEED_133MHz_PCIX_266	= 0x0b,
	AGP_UNKNOWN			= 0x0c,
	AGP_1X				= 0x0d,
	AGP_2X				= 0x0e,
	AGP_4X				= 0x0f,
	AGP_8X				= 0x10,
	PCI_SPEED_66MHz_PCIX_533	= 0x11,
	PCI_SPEED_100MHz_PCIX_533	= 0x12,
	PCI_SPEED_133MHz_PCIX_533	= 0x13,
	PCIE_SPEED_2_5GT		= 0x14,
	PCIE_SPEED_5_0GT		= 0x15,
	PCIE_SPEED_8_0GT		= 0x16,
	PCI_SPEED_UNKNOWN		= 0xff,
};

struct pci_cap_saved_data {
	u16 cap_nr;
	bool cap_extended;
	unsigned int size;
	u32 data[0];
};

struct pci_cap_saved_state {
	struct hlist_node next;
	struct pci_cap_saved_data cap;
};

struct pcie_link_state;
struct pci_vpd;
struct pci_sriov;
struct pci_ats;

/*
 * The pci_dev structure is used to describe PCI devices.
 */
struct pci_dev {
	struct list_head bus_list;	/* node in per-bus list */
	struct pci_bus	*bus;		/* bus this device is on */
	struct pci_bus	*subordinate;	/* bus this device bridges to */

	void		*sysdata;	/* hook for sys-specific extension */
	struct proc_dir_entry *procent;	/* device entry in /proc/bus/pci */
	struct pci_slot	*slot;		/* Physical slot this device is in */

	unsigned int	devfn;		/* encoded device & function index */
	unsigned short	vendor;
	unsigned short	device;
	unsigned short	subsystem_vendor;
	unsigned short	subsystem_device;
	unsigned int	class;		/* 3 bytes: (base,sub,prog-if) */
	u8		revision;	/* PCI revision, low byte of class word */
	u8		hdr_type;	/* PCI header type (`multi' flag masked out) */
#ifdef CONFIG_PCIEAER
	u16		aer_cap;	/* AER capability offset */
#endif
	u8		pcie_cap;	/* PCIe capability offset */
	u8		msi_cap;	/* MSI capability offset */
	u8		msix_cap;	/* MSI-X capability offset */
	u8		pcie_mpss:3;	/* PCIe Max Payload Size Supported */
	u8		rom_base_reg;	/* which config register controls the ROM */
	u8		pin;		/* which interrupt pin this device uses */
	u16		pcie_flags_reg;	/* cached PCIe Capabilities Register */
	unsigned long	*dma_alias_mask;/* mask of enabled devfn aliases */

	struct pci_driver *driver;	/* which driver has allocated this device */
	u64		dma_mask;	/* Mask of the bits of bus address this
					   device implements.  Normally this is
					   0xffffffff.  You only need to change
					   this if your device has broken DMA
					   or supports 64-bit transfers.  */

	struct device_dma_parameters dma_parms;

	pci_power_t     current_state;  /* Current operating state. In ACPI-speak,
					   this is D0-D3, D0 being fully functional,
					   and D3 being off. */
	u8		pm_cap;		/* PM capability offset */
	unsigned int	pme_support:5;	/* Bitmask of states from which PME#
					   can be generated */
	unsigned int	pme_interrupt:1;
	unsigned int	pme_poll:1;	/* Poll device's PME status bit */
	unsigned int	d1_support:1;	/* Low power state D1 is supported */
	unsigned int	d2_support:1;	/* Low power state D2 is supported */
	unsigned int	no_d1d2:1;	/* D1 and D2 are forbidden */
	unsigned int	no_d3cold:1;	/* D3cold is forbidden */
	unsigned int	bridge_d3:1;	/* Allow D3 for bridge */
	unsigned int	d3cold_allowed:1;	/* D3cold is allowed by user */
	unsigned int	mmio_always_on:1;	/* disallow turning off io/mem
						   decoding during bar sizing */
	unsigned int	wakeup_prepared:1;
	unsigned int	runtime_d3cold:1;	/* whether go through runtime
						   D3cold, not set for devices
						   powered on/off by the
						   corresponding bridge */
	unsigned int	ignore_hotplug:1;	/* Ignore hotplug events */
	unsigned int	hotplug_user_indicators:1; /* SlotCtl indicators
						      controlled exclusively by
						      user sysfs */
	unsigned int	d3_delay;	/* D3->D0 transition time in ms */
	unsigned int	d3cold_delay;	/* D3cold->D0 transition time in ms */

#ifdef CONFIG_PCIEASPM
	struct pcie_link_state	*link_state;	/* ASPM link state */
#endif

	pci_channel_state_t error_state;	/* current connectivity state */
	struct	device	dev;		/* Generic device interface */

	int		cfg_size;	/* Size of configuration space */

	/*
	 * Instead of touching interrupt line and base address registers
	 * directly, use the values stored here. They might be different!
	 */
	unsigned int	irq;
	struct cpumask	*irq_affinity;
	struct resource resource[DEVICE_COUNT_RESOURCE]; /* I/O and memory regions + expansion ROMs */

	bool match_driver;		/* Skip attaching driver */
	/* These fields are used by common fixups */
	unsigned int	transparent:1;	/* Subtractive decode PCI bridge */
	unsigned int	multifunction:1;/* Part of multi-function device */
	/* keep track of device state */
	unsigned int	is_added:1;
	unsigned int	is_busmaster:1; /* device is busmaster */
	unsigned int	no_msi:1;	/* device may not use msi */
	unsigned int	no_64bit_msi:1; /* device may only use 32-bit MSIs */
	unsigned int	block_cfg_access:1;	/* config space access is blocked */
	unsigned int	broken_parity_status:1;	/* Device generates false positive parity */
	unsigned int	irq_reroute_variant:2;	/* device needs IRQ rerouting variant */
	unsigned int	msi_enabled:1;
	unsigned int	msix_enabled:1;
	unsigned int	ari_enabled:1;	/* ARI forwarding */
	unsigned int	ats_enabled:1;	/* Address Translation Service */
	unsigned int	is_managed:1;
	unsigned int    needs_freset:1; /* Dev requires fundamental reset */
	unsigned int	state_saved:1;
	unsigned int	is_physfn:1;
	unsigned int	is_virtfn:1;
	unsigned int	reset_fn:1;
	unsigned int    is_hotplug_bridge:1;
	unsigned int    __aer_firmware_first_valid:1;
	unsigned int	__aer_firmware_first:1;
	unsigned int	broken_intx_masking:1;
	unsigned int	io_window_1k:1;	/* Intel P2P bridge 1K I/O windows */
	unsigned int	irq_managed:1;
	unsigned int	has_secondary_link:1;
	unsigned int	non_compliant_bars:1;	/* broken BARs; ignore them */
	pci_dev_flags_t dev_flags;
	atomic_t	enable_cnt;	/* pci_enable_device has been called */

	u32		saved_config_space[16]; /* config space saved at suspend time */
	struct hlist_head saved_cap_space;
	struct bin_attribute *rom_attr; /* attribute descriptor for sysfs ROM entry */
	int rom_attr_enabled;		/* has display of the rom attribute been enabled? */
	struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE]; /* sysfs file for resources */
	struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE]; /* sysfs file for WC mapping of resources */

#ifdef CONFIG_PCIE_PTM
	unsigned int	ptm_root:1;
	unsigned int	ptm_enabled:1;
	u8		ptm_granularity;
#endif
#ifdef CONFIG_PCI_MSI
	const struct attribute_group **msi_irq_groups;
#endif
	struct pci_vpd *vpd;
#ifdef CONFIG_PCI_ATS
	union {
		struct pci_sriov *sriov;	/* SR-IOV capability related */
		struct pci_dev *physfn;	/* the PF this VF is associated with */
	};
	u16		ats_cap;	/* ATS Capability offset */
	u8		ats_stu;	/* ATS Smallest Translation Unit */
	atomic_t	ats_ref_cnt;	/* number of VFs with ATS enabled */
#endif
	phys_addr_t rom; /* Physical address of ROM if it's not from the BAR */
	size_t romlen; /* Length of ROM if it's not from the BAR */
	char *driver_override; /* Driver name to force a match */
};

static inline struct pci_dev *pci_physfn(struct pci_dev *dev)
{
#ifdef CONFIG_PCI_IOV
	if (dev->is_virtfn)
		dev = dev->physfn;
#endif
	return dev;
}

struct pci_dev *pci_alloc_dev(struct pci_bus *bus);

#define	to_pci_dev(n) container_of(n, struct pci_dev, dev)
#define for_each_pci_dev(d) while ((d = pci_get_device(PCI_ANY_ID, PCI_ANY_ID, d)) != NULL)

static inline int pci_channel_offline(struct pci_dev *pdev)
{
	return (pdev->error_state != pci_channel_io_normal);
}

struct pci_host_bridge {
	struct device dev;
	struct pci_bus *bus;		/* root bus */
	struct list_head windows;	/* resource_entry */
	void (*release_fn)(struct pci_host_bridge *);
	void *release_data;
	unsigned int ignore_reset_delay:1;	/* for entire hierarchy */
	/* Resource alignment requirements */
	resource_size_t (*align_resource)(struct pci_dev *dev,
			const struct resource *res,
			resource_size_t start,
			resource_size_t size,
			resource_size_t align);
};

#define	to_pci_host_bridge(n) container_of(n, struct pci_host_bridge, dev)

struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *bus);

void pci_set_host_bridge_release(struct pci_host_bridge *bridge,
		     void (*release_fn)(struct pci_host_bridge *),
		     void *release_data);

int pcibios_root_bridge_prepare(struct pci_host_bridge *bridge);

/*
 * The first PCI_BRIDGE_RESOURCE_NUM PCI bus resources (those that correspond
 * to P2P or CardBus bridge windows) go in a table.  Additional ones (for
 * buses below host bridges or subtractive decode bridges) go in the list.
 * Use pci_bus_for_each_resource() to iterate through all the resources.
 */

/*
 * PCI_SUBTRACTIVE_DECODE means the bridge forwards the window implicitly
 * and there's no way to program the bridge with the details of the window.
 * This does not apply to ACPI _CRS windows, even with the _DEC subtractive-
 * decode bit set, because they are explicit and can be programmed with _SRS.
 */
#define PCI_SUBTRACTIVE_DECODE	0x1

struct pci_bus_resource {
	struct list_head list;
	struct resource *res;
	unsigned int flags;
};

#define PCI_REGION_FLAG_MASK	0x0fU	/* These bits of resource flags tell us the PCI region flags */

struct pci_bus {
	struct list_head node;		/* node in list of buses */
	struct pci_bus	*parent;	/* parent bus this bridge is on */
	struct list_head children;	/* list of child buses */
	struct list_head devices;	/* list of devices on this bus */
	struct pci_dev	*self;		/* bridge device as seen by parent */
	struct list_head slots;		/* list of slots on this bus;
					   protected by pci_slot_mutex */
	struct resource *resource[PCI_BRIDGE_RESOURCE_NUM];
	struct list_head resources;	/* address space routed to this bus */
	struct resource busn_res;	/* bus numbers routed to this bus */

	struct pci_ops	*ops;		/* configuration access functions */
	struct msi_controller *msi;	/* MSI controller */
	void		*sysdata;	/* hook for sys-specific extension */
	struct proc_dir_entry *procdir;	/* directory entry in /proc/bus/pci */

	unsigned char	number;		/* bus number */
	unsigned char	primary;	/* number of primary bridge */
	unsigned char	max_bus_speed;	/* enum pci_bus_speed */
	unsigned char	cur_bus_speed;	/* enum pci_bus_speed */
#ifdef CONFIG_PCI_DOMAINS_GENERIC
	int		domain_nr;
#endif

	char		name[48];

	unsigned short  bridge_ctl;	/* manage NO_ISA/FBB/et al behaviors */
	pci_bus_flags_t bus_flags;	/* inherited by child buses */
	struct device		*bridge;
	struct device		dev;
	struct bin_attribute	*legacy_io; /* legacy I/O for this bus */
	struct bin_attribute	*legacy_mem; /* legacy mem */
	unsigned int		is_added:1;
};

#define to_pci_bus(n)	container_of(n, struct pci_bus, dev)

/*
 * Returns true if the PCI bus is root (behind host-PCI bridge),
 * false otherwise
 *
 * Some code assumes that "bus->self == NULL" means that bus is a root bus.
 * This is incorrect because "virtual" buses added for SR-IOV (via
 * virtfn_add_bus()) have "bus->self == NULL" but are not root buses.
 */
static inline bool pci_is_root_bus(struct pci_bus *pbus)
{
	return !(pbus->parent);
}

/**
 * pci_is_bridge - check if the PCI device is a bridge
 * @dev: PCI device
 *
 * Return true if the PCI device is bridge whether it has subordinate
 * or not.
 */
static inline bool pci_is_bridge(struct pci_dev *dev)
{
	return dev->hdr_type == PCI_HEADER_TYPE_BRIDGE ||
		dev->hdr_type == PCI_HEADER_TYPE_CARDBUS;
}

static inline struct pci_dev *pci_upstream_bridge(struct pci_dev *dev)
{
	dev = pci_physfn(dev);
	if (pci_is_root_bus(dev->bus))
		return NULL;

	return dev->bus->self;
}

struct device *pci_get_host_bridge_device(struct pci_dev *dev);
void pci_put_host_bridge_device(struct device *dev);

#ifdef CONFIG_PCI_MSI
static inline bool pci_dev_msi_enabled(struct pci_dev *pci_dev)
{
	return pci_dev->msi_enabled || pci_dev->msix_enabled;
}
#else
static inline bool pci_dev_msi_enabled(struct pci_dev *pci_dev) { return false; }
#endif

/*
 * Error values that may be returned by PCI functions.
 */
#define PCIBIOS_SUCCESSFUL		0x00
#define PCIBIOS_FUNC_NOT_SUPPORTED	0x81
#define PCIBIOS_BAD_VENDOR_ID		0x83
#define PCIBIOS_DEVICE_NOT_FOUND	0x86
#define PCIBIOS_BAD_REGISTER_NUMBER	0x87
#define PCIBIOS_SET_FAILED		0x88
#define PCIBIOS_BUFFER_TOO_SMALL	0x89

/*
 * Translate above to generic errno for passing back through non-PCI code.
 */
static inline int pcibios_err_to_errno(int err)
{
	if (err <= PCIBIOS_SUCCESSFUL)
		return err; /* Assume already errno */

	switch (err) {
	case PCIBIOS_FUNC_NOT_SUPPORTED:
		return -ENOENT;
	case PCIBIOS_BAD_VENDOR_ID:
		return -ENOTTY;
	case PCIBIOS_DEVICE_NOT_FOUND:
		return -ENODEV;
	case PCIBIOS_BAD_REGISTER_NUMBER:
		return -EFAULT;
	case PCIBIOS_SET_FAILED:
		return -EIO;
	case PCIBIOS_BUFFER_TOO_SMALL:
		return -ENOSPC;
	}

	return -ERANGE;
}

/* Low-level architecture-dependent routines */

struct pci_ops {
	int (*add_bus)(struct pci_bus *bus);
	void (*remove_bus)(struct pci_bus *bus);
	void __iomem *(*map_bus)(struct pci_bus *bus, unsigned int devfn, int where);
	int (*read)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 *val);
	int (*write)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 val);
};

/*
 * ACPI needs to be able to access PCI config space before we've done a
 * PCI bus scan and created pci_bus structures.
 */
int raw_pci_read(unsigned int domain, unsigned int bus, unsigned int devfn,
		 int reg, int len, u32 *val);
int raw_pci_write(unsigned int domain, unsigned int bus, unsigned int devfn,
		  int reg, int len, u32 val);

#ifdef CONFIG_PCI_BUS_ADDR_T_64BIT
typedef u64 pci_bus_addr_t;
#else
typedef u32 pci_bus_addr_t;
#endif

struct pci_bus_region {
	pci_bus_addr_t start;
	pci_bus_addr_t end;
};

struct pci_dynids {
	spinlock_t lock;            /* protects list, index */
	struct list_head list;      /* for IDs added at runtime */
};


/*
 * PCI Error Recovery System (PCI-ERS).  If a PCI device driver provides
 * a set of callbacks in struct pci_error_handlers, that device driver
 * will be notified of PCI bus errors, and will be driven to recovery
 * when an error occurs.
 */

typedef unsigned int __bitwise pci_ers_result_t;

enum pci_ers_result {
	/* no result/none/not supported in device driver */
	PCI_ERS_RESULT_NONE = (__force pci_ers_result_t) 1,

	/* Device driver can recover without slot reset */
	PCI_ERS_RESULT_CAN_RECOVER = (__force pci_ers_result_t) 2,

	/* Device driver wants slot to be reset. */
	PCI_ERS_RESULT_NEED_RESET = (__force pci_ers_result_t) 3,

	/* Device has completely failed, is unrecoverable */
	PCI_ERS_RESULT_DISCONNECT = (__force pci_ers_result_t) 4,

	/* Device driver is fully recovered and operational */
	PCI_ERS_RESULT_RECOVERED = (__force pci_ers_result_t) 5,

	/* No AER capabilities registered for the driver */
	PCI_ERS_RESULT_NO_AER_DRIVER = (__force pci_ers_result_t) 6,
};

/* PCI bus error event callbacks */
struct pci_error_handlers {
	/* PCI bus error detected on this device */
	pci_ers_result_t (*error_detected)(struct pci_dev *dev,
					   enum pci_channel_state error);

	/* MMIO has been re-enabled, but not DMA */
	pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev);

	/* PCI Express link has been reset */
	pci_ers_result_t (*link_reset)(struct pci_dev *dev);

	/* PCI slot has been reset */
	pci_ers_result_t (*slot_reset)(struct pci_dev *dev);

	/* PCI function reset prepare or completed */
	void (*reset_notify)(struct pci_dev *dev, bool prepare);

	/* Device driver may resume normal operations */
	void (*resume)(struct pci_dev *dev);
};


struct module;
struct pci_driver {
	struct list_head node;
	const char *name;
	const struct pci_device_id *id_table;	/* must be non-NULL for probe to be called */
	int  (*probe)  (struct pci_dev *dev, const struct pci_device_id *id);	/* New device inserted */
	void (*remove) (struct pci_dev *dev);	/* Device removed (NULL if not a hot-plug capable driver) */
	int  (*suspend) (struct pci_dev *dev, pm_message_t state);	/* Device suspended */
	int  (*suspend_late) (struct pci_dev *dev, pm_message_t state);
	int  (*resume_early) (struct pci_dev *dev);
	int  (*resume) (struct pci_dev *dev);	                /* Device woken up */
	void (*shutdown) (struct pci_dev *dev);
	int (*sriov_configure) (struct pci_dev *dev, int num_vfs); /* PF pdev */
	const struct pci_error_handlers *err_handler;
	struct device_driver	driver;
	struct pci_dynids dynids;
};

#define	to_pci_driver(drv) container_of(drv, struct pci_driver, driver)

/**
 * PCI_DEVICE - macro used to describe a specific pci device
 * @vend: the 16 bit PCI Vendor ID
 * @dev: the 16 bit PCI Device ID
 *
 * This macro is used to create a struct pci_device_id that matches a
 * specific device.  The subvendor and subdevice fields will be set to
 * PCI_ANY_ID.
 */
#define PCI_DEVICE(vend,dev) \
	.vendor = (vend), .device = (dev), \
	.subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID

/**
 * PCI_DEVICE_SUB - macro used to describe a specific pci device with subsystem
 * @vend: the 16 bit PCI Vendor ID
 * @dev: the 16 bit PCI Device ID
 * @subvend: the 16 bit PCI Subvendor ID
 * @subdev: the 16 bit PCI Subdevice ID
 *
 * This macro is used to create a struct pci_device_id that matches a
 * specific device with subsystem information.
 */
#define PCI_DEVICE_SUB(vend, dev, subvend, subdev) \
	.vendor = (vend), .device = (dev), \
	.subvendor = (subvend), .subdevice = (subdev)

/**
 * PCI_DEVICE_CLASS - macro used to describe a specific pci device class
 * @dev_class: the class, subclass, prog-if triple for this device
 * @dev_class_mask: the class mask for this device
 *
 * This macro is used to create a struct pci_device_id that matches a
 * specific PCI class.  The vendor, device, subvendor, and subdevice
 * fields will be set to PCI_ANY_ID.
 */
#define PCI_DEVICE_CLASS(dev_class,dev_class_mask) \
	.class = (dev_class), .class_mask = (dev_class_mask), \
	.vendor = PCI_ANY_ID, .device = PCI_ANY_ID, \
	.subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID

/**
 * PCI_VDEVICE - macro used to describe a specific pci device in short form
 * @vend: the vendor name
 * @dev: the 16 bit PCI Device ID
 *
 * This macro is used to create a struct pci_device_id that matches a
 * specific PCI device.  The subvendor, and subdevice fields will be set
 * to PCI_ANY_ID. The macro allows the next field to follow as the device
 * private data.
 */

#define PCI_VDEVICE(vend, dev) \
	.vendor = PCI_VENDOR_ID_##vend, .device = (dev), \
	.subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID, 0, 0

enum {
	PCI_REASSIGN_ALL_RSRC	= 0x00000001,	/* ignore firmware setup */
	PCI_REASSIGN_ALL_BUS	= 0x00000002,	/* reassign all bus numbers */
	PCI_PROBE_ONLY		= 0x00000004,	/* use existing setup */
	PCI_CAN_SKIP_ISA_ALIGN	= 0x00000008,	/* don't do ISA alignment */
	PCI_ENABLE_PROC_DOMAINS	= 0x00000010,	/* enable domains in /proc */
	PCI_COMPAT_DOMAIN_0	= 0x00000020,	/* ... except domain 0 */
	PCI_SCAN_ALL_PCIE_DEVS	= 0x00000040,	/* scan all, not just dev 0 */
};

/* these external functions are only available when PCI support is enabled */
#ifdef CONFIG_PCI

extern unsigned int pci_flags;

static inline void pci_set_flags(int flags) { pci_flags = flags; }
static inline void pci_add_flags(int flags) { pci_flags |= flags; }
static inline void pci_clear_flags(int flags) { pci_flags &= ~flags; }
static inline int pci_has_flag(int flag) { return pci_flags & flag; }

void pcie_bus_configure_settings(struct pci_bus *bus);

enum pcie_bus_config_types {
	PCIE_BUS_TUNE_OFF,	/* don't touch MPS at all */
	PCIE_BUS_DEFAULT,	/* ensure MPS matches upstream bridge */
	PCIE_BUS_SAFE,		/* use largest MPS boot-time devices support */
	PCIE_BUS_PERFORMANCE,	/* use MPS and MRRS for best performance */
	PCIE_BUS_PEER2PEER,	/* set MPS = 128 for all devices */
};

extern enum pcie_bus_config_types pcie_bus_config;

extern struct bus_type pci_bus_type;

/* Do NOT directly access these two variables, unless you are arch-specific PCI
 * code, or PCI core code. */
extern struct list_head pci_root_buses;	/* list of all known PCI buses */
/* Some device drivers need know if PCI is initiated */
int no_pci_devices(void);

void pcibios_resource_survey_bus(struct pci_bus *bus);
void pcibios_bus_add_device(struct pci_dev *pdev);
void pcibios_add_bus(struct pci_bus *bus);
void pcibios_remove_bus(struct pci_bus *bus);
void pcibios_fixup_bus(struct pci_bus *);
int __must_check pcibios_enable_device(struct pci_dev *, int mask);
/* Architecture-specific versions may override this (weak) */
char *pcibios_setup(char *str);

/* Used only when drivers/pci/setup.c is used */
resource_size_t pcibios_align_resource(void *, const struct resource *,
				resource_size_t,
				resource_size_t);
void pcibios_update_irq(struct pci_dev *, int irq);

/* Weak but can be overriden by arch */
void pci_fixup_cardbus(struct pci_bus *);

/* Generic PCI functions used internally */

void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
			     struct resource *res);
void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
			     struct pci_bus_region *region);
void pcibios_scan_specific_bus(int busn);
struct pci_bus *pci_find_bus(int domain, int busnr);
void pci_bus_add_devices(const struct pci_bus *bus);
struct pci_bus *pci_scan_bus(int bus, struct pci_ops *ops, void *sysdata);
struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
				    struct pci_ops *ops, void *sysdata,
				    struct list_head *resources);
int pci_bus_insert_busn_res(struct pci_bus *b, int bus, int busmax);
int pci_bus_update_busn_res_end(struct pci_bus *b, int busmax);
void pci_bus_release_busn_res(struct pci_bus *b);
struct pci_bus *pci_scan_root_bus_msi(struct device *parent, int bus,
				      struct pci_ops *ops, void *sysdata,
				      struct list_head *resources,
				      struct msi_controller *msi);
struct pci_bus *pci_scan_root_bus(struct device *parent, int bus,
					     struct pci_ops *ops, void *sysdata,
					     struct list_head *resources);
struct pci_bus *pci_add_new_bus(struct pci_bus *parent, struct pci_dev *dev,
				int busnr);
void pcie_update_link_speed(struct pci_bus *bus, u16 link_status);
struct pci_slot *pci_create_slot(struct pci_bus *parent, int slot_nr,
				 const char *name,
				 struct hotplug_slot *hotplug);
void pci_destroy_slot(struct pci_slot *slot);
#ifdef CONFIG_SYSFS
void pci_dev_assign_slot(struct pci_dev *dev);
#else
static inline void pci_dev_assign_slot(struct pci_dev *dev) { }
#endif
int pci_scan_slot(struct pci_bus *bus, int devfn);
struct pci_dev *pci_scan_single_device(struct pci_bus *bus, int devfn);
void pci_device_add(struct pci_dev *dev, struct pci_bus *bus);
unsigned int pci_scan_child_bus(struct pci_bus *bus);
void pci_bus_add_device(struct pci_dev *dev);
void pci_read_bridge_bases(struct pci_bus *child);
struct resource *pci_find_parent_resource(const struct pci_dev *dev,
					  struct resource *res);
struct pci_dev *pci_find_pcie_root_port(struct pci_dev *dev);
u8 pci_swizzle_interrupt_pin(const struct pci_dev *dev, u8 pin);
int pci_get_interrupt_pin(struct pci_dev *dev, struct pci_dev **bridge);
u8 pci_common_swizzle(struct pci_dev *dev, u8 *pinp);
struct pci_dev *pci_dev_get(struct pci_dev *dev);
void pci_dev_put(struct pci_dev *dev);
void pci_remove_bus(struct pci_bus *b);
void pci_stop_and_remove_bus_device(struct pci_dev *dev);
void pci_stop_and_remove_bus_device_locked(struct pci_dev *dev);
void pci_stop_root_bus(struct pci_bus *bus);
void pci_remove_root_bus(struct pci_bus *bus);
void pci_setup_cardbus(struct pci_bus *bus);
void pcibios_setup_bridge(struct pci_bus *bus, unsigned long type);
void pci_sort_breadthfirst(void);
#define dev_is_pci(d) ((d)->bus == &pci_bus_type)
#define dev_is_pf(d) ((dev_is_pci(d) ? to_pci_dev(d)->is_physfn : false))
#define dev_num_vf(d) ((dev_is_pci(d) ? pci_num_vf(to_pci_dev(d)) : 0))

/* Generic PCI functions exported to card drivers */

enum pci_lost_interrupt_reason {
	PCI_LOST_IRQ_NO_INFORMATION = 0,
	PCI_LOST_IRQ_DISABLE_MSI,
	PCI_LOST_IRQ_DISABLE_MSIX,
	PCI_LOST_IRQ_DISABLE_ACPI,
};
enum pci_lost_interrupt_reason pci_lost_interrupt(struct pci_dev *dev);
int pci_find_capability(struct pci_dev *dev, int cap);
int pci_find_next_capability(struct pci_dev *dev, u8 pos, int cap);
int pci_find_ext_capability(struct pci_dev *dev, int cap);
int pci_find_next_ext_capability(struct pci_dev *dev, int pos, int cap);
int pci_find_ht_capability(struct pci_dev *dev, int ht_cap);
int pci_find_next_ht_capability(struct pci_dev *dev, int pos, int ht_cap);
struct pci_bus *pci_find_next_bus(const struct pci_bus *from);

struct pci_dev *pci_get_device(unsigned int vendor, unsigned int device,
				struct pci_dev *from);
struct pci_dev *pci_get_subsys(unsigned int vendor, unsigned int device,
				unsigned int ss_vendor, unsigned int ss_device,
				struct pci_dev *from);
struct pci_dev *pci_get_slot(struct pci_bus *bus, unsigned int devfn);
struct pci_dev *pci_get_domain_bus_and_slot(int domain, unsigned int bus,
					    unsigned int devfn);
static inline struct pci_dev *pci_get_bus_and_slot(unsigned int bus,
						   unsigned int devfn)
{
	return pci_get_domain_bus_and_slot(0, bus, devfn);
}
struct pci_dev *pci_get_class(unsigned int class, struct pci_dev *from);
int pci_dev_present(const struct pci_device_id *ids);

int pci_bus_read_config_byte(struct pci_bus *bus, unsigned int devfn,
			     int where, u8 *val);
int pci_bus_read_config_word(struct pci_bus *bus, unsigned int devfn,
			     int where, u16 *val);
int pci_bus_read_config_dword(struct pci_bus *bus, unsigned int devfn,
			      int where, u32 *val);
int pci_bus_write_config_byte(struct pci_bus *bus, unsigned int devfn,
			      int where, u8 val);
int pci_bus_write_config_word(struct pci_bus *bus, unsigned int devfn,
			      int where, u16 val);
int pci_bus_write_config_dword(struct pci_bus *bus, unsigned int devfn,
			       int where, u32 val);

int pci_generic_config_read(struct pci_bus *bus, unsigned int devfn,
			    int where, int size, u32 *val);
int pci_generic_config_write(struct pci_bus *bus, unsigned int devfn,
			    int where, int size, u32 val);
int pci_generic_config_read32(struct pci_bus *bus, unsigned int devfn,
			      int where, int size, u32 *val);
int pci_generic_config_write32(struct pci_bus *bus, unsigned int devfn,
			       int where, int size, u32 val);

struct pci_ops *pci_bus_set_ops(struct pci_bus *bus, struct pci_ops *ops);

static inline int pci_read_config_byte(const struct pci_dev *dev, int where, u8 *val)
{
	return pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
}
static inline int pci_read_config_word(const struct pci_dev *dev, int where, u16 *val)
{
	return pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
}
static inline int pci_read_config_dword(const struct pci_dev *dev, int where,
					u32 *val)
{
	return pci_bus_read_config_dword(dev->bus, dev->devfn, where, val);
}
static inline int pci_write_config_byte(const struct pci_dev *dev, int where, u8 val)
{
	return pci_bus_write_config_byte(dev->bus, dev->devfn, where, val);
}
static inline int pci_write_config_word(const struct pci_dev *dev, int where, u16 val)
{
	return pci_bus_write_config_word(dev->bus, dev->devfn, where, val);
}
static inline int pci_write_config_dword(const struct pci_dev *dev, int where,
					 u32 val)
{
	return pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
}

int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val);
int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val);
int pcie_capability_write_word(struct pci_dev *dev, int pos, u16 val);
int pcie_capability_write_dword(struct pci_dev *dev, int pos, u32 val);
int pcie_capability_clear_and_set_word(struct pci_dev *dev, int pos,
				       u16 clear, u16 set);
int pcie_capability_clear_and_set_dword(struct pci_dev *dev, int pos,
					u32 clear, u32 set);

static inline int pcie_capability_set_word(struct pci_dev *dev, int pos,
					   u16 set)
{
	return pcie_capability_clear_and_set_word(dev, pos, 0, set);
}

static inline int pcie_capability_set_dword(struct pci_dev *dev, int pos,
					    u32 set)
{
	return pcie_capability_clear_and_set_dword(dev, pos, 0, set);
}

static inline int pcie_capability_clear_word(struct pci_dev *dev, int pos,
					     u16 clear)
{
	return pcie_capability_clear_and_set_word(dev, pos, clear, 0);
}

static inline int pcie_capability_clear_dword(struct pci_dev *dev, int pos,
					      u32 clear)
{
	return pcie_capability_clear_and_set_dword(dev, pos, clear, 0);
}

/* user-space driven config access */
int pci_user_read_config_byte(struct pci_dev *dev, int where, u8 *val);
int pci_user_read_config_word(struct pci_dev *dev, int where, u16 *val);
int pci_user_read_config_dword(struct pci_dev *dev, int where, u32 *val);
int pci_user_write_config_byte(struct pci_dev *dev, int where, u8 val);
int pci_user_write_config_word(struct pci_dev *dev, int where, u16 val);
int pci_user_write_config_dword(struct pci_dev *dev, int where, u32 val);

int __must_check pci_enable_device(struct pci_dev *dev);
int __must_check pci_enable_device_io(struct pci_dev *dev);
int __must_check pci_enable_device_mem(struct pci_dev *dev);
int __must_check pci_reenable_device(struct pci_dev *);
int __must_check pcim_enable_device(struct pci_dev *pdev);
void pcim_pin_device(struct pci_dev *pdev);

static inline int pci_is_enabled(struct pci_dev *pdev)
{
	return (atomic_read(&pdev->enable_cnt) > 0);
}

static inline int pci_is_managed(struct pci_dev *pdev)
{
	return pdev->is_managed;
}

void pci_disable_device(struct pci_dev *dev);

extern unsigned int pcibios_max_latency;
void pci_set_master(struct pci_dev *dev);
void pci_clear_master(struct pci_dev *dev);

int pci_set_pcie_reset_state(struct pci_dev *dev, enum pcie_reset_state state);
int pci_set_cacheline_size(struct pci_dev *dev);
#define HAVE_PCI_SET_MWI
int __must_check pci_set_mwi(struct pci_dev *dev);
int pci_try_set_mwi(struct pci_dev *dev);
void pci_clear_mwi(struct pci_dev *dev);
void pci_intx(struct pci_dev *dev, int enable);
bool pci_intx_mask_supported(struct pci_dev *dev);
bool pci_check_and_mask_intx(struct pci_dev *dev);
bool pci_check_and_unmask_intx(struct pci_dev *dev);
int pci_wait_for_pending(struct pci_dev *dev, int pos, u16 mask);
int pci_wait_for_pending_transaction(struct pci_dev *dev);
int pcix_get_max_mmrbc(struct pci_dev *dev);
int pcix_get_mmrbc(struct pci_dev *dev);
int pcix_set_mmrbc(struct pci_dev *dev, int mmrbc);
int pcie_get_readrq(struct pci_dev *dev);
int pcie_set_readrq(struct pci_dev *dev, int rq);
int pcie_get_mps(struct pci_dev *dev);
int pcie_set_mps(struct pci_dev *dev, int mps);
int pcie_get_minimum_link(struct pci_dev *dev, enum pci_bus_speed *speed,
			  enum pcie_link_width *width);
int __pci_reset_function(struct pci_dev *dev);
int __pci_reset_function_locked(struct pci_dev *dev);
int pci_reset_function(struct pci_dev *dev);
int pci_try_reset_function(struct pci_dev *dev);
int pci_probe_reset_slot(struct pci_slot *slot);
int pci_reset_slot(struct pci_slot *slot);
int pci_try_reset_slot(struct pci_slot *slot);
int pci_probe_reset_bus(struct pci_bus *bus);
int pci_reset_bus(struct pci_bus *bus);
int pci_try_reset_bus(struct pci_bus *bus);
void pci_reset_secondary_bus(struct pci_dev *dev);
void pcibios_reset_secondary_bus(struct pci_dev *dev);
void pci_reset_bridge_secondary_bus(struct pci_dev *dev);
void pci_update_resource(struct pci_dev *dev, int resno);
int __must_check pci_assign_resource(struct pci_dev *dev, int i);
int __must_check pci_reassign_resource(struct pci_dev *dev, int i, resource_size_t add_size, resource_size_t align);
int pci_select_bars(struct pci_dev *dev, unsigned long flags);
bool pci_device_is_present(struct pci_dev *pdev);
void pci_ignore_hotplug(struct pci_dev *dev);

/* ROM control related routines */
int pci_enable_rom(struct pci_dev *pdev);
void pci_disable_rom(struct pci_dev *pdev);
void __iomem __must_check *pci_map_rom(struct pci_dev *pdev, size_t *size);
void pci_unmap_rom(struct pci_dev *pdev, void __iomem *rom);
size_t pci_get_rom_size(struct pci_dev *pdev, void __iomem *rom, size_t size);
void __iomem __must_check *pci_platform_rom(struct pci_dev *pdev, size_t *size);

/* Power management related routines */
int pci_save_state(struct pci_dev *dev);
void pci_restore_state(struct pci_dev *dev);
struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev);
int pci_load_saved_state(struct pci_dev *dev,
			 struct pci_saved_state *state);
int pci_load_and_free_saved_state(struct pci_dev *dev,
				  struct pci_saved_state **state);
struct pci_cap_saved_state *pci_find_saved_cap(struct pci_dev *dev, char cap);
struct pci_cap_saved_state *pci_find_saved_ext_cap(struct pci_dev *dev,
						   u16 cap);
int pci_add_cap_save_buffer(struct pci_dev *dev, char cap, unsigned int size);
int pci_add_ext_cap_save_buffer(struct pci_dev *dev,
				u16 cap, unsigned int size);
int __pci_complete_power_transition(struct pci_dev *dev, pci_power_t state);
int pci_set_power_state(struct pci_dev *dev, pci_power_t state);
pci_power_t pci_choose_state(struct pci_dev *dev, pm_message_t state);
bool pci_pme_capable(struct pci_dev *dev, pci_power_t state);
void pci_pme_active(struct pci_dev *dev, bool enable);
int __pci_enable_wake(struct pci_dev *dev, pci_power_t state,
		      bool runtime, bool enable);
int pci_wake_from_d3(struct pci_dev *dev, bool enable);
int pci_prepare_to_sleep(struct pci_dev *dev);
int pci_back_from_sleep(struct pci_dev *dev);
bool pci_dev_run_wake(struct pci_dev *dev);
bool pci_check_pme_status(struct pci_dev *dev);
void pci_pme_wakeup_bus(struct pci_bus *bus);
void pci_d3cold_enable(struct pci_dev *dev);
void pci_d3cold_disable(struct pci_dev *dev);

static inline int pci_enable_wake(struct pci_dev *dev, pci_power_t state,
				  bool enable)
{
	return __pci_enable_wake(dev, state, false, enable);
}

/* PCI Virtual Channel */
int pci_save_vc_state(struct pci_dev *dev);
void pci_restore_vc_state(struct pci_dev *dev);
void pci_allocate_vc_save_buffers(struct pci_dev *dev);

/* For use by arch with custom probe code */
void set_pcie_port_type(struct pci_dev *pdev);
void set_pcie_hotplug_bridge(struct pci_dev *pdev);

/* Functions for PCI Hotplug drivers to use */
int pci_bus_find_capability(struct pci_bus *bus, unsigned int devfn, int cap);
unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *bridge);
unsigned int pci_rescan_bus(struct pci_bus *bus);
void pci_lock_rescan_remove(void);
void pci_unlock_rescan_remove(void);

/* Vital product data routines */
ssize_t pci_read_vpd(struct pci_dev *dev, loff_t pos, size_t count, void *buf);
ssize_t pci_write_vpd(struct pci_dev *dev, loff_t pos, size_t count, const void *buf);
int pci_set_vpd_size(struct pci_dev *dev, size_t len);

/* Helper functions for low-level code (drivers/pci/setup-[bus,res].c) */
resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *dev, int idx);
void pci_bus_assign_resources(const struct pci_bus *bus);
void pci_bus_claim_resources(struct pci_bus *bus);
void pci_bus_size_bridges(struct pci_bus *bus);
int pci_claim_resource(struct pci_dev *, int);
int pci_claim_bridge_resource(struct pci_dev *bridge, int i);
void pci_assign_unassigned_resources(void);
void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
void pci_assign_unassigned_bus_resources(struct pci_bus *bus);
void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus);
void pdev_enable_device(struct pci_dev *);
int pci_enable_resources(struct pci_dev *, int mask);
void pci_fixup_irqs(u8 (*)(struct pci_dev *, u8 *),
		    int (*)(const struct pci_dev *, u8, u8));
struct resource *pci_find_resource(struct pci_dev *dev, struct resource *res);
#define HAVE_PCI_REQ_REGIONS	2
int __must_check pci_request_regions(struct pci_dev *, const char *);
int __must_check pci_request_regions_exclusive(struct pci_dev *, const char *);
void pci_release_regions(struct pci_dev *);
int __must_check pci_request_region(struct pci_dev *, int, const char *);
int __must_check pci_request_region_exclusive(struct pci_dev *, int, const char *);
void pci_release_region(struct pci_dev *, int);
int pci_request_selected_regions(struct pci_dev *, int, const char *);
int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);
void pci_release_selected_regions(struct pci_dev *, int);

/* drivers/pci/bus.c */
struct pci_bus *pci_bus_get(struct pci_bus *bus);
void pci_bus_put(struct pci_bus *bus);
void pci_add_resource(struct list_head *resources, struct resource *res);
void pci_add_resource_offset(struct list_head *resources, struct resource *res,
			     resource_size_t offset);
void pci_free_resource_list(struct list_head *resources);
void pci_bus_add_resource(struct pci_bus *bus, struct resource *res,
			  unsigned int flags);
struct resource *pci_bus_resource_n(const struct pci_bus *bus, int n);
void pci_bus_remove_resources(struct pci_bus *bus);
int devm_request_pci_bus_resources(struct device *dev,
				   struct list_head *resources);

#define pci_bus_for_each_resource(bus, res, i)				\
	for (i = 0;							\
	    (res = pci_bus_resource_n(bus, i)) || i < PCI_BRIDGE_RESOURCE_NUM; \
	     i++)

int __must_check pci_bus_alloc_resource(struct pci_bus *bus,
			struct resource *res, resource_size_t size,
			resource_size_t align, resource_size_t min,
			unsigned long type_mask,
			resource_size_t (*alignf)(void *,
						  const struct resource *,
						  resource_size_t,
						  resource_size_t),
			void *alignf_data);


int pci_register_io_range(phys_addr_t addr, resource_size_t size);
unsigned long pci_address_to_pio(phys_addr_t addr);
phys_addr_t pci_pio_to_address(unsigned long pio);
int pci_remap_iospace(const struct resource *res, phys_addr_t phys_addr);
void pci_unmap_iospace(struct resource *res);

static inline pci_bus_addr_t pci_bus_address(struct pci_dev *pdev, int bar)
{
	struct pci_bus_region region;

	pcibios_resource_to_bus(pdev->bus, &region, &pdev->resource[bar]);
	return region.start;
}

/* Proper probing supporting hot-pluggable devices */
int __must_check __pci_register_driver(struct pci_driver *, struct module *,
				       const char *mod_name);

/*
 * pci_register_driver must be a macro so that KBUILD_MODNAME can be expanded
 */
#define pci_register_driver(driver)		\
	__pci_register_driver(driver, THIS_MODULE, KBUILD_MODNAME)

void pci_unregister_driver(struct pci_driver *dev);

/**
 * module_pci_driver() - Helper macro for registering a PCI driver
 * @__pci_driver: pci_driver struct
 *
 * Helper macro for PCI drivers which do not do anything special in module
 * init/exit. This eliminates a lot of boilerplate. Each module may only
 * use this macro once, and calling it replaces module_init() and module_exit()
 */
#define module_pci_driver(__pci_driver) \
	module_driver(__pci_driver, pci_register_driver, \
		       pci_unregister_driver)

/**
 * builtin_pci_driver() - Helper macro for registering a PCI driver
 * @__pci_driver: pci_driver struct
 *
 * Helper macro for PCI drivers which do not do anything special in their
 * init code. This eliminates a lot of boilerplate. Each driver may only
 * use this macro once, and calling it replaces device_initcall(...)
 */
#define builtin_pci_driver(__pci_driver) \
	builtin_driver(__pci_driver, pci_register_driver)

struct pci_driver *pci_dev_driver(const struct pci_dev *dev);
int pci_add_dynid(struct pci_driver *drv,
		  unsigned int vendor, unsigned int device,
		  unsigned int subvendor, unsigned int subdevice,
		  unsigned int class, unsigned int class_mask,
		  unsigned long driver_data);
const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,
					 struct pci_dev *dev);
int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max,
		    int pass);

void pci_walk_bus(struct pci_bus *top, int (*cb)(struct pci_dev *, void *),
		  void *userdata);
int pci_cfg_space_size(struct pci_dev *dev);
unsigned char pci_bus_max_busnr(struct pci_bus *bus);
void pci_setup_bridge(struct pci_bus *bus);
resource_size_t pcibios_window_alignment(struct pci_bus *bus,
					 unsigned long type);
resource_size_t pcibios_iov_resource_alignment(struct pci_dev *dev, int resno);

#define PCI_VGA_STATE_CHANGE_BRIDGE (1 << 0)
#define PCI_VGA_STATE_CHANGE_DECODES (1 << 1)

int pci_set_vga_state(struct pci_dev *pdev, bool decode,
		      unsigned int command_bits, u32 flags);

#define PCI_IRQ_LEGACY		(1 << 0) /* allow legacy interrupts */
#define PCI_IRQ_MSI		(1 << 1) /* allow MSI interrupts */
#define PCI_IRQ_MSIX		(1 << 2) /* allow MSI-X interrupts */
#define PCI_IRQ_AFFINITY	(1 << 3) /* auto-assign affinity */
#define PCI_IRQ_ALL_TYPES \
	(PCI_IRQ_LEGACY | PCI_IRQ_MSI | PCI_IRQ_MSIX)

/* kmem_cache style wrapper around pci_alloc_consistent() */

#include <linux/pci-dma.h>
#include <linux/dmapool.h>

#define	pci_pool dma_pool
#define pci_pool_create(name, pdev, size, align, allocation) \
		dma_pool_create(name, &pdev->dev, size, align, allocation)
#define	pci_pool_destroy(pool) dma_pool_destroy(pool)
#define	pci_pool_alloc(pool, flags, handle) dma_pool_alloc(pool, flags, handle)
#define	pci_pool_zalloc(pool, flags, handle) \
		dma_pool_zalloc(pool, flags, handle)
#define	pci_pool_free(pool, vaddr, addr) dma_pool_free(pool, vaddr, addr)

struct msix_entry {
	u32	vector;	/* kernel uses to write allocated vector */
	u16	entry;	/* driver uses to specify entry, OS writes */
};

#ifdef CONFIG_PCI_MSI
int pci_msi_vec_count(struct pci_dev *dev);
void pci_msi_shutdown(struct pci_dev *dev);
void pci_disable_msi(struct pci_dev *dev);
int pci_msix_vec_count(struct pci_dev *dev);
int pci_enable_msix(struct pci_dev *dev, struct msix_entry *entries, int nvec);
void pci_msix_shutdown(struct pci_dev *dev);
void pci_disable_msix(struct pci_dev *dev);
void pci_restore_msi_state(struct pci_dev *dev);
int pci_msi_enabled(void);
int pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec);
static inline int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
	int rc = pci_enable_msi_range(dev, nvec, nvec);
	if (rc < 0)
		return rc;
	return 0;
}
int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
			  int minvec, int maxvec);
static inline int pci_enable_msix_exact(struct pci_dev *dev,
					struct msix_entry *entries, int nvec)
{
	int rc = pci_enable_msix_range(dev, entries, nvec, nvec);
	if (rc < 0)
		return rc;
	return 0;
}
int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs,
		unsigned int max_vecs, unsigned int flags);
void pci_free_irq_vectors(struct pci_dev *dev);
int pci_irq_vector(struct pci_dev *dev, unsigned int nr);
const struct cpumask *pci_irq_get_affinity(struct pci_dev *pdev, int vec);

#else
static inline int pci_msi_vec_count(struct pci_dev *dev) { return -ENOSYS; }
static inline void pci_msi_shutdown(struct pci_dev *dev) { }
static inline void pci_disable_msi(struct pci_dev *dev) { }
static inline int pci_msix_vec_count(struct pci_dev *dev) { return -ENOSYS; }
static inline int pci_enable_msix(struct pci_dev *dev,
				  struct msix_entry *entries, int nvec)
{ return -ENOSYS; }
static inline void pci_msix_shutdown(struct pci_dev *dev) { }
static inline void pci_disable_msix(struct pci_dev *dev) { }
static inline void pci_restore_msi_state(struct pci_dev *dev) { }
static inline int pci_msi_enabled(void) { return 0; }
static inline int pci_enable_msi_range(struct pci_dev *dev, int minvec,
				       int maxvec)
{ return -ENOSYS; }
static inline int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{ return -ENOSYS; }
static inline int pci_enable_msix_range(struct pci_dev *dev,
		      struct msix_entry *entries, int minvec, int maxvec)
{ return -ENOSYS; }
static inline int pci_enable_msix_exact(struct pci_dev *dev,
		      struct msix_entry *entries, int nvec)
{ return -ENOSYS; }
static inline int pci_alloc_irq_vectors(struct pci_dev *dev,
		unsigned int min_vecs, unsigned int max_vecs,
		unsigned int flags)
{
	if (min_vecs > 1)
		return -EINVAL;
	return 1;
}
static inline void pci_free_irq_vectors(struct pci_dev *dev)
{
}

static inline int pci_irq_vector(struct pci_dev *dev, unsigned int nr)
{
	if (WARN_ON_ONCE(nr > 0))
		return -EINVAL;
	return dev->irq;
}
static inline const struct cpumask *pci_irq_get_affinity(struct pci_dev *pdev,
		int vec)
{
	return cpu_possible_mask;
}
#endif

#ifdef CONFIG_PCIEPORTBUS
extern bool pcie_ports_disabled;
extern bool pcie_ports_auto;
#else
#define pcie_ports_disabled	true
#define pcie_ports_auto		false
#endif

#ifdef CONFIG_PCIEASPM
bool pcie_aspm_support_enabled(void);
#else
static inline bool pcie_aspm_support_enabled(void) { return false; }
#endif

#ifdef CONFIG_PCIEAER
void pci_no_aer(void);
bool pci_aer_available(void);
int pci_aer_init(struct pci_dev *dev);
#else
static inline void pci_no_aer(void) { }
static inline bool pci_aer_available(void) { return false; }
static inline int pci_aer_init(struct pci_dev *d) { return -ENODEV; }
#endif

#ifdef CONFIG_PCIE_ECRC
void pcie_set_ecrc_checking(struct pci_dev *dev);
void pcie_ecrc_get_policy(char *str);
#else
static inline void pcie_set_ecrc_checking(struct pci_dev *dev) { }
static inline void pcie_ecrc_get_policy(char *str) { }
#endif

#define pci_enable_msi(pdev)	pci_enable_msi_exact(pdev, 1)

#ifdef CONFIG_HT_IRQ
/* The functions a driver should call */
int  ht_create_irq(struct pci_dev *dev, int idx);
void ht_destroy_irq(unsigned int irq);
#endif /* CONFIG_HT_IRQ */

#ifdef CONFIG_PCI_ATS
/* Address Translation Service */
void pci_ats_init(struct pci_dev *dev);
int pci_enable_ats(struct pci_dev *dev, int ps);
void pci_disable_ats(struct pci_dev *dev);
int pci_ats_queue_depth(struct pci_dev *dev);
#else
static inline void pci_ats_init(struct pci_dev *d) { }
static inline int pci_enable_ats(struct pci_dev *d, int ps) { return -ENODEV; }
static inline void pci_disable_ats(struct pci_dev *d) { }
static inline int pci_ats_queue_depth(struct pci_dev *d) { return -ENODEV; }
#endif

#ifdef CONFIG_PCIE_PTM
int pci_enable_ptm(struct pci_dev *dev, u8 *granularity);
#else
static inline int pci_enable_ptm(struct pci_dev *dev, u8 *granularity)
{ return -EINVAL; }
#endif

void pci_cfg_access_lock(struct pci_dev *dev);
bool pci_cfg_access_trylock(struct pci_dev *dev);
void pci_cfg_access_unlock(struct pci_dev *dev);

/*
 * PCI domain support.  Sometimes called PCI segment (eg by ACPI),
 * a PCI domain is defined to be a set of PCI buses which share
 * configuration space.
 */
#ifdef CONFIG_PCI_DOMAINS
extern int pci_domains_supported;
int pci_get_new_domain_nr(void);
#else
enum { pci_domains_supported = 0 };
static inline int pci_domain_nr(struct pci_bus *bus) { return 0; }
static inline int pci_proc_domain(struct pci_bus *bus) { return 0; }
static inline int pci_get_new_domain_nr(void) { return -ENOSYS; }
#endif /* CONFIG_PCI_DOMAINS */

/*
 * Generic implementation for PCI domain support. If your
 * architecture does not need custom management of PCI
 * domains then this implementation will be used
 */
#ifdef CONFIG_PCI_DOMAINS_GENERIC
static inline int pci_domain_nr(struct pci_bus *bus)
{
	return bus->domain_nr;
}
#ifdef CONFIG_ACPI
int acpi_pci_bus_find_domain_nr(struct pci_bus *bus);
#else
static inline int acpi_pci_bus_find_domain_nr(struct pci_bus *bus)
{ return 0; }
#endif
int pci_bus_find_domain_nr(struct pci_bus *bus, struct device *parent);
#endif

/* some architectures require additional setup to direct VGA traffic */
typedef int (*arch_set_vga_state_t)(struct pci_dev *pdev, bool decode,
		      unsigned int command_bits, u32 flags);
void pci_register_set_vga_state(arch_set_vga_state_t func);

static inline int
pci_request_io_regions(struct pci_dev *pdev, const char *name)
{
	return pci_request_selected_regions(pdev,
			    pci_select_bars(pdev, IORESOURCE_IO), name);
}

static inline void
pci_release_io_regions(struct pci_dev *pdev)
{
	return pci_release_selected_regions(pdev,
			    pci_select_bars(pdev, IORESOURCE_IO));
}

static inline int
pci_request_mem_regions(struct pci_dev *pdev, const char *name)
{
	return pci_request_selected_regions(pdev,
			    pci_select_bars(pdev, IORESOURCE_MEM), name);
}

static inline void
pci_release_mem_regions(struct pci_dev *pdev)
{
	return pci_release_selected_regions(pdev,
			    pci_select_bars(pdev, IORESOURCE_MEM));
}

#else /* CONFIG_PCI is not enabled */

static inline void pci_set_flags(int flags) { }
static inline void pci_add_flags(int flags) { }
static inline void pci_clear_flags(int flags) { }
static inline int pci_has_flag(int flag) { return 0; }

/*
 *  If the system does not have PCI, clearly these return errors.  Define
 *  these as simple inline functions to avoid hair in drivers.
 */

#define _PCI_NOP(o, s, t) \
	static inline int pci_##o##_config_##s(struct pci_dev *dev, \
						int where, t val) \
		{ return PCIBIOS_FUNC_NOT_SUPPORTED; }

#define _PCI_NOP_ALL(o, x)	_PCI_NOP(o, byte, u8 x) \
				_PCI_NOP(o, word, u16 x) \
				_PCI_NOP(o, dword, u32 x)
_PCI_NOP_ALL(read, *)
_PCI_NOP_ALL(write,)

static inline struct pci_dev *pci_get_device(unsigned int vendor,
					     unsigned int device,
					     struct pci_dev *from)
{ return NULL; }

static inline struct pci_dev *pci_get_subsys(unsigned int vendor,
					     unsigned int device,
					     unsigned int ss_vendor,
					     unsigned int ss_device,
					     struct pci_dev *from)
{ return NULL; }

static inline struct pci_dev *pci_get_class(unsigned int class,
					    struct pci_dev *from)
{ return NULL; }

#define pci_dev_present(ids)	(0)
#define no_pci_devices()	(1)
#define pci_dev_put(dev)	do { } while (0)

static inline void pci_set_master(struct pci_dev *dev) { }
static inline int pci_enable_device(struct pci_dev *dev) { return -EIO; }
static inline void pci_disable_device(struct pci_dev *dev) { }
static inline int pci_assign_resource(struct pci_dev *dev, int i)
{ return -EBUSY; }
static inline int __pci_register_driver(struct pci_driver *drv,
					struct module *owner)
{ return 0; }
static inline int pci_register_driver(struct pci_driver *drv)
{ return 0; }
static inline void pci_unregister_driver(struct pci_driver *drv) { }
static inline int pci_find_capability(struct pci_dev *dev, int cap)
{ return 0; }
static inline int pci_find_next_capability(struct pci_dev *dev, u8 post,
					   int cap)
{ return 0; }
static inline int pci_find_ext_capability(struct pci_dev *dev, int cap)
{ return 0; }

/* Power management related routines */
static inline int pci_save_state(struct pci_dev *dev) { return 0; }
static inline void pci_restore_state(struct pci_dev *dev) { }
static inline int pci_set_power_state(struct pci_dev *dev, pci_power_t state)
{ return 0; }
static inline int pci_wake_from_d3(struct pci_dev *dev, bool enable)
{ return 0; }
static inline pci_power_t pci_choose_state(struct pci_dev *dev,
					   pm_message_t state)
{ return PCI_D0; }
static inline int pci_enable_wake(struct pci_dev *dev, pci_power_t state,
				  int enable)
{ return 0; }

static inline struct resource *pci_find_resource(struct pci_dev *dev,
						 struct resource *res)
{ return NULL; }
static inline int pci_request_regions(struct pci_dev *dev, const char *res_name)
{ return -EIO; }
static inline void pci_release_regions(struct pci_dev *dev) { }

static inline unsigned long pci_address_to_pio(phys_addr_t addr) { return -1; }

static inline void pci_block_cfg_access(struct pci_dev *dev) { }
static inline int pci_block_cfg_access_in_atomic(struct pci_dev *dev)
{ return 0; }
static inline void pci_unblock_cfg_access(struct pci_dev *dev) { }

static inline struct pci_bus *pci_find_next_bus(const struct pci_bus *from)
{ return NULL; }
static inline struct pci_dev *pci_get_slot(struct pci_bus *bus,
						unsigned int devfn)
{ return NULL; }
static inline struct pci_dev *pci_get_bus_and_slot(unsigned int bus,
						unsigned int devfn)
{ return NULL; }

static inline int pci_domain_nr(struct pci_bus *bus) { return 0; }
static inline struct pci_dev *pci_dev_get(struct pci_dev *dev) { return NULL; }
static inline int pci_get_new_domain_nr(void) { return -ENOSYS; }

#define dev_is_pci(d) (false)
#define dev_is_pf(d) (false)
#define dev_num_vf(d) (0)
#endif /* CONFIG_PCI */

/* Include architecture-dependent settings and functions */

#include <asm/pci.h>

#ifndef pci_root_bus_fwnode
#define pci_root_bus_fwnode(bus)	NULL
#endif

/* these helpers provide future and backwards compatibility
 * for accessing popular PCI BAR info */
#define pci_resource_start(dev, bar)	((dev)->resource[(bar)].start)
#define pci_resource_end(dev, bar)	((dev)->resource[(bar)].end)
#define pci_resource_flags(dev, bar)	((dev)->resource[(bar)].flags)
#define pci_resource_len(dev,bar) \
	((pci_resource_start((dev), (bar)) == 0 &&	\
	  pci_resource_end((dev), (bar)) ==		\
	  pci_resource_start((dev), (bar))) ? 0 :	\
							\
	 (pci_resource_end((dev), (bar)) -		\
	  pci_resource_start((dev), (bar)) + 1))

/* Similar to the helpers above, these manipulate per-pci_dev
 * driver-specific data.  They are really just a wrapper around
 * the generic device structure functions of these calls.
 */
static inline void *pci_get_drvdata(struct pci_dev *pdev)
{
	return dev_get_drvdata(&pdev->dev);
}

static inline void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
	dev_set_drvdata(&pdev->dev, data);
}

/* If you want to know what to call your pci_dev, ask this function.
 * Again, it's a wrapper around the generic device.
 */
static inline const char *pci_name(const struct pci_dev *pdev)
{
	return dev_name(&pdev->dev);
}


/* Some archs don't want to expose struct resource to userland as-is
 * in sysfs and /proc
 */
#ifdef HAVE_ARCH_PCI_RESOURCE_TO_USER
void pci_resource_to_user(const struct pci_dev *dev, int bar,
			  const struct resource *rsrc,
			  resource_size_t *start, resource_size_t *end);
#else
static inline void pci_resource_to_user(const struct pci_dev *dev, int bar,
		const struct resource *rsrc, resource_size_t *start,
		resource_size_t *end)
{
	*start = rsrc->start;
	*end = rsrc->end;
}
#endif /* HAVE_ARCH_PCI_RESOURCE_TO_USER */


/*
 *  The world is not perfect and supplies us with broken PCI devices.
 *  For at least a part of these bugs we need a work-around, so both
 *  generic (drivers/pci/quirks.c) and per-architecture code can define
 *  fixup hooks to be called for particular buggy devices.
 */

struct pci_fixup {
	u16 vendor;		/* You can use PCI_ANY_ID here of course */
	u16 device;		/* You can use PCI_ANY_ID here of course */
	u32 class;		/* You can use PCI_ANY_ID here too */
	unsigned int class_shift;	/* should be 0, 8, 16 */
	void (*hook)(struct pci_dev *dev);
};

enum pci_fixup_pass {
	pci_fixup_early,	/* Before probing BARs */
	pci_fixup_header,	/* After reading configuration header */
	pci_fixup_final,	/* Final phase of device fixups */
	pci_fixup_enable,	/* pci_enable_device() time */
	pci_fixup_resume,	/* pci_device_resume() */
	pci_fixup_suspend,	/* pci_device_suspend() */
	pci_fixup_resume_early, /* pci_device_resume_early() */
	pci_fixup_suspend_late,	/* pci_device_suspend_late() */
};

/* Anonymous variables would be nice... */
#define DECLARE_PCI_FIXUP_SECTION(section, name, vendor, device, class,	\
				  class_shift, hook)			\
	static const struct pci_fixup __PASTE(__pci_fixup_##name,__LINE__) __used	\
	__attribute__((__section__(#section), aligned((sizeof(void *)))))    \
		= { vendor, device, class, class_shift, hook };

#define DECLARE_PCI_FIXUP_CLASS_EARLY(vendor, device, class,		\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early,			\
		hook, vendor, device, class, class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_HEADER(vendor, device, class,		\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header,			\
		hook, vendor, device, class, class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_FINAL(vendor, device, class,		\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final,			\
		hook, vendor, device, class, class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_ENABLE(vendor, device, class,		\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable,			\
		hook, vendor, device, class, class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_RESUME(vendor, device, class,		\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume,			\
		resume##hook, vendor, device, class,	\
		class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_RESUME_EARLY(vendor, device, class,	\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early,		\
		resume_early##hook, vendor, device,	\
		class, class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_SUSPEND(vendor, device, class,		\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend,			\
		suspend##hook, vendor, device, class,	\
		class_shift, hook)
#define DECLARE_PCI_FIXUP_CLASS_SUSPEND_LATE(vendor, device, class,	\
					 class_shift, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend_late,		\
		suspend_late##hook, vendor, device,	\
		class, class_shift, hook)

#define DECLARE_PCI_FIXUP_EARLY(vendor, device, hook)			\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early,			\
		hook, vendor, device, PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_HEADER(vendor, device, hook)			\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header,			\
		hook, vendor, device, PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_FINAL(vendor, device, hook)			\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final,			\
		hook, vendor, device, PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_ENABLE(vendor, device, hook)			\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable,			\
		hook, vendor, device, PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_RESUME(vendor, device, hook)			\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume,			\
		resume##hook, vendor, device,		\
		PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_RESUME_EARLY(vendor, device, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early,		\
		resume_early##hook, vendor, device,	\
		PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_SUSPEND(vendor, device, hook)			\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend,			\
		suspend##hook, vendor, device,		\
		PCI_ANY_ID, 0, hook)
#define DECLARE_PCI_FIXUP_SUSPEND_LATE(vendor, device, hook)		\
	DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend_late,		\
		suspend_late##hook, vendor, device,	\
		PCI_ANY_ID, 0, hook)

#ifdef CONFIG_PCI_QUIRKS
void pci_fixup_device(enum pci_fixup_pass pass, struct pci_dev *dev);
int pci_dev_specific_acs_enabled(struct pci_dev *dev, u16 acs_flags);
int pci_dev_specific_enable_acs(struct pci_dev *dev);
#else
static inline void pci_fixup_device(enum pci_fixup_pass pass,
				    struct pci_dev *dev) { }
static inline int pci_dev_specific_acs_enabled(struct pci_dev *dev,
					       u16 acs_flags)
{
	return -ENOTTY;
}
static inline int pci_dev_specific_enable_acs(struct pci_dev *dev)
{
	return -ENOTTY;
}
#endif

void __iomem *pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen);
void pcim_iounmap(struct pci_dev *pdev, void __iomem *addr);
void __iomem * const *pcim_iomap_table(struct pci_dev *pdev);
int pcim_iomap_regions(struct pci_dev *pdev, int mask, const char *name);
int pcim_iomap_regions_request_all(struct pci_dev *pdev, int mask,
				   const char *name);
void pcim_iounmap_regions(struct pci_dev *pdev, int mask);

extern int pci_pci_problems;
#define PCIPCI_FAIL		1	/* No PCI PCI DMA */
#define PCIPCI_TRITON		2
#define PCIPCI_NATOMA		4
#define PCIPCI_VIAETBF		8
#define PCIPCI_VSFX		16
#define PCIPCI_ALIMAGIK		32	/* Need low latency setting */
#define PCIAGP_FAIL		64	/* No PCI to AGP DMA */

extern unsigned long pci_cardbus_io_size;
extern unsigned long pci_cardbus_mem_size;
extern u8 pci_dfl_cache_line_size;
extern u8 pci_cache_line_size;

extern unsigned long pci_hotplug_io_size;
extern unsigned long pci_hotplug_mem_size;
extern unsigned long pci_hotplug_bus_size;

/* Architecture-specific versions may override these (weak) */
void pcibios_disable_device(struct pci_dev *dev);
void pcibios_set_master(struct pci_dev *dev);
int pcibios_set_pcie_reset_state(struct pci_dev *dev,
				 enum pcie_reset_state state);
int pcibios_add_device(struct pci_dev *dev);
void pcibios_release_device(struct pci_dev *dev);
void pcibios_penalize_isa_irq(int irq, int active);
int pcibios_alloc_irq(struct pci_dev *dev);
void pcibios_free_irq(struct pci_dev *dev);

#ifdef CONFIG_HIBERNATE_CALLBACKS
extern struct dev_pm_ops pcibios_pm_ops;
#endif

#if defined(CONFIG_PCI_MMCONFIG) || defined(CONFIG_ACPI_MCFG)
void __init pci_mmcfg_early_init(void);
void __init pci_mmcfg_late_init(void);
#else
static inline void pci_mmcfg_early_init(void) { }
static inline void pci_mmcfg_late_init(void) { }
#endif

int pci_ext_cfg_avail(void);

void __iomem *pci_ioremap_bar(struct pci_dev *pdev, int bar);
void __iomem *pci_ioremap_wc_bar(struct pci_dev *pdev, int bar);

#ifdef CONFIG_PCI_IOV
int pci_iov_virtfn_bus(struct pci_dev *dev, int id);
int pci_iov_virtfn_devfn(struct pci_dev *dev, int id);

int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn);
void pci_disable_sriov(struct pci_dev *dev);
int pci_iov_add_virtfn(struct pci_dev *dev, int id, int reset);
void pci_iov_remove_virtfn(struct pci_dev *dev, int id, int reset);
int pci_num_vf(struct pci_dev *dev);
int pci_vfs_assigned(struct pci_dev *dev);
int pci_sriov_set_totalvfs(struct pci_dev *dev, u16 numvfs);
int pci_sriov_get_totalvfs(struct pci_dev *dev);
resource_size_t pci_iov_resource_size(struct pci_dev *dev, int resno);
#else
static inline int pci_iov_virtfn_bus(struct pci_dev *dev, int id)
{
	return -ENOSYS;
}
static inline int pci_iov_virtfn_devfn(struct pci_dev *dev, int id)
{
	return -ENOSYS;
}
static inline int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn)
{ return -ENODEV; }
static inline int pci_iov_add_virtfn(struct pci_dev *dev, int id, int reset)
{
	return -ENOSYS;
}
static inline void pci_iov_remove_virtfn(struct pci_dev *dev,
					 int id, int reset) { }
static inline void pci_disable_sriov(struct pci_dev *dev) { }
static inline int pci_num_vf(struct pci_dev *dev) { return 0; }
static inline int pci_vfs_assigned(struct pci_dev *dev)
{ return 0; }
static inline int pci_sriov_set_totalvfs(struct pci_dev *dev, u16 numvfs)
{ return 0; }
static inline int pci_sriov_get_totalvfs(struct pci_dev *dev)
{ return 0; }
static inline resource_size_t pci_iov_resource_size(struct pci_dev *dev, int resno)
{ return 0; }
#endif

#if defined(CONFIG_HOTPLUG_PCI) || defined(CONFIG_HOTPLUG_PCI_MODULE)
void pci_hp_create_module_link(struct pci_slot *pci_slot);
void pci_hp_remove_module_link(struct pci_slot *pci_slot);
#endif

/**
 * pci_pcie_cap - get the saved PCIe capability offset
 * @dev: PCI device
 *
 * PCIe capability offset is calculated at PCI device initialization
 * time and saved in the data structure. This function returns saved
 * PCIe capability offset. Using this instead of pci_find_capability()
 * reduces unnecessary search in the PCI configuration space. If you
 * need to calculate PCIe capability offset from raw device for some
 * reasons, please use pci_find_capability() instead.
 */
static inline int pci_pcie_cap(struct pci_dev *dev)
{
	return dev->pcie_cap;
}

/**
 * pci_is_pcie - check if the PCI device is PCI Express capable
 * @dev: PCI device
 *
 * Returns: true if the PCI device is PCI Express capable, false otherwise.
 */
static inline bool pci_is_pcie(struct pci_dev *dev)
{
	return pci_pcie_cap(dev);
}

/**
 * pcie_caps_reg - get the PCIe Capabilities Register
 * @dev: PCI device
 */
static inline u16 pcie_caps_reg(const struct pci_dev *dev)
{
	return dev->pcie_flags_reg;
}

/**
 * pci_pcie_type - get the PCIe device/port type
 * @dev: PCI device
 */
static inline int pci_pcie_type(const struct pci_dev *dev)
{
	return (pcie_caps_reg(dev) & PCI_EXP_FLAGS_TYPE) >> 4;
}

static inline struct pci_dev *pcie_find_root_port(struct pci_dev *dev)
{
	while (1) {
		if (!pci_is_pcie(dev))
			break;
		if (pci_pcie_type(dev) == PCI_EXP_TYPE_ROOT_PORT)
			return dev;
		if (!dev->bus->self)
			break;
		dev = dev->bus->self;
	}
	return NULL;
}

void pci_request_acs(void);
bool pci_acs_enabled(struct pci_dev *pdev, u16 acs_flags);
bool pci_acs_path_enabled(struct pci_dev *start,
			  struct pci_dev *end, u16 acs_flags);

#define PCI_VPD_LRDT			0x80	/* Large Resource Data Type */
#define PCI_VPD_LRDT_ID(x)		((x) | PCI_VPD_LRDT)

/* Large Resource Data Type Tag Item Names */
#define PCI_VPD_LTIN_ID_STRING		0x02	/* Identifier String */
#define PCI_VPD_LTIN_RO_DATA		0x10	/* Read-Only Data */
#define PCI_VPD_LTIN_RW_DATA		0x11	/* Read-Write Data */

#define PCI_VPD_LRDT_ID_STRING		PCI_VPD_LRDT_ID(PCI_VPD_LTIN_ID_STRING)
#define PCI_VPD_LRDT_RO_DATA		PCI_VPD_LRDT_ID(PCI_VPD_LTIN_RO_DATA)
#define PCI_VPD_LRDT_RW_DATA		PCI_VPD_LRDT_ID(PCI_VPD_LTIN_RW_DATA)

/* Small Resource Data Type Tag Item Names */
#define PCI_VPD_STIN_END		0x0f	/* End */

#define PCI_VPD_SRDT_END		(PCI_VPD_STIN_END << 3)

#define PCI_VPD_SRDT_TIN_MASK		0x78
#define PCI_VPD_SRDT_LEN_MASK		0x07
#define PCI_VPD_LRDT_TIN_MASK		0x7f

#define PCI_VPD_LRDT_TAG_SIZE		3
#define PCI_VPD_SRDT_TAG_SIZE		1

#define PCI_VPD_INFO_FLD_HDR_SIZE	3

#define PCI_VPD_RO_KEYWORD_PARTNO	"PN"
#define PCI_VPD_RO_KEYWORD_MFR_ID	"MN"
#define PCI_VPD_RO_KEYWORD_VENDOR0	"V0"
#define PCI_VPD_RO_KEYWORD_CHKSUM	"RV"

/**
 * pci_vpd_lrdt_size - Extracts the Large Resource Data Type length
 * @lrdt: Pointer to the beginning of the Large Resource Data Type tag
 *
 * Returns the extracted Large Resource Data Type length.
 */
static inline u16 pci_vpd_lrdt_size(const u8 *lrdt)
{
	return (u16)lrdt[1] + ((u16)lrdt[2] << 8);
}

/**
 * pci_vpd_lrdt_tag - Extracts the Large Resource Data Type Tag Item
 * @lrdt: Pointer to the beginning of the Large Resource Data Type tag
 *
 * Returns the extracted Large Resource Data Type Tag item.
 */
static inline u16 pci_vpd_lrdt_tag(const u8 *lrdt)
{
    return (u16)(lrdt[0] & PCI_VPD_LRDT_TIN_MASK);
}

/**
 * pci_vpd_srdt_size - Extracts the Small Resource Data Type length
 * @lrdt: Pointer to the beginning of the Small Resource Data Type tag
 *
 * Returns the extracted Small Resource Data Type length.
 */
static inline u8 pci_vpd_srdt_size(const u8 *srdt)
{
	return (*srdt) & PCI_VPD_SRDT_LEN_MASK;
}

/**
 * pci_vpd_srdt_tag - Extracts the Small Resource Data Type Tag Item
 * @lrdt: Pointer to the beginning of the Small Resource Data Type tag
 *
 * Returns the extracted Small Resource Data Type Tag Item.
 */
static inline u8 pci_vpd_srdt_tag(const u8 *srdt)
{
	return ((*srdt) & PCI_VPD_SRDT_TIN_MASK) >> 3;
}

/**
 * pci_vpd_info_field_size - Extracts the information field length
 * @lrdt: Pointer to the beginning of an information field header
 *
 * Returns the extracted information field length.
 */
static inline u8 pci_vpd_info_field_size(const u8 *info_field)
{
	return info_field[2];
}

/**
 * pci_vpd_find_tag - Locates the Resource Data Type tag provided
 * @buf: Pointer to buffered vpd data
 * @off: The offset into the buffer at which to begin the search
 * @len: The length of the vpd buffer
 * @rdt: The Resource Data Type to search for
 *
 * Returns the index where the Resource Data Type was found or
 * -ENOENT otherwise.
 */
int pci_vpd_find_tag(const u8 *buf, unsigned int off, unsigned int len, u8 rdt);

/**
 * pci_vpd_find_info_keyword - Locates an information field keyword in the VPD
 * @buf: Pointer to buffered vpd data
 * @off: The offset into the buffer at which to begin the search
 * @len: The length of the buffer area, relative to off, in which to search
 * @kw: The keyword to search for
 *
 * Returns the index where the information field keyword was found or
 * -ENOENT otherwise.
 */
int pci_vpd_find_info_keyword(const u8 *buf, unsigned int off,
			      unsigned int len, const char *kw);

/* PCI <-> OF binding helpers */
#ifdef CONFIG_OF
struct device_node;
struct irq_domain;
void pci_set_of_node(struct pci_dev *dev);
void pci_release_of_node(struct pci_dev *dev);
void pci_set_bus_of_node(struct pci_bus *bus);
void pci_release_bus_of_node(struct pci_bus *bus);
struct irq_domain *pci_host_bridge_of_msi_domain(struct pci_bus *bus);

/* Arch may override this (weak) */
struct device_node *pcibios_get_phb_of_node(struct pci_bus *bus);

static inline struct device_node *
pci_device_to_OF_node(const struct pci_dev *pdev)
{
	return pdev ? pdev->dev.of_node : NULL;
}

static inline struct device_node *pci_bus_to_OF_node(struct pci_bus *bus)
{
	return bus ? bus->dev.of_node : NULL;
}

#else /* CONFIG_OF */
static inline void pci_set_of_node(struct pci_dev *dev) { }
static inline void pci_release_of_node(struct pci_dev *dev) { }
static inline void pci_set_bus_of_node(struct pci_bus *bus) { }
static inline void pci_release_bus_of_node(struct pci_bus *bus) { }
static inline struct device_node *
pci_device_to_OF_node(const struct pci_dev *pdev) { return NULL; }
static inline struct irq_domain *
pci_host_bridge_of_msi_domain(struct pci_bus *bus) { return NULL; }
#endif  /* CONFIG_OF */

#ifdef CONFIG_ACPI
struct irq_domain *pci_host_bridge_acpi_msi_domain(struct pci_bus *bus);

void
pci_msi_register_fwnode_provider(struct fwnode_handle *(*fn)(struct device *));
#else
static inline struct irq_domain *
pci_host_bridge_acpi_msi_domain(struct pci_bus *bus) { return NULL; }
#endif

#ifdef CONFIG_EEH
static inline struct eeh_dev *pci_dev_to_eeh_dev(struct pci_dev *pdev)
{
	return pdev->dev.archdata.edev;
}
#endif

void pci_add_dma_alias(struct pci_dev *dev, u8 devfn);
bool pci_devs_are_dma_aliases(struct pci_dev *dev1, struct pci_dev *dev2);
int pci_for_each_dma_alias(struct pci_dev *pdev,
			   int (*fn)(struct pci_dev *pdev,
				     u16 alias, void *data), void *data);

/* helper functions for operation of device flag */
static inline void pci_set_dev_assigned(struct pci_dev *pdev)
{
	pdev->dev_flags |= PCI_DEV_FLAGS_ASSIGNED;
}
static inline void pci_clear_dev_assigned(struct pci_dev *pdev)
{
	pdev->dev_flags &= ~PCI_DEV_FLAGS_ASSIGNED;
}
static inline bool pci_is_dev_assigned(struct pci_dev *pdev)
{
	return (pdev->dev_flags & PCI_DEV_FLAGS_ASSIGNED) == PCI_DEV_FLAGS_ASSIGNED;
}

/**
 * pci_ari_enabled - query ARI forwarding status
 * @bus: the PCI bus
 *
 * Returns true if ARI forwarding is enabled.
 */
static inline bool pci_ari_enabled(struct pci_bus *bus)
{
	return bus->self && bus->self->ari_enabled;
}

/* provide the legacy pci_dma_* API */
#include <linux/pci-dma-compat.h>

#endif /* LINUX_PCI_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  menu "printk and dmesg options"

config PRINTK_TIME
	bool "Show timing information on printks"
	depends on PRINTK
	help
	  Selecting this option causes time stamps of the printk()
	  messages to be added to the output of the syslog() system
	  call and at the console.

	  The timestamp is always recorded internally, and exported
	  to /dev/kmsg. This flag just specifies if the timestamp should
	  be included, not that the timestamp is recorded.

	  The behavior is also controlled by the kernel command line
	  parameter printk.time=1. See Documentation/kernel-parameters.txt

config MESSAGE_LOGLEVEL_DEFAULT
	int "Default message log level (1-7)"
	range 1 7
	default "4"
	help
	  Default log level for printk statements with no specified priority.

	  This was hard-coded to KERN_WARNING since at least 2.6.10 but folks
	  that are auditing their logs closely may want to set it to a lower
	  priority.

config BOOT_PRINTK_DELAY
	bool "Delay each boot printk message by N milliseconds"
	depends on DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY
	help
	  This build option allows you to read kernel boot messages
	  by inserting a short delay after each one.  The delay is
	  specified in milliseconds on the kernel command line,
	  using "boot_delay=N".

	  It is likely that you would also need to use "lpj=M" to preset
	  the "loops per jiffie" value.
	  See a previous boot log for the "lpj" value to use for your
	  system, and then set "lpj=M" before setting "boot_delay=N".
	  NOTE:  Using this option may adversely affect SMP systems.
	  I.e., processors other than the first one may not boot up.
	  BOOT_PRINTK_DELAY also may cause LOCKUP_DETECTOR to detect
	  what it believes to be lockup conditions.

config DYNAMIC_DEBUG
	bool "Enable dynamic printk() support"
	default n
	depends on PRINTK
	depends on DEBUG_FS
	help

	  Compiles debug level messages into the kernel, which would not
	  otherwise be available at runtime. These messages can then be
	  enabled/disabled based on various levels of scope - per source file,
	  function, module, format string, and line number. This mechanism
	  implicitly compiles in all pr_debug() and dev_dbg() calls, which
	  enlarges the kernel text size by about 2%.

	  If a source file is compiled with DEBUG flag set, any
	  pr_debug() calls in it are enabled by default, but can be
	  disabled at runtime as below.  Note that DEBUG flag is
	  turned on by many CONFIG_*DEBUG* options.

	  Usage:

	  Dynamic debugging is controlled via the 'dynamic_debug/control' file,
	  which is contained in the 'debugfs' filesystem. Thus, the debugfs
	  filesystem must first be mounted before making use of this feature.
	  We refer the control file as: <debugfs>/dynamic_debug/control. This
	  file contains a list of the debug statements that can be enabled. The
	  format for each line of the file is:

		filename:lineno [module]function flags format

	  filename : source file of the debug statement
	  lineno : line number of the debug statement
	  module : module that contains the debug statement
	  function : function that contains the debug statement
          flags : '=p' means the line is turned 'on' for printing
          format : the format used for the debug statement

	  From a live system:

		nullarbor:~ # cat <debugfs>/dynamic_debug/control
		# filename:lineno [module]function flags format
		fs/aio.c:222 [aio]__put_ioctx =_ "__put_ioctx:\040freeing\040%p\012"
		fs/aio.c:248 [aio]ioctx_alloc =_ "ENOMEM:\040nr_events\040too\040high\012"
		fs/aio.c:1770 [aio]sys_io_cancel =_ "calling\040cancel\012"

	  Example usage:

		// enable the message at line 1603 of file svcsock.c
		nullarbor:~ # echo -n 'file svcsock.c line 1603 +p' >
						<debugfs>/dynamic_debug/control

		// enable all the messages in file svcsock.c
		nullarbor:~ # echo -n 'file svcsock.c +p' >
						<debugfs>/dynamic_debug/control

		// enable all the messages in the NFS server module
		nullarbor:~ # echo -n 'module nfsd +p' >
						<debugfs>/dynamic_debug/control

		// enable all 12 messages in the function svc_process()
		nullarbor:~ # echo -n 'func svc_process +p' >
						<debugfs>/dynamic_debug/control

		// disable all 12 messages in the function svc_process()
		nullarbor:~ # echo -n 'func svc_process -p' >
						<debugfs>/dynamic_debug/control

	  See Documentation/dynamic-debug-howto.txt for additional information.

endmenu # "printk and dmesg options"

menu "Compile-time checks and compiler options"

config DEBUG_INFO
	bool "Compile the kernel with debug info"
	depends on DEBUG_KERNEL && !COMPILE_TEST
	help
          If you say Y here the resulting kernel image will include
	  debugging info resulting in a larger kernel image.
	  This adds debug symbols to the kernel and modules (gcc -g), and
	  is needed if you intend to use kernel crashdump or binary object
	  tools like crash, kgdb, LKCD, gdb, etc on the kernel.
	  Say Y here only if you plan to debug the kernel.

	  If unsure, say N.

config DEBUG_INFO_REDUCED
	bool "Reduce debugging information"
	depends on DEBUG_INFO
	help
	  If you say Y here gcc is instructed to generate less debugging
	  information for structure types. This means that tools that
	  need full debugging information (like kgdb or systemtap) won't
	  be happy. But if you merely need debugging information to
	  resolve line numbers there is no loss. Advantage is that
	  build directory object sizes shrink dramatically over a full
	  DEBUG_INFO build and compile times are reduced too.
	  Only works with newer gcc versions.

config DEBUG_INFO_SPLIT
	bool "Produce split debuginfo in .dwo files"
	depends on DEBUG_INFO && !FRV
	help
	  Generate debug info into separate .dwo files. This significantly
	  reduces the build directory size for builds with DEBUG_INFO,
	  because it stores the information only once on disk in .dwo
	  files instead of multiple times in object files and executables.
	  In addition the debug information is also compressed.

	  Requires recent gcc (4.7+) and recent gdb/binutils.
	  Any tool that packages or reads debug information would need
	  to know about the .dwo files and include them.
	  Incompatible with older versions of ccache.

config DEBUG_INFO_DWARF4
	bool "Generate dwarf4 debuginfo"
	depends on DEBUG_INFO
	help
	  Generate dwarf4 debug info. This requires recent versions
	  of gcc and gdb. It makes the debug information larger.
	  But it significantly improves the success of resolving
	  variables in gdb on optimized code.

config GDB_SCRIPTS
	bool "Provide GDB scripts for kernel debugging"
	depends on DEBUG_INFO
	help
	  This creates the required links to GDB helper scripts in the
	  build directory. If you load vmlinux into gdb, the helper
	  scripts will be automatically imported by gdb as well, and
	  additional functions are available to analyze a Linux kernel
	  instance. See Documentation/gdb-kernel-debugging.txt for further
	  details.

config ENABLE_WARN_DEPRECATED
	bool "Enable __deprecated logic"
	default y
	help
	  Enable the __deprecated logic in the kernel build.
	  Disable this to suppress the "warning: 'foo' is deprecated
	  (declared at kernel/power/somefile.c:1234)" messages.

config ENABLE_MUST_CHECK
	bool "Enable __must_check logic"
	default y
	help
	  Enable the __must_check logic in the kernel build.  Disable this to
	  suppress the "warning: ignoring return value of 'foo', declared with
	  attribute warn_unused_result" messages.

config FRAME_WARN
	int "Warn for stack frames larger than (needs gcc 4.4)"
	range 0 8192
	default 0 if KASAN
	default 2048 if GCC_PLUGIN_LATENT_ENTROPY
	default 1024 if !64BIT
	default 2048 if 64BIT
	help
	  Tell gcc to warn at build time for stack frames larger than this.
	  Setting this too low will cause a lot of warnings.
	  Setting it to 0 disables the warning.
	  Requires gcc 4.4

config STRIP_ASM_SYMS
	bool "Strip assembler-generated symbols during link"
	default n
	help
	  Strip internal assembler-generated symbols during a link (symbols
	  that look like '.Lxxx') so they don't pollute the output of
	  get_wchan() and suchlike.

config READABLE_ASM
        bool "Generate readable assembler code"
        depends on DEBUG_KERNEL
        help
          Disable some compiler optimizations that tend to generate human unreadable
          assembler output. This may make the kernel slightly slower, but it helps
          to keep kernel developers who have to stare a lot at assembler listings
          sane.

config UNUSED_SYMBOLS
	bool "Enable unused/obsolete exported symbols"
	default y if X86
	help
	  Unused but exported symbols make the kernel needlessly bigger.  For
	  that reason most of these unused exports will soon be removed.  This
	  option is provided temporarily to provide a transition period in case
	  some external kernel module needs one of these symbols anyway. If you
	  encounter such a case in your module, consider if you are actually
	  using the right API.  (rationale: since nobody in the kernel is using
	  this in a module, there is a pretty good chance it's actually the
	  wrong interface to use).  If you really need the symbol, please send a
	  mail to the linux kernel mailing list mentioning the symbol and why
	  you really need it, and what the merge plan to the mainline kernel for
	  your module is.

config PAGE_OWNER
	bool "Track page owner"
	depends on DEBUG_KERNEL && STACKTRACE_SUPPORT
	select DEBUG_FS
	select STACKTRACE
	select STACKDEPOT
	select PAGE_EXTENSION
	help
	  This keeps track of what call chain is the owner of a page, may
	  help to find bare alloc_page(s) leaks. Even if you include this
	  feature on your build, it is disabled in default. You should pass
	  "page_owner=on" to boot parameter in order to enable it. Eats
	  a fair amount of memory if enabled. See tools/vm/page_owner_sort.c
	  for user-space helper.

	  If unsure, say N.

config DEBUG_FS
	bool "Debug Filesystem"
	select SRCU
	help
	  debugfs is a virtual file system that kernel developers use to put
	  debugging files into.  Enable this option to be able to read and
	  write to these files.

	  For detailed documentation on the debugfs API, see
	  Documentation/DocBook/filesystems.

	  If unsure, say N.

config HEADERS_CHECK
	bool "Run 'make headers_check' when building vmlinux"
	depends on !UML
	help
	  This option will extract the user-visible kernel headers whenever
	  building the kernel, and will run basic sanity checks on them to
	  ensure that exported files do not attempt to include files which
	  were not exported, etc.

	  If you're making modifications to header files which are
	  relevant for userspace, say 'Y', and check the headers
	  exported to $(INSTALL_HDR_PATH) (usually 'usr/include' in
	  your build tree), to make sure they're suitable.

config DEBUG_SECTION_MISMATCH
	bool "Enable full Section mismatch analysis"
	help
	  The section mismatch analysis checks if there are illegal
	  references from one section to another section.
	  During linktime or runtime, some sections are dropped;
	  any use of code/data previously in these sections would
	  most likely result in an oops.
	  In the code, functions and variables are annotated with
	  __init,, etc. (see the full list in include/linux/init.h),
	  which results in the code/data being placed in specific sections.
	  The section mismatch analysis is always performed after a full
	  kernel build, and enabling this option causes the following
	  additional steps to occur:
	  - Add the option -fno-inline-functions-called-once to gcc commands.
	    When inlining a function annotated with __init in a non-init
	    function, we would lose the section information and thus
	    the analysis would not catch the illegal reference.
	    This option tells gcc to inline less (but it does result in
	    a larger kernel).
	  - Run the section mismatch analysis for each module/built-in.o file.
	    When we run the section mismatch analysis on vmlinux.o, we
	    lose valuable information about where the mismatch was
	    introduced.
	    Running the analysis for each module/built-in.o file
	    tells where the mismatch happens much closer to the
	    source. The drawback is that the same mismatch is
	    reported at least twice.
	  - Enable verbose reporting from modpost in order to help resolve
	    the section mismatches that are reported.

config SECTION_MISMATCH_WARN_ONLY
	bool "Make section mismatch errors non-fatal"
	default y
	help
	  If you say N here, the build process will fail if there are any
	  section mismatch, instead of just throwing warnings.

	  If unsure, say Y.

#
# Select this config option from the architecture Kconfig, if it
# is preferred to always offer frame pointers as a config
# option on the architecture (regardless of KERNEL_DEBUG):
#
config ARCH_WANT_FRAME_POINTERS
	bool
	help

config FRAME_POINTER
	bool "Compile the kernel with frame pointers"
	depends on DEBUG_KERNEL && \
		(CRIS || M68K || FRV || UML || \
		 AVR32 || SUPERH || BLACKFIN || MN10300 || METAG) || \
		ARCH_WANT_FRAME_POINTERS
	default y if (DEBUG_INFO && UML) || ARCH_WANT_FRAME_POINTERS
	help
	  If you say Y here the resulting kernel image will be slightly
	  larger and slower, but it gives very useful debugging information
	  in case of kernel bugs. (precise oopses/stacktraces/warnings)

config STACK_VALIDATION
	bool "Compile-time stack metadata validation"
	depends on HAVE_STACK_VALIDATION
	default n
	help
	  Add compile-time checks to validate stack metadata, including frame
	  pointers (if CONFIG_FRAME_POINTER is enabled).  This helps ensure
	  that runtime stack traces are more reliable.

	  For more information, see
	  tools/objtool/Documentation/stack-validation.txt.

config DEBUG_FORCE_WEAK_PER_CPU
	bool "Force weak per-cpu definitions"
	depends on DEBUG_KERNEL
	help
	  s390 and alpha require percpu variables in modules to be
	  defined weak to work around addressing range issue which
	  puts the following two restrictions on percpu variable
	  definitions.

	  1. percpu symbols must be unique whether static or not
	  2. percpu variables can't be defined inside a function

	  To ensure that generic code follows the above rules, this
	  option forces all percpu variables to be defined as weak.

endmenu # "Compiler options"

config MAGIC_SYSRQ
	bool "Magic SysRq key"
	depends on !UML
	help
	  If you say Y here, you will have some control over the system even
	  if the system crashes for example during kernel debugging (e.g., you
	  will be able to flush the buffer cache to disk, reboot the system
	  immediately or dump some status information). This is accomplished
	  by pressing various keys while holding SysRq (Alt+PrintScreen). It
	  also works on a serial console (on PC hardware at least), if you
	  send a BREAK and then within 5 seconds a command keypress. The
	  keys are documented in <file:Documentation/sysrq.txt>. Don't say Y
	  unless you really know what this hack does.


config MAGIC_SYSRQ_DEFAULT_ENABLE
	hex "Enable magic SysRq key functions by default"
	depends on MAGIC_SYSRQ
	default 0x1
	help
	  Specifies which SysRq key functions are enabled by default.
	  This may be set to 1 or 0 to enable or disable them all, or
	  to a bitmask as described in Documentation/sysrq.txt.

source "kernel/ipipe/Kconfig.debug"

config DEBUG_KERNEL
	bool "Kernel debugging"
	help
	  Say Y here if you are developing drivers or trying to debug and
	  identify kernel problems.

menu "Memory Debugging"

source mm/Kconfig.debug

config DEBUG_OBJECTS
	bool "Debug object operations"
	depends on DEBUG_KERNEL
	help
	  If you say Y here, additional code will be inserted into the
	  kernel to track the life time of various objects and validate
	  the operations on those objects.

config DEBUG_OBJECTS_SELFTEST
	bool "Debug objects selftest"
	depends on DEBUG_OBJECTS
	help
	  This enables the selftest of the object debug code.

config DEBUG_OBJECTS_FREE
	bool "Debug objects in freed memory"
	depends on DEBUG_OBJECTS
	help
	  This enables checks whether a k/v free operation frees an area
	  which contains an object which has not been deactivated
	  properly. This can make kmalloc/kfree-intensive workloads
	  much slower.

config DEBUG_OBJECTS_TIMERS
	bool "Debug timer objects"
	depends on DEBUG_OBJECTS
	help
	  If you say Y here, additional code will be inserted into the
	  timer routines to track the life time of timer objects and
	  validate the timer operations.

config DEBUG_OBJECTS_WORK
	bool "Debug work objects"
	depends on DEBUG_OBJECTS
	help
	  If you say Y here, additional code will be inserted into the
	  work queue routines to track the life time of work objects and
	  validate the work operations.

config DEBUG_OBJECTS_RCU_HEAD
	bool "Debug RCU callbacks objects"
	depends on DEBUG_OBJECTS
	help
	  Enable this to turn on debugging of RCU list heads (call_rcu() usage).

config DEBUG_OBJECTS_PERCPU_COUNTER
	bool "Debug percpu counter objects"
	depends on DEBUG_OBJECTS
	help
	  If you say Y here, additional code will be inserted into the
	  percpu counter routines to track the life time of percpu counter
	  objects and validate the percpu counter operations.

config DEBUG_OBJECTS_ENABLE_DEFAULT
	int "debug_objects bootup default value (0-1)"
        range 0 1
        default "1"
        depends on DEBUG_OBJECTS
        help
          Debug objects boot parameter default value

config DEBUG_SLAB
	bool "Debug slab memory allocations"
	depends on DEBUG_KERNEL && SLAB && !KMEMCHECK
	help
	  Say Y here to have the kernel do limited verification on memory
	  allocation as well as poisoning memory on free to catch use of freed
	  memory. This can make kmalloc/kfree-intensive workloads much slower.

config DEBUG_SLAB_LEAK
	bool "Memory leak debugging"
	depends on DEBUG_SLAB

config SLUB_DEBUG_ON
	bool "SLUB debugging on by default"
	depends on SLUB && SLUB_DEBUG && !KMEMCHECK
	default n
	help
	  Boot with debugging on by default. SLUB boots by default with
	  the runtime debug capabilities switched off. Enabling this is
	  equivalent to specifying the "slub_debug" parameter on boot.
	  There is no support for more fine grained debug control like
	  possible with slub_debug=xxx. SLUB debugging may be switched
	  off in a kernel built with CONFIG_SLUB_DEBUG_ON by specifying
	  "slub_debug=-".

config SLUB_STATS
	default n
	bool "Enable SLUB performance statistics"
	depends on SLUB && SYSFS
	help
	  SLUB statistics are useful to debug SLUBs allocation behavior in
	  order find ways to optimize the allocator. This should never be
	  enabled for production use since keeping statistics slows down
	  the allocator by a few percentage points. The slabinfo command
	  supports the determination of the most active slabs to figure
	  out which slabs are relevant to a particular load.
	  Try running: slabinfo -DA

config HAVE_DEBUG_KMEMLEAK
	bool

config DEBUG_KMEMLEAK
	bool "Kernel memory leak detector"
	depends on DEBUG_KERNEL && HAVE_DEBUG_KMEMLEAK
	select DEBUG_FS
	select STACKTRACE if STACKTRACE_SUPPORT
	select KALLSYMS
	select CRC32
	help
	  Say Y here if you want to enable the memory leak
	  detector. The memory allocation/freeing is traced in a way
	  similar to the Boehm's conservative garbage collector, the
	  difference being that the orphan objects are not freed but
	  only shown in /sys/kernel/debug/kmemleak. Enabling this
	  feature will introduce an overhead to memory
	  allocations. See Documentation/kmemleak.txt for more
	  details.

	  Enabling DEBUG_SLAB or SLUB_DEBUG may increase the chances
	  of finding leaks due to the slab objects poisoning.

	  In order to access the kmemleak file, debugfs needs to be
	  mounted (usually at /sys/kernel/debug).

config DEBUG_KMEMLEAK_EARLY_LOG_SIZE
	int "Maximum kmemleak early log entries"
	depends on DEBUG_KMEMLEAK
	range 200 40000
	default 400
	help
	  Kmemleak must track all the memory allocations to avoid
	  reporting false positives. Since memory may be allocated or
	  freed before kmemleak is initialised, an early log buffer is
	  used to store these actions. If kmemleak reports "early log
	  buffer exceeded", please increase this value.

config DEBUG_KMEMLEAK_TEST
	tristate "Simple test for the kernel memory leak detector"
	depends on DEBUG_KMEMLEAK && m
	help
	  This option enables a module that explicitly leaks memory.

	  If unsure, say N.

config DEBUG_KMEMLEAK_DEFAULT_OFF
	bool "Default kmemleak to off"
	depends on DEBUG_KMEMLEAK
	help
	  Say Y here to disable kmemleak by default. It can then be enabled
	  on the command line via kmemleak=on.

config DEBUG_STACK_USAGE
	bool "Stack utilization instrumentation"
	depends on DEBUG_KERNEL && !IA64
	help
	  Enables the display of the minimum amount of free stack which each
	  task has ever had available in the sysrq-T and sysrq-P debug output.

	  This option will slow down process creation somewhat.

config DEBUG_VM
	bool "Debug VM"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on extended checks in the virtual-memory system
          that may impact performance.

	  If unsure, say N.

config DEBUG_VM_VMACACHE
	bool "Debug VMA caching"
	depends on DEBUG_VM
	help
	  Enable this to turn on VMA caching debug information. Doing so
	  can cause significant overhead, so only enable it in non-production
	  environments.

	  If unsure, say N.

config DEBUG_VM_RB
	bool "Debug VM red-black trees"
	depends on DEBUG_VM
	help
	  Enable VM red-black tree debugging information and extra validations.

	  If unsure, say N.

config DEBUG_VM_PGFLAGS
	bool "Debug page-flags operations"
	depends on DEBUG_VM
	help
	  Enables extra validation on page flags operations.

	  If unsure, say N.

config DEBUG_VIRTUAL
	bool "Debug VM translations"
	depends on DEBUG_KERNEL && X86
	help
	  Enable some costly sanity checks in virtual to page code. This can
	  catch mistakes with virt_to_page() and friends.

	  If unsure, say N.

config DEBUG_NOMMU_REGIONS
	bool "Debug the global anon/private NOMMU mapping region tree"
	depends on DEBUG_KERNEL && !MMU
	help
	  This option causes the global tree of anonymous and private mapping
	  regions to be regularly checked for invalid topology.

config DEBUG_MEMORY_INIT
	bool "Debug memory initialisation" if EXPERT
	default !EXPERT
	help
	  Enable this for additional checks during memory initialisation.
	  The sanity checks verify aspects of the VM such as the memory model
	  and other information provided by the architecture. Verbose
	  information will be printed at KERN_DEBUG loglevel depending
	  on the mminit_loglevel= command-line option.

	  If unsure, say Y

config MEMORY_NOTIFIER_ERROR_INJECT
	tristate "Memory hotplug notifier error injection module"
	depends on MEMORY_HOTPLUG_SPARSE && NOTIFIER_ERROR_INJECTION
	help
	  This option provides the ability to inject artificial errors to
	  memory hotplug notifier chain callbacks.  It is controlled through
	  debugfs interface under /sys/kernel/debug/notifier-error-inject/memory

	  If the notifier call chain should be failed with some events
	  notified, write the error code to "actions/<notifier event>/error".

	  Example: Inject memory hotplug offline error (-12 == -ENOMEM)

	  # cd /sys/kernel/debug/notifier-error-inject/memory
	  # echo -12 > actions/MEM_GOING_OFFLINE/error
	  # echo offline > /sys/devices/system/memory/memoryXXX/state
	  bash: echo: write error: Cannot allocate memory

	  To compile this code as a module, choose M here: the module will
	  be called memory-notifier-error-inject.

	  If unsure, say N.

config DEBUG_PER_CPU_MAPS
	bool "Debug access to per_cpu maps"
	depends on DEBUG_KERNEL
	depends on SMP
	help
	  Say Y to verify that the per_cpu map being accessed has
	  been set up. This adds a fair amount of code to kernel memory
	  and decreases performance.

	  Say N if unsure.

config DEBUG_HIGHMEM
	bool "Highmem debugging"
	depends on DEBUG_KERNEL && HIGHMEM
	help
	  This option enables additional error checking for high memory
	  systems.  Disable for production systems.

config HAVE_DEBUG_STACKOVERFLOW
	bool

config DEBUG_STACKOVERFLOW
	bool "Check for stack overflows"
	depends on DEBUG_KERNEL && HAVE_DEBUG_STACKOVERFLOW && !IPIPE_LEGACY
	---help---
	  Say Y here if you want to check for overflows of kernel, IRQ
	  and exception stacks (if your architecture uses them). This
	  option will show detailed messages if free stack space drops
	  below a certain limit.

	  These kinds of bugs usually occur when call-chains in the
	  kernel get too deep, especially when interrupts are
	  involved.

	  Use this in cases where you see apparently random memory
	  corruption, especially if it appears in 'struct thread_info'

	  If in doubt, say "N".

source "lib/Kconfig.kmemcheck"

source "lib/Kconfig.kasan"

endmenu # "Memory Debugging"

config ARCH_HAS_KCOV
	bool
	help
	  KCOV does not have any arch-specific code, but currently it is enabled
	  only for x86_64. KCOV requires testing on other archs, and most likely
	  disabling of instrumentation for some early boot code.

config KCOV
	bool "Code coverage for fuzzing"
	depends on ARCH_HAS_KCOV
	select DEBUG_FS
	select GCC_PLUGINS if !COMPILE_TEST
	select GCC_PLUGIN_SANCOV if !COMPILE_TEST
	help
	  KCOV exposes kernel code coverage information in a form suitable
	  for coverage-guided fuzzing (randomized testing).

	  If RANDOMIZE_BASE is enabled, PC values will not be stable across
	  different machines and across reboots. If you need stable PC values,
	  disable RANDOMIZE_BASE.

	  For more details, see Documentation/kcov.txt.

config KCOV_INSTRUMENT_ALL
	bool "Instrument all code by default"
	depends on KCOV
	default y if KCOV
	help
	  If you are doing generic system call fuzzing (like e.g. syzkaller),
	  then you will want to instrument the whole kernel and you should
	  say y here. If you are doing more targeted fuzzing (like e.g.
	  filesystem fuzzing with AFL) then you will want to enable coverage
	  for more specific subsets of files, and should say n here.

config DEBUG_SHIRQ
	bool "Debug shared IRQ handlers"
	depends on DEBUG_KERNEL
	help
	  Enable this to generate a spurious interrupt as soon as a shared
	  interrupt handler is registered, and just before one is deregistered.
	  Drivers ought to be able to handle interrupts coming in at those
	  points; some don't and need to be caught.

menu "Debug Lockups and Hangs"

config LOCKUP_DETECTOR
	bool "Detect Hard and Soft Lockups"
	depends on DEBUG_KERNEL && !S390
	help
	  Say Y here to enable the kernel to act as a watchdog to detect
	  hard and soft lockups.

	  Softlockups are bugs that cause the kernel to loop in kernel
	  mode for more than 20 seconds, without giving other tasks a
	  chance to run.  The current stack trace is displayed upon
	  detection and the system will stay locked up.

	  Hardlockups are bugs that cause the CPU to loop in kernel mode
	  for more than 10 seconds, without letting other interrupts have a
	  chance to run.  The current stack trace is displayed upon detection
	  and the system will stay locked up.

	  The overhead should be minimal.  A periodic hrtimer runs to
	  generate interrupts and kick the watchdog task every 4 seconds.
	  An NMI is generated every 10 seconds or so to check for hardlockups.

	  The frequency of hrtimer and NMI events and the soft and hard lockup
	  thresholds can be controlled through the sysctl watchdog_thresh.

config HARDLOCKUP_DETECTOR
	def_bool y
	depends on LOCKUP_DETECTOR && !HAVE_NMI_WATCHDOG
	depends on PERF_EVENTS && HAVE_PERF_EVENTS_NMI

config BOOTPARAM_HARDLOCKUP_PANIC
	bool "Panic (Reboot) On Hard Lockups"
	depends on HARDLOCKUP_DETECTOR
	help
	  Say Y here to enable the kernel to panic on "hard lockups",
	  which are bugs that cause the kernel to loop in kernel
	  mode with interrupts disabled for more than 10 seconds (configurable
	  using the watchdog_thresh sysctl).

	  Say N if unsure.

config BOOTPARAM_HARDLOCKUP_PANIC_VALUE
	int
	depends on HARDLOCKUP_DETECTOR
	range 0 1
	default 0 if !BOOTPARAM_HARDLOCKUP_PANIC
	default 1 if BOOTPARAM_HARDLOCKUP_PANIC

config BOOTPARAM_SOFTLOCKUP_PANIC
	bool "Panic (Reboot) On Soft Lockups"
	depends on LOCKUP_DETECTOR
	help
	  Say Y here to enable the kernel to panic on "soft lockups",
	  which are bugs that cause the kernel to loop in kernel
	  mode for more than 20 seconds (configurable using the watchdog_thresh
	  sysctl), without giving other tasks a chance to run.

	  The panic can be used in combination with panic_timeout,
	  to cause the system to reboot automatically after a
	  lockup has been detected. This feature is useful for
	  high-availability systems that have uptime guarantees and
	  where a lockup must be resolved ASAP.

	  Say N if unsure.

config BOOTPARAM_SOFTLOCKUP_PANIC_VALUE
	int
	depends on LOCKUP_DETECTOR
	range 0 1
	default 0 if !BOOTPARAM_SOFTLOCKUP_PANIC
	default 1 if BOOTPARAM_SOFTLOCKUP_PANIC

config DETECT_HUNG_TASK
	bool "Detect Hung Tasks"
	depends on DEBUG_KERNEL
	default LOCKUP_DETECTOR
	help
	  Say Y here to enable the kernel to detect "hung tasks",
	  which are bugs that cause the task to be stuck in
	  uninterruptible "D" state indefinitely.

	  When a hung task is detected, the kernel will print the
	  current stack trace (which you should report), but the
	  task will stay in uninterruptible state. If lockdep is
	  enabled then all held locks will also be reported. This
	  feature has negligible overhead.

config DEFAULT_HUNG_TASK_TIMEOUT
	int "Default timeout for hung task detection (in seconds)"
	depends on DETECT_HUNG_TASK
	default 120
	help
	  This option controls the default timeout (in seconds) used
	  to determine when a task has become non-responsive and should
	  be considered hung.

	  It can be adjusted at runtime via the kernel.hung_task_timeout_secs
	  sysctl or by writing a value to
	  /proc/sys/kernel/hung_task_timeout_secs.

	  A timeout of 0 disables the check.  The default is two minutes.
	  Keeping the default should be fine in most cases.

config BOOTPARAM_HUNG_TASK_PANIC
	bool "Panic (Reboot) On Hung Tasks"
	depends on DETECT_HUNG_TASK
	help
	  Say Y here to enable the kernel to panic on "hung tasks",
	  which are bugs that cause the kernel to leave a task stuck
	  in uninterruptible "D" state.

	  The panic can be used in combination with panic_timeout,
	  to cause the system to reboot automatically after a
	  hung task has been detected. This feature is useful for
	  high-availability systems that have uptime guarantees and
	  where a hung tasks must be resolved ASAP.

	  Say N if unsure.

config BOOTPARAM_HUNG_TASK_PANIC_VALUE
	int
	depends on DETECT_HUNG_TASK
	range 0 1
	default 0 if !BOOTPARAM_HUNG_TASK_PANIC
	default 1 if BOOTPARAM_HUNG_TASK_PANIC

config WQ_WATCHDOG
	bool "Detect Workqueue Stalls"
	depends on DEBUG_KERNEL
	help
	  Say Y here to enable stall detection on workqueues.  If a
	  worker pool doesn't make forward progress on a pending work
	  item for over a given amount of time, 30s by default, a
	  warning message is printed along with dump of workqueue
	  state.  This can be configured through kernel parameter
	  "workqueue.watchdog_thresh" and its sysfs counterpart.

endmenu # "Debug lockups and hangs"

config PANIC_ON_OOPS
	bool "Panic on Oops"
	help
	  Say Y here to enable the kernel to panic when it oopses. This
	  has the same effect as setting oops=panic on the kernel command
	  line.

	  This feature is useful to ensure that the kernel does not do
	  anything erroneous after an oops which could result in data
	  corruption or other issues.

	  Say N if unsure.

config PANIC_ON_OOPS_VALUE
	int
	range 0 1
	default 0 if !PANIC_ON_OOPS
	default 1 if PANIC_ON_OOPS

config PANIC_TIMEOUT
	int "panic timeout"
	default 0
	help
	  Set the timeout value (in seconds) until a reboot occurs when the
	  the kernel panics. If n = 0, then we wait forever. A timeout
	  value n > 0 will wait n seconds before rebooting, while a timeout
	  value n < 0 will reboot immediately.

config SCHED_DEBUG
	bool "Collect scheduler debugging info"
	depends on DEBUG_KERNEL && PROC_FS
	default y
	help
	  If you say Y here, the /proc/sched_debug file will be provided
	  that can help debug the scheduler. The runtime overhead of this
	  option is minimal.

config SCHED_INFO
	bool
	default n

config SCHEDSTATS
	bool "Collect scheduler statistics"
	depends on DEBUG_KERNEL && PROC_FS
	select SCHED_INFO
	help
	  If you say Y here, additional code will be inserted into the
	  scheduler and related routines to collect statistics about
	  scheduler behavior and provide them in /proc/schedstat.  These
	  stats may be useful for both tuning and debugging the scheduler
	  If you aren't debugging the scheduler or trying to tune a specific
	  application, you can say N to avoid the very slight overhead
	  this adds.

config SCHED_STACK_END_CHECK
	bool "Detect stack corruption on calls to schedule()"
	depends on DEBUG_KERNEL
	default n
	help
	  This option checks for a stack overrun on calls to schedule().
	  If the stack end location is found to be over written always panic as
	  the content of the corrupted region can no longer be trusted.
	  This is to ensure no erroneous behaviour occurs which could result in
	  data corruption or a sporadic crash at a later stage once the region
	  is examined. The runtime overhead introduced is minimal.

config DEBUG_TIMEKEEPING
	bool "Enable extra timekeeping sanity checking"
	help
	  This option will enable additional timekeeping sanity checks
	  which may be helpful when diagnosing issues where timekeeping
	  problems are suspected.

	  This may include checks in the timekeeping hotpaths, so this
	  option may have a (very small) performance impact to some
	  workloads.

	  If unsure, say N.

config TIMER_STATS
	bool "Collect kernel timers statistics"
	depends on DEBUG_KERNEL && PROC_FS
	help
	  If you say Y here, additional code will be inserted into the
	  timer routines to collect statistics about kernel timers being
	  reprogrammed. The statistics can be read from /proc/timer_stats.
	  The statistics collection is started by writing 1 to /proc/timer_stats,
	  writing 0 stops it. This feature is useful to collect information
	  about timer usage patterns in kernel and userspace. This feature
	  is lightweight if enabled in the kernel config but not activated
	  (it defaults to deactivated on bootup and will only be activated
	  if some application like powertop activates it explicitly).

config DEBUG_PREEMPT
	bool "Debug preemptible kernel"
	depends on DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT
	default y
	help
	  If you say Y here then the kernel will use a debug variant of the
	  commonly used smp_processor_id() function and will print warnings
	  if kernel code uses it in a preemption-unsafe way. Also, the kernel
	  will detect preemption count underflows.

menu "Lock Debugging (spinlocks, mutexes, etc...)"

config DEBUG_RT_MUTEXES
	bool "RT Mutex debugging, deadlock detection"
	depends on DEBUG_KERNEL && RT_MUTEXES
	help
	 This allows rt mutex semantics violations and rt mutex related
	 deadlocks (lockups) to be detected and reported automatically.

config DEBUG_SPINLOCK
	bool "Spinlock and rw-lock debugging: basic checks"
	depends on DEBUG_KERNEL
	select UNINLINE_SPIN_UNLOCK
	help
	  Say Y here and build SMP to catch missing spinlock initialization
	  and certain other kinds of spinlock errors commonly made.  This is
	  best used in conjunction with the NMI watchdog so that spinlock
	  deadlocks are also debuggable.

config DEBUG_MUTEXES
	bool "Mutex debugging: basic checks"
	depends on DEBUG_KERNEL
	help
	 This feature allows mutex semantics violations to be detected and
	 reported.

config DEBUG_WW_MUTEX_SLOWPATH
	bool "Wait/wound mutex debugging: Slowpath testing"
	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
	select DEBUG_LOCK_ALLOC
	select DEBUG_SPINLOCK
	select DEBUG_MUTEXES
	help
	 This feature enables slowpath testing for w/w mutex users by
	 injecting additional -EDEADLK wound/backoff cases. Together with
	 the full mutex checks enabled with (CONFIG_PROVE_LOCKING) this
	 will test all possible w/w mutex interface abuse with the
	 exception of simply not acquiring all the required locks.
	 Note that this feature can introduce significant overhead, so
	 it really should not be enabled in a production or distro kernel,
	 even a debug kernel.  If you are a driver writer, enable it.  If
	 you are a distro, do not.

config DEBUG_LOCK_ALLOC
	bool "Lock debugging: detect incorrect freeing of live locks"
	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
	select DEBUG_SPINLOCK
	select DEBUG_MUTEXES
	select LOCKDEP
	help
	 This feature will check whether any held lock (spinlock, rwlock,
	 mutex or rwsem) is incorrectly freed by the kernel, via any of the
	 memory-freeing routines (kfree(), kmem_cache_free(), free_pages(),
	 vfree(), etc.), whether a live lock is incorrectly reinitialized via
	 spin_lock_init()/mutex_init()/etc., or whether there is any lock
	 held during task exit.

config PROVE_LOCKING
	bool "Lock debugging: prove locking correctness"
	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
	select LOCKDEP
	select DEBUG_SPINLOCK
	select DEBUG_MUTEXES
	select DEBUG_LOCK_ALLOC
	select TRACE_IRQFLAGS
	default n
	help
	 This feature enables the kernel to prove that all locking
	 that occurs in the kernel runtime is mathematically
	 correct: that under no circumstance could an arbitrary (and
	 not yet triggered) combination of observed locking
	 sequences (on an arbitrary number of CPUs, running an
	 arbitrary number of tasks and interrupt contexts) cause a
	 deadlock.

	 In short, this feature enables the kernel to report locking
	 related deadlocks before they actually occur.

	 The proof does not depend on how hard and complex a
	 deadlock scenario would be to trigger: how many
	 participant CPUs, tasks and irq-contexts would be needed
	 for it to trigger. The proof also does not depend on
	 timing: if a race and a resulting deadlock is possible
	 theoretically (no matter how unlikely the race scenario
	 is), it will be proven so and will immediately be
	 reported by the kernel (once the event is observed that
	 makes the deadlock theoretically possible).

	 If a deadlock is impossible (i.e. the locking rules, as
	 observed by the kernel, are mathematically correct), the
	 kernel reports nothing.

	 NOTE: this feature can also be enabled for rwlocks, mutexes
	 and rwsems - in which case all dependencies between these
	 different locking variants are observed and mapped too, and
	 the proof of observed correctness is also maintained for an
	 arbitrary combination of these separate locking variants.

	 For more details, see Documentation/locking/lockdep-design.txt.

config PROVE_LOCKING_SMALL
	bool

config LOCKDEP
	bool
	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
	select STACKTRACE
	select FRAME_POINTER if !MIPS && !PPC && !ARM_UNWIND && !S390 && !MICROBLAZE && !ARC && !SCORE
	select KALLSYMS
	select KALLSYMS_ALL

config LOCK_STAT
	bool "Lock usage statistics"
	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
	select LOCKDEP
	select DEBUG_SPINLOCK
	select DEBUG_MUTEXES
	select DEBUG_LOCK_ALLOC
	default n
	help
	 This feature enables tracking lock contention points

	 For more details, see Documentation/locking/lockstat.txt

	 This also enables lock events required by "perf lock",
	 subcommand of perf.
	 If you want to use "perf lock", you also need to turn on
	 CONFIG_EVENT_TRACING.

	 CONFIG_LOCK_STAT defines "contended" and "acquired" lock events.
	 (CONFIG_LOCKDEP defines "acquire" and "release" events.)

config DEBUG_LOCKDEP
	bool "Lock dependency engine debugging"
	depends on DEBUG_KERNEL && LOCKDEP
	help
	  If you say Y here, the lock dependency engine will do
	  additional runtime checks to debug itself, at the price
	  of more runtime overhead.

config DEBUG_ATOMIC_SLEEP
	bool "Sleep inside atomic section checking"
	select PREEMPT_COUNT
	depends on DEBUG_KERNEL
	help
	  If you say Y here, various routines which may sleep will become very
	  noisy if they are called inside atomic sections: when a spinlock is
	  held, inside an rcu read side critical section, inside preempt disabled
	  sections, inside an interrupt, etc...

config DEBUG_LOCKING_API_SELFTESTS
	bool "Locking API boot-time self-tests"
	depends on DEBUG_KERNEL
	help
	  Say Y here if you want the kernel to run a short self-test during
	  bootup. The self-test checks whether common types of locking bugs
	  are detected by debugging mechanisms or not. (if you disable
	  lock debugging then those bugs wont be detected of course.)
	  The following locking APIs are covered: spinlocks, rwlocks,
	  mutexes and rwsems.

config LOCK_TORTURE_TEST
	tristate "torture tests for locking"
	depends on DEBUG_KERNEL
	select TORTURE_TEST
	default n
	help
	  This option provides a kernel module that runs torture tests
	  on kernel locking primitives.  The kernel module may be built
	  after the fact on the running kernel to be tested, if desired.

	  Say Y here if you want kernel locking-primitive torture tests
	  to be built into the kernel.
	  Say M if you want these torture tests to build as a module.
	  Say N if you are unsure.

endmenu # lock debugging

config TRACE_IRQFLAGS
	bool
	help
	  Enables hooks to interrupt enabling and disabling for
	  either tracing or lock debugging.

config STACKTRACE
	bool "Stack backtrace support"
	depends on STACKTRACE_SUPPORT
	help
	  This option causes the kernel to create a /proc/pid/stack for
	  every process, showing its current stack trace.
	  It is also used by various kernel debugging features that require
	  stack trace generation.

config DEBUG_KOBJECT
	bool "kobject debugging"
	depends on DEBUG_KERNEL
	help
	  If you say Y here, some extra kobject debugging messages will be sent
	  to the syslog. 

config DEBUG_KOBJECT_RELEASE
	bool "kobject release debugging"
	depends on DEBUG_OBJECTS_TIMERS
	help
	  kobjects are reference counted objects.  This means that their
	  last reference count put is not predictable, and the kobject can
	  live on past the point at which a driver decides to drop it's
	  initial reference to the kobject gained on allocation.  An
	  example of this would be a struct device which has just been
	  unregistered.

	  However, some buggy drivers assume that after such an operation,
	  the memory backing the kobject can be immediately freed.  This
	  goes completely against the principles of a refcounted object.

	  If you say Y here, the kernel will delay the release of kobjects
	  on the last reference count to improve the visibility of this
	  kind of kobject release bug.

config HAVE_DEBUG_BUGVERBOSE
	bool

config DEBUG_BUGVERBOSE
	bool "Verbose BUG() reporting (adds 70K)" if DEBUG_KERNEL && EXPERT
	depends on BUG && (GENERIC_BUG || HAVE_DEBUG_BUGVERBOSE)
	default y
	help
	  Say Y here to make BUG() panics output the file name and line number
	  of the BUG call as well as the EIP and oops trace.  This aids
	  debugging but costs about 70-100K of memory.

config DEBUG_LIST
	bool "Debug linked list manipulation"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on extended checks in the linked-list
	  walking routines.

	  If unsure, say N.

config DEBUG_PI_LIST
	bool "Debug priority linked list manipulation"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on extended checks in the priority-ordered
	  linked-list (plist) walking routines.  This checks the entire
	  list multiple times during each manipulation.

	  If unsure, say N.

config DEBUG_SG
	bool "Debug SG table operations"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on checks on scatter-gather tables. This can
	  help find problems with drivers that do not properly initialize
	  their sg tables.

	  If unsure, say N.

config DEBUG_NOTIFIERS
	bool "Debug notifier call chains"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on sanity checking for notifier call chains.
	  This is most useful for kernel developers to make sure that
	  modules properly unregister themselves from notifier chains.
	  This is a relatively cheap check but if you care about maximum
	  performance, say N.

config DEBUG_CREDENTIALS
	bool "Debug credential management"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on some debug checking for credential
	  management.  The additional code keeps track of the number of
	  pointers from task_structs to any given cred struct, and checks to
	  see that this number never exceeds the usage count of the cred
	  struct.

	  Furthermore, if SELinux is enabled, this also checks that the
	  security pointer in the cred struct is never seen to be invalid.

	  If unsure, say N.

menu "RCU Debugging"

config PROVE_RCU
	def_bool PROVE_LOCKING && !IPIPE

config PROVE_RCU_REPEATEDLY
	bool "RCU debugging: don't disable PROVE_RCU on first splat"
	depends on PROVE_RCU
	default n
	help
	 By itself, PROVE_RCU will disable checking upon issuing the
	 first warning (or "splat").  This feature prevents such
	 disabling, allowing multiple RCU-lockdep warnings to be printed
	 on a single reboot.

	 Say Y to allow multiple RCU-lockdep warnings per boot.

	 Say N if you are unsure.

config SPARSE_RCU_POINTER
	bool "RCU debugging: sparse-based checks for pointer usage"
	default n
	help
	 This feature enables the __rcu sparse annotation for
	 RCU-protected pointers.  This annotation will cause sparse
	 to flag any non-RCU used of annotated pointers.  This can be
	 helpful when debugging RCU usage.  Please note that this feature
	 is not intended to enforce code cleanliness; it is instead merely
	 a debugging aid.

	 Say Y to make sparse flag questionable use of RCU-protected pointers

	 Say N if you are unsure.

config TORTURE_TEST
	tristate
	default n

config RCU_PERF_TEST
	tristate "performance tests for RCU"
	depends on DEBUG_KERNEL
	select TORTURE_TEST
	select SRCU
	select TASKS_RCU
	default n
	help
	  This option provides a kernel module that runs performance
	  tests on the RCU infrastructure.  The kernel module may be built
	  after the fact on the running kernel to be tested, if desired.

	  Say Y here if you want RCU performance tests to be built into
	  the kernel.
	  Say M if you want the RCU performance tests to build as a module.
	  Say N if you are unsure.

config RCU_TORTURE_TEST
	tristate "torture tests for RCU"
	depends on DEBUG_KERNEL
	select TORTURE_TEST
	select SRCU
	select TASKS_RCU
	default n
	help
	  This option provides a kernel module that runs torture tests
	  on the RCU infrastructure.  The kernel module may be built
	  after the fact on the running kernel to be tested, if desired.

	  Say Y here if you want RCU torture tests to be built into
	  the kernel.
	  Say M if you want the RCU torture tests to build as a module.
	  Say N if you are unsure.

config RCU_TORTURE_TEST_SLOW_PREINIT
	bool "Slow down RCU grace-period pre-initialization to expose races"
	depends on RCU_TORTURE_TEST
	help
	  This option delays grace-period pre-initialization (the
	  propagation of CPU-hotplug changes up the rcu_node combining
	  tree) for a few jiffies between initializing each pair of
	  consecutive rcu_node structures.  This helps to expose races
	  involving grace-period pre-initialization, in other words, it
	  makes your kernel less stable.  It can also greatly increase
	  grace-period latency, especially on systems with large numbers
	  of CPUs.  This is useful when torture-testing RCU, but in
	  almost no other circumstance.

	  Say Y here if you want your system to crash and hang more often.
	  Say N if you want a sane system.

config RCU_TORTURE_TEST_SLOW_PREINIT_DELAY
	int "How much to slow down RCU grace-period pre-initialization"
	range 0 5
	default 3
	depends on RCU_TORTURE_TEST_SLOW_PREINIT
	help
	  This option specifies the number of jiffies to wait between
	  each rcu_node structure pre-initialization step.

config RCU_TORTURE_TEST_SLOW_INIT
	bool "Slow down RCU grace-period initialization to expose races"
	depends on RCU_TORTURE_TEST
	help
	  This option delays grace-period initialization for a few
	  jiffies between initializing each pair of consecutive
	  rcu_node structures.	This helps to expose races involving
	  grace-period initialization, in other words, it makes your
	  kernel less stable.  It can also greatly increase grace-period
	  latency, especially on systems with large numbers of CPUs.
	  This is useful when torture-testing RCU, but in almost no
	  other circumstance.

	  Say Y here if you want your system to crash and hang more often.
	  Say N if you want a sane system.

config RCU_TORTURE_TEST_SLOW_INIT_DELAY
	int "How much to slow down RCU grace-period initialization"
	range 0 5
	default 3
	depends on RCU_TORTURE_TEST_SLOW_INIT
	help
	  This option specifies the number of jiffies to wait between
	  each rcu_node structure initialization.

config RCU_TORTURE_TEST_SLOW_CLEANUP
	bool "Slow down RCU grace-period cleanup to expose races"
	depends on RCU_TORTURE_TEST
	help
	  This option delays grace-period cleanup for a few jiffies
	  between cleaning up each pair of consecutive rcu_node
	  structures.  This helps to expose races involving grace-period
	  cleanup, in other words, it makes your kernel less stable.
	  It can also greatly increase grace-period latency, especially
	  on systems with large numbers of CPUs.  This is useful when
	  torture-testing RCU, but in almost no other circumstance.

	  Say Y here if you want your system to crash and hang more often.
	  Say N if you want a sane system.

config RCU_TORTURE_TEST_SLOW_CLEANUP_DELAY
	int "How much to slow down RCU grace-period cleanup"
	range 0 5
	default 3
	depends on RCU_TORTURE_TEST_SLOW_CLEANUP
	help
	  This option specifies the number of jiffies to wait between
	  each rcu_node structure cleanup operation.

config RCU_CPU_STALL_TIMEOUT
	int "RCU CPU stall timeout in seconds"
	depends on RCU_STALL_COMMON
	range 3 300
	default 21
	help
	  If a given RCU grace period extends more than the specified
	  number of seconds, a CPU stall warning is printed.  If the
	  RCU grace period persists, additional CPU stall warnings are
	  printed at more widely spaced intervals.

config RCU_TRACE
	bool "Enable tracing for RCU"
	depends on DEBUG_KERNEL
	select TRACE_CLOCK
	help
	  This option provides tracing in RCU which presents stats
	  in debugfs for debugging RCU implementation.

	  Say Y here if you want to enable RCU tracing
	  Say N if you are unsure.

config RCU_EQS_DEBUG
	bool "Provide debugging asserts for adding NO_HZ support to an arch"
	depends on DEBUG_KERNEL
	help
	  This option provides consistency checks in RCU's handling of
	  NO_HZ.  These checks have proven quite helpful in detecting
	  bugs in arch-specific NO_HZ code.

	  Say N here if you need ultimate kernel/user switch latencies
	  Say Y if you are unsure

endmenu # "RCU Debugging"

config DEBUG_WQ_FORCE_RR_CPU
	bool "Force round-robin CPU selection for unbound work items"
	depends on DEBUG_KERNEL
	default n
	help
	  Workqueue used to implicitly guarantee that work items queued
	  without explicit CPU specified are put on the local CPU.  This
	  guarantee is no longer true and while local CPU is still
	  preferred work items may be put on foreign CPUs.  Kernel
	  parameter "workqueue.debug_force_rr_cpu" is added to force
	  round-robin CPU selection to flush out usages which depend on the
	  now broken guarantee.  This config option enables the debug
	  feature by default.  When enabled, memory and cache locality will
	  be impacted.

config DEBUG_BLOCK_EXT_DEVT
        bool "Force extended block device numbers and spread them"
	depends on DEBUG_KERNEL
	depends on BLOCK
	default n
	help
	  BIG FAT WARNING: ENABLING THIS OPTION MIGHT BREAK BOOTING ON
	  SOME DISTRIBUTIONS.  DO NOT ENABLE THIS UNLESS YOU KNOW WHAT
	  YOU ARE DOING.  Distros, please enable this and fix whatever
	  is broken.

	  Conventionally, block device numbers are allocated from
	  predetermined contiguous area.  However, extended block area
	  may introduce non-contiguous block device numbers.  This
	  option forces most block device numbers to be allocated from
	  the extended space and spreads them to discover kernel or
	  userland code paths which assume predetermined contiguous
	  device number allocation.

	  Note that turning on this debug option shuffles all the
	  device numbers for all IDE and SCSI devices including libata
	  ones, so root partition specified using device number
	  directly (via rdev or root=MAJ:MIN) won't work anymore.
	  Textual device names (root=/dev/sdXn) will continue to work.

	  Say N if you are unsure.

config CPU_HOTPLUG_STATE_CONTROL
	bool "Enable CPU hotplug state control"
	depends on DEBUG_KERNEL
	depends on HOTPLUG_CPU
	default n
	help
	  Allows to write steps between "offline" and "online" to the CPUs
	  sysfs target file so states can be stepped granular. This is a debug
	  option for now as the hotplug machinery cannot be stopped and
	  restarted at arbitrary points yet.

	  Say N if your are unsure.

config NOTIFIER_ERROR_INJECTION
	tristate "Notifier error injection"
	depends on DEBUG_KERNEL
	select DEBUG_FS
	help
	  This option provides the ability to inject artificial errors to
	  specified notifier chain callbacks. It is useful to test the error
	  handling of notifier call chain failures.

	  Say N if unsure.

config CPU_NOTIFIER_ERROR_INJECT
	tristate "CPU notifier error injection module"
	depends on HOTPLUG_CPU && NOTIFIER_ERROR_INJECTION
	help
	  This option provides a kernel module that can be used to test
	  the error handling of the cpu notifiers by injecting artificial
	  errors to CPU notifier chain callbacks.  It is controlled through
	  debugfs interface under /sys/kernel/debug/notifier-error-inject/cpu

	  If the notifier call chain should be failed with some events
	  notified, write the error code to "actions/<notifier event>/error".

	  Example: Inject CPU offline error (-1 == -EPERM)

	  # cd /sys/kernel/debug/notifier-error-inject/cpu
	  # echo -1 > actions/CPU_DOWN_PREPARE/error
	  # echo 0 > /sys/devices/system/cpu/cpu1/online
	  bash: echo: write error: Operation not permitted

	  To compile this code as a module, choose M here: the module will
	  be called cpu-notifier-error-inject.

	  If unsure, say N.

config PM_NOTIFIER_ERROR_INJECT
	tristate "PM notifier error injection module"
	depends on PM && NOTIFIER_ERROR_INJECTION
	default m if PM_DEBUG
	help
	  This option provides the ability to inject artificial errors to
	  PM notifier chain callbacks.  It is controlled through debugfs
	  interface /sys/kernel/debug/notifier-error-inject/pm

	  If the notifier call chain should be failed with some events
	  notified, write the error code to "actions/<notifier event>/error".

	  Example: Inject PM suspend error (-12 = -ENOMEM)

	  # cd /sys/kernel/debug/notifier-error-inject/pm/
	  # echo -12 > actions/PM_SUSPEND_PREPARE/error
	  # echo mem > /sys/power/state
	  bash: echo: write error: Cannot allocate memory

	  To compile this code as a module, choose M here: the module will
	  be called pm-notifier-error-inject.

	  If unsure, say N.

config OF_RECONFIG_NOTIFIER_ERROR_INJECT
	tristate "OF reconfig notifier error injection module"
	depends on OF_DYNAMIC && NOTIFIER_ERROR_INJECTION
	help
	  This option provides the ability to inject artificial errors to
	  OF reconfig notifier chain callbacks.  It is controlled
	  through debugfs interface under
	  /sys/kernel/debug/notifier-error-inject/OF-reconfig/

	  If the notifier call chain should be failed with some events
	  notified, write the error code to "actions/<notifier event>/error".

	  To compile this code as a module, choose M here: the module will
	  be called of-reconfig-notifier-error-inject.

	  If unsure, say N.

config NETDEV_NOTIFIER_ERROR_INJECT
	tristate "Netdev notifier error injection module"
	depends on NET && NOTIFIER_ERROR_INJECTION
	help
	  This option provides the ability to inject artificial errors to
	  netdevice notifier chain callbacks.  It is controlled through debugfs
	  interface /sys/kernel/debug/notifier-error-inject/netdev

	  If the notifier call chain should be failed with some events
	  notified, write the error code to "actions/<notifier event>/error".

	  Example: Inject netdevice mtu change error (-22 = -EINVAL)

	  # cd /sys/kernel/debug/notifier-error-inject/netdev
	  # echo -22 > actions/NETDEV_CHANGEMTU/error
	  # ip link set eth0 mtu 1024
	  RTNETLINK answers: Invalid argument

	  To compile this code as a module, choose M here: the module will
	  be called netdev-notifier-error-inject.

	  If unsure, say N.

config FAULT_INJECTION
	bool "Fault-injection framework"
	depends on DEBUG_KERNEL
	help
	  Provide fault-injection framework.
	  For more details, see Documentation/fault-injection/.

config FAILSLAB
	bool "Fault-injection capability for kmalloc"
	depends on FAULT_INJECTION
	depends on SLAB || SLUB
	help
	  Provide fault-injection capability for kmalloc.

config FAIL_PAGE_ALLOC
	bool "Fault-injection capabilitiy for alloc_pages()"
	depends on FAULT_INJECTION
	help
	  Provide fault-injection capability for alloc_pages().

config FAIL_MAKE_REQUEST
	bool "Fault-injection capability for disk IO"
	depends on FAULT_INJECTION && BLOCK
	help
	  Provide fault-injection capability for disk IO.

config FAIL_IO_TIMEOUT
	bool "Fault-injection capability for faking disk interrupts"
	depends on FAULT_INJECTION && BLOCK
	help
	  Provide fault-injection capability on end IO handling. This
	  will make the block layer "forget" an interrupt as configured,
	  thus exercising the error handling.

	  Only works with drivers that use the generic timeout handling,
	  for others it wont do anything.

config FAIL_MMC_REQUEST
	bool "Fault-injection capability for MMC IO"
	depends on FAULT_INJECTION_DEBUG_FS && MMC
	help
	  Provide fault-injection capability for MMC IO.
	  This will make the mmc core return data errors. This is
	  useful to test the error handling in the mmc block device
	  and to test how the mmc host driver handles retries from
	  the block device.

config FAIL_FUTEX
	bool "Fault-injection capability for futexes"
	select DEBUG_FS
	depends on FAULT_INJECTION && FUTEX
	help
	  Provide fault-injection capability for futexes.

config FAULT_INJECTION_DEBUG_FS
	bool "Debugfs entries for fault-injection capabilities"
	depends on FAULT_INJECTION && SYSFS && DEBUG_FS
	help
	  Enable configuration of fault-injection capabilities via debugfs.

config FAULT_INJECTION_STACKTRACE_FILTER
	bool "stacktrace filter for fault-injection capabilities"
	depends on FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT
	depends on !X86_64
	select STACKTRACE
	select FRAME_POINTER if !MIPS && !PPC && !S390 && !MICROBLAZE && !ARM_UNWIND && !ARC && !SCORE
	help
	  Provide stacktrace filter for fault-injection capabilities

config LATENCYTOP
	bool "Latency measuring infrastructure"
	depends on DEBUG_KERNEL
	depends on STACKTRACE_SUPPORT
	depends on PROC_FS
	select FRAME_POINTER if !MIPS && !PPC && !S390 && !MICROBLAZE && !ARM_UNWIND && !ARC
	select KALLSYMS
	select KALLSYMS_ALL
	select STACKTRACE
	select SCHEDSTATS
	select SCHED_DEBUG
	help
	  Enable this option if you want to use the LatencyTOP tool
	  to find out which userspace is blocking on what kernel operations.

source kernel/trace/Kconfig

menu "Runtime Testing"

config LKDTM
	tristate "Linux Kernel Dump Test Tool Module"
	depends on DEBUG_FS
	depends on BLOCK
	default n
	help
	This module enables testing of the different dumping mechanisms by
	inducing system failures at predefined crash points.
	If you don't need it: say N
	Choose M here to compile this code as a module. The module will be
	called lkdtm.

	Documentation on how to use the module can be found in
	Documentation/fault-injection/provoke-crashes.txt

config TEST_LIST_SORT
	bool "Linked list sorting test"
	depends on DEBUG_KERNEL
	help
	  Enable this to turn on 'list_sort()' function test. This test is
	  executed only once during system boot, so affects only boot time.

	  If unsure, say N.

config KPROBES_SANITY_TEST
	bool "Kprobes sanity tests"
	depends on DEBUG_KERNEL
	depends on KPROBES
	default n
	help
	  This option provides for testing basic kprobes functionality on
	  boot. A sample kprobe, jprobe and kretprobe are inserted and
	  verified for functionality.

	  Say N if you are unsure.

config BACKTRACE_SELF_TEST
	tristate "Self test for the backtrace code"
	depends on DEBUG_KERNEL
	default n
	help
	  This option provides a kernel module that can be used to test
	  the kernel stack backtrace code. This option is not useful
	  for distributions or general kernels, but only for kernel
	  developers working on architecture code.

	  Note that if you want to also test saved backtraces, you will
	  have to enable STACKTRACE as well.

	  Say N if you are unsure.

config RBTREE_TEST
	tristate "Red-Black tree test"
	depends on DEBUG_KERNEL
	help
	  A benchmark measuring the performance of the rbtree library.
	  Also includes rbtree invariant checks.

config INTERVAL_TREE_TEST
	tristate "Interval tree test"
	depends on m && DEBUG_KERNEL
	select INTERVAL_TREE
	help
	  A benchmark measuring the performance of the interval tree library

config PERCPU_TEST
	tristate "Per cpu operations test"
	depends on m && DEBUG_KERNEL
	help
	  Enable this option to build test module which validates per-cpu
	  operations.

	  If unsure, say N.

config ATOMIC64_SELFTEST
	bool "Perform an atomic64_t self-test at boot"
	help
	  Enable this option to test the atomic64_t functions at boot.

	  If unsure, say N.

config ASYNC_RAID6_TEST
	tristate "Self test for hardware accelerated raid6 recovery"
	depends on ASYNC_RAID6_RECOV
	select ASYNC_MEMCPY
	---help---
	  This is a one-shot self test that permutes through the
	  recovery of all the possible two disk failure scenarios for a
	  N-disk array.  Recovery is performed with the asynchronous
	  raid6 recovery routines, and will optionally use an offload
	  engine if one is available.

	  If unsure, say N.

config TEST_HEXDUMP
	tristate "Test functions located in the hexdump module at runtime"

config TEST_STRING_HELPERS
	tristate "Test functions located in the string_helpers module at runtime"

config TEST_KSTRTOX
	tristate "Test kstrto*() family of functions at runtime"

config TEST_PRINTF
	tristate "Test printf() family of functions at runtime"

config TEST_BITMAP
	tristate "Test bitmap_*() family of functions at runtime"
	default n
	help
	  Enable this option to test the bitmap functions at boot.

	  If unsure, say N.

config TEST_UUID
	tristate "Test functions located in the uuid module at runtime"

config TEST_RHASHTABLE
	tristate "Perform selftest on resizable hash table"
	default n
	help
	  Enable this option to test the rhashtable functions at boot.

	  If unsure, say N.

config TEST_HASH
	tristate "Perform selftest on hash functions"
	default n
	help
	  Enable this option to test the kernel's integer (<linux/hash,h>)
	  and string (<linux/stringhash.h>) hash functions on boot
	  (or module load).

	  This is intended to help people writing architecture-specific
	  optimized versions.  If unsure, say N.

endmenu # runtime tests

config PROVIDE_OHCI1394_DMA_INIT
	bool "Remote debugging over FireWire early on boot"
	depends on PCI && X86
	help
	  If you want to debug problems which hang or crash the kernel early
	  on boot and the crashing machine has a FireWire port, you can use
	  this feature to remotely access the memory of the crashed machine
	  over FireWire. This employs remote DMA as part of the OHCI1394
	  specification which is now the standard for FireWire controllers.

	  With remote DMA, you can monitor the printk buffer remotely using
	  firescope and access all memory below 4GB using fireproxy from gdb.
	  Even controlling a kernel debugger is possible using remote DMA.

	  Usage:

	  If ohci1394_dma=early is used as boot parameter, it will initialize
	  all OHCI1394 controllers which are found in the PCI config space.

	  As all changes to the FireWire bus such as enabling and disabling
	  devices cause a bus reset and thereby disable remote DMA for all
	  devices, be sure to have the cable plugged and FireWire enabled on
	  the debugging host before booting the debug target for debugging.

	  This code (~1k) is freed after boot. By then, the firewire stack
	  in charge of the OHCI-1394 controllers should be used instead.

	  See Documentation/debugging-via-ohci1394.txt for more information.

config DMA_API_DEBUG
	bool "Enable debugging of DMA-API usage"
	depends on HAVE_DMA_API_DEBUG
	help
	  Enable this option to debug the use of the DMA API by device drivers.
	  With this option you will be able to detect common bugs in device
	  drivers like double-freeing of DMA mappings or freeing mappings that
	  were never allocated.

	  This also attempts to catch cases where a page owned by DMA is
	  accessed by the cpu in a way that could cause data corruption.  For
	  example, this enables cow_user_page() to check that the source page is
	  not undergoing DMA.

	  This option causes a performance degradation.  Use only if you want to
	  debug device drivers and dma interactions.

	  If unsure, say N.

config TEST_LKM
	tristate "Test module loading with 'hello world' module"
	default n
	depends on m
	help
	  This builds the "test_module" module that emits "Hello, world"
	  on printk when loaded. It is designed to be used for basic
	  evaluation of the module loading subsystem (for example when
	  validating module verification). It lacks any extra dependencies,
	  and will not normally be loaded by the system unless explicitly
	  requested by name.

	  If unsure, say N.

config TEST_USER_COPY
	tristate "Test user/kernel boundary protections"
	default n
	depends on m
	help
	  This builds the "test_user_copy" module that runs sanity checks
	  on the copy_to/from_user infrastructure, making sure basic
	  user/kernel boundary testing is working. If it fails to load,
	  a regression has been detected in the user/kernel memory boundary
	  protections.

	  If unsure, say N.

config TEST_BPF
	tristate "Test BPF filter functionality"
	default n
	depends on m && NET
	help
	  This builds the "test_bpf" module that runs various test vectors
	  against the BPF interpreter or BPF JIT compiler depending on the
	  current setting. This is in particular useful for BPF JIT compiler
	  development, but also to run regression tests against changes in
	  the interpreter code. It also enables test stubs for eBPF maps and
	  verifier used by user space verifier testsuite.

	  If unsure, say N.

config TEST_FIRMWARE
	tristate "Test firmware loading via userspace interface"
	default n
	depends on FW_LOADER
	help
	  This builds the "test_firmware" module that creates a userspace
	  interface for testing firmware loading. This can be used to
	  control the triggering of firmware loading without needing an
	  actual firmware-using device. The contents can be rechecked by
	  userspace.

	  If unsure, say N.

config TEST_UDELAY
	tristate "udelay test driver"
	default n
	help
	  This builds the "udelay_test" module that helps to make sure
	  that udelay() is working properly.

	  If unsure, say N.

config MEMTEST
	bool "Memtest"
	depends on HAVE_MEMBLOCK
	---help---
	  This option adds a kernel parameter 'memtest', which allows memtest
	  to be set.
	        memtest=0, mean disabled; -- default
	        memtest=1, mean do 1 test pattern;
	        ...
	        memtest=17, mean do 17 test patterns.
	  If you are unsure how to answer this question, answer N.

config TEST_STATIC_KEYS
	tristate "Test static keys"
	default n
	depends on m
	help
	  Test the static key interfaces.

	  If unsure, say N.

source "samples/Kconfig"

source "lib/Kconfig.kgdb"

source "lib/Kconfig.ubsan"

config ARCH_HAS_DEVMEM_IS_ALLOWED
	bool

config STRICT_DEVMEM
	bool "Filter access to /dev/mem"
	depends on MMU
	depends on ARCH_HAS_DEVMEM_IS_ALLOWED
	default y if TILE || PPC
	---help---
	  If this option is disabled, you allow userspace (root) access to all
	  of memory, including kernel and userspace memory. Accidental
	  access to this is obviously disastrous, but specific access can
	  be used by people debugging the kernel. Note that with PAT support
	  enabled, even in this case there are restrictions on /dev/mem
	  use due to the cache aliasing requirements.

	  If this option is switched on, and IO_STRICT_DEVMEM=n, the /dev/mem
	  file only allows userspace access to PCI space and the BIOS code and
	  data regions.  This is sufficient for dosemu and X and all common
	  users of /dev/mem.

	  If in doubt, say Y.

config IO_STRICT_DEVMEM
	bool "Filter I/O access to /dev/mem"
	depends on STRICT_DEVMEM
	---help---
	  If this option is disabled, you allow userspace (root) access to all
	  io-memory regardless of whether a driver is actively using that
	  range.  Accidental access to this is obviously disastrous, but
	  specific access can be used by people debugging kernel drivers.

	  If this option is switched on, the /dev/mem file only allows
	  userspace access to *idle* io-memory ranges (see /proc/iomem) This
	  may break traditional users of /dev/mem (dosemu, legacy X, etc...)
	  if the driver using a given range cannot be disabled.

	  If in doubt, say Y.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               589ba7280d77cb6962a44a4d3b8c8c85  usr/share/doc/neovim-runtime/changelog.Debian.gz
266f039a22e284e26c0de30ec05c40c1  usr/share/doc/neovim-runtime/copyright
8df7abf65732a73a752761bd9f4bf727  usr/share/locale/af/LC_MESSAGES/nvim.mo
862391c9920ac5fdae0cc943522181ae  usr/share/locale/ca/LC_MESSAGES/nvim.mo
ec1d55026261caf16d5313ef0f5166b0  usr/share/locale/cs.cp1250/LC_MESSAGES/nvim.mo
f91229520dda280034307f6559550bf7  usr/share/locale/cs/LC_MESSAGES/nvim.mo
fa124b0e891afcc34b5334593f57b6f5  usr/share/locale/de/LC_MESSAGES/nvim.mo
113094c331f75bb2761474cd606a223a  usr/share/locale/en_GB/LC_MESSAGES/nvim.mo
58dd68e3f871f9db6173135c58e99c80  usr/share/locale/eo/LC_MESSAGES/nvim.mo
b430aff008804efc6a3f2b40593034ca  usr/share/locale/es/LC_MESSAGES/nvim.mo
5159771b3ad3db432659569f2944a0cf  usr/share/locale/fi/LC_MESSAGES/nvim.mo
ded51a5b89cd6816b5d380962bcaebe2  usr/share/locale/fr/LC_MESSAGES/nvim.mo
d85bfffb9af374b201519b68815345b1  usr/share/locale/ga/LC_MESSAGES/nvim.mo
9f4751731aae6a4d82161af356f04e73  usr/share/locale/it/LC_MESSAGES/nvim.mo
5922499bd1764e48466dcd2d0d4384b2  usr/share/locale/ja.euc-jp/LC_MESSAGES/nvim.mo
e57835fd4c121f13c0eedc97a0e418a6  usr/share/locale/ja/LC_MESSAGES/nvim.mo
96433e2aa94521d9b0518b625f79088a  usr/share/locale/ko.UTF-8/LC_MESSAGES/nvim.mo
61b085791ab2e0fdf3d68025b8666c05  usr/share/locale/nb/LC_MESSAGES/nvim.mo
69c4679648f4282fe7a820db8b328792  usr/share/locale/nl/LC_MESSAGES/nvim.mo
61b085791ab2e0fdf3d68025b8666c05  usr/share/locale/no/LC_MESSAGES/nvim.mo
258ebe7f8b9f4402c2326565c0092f15  usr/share/locale/pl.UTF-8/LC_MESSAGES/nvim.mo
15b2f97ea2bfff8693529f2cf463306b  usr/share/locale/pt_BR/LC_MESSAGES/nvim.mo
1557ef0192083f62d8e4f0528387b027  usr/share/locale/ru/LC_MESSAGES/nvim.mo
a10503d4924718855b9c1f8496763637  usr/share/locale/sk.cp1250/LC_MESSAGES/nvim.mo
6584e55cd88983cdee87e088e6b2161e  usr/share/locale/sk/LC_MESSAGES/nvim.mo
704fd440dd382280b85bab503f70f18a  usr/share/locale/sv/LC_MESSAGES/nvim.mo
626058803bf10d64fb4806d2646989b5  usr/share/locale/uk/LC_MESSAGES/nvim.mo
723dfa79e9e6b7b128b39b3f1957a30e  usr/share/locale/vi/LC_MESSAGES/nvim.mo
3bbd66e7f72c3eec6535d05d00a6f128  usr/share/locale/zh_CN.UTF-8/LC_MESSAGES/nvim.mo
90b20cbd96887fc4a736afcb412174bf  usr/share/locale/zh_TW.UTF-8/LC_MESSAGES/nvim.mo
9a19ab65b7d1d8630b39e3e74a75cb1c  usr/share/man/man1/nvim.1.gz
ee60eb287811fb815fe65f0358d8fc71  usr/share/nvim/runtime/autoload/ada.vim
2e68ef6a59541539a213268aa51d90d7  usr/share/nvim/runtime/autoload/adacomplete.vim
baa4930dfde3da996038bc0cc14882a2  usr/share/nvim/runtime/autoload/ccomplete.vim
6849c690e07d43c0cc62332248c7b176  usr/share/nvim/runtime/autoload/clojurecomplete.vim
4a7305c2492fcdbd9ca658f428037831  usr/share/nvim/runtime/autoload/csscomplete.vim
852a3d8c5283c21d0710458c40c6f477  usr/share/nvim/runtime/autoload/decada.vim
12c86e4b4d978dcbd39a9068afb31e14  usr/share/nvim/runtime/autoload/gnat.vim
fcfd02d74902814743e78dfb075b6c1f  usr/share/nvim/runtime/autoload/gzip.vim
55f0407882ea9d7f9a92207467a63656  usr/share/nvim/runtime/autoload/health.vim
7dac4037e5d85040951babe35e319bf2  usr/share/nvim/runtime/autoload/health/nvim.vim
0065d7ed86317d86b42bde21d996c1ee  usr/share/nvim/runtime/autoload/health/provider.vim
207d2c82ea63d8ad7bab789e0bf553ba  usr/share/nvim/runtime/autoload/htmlcomplete.vim
2b939814050b10dab16f7d2c9af2c130  usr/share/nvim/runtime/autoload/javascriptcomplete.vim
6feb1e390755b1bf987c3cdf5d42bfaa  usr/share/nvim/runtime/autoload/man.vim
12dc2cf34bbd96e5ac8940bc3d4194d3  usr/share/nvim/runtime/autoload/msgpack.vim
fee819e42560464796d56fdfe013d8ab  usr/share/nvim/runtime/autoload/netrw.vim
230271ab58a96771c1d903c64f54d403  usr/share/nvim/runtime/autoload/netrwFileHandlers.vim
65abf3a819373d4df93e75221a172a19  usr/share/nvim/runtime/autoload/netrwSettings.vim
2672913c09f2fdca132a9e5185be6fc8  usr/share/nvim/runtime/autoload/netrw_gitignore.vim
1f1968eab49f4a4639b319c82479506b  usr/share/nvim/runtime/autoload/paste.vim
f540aef3e7ceb1d29686426303ed74e4  usr/share/nvim/runtime/autoload/phpcomplete.vim
3858694a436862e9c157c89f6223c532  usr/share/nvim/runtime/autoload/provider/clipboard.vim
ed398bd3b1cc1255b2f156b9fa92102f  usr/share/nvim/runtime/autoload/provider/python.vim
a8961a41d3fa226f806011ff9bcd7177  usr/share/nvim/runtime/autoload/provider/python3.vim
3edbaaa767751094cb22df818605f259  usr/share/nvim/runtime/autoload/provider/pythonx.vim
d64be63086715b98229d7458fca54761  usr/share/nvim/runtime/autoload/provider/ruby.vim
85e1722f4c48577faa9fb89f2ed1221c  usr/share/nvim/runtime/autoload/provider/script_host.rb
bf7d6d687b36cb69c6c8a801ce5cea1f  usr/share/nvim/runtime/autoload/python3complete.vim
c9d639e3f2bf2f79b5fed57f59f7fac3  usr/share/nvim/runtime/autoload/pythoncomplete.vim
0a2c37325528690308b9ff8c0b54ddd0  usr/share/nvim/runtime/autoload/remote/define.vim
8a5abb2bb90b490616556b2978d04bb2  usr/share/nvim/runtime/autoload/remote/host.vim
fb8152bfa32f5e875801778587ec4718  usr/share/nvim/runtime/autoload/rubycomplete.vim
c555be763ecefd53b8952a0680a718ad  usr/share/nvim/runtime/autoload/shada.vim
cc6ca9168bb2153d66f3fd41715ac90b  usr/share/nvim/runtime/autoload/spellfile.vim
02dc48bdf71d3133f55e6f3cc873a36d  usr/share/nvim/runtime/autoload/sqlcomplete.vim
d0834912e42dbd1b564f726b3e5e97d1  usr/share/nvim/runtime/autoload/syntaxcomplete.vim
5e165e38d9e9b7dd1bf77d56530d11a1  usr/share/nvim/runtime/autoload/tar.vim
7939fa6b3e557dff30b02ed81b65316d  usr/share/nvim/runtime/autoload/tohtml.vim
701fc37ef3b68063f87ebf48cdef87c8  usr/share/nvim/runtime/autoload/tutor.vim
ce232ae66621ebf5b7eac98ecf50dd1a  usr/share/nvim/runtime/autoload/vimexpect.vim
e31e8146e8d7bd5e0245676c1516f45e  usr/share/nvim/runtime/autoload/xml/html32.vim
94a90af0e66e242af5a0742b07f3ecd9  usr/share/nvim/runtime/autoload/xml/html401f.vim
a9366d9aade0471a6fc8e35fc8049c78  usr/share/nvim/runtime/autoload/xml/html401s.vim
3152e62866a11edbeebd38b2b92ea947  usr/share/nvim/runtime/autoload/xml/html401t.vim
29a98f426d44e6c577036e8fa3d062ef  usr/share/nvim/runtime/autoload/xml/html40f.vim
5313d009d711142cc0ba0666f3ae1f5d  usr/share/nvim/runtime/autoload/xml/html40s.vim
682b28a4d6381e150727aa9a342afc17  usr/share/nvim/runtime/autoload/xml/html40t.vim
182c3d69746f67afcd36cc7fd6ae9ef0  usr/share/nvim/runtime/autoload/xml/xhtml10f.vim
d0bdac7d1719a6fbeaab79de51be0d7b  usr/share/nvim/runtime/autoload/xml/xhtml10s.vim
0d85c774b9096f1ec19df4ac1b99563c  usr/share/nvim/runtime/autoload/xml/xhtml10t.vim
27845aee34f67b7eb35fe424a71e8eef  usr/share/nvim/runtime/autoload/xml/xhtml11.vim
98beb90a349771cc18363d6964e4aff3  usr/share/nvim/runtime/autoload/xml/xsd.vim
11ee9faa6d69635986b0e320447e2f30  usr/share/nvim/runtime/autoload/xml/xsl.vim
49417c92918e35972c6386fda8245725  usr/share/nvim/runtime/autoload/xmlcomplete.vim
0150e1b07c0bde2ba6739041756ae879  usr/share/nvim/runtime/autoload/zip.vim
1d0c1e34bb5ba239597c75b900bd7756  usr/share/nvim/runtime/bugreport.vim
07ec7dc8f16f7582efa8914a5c5f5ee9  usr/share/nvim/runtime/colors/blue.vim
73045eb8ee7f12d9492090479d2a699e  usr/share/nvim/runtime/colors/darkblue.vim
0fa61e5a87822fb3a516cfe9d5208f28  usr/share/nvim/runtime/colors/default.vim
ef77d85d32c89ae3e82bbbe0b8cb56b6  usr/share/nvim/runtime/colors/delek.vim
424124cea5d1d73daba3c53d37296400  usr/share/nvim/runtime/colors/desert.vim
ba5a9ea6aaf7c9ba29af00c81c53f6ef  usr/share/nvim/runtime/colors/elflord.vim
c6e675131c8f03ae8acbc332bd748b87  usr/share/nvim/runtime/colors/evening.vim
fde17cd92977117d570f10b97a455fe7  usr/share/nvim/runtime/colors/industry.vim
fa2103fe5bca043a3c56e9f3bfc9a937  usr/share/nvim/runtime/colors/koehler.vim
d3b29d942cddfd36f026c1173651c619  usr/share/nvim/runtime/colors/morning.vim
e86678597d808f39a622423c384958ac  usr/share/nvim/runtime/colors/murphy.vim
5604e9b96fa423b24c836739d76d4b53  usr/share/nvim/runtime/colors/pablo.vim
d8d4868c9fa2d637b3aeadae0c5f48c8  usr/share/nvim/runtime/colors/peachpuff.vim
fae89451730ad795c2c802079ba1bcaa  usr/share/nvim/runtime/colors/ron.vim
7a886e50928aa79a15096ddf9ec93cfe  usr/share/nvim/runtime/colors/shine.vim
4bbc7d047c83ae43b7a4b9bbb8f22993  usr/share/nvim/runtime/colors/slate.vim
eae9165de98058a3bf9eabae662681f2  usr/share/nvim/runtime/colors/torte.vim
0323e102fffc67a3cd0a84d82e6267ac  usr/share/nvim/runtime/colors/zellner.vim
5cc1e7ee30041a9e717418003e702482  usr/share/nvim/runtime/compiler/ant.vim
2ef1d76541de283f5c245ff6be5e5129  usr/share/nvim/runtime/compiler/bcc.vim
72501d7cb955a7ea8f1fab7e64153183  usr/share/nvim/runtime/compiler/bdf.vim
0c62238b51b7010ce525f6d890cdba16  usr/share/nvim/runtime/compiler/checkstyle.vim
e731d2964765415755c994948b322735  usr/share/nvim/runtime/compiler/cs.vim
863c886ca3935d9ff5fa501f6764af15  usr/share/nvim/runtime/compiler/cucumber.vim
4d2a461d202ed7049193f7a17af8bbae  usr/share/nvim/runtime/compiler/decada.vim
685dcf5c740c5beec49ef976d9d15d17  usr/share/nvim/runtime/compiler/dot.vim
7cc2510f06d11e58030b54badd6653a7  usr/share/nvim/runtime/compiler/erlang.vim
95a517db65a3a376d0301f457dbb95c3  usr/share/nvim/runtime/compiler/eruby.vim
d0e1424abb2e3f17707618a499c29998  usr/share/nvim/runtime/compiler/fortran_F.vim
03802b2c99db9eeca07e25c1c89b7e44  usr/share/nvim/runtime/compiler/fortran_cv.vim
6eaccce95c588a828377e6220717a1f9  usr/share/nvim/runtime/compiler/fortran_elf90.vim
d44126af80c1fa6c40d01ba929007752  usr/share/nvim/runtime/compiler/fortran_g77.vim
d46d7accf6570f7e5ac2a5709b6f79cf  usr/share/nvim/runtime/compiler/fortran_lf95.vim
09280649431a3f84b4669c7a1a3b3ced  usr/share/nvim/runtime/compiler/fpc.vim
e2848bdb30d409a560fa59b19da8964f  usr/share/nvim/runtime/compiler/g95.vim
81e577843c0deb1cda09a910a2604255  usr/share/nvim/runtime/compiler/gcc.vim
94c919e77532ab49305a2b04b8f8844d  usr/share/nvim/runtime/compiler/gfortran.vim
7d16f5716a1af44a32bab2a6514f9c9e  usr/share/nvim/runtime/compiler/gnat.vim
68164a633cfaa32217a7be2a9c1906e6  usr/share/nvim/runtime/compiler/go.vim
c148e8a1be6986e75fd9489301740c60  usr/share/nvim/runtime/compiler/haml.vim
df92aa990eae0cb95b542221cb9a4e97  usr/share/nvim/runtime/compiler/hp_acc.vim
139cbe90bc1b3e4fae9e01837d8d77b9  usr/share/nvim/runtime/compiler/icc.vim
e8489e7ab7740625c3c30cb0058153b4  usr/share/nvim/runtime/compiler/ifort.vim
bc03880164830be9293f9c5cd71c709f  usr/share/nvim/runtime/compiler/intel.vim
f7a7b01ad76d40034341294b9da35c1d  usr/share/nvim/runtime/compiler/irix5_c.vim
af4b2c05f8836e7aac7683f2dadbd475  usr/share/nvim/runtime/compiler/irix5_cpp.vim
9f09aef961fb9d93ff2b4a7c098818fc  usr/share/nvim/runtime/compiler/javac.vim
62c1c447863b8ec9dc2839461f905f26  usr/share/nvim/runtime/compiler/jikes.vim
064bf4c0933abe89e97d969fe42f537e  usr/share/nvim/runtime/compiler/mcs.vim
7197fc1af69c330c44e7028b06efce77  usr/share/nvim/runtime/compiler/mips_c.vim
f075afb9c84b634aa238870a2bee2372  usr/share/nvim/runtime/compiler/mipspro_c89.vim
7cdaf75ede4bfffd027b5f28f60aa9cd  usr/share/nvim/runtime/compiler/mipspro_cpp.vim
8bb85fc62069d2ee0ab634b6ce0ec78a  usr/share/nvim/runtime/compiler/modelsim_vcom.vim
8a0f6598bdc693ca0e9bf821d6581bfd  usr/share/nvim/runtime/compiler/msbuild.vim
42f04f072c7f15f35f51b97db9a5a25a  usr/share/nvim/runtime/compiler/msvc.vim
57e0cb2068d4eccfe359ea31f9f30590  usr/share/nvim/runtime/compiler/neato.vim
a6aef2300a145e3bdc1c84aec5ac2f85  usr/share/nvim/runtime/compiler/ocaml.vim
ef18f7642b06e150331599770558c8e4  usr/share/nvim/runtime/compiler/onsgmls.vim
f8be2b4192779b26d54ff0334f14bda5  usr/share/nvim/runtime/compiler/pbx.vim
bb237628cedf2e97abf5a523f5496173  usr/share/nvim/runtime/compiler/perl.vim
6f3f14c4f416461416ec31685b1d8dd2  usr/share/nvim/runtime/compiler/php.vim
473c0a9272c724de81e6023133fd55a1  usr/share/nvim/runtime/compiler/pyunit.vim
7d4ef264696a45029da8b456ae36994b  usr/share/nvim/runtime/compiler/rake.vim
d4fe3688628b21ee32b83e589b1a266c  usr/share/nvim/runtime/compiler/rspec.vim
d5610a59ce18bb50aaa7da6883a09b00  usr/share/nvim/runtime/compiler/rst.vim
a926250e5ceb4d41fd4442ddd404a214  usr/share/nvim/runtime/compiler/ruby.vim
3a4060f2aa2679f5ee6484f13f670e51  usr/share/nvim/runtime/compiler/rubyunit.vim
178484d7c2fce7ef4af51c438208a022  usr/share/nvim/runtime/compiler/sass.vim
7bad6237213a204202f42b622203d9b8  usr/share/nvim/runtime/compiler/se.vim
b348ac86a93a7ac484f8a9591dee1a69  usr/share/nvim/runtime/compiler/splint.vim
289846eed79c0f68c6123eddbfd14816  usr/share/nvim/runtime/compiler/tcl.vim
883e98a039ff8d8613289483d573ed3f  usr/share/nvim/runtime/compiler/tex.vim
8e3519b294a6fedf246fcf83e8f9ca10  usr/share/nvim/runtime/compiler/tidy.vim
4a1da4d4de202f7088e0139b7f9a6508  usr/share/nvim/runtime/compiler/xbuild.vim
ca72fcc1753250ba47b18e015601f042  usr/share/nvim/runtime/compiler/xmllint.vim
0ad0dcb95e79af87d03d732a9f87624b  usr/share/nvim/runtime/compiler/xmlwf.vim
f7453358491e878cb558e74a9e6c6939  usr/share/nvim/runtime/delmenu.vim
8afc371127c92171298c46541f993477  usr/share/nvim/runtime/doc/api.txt
bde8f3b4a1dc690f7a256413eae1476e  usr/share/nvim/runtime/doc/arabic.txt
b4f0c5b630d827476462a485f86dfc86  usr/share/nvim/runtime/doc/autocmd.txt
cfefae3634c2cfd9288a031381ff141d  usr/share/nvim/runtime/doc/change.txt
e5b3057cf048bc87e16e1b4e6afb87e3  usr/share/nvim/runtime/doc/cmdline.txt
ccd368a858aeb7588278f3b5bfe44ac7  usr/share/nvim/runtime/doc/debug.txt
45c9e68f849221d368f3c596f8c4cd04  usr/share/nvim/runtime/doc/deprecated.txt
d8ab9b55c27c88431da0ff510e5f0aa6  usr/share/nvim/runtime/doc/develop.txt
6cd21b71381e23f8810f68b83c6199a6  usr/share/nvim/runtime/doc/diff.txt
03b50baa95b49683190c64b89e75c8a1  usr/share/nvim/runtime/doc/digraph.txt
38816d6e799b19160b9193646034ed7b  usr/share/nvim/runtime/doc/editing.txt
d1991f426c3e57d7c39725f305e27e43  usr/share/nvim/runtime/doc/eval.txt
443a05e5879d1cfbd30fed7d80def53d  usr/share/nvim/runtime/doc/farsi.txt
4141d85bad327957d46e51a2dfc9806f  usr/share/nvim/runtime/doc/filetype.txt
6231dd973d304c7d0dfb03548c96cc7c  usr/share/nvim/runtime/doc/fold.txt
d7d90ea10bb42cc65f34bbef73306708  usr/share/nvim/runtime/doc/ft_ada.txt
76e97d8a1bd4919b60b00e636ba0e9d5  usr/share/nvim/runtime/doc/ft_sql.txt
5b30ad52e6f15dc7f2666004ab8bac5b  usr/share/nvim/runtime/doc/gui.txt
49b3ec846a55d48efddf3418cde62c0d  usr/share/nvim/runtime/doc/hebrew.txt
7297e587acdcd1c25bf0b7f4d4d90759  usr/share/nvim/runtime/doc/help.txt
00540ff821aa652b0a1b2e9ace37216c  usr/share/nvim/runtime/doc/helphelp.txt
de5c0433291211c6db8b7cb97d8ab942  usr/share/nvim/runtime/doc/howto.txt
01f207cc89dc7f742c5426f593eda243  usr/share/nvim/runtime/doc/if_cscop.txt
721ca0928df648bbcb9b4996b32778a0  usr/share/nvim/runtime/doc/if_pyth.txt
a6124795e670aa19ca3f07fb84c1ad02  usr/share/nvim/runtime/doc/if_ruby.txt
32bb61e7073c949fda41c2c28d1f1451  usr/share/nvim/runtime/doc/indent.txt
fc8dbfd6b9ec0c9300d2b4af5a018e7e  usr/share/nvim/runtime/doc/index.txt
c207446708a6af5f36551ee93a6e0c2c  usr/share/nvim/runtime/doc/insert.txt
fbb8395bb1cd6ad1c38ebb6344d7312c  usr/share/nvim/runtime/doc/intro.txt
f100e851aaa27763af5d34514694d2a0  usr/share/nvim/runtime/doc/job_control.txt
519bdd248d2b846dcb1804bf857caa87  usr/share/nvim/runtime/doc/makehtml.awk
a1d51257645b6bef160f6884fa5789f6  usr/share/nvim/runtime/doc/maketags.awk
88735cea365fea14b4d104ac86cdbe50  usr/share/nvim/runtime/doc/map.txt
19abadcc83845011904aa6acafbd53e6  usr/share/nvim/runtime/doc/mbyte.txt
72e90fc5639046d127f7f189ae0bfb86  usr/share/nvim/runtime/doc/message.txt
478ea6c2bff5da566d0d8fda5fc7e8fb  usr/share/nvim/runtime/doc/mlang.txt
e0dad0fdccee8d1757f8b0bba82adb1d  usr/share/nvim/runtime/doc/motion.txt
80eb259418d9f6e0a650e14c0ef3e1f0  usr/share/nvim/runtime/doc/msgpack_rpc.txt
fdc95bc77a9333594118892f272f98e3  usr/share/nvim/runtime/doc/nvim.txt
a533609196860abefbf49a55b1aa8dba  usr/share/nvim/runtime/doc/nvim_terminal_emulator.txt
0ff5b7b3a304bdc1afa6b60d96f9f6fa  usr/share/nvim/runtime/doc/options.txt
6c6509510d2e2c690623ec5433627570  usr/share/nvim/runtime/doc/os_win32.txt
3eea8b3783a78bcf2d223bad25cfbc80  usr/share/nvim/runtime/doc/pattern.txt
80e52ef24dded83a0ad32c498c2f4c8a  usr/share/nvim/runtime/doc/pi_gzip.txt
65d7cf9b9bee31e015d10ed94ce3e53f  usr/share/nvim/runtime/doc/pi_health.txt
86f94941af92da631c5a8dd1be073479  usr/share/nvim/runtime/doc/pi_matchit.txt
8816a76552026471f089e99e3e6c41b7  usr/share/nvim/runtime/doc/pi_msgpack.txt
9f24241819ec71c161b58dbc341cf0f5  usr/share/nvim/runtime/doc/pi_netrw.txt
49977c3c0feb6d9e8329a463c844b9dc  usr/share/nvim/runtime/doc/pi_paren.txt
1ed5f519beb61831d17390bdb34f5efa  usr/share/nvim/runtime/doc/pi_spec.txt
4c21ab5409d0dbcf710232aca925514c  usr/share/nvim/runtime/doc/pi_tar.txt
34a4b1789dcfe3034b32bab7493dcb3c  usr/share/nvim/runtime/doc/pi_tutor.txt
870bbe2ae8857466637c511f0b1ad321  usr/share/nvim/runtime/doc/pi_zip.txt
35c39926bb7bf2cd50cd403d6d508dba  usr/share/nvim/runtime/doc/print.txt
e684ebaff14567f108ec7fa58e69fd1a  usr/share/nvim/runtime/doc/provider.txt
49444ec51cebb663869051aee324e925  usr/share/nvim/runtime/doc/quickfix.txt
c1d7774ec2b7f908850af9cd1c718fe5  usr/share/nvim/runtime/doc/quickref.txt
6e1fe6b58319d97ac34e85089405e73d  usr/share/nvim/runtime/doc/recover.txt
f8339de662410b6b0791d53983299d3b  usr/share/nvim/runtime/doc/remote.txt
3bcc41416760a992bbdb05fd939d4d09  usr/share/nvim/runtime/doc/remote_plugin.txt
2ef991e70b59dd0f20850a0918ecc7f2  usr/share/nvim/runtime/doc/repeat.txt
c380c5aee9af1d252ad1d7ec2e34d7b4  usr/share/nvim/runtime/doc/rileft.txt
6ba5d74e1b9b9d4a9cfe8943fdd15f66  usr/share/nvim/runtime/doc/russian.txt
afe8469d5ec8c77bbb13f94b4a24151f  usr/share/nvim/runtime/doc/scroll.txt
4495ee867480f84c8a24000366183ebc  usr/share/nvim/runtime/doc/sign.txt
df2580385360f0c99e689f5ac81bfe20  usr/share/nvim/runtime/doc/spell.txt
d8eef6d36b82de86971f5b2b9e9913f7  usr/share/nvim/runtime/doc/sponsor.txt
4b7fc97e24284e992a737d60826217af  usr/share/nvim/runtime/doc/starting.txt
289828618e63e7b4d5ecab53df93419e  usr/share/nvim/runtime/doc/syntax.txt
475ac58a91adc46e09dbc6ea8bf0f7c4  usr/share/nvim/runtime/doc/tabpage.txt
734a98e91f608c46d03b0ffa8e243249  usr/share/nvim/runtime/doc/tags
a54125a73a404aed1341bdc263788cb6  usr/share/nvim/runtime/doc/tagsrch.txt
30c9f40c190d9523942fce0a10164ac6  usr/share/nvim/runtime/doc/term.txt
f626d52111b0f00a6c1bb46fd5ec6f5f  usr/share/nvim/runtime/doc/tips.txt
896c28710db2b4aa3051d062cd039ec1  usr/share/nvim/runtime/doc/uganda.txt
40114cfe8e78def9a9b1f3db01b275d6  usr/share/nvim/runtime/doc/undo.txt
0dfb29dce44ad095e628d1ab19e91e38  usr/share/nvim/runtime/doc/usr_01.txt
5ad6a4b8f34d54b4ee052c4fd5ef5308  usr/share/nvim/runtime/doc/usr_02.txt
85f85dd2823d62988b237461d3acb4f7  usr/share/nvim/runtime/doc/usr_03.txt
888caef9200500f41326dfd2ab317905  usr/share/nvim/runtime/doc/usr_04.txt
1fe4fa82c96cca78af31cfe7159dade5  usr/share/nvim/runtime/doc/usr_05.txt
e2a0320440efcefb0890ed09e9dcf5dc  usr/share/nvim/runtime/doc/usr_06.txt
562e6ae77d4661ed034d83bada84b9de  usr/share/nvim/runtime/doc/usr_07.txt
2b30619159f63d89b896251bfa210704  usr/share/nvim/runtime/doc/usr_08.txt
6fe9118c8f4c268b97a49892ae0ccadc  usr/share/nvim/runtime/doc/usr_09.txt
150c02b0ecbaa533414ce56dac973026  usr/share/nvim/runtime/doc/usr_10.txt
f0920369e6dbdaefb57d1022b09a391b  usr/share/nvim/runtime/doc/usr_11.txt
745a0aab17b4bb84091e4c35596300ab  usr/share/nvim/runtime/doc/usr_12.txt
c85029343d2705a4b22cd3dabc85c2ed  usr/share/nvim/runtime/doc/usr_20.txt
5ab3adafe65a371b22471418c03aeaf4  usr/share/nvim/runtime/doc/usr_21.txt
4bd9dd2c412bd98df011e73790851dfa  usr/share/nvim/runtime/doc/usr_22.txt
3ff6809fab1e12ec84678f6c7ac4c03a  usr/share/nvim/runtime/doc/usr_23.txt
b12956bae01b4ba29629ee109bba202f  usr/share/nvim/runtime/doc/usr_24.txt
606e0143f5173dbef54635f7a426a4ca  usr/share/nvim/runtime/doc/usr_25.txt
2c557d808641907061d772be76862a59  usr/share/nvim/runtime/doc/usr_26.txt
7ad155d4731c9936b1958f371351b901  usr/share/nvim/runtime/doc/usr_27.txt
c894417124dcdc7f87c9c40ace629310  usr/share/nvim/runtime/doc/usr_28.txt
c4bf263810f8be829e0279a56af9d962  usr/share/nvim/runtime/doc/usr_29.txt
c68bac88dcdbf7fdeb55e9aab61b46f5  usr/share/nvim/runtime/doc/usr_30.txt
8860b10814634727fbbabcf0f17a6296  usr/share/nvim/runtime/doc/usr_31.txt
d594b50f44e93cd81921a40ae5101d4f  usr/share/nvim/runtime/doc/usr_32.txt
96fa9d22762f37661f0163ab1264a09f  usr/share/nvim/runtime/doc/usr_40.txt
e291476580c063f0b171177d68bbb6fd  usr/share/nvim/runtime/doc/usr_41.txt
e63cca38c2186d4aa8416f237f80c242  usr/share/nvim/runtime/doc/usr_42.txt
ea2a62c4172b66c840296b041f3236f2  usr/share/nvim/runtime/doc/usr_43.txt
337d938ae5dc48c00bd82f4ed953073d  usr/share/nvim/runtime/doc/usr_44.txt
c6d917dc482df82af9433abb0cfe807a  usr/share/nvim/runtime/doc/usr_45.txt
1aa8a4344d426fdfc56193979f4aae13  usr/share/nvim/runtime/doc/usr_toc.txt
c9e5a02fee40642fe06ad7486ad96a94  usr/share/nvim/runtime/doc/various.txt
2f5eb91c6efb8efe4653841e3e6954be  usr/share/nvim/runtime/doc/vi_diff.txt
c925d30ef3e7beec698c890d717e539e  usr/share/nvim/runtime/doc/vim_diff.txt
e74e03f035d14c22f43dfbdf704a0a6a  usr/share/nvim/runtime/doc/visual.txt
ad8650bdfd726afe4e7ad36a185c1861  usr/share/nvim/runtime/doc/windows.txt
95e3420663169acdba120f5785731c66  usr/share/nvim/runtime/filetype.vim
b2aa3d9712c9dced6c8eb2e84891ee65  usr/share/nvim/runtime/ftoff.vim
99747385736fe10dc64c314503337e4e  usr/share/nvim/runtime/ftplugin.vim
ecd060d3e2457190ac923b8ffcff4596  usr/share/nvim/runtime/ftplugin/a2ps.vim
9d20b18c2e5726c613db97441a14188b  usr/share/nvim/runtime/ftplugin/aap.vim
af9ede9bd3a518f51c52f9a1cad0c5ec  usr/share/nvim/runtime/ftplugin/abap.vim
21baa5e75f2adcceb6de68b98889c142  usr/share/nvim/runtime/ftplugin/abaqus.vim
7b995dfc504e7e061611711535cd0ae8  usr/share/nvim/runtime/ftplugin/ada.vim
57c703bd683d9f036d7272f69d5c0190  usr/share/nvim/runtime/ftplugin/alsaconf.vim
65278f3800159ab78c61d74ee6fc4acd  usr/share/nvim/runtime/ftplugin/ant.vim
8eb48050460cc8d9030ef10a2506fe18  usr/share/nvim/runtime/ftplugin/arch.vim
bbc846bc116d961f09c54eaa39bfc183  usr/share/nvim/runtime/ftplugin/art.vim
07eccc8f7c3daba9972aac1f6802ffe0  usr/share/nvim/runtime/ftplugin/aspvbs.vim
7ad3f8b423e0557e596f4c95f89569e2  usr/share/nvim/runtime/ftplugin/automake.vim
4dce6b3e7437e1bb96c15f6a30b28e7b  usr/share/nvim/runtime/ftplugin/bdf.vim
4175e39c75e706e769b38c9ee6fae2ae  usr/share/nvim/runtime/ftplugin/bst.vim
a11a20506c3e24769caecbdddad99803  usr/share/nvim/runtime/ftplugin/btm.vim
d587fc87be0d14ee4edc3f41562d38ea  usr/share/nvim/runtime/ftplugin/bzl.vim
800078064d532ad3826528c4d4e025b3  usr/share/nvim/runtime/ftplugin/c.vim
c13d9aa0b83ecb353bd5643f376cbfc2  usr/share/nvim/runtime/ftplugin/calendar.vim
930d544861adc0c3b9ffa681e7a051a7  usr/share/nvim/runtime/ftplugin/cdrdaoconf.vim
4fc410fe9595530b17e335d532d347cc  usr/share/nvim/runtime/ftplugin/ch.vim
b144a8f161a47a59f97e38dad9750a0d  usr/share/nvim/runtime/ftplugin/changelog.vim
35b4d29efb97b713f2edaf036bce2deb  usr/share/nvim/runtime/ftplugin/clojure.vim
619ca41dafde6981b66ce02679dcc309  usr/share/nvim/runtime/ftplugin/cobol.vim
cd4e8da90f676d334612ff26c0940cf7  usr/share/nvim/runtime/ftplugin/conf.vim
7e83f5a8ed9dd5e68d27b0dff35eb4a3  usr/share/nvim/runtime/ftplugin/config.vim
48e8a033ce40f555e282fece38acf98f  usr/share/nvim/runtime/ftplugin/context.vim
e267628aee072967ed75138edadfedfd  usr/share/nvim/runtime/ftplugin/cpp.vim
ec00c4160a318d05932cf10ddeddafd9  usr/share/nvim/runtime/ftplugin/crm.vim
a54e3e20d18bbd2d083721ee8e95ce11  usr/share/nvim/runtime/ftplugin/cs.vim
0140a2ca30e90791719db6f375cf1084  usr/share/nvim/runtime/ftplugin/csc.vim
59ef78c07ae7d5bc50ffcdd32187954b  usr/share/nvim/runtime/ftplugin/csh.vim
c3c3d260b6e736e1917d59f4b6494bbf  usr/share/nvim/runtime/ftplugin/css.vim
7c7dc7ba4f4a32f8d9acf8493359c504  usr/share/nvim/runtime/ftplugin/cucumber.vim
49ed1e114de8a205ca7163b3a83baa42  usr/share/nvim/runtime/ftplugin/cvsrc.vim
4d1590417be12654a0903492850f42ee  usr/share/nvim/runtime/ftplugin/debchangelog.vim
2d1d73e5a87d6fa51824fc1c91450e94  usr/share/nvim/runtime/ftplugin/debcontrol.vim
930d544861adc0c3b9ffa681e7a051a7  usr/share/nvim/runtime/ftplugin/denyhosts.vim
0a05ec043a833c102031d8a3d18e0e17  usr/share/nvim/runtime/ftplugin/dictconf.vim
740b40a1b73ba55e2f46b5fb310812d3  usr/share/nvim/runtime/ftplugin/dictdconf.vim
07422deff3a7cf6e538648e75e1bae02  usr/share/nvim/runtime/ftplugin/diff.vim
948efe8bd2b19356bdd5cea58e0fb082  usr/share/nvim/runtime/ftplugin/dircolors.vim
02d44c88687b83c01fefedcdf2dfd8b4  usr/share/nvim/runtime/ftplugin/docbk.vim
3cc3c163fda2ec5cae3e7429366f63d1  usr/share/nvim/runtime/ftplugin/dockerfile.vim
97e18465a33b11eef2c40cabd0208700  usr/share/nvim/runtime/ftplugin/dosbatch.vim
7180f765b2aa554c689483cc55847726  usr/share/nvim/runtime/ftplugin/dosini.vim
3736c9dd40c25c48fef7008491a47efc  usr/share/nvim/runtime/ftplugin/dtd.vim
2c70cdce5870b4a438a39b6eb28b3b24  usr/share/nvim/runtime/ftplugin/dtrace.vim
7bd1bc9aefc8684b4483fc4c963be724  usr/share/nvim/runtime/ftplugin/eiffel.vim
004db00cf3167da750c03f8a44e6278e  usr/share/nvim/runtime/ftplugin/elinks.vim
d42a8ec31a8bba73d310007a72dfdff3  usr/share/nvim/runtime/ftplugin/erlang.vim
6ec2ecfd7943ca8f9ea70f9bf6c10d6d  usr/share/nvim/runtime/ftplugin/eruby.vim
6e271912bc41d51c35ad7e14d9b6a079  usr/share/nvim/runtime/ftplugin/eterm.vim
e55736e91a50a6cc02d54d80dcec0696  usr/share/nvim/runtime/ftplugin/falcon.vim
bd5d5b6c336981400d600a9f3f954932  usr/share/nvim/runtime/ftplugin/fetchmail.vim
f5232b03bbda26aaf1fce7d1d4f1ab78  usr/share/nvim/runtime/ftplugin/flexwiki.vim
03227819cc35d57e55fe6fd90935849a  usr/share/nvim/runtime/ftplugin/fortran.vim
184ae501e0858ead4d744caa31069b0c  usr/share/nvim/runtime/ftplugin/framescript.vim
a794b08f8360f6261a907cebc918d17f  usr/share/nvim/runtime/ftplugin/fvwm.vim
6e8d749dd21ae5cb78a0a66215c206ba  usr/share/nvim/runtime/ftplugin/git.vim
3b25a4321d474e94c58e63b290447b72  usr/share/nvim/runtime/ftplugin/gitcommit.vim
3c0c80142d3bef37ecac61718bd068f5  usr/share/nvim/runtime/ftplugin/gitconfig.vim
c023b26da52810b49c0a25e9f895adbb  usr/share/nvim/runtime/ftplugin/gitrebase.vim
458cb889027a28bb70ea7d900812bbd6  usr/share/nvim/runtime/ftplugin/gitsendemail.vim
226f706634d5dab41023e998b0dbab6d  usr/share/nvim/runtime/ftplugin/go.vim
f20bda21b401ae984b3fc6456f6e0142  usr/share/nvim/runtime/ftplugin/gpg.vim
72aa494bf91db4ba5afcc827fdca812b  usr/share/nvim/runtime/ftplugin/gprof.vim
37e6c250396a05951d4926bf048fde2e  usr/share/nvim/runtime/ftplugin/groovy.vim
78c0e5d569edc53aa44ce803dc98b6a9  usr/share/nvim/runtime/ftplugin/group.vim
350e3111854acf264d0bfc09cde78dac  usr/share/nvim/runtime/ftplugin/grub.vim
9a3ea89d658133aa0b9e408464ac15c2  usr/share/nvim/runtime/ftplugin/haml.vim
a19fdba49df5f49ad12bd1de100efa8a  usr/share/nvim/runtime/ftplugin/hamster.vim
92110aa2449f8ea7ecb8b63626b202dd  usr/share/nvim/runtime/ftplugin/haskell.vim
23c2a7453a8e0a445ad36134d6dfc184  usr/share/nvim/runtime/ftplugin/help.vim
9a45716f3c7954c61e5b88fffeb1985e  usr/share/nvim/runtime/ftplugin/hgcommit.vim
ab8d78c05eff2727e662e982afa12cdf  usr/share/nvim/runtime/ftplugin/hog.vim
930d544861adc0c3b9ffa681e7a051a7  usr/share/nvim/runtime/ftplugin/hostconf.vim
cb16cfd6d1059a03123b1c27e3b420ee  usr/share/nvim/runtime/ftplugin/hostsaccess.vim
d00151affc3aaaa8ab2ad35b2d9408ba  usr/share/nvim/runtime/ftplugin/html.vim
938fc0f4679d6cd929b6c49b44de3aa6  usr/share/nvim/runtime/ftplugin/htmldjango.vim
24b4373bad05d7c3b89ace0f4c05478c  usr/share/nvim/runtime/ftplugin/indent.vim
0676424b8ecec7196badd2688620068f  usr/share/nvim/runtime/ftplugin/initex.vim
d8b4d0dc3656fc1c92c084d4c457b963  usr/share/nvim/runtime/ftplugin/ishd.vim
68db634b47fd22862e3cb14de43b2d19  usr/share/nvim/runtime/ftplugin/j.vim
9264fe555d1ef68e475c487c8be89537  usr/share/nvim/runtime/ftplugin/java.vim
7689de94647eb8e0358590b7951a2a8b  usr/share/nvim/runtime/ftplugin/javascript.vim
f58d07ed227439813bf3af8b677f3c97  usr/share/nvim/runtime/ftplugin/jproperties.vim
1c2352862f57b2d101aaa1367f44b49e  usr/share/nvim/runtime/ftplugin/json.vim
586db374c77343e830a3c217c6723b7a  usr/share/nvim/runtime/ftplugin/jsp.vim
19507b9947b7e77302dad38b2979fa71  usr/share/nvim/runtime/ftplugin/kconfig.vim
d263a9fb446870a2526ea901eb0f4b27  usr/share/nvim/runtime/ftplugin/kwt.vim
c68f0298aa28db588a6298df898f92bd  usr/share/nvim/runtime/ftplugin/ld.vim
1248ef2411d4ce0eaf1d13a6dddb5a7b  usr/share/nvim/runtime/ftplugin/less.vim
fcc6c837cd008ab3231a2a6ed221bf3b  usr/share/nvim/runtime/ftplugin/lftp.vim
0d1f12c41899ef0738b8f8b9414ee0a1  usr/share/nvim/runtime/ftplugin/libao.vim
448049157a1aba157dde080e7579697f  usr/share/nvim/runtime/ftplugin/limits.vim
bff73576a4e046b7a260f99096b85d2a  usr/share/nvim/runtime/ftplugin/liquid.vim
d3eadd55047dd2dde704cbc6785a9105  usr/share/nvim/runtime/ftplugin/lisp.vim
980371dd195f94eb9fea6c3e7d088f5a  usr/share/nvim/runtime/ftplugin/logcheck.vim
670a9cd634a1e62b812f9d48702ac49b  usr/share/nvim/runtime/ftplugin/loginaccess.vim
0ab396f83a81663a7abc7f8ab0491486  usr/share/nvim/runtime/ftplugin/logindefs.vim
32b8bf9947acbc2a106bb2ed81c94424  usr/share/nvim/runtime/ftplugin/logtalk.dict
e3aa0be86b471e94778ecdfd7640fb99  usr/share/nvim/runtime/ftplugin/logtalk.vim
5bbb2e39c88fcd3b8970bbd801f03cc4  usr/share/nvim/runtime/ftplugin/lprolog.vim
d0f1a008cbd1f79260f466411ca4f95a  usr/share/nvim/runtime/ftplugin/lua.vim
00092a06bb07a197042c2a334407eb2f  usr/share/nvim/runtime/ftplugin/m4.vim
f43fddd78927ba54975ac391a9a7eaa8  usr/share/nvim/runtime/ftplugin/mail.vim
0764a0025bbb212e053e7c2883c3f5b3  usr/share/nvim/runtime/ftplugin/mailaliases.vim
a431cf1d255efc57a7c589ca9c239b6e  usr/share/nvim/runtime/ftplugin/mailcap.vim
b2a407d591419b7b44460c77f07aee4f  usr/share/nvim/runtime/ftplugin/make.vim
16fdbf09242556b95629e7cc1df0d977  usr/share/nvim/runtime/ftplugin/man.vim
ed65fd406e6df44fa0731a29f15ae99f  usr/share/nvim/runtime/ftplugin/manconf.vim
8fa7554dc5f6dd3b1b5ed0fbfffdbf5c  usr/share/nvim/runtime/ftplugin/markdown.vim
fd7b69c9605ad165a19e8aff17ac3435  usr/share/nvim/runtime/ftplugin/matlab.vim
58dd565160015fe7b05672b45c934cc2  usr/share/nvim/runtime/ftplugin/mf.vim
f523eb02c90fd3c14f033f8beff71f1b  usr/share/nvim/runtime/ftplugin/modconf.vim
1a7e0bbbe537a60138ccf5961536bcba  usr/share/nvim/runtime/ftplugin/mp.vim
98d0250403ddff0f695fdc66e9889d56  usr/share/nvim/runtime/ftplugin/mplayerconf.vim
b41ca318890f70d33af953b61f73d3bf  usr/share/nvim/runtime/ftplugin/mrxvtrc.vim
272fd209f360ec946fa102b946dcea47  usr/share/nvim/runtime/ftplugin/msmessages.vim
e8ca8fcc393e3bce7ee26fa8acb1dece  usr/share/nvim/runtime/ftplugin/muttrc.vim
7abe72062f3bcfcd0f9bd10eefe3df29  usr/share/nvim/runtime/ftplugin/nanorc.vim
7dd57cf1e300c0f1fe760b7af636cfd8  usr/share/nvim/runtime/ftplugin/netrc.vim
09ef20a11f3f4cde95164a944806209d  usr/share/nvim/runtime/ftplugin/nsis.vim
fa7bb815601437d206a225e82af3ff36  usr/share/nvim/runtime/ftplugin/objc.vim
c6a1782bd2689d62ccd3e199b0c0b121  usr/share/nvim/runtime/ftplugin/ocaml.vim
8da24ca44faf40517c2b90884be7acfe  usr/share/nvim/runtime/ftplugin/occam.vim
c730052aed494a4ed60a69ad0c4a4628  usr/share/nvim/runtime/ftplugin/pamconf.vim
a4b749ac8439c2ee3d324e59006032d3  usr/share/nvim/runtime/ftplugin/pascal.vim
342d4adf60370d10d8034893274ff73e  usr/share/nvim/runtime/ftplugin/passwd.vim
f0e92b87799aa330809c2bd2cbb23d29  usr/share/nvim/runtime/ftplugin/pdf.vim
eb3c5e27e18907ed363572a7da2e3880  usr/share/nvim/runtime/ftplugin/perl.vim
837ebbe9b9e1d2b6ae87572e27e7be93  usr/share/nvim/runtime/ftplugin/perl6.vim
1bc61099386b74b246304fdd7c2613e5  usr/share/nvim/runtime/ftplugin/php.vim
257325f669886cd29880bd3e4c8f3f5b  usr/share/nvim/runtime/ftplugin/pinfo.vim
6f530a263a9e7150dc207259a345d274  usr/share/nvim/runtime/ftplugin/plaintex.vim
6b5dfdcc8a9587d5c528e8892f9a3530  usr/share/nvim/runtime/ftplugin/postscr.vim
a60a89bfc7ae3f4d32c46de814a4db7c  usr/share/nvim/runtime/ftplugin/procmail.vim
e0d7c6202314786eb82af69b339f5c17  usr/share/nvim/runtime/ftplugin/prolog.vim
c4e9f3b355aa7c7961a0879391611ac0  usr/share/nvim/runtime/ftplugin/protocols.vim
0cbf02d5648be693007b92e3f865ae0d  usr/share/nvim/runtime/ftplugin/pyrex.vim
1638b2edfad72a0bdd43a914235ae957  usr/share/nvim/runtime/ftplugin/python.vim
d90a97323b1fb237913f2a5cc5f12a82  usr/share/nvim/runtime/ftplugin/qf.vim
19d1a0a8ecba484b742c1a5ccb6d53e8  usr/share/nvim/runtime/ftplugin/quake.vim
ecd7c5f7ae1f94ecb63217f44caf836b  usr/share/nvim/runtime/ftplugin/r.vim
6d9c3f8e041c94d0f8aebfacb5972fb3  usr/share/nvim/runtime/ftplugin/racc.vim
1c2a65dbc90eb6369aeb52f7da777447  usr/share/nvim/runtime/ftplugin/readline.vim
b0fffad61a79186134eac19744ffef98  usr/share/nvim/runtime/ftplugin/registry.vim
92ef122f7661a8d7137bbe98465c1b3c  usr/share/nvim/runtime/ftplugin/reva.vim
b4bf69759c69d6300fee7929e7b7e58e  usr/share/nvim/runtime/ftplugin/rhelp.vim
8be5d2cc36f9fd7da6aad5c4b932352f  usr/share/nvim/runtime/ftplugin/rmd.vim
c2506a447b64a62cd73839c3a0bc96af  usr/share/nvim/runtime/ftplugin/rnc.vim
355e8296baf58fed0f92e6607da2c23d  usr/share/nvim/runtime/ftplugin/rnoweb.vim
9255ee908afd2a5289dd2c1265c5b1e1  usr/share/nvim/runtime/ftplugin/rpl.vim
44949ec3e1fd28b60f0139d52fbaa25d  usr/share/nvim/runtime/ftplugin/rrst.vim
0db9068ed1582f2d87a2dc555ef51a32  usr/share/nvim/runtime/ftplugin/rst.vim
03d123b777d74e7e312e19e67c56fe28  usr/share/nvim/runtime/ftplugin/ruby.vim
3e8a9a1d93bd39d512df208bf4e04227  usr/share/nvim/runtime/ftplugin/sass.vim
369f7e6449d5b1be070ca75761bbe858  usr/share/nvim/runtime/ftplugin/scheme.vim
9c3e56e5e464d8c19125fcea1ac247d8  usr/share/nvim/runtime/ftplugin/screen.vim
e5580634ae4a2396826073cbfdf861de  usr/share/nvim/runtime/ftplugin/scss.vim
098e39e67f9e328276a506003a0bfd0c  usr/share/nvim/runtime/ftplugin/sensors.vim
9d401f5efc34c1703dac61b62b104530  usr/share/nvim/runtime/ftplugin/services.vim
6d3a72b33133949b18c52a5bb9a7e3ce  usr/share/nvim/runtime/ftplugin/setserial.vim
6a608df5f8be82b8d378339773847575  usr/share/nvim/runtime/ftplugin/sgml.vim
cf1a58437f2aad4393ce1fdfdbc57daa  usr/share/nvim/runtime/ftplugin/sh.vim
3da70c4750b61af6ef7dc5ad177fb57e  usr/share/nvim/runtime/ftplugin/shada.vim
076268eb826a161a00a37a1acaa3d3eb  usr/share/nvim/runtime/ftplugin/sieve.vim
b6f8293440c54218cf3165039e5d14e1  usr/share/nvim/runtime/ftplugin/slpconf.vim
4bdd24de6b6374fadc308c036dda9eac  usr/share/nvim/runtime/ftplugin/slpreg.vim
bf0032b350af9d2001bffa8cb102d57e  usr/share/nvim/runtime/ftplugin/slpspi.vim
71ca3a5705aeeede6c5f70a8c2fb3637  usr/share/nvim/runtime/ftplugin/spec.vim
6ce843cd0e3e1c92dd18e5109aa16cee  usr/share/nvim/runtime/ftplugin/sql.vim
95ecc0696ca386f7d301af0d99562d92  usr/share/nvim/runtime/ftplugin/sshconfig.vim
3fabe63494c7215bb6e03c103603fab2  usr/share/nvim/runtime/ftplugin/sudoers.vim
e724d9206c4bd6feda0d42e62dc94783  usr/share/nvim/runtime/ftplugin/svg.vim
dcf801415139048e0775a3b9718ffa69  usr/share/nvim/runtime/ftplugin/sysctl.vim
b2600e81d54302e901ff5580c4c15360  usr/share/nvim/runtime/ftplugin/systemd.vim
02bd69ee7799f0fcbb563a925df64e4b  usr/share/nvim/runtime/ftplugin/systemverilog.vim
958eb158e7d20fd9d3d173938aff2b2f  usr/share/nvim/runtime/ftplugin/tcl.vim
767aa975ac6ed03df0d3cfbd669cce0a  usr/share/nvim/runtime/ftplugin/tcsh.vim
8526a7afa67fb877c3448dde314fbae5  usr/share/nvim/runtime/ftplugin/terminfo.vim
cda9576368a912e7be5f027a00e18b97  usr/share/nvim/runtime/ftplugin/tex.vim
4a3d38e5aad0699c17112bd45ab71802  usr/share/nvim/runtime/ftplugin/text.vim
e8406e66277291c5d8ac13239e204d74  usr/share/nvim/runtime/ftplugin/treetop.vim
9fe54bc7948743eb20ddaee8f313d98f  usr/share/nvim/runtime/ftplugin/tt2html.vim
c59b5670b8b1c0186e4d6b978d962f06  usr/share/nvim/runtime/ftplugin/tutor.vim
553caf9691c1615c3c8eb4b44dd6a1c3  usr/share/nvim/runtime/ftplugin/udevconf.vim
7de5ad6167f27cf6282b320827367318  usr/share/nvim/runtime/ftplugin/udevperm.vim
d58098940c316bbc76662aecd8ee88c3  usr/share/nvim/runtime/ftplugin/udevrules.vim
77044302ac485d523bd597793a26d800  usr/share/nvim/runtime/ftplugin/updatedb.vim
ff32d8af502aabc00c6b8ddb62f642fb  usr/share/nvim/runtime/ftplugin/vb.vim
3e0937809db9639eed05afebb417e8a9  usr/share/nvim/runtime/ftplugin/verilog.vim
ee869fe6cf8a9ff60bee11df711e35ed  usr/share/nvim/runtime/ftplugin/vhdl.vim
1cb3b1e5604a1ed26adf13e6443d7d7a  usr/share/nvim/runtime/ftplugin/vim.vim
c9cc1e264186f6928c1c64fff00ce055  usr/share/nvim/runtime/ftplugin/vroom.vim
dea77d4e0c85621a00d5de786f89a1fc  usr/share/nvim/runtime/ftplugin/xdefaults.vim
3a2c43fd812525222369e6cd1ca49e37  usr/share/nvim/runtime/ftplugin/xf86conf.vim
3eeeae46317073037279afee0dac790b  usr/share/nvim/runtime/ftplugin/xhtml.vim
816f7cc34b85e8b27f4cca5d166d3f62  usr/share/nvim/runtime/ftplugin/xinetd.vim
318c2ade58976fd6f0c1ee480f25729f  usr/share/nvim/runtime/ftplugin/xml.vim
311d5acbea5f3f9b79a97d6662f1743f  usr/share/nvim/runtime/ftplugin/xmodmap.vim
48e506a5eb4e95e8140931efe01c82c8  usr/share/nvim/runtime/ftplugin/xs.vim
0634f7d3e0591ae64515e8344eea20b1  usr/share/nvim/runtime/ftplugin/xsd.vim
e7ddfd22375afcd9cdfa7be7ad75993b  usr/share/nvim/runtime/ftplugin/xslt.vim
37be9768ffb7b1002ec7f5ebfaaf68ac  usr/share/nvim/runtime/ftplugin/yaml.vim
2cdae05383d59771b3d0f60a571a4dd4  usr/share/nvim/runtime/ftplugin/zimbu.vim
f1b1439b8b5ba456728cad321c594003  usr/share/nvim/runtime/ftplugin/zsh.vim
8036186efc1cb15806282e014e57c4c4  usr/share/nvim/runtime/ftplugof.vim
43702bcd91f0c5047ce01828719a4228  usr/share/nvim/runtime/indent.vim
e683e72b1a3e56c1277ad6481e3cd70b  usr/share/nvim/runtime/indent/aap.vim
f7d4fb93fe4a13d344b89f417edde233  usr/share/nvim/runtime/indent/ada.vim
d4f91c49d83691375b0161f71caccef7  usr/share/nvim/runtime/indent/ant.vim
415223e0d04aa18f84cf59213e94dbfb  usr/share/nvim/runtime/indent/automake.vim
4bfdd9fddb7a43b1049e2e9b06cfe628  usr/share/nvim/runtime/indent/awk.vim
5d858b5c22c0ccf9a8fddd4252b89ae1  usr/share/nvim/runtime/indent/bib.vim
799b75f55e762d602021d470d344e8f2  usr/share/nvim/runtime/indent/bst.vim
77b050c8658ea8025013c702baf71074  usr/share/nvim/runtime/indent/bzl.vim
4e7cba98b7f71cdb34f18c5d8a897bca  usr/share/nvim/runtime/indent/c.vim
1aa2f23eeba6c73036d0d1f1674d66e4  usr/share/nvim/runtime/indent/cdl.vim
14636a5e982b5edcd943c6e7ee469f11  usr/share/nvim/runtime/indent/ch.vim
92df1787ef1c904110e3138373f21d5e  usr/share/nvim/runtime/indent/chaiscript.vim
9d3952c2ca0ada35e90ec68b52ddb7f1  usr/share/nvim/runtime/indent/changelog.vim
e9945d172dbe62c032f2a317536158d5  usr/share/nvim/runtime/indent/clojure.vim
1246369a2f7e419ce4159472f906d682  usr/share/nvim/runtime/indent/cmake.vim
a10e3e3e69a1db993ff16f269b27de8f  usr/share/nvim/runtime/indent/cobol.vim
25b8f510f403a065b382730c6669fafd  usr/share/nvim/runtime/indent/config.vim
c2ed98d5b26e976e52f57b6517da938c  usr/share/nvim/runtime/indent/cpp.vim
0a630511bfa56ae3bda77848b0227e03  usr/share/nvim/runtime/indent/cs.vim
c65f4dfb71b3d47072d177096653d881  usr/share/nvim/runtime/indent/css.vim
e04015e063b8c297c0bab4d520312b06  usr/share/nvim/runtime/indent/cucumber.vim
0dc07c8112eadd596314f76c60df32dc  usr/share/nvim/runtime/indent/cuda.vim
af0e4bca887c362aed435a9dad582739  usr/share/nvim/runtime/indent/d.vim
9473daf470813e05e378b6f9c557da94  usr/share/nvim/runtime/indent/dictconf.vim
4887a3be5c6dfb7e4a50b5a5474bee67  usr/share/nvim/runtime/indent/dictdconf.vim
9a5a3170278206dd62dc5cea9ef75087  usr/share/nvim/runtime/indent/docbk.vim
5dc3f0b53a23d497b84ce480fb4ad039  usr/share/nvim/runtime/indent/dtd.vim
1057c3812cd98eaeed5c03da2b9650b4  usr/share/nvim/runtime/indent/dtrace.vim
8e9a0e5b2aeda976e3cca642291d7db2  usr/share/nvim/runtime/indent/dylan.vim
adc9b7fc70147a5a80daf8b834365b5b  usr/share/nvim/runtime/indent/eiffel.vim
02c3a3cb64efd4d124e3bdff91d5b11b  usr/share/nvim/runtime/indent/erlang.vim
5fce2e68c7dc64ebf6ec4e213296c056  usr/share/nvim/runtime/indent/eruby.vim
40cc22acfbb466cd8f15015ba0fef2f2  usr/share/nvim/runtime/indent/eterm.vim
2563d8e93b781af6b433627bc351bdc1  usr/share/nvim/runtime/indent/falcon.vim
b78e8b47ad3ea9d46fb8ca3afa33d6cc  usr/share/nvim/runtime/indent/fortran.vim
08c68da5470c3f870e067247bb4f2cd1  usr/share/nvim/runtime/indent/framescript.vim
82e62b8b9cd04e5b072016d0eb1a334a  usr/share/nvim/runtime/indent/gitconfig.vim
1b77a192466442f9e9bb7bdd8e114351  usr/share/nvim/runtime/indent/gitolite.vim
f007ea559223a595a5372a0e5c13a15b  usr/share/nvim/runtime/indent/go.vim
77726d1c68d714845c1ac23cf0bb89bd  usr/share/nvim/runtime/indent/haml.vim
486564d27ac6a0b64fb5ff884769b6ad  usr/share/nvim/runtime/indent/hamster.vim
ba61bb1f5a8d965d833f87326b72e00c  usr/share/nvim/runtime/indent/hog.vim
1d86e2998d84a092cb0a2bf77b8db73a  usr/share/nvim/runtime/indent/html.vim
a4be45ddc347cd0a840a0052cfb776be  usr/share/nvim/runtime/indent/htmldjango.vim
d90b4bb3848b133d2694ef1249aa3358  usr/share/nvim/runtime/indent/idlang.vim
2f33e4596b75aaa34a6d029c6cb5b169  usr/share/nvim/runtime/indent/ishd.vim
956dd55e5108923e6c8c2c2b8d75ae35  usr/share/nvim/runtime/indent/j.vim
521e769e0fdc651f5dd4990e0477e8e5  usr/share/nvim/runtime/indent/java.vim
254f8c1f03414d6807f6338697304902  usr/share/nvim/runtime/indent/javascript.vim
2ee2a9dca74b4edea3bf5afe7e5405e8  usr/share/nvim/runtime/indent/json.vim
972a463263b464755dd25a0673921a32  usr/share/nvim/runtime/indent/jsp.vim
855c8eee0f664a015f3693fbae49f88a  usr/share/nvim/runtime/indent/ld.vim
3dbb41d67cc8c19a0e3de0a6dbc5cf6f  usr/share/nvim/runtime/indent/less.vim
7a1c34fe5192c32176ea05bfab6055df  usr/share/nvim/runtime/indent/lifelines.vim
47d49cca9a608cce841349bb3bb7ba12  usr/share/nvim/runtime/indent/liquid.vim
f0c7b9a269114f86e4f9a714b23210f0  usr/share/nvim/runtime/indent/lisp.vim
a2f296ee7374c73fe35750cdfcfe4db8  usr/share/nvim/runtime/indent/logtalk.vim
615588331c30acd076dde6e3f7a1ffa1  usr/share/nvim/runtime/indent/lua.vim
a5723c24b70fb64d23e869b132794dff  usr/share/nvim/runtime/indent/mail.vim
7e11c61721a88f52c9d3fecd810a95cf  usr/share/nvim/runtime/indent/make.vim
ed824e38664a83a51c50689135d29cc5  usr/share/nvim/runtime/indent/matlab.vim
3fae08154e17b52c0821d66418780568  usr/share/nvim/runtime/indent/mma.vim
84258cbb9a4478a11c48521ddc0efed4  usr/share/nvim/runtime/indent/mp.vim
f269e4c0e2469a407f83a1c12d2ba5a9  usr/share/nvim/runtime/indent/objc.vim
6dfd7212a34ed8bda50e626ce203f62f  usr/share/nvim/runtime/indent/ocaml.vim
65511cb96b7e16fd2b7118a3fbf72cfe  usr/share/nvim/runtime/indent/occam.vim
54b8bd1fa88cb10f3021dd9a53982387  usr/share/nvim/runtime/indent/pascal.vim
a9ac74c264f2aa8a88d985d56041f702  usr/share/nvim/runtime/indent/perl.vim
4b75ae854982724aacae925d37389928  usr/share/nvim/runtime/indent/perl6.vim
f88ec4116499a8027d983c0193a57505  usr/share/nvim/runtime/indent/php.vim
17ac639742aabfc278cda9b552c51bbe  usr/share/nvim/runtime/indent/postscr.vim
8090249d6f037c004f5f8d217d0c2a6a  usr/share/nvim/runtime/indent/pov.vim
f67500a24650720ad494da775fba5efd  usr/share/nvim/runtime/indent/prolog.vim
dd3df4e8d77d3c40e770c2c06c85f9e5  usr/share/nvim/runtime/indent/pyrex.vim
c79535f69f96c14c2ebbefb93aa85d9d  usr/share/nvim/runtime/indent/python.vim
a8991a62bfc4cf19c7c62f3cd9bb2e3a  usr/share/nvim/runtime/indent/r.vim
33252b32cac7cc6af67e2f4c9c5ac29e  usr/share/nvim/runtime/indent/readline.vim
dd7b9929c1960ef407573e5bc9b174c3  usr/share/nvim/runtime/indent/rhelp.vim
2d2f51742a1c9e1502dea6d694bfe4e5  usr/share/nvim/runtime/indent/rmd.vim
dbb27640419982870bee6552d51de2a7  usr/share/nvim/runtime/indent/rnoweb.vim
fdec0b0a6c1e83b095202abd23574cea  usr/share/nvim/runtime/indent/rpl.vim
25c5c94ddf4280e54101e9d8260d6e99  usr/share/nvim/runtime/indent/rrst.vim
33d3d3e6325711f0b955bceec3db6d26  usr/share/nvim/runtime/indent/rst.vim
499a60cb9f976dfa81af674a15cc09e9  usr/share/nvim/runtime/indent/ruby.vim
f6d68da922f45157a0d8e9e1a48104f4  usr/share/nvim/runtime/indent/sass.vim
91fed31081160e4557fdb1e347f12e63  usr/share/nvim/runtime/indent/scheme.vim
3fa1576b2ec6651e930c5decdce33d12  usr/share/nvim/runtime/indent/scss.vim
19acc0cd0de0b9f598e36c222b8f9c07  usr/share/nvim/runtime/indent/sdl.vim
4d2067a040a9c7c43c584bff41245432  usr/share/nvim/runtime/indent/sh.vim
91bda5c39b753d11056d1cf1cacc6961  usr/share/nvim/runtime/indent/sml.vim
8498fe2a48dc376a1c47d36dd1dc59d0  usr/share/nvim/runtime/indent/sql.vim
f07a06b1355538e766fe887b16a8a250  usr/share/nvim/runtime/indent/sqlanywhere.vim
e837588056d4afc4a5371d1f1ef71a69  usr/share/nvim/runtime/indent/systemd.vim
5ede508e2aabfc85836829f3fe96802c  usr/share/nvim/runtime/indent/systemverilog.vim
1cb9dd7c137aaf5766afc49d62563f8b  usr/share/nvim/runtime/indent/tcl.vim
89f865be8cbd60afc4e32207c41ea1f8  usr/share/nvim/runtime/indent/tcsh.vim
defe5646288b9a3905c2d6fbd24a1ce2  usr/share/nvim/runtime/indent/teraterm.vim
4cf56e5b5985210ca697cc7c660d1b78  usr/share/nvim/runtime/indent/tex.vim
e81ecf32fc5d9122b14e4fee7f437264  usr/share/nvim/runtime/indent/tf.vim
6279a75d00466ce6914be192dc558038  usr/share/nvim/runtime/indent/tilde.vim
89bebb1f23cad87fbe7a748bd6a6f055  usr/share/nvim/runtime/indent/treetop.vim
f8e182dba0dc0be17539761d01f4da6c  usr/share/nvim/runtime/indent/vb.vim
ef75ece1c343d7a78e794f4200233aba  usr/share/nvim/runtime/indent/verilog.vim
29221dee022fdd86f3ec3fcd9f9fbebf  usr/share/nvim/runtime/indent/vhdl.vim
57252e1eaa171282a61bcfb0a40b7120  usr/share/nvim/runtime/indent/vim.vim
8d379b06ce54eee8ff26d3ecf1411007  usr/share/nvim/runtime/indent/vroom.vim
207c0d2828be9496a55f97ad589176c2  usr/share/nvim/runtime/indent/xf86conf.vim
04aa82d0f6506c4f79177b5086e9b2dd  usr/share/nvim/runtime/indent/xhtml.vim
0516fbe42d154f07b3926e71e56f0f52  usr/share/nvim/runtime/indent/xinetd.vim
28d13202388755941e10b5b1b0c2539f  usr/share/nvim/runtime/indent/xml.vim
e67a32fc868f85dd1e8a52f937bc6db1  usr/share/nvim/runtime/indent/xsd.vim
39dc925c7e63bc9a42807babb691a4f0  usr/share/nvim/runtime/indent/xslt.vim
9dc77bb558be45812a4ee7aeb6f1f559  usr/share/nvim/runtime/indent/yacc.vim
d08e970841337864ea93310667c7909d  usr/share/nvim/runtime/indent/yaml.vim
b6a347c56e8538e346d7519e3fa2e798  usr/share/nvim/runtime/indent/zimbu.vim
d0751dbc6da15e33e16e3ba068e09c50  usr/share/nvim/runtime/indent/zsh.vim
f5cf5cdd869f13913750d028aef66c37  usr/share/nvim/runtime/indoff.vim
42ff480f4a7a22b5f97c86a5320808b2  usr/share/nvim/runtime/keymap/accents.vim
9e64fd4e2c8db3317ba683eb19709eeb  usr/share/nvim/runtime/keymap/arabic.vim
5433209d11ae24ae095497ad8ade3540  usr/share/nvim/runtime/keymap/arabic_utf-8.vim
32e2e8d584f3acaee9028a59f7ed641c  usr/share/nvim/runtime/keymap/belarusian-jcuken.vim
7d8fc30f63c221d83fc6488dbf8c54c5  usr/share/nvim/runtime/keymap/bulgarian-bds.vim
74a5a6f8312b4c74809c69ff5dd2bc6b  usr/share/nvim/runtime/keymap/bulgarian-phonetic.vim
8f21f52e6536dcf399c22f9dc6040f75  usr/share/nvim/runtime/keymap/canfr-win.vim
2a0273f3c7b9596a7696b314d6e59e2b  usr/share/nvim/runtime/keymap/croatian.vim
72f78fa8aa09fbcb57b8c830f7018d2f  usr/share/nvim/runtime/keymap/croatian_cp1250.vim
f341b0827566bc5a4266fbeda2dd01ec  usr/share/nvim/runtime/keymap/croatian_iso-8859-2.vim
c1a365bf0f9e47a85221eb633e7532d8  usr/share/nvim/runtime/keymap/croatian_utf-8.vim
5c849c8f7f29a9691c8e0babefb929bf  usr/share/nvim/runtime/keymap/czech.vim
177c4d342b4340db4cf212a5f3827efa  usr/share/nvim/runtime/keymap/czech_utf-8.vim
d8c057e00b41f3f0a14e06427da10d6c  usr/share/nvim/runtime/keymap/dvorak.vim
f529e2dbb75d2a72c972ae2e3503b064  usr/share/nvim/runtime/keymap/esperanto.vim
159d77b8478a142eecdb57e4f3637c92  usr/share/nvim/runtime/keymap/esperanto_utf-8.vim
b41d4a993aaf5b336011f09d9729c832  usr/share/nvim/runtime/keymap/greek.vim
0f8816a5488cb27ce78b181f569fff62  usr/share/nvim/runtime/keymap/greek_cp1253.vim
094482617b641d6888edd5c7aee51fe8  usr/share/nvim/runtime/keymap/greek_cp737.vim
30ac9bab49f0691697461017d81039c7  usr/share/nvim/runtime/keymap/greek_iso-8859-7.vim
b8b5dcd5c3ee82295e3a285b6048f921  usr/share/nvim/runtime/keymap/greek_utf-8.vim
d7bed5b3b606064b5c3c9b39f2145510  usr/share/nvim/runtime/keymap/hebrew.vim
e41a4cc7c9d9e9b4b76ca975f62fc056  usr/share/nvim/runtime/keymap/hebrew_cp1255.vim
b3e0904a731ba4225b29ad1e0d8d76f8  usr/share/nvim/runtime/keymap/hebrew_iso-8859-8.vim
09a04fd74386cf904fe39c2ef070675c  usr/share/nvim/runtime/keymap/hebrew_utf-8.vim
be8964fee426d3658510ae96643c065b  usr/share/nvim/runtime/keymap/hebrewp.vim
07ab2ef4cdeb12058cfc581af8b537e4  usr/share/nvim/runtime/keymap/hebrewp_cp1255.vim
e6a84c86acebf6bda90efd85690c1090  usr/share/nvim/runtime/keymap/hebrewp_iso-8859-8.vim
2fbaf13bfc2b30c21f7cb8673086628d  usr/share/nvim/runtime/keymap/hebrewp_utf-8.vim
7a0c158a52e383d12fdeeebf07ebb7c3  usr/share/nvim/runtime/keymap/kana.vim
4f97124ba95a80ae0e8e9055ff8f156f  usr/share/nvim/runtime/keymap/lithuanian-baltic.vim
6d46b55ebbed5909ebf9173342d47ba1  usr/share/nvim/runtime/keymap/magyar_utf-8.vim
ad6f65d42ced2f6b4979ef343709de09  usr/share/nvim/runtime/keymap/mongolian_utf-8.vim
f8bbaf53fe60d73eb0a184f8aa405930  usr/share/nvim/runtime/keymap/persian-iranian_utf-8.vim
46191edacd356a67555729416cd58552  usr/share/nvim/runtime/keymap/persian.vim
b47559b6c47c565ee49a294a6743e416  usr/share/nvim/runtime/keymap/pinyin.vim
0c07b1217d6db9b22a90455506c6862c  usr/share/nvim/runtime/keymap/polish-slash.vim
cf5bdf5c7cb0dd0b534ca26d2067188e  usr/share/nvim/runtime/keymap/polish-slash_cp1250.vim
8f8f2c1c8d84544d52bebc29e3fa912d  usr/share/nvim/runtime/keymap/polish-slash_cp852.vim
31896ccbcc9f4895ff804022ee8b5f80  usr/share/nvim/runtime/keymap/polish-slash_iso-8859-2.vim
538efe275c854db0925f2ea54b84bddd  usr/share/nvim/runtime/keymap/polish-slash_utf-8.vim
3ce3c8637fcd0d679a61e2a1cdfa99c4  usr/share/nvim/runtime/keymap/russian-dvorak.vim
760c587f7e9b798b5e5cb31787bf485c  usr/share/nvim/runtime/keymap/russian-jcuken.vim
faae03e536ec94bc1186285a90db6fc5  usr/share/nvim/runtime/keymap/russian-jcukenwin.vim
d4febed3f8d1b6d360106244a0992250  usr/share/nvim/runtime/keymap/russian-yawerty.vim
ef1d21585cc0253130db2027d47e63b6  usr/share/nvim/runtime/keymap/serbian-latin.vim
1fd5f16be56ef2e620e9c7b47029e2d6  usr/share/nvim/runtime/keymap/serbian-latin_utf-8.vim
4f7bfdb31a898274f303be8a9f6142c3  usr/share/nvim/runtime/keymap/serbian.vim
46a4e051670c1c65312e7dc09d0adbcb  usr/share/nvim/runtime/keymap/serbian_cp1250.vim
55cdf6305e268b4a9fb515f7bab4ea30  usr/share/nvim/runtime/keymap/serbian_cp1251.vim
603b546af0e0e78474f96ea599d4b0b7  usr/share/nvim/runtime/keymap/serbian_iso-8859-2.vim
3fb67ab4d73499b26d6b044e9f15ef53  usr/share/nvim/runtime/keymap/serbian_iso-8859-5.vim
ad1286432054706a11c94a2658de4477  usr/share/nvim/runtime/keymap/serbian_utf-8.vim
9c9c8cd72f57159fc59d8abd94c2b772  usr/share/nvim/runtime/keymap/sinhala-phonetic_utf-8.vim
0c6fa6d29fa8f4b2c27754f4ebe81eff  usr/share/nvim/runtime/keymap/sinhala.vim
dd1f8c6a8178db9a492369446f84f20e  usr/share/nvim/runtime/keymap/slovak.vim
e7b710f66f1d82a05a3fd39da3a87ddc  usr/share/nvim/runtime/keymap/slovak_cp1250.vim
0ea6b3181e3276815be3eda24aa6fed6  usr/share/nvim/runtime/keymap/slovak_iso-8859-2.vim
cc4e214f40732bc3e14516bae809d2fc  usr/share/nvim/runtime/keymap/slovak_utf-8.vim
1aefa71fa47a516a8c6aa778c2cb5a99  usr/share/nvim/runtime/keymap/tamil_tscii.vim
1a11bf36ed5c4e921ebe03d1fbe83430  usr/share/nvim/runtime/keymap/thaana-phonetic_utf-8.vim
1cabf2d2c3401e2fe40bd1c0e39263b3  usr/share/nvim/runtime/keymap/thaana.vim
6d4b3892df551349fc316d89f5128ff1  usr/share/nvim/runtime/keymap/ukrainian-dvorak.vim
2aad801baf98d2c0dfd3e0cbe43cfcb7  usr/share/nvim/runtime/keymap/ukrainian-jcuken.vim
56fa2a3aabd673dc8fb6c44ce58f819b  usr/share/nvim/runtime/keymap/vietnamese-viqr_utf-8.vim
ed5a8c76cb5d4f1a41388190a2710bd8  usr/share/nvim/runtime/macmap.vim
d81c81c7b9441be72ede557a45e92a96  usr/share/nvim/runtime/macros/editexisting.vim
ddbdf7427f2396e2c0ebbeb5bdf7c584  usr/share/nvim/runtime/macros/justify.vim
163ff8d374963f25dc4f5707d8649f43  usr/share/nvim/runtime/macros/less.bat
289530f506af2467d8f702f209db8d7d  usr/share/nvim/runtime/macros/less.sh
7e0b52d1a40601da690ae4dafe41ca9b  usr/share/nvim/runtime/macros/less.vim
f38e067070d79f8edfad384af52c2580  usr/share/nvim/runtime/macros/matchit.vim
f6d030c5e5eac73341ab487b0d5c6924  usr/share/nvim/runtime/macros/shellmenu.vim
9319c9d5b7f17a40d5b83319ae26618a  usr/share/nvim/runtime/macros/swapmous.vim
39d5d25ef74fd2afa5ab6768575992c4  usr/share/nvim/runtime/makemenu.vim
c92a01aec603d4b36fb93a278d5369a9  usr/share/nvim/runtime/menu.vim
b063bb049b10d90a688d3d76de0fdd97  usr/share/nvim/runtime/mswin.vim
d46448820c1d5d69fa7f20892860bb52  usr/share/nvim/runtime/optwin.vim
b3d938f2c00d7ea9b1a6721633829755  usr/share/nvim/runtime/pack/dist/opt/justify/plugin/justify.vim
7d26c7dabdd373155198024d490a4857  usr/share/nvim/runtime/pack/dist/opt/shellmenu/plugin/shellmenu.vim
f8e32ee65ecb31e4e446ba06dfce9ac3  usr/share/nvim/runtime/pack/dist/opt/swapmouse/plugin/swapmouse.vim
9fe0eb2ab04acb8f0836a791ff866b30  usr/share/nvim/runtime/pack/dist/opt/vimball/autoload/vimball.vim
1158cf39890d7489449a6e75d9a1c395  usr/share/nvim/runtime/pack/dist/opt/vimball/doc/tags
01cc8327958c6a4f33b4a80a275bda3d  usr/share/nvim/runtime/pack/dist/opt/vimball/doc/vimball.txt
f91c94c1dbd7baf85c3c453d44071241  usr/share/nvim/runtime/pack/dist/opt/vimball/plugin/vimballPlugin.vim
ff81d8314965b6f9b887ebe41996d8ef  usr/share/nvim/runtime/plugin/gzip.vim
ed4138dd3559f1000098b7ad405ba91e  usr/share/nvim/runtime/plugin/health.vim
db0844aec42a820bde9cb72d15286d00  usr/share/nvim/runtime/plugin/man.vim
94cf5090239e5e8452af292179fb5098  usr/share/nvim/runtime/plugin/matchit.vim
4d3a0d45093fcb3543e39cf2fd9c7092  usr/share/nvim/runtime/plugin/matchparen.vim
957c07a01138a3a59df89904f4742989  usr/share/nvim/runtime/plugin/netrwPlugin.vim
f78d9a59d137ad52c9de520f82af8c48  usr/share/nvim/runtime/plugin/rplugin.vim
53d36f36e05b21a096142266318958df  usr/share/nvim/runtime/plugin/rrhelper.vim
2494e83e7704c1b0cc4676de197a73be  usr/share/nvim/runtime/plugin/shada.vim
7539682be9f426efb7e787a0208ff200  usr/share/nvim/runtime/plugin/spellfile.vim
e5d4c9f0835b2b10832e28095899bcc2  usr/share/nvim/runtime/plugin/tarPlugin.vim
6c62384e406a96ee73ca95a9bb6b34c0  usr/share/nvim/runtime/plugin/tohtml.vim
3e4f1751093ce43fa5e1b826b740ff7b  usr/share/nvim/runtime/plugin/tutor.vim
77b68a1a53932ea0d03a39d9e65e83c3  usr/share/nvim/runtime/plugin/zipPlugin.vim
8b2021e3414c5aba3764ebedd99f9264  usr/share/nvim/runtime/print/ascii.ps
2befb01b3ce122821fcc8a5618d3cdd2  usr/share/nvim/runtime/print/cidfont.ps
47d7830b6c1ca39161533d95f40f4d1b  usr/share/nvim/runtime/print/cns_roman.ps
d4b39d0551b6ab3dac30227859698659  usr/share/nvim/runtime/print/cp1250.ps
bd42590eaf1686201dea18293de3d3f5  usr/share/nvim/runtime/print/cp1251.ps
0e90852367db3ec1ca22c4bc3b8d2026  usr/share/nvim/runtime/print/cp1252.ps
da8e09b02fc1472951e9cbcf2b69f9eb  usr/share/nvim/runtime/print/cp1253.ps
8b96bb351f251d89bc3394670081bfa9  usr/share/nvim/runtime/print/cp1254.ps
33c3cdf5984284e3c87eb6ab0b22df75  usr/share/nvim/runtime/print/cp1255.ps
22487f34dd9a78003ac296ce3efa19b0  usr/share/nvim/runtime/print/cp1257.ps
b24c4954f69f724fe2ef25674340fd64  usr/share/nvim/runtime/print/gb_roman.ps
84c504bcdbf4b31a8e4431dff692f94f  usr/share/nvim/runtime/print/hp-roman8.ps
cd7c34b9307bc1a90e0aaf723d233f75  usr/share/nvim/runtime/print/iso-8859-10.ps
f73611895f0092767ee3bf9c3cac0092  usr/share/nvim/runtime/print/iso-8859-11.ps
e5f08db1cff18cdb60a547b65a197156  usr/share/nvim/runtime/print/iso-8859-13.ps
122d3b1f06be392c3467800890a6384e  usr/share/nvim/runtime/print/iso-8859-14.ps
9f4093d544d6e00393263717d84f9d69  usr/share/nvim/runtime/print/iso-8859-15.ps
c6f7bae1e82087fb174c1b189d123bee  usr/share/nvim/runtime/print/iso-8859-2.ps
ed8a3c9a169641ae213d35d801b2577e  usr/share/nvim/runtime/print/iso-8859-3.ps
41e39273d8f847bf536ea5baed213c77  usr/share/nvim/runtime/print/iso-8859-4.ps
759e64123ce8f359069d4a1289f0ccfa  usr/share/nvim/runtime/print/iso-8859-5.ps
ed95eb358813c388a4bcf6ad2fddee67  usr/share/nvim/runtime/print/iso-8859-7.ps
e0a5f7a6313593329ea2d821acde66ab  usr/share/nvim/runtime/print/iso-8859-8.ps
315e33a3342d475d72ae5cf51b002ee0  usr/share/nvim/runtime/print/iso-8859-9.ps
cfaa694e54ea6f1cfc85854139a9de54  usr/share/nvim/runtime/print/jis_roman.ps
8e596759a9882cd0fa43481cb7f550e9  usr/share/nvim/runtime/print/koi8-r.ps
6f5cdf992ea69c8ce82a3ab76f44fe64  usr/share/nvim/runtime/print/koi8-u.ps
0dbf52c5d2064517a4a56a0c702c5e57  usr/share/nvim/runtime/print/ks_roman.ps
8eed7dedb465b6e0456537bcecd8b29e  usr/share/nvim/runtime/print/latin1.ps
01ff7f454336ee635701631b547de91e  usr/share/nvim/runtime/print/mac-roman.ps
6892f86e91b6baf8e93f23d817e87680  usr/share/nvim/runtime/print/prolog.ps
52233a3e514dd8c89cab290263de051f  usr/share/nvim/runtime/scripts.vim
132df8ecf41e2969dc5c2d66389a550f  usr/share/nvim/runtime/synmenu.vim
941a5e9e0d6eec79cd0ec26767aa41f0  usr/share/nvim/runtime/syntax/2html.vim
ddff87c6321e123385bd2ea5f1b62218  usr/share/nvim/runtime/syntax/a2ps.vim
008cd780bdd9fb4b8c2ab01ac406a323  usr/share/nvim/runtime/syntax/a65.vim
cbfe4137f536f56f191a41596c2d1d8d  usr/share/nvim/runtime/syntax/aap.vim
4f948366d39653436d70323a6b95130c  usr/share/nvim/runtime/syntax/abap.vim
5a79c37a6e59fb822dfa413172308487  usr/share/nvim/runtime/syntax/abaqus.vim
46997f0c6785c6046ace8df370e89386  usr/share/nvim/runtime/syntax/abc.vim
ea0df6741d1512a1de72b3a82eeb3f2f  usr/share/nvim/runtime/syntax/abel.vim
44aaca85ff91288292d89a758167bfc4  usr/share/nvim/runtime/syntax/acedb.vim
696bf076b891d36e0cd44d4f4137b6eb  usr/share/nvim/runtime/syntax/ada.vim
457afed391d230f08d878e79038ca40a  usr/share/nvim/runtime/syntax/aflex.vim
439de573ebc2130d97c5f8f8478b58fe  usr/share/nvim/runtime/syntax/ahdl.vim
a26b45a89d4089abf9fc05318e7e8bcc  usr/share/nvim/runtime/syntax/alsaconf.vim
79304be0de2a00d3dac41d12828a38d2  usr/share/nvim/runtime/syntax/amiga.vim
c90983909f7b6045c7897c49cc4366ab  usr/share/nvim/runtime/syntax/aml.vim
abd3db2c9e943c0930b35235484b58fd  usr/share/nvim/runtime/syntax/ampl.vim
9a6dc5f512822901a775b767017d8afa  usr/share/nvim/runtime/syntax/ant.vim
7e20587386e8d6079951de0235c7d8b5  usr/share/nvim/runtime/syntax/antlr.vim
8f8f2c745b3db49f4bbad9fbd07554f7  usr/share/nvim/runtime/syntax/apache.vim
9ac590a5ea107a0d84874920b60d0add  usr/share/nvim/runtime/syntax/apachestyle.vim
76768c50888149cf02fec8a980152a19  usr/share/nvim/runtime/syntax/aptconf.vim
54c591d0da2a51974ed0b8788e609ccb  usr/share/nvim/runtime/syntax/arch.vim
f66e0cc2f3b59dc719a96120ba23a5d7  usr/share/nvim/runtime/syntax/arduino.vim
35c416b7e705915cde18c7da4beebf50  usr/share/nvim/runtime/syntax/art.vim
f63e1ba41df3c51c8cc1adf2ad250074  usr/share/nvim/runtime/syntax/asciidoc.vim
f2d718b4a55138b2e97313dd870fee3a  usr/share/nvim/runtime/syntax/asm.vim
a3b05770b9da11e5cf0e50fd194a1270  usr/share/nvim/runtime/syntax/asm68k.vim
ec995d67f2a66b46a185d347f86217a4  usr/share/nvim/runtime/syntax/asmh8300.vim
4b50c0d726855a9ff72d464745f223cc  usr/share/nvim/runtime/syntax/asn.vim
9b91f325f0b8d570b3f0609259bca13d  usr/share/nvim/runtime/syntax/aspperl.vim
b5ab5ee9d1d6e015ef13511da6a09bc4  usr/share/nvim/runtime/syntax/aspvbs.vim
51d178ac8bba8a0fb6cb066b238f8d75  usr/share/nvim/runtime/syntax/asterisk.vim
459b542300f09399b258007bfccaa3ce  usr/share/nvim/runtime/syntax/asteriskvm.vim
6646a216735b5e139b2162790b3652aa  usr/share/nvim/runtime/syntax/atlas.vim
229c3848702a8a6d85ab14ea12f936a2  usr/share/nvim/runtime/syntax/autohotkey.vim
8a8fe441246817e83a0fef1b3c1c43f6  usr/share/nvim/runtime/syntax/autoit.vim
38bab1b9b994b5ddd9f193da16d5dc1f  usr/share/nvim/runtime/syntax/automake.vim
0830bf2d8b330b562bd0356e3abeb4c8  usr/share/nvim/runtime/syntax/ave.vim
ac282639471c5e41aa9bbe3ced7bca77  usr/share/nvim/runtime/syntax/avra.vim
c624dcb21e969a4612a8cff2097ccf0f  usr/share/nvim/runtime/syntax/awk.vim
da5407d38336095a0b2b0e4d41469271  usr/share/nvim/runtime/syntax/ayacc.vim
23f420ebac2adbe387ec455c969ae155  usr/share/nvim/runtime/syntax/b.vim
cb427f5a91589c62ff79a8822136af9a  usr/share/nvim/runtime/syntax/baan.vim
15bfdec3bc1d88d56adb3f2e2f1e32aa  usr/share/nvim/runtime/syntax/basic.vim
77ff07d7267dee1e76ca64ceb1762426  usr/share/nvim/runtime/syntax/bc.vim
1d52d84fd8620809690c84baa3147624  usr/share/nvim/runtime/syntax/bdf.vim
36beadcc012306b22286939c438ba236  usr/share/nvim/runtime/syntax/bib.vim
297fb2e61feda972332359d0aebc8249  usr/share/nvim/runtime/syntax/bindzone.vim
cf5cdc0999b37077784c6537cb1f60c2  usr/share/nvim/runtime/syntax/blank.vim
f88b48a41652043f487941d14a0bdcfa  usr/share/nvim/runtime/syntax/bst.vim
834f11b88bfee189abc67a4e7c5a51a0  usr/share/nvim/runtime/syntax/btm.vim
2ed45802b13452c2a539251540e12510  usr/share/nvim/runtime/syntax/bzl.vim
23738b5010ab0678f9a128881cc76c3e  usr/share/nvim/runtime/syntax/bzr.vim
8558b1a8aefabfe2a66933479ec99b86  usr/share/nvim/runtime/syntax/c.vim
23983077fe07037def02f704dc87d0e4  usr/share/nvim/runtime/syntax/cabal.vim
d09448ab630be01cc1956bf7d18ce42b  usr/share/nvim/runtime/syntax/calendar.vim
8694c9cf3960a49023d65b5009cf0c16  usr/share/nvim/runtime/syntax/catalog.vim
996e479baef608ef4dc5910097f3dab7  usr/share/nvim/runtime/syntax/cdl.vim
673f0c82c9622403d79fcfca7ecd4c57  usr/share/nvim/runtime/syntax/cdrdaoconf.vim
4933e1ecebf525cb19abfadd538c0c8b  usr/share/nvim/runtime/syntax/cdrtoc.vim
a51d302a824352ee993fd5e291b9f295  usr/share/nvim/runtime/syntax/cf.vim
598c51dcd77cc8fa12e07dc6dd9ec895  usr/share/nvim/runtime/syntax/cfg.vim
31cadc1f292f1f9265730089ec300a84  usr/share/nvim/runtime/syntax/ch.vim
1b234fffb764b193fc4e15baa5b95300  usr/share/nvim/runtime/syntax/chaiscript.vim
07e8f1b13528898401cf52f0bfc8ee87  usr/share/nvim/runtime/syntax/change.vim
40e7e9714d7b7ff0b3b266c9379ec164  usr/share/nvim/runtime/syntax/changelog.vim
032dcba4e18461211590239d91a4d79f  usr/share/nvim/runtime/syntax/chaskell.vim
d485c8a329666d19b1d471ec85adf100  usr/share/nvim/runtime/syntax/cheetah.vim
25d5929a447bb4afbd45677aa96b49ee  usr/share/nvim/runtime/syntax/chill.vim
581e00e16927dedb79f8015c4ea164a4  usr/share/nvim/runtime/syntax/chordpro.vim
a5f38bb16235a20c6a48ce39919761a3  usr/share/nvim/runtime/syntax/cl.vim
0868f0c49b423c43799343ec758334fd  usr/share/nvim/runtime/syntax/clean.vim
e20939556404729835900b0c51c91f77  usr/share/nvim/runtime/syntax/clipper.vim
14e3142e880c7f8bb94c72d42d02bff3  usr/share/nvim/runtime/syntax/clojure.vim
cdb5448d4576462996df79e6edc9ead3  usr/share/nvim/runtime/syntax/cmake.vim
189e64bd26c355dab44a97982b7692fa  usr/share/nvim/runtime/syntax/cmusrc.vim
b73e4d994320a420d0f72ff85d4a52ab  usr/share/nvim/runtime/syntax/cobol.vim
2173c44ef6b1044da95c78c0c2040495  usr/share/nvim/runtime/syntax/coco.vim
1c2438f0b0241aae121c3a3eee622339  usr/share/nvim/runtime/syntax/colortest.vim
a1af6baaa5eb95ccbe0e5be60747ae06  usr/share/nvim/runtime/syntax/conaryrecipe.vim
a9881c410f91621ac8dfb9e710fb4c43  usr/share/nvim/runtime/syntax/conf.vim
dc4991ac07d373abaef3af348c62ee8b  usr/share/nvim/runtime/syntax/config.vim
f4f342af28d62252202c87116339d21a  usr/share/nvim/runtime/syntax/context.vim
d898f72f2f5bc2e010ad4ce35c5a60c4  usr/share/nvim/runtime/syntax/cpp.vim
a11726da54e7d3eec419e3a6942a70a0  usr/share/nvim/runtime/syntax/crm.vim
c96400bcee077f1160aa20b633a9627e  usr/share/nvim/runtime/syntax/crontab.vim
ee50a24256f26446a2f8961293ed42f3  usr/share/nvim/runtime/syntax/cs.vim
d4d6a28ad952b7c37848bc6c80991954  usr/share/nvim/runtime/syntax/csc.vim
4dd50ec7b6a2547235b723a5163446e6  usr/share/nvim/runtime/syntax/csdl.vim
d8c9d537c148d72b69ec09c1caa31001  usr/share/nvim/runtime/syntax/csh.vim
8b4a98f41af72db0bfdae58b079d318b  usr/share/nvim/runtime/syntax/csp.vim
98a466f41149c76b46bb3b3ff2f5a6c4  usr/share/nvim/runtime/syntax/css.vim
8a9cef54249e0c9b5ae0429221480efe  usr/share/nvim/runtime/syntax/cterm.vim
e8f42c20c14c68031670c73b18fa4ddb  usr/share/nvim/runtime/syntax/ctrlh.vim
59a2655057facf699a247be630243154  usr/share/nvim/runtime/syntax/cucumber.vim
a12e9a9dc7ff69c73de076ea495b70fb  usr/share/nvim/runtime/syntax/cuda.vim
3883e86a0806fe8ba112a79d60c26566  usr/share/nvim/runtime/syntax/cupl.vim
2e4c658952568556d07224f44e337306  usr/share/nvim/runtime/syntax/cuplsim.vim
4147414b91cc873d3baba75903252e33  usr/share/nvim/runtime/syntax/cvs.vim
c952cd8787e55d934f71f313380bc49f  usr/share/nvim/runtime/syntax/cvsrc.vim
ea2b78f3620fc5e8f2e59d77ec8fa61b  usr/share/nvim/runtime/syntax/cweb.vim
46acb23371947e50eefd226ad0ec5f1e  usr/share/nvim/runtime/syntax/cynlib.vim
ce56e58f2689cfffe8b8df320a4a07e2  usr/share/nvim/runtime/syntax/cynpp.vim
a8da9ce6eaa1c859c9ecadf02a0034fc  usr/share/nvim/runtime/syntax/d.vim
5a903b2134418d580e7cd9b73ff48952  usr/share/nvim/runtime/syntax/datascript.vim
1b98e98785c1f5a195e95a9b689a78d2  usr/share/nvim/runtime/syntax/dcd.vim
2d56705092171ec14bbe6c57da1a85cb  usr/share/nvim/runtime/syntax/dcl.vim
8f201e755b100a718cd688a793569239  usr/share/nvim/runtime/syntax/debchangelog.vim
804750ce0f732c60c0c817009fb212f8  usr/share/nvim/runtime/syntax/debcontrol.vim
4d9ea5cdadcb4dc2d9de38a24922e133  usr/share/nvim/runtime/syntax/debsources.vim
38753f18f28033731fbc7f33bc149c47  usr/share/nvim/runtime/syntax/def.vim
a4a7837d972af83d2105113517044286  usr/share/nvim/runtime/syntax/denyhosts.vim
a99ce892e1e9d4d9d9e10539c0d7ccc1  usr/share/nvim/runtime/syntax/desc.vim
f9f7046d2f9c0097201e06911fb4ec9c  usr/share/nvim/runtime/syntax/desktop.vim
1dbeef69a58ce2d15a68da11d1ebd205  usr/share/nvim/runtime/syntax/dictconf.vim
5217e733e681d0e4e25b4e3b897931bf  usr/share/nvim/runtime/syntax/dictdconf.vim
dbee9ac996ecb39189ac4ec951b5d88f  usr/share/nvim/runtime/syntax/diff.vim
ea8a94022dc62a55920bd95884412d42  usr/share/nvim/runtime/syntax/dircolors.vim
c1b9711a91449f6447be3a2c4088c9a4  usr/share/nvim/runtime/syntax/dirpager.vim
4a354179acf5c12454b89662e4ee0aea  usr/share/nvim/runtime/syntax/diva.vim
f1e8f2e43613e9241013331227a535b0  usr/share/nvim/runtime/syntax/django.vim
dfa090589fc6cf30cbfa679ce1e57b2a  usr/share/nvim/runtime/syntax/dns.vim
baa0b77ab05de3a5381f5c71ff578f4b  usr/share/nvim/runtime/syntax/dnsmasq.vim
1399a72b3b8dddd83a9a0cf1b6ee7bcb  usr/share/nvim/runtime/syntax/docbk.vim
cc349b914d0346a1778e6ec2ab0a6b9e  usr/share/nvim/runtime/syntax/docbksgml.vim
53af9fe8f4ea5a02a02527530e2decf8  usr/share/nvim/runtime/syntax/docbkxml.vim
c3728f4dc416076bcea55d3fcb7e3ad8  usr/share/nvim/runtime/syntax/dockerfile.vim
12cd3b58a7ab7aec6e40098eadb957d1  usr/share/nvim/runtime/syntax/dosbatch.vim
7bcc3599f54e7ab2439bdfc4d67a4c0e  usr/share/nvim/runtime/syntax/dosini.vim
0023225c18ac40a7fbd911fee6a36f66  usr/share/nvim/runtime/syntax/dot.vim
87173f519533a23c6e9d298455f34acf  usr/share/nvim/runtime/syntax/doxygen.vim
0b1b567ee97ec2c49bd9b29218c8f954  usr/share/nvim/runtime/syntax/dracula.vim
53d0ddfa95909458cf09cceba9424626  usr/share/nvim/runtime/syntax/dsl.vim
ca58634a7856fe40b4152ad41b479b23  usr/share/nvim/runtime/syntax/dtd.vim
38900f865ffa5a36d3eca82c47ffd858  usr/share/nvim/runtime/syntax/dtml.vim
f0145215b06ea8e5026a2ff636bc57bb  usr/share/nvim/runtime/syntax/dtrace.vim
6d620117aa1d29d75f832d34d7e1b533  usr/share/nvim/runtime/syntax/dts.vim
c206f514005486421008d76d32066524  usr/share/nvim/runtime/syntax/dylan.vim
39e3e6ec55de86780f4ba45cb32a449b  usr/share/nvim/runtime/syntax/dylanintr.vim
a62936ff94fb40df468e96a34761332f  usr/share/nvim/runtime/syntax/dylanlid.vim
aa5c3f0680f371ed1c92be3b12a1048f  usr/share/nvim/runtime/syntax/ecd.vim
6e204b4578bf56ef489f1c7da1d78de3  usr/share/nvim/runtime/syntax/edif.vim
31c9f90533c27f77f1490d0b4084a38a  usr/share/nvim/runtime/syntax/eiffel.vim
b90c646c806713c197306c6bb47477f8  usr/share/nvim/runtime/syntax/elf.vim
2076915d8eff13740ebc27d2698bd6b6  usr/share/nvim/runtime/syntax/elinks.vim
bd532e58ed43f3f72cb515944e12eb3d  usr/share/nvim/runtime/syntax/elmfilt.vim
a8f83308310396d5255d276c129ba0a9  usr/share/nvim/runtime/syntax/erlang.vim
b0d2b766e4ba64b7196efe3cc81bde4e  usr/share/nvim/runtime/syntax/eruby.vim
606de00aab6f12e3b21bcae6064aadf4  usr/share/nvim/runtime/syntax/esmtprc.vim
aa5a1152da5ddd2cef565f7d9b3729fa  usr/share/nvim/runtime/syntax/esqlc.vim
0b3923d5ea5fe568ebcc21b0a4311729  usr/share/nvim/runtime/syntax/esterel.vim
003ee2b0d11cccf6629d9f94ddfe7d63  usr/share/nvim/runtime/syntax/eterm.vim
e2e4b67102b1733e34ae0cf3d8e4d6a7  usr/share/nvim/runtime/syntax/euphoria3.vim
b24f7664472c53c0e6ab71e9a7591399  usr/share/nvim/runtime/syntax/euphoria4.vim
2ced39136305c8611ae56488a9cf798e  usr/share/nvim/runtime/syntax/eviews.vim
9b258d1e536b70ae4b1271267cc7853a  usr/share/nvim/runtime/syntax/exim.vim
dfb0fa4a2ea9c718bcd3cb4401131f86  usr/share/nvim/runtime/syntax/expect.vim
a39163a8925d9c5bd252ef0478948fb5  usr/share/nvim/runtime/syntax/exports.vim
22b55d572f206fff79d941d35b93b05e  usr/share/nvim/runtime/syntax/falcon.vim
0e13c9118e877c7ea2386e54a2ec21b7  usr/share/nvim/runtime/syntax/fan.vim
32f065d1a8f6186658b372e8c9c60226  usr/share/nvim/runtime/syntax/fasm.vim
52b319aff2705bb9e35f655507c42d77  usr/share/nvim/runtime/syntax/fdcc.vim
17bdf691ccb01350fdc45a74c5d308a6  usr/share/nvim/runtime/syntax/fetchmail.vim
7d7a6c6aa565ea78ae40eded9b7b4f0b  usr/share/nvim/runtime/syntax/fgl.vim
376f8dff19e484feb6ca0856b64cfa0b  usr/share/nvim/runtime/syntax/flexwiki.vim
1706f854d4a0804d999819c536639167  usr/share/nvim/runtime/syntax/focexec.vim
91f63cae77d82aa16f5cf79cc767c598  usr/share/nvim/runtime/syntax/form.vim
095a7a2e59253f880149f9ab9ce6c938  usr/share/nvim/runtime/syntax/forth.vim
a0c9c41c9b1b718454b1a22058ddc6d8  usr/share/nvim/runtime/syntax/fortran.vim
617f48747c6b959d4e44240940b47d70  usr/share/nvim/runtime/syntax/foxpro.vim
6d432bd28dac90e86278a20c19aefa26  usr/share/nvim/runtime/syntax/framescript.vim
0f553ea6c8c2b5438662ca471a2c58b3  usr/share/nvim/runtime/syntax/freebasic.vim
0ef21c6731c6a20d70913b810a51a08b  usr/share/nvim/runtime/syntax/fstab.vim
be8d4710844ca006588d255a6e7505d4  usr/share/nvim/runtime/syntax/fvwm.vim
70007906caf8695fc54cfb002c96f3f1  usr/share/nvim/runtime/syntax/fvwm2m4.vim
bb5b1e423f0049b52c7f1a57fd9bbc82  usr/share/nvim/runtime/syntax/gdb.vim
3e8b1bcb6feb8eed9b37465f5fe0b96c  usr/share/nvim/runtime/syntax/gdmo.vim
f7933fea6405f507794d8ee7d9d2ab0a  usr/share/nvim/runtime/syntax/gedcom.vim
050b362c66085e1f8d77dfdc81e55dac  usr/share/nvim/runtime/syntax/git.vim
e1d99d5a1916a606d1fd609839432727  usr/share/nvim/runtime/syntax/gitcommit.vim
5ba3703feebeb15d498887eb18aeb5fb  usr/share/nvim/runtime/syntax/gitconfig.vim
3ea904a1d6e6b7a21662098a289ddffc  usr/share/nvim/runtime/syntax/gitolite.vim
91a5e077871f9f7da2cec0ffd31c5324  usr/share/nvim/runtime/syntax/gitrebase.vim
4c0928db50d642b60d653633fb996f41  usr/share/nvim/runtime/syntax/gitsendemail.vim
87c8d974457dd278d94f700c61984cd8  usr/share/nvim/runtime/syntax/gkrellmrc.vim
26d5eab1073aec09f342b4f2dd34e176  usr/share/nvim/runtime/syntax/gnash.vim
e00269c7710ed359c7b4b7eb349a1a45  usr/share/nvim/runtime/syntax/gnuplot.vim
62b2737131ec84ee3a1bf63db1410115  usr/share/nvim/runtime/syntax/go.vim
57c4cf590e1540847b240daaf371db8e  usr/share/nvim/runtime/syntax/godoc.vim
82465b1754806346a0f24abf8b5638fd  usr/share/nvim/runtime/syntax/gp.vim
0a42dcbc64739e59c2c1483b0ccf899e  usr/share/nvim/runtime/syntax/gpg.vim
105d3fd574974b587db63f5af66e77d4  usr/share/nvim/runtime/syntax/gprof.vim
1ca71fe9fa778670cd400bf228859e4e  usr/share/nvim/runtime/syntax/grads.vim
39e76d6a4065f39dbb6e7169cdaf130d  usr/share/nvim/runtime/syntax/gretl.vim
93042d949c61b10a8ea1f1453a048e43  usr/share/nvim/runtime/syntax/groff.vim
c2ba8ca422808bb69177e2e6345cc01e  usr/share/nvim/runtime/syntax/groovy.vim
d65af34918fd3b11b3dce45efb7183b7  usr/share/nvim/runtime/syntax/group.vim
328dddc9dac84c3a9c4ca72169d3f5fa  usr/share/nvim/runtime/syntax/grub.vim
d0f28c7adb290291d637099795ba25ca  usr/share/nvim/runtime/syntax/gsp.vim
ee01d5416ad1505e97ca8d20fed45250  usr/share/nvim/runtime/syntax/gtkrc.vim
e21d974a3cd29b39b955c2c34c5b81f4  usr/share/nvim/runtime/syntax/haml.vim
1434ba9fe463a668312a49b59e6cbfc3  usr/share/nvim/runtime/syntax/hamster.vim
eb18055ffb1be08584947cf0f3a5f04d  usr/share/nvim/runtime/syntax/haskell.vim
d5b915d92507fa29f50f60476503997a  usr/share/nvim/runtime/syntax/haste.vim
04213346abda014938e95eb07553fa99  usr/share/nvim/runtime/syntax/hastepreproc.vim
a7c1dc15a0a77c181df04429abcfedd9  usr/share/nvim/runtime/syntax/hb.vim
1c5fbb91948e2c48ec087932debcb15d  usr/share/nvim/runtime/syntax/help.vim
587d0db0654459b061df0506a613cdc8  usr/share/nvim/runtime/syntax/hercules.vim
2e9fb23a4282684afe0ac57475f0d926  usr/share/nvim/runtime/syntax/hex.vim
8c0f2031f3f63a3aa0c75ed7bc44a623  usr/share/nvim/runtime/syntax/hgcommit.vim
c383b9e738c95ac96972a3517f723df2  usr/share/nvim/runtime/syntax/hitest.vim
cb71350415c9fc223a968d4c54899b9e  usr/share/nvim/runtime/syntax/hog.vim
7f41f93332259cf1d95f74a37b1818fa  usr/share/nvim/runtime/syntax/hostconf.vim
b722cd177453bb07cbc4effaece9909b  usr/share/nvim/runtime/syntax/hostsaccess.vim
edd0e29e6dce51efdc41d03b5117b68a  usr/share/nvim/runtime/syntax/html.vim
45b2dffd5f12f7a2e8bf5c1b37971fa5  usr/share/nvim/runtime/syntax/htmlcheetah.vim
d0ad705619966c535f957f742d7d3c9e  usr/share/nvim/runtime/syntax/htmldjango.vim
50b9cdfbb3923c2c22bd645ad45c9467  usr/share/nvim/runtime/syntax/htmlm4.vim
e36c76dbc5a8318e64b20fccb920de1c  usr/share/nvim/runtime/syntax/htmlos.vim
e51ef491abf2501b93af537430b2014d  usr/share/nvim/runtime/syntax/ia64.vim
822663a6c1155124c043b571cf8bbee9  usr/share/nvim/runtime/syntax/ibasic.vim
cbe0893eeaa9fc4621d2505e2dbb5778  usr/share/nvim/runtime/syntax/icemenu.vim
587b816037f336f31de4a9c0af722bc9  usr/share/nvim/runtime/syntax/icon.vim
fa3a99d28aa5c07d1f2602574b0f6c4d  usr/share/nvim/runtime/syntax/idl.vim
27d6cfc3b400154302b8c16c0c471be1  usr/share/nvim/runtime/syntax/idlang.vim
4cfa8c29604cf3ff6bbaf1d41ca9077b  usr/share/nvim/runtime/syntax/indent.vim
c250b6032cc748d28343939d22ecbaf9  usr/share/nvim/runtime/syntax/inform.vim
e1c992fe643c86bad544a955727f62d3  usr/share/nvim/runtime/syntax/initex.vim
5f673a8bdc13faad7e5bffc03e1232fc  usr/share/nvim/runtime/syntax/initng.vim
eb1b098d4ba71101bf73c91bc7fa5049  usr/share/nvim/runtime/syntax/inittab.vim
113df98e9385e1f5ec94a1fd25e5a159  usr/share/nvim/runtime/syntax/ipfilter.vim
74cf4b00f128968a36d1a9694a151717  usr/share/nvim/runtime/syntax/ishd.vim
034c0a3548940f761917beede9244bca  usr/share/nvim/runtime/syntax/iss.vim
566b192ade7c7f71a19f652e09a5ff35  usr/share/nvim/runtime/syntax/ist.vim
548b1f139b0287b2683a1105c1f608d6  usr/share/nvim/runtime/syntax/j.vim
13991780b9c7684c2e97115cf43bce93  usr/share/nvim/runtime/syntax/jal.vim
b44f4569233e08f615d5cb47ccc9ec91  usr/share/nvim/runtime/syntax/jam.vim
8b83fc29a7e282fa165895b1131bb1ed  usr/share/nvim/runtime/syntax/jargon.vim
63770dcd0c1e4cb29e25620f64a6f211  usr/share/nvim/runtime/syntax/java.vim
16ac75238946c1b606018b14806c23d6  usr/share/nvim/runtime/syntax/javacc.vim
09b68015f9a68e7dea90e26a28e33c7e  usr/share/nvim/runtime/syntax/javascript.vim
e6fc62a61901f6575fd64133cc4f9fb7  usr/share/nvim/runtime/syntax/jess.vim
fa9550e17050dee1e696b4b8da2bfea0  usr/share/nvim/runtime/syntax/jgraph.vim
3f41ea47e3abc05586089f48535969a5  usr/share/nvim/runtime/syntax/jovial.vim
c5c69d1bbdeb1211fb7babc95b51f658  usr/share/nvim/runtime/syntax/jproperties.vim
c8ef025b22d2940f55071d4f7ff0318c  usr/share/nvim/runtime/syntax/json.vim
953b3c94f7f54339da14319a0c936bf2  usr/share/nvim/runtime/syntax/jsp.vim
c0d0328e039baf7293c1498bc9d41ab6  usr/share/nvim/runtime/syntax/kconfig.vim
6524605967e95adc9024d6035a556623  usr/share/nvim/runtime/syntax/kivy.vim
185bde85b62c3750ac5cb374654b7cd3  usr/share/nvim/runtime/syntax/kix.vim
2a4c21800b02ec60c0fabcd230039edd  usr/share/nvim/runtime/syntax/kscript.vim
4d285219ac3efc9ab1632372fa069afd  usr/share/nvim/runtime/syntax/kwt.vim
eb12bf79f2889be4dbc67b991c549a54  usr/share/nvim/runtime/syntax/lace.vim
0c4424d49f7c78b4bd7540db5db29e6f  usr/share/nvim/runtime/syntax/latte.vim
a34646c6962175dc6be1ec0eb809c15d  usr/share/nvim/runtime/syntax/ld.vim
2155ca9fe7d71bf3a9d46c7ab954b338  usr/share/nvim/runtime/syntax/ldapconf.vim
41110873f8ce3e191eae952532e71de2  usr/share/nvim/runtime/syntax/ldif.vim
b8824e831a24abaa0dbdd5a92f7bbf32  usr/share/nvim/runtime/syntax/less.vim
cb1fc51e17a4be3171edb67ae8f909c2  usr/share/nvim/runtime/syntax/lex.vim
0a5a3f9c80e610f8daf693b635e6a0a7  usr/share/nvim/runtime/syntax/lftp.vim
0ef3977fef46232fca35ff1b3f97e7c1  usr/share/nvim/runtime/syntax/lhaskell.vim
c1fd234daba593be89bf44b489a5fe32  usr/share/nvim/runtime/syntax/libao.vim
812420d49e84e3ce06b634b82392ef83  usr/share/nvim/runtime/syntax/lifelines.vim
621d954193314dc705cdbe631529e15a  usr/share/nvim/runtime/syntax/lilo.vim
965adf5c5a603bdbb95f0c436a73fbdd  usr/share/nvim/runtime/syntax/limits.vim
9b68e8142be5b8de96e7ba9edd8fc2b0  usr/share/nvim/runtime/syntax/liquid.vim
38230bd01f433506dd865a5868d00aab  usr/share/nvim/runtime/syntax/lisp.vim
78d7d2a1310a259bfeb24b3659eb5c36  usr/share/nvim/runtime/syntax/lite.vim
5f7e5d823d499ab02c04b600dfa6d7b6  usr/share/nvim/runtime/syntax/litestep.vim
43f58a0c04eb6860f044fbee0294651e  usr/share/nvim/runtime/syntax/loginaccess.vim
36ca5b74e83dd969562dfa49a5c604af  usr/share/nvim/runtime/syntax/logindefs.vim
50a3167bc57d484f4f05789385d2ede3  usr/share/nvim/runtime/syntax/logtalk.vim
c9f697f6c57b337d70510ae8d7b66920  usr/share/nvim/runtime/syntax/lotos.vim
f7c652b54914edd0321bf5d716da9233  usr/share/nvim/runtime/syntax/lout.vim
e5b4f4a1f8ec381fbe86634f66a0951d  usr/share/nvim/runtime/syntax/lpc.vim
4d4a3816178066451167360799475daf  usr/share/nvim/runtime/syntax/lprolog.vim
e1267fe550d41c27e475da0f5701521e  usr/share/nvim/runtime/syntax/lscript.vim
c50283c1d6988f367bedbca5ea9c2293  usr/share/nvim/runtime/syntax/lsl.vim
fa6979584f20906c68857e834d2f1bc7  usr/share/nvim/runtime/syntax/lss.vim
0239eee212a3cae38c73eb60105425e4  usr/share/nvim/runtime/syntax/lua.vim
024edc2ec799115420356a3257d9b525  usr/share/nvim/runtime/syntax/lynx.vim
6a76c5afa8d3cc092866b13ff63b4df5  usr/share/nvim/runtime/syntax/m4.vim
beb3c2658a5e4dadc5693d026856f403  usr/share/nvim/runtime/syntax/mail.vim
ad66baf4b04a175620c98a5e38311f98  usr/share/nvim/runtime/syntax/mailaliases.vim
3cbc4e4583629075afc1da3375bfd328  usr/share/nvim/runtime/syntax/mailcap.vim
638114775332596b824ce1887f015fc6  usr/share/nvim/runtime/syntax/make.vim
cab7e0a94e4c963254ab7bae30dae0fb  usr/share/nvim/runtime/syntax/mallard.vim
26a750ea962c27df0bdd323de2fa2d85  usr/share/nvim/runtime/syntax/man.vim
7d825384ed7d447142fac632588ae12a  usr/share/nvim/runtime/syntax/manconf.vim
20708700d8a546573d97ae31a6d9546f  usr/share/nvim/runtime/syntax/manual.vim
34f9433debb401033b840cbeb00172ef  usr/share/nvim/runtime/syntax/maple.vim
d4ba4b1cf32196ce3d0cce1455011dc8  usr/share/nvim/runtime/syntax/markdown.vim
2f9406974c8a03b8af11f667cbf78fa5  usr/share/nvim/runtime/syntax/masm.vim
10b64ad986e5241ef5a628cfa38b3f1a  usr/share/nvim/runtime/syntax/mason.vim
16a0efb9f55a5e669afd8774ccbdf329  usr/share/nvim/runtime/syntax/master.vim
621a7041545d99689b5dbe3067c28f96  usr/share/nvim/runtime/syntax/matlab.vim
0b0a58d6704469429e3e627e6894aa61  usr/share/nvim/runtime/syntax/maxima.vim
8ecf18376027ba2f9a4cbf67dd14f7bc  usr/share/nvim/runtime/syntax/mel.vim
4febab133d8a31a3c31ebaf71b8698df  usr/share/nvim/runtime/syntax/messages.vim
8fa39a7d77d5cee375a6b1c4613ba707  usr/share/nvim/runtime/syntax/mf.vim
496e018001a39094d9c6a46ba25d8fa5  usr/share/nvim/runtime/syntax/mgl.vim
50a38839232eb7cedd067be0b0b9034d  usr/share/nvim/runtime/syntax/mgp.vim
ad83f8531b5f0beec2ab8e063e639e85  usr/share/nvim/runtime/syntax/mib.vim
9241ba99fac3672af09ec9c4a23d0da8  usr/share/nvim/runtime/syntax/mix.vim
a5cd6e1fca09d662614afd880cd05cc4  usr/share/nvim/runtime/syntax/mma.vim
d8e39c020f823e7f6dc6040debad0a3d  usr/share/nvim/runtime/syntax/mmix.vim
5f5423f4b23d92a926f3be487a2b3920  usr/share/nvim/runtime/syntax/mmp.vim
d58f03467bb042c5ae3d05bd3217c994  usr/share/nvim/runtime/syntax/modconf.vim
078b77c605874d9d820c84313411f815  usr/share/nvim/runtime/syntax/model.vim
4b7f75d6422fdbc22a385e901d70f3b2  usr/share/nvim/runtime/syntax/modsim3.vim
2155d9c980e8b680d71648ff36550d1f  usr/share/nvim/runtime/syntax/modula2.vim
9885cdccf3f6c56b429c7bb85a8c2f90  usr/share/nvim/runtime/syntax/modula3.vim
5034af241823502f12263e76c8eb56d9  usr/share/nvim/runtime/syntax/monk.vim
a728c3929e46db0bebd485de6c0c2bae  usr/share/nvim/runtime/syntax/moo.vim
6556fc94535022a82293ccad8e33d958  usr/share/nvim/runtime/syntax/mp.vim
90de6122e719e217010a693a62cfce92  usr/share/nvim/runtime/syntax/mplayerconf.vim
e592848e2a8380316594af7fbf630ff3  usr/share/nvim/runtime/syntax/mrxvtrc.vim
786c7d27484946637de2078707d21afd  usr/share/nvim/runtime/syntax/msidl.vim
6cf3ab6f5d1044b8e43f73fa8b8d333e  usr/share/nvim/runtime/syntax/msmessages.vim
b59808c0ffe85ceede71926e261e13a4  usr/share/nvim/runtime/syntax/msql.vim
4f1033045dd1c4a77da9fc92e50e6d81  usr/share/nvim/runtime/syntax/mupad.vim
856f3ef70678390fbba1f270ac31b1f6  usr/share/nvim/runtime/syntax/mush.vim
b6384026fcb97629b418cd1e7ad85157  usr/share/nvim/runtime/syntax/muttrc.vim
42b8676905567111729c2cdd27cda828  usr/share/nvim/runtime/syntax/mysql.vim
db537b1dc419c15ab27ae826b088d572  usr/share/nvim/runtime/syntax/named.vim
f5cdae7b9ef486bb3ce788ee518bf7c2  usr/share/nvim/runtime/syntax/nanorc.vim
fe879b5fa9c0a80af277c2c948685472  usr/share/nvim/runtime/syntax/nasm.vim
2cf138330cd480f27e13f62fa8dd5677  usr/share/nvim/runtime/syntax/nastran.vim
6e2b99fab7c78b8831c4b78e15cced04  usr/share/nvim/runtime/syntax/natural.vim
6d29c18b9bf8a76f7a9173afef13fd14  usr/share/nvim/runtime/syntax/ncf.vim
b61072b620503c62508b67dd104cc901  usr/share/nvim/runtime/syntax/netrc.vim
b9c6b41a9a14bd8071c48c91633f3974  usr/share/nvim/runtime/syntax/netrw.vim
e490c6b4a99ff56811a88b23291e0a2a  usr/share/nvim/runtime/syntax/ninja.vim
fc6be3f145a3bc91e1edff782c5ca67a  usr/share/nvim/runtime/syntax/nosyntax.vim
d9e40c1ade320524f6aefc8cd08ebc67  usr/share/nvim/runtime/syntax/nqc.vim
d952179967285639b84bf7fd59f21fdb  usr/share/nvim/runtime/syntax/nroff.vim
225ea65438625f2126c8c6d70cbc7284  usr/share/nvim/runtime/syntax/nsis.vim
c50057b774becdbc43614166effbeb3a  usr/share/nvim/runtime/syntax/obj.vim
c3842c0b8902383642e41f71a144fbd3  usr/share/nvim/runtime/syntax/objc.vim
cc19bbb424fc41676013743c4d8068c9  usr/share/nvim/runtime/syntax/objcpp.vim
b1d26ed00f4290935fc383a98ef66ca9  usr/share/nvim/runtime/syntax/ocaml.vim
48dcc61d82237f02a7ffe33d7f672403  usr/share/nvim/runtime/syntax/occam.vim
a8cbe7d43b3c6202db004861bc70e7bb  usr/share/nvim/runtime/syntax/omnimark.vim
9c628a9dcfc8f0746e9c1178f70e8216  usr/share/nvim/runtime/syntax/openroad.vim
697f52be89bca3a953d67c69b9a23c8d  usr/share/nvim/runtime/syntax/opl.vim
0933ac4c4e47d25579169ab785c1b5a7  usr/share/nvim/runtime/syntax/ora.vim
dd1809d5b930329b67f370527788ecfe  usr/share/nvim/runtime/syntax/pamconf.vim
1a082103f218f7e1990d5683538a30cf  usr/share/nvim/runtime/syntax/papp.vim
955c96165c689e00c209fb5d50adb3e2  usr/share/nvim/runtime/syntax/pascal.vim
6a7a4e02af24a9b8a2a9b1bed8bad2e4  usr/share/nvim/runtime/syntax/passwd.vim
ac964eac321ca2406305552b363a93b6  usr/share/nvim/runtime/syntax/pcap.vim
8d632a440a0da259f6159f074b162ac8  usr/share/nvim/runtime/syntax/pccts.vim
135fc19d6523fd01b9d8b322f531307f  usr/share/nvim/runtime/syntax/pdf.vim
1e00373a0042985669f88b93a30fcbed  usr/share/nvim/runtime/syntax/perl.vim
c9334ffb0121cdfbcbc9892f19b11ec0  usr/share/nvim/runtime/syntax/perl6.vim
4f98b160fc9c48f04fc7e8bd5cbd285a  usr/share/nvim/runtime/syntax/pf.vim
8720c16cfe83542d25ce5a94f4cd012e  usr/share/nvim/runtime/syntax/pfmain.vim
430b623a83d419456f289546b9499628  usr/share/nvim/runtime/syntax/php.vim
a829cd077eab3afec7c5462a1c940fdd  usr/share/nvim/runtime/syntax/phtml.vim
fea4bca0269578cc42e7b8f7af60e39d  usr/share/nvim/runtime/syntax/pic.vim
2105a4de3b971eca2de440af9adbb3c9  usr/share/nvim/runtime/syntax/pike.vim
b9a86729bd23f24dd6ef8649f9e36674  usr/share/nvim/runtime/syntax/pilrc.vim
8f4a1ec46a852a7224616b16bf919741  usr/share/nvim/runtime/syntax/pine.vim
f863d703e1ea8f33eed9ca505b33188f  usr/share/nvim/runtime/syntax/pinfo.vim
8198585e3e4942a6705fabb1e8b887d6  usr/share/nvim/runtime/syntax/plaintex.vim
1808e54f6134d258fa659a73b3330c23  usr/share/nvim/runtime/syntax/pli.vim
562408d27defcb7eda27525313c3777c  usr/share/nvim/runtime/syntax/plm.vim
100c166951a4e68c93801203e3135f1a  usr/share/nvim/runtime/syntax/plp.vim
4cf923deae5675d13839756bdfdbacfd  usr/share/nvim/runtime/syntax/plsql.vim
90f0cb9b4a285b697c9d1fbd76bcd474  usr/share/nvim/runtime/syntax/po.vim
b27bde31a805bee024bdac5d1ace206d  usr/share/nvim/runtime/syntax/pod.vim
bd89e7b3a6ca8d0abcf247acd8848954  usr/share/nvim/runtime/syntax/postscr.vim
ffc32a5451c9f84157e7238143afb90e  usr/share/nvim/runtime/syntax/pov.vim
2bc6e6a7df681c54d5d45678305ec6e3  usr/share/nvim/runtime/syntax/povini.vim
a22337344a1d8721dcd2f8e2dbfb0381  usr/share/nvim/runtime/syntax/ppd.vim
b958066ada4b37afcba2ce2a2c1e05be  usr/share/nvim/runtime/syntax/ppwiz.vim
851fa40d0a2f8cde6eaa526e0607e8ab  usr/share/nvim/runtime/syntax/prescribe.vim
80f93807dae85bfe75530e415784d2c5  usr/share/nvim/runtime/syntax/privoxy.vim
a7b494437b5edd3bf39cf6ce88f7a2ef  usr/share/nvim/runtime/syntax/procmail.vim
74987c9a14f53e14574d2441b6a822e0  usr/share/nvim/runtime/syntax/progress.vim
1b9ebe0046bfeda27e1348e7ecaed68d  usr/share/nvim/runtime/syntax/prolog.vim
fbc30fd5bda7873a4ade85c473bf4aa3  usr/share/nvim/runtime/syntax/promela.vim
266f9a56dd35985d789b1205e66438c8  usr/share/nvim/runtime/syntax/proto.vim
d2738a692d797d9d687e1f7a87ef609e  usr/share/nvim/runtime/syntax/protocols.vim
61d4f2e1bb4cc7af83c8eb04db2d8c42  usr/share/nvim/runtime/syntax/psf.vim
5d9f0c0666a1ccb5e40c9ddfcf21f71e  usr/share/nvim/runtime/syntax/ptcap.vim
f124f36728d781d9a3662d66456d8f56  usr/share/nvim/runtime/syntax/purifylog.vim
eda42734053c459bc21ec62d09f7b473  usr/share/nvim/runtime/syntax/pyrex.vim
cce98212b01d8f3c598e8b6a48abdf1d  usr/share/nvim/runtime/syntax/python.vim
63f360888de043bbef9c81b876e11ff6  usr/share/nvim/runtime/syntax/qf.vim
f1e728f33a94333fe73551b164985bef  usr/share/nvim/runtime/syntax/quake.vim
e8f40d058e431637fe4b193634576b3e  usr/share/nvim/runtime/syntax/r.vim
1586b9df4be975393ce2157269a843ad  usr/share/nvim/runtime/syntax/racc.vim
22748970139f2f252afa406ca88a40fb  usr/share/nvim/runtime/syntax/radiance.vim
d34369778f895e131f8d1571ce76d494  usr/share/nvim/runtime/syntax/ratpoison.vim
2fc486d26a8b375e5df49e12e7aef245  usr/share/nvim/runtime/syntax/rc.vim
1587efd36aeb9e4c2fe516b0624dd364  usr/share/nvim/runtime/syntax/rcs.vim
293eefadb6c84dda708e2b95593b7b96  usr/share/nvim/runtime/syntax/rcslog.vim
90bb31f02b7eee091657edd1d84d48f8  usr/share/nvim/runtime/syntax/readline.vim
0208e88b45a03efc03efa99716d17bb4  usr/share/nvim/runtime/syntax/rebol.vim
a6b30c37e0010ce820edf8312e61ab4e  usr/share/nvim/runtime/syntax/redif.vim
7e53cb5142ff28bd0e45106af3e99a47  usr/share/nvim/runtime/syntax/registry.vim
a0b40339f04b0ea348aa9482b5a635d4  usr/share/nvim/runtime/syntax/remind.vim
47a0936a76b972e0506a5311178e7b00  usr/share/nvim/runtime/syntax/resolv.vim
5469203da09f57edabb0df88a807895a  usr/share/nvim/runtime/syntax/reva.vim
9c77e5d540003436c55e581ad191ddc9  usr/share/nvim/runtime/syntax/rexx.vim
5c2c415faf600705f83f6dc119a7b68f  usr/share/nvim/runtime/syntax/rhelp.vim
1232278f1ae2257ff3d8753e3f2db574  usr/share/nvim/runtime/syntax/rib.vim
a6a8bd691a43988559e455b49d10aa75  usr/share/nvim/runtime/syntax/rmd.vim
214da384b3652bc10121506da3ca2bc0  usr/share/nvim/runtime/syntax/rnc.vim
47b4e77b1fe8dbac6a9d2479556eff21  usr/share/nvim/runtime/syntax/rng.vim
309b8eec2a95f825aabf65654cd753f1  usr/share/nvim/runtime/syntax/rnoweb.vim
77b9f652605d3de6b09173fc0fe5dd45  usr/share/nvim/runtime/syntax/robots.vim
bd2906a2a0b5b1f8e09f505d986bf8a5  usr/share/nvim/runtime/syntax/rpcgen.vim
f1ddedaf2ced60255ed3dd739a6883e3  usr/share/nvim/runtime/syntax/rpl.vim
1419eb1858063e71ccbfcc3ba3b987ce  usr/share/nvim/runtime/syntax/rrst.vim
864594ea7b45f4c2239af6347a89b99b  usr/share/nvim/runtime/syntax/rst.vim
df1969891699e4dcb9f36402f981acd9  usr/share/nvim/runtime/syntax/rtf.vim
71bf7e5b178c1bffecab18f5b6be8dc8  usr/share/nvim/runtime/syntax/ruby.vim
2c4a9f5f58049d613e0cf687460c4feb  usr/share/nvim/runtime/syntax/samba.vim
774e9c8bc8515af2273dd20a683eff75  usr/share/nvim/runtime/syntax/sas.vim
1600b609f7fb237283b5decdaa9bfe10  usr/share/nvim/runtime/syntax/sass.vim
500b768722ea85f8d209f9ddab41bb63  usr/share/nvim/runtime/syntax/sather.vim
dd70826097349a1db0124ecdd54b7f28  usr/share/nvim/runtime/syntax/scheme.vim
9a639daa9d3de8d78349af09115d94e5  usr/share/nvim/runtime/syntax/scilab.vim
2f04f8233326dbfcb0fe87a34d7e6b4c  usr/share/nvim/runtime/syntax/screen.vim
c1fcc97ad2954b22630a86a15c6e6745  usr/share/nvim/runtime/syntax/scss.vim
049e918f061883ff3fab323ac3fc5d2e  usr/share/nvim/runtime/syntax/sd.vim
65903a32ac3bf7540f730da280654753  usr/share/nvim/runtime/syntax/sdc.vim
08f53853e6413d0647006c441f184072  usr/share/nvim/runtime/syntax/sdl.vim
2d85439d9f7291e184ec0195c3420ee5  usr/share/nvim/runtime/syntax/sed.vim
5b278534699828b95d6a5f38929a7e2b  usr/share/nvim/runtime/syntax/sendpr.vim
5f49c1f3aac93221d43c7457b358e91c  usr/share/nvim/runtime/syntax/sensors.vim
0216c0cad51fafa0506231d63150a78e  usr/share/nvim/runtime/syntax/services.vim
256f87a156713ff3e549b067123f5c9d  usr/share/nvim/runtime/syntax/setserial.vim
2a6238931020e041ecc66ce0652d4272  usr/share/nvim/runtime/syntax/sgml.vim
256c18a8435e751f268e0cf9f34d9e06  usr/share/nvim/runtime/syntax/sgmldecl.vim
30b37ad6bc2dea65a6942d4ece077e72  usr/share/nvim/runtime/syntax/sgmllnx.vim
7769eb60293cdd216524923da91e4472  usr/share/nvim/runtime/syntax/sh.vim
c36224b89bca8d843f05dbacb1a1e4b6  usr/share/nvim/runtime/syntax/shada.vim
b019fe9a009c1279c9580dfa5990aa73  usr/share/nvim/runtime/syntax/sicad.vim
f8a66d41def3e68ec44afa8c43145e4c  usr/share/nvim/runtime/syntax/sieve.vim
0249c4ab253ac2f63ee500c74669da2d  usr/share/nvim/runtime/syntax/simula.vim
7a6bcf9d5830d4d2d0ca292f5b3ce102  usr/share/nvim/runtime/syntax/sinda.vim
82cb5787104d4c6d85aaacf8a9d30b23  usr/share/nvim/runtime/syntax/sindacmp.vim
598e5e80da9583ba7e87371fce165c49  usr/share/nvim/runtime/syntax/sindaout.vim
c59cd2cac8a2d24bd0ba859ba897d172  usr/share/nvim/runtime/syntax/sisu.vim
3a1cd22477ccb516459f85e65ba5634d  usr/share/nvim/runtime/syntax/skill.vim
833e3f39a4b97f08d1ef642a6aa689c7  usr/share/nvim/runtime/syntax/sl.vim
8350fc30e85c24d39c6c33e4889e41dd  usr/share/nvim/runtime/syntax/slang.vim
9ef5821f842334693ef80ae7beb8e4a9  usr/share/nvim/runtime/syntax/slice.vim
433ffa3e22f5ab253086692f1dc02720  usr/share/nvim/runtime/syntax/slpconf.vim
ebb41f3e9db3d9b52116f0d87a8b49cf  usr/share/nvim/runtime/syntax/slpreg.vim
a0cc4496eaa1ec2ffa31eeaf3e1b1f92  usr/share/nvim/runtime/syntax/slpspi.vim
46c52921e8b81cb500658375e5701c3e  usr/share/nvim/runtime/syntax/slrnrc.vim
8706ee6f94c78b1584a01de6d97f8d54  usr/share/nvim/runtime/syntax/slrnsc.vim
52de358d0c1380be833a2ce73f74d1ad  usr/share/nvim/runtime/syntax/sm.vim
e09a8192ea2ac07d210272f374123535  usr/share/nvim/runtime/syntax/smarty.vim
ec5dde257dced3dd37b8ab8e28ae7511  usr/share/nvim/runtime/syntax/smcl.vim
63d1a0106dc527606dcfd44df3a8fa08  usr/share/nvim/runtime/syntax/smil.vim
883b3cc46ae9c3fe841b2602d478ad9d  usr/share/nvim/runtime/syntax/smith.vim
35960c59cc24012e63600cd628d76911  usr/share/nvim/runtime/syntax/sml.vim
3f3a9a2b237949d249421c1eb00d1570  usr/share/nvim/runtime/syntax/snnsnet.vim
fb76a5d9c89eb4413a20a43fde0e87f0  usr/share/nvim/runtime/syntax/snnspat.vim
5a980a36850bad480de07f027a44cc3e  usr/share/nvim/runtime/syntax/snnsres.vim
ed49dae48c02dfcb1c336d5d6700c298  usr/share/nvim/runtime/syntax/snobol4.vim
e3bf30a70c67338b89e40f1dfe07bb48  usr/share/nvim/runtime/syntax/spec.vim
8d20d68c768122ce305f153e9c1d01cd  usr/share/nvim/runtime/syntax/specman.vim
18e4d4e376664e76688582271eaed1bb  usr/share/nvim/runtime/syntax/spice.vim
7d87eb4d6e6b6df95a19da6a7f72afed  usr/share/nvim/runtime/syntax/splint.vim
c2defb7bb9d185a18661e19944ea09e3  usr/share/nvim/runtime/syntax/spup.vim
bb9b6422f5c70f4a3f44346ce7013db0  usr/share/nvim/runtime/syntax/spyce.vim
e9b6268a4588757a4414a427717b3e6c  usr/share/nvim/runtime/syntax/sql.vim
49960494c746dc839c1c1a1f55649d4b  usr/share/nvim/runtime/syntax/sqlanywhere.vim
26f140105af1454d67aaa13839dac8a7  usr/share/nvim/runtime/syntax/sqlforms.vim
170c8109c1bab20515014ecec7b42ebf  usr/share/nvim/runtime/syntax/sqlhana.vim
8304e0e156f52ebbc4981b1a3f989f5e  usr/share/nvim/runtime/syntax/sqlinformix.vim
b573879b8c6fb5bf59391100d5fbd63d  usr/share/nvim/runtime/syntax/sqlj.vim
2aef153308f8d160834bf811bae95007  usr/share/nvim/runtime/syntax/sqloracle.vim
5edd2dfe78f089bc562ac45a0aa8585c  usr/share/nvim/runtime/syntax/sqr.vim
83f860f8d58f682453726898f3b4aa17  usr/share/nvim/runtime/syntax/squid.vim
713727c81084660796c4e070cb6eed66  usr/share/nvim/runtime/syntax/srec.vim
76ffa2d0d7ac2017f9d405d1bc8d443a  usr/share/nvim/runtime/syntax/sshconfig.vim
56eaa967fa8f68b068d3f137993bef19  usr/share/nvim/runtime/syntax/sshdconfig.vim
233a064286e6925e47a0d45fb01cf65d  usr/share/nvim/runtime/syntax/st.vim
82360bc963ee74302ee1316facc0634c  usr/share/nvim/runtime/syntax/stata.vim
1f5d0cbd3d83c4c523be283c0d3e888a  usr/share/nvim/runtime/syntax/stp.vim
c7898dfa128b84b89d0c3caf7253f441  usr/share/nvim/runtime/syntax/strace.vim
cd46712e03e673a1d755dde6f0ef81dc  usr/share/nvim/runtime/syntax/sudoers.vim
1ced1ef45686cf8b2acb9f95ee4c8ea9  usr/share/nvim/runtime/syntax/svg.vim
0cabd73d215a11cfcef87e15c7298908  usr/share/nvim/runtime/syntax/svn.vim
41f85bcdea0bc2b92d668c13ac887f04  usr/share/nvim/runtime/syntax/syncolor.vim
3e31f462050143fe68bce23f734245c7  usr/share/nvim/runtime/syntax/synload.vim
1ae49a37e6768a55f260beb1fc6e73ab  usr/share/nvim/runtime/syntax/syntax.vim
5cdc01dd7cdecdc50a3586a1f4bb6a5e  usr/share/nvim/runtime/syntax/sysctl.vim
a066c27cdc706fad65fe0f5a173b2665  usr/share/nvim/runtime/syntax/systemd.vim
762eb0c7c00a8b57524d48c8214bfb59  usr/share/nvim/runtime/syntax/systemverilog.vim
6bcc148f4a44e05695d25c114a0fa095  usr/share/nvim/runtime/syntax/tads.vim
80bdca826eff42539f1fb79ae6c24ca2  usr/share/nvim/runtime/syntax/tags.vim
1eb395cb0e07b3204a00ea798bb417e4  usr/share/nvim/runtime/syntax/tak.vim
e1f647e5568ec422075ba49c972ff6db  usr/share/nvim/runtime/syntax/takcmp.vim
5a10e2f86f0d576f95edbfbb2770bcca  usr/share/nvim/runtime/syntax/takout.vim
ebf97dfa6cfcf843861c5210d9cf8ae2  usr/share/nvim/runtime/syntax/tar.vim
e61eb9bbd2b10146a2631f381450a249  usr/share/nvim/runtime/syntax/taskdata.vim
ad6866b92aa5a0310e0ac058ae695dd7  usr/share/nvim/runtime/syntax/taskedit.vim
bf0d73757899f4855cb0c9031b4c59ad  usr/share/nvim/runtime/syntax/tasm.vim
ed5a238e8ff657f41cb74e7c22b55905  usr/share/nvim/runtime/syntax/tcl.vim
bc69dac79dd0171b3d5381f4bad747ab  usr/share/nvim/runtime/syntax/tcsh.vim
d63019301501741ebb046e24803da537  usr/share/nvim/runtime/syntax/teraterm.vim
62e0d9824d9bf5d7bb389059552754f9  usr/share/nvim/runtime/syntax/terminfo.vim
33540124b254fcc501eb526da0283c8d  usr/share/nvim/runtime/syntax/tex.vim
32778e16b58546ea481a9f06da7b897c  usr/share/nvim/runtime/syntax/texinfo.vim
ced07df283f9c4be6c28710bb0507e37  usr/share/nvim/runtime/syntax/texmf.vim
b9cc79a85919b55be881263344578cfb  usr/share/nvim/runtime/syntax/tf.vim
ebc5524f92a558ec8d2edd0814914451  usr/share/nvim/runtime/syntax/tidy.vim
9166afb69e5711076750c9fad5f41db0  usr/share/nvim/runtime/syntax/tilde.vim
e90590b9a82d5e8275191e33aa08804c  usr/share/nvim/runtime/syntax/tli.vim
b8f43ed8a753733646d0fe082a79c728  usr/share/nvim/runtime/syntax/tpp.vim
60f2870c5a0c6ba5bf305eb607a8cf90  usr/share/nvim/runtime/syntax/trasys.vim
b014dedfb9662416338a03e1297a7e6e  usr/share/nvim/runtime/syntax/treetop.vim
2ed0081f5de26f23ee669685ad61fa3f  usr/share/nvim/runtime/syntax/trustees.vim
609ad6105efa804a28d0c93dedebf500  usr/share/nvim/runtime/syntax/tsalt.vim
c63cf7695e0fc4f06a405c127b81af24  usr/share/nvim/runtime/syntax/tsscl.vim
4410fb91cc5528386f1d940f1c2914ec  usr/share/nvim/runtime/syntax/tssgm.vim
e7b51f7e7b9e33f041dfc2e9e1e0ecb9  usr/share/nvim/runtime/syntax/tssop.vim
7693083b91549d4b033039b51cb9210c  usr/share/nvim/runtime/syntax/tt2.vim
7a38f25382f0fc3792112aab2518d0cb  usr/share/nvim/runtime/syntax/tt2html.vim
46576f1b523d5dc2a508c7ccf00eca81  usr/share/nvim/runtime/syntax/tt2js.vim
9ac4f9b3075ed7c7f13f6ae2a6334126  usr/share/nvim/runtime/syntax/tutor.vim
28edeed64bb7ea02eb1890a806d1e96a  usr/share/nvim/runtime/syntax/uc.vim
c9ab7bed1db0bf616d8b1a8420323753  usr/share/nvim/runtime/syntax/udevconf.vim
3b2209066a2e6f6577b5368cb02926f5  usr/share/nvim/runtime/syntax/udevperm.vim
74798c4608b80318bc7db2d581b1e9c8  usr/share/nvim/runtime/syntax/udevrules.vim
3206e83bce5be4ed8bf2544a70722b09  usr/share/nvim/runtime/syntax/uil.vim
97b3ce814c9146ecd746ac399132b58e  usr/share/nvim/runtime/syntax/updatedb.vim
2528274d503ee8c69c29839dd85aae18  usr/share/nvim/runtime/syntax/upstart.vim
fa90bc9426e2fad8835556341c7b238c  usr/share/nvim/runtime/syntax/upstreamdat.vim
56edb57d221ce3e22458f380af5c7779  usr/share/nvim/runtime/syntax/upstreaminstalllog.vim
b86d32ab825d0698b9aec0b1d0a58aba  usr/share/nvim/runtime/syntax/upstreamlog.vim
c107a01e81bed5bc03ab9841b1e30c16  usr/share/nvim/runtime/syntax/upstreamrpt.vim
315b9e7d5361a675e308beea28e31d83  usr/share/nvim/runtime/syntax/usserverlog.vim
dde45fdb6d2cfdf08060afdbeeb54d94  usr/share/nvim/runtime/syntax/usw2kagtlog.vim
8d91166d9dbe2f5263bdb3e8c9ebb9ca  usr/share/nvim/runtime/syntax/valgrind.vim
0f1878ded465cd313e71b49befab6270  usr/share/nvim/runtime/syntax/vb.vim
9420a1ea558d35f1e32f9443a15b5c45  usr/share/nvim/runtime/syntax/vera.vim
87a2af17f1322d29e555ca95028ca85c  usr/share/nvim/runtime/syntax/verilog.vim
ebfac7710836f7dc9c0e425ce843a174  usr/share/nvim/runtime/syntax/verilogams.vim
6214c8fab74680bd9655eb8ba209ec34  usr/share/nvim/runtime/syntax/vgrindefs.vim
41fde6f05c11b381bc33c65c31683a36  usr/share/nvim/runtime/syntax/vhdl.vim
fa54b7ddd4460eaf0069f924dd417e39  usr/share/nvim/runtime/syntax/vim.vim
90b73735c7b78013b5ba68cac6363436  usr/share/nvim/runtime/syntax/vim/generated.vim
27db7018e1550bf4c75d14cbe3b9d8c7  usr/share/nvim/runtime/syntax/viminfo.vim
3b30e5bd599eeb48f1a29ea985f079d1  usr/share/nvim/runtime/syntax/vimnormal.vim
13287b3553343f02e8b811b1b98c92f0  usr/share/nvim/runtime/syntax/virata.vim
a0facddb3b9cbf7695053e059f55f203  usr/share/nvim/runtime/syntax/vmasm.vim
b74c6935a994ce7bc3c453a61352e146  usr/share/nvim/runtime/syntax/voscm.vim
98d1b75ec3373e2c4f359bbebbe526c3  usr/share/nvim/runtime/syntax/vrml.vim
695edefd5d89f122aa4b9a264ccf6d41  usr/share/nvim/runtime/syntax/vroom.vim
a6d9606066f3f3f46f96ee8ca121e312  usr/share/nvim/runtime/syntax/vsejcl.vim
74fddb20b4ea37954b362bfbd9e1574a  usr/share/nvim/runtime/syntax/wdiff.vim
9edc5328604f9bb5c61d51a4e44bc737  usr/share/nvim/runtime/syntax/web.vim
e4995b6b9fe0ddc39cd05661d4c58723  usr/share/nvim/runtime/syntax/webmacro.vim
cff2d56ecf905a555ccd452fddc22527  usr/share/nvim/runtime/syntax/wget.vim
d4fb228f0e7b287e5ca1f0db3a4b6c5c  usr/share/nvim/runtime/syntax/whitespace.vim
f1e821294f2e8f595775fb42903cf4a2  usr/share/nvim/runtime/syntax/winbatch.vim
4ec33d1410cfb04b91172e651643fdc8  usr/share/nvim/runtime/syntax/wml.vim
736060ab5864bb48776534ccf369525d  usr/share/nvim/runtime/syntax/wsh.vim
46c8dbd9161fea1e800657af759880d4  usr/share/nvim/runtime/syntax/wsml.vim
286a8d506249db22ec19af60def946b8  usr/share/nvim/runtime/syntax/wvdial.vim
b93905caea81270835027d4f01bcb9a3  usr/share/nvim/runtime/syntax/xbl.vim
20bc793773f36139fd36f3652510c128  usr/share/nvim/runtime/syntax/xdefaults.vim
9f2f7182a961cb296c354fa6539533c2  usr/share/nvim/runtime/syntax/xf86conf.vim
7a8592f7e469adede308c53dcbe2f416  usr/share/nvim/runtime/syntax/xhtml.vim
396f28268989258d276babdf4c52f4a7  usr/share/nvim/runtime/syntax/xinetd.vim
927ec6962519627df9296be76d19f426  usr/share/nvim/runtime/syntax/xkb.vim
9f46474cc209444b1f26b6207fd4853d  usr/share/nvim/runtime/syntax/xmath.vim
32bd8d2411b925ecac87e9c9b00c69e7  usr/share/nvim/runtime/syntax/xml.vim
396d77008cc7e48ffacfd9605ab2e532  usr/share/nvim/runtime/syntax/xmodmap.vim
88bd9f58d7d3105cdff4882a12cf9536  usr/share/nvim/runtime/syntax/xpm.vim
a9b3ac6a0171edeb5d011ec96961e548  usr/share/nvim/runtime/syntax/xpm2.vim
061a19712353285e44896f3002478a16  usr/share/nvim/runtime/syntax/xquery.vim
6f260ae4b1f221ef480fbb54b33057ab  usr/share/nvim/runtime/syntax/xs.vim
d6d5e53c320fea19832a70b2d1dacc0c  usr/share/nvim/runtime/syntax/xsd.vim
0829caa473cef563ade2f22066ef036e  usr/share/nvim/runtime/syntax/xslt.vim
7b846f8135cdbe8041f31311b610d75e  usr/share/nvim/runtime/syntax/xxd.vim
9497b2dfc102161db3409a53a4ffedf1  usr/share/nvim/runtime/syntax/yacc.vim
3474aa6b8a387b15b3f40af8ba4b1d90  usr/share/nvim/runtime/syntax/yaml.vim
1029db9305b69b832ebc25e1f137ebf5  usr/share/nvim/runtime/syntax/z8a.vim
007b9a146eb1aa31713b31556e8ac060  usr/share/nvim/runtime/syntax/zimbu.vim
1f00f9eb7328b01ac9152d0bea8f5cfa  usr/share/nvim/runtime/syntax/zsh.vim
a14b56be33733accc34415ffa72d5b8e  usr/share/nvim/runtime/tutor/en/vim-01-beginner.tutor
5b6fa848fcc0a4c965672359894f0b09  usr/share/nvim/runtime/tutor/tutor.tutor
f96075f35c61925410bbfb7471f083d9  usr/share/nvim/runtime/vimrc_example.vim
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     