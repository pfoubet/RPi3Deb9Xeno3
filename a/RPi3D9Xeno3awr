# Generated from DynaLoader_pm.PL, this file is unique for every OS

package DynaLoader;

#   And Gandalf said: 'Many folk like to know beforehand what is to
#   be set on the table; but those who have laboured to prepare the
#   feast like to keep their secret; for wonder makes the words of
#   praise louder.'

#   (Quote from Tolkien suggested by Anno Siegel.)
#
# See pod text at end of file for documentation.
# See also ext/DynaLoader/README in source tree for other information.
#
# Tim.Bunce@ig.co.uk, August 1994

BEGIN {
    $VERSION = '1.38';
}

use Config;

# enable debug/trace messages from DynaLoader perl code
$dl_debug = $ENV{PERL_DL_DEBUG} || 0 unless defined $dl_debug;

#
# Flags to alter dl_load_file behaviour.  Assigned bits:
#   0x01  make symbols available for linking later dl_load_file's.
#         (only known to work on Solaris 2 using dlopen(RTLD_GLOBAL))
#         (ignored under VMS; effect is built-in to image linking)
#         (ignored under Android; the linker always uses RTLD_LOCAL)
#
# This is called as a class method $module->dl_load_flags.  The
# definition here will be inherited and result on "default" loading
# behaviour unless a sub-class of DynaLoader defines its own version.
#

sub dl_load_flags { 0x00 }

($dl_dlext, $dl_so, $dlsrc) = @Config::Config{qw(dlext so dlsrc)};

$do_expand = 0;

@dl_require_symbols = ();       # names of symbols we need
@dl_library_path    = ();       # path to look for files

#XSLoader.pm may have added elements before we were required
#@dl_shared_objects  = ();       # shared objects for symbols we have 
#@dl_librefs         = ();       # things we have loaded
#@dl_modules         = ();       # Modules we have loaded

# Initialise @dl_library_path with the 'standard' library path
# for this platform as determined by Configure.

push(@dl_library_path, split(' ', $Config::Config{libpth}));

my $ldlibpthname         = $Config::Config{ldlibpthname};
my $ldlibpthname_defined = defined $Config::Config{ldlibpthname};
my $pthsep               = $Config::Config{path_sep};

# Add to @dl_library_path any extra directories we can gather from environment
# during runtime.

if ($ldlibpthname_defined &&
    exists $ENV{$ldlibpthname}) {
    push(@dl_library_path, split(/$pthsep/, $ENV{$ldlibpthname}));
}

# E.g. HP-UX supports both its native SHLIB_PATH *and* LD_LIBRARY_PATH.

if ($ldlibpthname_defined &&
    $ldlibpthname ne 'LD_LIBRARY_PATH' &&
    exists $ENV{LD_LIBRARY_PATH}) {
    push(@dl_library_path, split(/$pthsep/, $ENV{LD_LIBRARY_PATH}));
}

# No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.
# NOTE: All dl_*.xs (including dl_none.xs) define a dl_error() XSUB
boot_DynaLoader('DynaLoader') if defined(&boot_DynaLoader) &&
                                !defined(&dl_error);

if ($dl_debug) {
    print STDERR "DynaLoader.pm loaded (@INC, @dl_library_path)\n";
    print STDERR "DynaLoader not linked into this perl\n"
	    unless defined(&boot_DynaLoader);
}

1; # End of main code

sub croak   { require Carp; Carp::croak(@_)   }

sub bootstrap_inherit {
    my $module = $_[0];
    local *isa = *{"$module\::ISA"};
    local @isa = (@isa, 'DynaLoader');
    # Cannot goto due to delocalization.  Will report errors on a wrong line?
    bootstrap(@_);
}

sub bootstrap {
    # use local vars to enable $module.bs script to edit values
    local(@args) = @_;
    local($module) = $args[0];
    local(@dirs, $file);

    unless ($module) {
	require Carp;
	Carp::confess("Usage: DynaLoader::bootstrap(module)");
    }

    # A common error on platforms which don't support dynamic loading.
    # Since it's fatal and potentially confusing we give a detailed message.
    croak("Can't load module $module, dynamic loading not available in this perl.\n".
	"  (You may need to build a new perl executable which either supports\n".
	"  dynamic loading or has the $module module statically linked into it.)\n")
	unless defined(&dl_load_file);

    
    my @modparts = split(/::/,$module);
    my $modfname = $modparts[-1];
    my $modfname_orig = $modfname; # For .bs file search

    # Some systems have restrictions on files names for DLL's etc.
    # mod2fname returns appropriate file base name (typically truncated)
    # It may also edit @modparts if required.
    $modfname = &mod2fname(\@modparts) if defined &mod2fname;

    

    my $modpname = join('/',@modparts);

    print STDERR "DynaLoader::bootstrap for $module ",
		       "(auto/$modpname/$modfname.$dl_dlext)\n"
	if $dl_debug;

    my $dir;
    foreach (@INC) {
	
	    $dir = "$_/auto/$modpname";
	
	next unless -d $dir; # skip over uninteresting directories
	
	# check for common cases to avoid autoload of dl_findfile
        my $try = "$dir/$modfname.$dl_dlext";
	last if $file = ($do_expand) ? dl_expandspec($try) : ((-f $try) && $try);
	
	# no luck here, save dir for possible later dl_findfile search
	push @dirs, $dir;
    }
    # last resort, let dl_findfile have a go in all known locations
    $file = dl_findfile(map("-L$_",@dirs,@INC), $modfname) unless $file;

    croak("Can't locate loadable object for module $module in \@INC (\@INC contains: @INC)")
	unless $file;	# wording similar to error from 'require'

    
    my $bootname = "boot_$module";
    $bootname =~ s/\W/_/g;
    @dl_require_symbols = ($bootname);

    # Execute optional '.bootstrap' perl script for this module.
    # The .bs file can be used to configure @dl_resolve_using etc to
    # match the needs of the individual module on this architecture.
    # N.B. The .bs file does not following the naming convention used
    # by mod2fname.
    my $bs = "$dir/$modfname_orig";
    $bs =~ s/(\.\w+)?(;\d*)?$/\.bs/; # look for .bs 'beside' the library
    if (-s $bs) { # only read file if it's not empty
        print STDERR "BS: $bs ($^O, $dlsrc)\n" if $dl_debug;
        eval { do $bs; };
        warn "$bs: $@\n" if $@;
    }

    my $boot_symbol_ref;

    

    # Many dynamic extension loading problems will appear to come from
    # this section of code: XYZ failed at line 123 of DynaLoader.pm.
    # Often these errors are actually occurring in the initialisation
    # C code of the extension XS file. Perl reports the error as being
    # in this perl code simply because this was the last perl code
    # it executed.

    my $flags = $module->dl_load_flags;
    
    my $libref = dl_load_file($file, $flags) or
	croak("Can't load '$file' for module $module: ".dl_error());

    push(@dl_librefs,$libref);  # record loaded object

    $boot_symbol_ref = dl_find_symbol($libref, $bootname) or
         croak("Can't find '$bootname' symbol in $file\n");

    push(@dl_modules, $module); # record loaded module

  boot:
    my $xs = dl_install_xsub("${module}::bootstrap", $boot_symbol_ref, $file);

    # See comment block above

	push(@dl_shared_objects, $file); # record files loaded

    &$xs(@args);
}

sub dl_findfile {
    # This function does not automatically consider the architecture
    # or the perl library auto directories.
    my (@args) = @_;
    my (@dirs,  $dir);   # which directories to search
    my (@found);         # full paths to real files we have found
    #my $dl_ext= 'so'; # $Config::Config{'dlext'} suffix for perl extensions
    #my $dl_so = 'so'; # $Config::Config{'so'} suffix for shared libraries

    print STDERR "dl_findfile(@args)\n" if $dl_debug;

    # accumulate directories but process files as they appear
    arg: foreach(@args) {
        #  Special fast case: full filepath requires no search
	
	
        if (m:/: && -f $_) {
	    push(@found,$_);
	    last arg unless wantarray;
	    next;
	}
	

        # Deal with directories first:
        #  Using a -L prefix is the preferred option (faster and more robust)
        if (m:^-L:) { s/^-L//; push(@dirs, $_); next; }

        #  Otherwise we try to try to spot directories by a heuristic
        #  (this is a more complicated issue than it first appears)
        if (m:/: && -d $_) {   push(@dirs, $_); next; }

	

        #  Only files should get this far...
        my(@names, $name);    # what filenames to look for
        if (m:-l: ) {          # convert -lname to appropriate library name
            s/-l//;
            push(@names,"lib$_.$dl_so");
            push(@names,"lib$_.a");
        } else {                # Umm, a bare name. Try various alternatives:
            # these should be ordered with the most likely first
            push(@names,"$_.$dl_dlext")    unless m/\.$dl_dlext$/o;
            push(@names,"$_.$dl_so")     unless m/\.$dl_so$/o;
	    
            push(@names,"lib$_.$dl_so")  unless m:/:;
            push(@names, $_);
        }
	my $dirsep = '/';
	
        foreach $dir (@dirs, @dl_library_path) {
            next unless -d $dir;
	    
            foreach $name (@names) {
		my($file) = "$dir$dirsep$name";
                print STDERR " checking in $dir for $name\n" if $dl_debug;
		$file = ($do_expand) ? dl_expandspec($file) : (-f $file && $file);
		#$file = _check_file($file);
		if ($file) {
                    push(@found, $file);
                    next arg; # no need to look any further
                }
            }
        }
    }
    if ($dl_debug) {
        foreach(@dirs) {
            print STDERR " dl_findfile ignored non-existent directory: $_\n" unless -d $_;
        }
        print STDERR "dl_findfile found: @found\n";
    }
    return $found[0] unless wantarray;
    @found;
}

sub dl_expandspec {
    my($spec) = @_;
    # Optional function invoked if DynaLoader.pm sets $do_expand.
    # Most systems do not require or use this function.
    # Some systems may implement it in the dl_*.xs file in which case
    # this Perl version should be excluded at build time.

    # This function is designed to deal with systems which treat some
    # 'filenames' in a special way. For example VMS 'Logical Names'
    # (something like unix environment variables - but different).
    # This function should recognise such names and expand them into
    # full file paths.
    # Must return undef if $spec is invalid or file does not exist.

    my $file = $spec; # default output to input

	return undef unless -f $file;
    print STDERR "dl_expandspec($spec) => $file\n" if $dl_debug;
    $file;
}

sub dl_find_symbol_anywhere
{
    my $sym = shift;
    my $libref;
    foreach $libref (@dl_librefs) {
	my $symref = dl_find_symbol($libref,$sym,1);
	return $symref if $symref;
    }
    return undef;
}

__END__

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #
# $Id: Encode.pm,v 2.80 2016/01/25 14:54:01 dankogai Exp $
#
package Encode;
use strict;
use warnings;
our $VERSION = sprintf "%d.%02d_01", q$Revision: 2.80 $ =~ /(\d+)/g;
use constant DEBUG => !!$ENV{PERL_ENCODE_DEBUG};
use XSLoader ();
XSLoader::load( __PACKAGE__, $VERSION );

use Exporter 5.57 'import';

# Public, encouraged API is exported by default

our @EXPORT = qw(
  decode  decode_utf8  encode  encode_utf8 str2bytes bytes2str
  encodings  find_encoding clone_encoding
);
our @FB_FLAGS = qw(
  DIE_ON_ERR WARN_ON_ERR RETURN_ON_ERR LEAVE_SRC
  PERLQQ HTMLCREF XMLCREF STOP_AT_PARTIAL
);
our @FB_CONSTS = qw(
  FB_DEFAULT FB_CROAK FB_QUIET FB_WARN
  FB_PERLQQ FB_HTMLCREF FB_XMLCREF
);
our @EXPORT_OK = (
    qw(
      _utf8_off _utf8_on define_encoding from_to is_16bit is_8bit
      is_utf8 perlio_ok resolve_alias utf8_downgrade utf8_upgrade
      ),
    @FB_FLAGS, @FB_CONSTS,
);

our %EXPORT_TAGS = (
    all          => [ @EXPORT,    @EXPORT_OK ],
    default      => [ @EXPORT ],
    fallbacks    => [ @FB_CONSTS ],
    fallback_all => [ @FB_CONSTS, @FB_FLAGS ],
);

# Documentation moved after __END__ for speed - NI-S

our $ON_EBCDIC = ( ord("A") == 193 );

use Encode::Alias;

# Make a %Encoding package variable to allow a certain amount of cheating
our %Encoding;
our %ExtModule;
require Encode::Config;
#  See
#  https://bugzilla.redhat.com/show_bug.cgi?id=435505#c2
#  to find why sig handlers inside eval{} are disabled.
eval {
    local $SIG{__DIE__};
    local $SIG{__WARN__};
    local @INC = @INC;
    pop @INC if $INC[-1] eq '.';
    require Encode::ConfigLocal;
};

sub encodings {
    my %enc;
    my $arg  = $_[1] || '';
    if ( $arg eq ":all" ) {
        %enc = ( %Encoding, %ExtModule );
    }
    else {
        %enc = %Encoding;
        for my $mod ( map { m/::/ ? $_ : "Encode::$_" } @_ ) {
            DEBUG and warn $mod;
            for my $enc ( keys %ExtModule ) {
                $ExtModule{$enc} eq $mod and $enc{$enc} = $mod;
            }
        }
    }
    return sort { lc $a cmp lc $b }
      grep      { !/^(?:Internal|Unicode|Guess)$/o } keys %enc;
}

sub perlio_ok {
    my $obj = ref( $_[0] ) ? $_[0] : find_encoding( $_[0] );
    $obj->can("perlio_ok") and return $obj->perlio_ok();
    return 0;    # safety net
}

sub define_encoding {
    my $obj  = shift;
    my $name = shift;
    $Encoding{$name} = $obj;
    my $lc = lc($name);
    define_alias( $lc => $obj ) unless $lc eq $name;
    while (@_) {
        my $alias = shift;
        define_alias( $alias, $obj );
    }
    return $obj;
}

sub getEncoding {
    my ( $class, $name, $skip_external ) = @_;

    $name =~ s/\s+//g; # https://rt.cpan.org/Ticket/Display.html?id=65796

    ref($name) && $name->can('renew') and return $name;
    exists $Encoding{$name} and return $Encoding{$name};
    my $lc = lc $name;
    exists $Encoding{$lc} and return $Encoding{$lc};

    my $oc = $class->find_alias($name);
    defined($oc) and return $oc;
    $lc ne $name and $oc = $class->find_alias($lc);
    defined($oc) and return $oc;

    unless ($skip_external) {
        if ( my $mod = $ExtModule{$name} || $ExtModule{$lc} ) {
            $mod =~ s,::,/,g;
            $mod .= '.pm';
            eval { require $mod; };
            exists $Encoding{$name} and return $Encoding{$name};
        }
    }
    return;
}

sub find_encoding($;$) {
    my ( $name, $skip_external ) = @_;
    return __PACKAGE__->getEncoding( $name, $skip_external );
}

sub resolve_alias($) {
    my $obj = find_encoding(shift);
    defined $obj and return $obj->name;
    return;
}

sub clone_encoding($) {
    my $obj = find_encoding(shift);
    ref $obj or return;
    eval { require Storable };
    $@ and return;
    return Storable::dclone($obj);
}

sub encode($$;$) {
    my ( $name, $string, $check ) = @_;
    return undef unless defined $string;
    $string .= '';    # stringify;
    $check ||= 0;
    unless ( defined $name ) {
        require Carp;
        Carp::croak("Encoding name should not be undef");
    }
    my $enc = find_encoding($name);
    unless ( defined $enc ) {
        require Carp;
        Carp::croak("Unknown encoding '$name'");
    }
    # For Unicode, warnings need to be caught and re-issued at this level
    # so that callers can disable utf8 warnings lexically.
    my $octets;
    if ( ref($enc) eq 'Encode::Unicode' ) {
        my $warn = '';
        {
            local $SIG{__WARN__} = sub { $warn = shift };
            $octets = $enc->encode( $string, $check );
        }
        warnings::warnif('utf8', $warn) if length $warn;
    }
    else {
        $octets = $enc->encode( $string, $check );
    }
    $_[1] = $string if $check and !ref $check and !( $check & LEAVE_SRC() );
    return $octets;
}
*str2bytes = \&encode;

sub decode($$;$) {
    my ( $name, $octets, $check ) = @_;
    return undef unless defined $octets;
    $octets .= '';
    $check ||= 0;
    my $enc = find_encoding($name);
    unless ( defined $enc ) {
        require Carp;
        Carp::croak("Unknown encoding '$name'");
    }
    # For Unicode, warnings need to be caught and re-issued at this level
    # so that callers can disable utf8 warnings lexically.
    my $string;
    if ( ref($enc) eq 'Encode::Unicode' ) {
        my $warn = '';
        {
            local $SIG{__WARN__} = sub { $warn = shift };
            $string = $enc->decode( $octets, $check );
        }
        warnings::warnif('utf8', $warn) if length $warn;
    }
    else {
        $string = $enc->decode( $octets, $check );
    }
    $_[1] = $octets if $check and !ref $check and !( $check & LEAVE_SRC() );
    return $string;
}
*bytes2str = \&decode;

sub from_to($$$;$) {
    my ( $string, $from, $to, $check ) = @_;
    return undef unless defined $string;
    $check ||= 0;
    my $f = find_encoding($from);
    unless ( defined $f ) {
        require Carp;
        Carp::croak("Unknown encoding '$from'");
    }
    my $t = find_encoding($to);
    unless ( defined $t ) {
        require Carp;
        Carp::croak("Unknown encoding '$to'");
    }
    my $uni = $f->decode($string);
    $_[0] = $string = $t->encode( $uni, $check );
    return undef if ( $check && length($uni) );
    return defined( $_[0] ) ? length($string) : undef;
}

sub encode_utf8($) {
    my ($str) = @_;
    utf8::encode($str);
    return $str;
}

my $utf8enc;

sub decode_utf8($;$) {
    my ( $octets, $check ) = @_;
    return undef unless defined $octets;
    $octets .= '';
    $check   ||= 0;
    $utf8enc ||= find_encoding('utf8');
    my $string = $utf8enc->decode( $octets, $check );
    $_[0] = $octets if $check and !ref $check and !( $check & LEAVE_SRC() );
    return $string;
}

# sub decode_utf8($;$) {
#     my ( $str, $check ) = @_;
#     return $str if is_utf8($str);
#     if ($check) {
#         return decode( "utf8", $str, $check );
#     }
#     else {
#         return decode( "utf8", $str );
#         return $str;
#     }
# }

predefine_encodings(1);

#
# This is to restore %Encoding if really needed;
#

sub predefine_encodings {
    require Encode::Encoding;
    no warnings 'redefine';
    my $use_xs = shift;
    if ($ON_EBCDIC) {

        # was in Encode::UTF_EBCDIC
        package Encode::UTF_EBCDIC;
        push @Encode::UTF_EBCDIC::ISA, 'Encode::Encoding';
        *decode = sub {
            my ( undef, $str, $chk ) = @_;
            my $res = '';
            for ( my $i = 0 ; $i < length($str) ; $i++ ) {
                $res .=
                  chr(
                    utf8::unicode_to_native( ord( substr( $str, $i, 1 ) ) )
                  );
            }
            $_[1] = '' if $chk;
            return $res;
        };
        *encode = sub {
            my ( undef, $str, $chk ) = @_;
            my $res = '';
            for ( my $i = 0 ; $i < length($str) ; $i++ ) {
                $res .=
                  chr(
                    utf8::native_to_unicode( ord( substr( $str, $i, 1 ) ) )
                  );
            }
            $_[1] = '' if $chk;
            return $res;
        };
        $Encode::Encoding{Unicode} =
          bless { Name => "UTF_EBCDIC" } => "Encode::UTF_EBCDIC";
    }
    else {

        package Encode::Internal;
        push @Encode::Internal::ISA, 'Encode::Encoding';
        *decode = sub {
            my ( undef, $str, $chk ) = @_;
            utf8::upgrade($str);
            $_[1] = '' if $chk;
            return $str;
        };
        *encode = \&decode;
        $Encode::Encoding{Unicode} =
          bless { Name => "Internal" } => "Encode::Internal";
    }
    {
        # https://rt.cpan.org/Public/Bug/Display.html?id=103253
        package Encode::XS;
        push @Encode::XS::ISA, 'Encode::Encoding';
    }
    {

        # was in Encode::utf8
        package Encode::utf8;
        push @Encode::utf8::ISA, 'Encode::Encoding';

        #
        if ($use_xs) {
            Encode::DEBUG and warn __PACKAGE__, " XS on";
            *decode = \&decode_xs;
            *encode = \&encode_xs;
        }
        else {
            Encode::DEBUG and warn __PACKAGE__, " XS off";
            *decode = sub {
                my ( undef, $octets, $chk ) = @_;
                my $str = Encode::decode_utf8($octets);
                if ( defined $str ) {
                    $_[1] = '' if $chk;
                    return $str;
                }
                return undef;
            };
            *encode = sub {
                my ( undef, $string, $chk ) = @_;
                my $octets = Encode::encode_utf8($string);
                $_[1] = '' if $chk;
                return $octets;
            };
        }
        *cat_decode = sub {    # ($obj, $dst, $src, $pos, $trm, $chk)
                               # currently ignores $chk
            my ( undef, undef, undef, $pos, $trm ) = @_;
            my ( $rdst, $rsrc, $rpos ) = \@_[ 1, 2, 3 ];
            use bytes;
            if ( ( my $npos = index( $$rsrc, $trm, $pos ) ) >= 0 ) {
                $$rdst .=
                  substr( $$rsrc, $pos, $npos - $pos + length($trm) );
                $$rpos = $npos + length($trm);
                return 1;
            }
            $$rdst .= substr( $$rsrc, $pos );
            $$rpos = length($$rsrc);
            return '';
        };
        $Encode::Encoding{utf8} =
          bless { Name => "utf8" } => "Encode::utf8";
        $Encode::Encoding{"utf-8-strict"} =
          bless { Name => "utf-8-strict", strict_utf8 => 1 } 
            => "Encode::utf8";
    }
}

1;

__END__

=head1 NAME

Encode - character encodings in Perl

=head1 SYNOPSIS

    use Encode qw(decode encode);
    $characters = decode('UTF-8', $octets,     Encode::FB_CROAK);
    $octets     = encode('UTF-8', $characters, Encode::FB_CROAK);

=head2 Table of Contents

Encode consists of a collection of modules whose details are too extensive
to fit in one document.  This one itself explains the top-level APIs
and general topics at a glance.  For other topics and more details,
see the documentation for these modules:

=over 2

=item L<Encode::Alias> - Alias definitions to encodings

=item L<Encode::Encoding> - Encode Implementation Base Class

=item L<Encode::Supported> - List of Supported Encodings

=item L<Encode::CN> - Simplified Chinese Encodings

=item L<Encode::JP> - Japanese Encodings

=item L<Encode::KR> - Korean Encodings

=item L<Encode::TW> - Traditional Chinese Encodings

=back

=head1 DESCRIPTION

The C<Encode> module provides the interface between Perl strings
and the rest of the system.  Perl strings are sequences of
I<characters>.

The repertoire of characters that Perl can represent is a superset of those
defined by the Unicode Consortium. On most platforms the ordinal
values of a character as returned by C<ord(I<S>)> is the I<Unicode
codepoint> for that character. The exceptions are platforms where
the legacy encoding is some variant of EBCDIC rather than a superset
of ASCII; see L<perlebcdic>.

During recent history, data is moved around a computer in 8-bit chunks,
often called "bytes" but also known as "octets" in standards documents.
Perl is widely used to manipulate data of many types: not only strings of
characters representing human or computer languages, but also "binary"
data, being the machine's representation of numbers, pixels in an image, or
just about anything.

When Perl is processing "binary data", the programmer wants Perl to
process "sequences of bytes". This is not a problem for Perl: because a
byte has 256 possible values, it easily fits in Perl's much larger
"logical character".

This document mostly explains the I<how>. L<perlunitut> and L<perlunifaq>
explain the I<why>.

=head2 TERMINOLOGY

=head3 character

A character in the range 0 .. 2**32-1 (or more);
what Perl's strings are made of.

=head3 byte

A character in the range 0..255;
a special case of a Perl character.

=head3 octet

8 bits of data, with ordinal values 0..255;
term for bytes passed to or from a non-Perl context, such as a disk file,
standard I/O stream, database, command-line argument, environment variable,
socket etc.

=head1 THE PERL ENCODING API

=head2 Basic methods

=head3 encode

  $octets  = encode(ENCODING, STRING[, CHECK])

Encodes the scalar value I<STRING> from Perl's internal form into
I<ENCODING> and returns a sequence of octets.  I<ENCODING> can be either a
canonical name or an alias.  For encoding names and aliases, see
L</"Defining Aliases">.  For CHECK, see L</"Handling Malformed Data">.

For example, to convert a string from Perl's internal format into
ISO-8859-1, also known as Latin1:

  $octets = encode("iso-8859-1", $string);

B<CAVEAT>: When you run C<$octets = encode("utf8", $string)>, then
$octets I<might not be equal to> $string.  Though both contain the
same data, the UTF8 flag for $octets is I<always> off.  When you
encode anything, the UTF8 flag on the result is always off, even when it
contains a completely valid utf8 string. See L</"The UTF8 flag"> below.

If the $string is C<undef>, then C<undef> is returned.

=head3 decode

  $string = decode(ENCODING, OCTETS[, CHECK])

This function returns the string that results from decoding the scalar
value I<OCTETS>, assumed to be a sequence of octets in I<ENCODING>, into
Perl's internal form.  As with encode(),
I<ENCODING> can be either a canonical name or an alias. For encoding names
and aliases, see L</"Defining Aliases">; for I<CHECK>, see L</"Handling
Malformed Data">.

For example, to convert ISO-8859-1 data into a string in Perl's
internal format:

  $string = decode("iso-8859-1", $octets);

B<CAVEAT>: When you run C<$string = decode("utf8", $octets)>, then $string
I<might not be equal to> $octets.  Though both contain the same data, the
UTF8 flag for $string is on.  See L</"The UTF8 flag">
below.

If the $string is C<undef>, then C<undef> is returned.

=head3 find_encoding

  [$obj =] find_encoding(ENCODING)

Returns the I<encoding object> corresponding to I<ENCODING>.  Returns
C<undef> if no matching I<ENCODING> is find.  The returned object is
what does the actual encoding or decoding.

  $utf8 = decode($name, $bytes);

is in fact

    $utf8 = do {
        $obj = find_encoding($name);
        croak qq(encoding "$name" not found) unless ref $obj;
        $obj->decode($bytes);
    };

with more error checking.

You can therefore save time by reusing this object as follows;

    my $enc = find_encoding("iso-8859-1");
    while(<>) {
        my $utf8 = $enc->decode($_);
        ... # now do something with $utf8;
    }

Besides L</decode> and L</encode>, other methods are
available as well.  For instance, C<name()> returns the canonical
name of the encoding object.

  find_encoding("latin1")->name; # iso-8859-1

See L<Encode::Encoding> for details.

=head3 from_to

  [$length =] from_to($octets, FROM_ENC, TO_ENC [, CHECK])

Converts I<in-place> data between two encodings. The data in $octets
must be encoded as octets and I<not> as characters in Perl's internal
format. For example, to convert ISO-8859-1 data into Microsoft's CP1250
encoding:

  from_to($octets, "iso-8859-1", "cp1250");

and to convert it back:

  from_to($octets, "cp1250", "iso-8859-1");

Because the conversion happens in place, the data to be
converted cannot be a string constant: it must be a scalar variable.

C<from_to()> returns the length of the converted string in octets on success,
and C<undef> on error.

B<CAVEAT>: The following operations may look the same, but are not:

  from_to($data, "iso-8859-1", "utf8"); #1
  $data = decode("iso-8859-1", $data);  #2

Both #1 and #2 make $data consist of a completely valid UTF-8 string,
but only #2 turns the UTF8 flag on.  #1 is equivalent to:

  $data = encode("utf8", decode("iso-8859-1", $data));

See L</"The UTF8 flag"> below.

Also note that:

  from_to($octets, $from, $to, $check);

is equivalent to:

  $octets = encode($to, decode($from, $octets), $check);

Yes, it does I<not> respect the $check during decoding.  It is
deliberately done that way.  If you need minute control, use C<decode>
followed by C<encode> as follows:

  $octets = encode($to, decode($from, $octets, $check_from), $check_to);

=head3 encode_utf8

  $octets = encode_utf8($string);

Equivalent to C<$octets = encode("utf8", $string)>.  The characters in
$string are encoded in Perl's internal format, and the result is returned
as a sequence of octets.  Because all possible characters in Perl have a
(loose, not strict) UTF-8 representation, this function cannot fail.

=head3 decode_utf8

  $string = decode_utf8($octets [, CHECK]);

Equivalent to C<$string = decode("utf8", $octets [, CHECK])>.
The sequence of octets represented by $octets is decoded
from UTF-8 into a sequence of logical characters.
Because not all sequences of octets are valid UTF-8,
it is quite possible for this function to fail.
For CHECK, see L</"Handling Malformed Data">.

=head2 Listing available encodings

  use Encode;
  @list = Encode->encodings();

Returns a list of canonical names of available encodings that have already
been loaded.  To get a list of all available encodings including those that
have not yet been loaded, say:

  @all_encodings = Encode->encodings(":all");

Or you can give the name of a specific module:

  @with_jp = Encode->encodings("Encode::JP");

When "C<::>" is not in the name, "C<Encode::>" is assumed.

  @ebcdic = Encode->encodings("EBCDIC");

To find out in detail which encodings are supported by this package,
see L<Encode::Supported>.

=head2 Defining Aliases

To add a new alias to a given encoding, use:

  use Encode;
  use Encode::Alias;
  define_alias(NEWNAME => ENCODING);

After that, I<NEWNAME> can be used as an alias for I<ENCODING>.
I<ENCODING> may be either the name of an encoding or an
I<encoding object>.

Before you do that, first make sure the alias is nonexistent using
C<resolve_alias()>, which returns the canonical name thereof.
For example:

  Encode::resolve_alias("latin1") eq "iso-8859-1" # true
  Encode::resolve_alias("iso-8859-12")   # false; nonexistent
  Encode::resolve_alias($name) eq $name  # true if $name is canonical

C<resolve_alias()> does not need C<use Encode::Alias>; it can be
imported via C<use Encode qw(resolve_alias)>.

See L<Encode::Alias> for details.

=head2 Finding IANA Character Set Registry names

The canonical name of a given encoding does not necessarily agree with
IANA Character Set Registry, commonly seen as C<< Content-Type:
text/plain; charset=I<WHATEVER> >>.  For most cases, the canonical name
works, but sometimes it does not, most notably with "utf-8-strict".

As of C<Encode> version 2.21, a new method C<mime_name()> is therefore added.

  use Encode;
  my $enc = find_encoding("UTF-8");
  warn $enc->name;      # utf-8-strict
  warn $enc->mime_name; # UTF-8

See also:  L<Encode::Encoding>

=head1 Encoding via PerlIO

If your perl supports C<PerlIO> (which is the default), you can use a
C<PerlIO> layer to decode and encode directly via a filehandle.  The
following two examples are fully identical in functionality:

  ### Version 1 via PerlIO
    open(INPUT,  "< :encoding(shiftjis)", $infile)
        || die "Can't open < $infile for reading: $!";
    open(OUTPUT, "> :encoding(euc-jp)",  $outfile)
        || die "Can't open > $output for writing: $!";
    while (<INPUT>) {   # auto decodes $_
        print OUTPUT;   # auto encodes $_
    }
    close(INPUT)   || die "can't close $infile: $!";
    close(OUTPUT)  || die "can't close $outfile: $!";

  ### Version 2 via from_to()
    open(INPUT,  "< :raw", $infile)
        || die "Can't open < $infile for reading: $!";
    open(OUTPUT, "> :raw",  $outfile)
        || die "Can't open > $output for writing: $!";

    while (<INPUT>) {
        from_to($_, "shiftjis", "euc-jp", 1);  # switch encoding
        print OUTPUT;   # emit raw (but properly encoded) data
    }
    close(INPUT)   || die "can't close $infile: $!";
    close(OUTPUT)  || die "can't close $outfile: $!";

In the first version above, you let the appropriate encoding layer
handle the conversion.  In the second, you explicitly translate
from one encoding to the other.

Unfortunately, it may be that encodings are not C<PerlIO>-savvy.  You can check
to see whether your encoding is supported by C<PerlIO> by invoking the
C<perlio_ok> method on it:

  Encode::perlio_ok("hz");             # false
  find_encoding("euc-cn")->perlio_ok;  # true wherever PerlIO is available

  use Encode qw(perlio_ok);            # imported upon request
  perlio_ok("euc-jp")

Fortunately, all encodings that come with C<Encode> core are C<PerlIO>-savvy
except for C<hz> and C<ISO-2022-kr>.  For the gory details, see
L<Encode::Encoding> and L<Encode::PerlIO>.

=head1 Handling Malformed Data

The optional I<CHECK> argument tells C<Encode> what to do when
encountering malformed data.  Without I<CHECK>, C<Encode::FB_DEFAULT>
(== 0) is assumed.

As of version 2.12, C<Encode> supports coderef values for C<CHECK>;
see below.

B<NOTE:> Not all encodings support this feature.
Some encodings ignore the I<CHECK> argument.  For example,
L<Encode::Unicode> ignores I<CHECK> and it always croaks on error.

=head2 List of I<CHECK> values

=head3 FB_DEFAULT

  I<CHECK> = Encode::FB_DEFAULT ( == 0)

If I<CHECK> is 0, encoding and decoding replace any malformed character
with a I<substitution character>.  When you encode, I<SUBCHAR> is used.
When you decode, the Unicode REPLACEMENT CHARACTER, code point U+FFFD, is
used.  If the data is supposed to be UTF-8, an optional lexical warning of
warning category C<"utf8"> is given.

=head3 FB_CROAK

  I<CHECK> = Encode::FB_CROAK ( == 1)

If I<CHECK> is 1, methods immediately die with an error
message.  Therefore, when I<CHECK> is 1, you should trap
exceptions with C<eval{}>, unless you really want to let it C<die>.

=head3 FB_QUIET

  I<CHECK> = Encode::FB_QUIET

If I<CHECK> is set to C<Encode::FB_QUIET>, encoding and decoding immediately
return the portion of the data that has been processed so far when an
error occurs. The data argument is overwritten with everything
after that point; that is, the unprocessed portion of the data.  This is
handy when you have to call C<decode> repeatedly in the case where your
source data may contain partial multi-byte character sequences,
(that is, you are reading with a fixed-width buffer). Here's some sample
code to do exactly that:

    my($buffer, $string) = ("", "");
    while (read($fh, $buffer, 256, length($buffer))) {
        $string .= decode($encoding, $buffer, Encode::FB_QUIET);
        # $buffer now contains the unprocessed partial character
    }

=head3 FB_WARN

  I<CHECK> = Encode::FB_WARN

This is the same as C<FB_QUIET> above, except that instead of being silent
on errors, it issues a warning.  This is handy for when you are debugging.

=head3 FB_PERLQQ FB_HTMLCREF FB_XMLCREF

=over 2

=item perlqq mode (I<CHECK> = Encode::FB_PERLQQ)

=item HTML charref mode (I<CHECK> = Encode::FB_HTMLCREF)

=item XML charref mode (I<CHECK> = Encode::FB_XMLCREF)

=back

For encodings that are implemented by the C<Encode::XS> module, C<CHECK> C<==>
C<Encode::FB_PERLQQ> puts C<encode> and C<decode> into C<perlqq> fallback mode.

When you decode, C<\xI<HH>> is inserted for a malformed character, where
I<HH> is the hex representation of the octet that could not be decoded to
utf8.  When you encode, C<\x{I<HHHH>}> will be inserted, where I<HHHH> is
the Unicode code point (in any number of hex digits) of the character that
cannot be found in the character repertoire of the encoding.

The HTML/XML character reference modes are about the same. In place of
C<\x{I<HHHH>}>, HTML uses C<&#I<NNN>;> where I<NNN> is a decimal number, and
XML uses C<&#xI<HHHH>;> where I<HHHH> is the hexadecimal number.

In C<Encode> 2.10 or later, C<LEAVE_SRC> is also implied.

=head3 The bitmask

These modes are all actually set via a bitmask.  Here is how the C<FB_I<XXX>>
constants are laid out.  You can import the C<FB_I<XXX>> constants via
C<use Encode qw(:fallbacks)>, and you can import the generic bitmask
constants via C<use Encode qw(:fallback_all)>.

                     FB_DEFAULT FB_CROAK FB_QUIET FB_WARN  FB_PERLQQ
 DIE_ON_ERR    0x0001             X
 WARN_ON_ERR   0x0002                               X
 RETURN_ON_ERR 0x0004                      X        X
 LEAVE_SRC     0x0008                                        X
 PERLQQ        0x0100                                        X
 HTMLCREF      0x0200
 XMLCREF       0x0400

=head3 LEAVE_SRC

  Encode::LEAVE_SRC

If the C<Encode::LEAVE_SRC> bit is I<not> set but I<CHECK> is set, then the
source string to encode() or decode() will be overwritten in place.
If you're not interested in this, then bitwise-OR it with the bitmask.

=head2 coderef for CHECK

As of C<Encode> 2.12, C<CHECK> can also be a code reference which takes the
ordinal value of the unmapped character as an argument and returns
octets that represent the fallback character.  For instance:

  $ascii = encode("ascii", $utf8, sub{ sprintf "<U+%04X>", shift });

Acts like C<FB_PERLQQ> but U+I<XXXX> is used instead of C<\x{I<XXXX>}>.

Even the fallback for C<decode> must return octets, which are
then decoded with the character encoding that C<decode> accepts. So for
example if you wish to decode octets as UTF-8, and use ISO-8859-15 as
a fallback for bytes that are not valid UTF-8, you could write

    $str = decode 'UTF-8', $octets, sub {
        my $tmp = chr shift;
        from_to $tmp, 'ISO-8859-15', 'UTF-8';
        return $tmp;
    };

=head1 Defining Encodings

To define a new encoding, use:

    use Encode qw(define_encoding);
    define_encoding($object, CANONICAL_NAME [, alias...]);

I<CANONICAL_NAME> will be associated with I<$object>.  The object
should provide the interface described in L<Encode::Encoding>.
If more than two arguments are provided, additional
arguments are considered aliases for I<$object>.

See L<Encode::Encoding> for details.

=head1 The UTF8 flag

Before the introduction of Unicode support in Perl, The C<eq> operator
just compared the strings represented by two scalars. Beginning with
Perl 5.8, C<eq> compares two strings with simultaneous consideration of
I<the UTF8 flag>. To explain why we made it so, I quote from page 402 of
I<Programming Perl, 3rd ed.>

=over 2

=item Goal #1:

Old byte-oriented programs should not spontaneously break on the old
byte-oriented data they used to work on.

=item Goal #2:

Old byte-oriented programs should magically start working on the new
character-oriented data when appropriate.

=item Goal #3:

Programs should run just as fast in the new character-oriented mode
as in the old byte-oriented mode.

=item Goal #4:

Perl should remain one language, rather than forking into a
byte-oriented Perl and a character-oriented Perl.

=back

When I<Programming Perl, 3rd ed.> was written, not even Perl 5.6.0 had been
born yet, many features documented in the book remained unimplemented for a
long time.  Perl 5.8 corrected much of this, and the introduction of the
UTF8 flag is one of them.  You can think of there being two fundamentally
different kinds of strings and string-operations in Perl: one a
byte-oriented mode  for when the internal UTF8 flag is off, and the other a
character-oriented mode for when the internal UTF8 flag is on.

Here is how C<Encode> handles the UTF8 flag.

=over 2

=item *

When you I<encode>, the resulting UTF8 flag is always B<off>.

=item *

When you I<decode>, the resulting UTF8 flag is B<on>--I<unless> you can
unambiguously represent data.  Here is what we mean by "unambiguously".
After C<$utf8 = decode("foo", $octet)>,

  When $octet is...   The UTF8 flag in $utf8 is
  ---------------------------------------------
  In ASCII only (or EBCDIC only)            OFF
  In ISO-8859-1                              ON
  In any other Encoding                      ON
  ---------------------------------------------

As you see, there is one exception: in ASCII.  That way you can assume
Goal #1.  And with C<Encode>, Goal #2 is assumed but you still have to be
careful in the cases mentioned in the B<CAVEAT> paragraphs above.

This UTF8 flag is not visible in Perl scripts, exactly for the same reason
you cannot (or rather, you I<don't have to>) see whether a scalar contains
a string, an integer, or a floating-point number.   But you can still peek
and poke these if you will.  See the next section.

=back

=head2 Messing with Perl's Internals

The following API uses parts of Perl's internals in the current
implementation.  As such, they are efficient but may change in a future
release.

=head3 is_utf8

  is_utf8(STRING [, CHECK])

[INTERNAL] Tests whether the UTF8 flag is turned on in the I<STRING>.
If I<CHECK> is true, also checks whether I<STRING> contains well-formed
UTF-8.  Returns true if successful, false otherwise.

As of Perl 5.8.1, L<utf8> also has the C<utf8::is_utf8> function.

=head3 _utf8_on

  _utf8_on(STRING)

[INTERNAL] Turns the I<STRING>'s internal UTF8 flag B<on>.  The I<STRING>
is I<not> checked for containing only well-formed UTF-8.  Do not use this
unless you I<know with absolute certainty> that the STRING holds only
well-formed UTF-8.  Returns the previous state of the UTF8 flag (so please
don't treat the return value as indicating success or failure), or C<undef>
if I<STRING> is not a string.

B<NOTE>: For security reasons, this function does not work on tainted values.

=head3 _utf8_off

  _utf8_off(STRING)

[INTERNAL] Turns the I<STRING>'s internal UTF8 flag B<off>.  Do not use
frivolously.  Returns the previous state of the UTF8 flag, or C<undef> if
I<STRING> is not a string.  Do not treat the return value as indicative of
success or failure, because that isn't what it means: it is only the
previous setting.

B<NOTE>: For security reasons, this function does not work on tainted values.

=head1 UTF-8 vs. utf8 vs. UTF8

  ....We now view strings not as sequences of bytes, but as sequences
  of numbers in the range 0 .. 2**32-1 (or in the case of 64-bit
  computers, 0 .. 2**64-1) -- Programming Perl, 3rd ed.

That has historically been Perl's notion of UTF-8, as that is how UTF-8 was
first conceived by Ken Thompson when he invented it. However, thanks to
later revisions to the applicable standards, official UTF-8 is now rather
stricter than that. For example, its range is much narrower (0 .. 0x10_FFFF
to cover only 21 bits instead of 32 or 64 bits) and some sequences
are not allowed, like those used in surrogate pairs, the 31 non-character
code points 0xFDD0 .. 0xFDEF, the last two code points in I<any> plane
(0xI<XX>_FFFE and 0xI<XX>_FFFF), all non-shortest encodings, etc.

The former default in which Perl would always use a loose interpretation of
UTF-8 has now been overruled:

  From: Larry Wall <larry@wall.org>
  Date: December 04, 2004 11:51:58 JST
  To: perl-unicode@perl.org
  Subject: Re: Make Encode.pm support the real UTF-8
  Message-Id: <20041204025158.GA28754@wall.org>

  On Fri, Dec 03, 2004 at 10:12:12PM +0000, Tim Bunce wrote:
  : I've no problem with 'utf8' being perl's unrestricted uft8 encoding,
  : but "UTF-8" is the name of the standard and should give the
  : corresponding behaviour.

  For what it's worth, that's how I've always kept them straight in my
  head.

  Also for what it's worth, Perl 6 will mostly default to strict but
  make it easy to switch back to lax.

  Larry

Got that?  As of Perl 5.8.7, B<"UTF-8"> means UTF-8 in its current
sense, which is conservative and strict and security-conscious, whereas
B<"utf8"> means UTF-8 in its former sense, which was liberal and loose and
lax.  C<Encode> version 2.10 or later thus groks this subtle but critically
important distinction between C<"UTF-8"> and C<"utf8">.

  encode("utf8",  "\x{FFFF_FFFF}", 1); # okay
  encode("UTF-8", "\x{FFFF_FFFF}", 1); # croaks

In the C<Encode> module, C<"UTF-8"> is actually a canonical name for
C<"utf-8-strict">.  That hyphen between the C<"UTF"> and the C<"8"> is
critical; without it, C<Encode> goes "liberal" and (perhaps overly-)permissive:

  find_encoding("UTF-8")->name # is 'utf-8-strict'
  find_encoding("utf-8")->name # ditto. names are case insensitive
  find_encoding("utf_8")->name # ditto. "_" are treated as "-"
  find_encoding("UTF8")->name  # is 'utf8'.

Perl's internal UTF8 flag is called "UTF8", without a hyphen. It indicates
whether a string is internally encoded as "utf8", also without a hyphen.

=head1 SEE ALSO

L<Encode::Encoding>,
L<Encode::Supported>,
L<Encode::PerlIO>,
L<encoding>,
L<perlebcdic>,
L<perlfunc/open>,
L<perlunicode>, L<perluniintro>, L<perlunifaq>, L<perlunitut>
L<utf8>,
the Perl Unicode Mailing List L<http://lists.perl.org/list/perl-unicode.html>

=head1 MAINTAINER

This project was originated by the late Nick Ing-Simmons and later
maintained by Dan Kogai I<< <dankogai@cpan.org> >>.  See AUTHORS
for a full list of people involved.  For any questions, send mail to
I<< <perl-unicode@perl.org> >> so that we can all share.

While Dan Kogai retains the copyright as a maintainer, credit
should go to all those involved.  See AUTHORS for a list of those
who submitted code to the project.

=head1 COPYRIGHT

Copyright 2002-2014 Dan Kogai I<< <dankogai@cpan.org> >>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           # -*- buffer-read-only: t -*-
#
# This file is auto-generated. ***ANY*** changes here will be lost
#

package Errno;
require Exporter;
use strict;

our $VERSION = "1.25";
$VERSION = eval $VERSION;
our @ISA = 'Exporter';

my %err;

BEGIN {
    %err = (
	EPERM => 1,
	ENOENT => 2,
	ESRCH => 3,
	EINTR => 4,
	EIO => 5,
	ENXIO => 6,
	E2BIG => 7,
	ENOEXEC => 8,
	EBADF => 9,
	ECHILD => 10,
	EAGAIN => 11,
	EWOULDBLOCK => 11,
	ENOMEM => 12,
	EACCES => 13,
	EFAULT => 14,
	ENOTBLK => 15,
	EBUSY => 16,
	EEXIST => 17,
	EXDEV => 18,
	ENODEV => 19,
	ENOTDIR => 20,
	EISDIR => 21,
	EINVAL => 22,
	ENFILE => 23,
	EMFILE => 24,
	ENOTTY => 25,
	ETXTBSY => 26,
	EFBIG => 27,
	ENOSPC => 28,
	ESPIPE => 29,
	EROFS => 30,
	EMLINK => 31,
	EPIPE => 32,
	EDOM => 33,
	ERANGE => 34,
	EDEADLK => 35,
	EDEADLOCK => 35,
	ENAMETOOLONG => 36,
	ENOLCK => 37,
	ENOSYS => 38,
	ENOTEMPTY => 39,
	ELOOP => 40,
	ENOMSG => 42,
	EIDRM => 43,
	ECHRNG => 44,
	EL2NSYNC => 45,
	EL3HLT => 46,
	EL3RST => 47,
	ELNRNG => 48,
	EUNATCH => 49,
	ENOCSI => 50,
	EL2HLT => 51,
	EBADE => 52,
	EBADR => 53,
	EXFULL => 54,
	ENOANO => 55,
	EBADRQC => 56,
	EBADSLT => 57,
	EBFONT => 59,
	ENOSTR => 60,
	ENODATA => 61,
	ETIME => 62,
	ENOSR => 63,
	ENONET => 64,
	ENOPKG => 65,
	EREMOTE => 66,
	ENOLINK => 67,
	EADV => 68,
	ESRMNT => 69,
	ECOMM => 70,
	EPROTO => 71,
	EMULTIHOP => 72,
	EDOTDOT => 73,
	EBADMSG => 74,
	EOVERFLOW => 75,
	ENOTUNIQ => 76,
	EBADFD => 77,
	EREMCHG => 78,
	ELIBACC => 79,
	ELIBBAD => 80,
	ELIBSCN => 81,
	ELIBMAX => 82,
	ELIBEXEC => 83,
	EILSEQ => 84,
	ERESTART => 85,
	ESTRPIPE => 86,
	EUSERS => 87,
	ENOTSOCK => 88,
	EDESTADDRREQ => 89,
	EMSGSIZE => 90,
	EPROTOTYPE => 91,
	ENOPROTOOPT => 92,
	EPROTONOSUPPORT => 93,
	ESOCKTNOSUPPORT => 94,
	ENOTSUP => 95,
	EOPNOTSUPP => 95,
	EPFNOSUPPORT => 96,
	EAFNOSUPPORT => 97,
	EADDRINUSE => 98,
	EADDRNOTAVAIL => 99,
	ENETDOWN => 100,
	ENETUNREACH => 101,
	ENETRESET => 102,
	ECONNABORTED => 103,
	ECONNRESET => 104,
	ENOBUFS => 105,
	EISCONN => 106,
	ENOTCONN => 107,
	ESHUTDOWN => 108,
	ETOOMANYREFS => 109,
	ETIMEDOUT => 110,
	ECONNREFUSED => 111,
	EHOSTDOWN => 112,
	EHOSTUNREACH => 113,
	EALREADY => 114,
	EINPROGRESS => 115,
	ESTALE => 116,
	EUCLEAN => 117,
	ENOTNAM => 118,
	ENAVAIL => 119,
	EISNAM => 120,
	EREMOTEIO => 121,
	EDQUOT => 122,
	ENOMEDIUM => 123,
	EMEDIUMTYPE => 124,
	ECANCELED => 125,
	ENOKEY => 126,
	EKEYEXPIRED => 127,
	EKEYREVOKED => 128,
	EKEYREJECTED => 129,
	EOWNERDEAD => 130,
	ENOTRECOVERABLE => 131,
	ERFKILL => 132,
	EHWPOISON => 133,
    );
    # Generate proxy constant subroutines for all the values.
    # Well, almost all the values. Unfortunately we can't assume that at this
    # point that our symbol table is empty, as code such as if the parser has
    # seen code such as C<exists &Errno::EINVAL>, it will have created the
    # typeglob.
    # Doing this before defining @EXPORT_OK etc means that even if a platform is
    # crazy enough to define EXPORT_OK as an error constant, everything will
    # still work, because the parser will upgrade the PCS to a real typeglob.
    # We rely on the subroutine definitions below to update the internal caches.
    # Don't use %each, as we don't want a copy of the value.
    foreach my $name (keys %err) {
        if ($Errno::{$name}) {
            # We expect this to be reached fairly rarely, so take an approach
            # which uses the least compile time effort in the common case:
            eval "sub $name() { $err{$name} }; 1" or die $@;
        } else {
            $Errno::{$name} = \$err{$name};
        }
    }
}

our @EXPORT_OK = keys %err;

our %EXPORT_TAGS = (
    POSIX => [qw(
	E2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN EALREADY
	EBADF EBUSY ECHILD ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK
	EDESTADDRREQ EDOM EDQUOT EEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH
	EINPROGRESS EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK
	EMSGSIZE ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS
	ENODEV ENOENT ENOEXEC ENOLCK ENOMEM ENOPROTOOPT ENOSPC ENOSYS ENOTBLK
	ENOTCONN ENOTDIR ENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM
	EPFNOSUPPORT EPIPE EPROTONOSUPPORT EPROTOTYPE ERANGE EREMOTE ERESTART
	EROFS ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESTALE ETIMEDOUT
	ETOOMANYREFS ETXTBSY EUSERS EWOULDBLOCK EXDEV
    )],
);

sub TIEHASH { bless \%err }

sub FETCH {
    my (undef, $errname) = @_;
    return "" unless exists $err{$errname};
    my $errno = $err{$errname};
    return $errno == $! ? $errno : 0;
}

sub STORE {
    require Carp;
    Carp::confess("ERRNO hash is read only!");
}

*CLEAR = *DELETE = \*STORE; # Typeglob aliasing uses less space

sub NEXTKEY {
    each %err;
}

sub FIRSTKEY {
    my $s = scalar keys %err;	# initialize iterator
    each %err;
}

sub EXISTS {
    my (undef, $errname) = @_;
    exists $err{$errname};
}

tie %!, __PACKAGE__; # Returns an object, objects are true.

__END__

# ex: set ro:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            # GDBM_File.pm -- Perl 5 interface to GNU gdbm library.

=head1 NAME

GDBM_File - Perl5 access to the gdbm library.

=head1 SYNOPSIS

    use GDBM_File ;
    tie %hash, 'GDBM_File', $filename, &GDBM_WRCREAT, 0640;
    # Use the %hash array.
    untie %hash ;

=head1 DESCRIPTION

B<GDBM_File> is a module which allows Perl programs to make use of the
facilities provided by the GNU gdbm library.  If you intend to use this
module you should really have a copy of the gdbm manualpage at hand.

Most of the libgdbm.a functions are available through the GDBM_File
interface.

=head1 AVAILABILITY

gdbm is available from any GNU archive.  The master site is
C<ftp.gnu.org>, but you are strongly urged to use one of the many
mirrors.  You can obtain a list of mirror sites from
http://www.gnu.org/order/ftp.html.

=head1 BUGS

The available functions and the gdbm/perl interface need to be documented.

The GDBM error number and error message interface needs to be added.

=head1 SEE ALSO

L<perl(1)>, L<DB_File(3)>, L<perldbmfilter>. 

=cut

package GDBM_File;

use strict;
use warnings;
our($VERSION, @ISA, @EXPORT);

require Carp;
require Tie::Hash;
require Exporter;
require XSLoader;
@ISA = qw(Tie::Hash Exporter);
@EXPORT = qw(
	GDBM_CACHESIZE
	GDBM_CENTFREE
	GDBM_COALESCEBLKS
	GDBM_FAST
	GDBM_FASTMODE
	GDBM_INSERT
	GDBM_NEWDB
	GDBM_NOLOCK
	GDBM_OPENMASK
	GDBM_READER
	GDBM_REPLACE
	GDBM_SYNC
	GDBM_SYNCMODE
	GDBM_WRCREAT
	GDBM_WRITER
);

# This module isn't dual life, so no need for dev version numbers.
$VERSION = '1.15';

XSLoader::load();

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #

package IO;

use XSLoader ();
use Carp;
use strict;
use warnings;

our $VERSION = "1.36_01";
XSLoader::load 'IO', $VERSION;

sub import {
    shift;

    warnings::warnif('deprecated', qq{Parameterless "use IO" deprecated})
        if @_ == 0 ;
    
    my @l = @_ ? @_ : qw(Handle Seekable File Pipe Socket Dir);

    local @INC = @INC;
    pop @INC if $INC[-1] eq '.';
    eval join("", map { "require IO::" . (/(\w+)/)[0] . ";\n" } @l)
	or croak $@;
}

1;

__END__

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        package NDBM_File;

use strict;
use warnings;

require Tie::Hash;
require XSLoader;

our @ISA = qw(Tie::Hash);
our $VERSION = "1.14";

XSLoader::load();

1;

__END__

=head1 NAME

NDBM_File - Tied access to ndbm files

=head1 SYNOPSIS

  use Fcntl;   # For O_RDWR, O_CREAT, etc.
  use NDBM_File;

  tie(%h, 'NDBM_File', 'filename', O_RDWR|O_CREAT, 0666)
    or die "Couldn't tie NDBM file 'filename': $!; aborting";

  # Now read and change the hash
  $h{newkey} = newvalue;
  print $h{oldkey};
  ...

  untie %h;

=head1 DESCRIPTION

C<NDBM_File> establishes a connection between a Perl hash variable and
a file in NDBM_File format;.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.

Use C<NDBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.  The arguments to
C<tie> should be:

=over 4

=item 1.

The hash variable you want to tie.

=item 2.

The string C<"NDBM_File">.  (Ths tells Perl to use the C<NDBM_File>
package to perform the functions of the hash.)

=item 3.

The name of the file you want to tie to the hash.

=item 4.

Flags.  Use one of:

=over 2

=item C<O_RDONLY>

Read-only access to the data in the file.

=item C<O_WRONLY>

Write-only access to the data in the file.

=item C<O_RDWR>

Both read and write access.

=back

If you want to create the file if it does not exist, add C<O_CREAT> to
any of these, as in the example.  If you omit C<O_CREAT> and the file
does not already exist, the C<tie> call will fail.

=item 5.

The default permissions to use if a new file is created.  The actual
permissions will be modified by the user's umask, so you should
probably use 0666 here. (See L<perlfunc/umask>.)

=back

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<ndbm store returned -1, errno 22, key "..." at ...>

This warning is emitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the NDBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.

See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            package ODBM_File;

use strict;
use warnings;

require Tie::Hash;
require XSLoader;

our @ISA = qw(Tie::Hash);
our $VERSION = "1.14";

XSLoader::load();

1;

__END__

=head1 NAME

ODBM_File - Tied access to odbm files

=head1 SYNOPSIS

 use Fcntl;   # For O_RDWR, O_CREAT, etc.
 use ODBM_File;

  # Now read and change the hash
  $h{newkey} = newvalue;
  print $h{oldkey}; 
  ...

  untie %h;

=head1 DESCRIPTION

C<ODBM_File> establishes a connection between a Perl hash variable and
a file in ODBM_File format;.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.

Use C<ODBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.  The arguments to
C<tie> should be:

=over 4

=item 1.

The hash variable you want to tie.

=item 2. 

The string C<"ODBM_File">.  (Ths tells Perl to use the C<ODBM_File>
package to perform the functions of the hash.)

=item 3. 

The name of the file you want to tie to the hash.  

=item 4.

Flags.  Use one of:

=over 2

=item C<O_RDONLY>

Read-only access to the data in the file.

=item C<O_WRONLY>

Write-only access to the data in the file.

=item C<O_RDWR>

Both read and write access.

=back

If you want to create the file if it does not exist, add C<O_CREAT> to
any of these, as in the example.  If you omit C<O_CREAT> and the file
does not already exist, the C<tie> call will fail.

=item 5.

The default permissions to use if a new file is created.  The actual
permissions will be modified by the user's umask, so you should
probably use 0666 here. (See L<perlfunc/umask>.)

=back

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<odbm store returned -1, errno 22, key "..." at ...>

This warning is emitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the ODBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.

See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 package O;

our $VERSION = '1.01';

use B qw(minus_c save_BEGINs);
use Carp;

sub import {
    my ($class, @options) = @_;
    my ($quiet, $veryquiet) = (0, 0);
    if ($options[0] eq '-q' || $options[0] eq '-qq') {
	$quiet = 1;
	open (SAVEOUT, ">&STDOUT");
	close STDOUT;
	open (STDOUT, ">", \$O::BEGIN_output);
	if ($options[0] eq '-qq') {
	    $veryquiet = 1;
	}
	shift @options;
    }
    my $backend = shift (@options);
    eval q[
	BEGIN {
	    minus_c;
	    save_BEGINs;
	}

	CHECK {
	    if ($quiet) {
		close STDOUT;
		open (STDOUT, ">&SAVEOUT");
		close SAVEOUT;
	    }

	    # Note: if you change the code after this 'use', please
	    # change the fudge factors in B::Concise (grep for
	    # "fragile kludge") so that its output still looks
	    # nice. Thanks. --smcc
	    use B::].$backend.q[ ();
	    if ($@) {
		croak "use of backend $backend failed: $@";
	    }


	    my $compilesub = &{"B::${backend}::compile"}(@options);
	    if (ref($compilesub) ne "CODE") {
		die $compilesub;
	    }

	    local $savebackslash = $\;
	    local ($\,$",$,) = (undef,' ','');
	    &$compilesub();

	    close STDERR if $veryquiet;
	}
    ];
    die $@ if $@;
}

1;

__END__

=head1 NAME

O - Generic interface to Perl Compiler backends

=head1 SYNOPSIS

	perl -MO=[-q,]Backend[,OPTIONS] foo.pl

=head1 DESCRIPTION

This is the module that is used as a frontend to the Perl Compiler.

If you pass the C<-q> option to the module, then the STDOUT
filehandle will be redirected into the variable C<$O::BEGIN_output>
during compilation.  This has the effect that any output printed
to STDOUT by BEGIN blocks or use'd modules will be stored in this
variable rather than printed. It's useful with those backends which
produce output themselves (C<Deparse>, C<Concise> etc), so that
their output is not confused with that generated by the code
being compiled.

The C<-qq> option behaves like C<-q>, except that it also closes
STDERR after deparsing has finished. This suppresses the "Syntax OK"
message normally produced by perl.

=head1 CONVENTIONS

Most compiler backends use the following conventions: OPTIONS
consists of a comma-separated list of words (no white-space).
The C<-v> option usually puts the backend into verbose mode.
The C<-ofile> option generates output to B<file> instead of
stdout. The C<-D> option followed by various letters turns on
various internal debugging flags. See the documentation for the
desired backend (named C<B::Backend> for the example above) to
find out about that backend.

=head1 IMPLEMENTATION

This section is only necessary for those who want to write a
compiler backend module that can be used via this module.

The command-line mentioned in the SYNOPSIS section corresponds to
the Perl code

    use O ("Backend", OPTIONS);

The C<O::import> function loads the appropriate C<B::Backend> module
and calls its C<compile> function, passing it OPTIONS. That function
is expected to return a sub reference which we'll call CALLBACK. Next,
the "compile-only" flag is switched on (equivalent to the command-line
option C<-c>) and a CHECK block is registered which calls
CALLBACK. Thus the main Perl program mentioned on the command-line is
read in, parsed and compiled into internal syntax tree form. Since the
C<-c> flag is set, the program does not start running (excepting BEGIN
blocks of course) but the CALLBACK function registered by the compiler
backend is called.

In summary, a compiler backend module should be called "B::Foo"
for some foo and live in the appropriate directory for that name.
It should define a function called C<compile>. When the user types

    perl -MO=Foo,OPTIONS foo.pl

that function is called and is passed those OPTIONS (split on
commas). It should return a sub ref to the main compilation function.
After the user's program is loaded and parsed, that returned sub ref
is invoked which can then go ahead and do the compilation, usually by
making use of the C<B> module's functionality.

=head1 BUGS

The C<-q> and C<-qq> options don't work correctly if perl isn't
compiled with PerlIO support : STDOUT will be closed instead of being
redirected to C<$O::BEGIN_output>.

=head1 AUTHOR

Malcolm Beattie, C<mbeattie@sable.ox.ac.uk>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                package Opcode;

use 5.006_001;

use strict;

our($VERSION, @ISA, @EXPORT_OK);

$VERSION = "1.34";

use Carp;
use Exporter ();
use XSLoader;

BEGIN {
    @ISA = qw(Exporter);
    @EXPORT_OK = qw(
	opset ops_to_opset
	opset_to_ops opset_to_hex invert_opset
	empty_opset full_opset
	opdesc opcodes opmask define_optag
	opmask_add verify_opset opdump
    );
}

sub opset (;@);
sub opset_to_hex ($);
sub opdump (;$);
use subs @EXPORT_OK;

XSLoader::load();

_init_optags();

sub ops_to_opset { opset @_ }	# alias for old name

sub opset_to_hex ($) {
    return "(invalid opset)" unless verify_opset($_[0]);
    unpack("h*",$_[0]);
}

sub opdump (;$) {
	my $pat = shift;
    # handy utility: perl -MOpcode=opdump -e 'opdump File'
    foreach(opset_to_ops(full_opset)) {
        my $op = sprintf "  %12s  %s\n", $_, opdesc($_);
		next if defined $pat and $op !~ m/$pat/i;
		print $op;
    }
}



sub _init_optags {
    my(%all, %seen);
    @all{opset_to_ops(full_opset)} = (); # keys only

    local($_);
    local($/) = "\n=cut"; # skip to optags definition section
    <DATA>;
    $/ = "\n=";		# now read in 'pod section' chunks
    while(<DATA>) {
	next unless m/^item\s+(:\w+)/;
	my $tag = $1;

	# Split into lines, keep only indented lines
	my @lines = grep { m/^\s/    } split(/\n/);
	foreach (@lines) { s/(?:\t|--).*//  } # delete comments
	my @ops   = map  { split ' ' } @lines; # get op words

	foreach(@ops) {
	    warn "$tag - $_ already tagged in $seen{$_}\n" if $seen{$_};
	    $seen{$_} = $tag;
	    delete $all{$_};
	}
	# opset will croak on invalid names
	define_optag($tag, opset(@ops));
    }
    close(DATA);
    warn "Untagged opnames: ".join(' ',keys %all)."\n" if %all;
}


1;

__DATA__

=head1 NAME

Opcode - Disable named opcodes when compiling perl code

=head1 SYNOPSIS

  use Opcode;


=head1 DESCRIPTION

Perl code is always compiled into an internal format before execution.

Evaluating perl code (e.g. via "eval" or "do 'file'") causes
the code to be compiled into an internal format and then,
provided there was no error in the compilation, executed.
The internal format is based on many distinct I<opcodes>.

By default no opmask is in effect and any code can be compiled.

The Opcode module allow you to define an I<operator mask> to be in
effect when perl I<next> compiles any code.  Attempting to compile code
which contains a masked opcode will cause the compilation to fail
with an error. The code will not be executed.

=head1 NOTE

The Opcode module is not usually used directly. See the ops pragma and
Safe modules for more typical uses.

=head1 WARNING

The authors make B<no warranty>, implied or otherwise, about the
suitability of this software for safety or security purposes.

The authors shall not in any case be liable for special, incidental,
consequential, indirect or other similar damages arising from the use
of this software.

Your mileage will vary. If in any doubt B<do not use it>.


=head1 Operator Names and Operator Lists

The canonical list of operator names is the contents of the array
PL_op_name defined and initialised in file F<opcode.h> of the Perl
source distribution (and installed into the perl library).

Each operator has both a terse name (its opname) and a more verbose or
recognisable descriptive name. The opdesc function can be used to
return a list of descriptions for a list of operators.

Many of the functions and methods listed below take a list of
operators as parameters. Most operator lists can be made up of several
types of element. Each element can be one of

=over 8

=item an operator name (opname)

Operator names are typically small lowercase words like enterloop,
leaveloop, last, next, redo etc. Sometimes they are rather cryptic
like gv2cv, i_ncmp and ftsvtx.

=item an operator tag name (optag)

Operator tags can be used to refer to groups (or sets) of operators.
Tag names always begin with a colon. The Opcode module defines several
optags and the user can define others using the define_optag function.

=item a negated opname or optag

An opname or optag can be prefixed with an exclamation mark, e.g., !mkdir.
Negating an opname or optag means remove the corresponding ops from the
accumulated set of ops at that point.

=item an operator set (opset)

An I<opset> as a binary string of approximately 44 bytes which holds a
set or zero or more operators.

The opset and opset_to_ops functions can be used to convert from
a list of operators to an opset and I<vice versa>.

Wherever a list of operators can be given you can use one or more opsets.
See also Manipulating Opsets below.

=back


=head1 Opcode Functions

The Opcode package contains functions for manipulating operator names
tags and sets. All are available for export by the package.

=over 8

=item opcodes

In a scalar context opcodes returns the number of opcodes in this
version of perl (around 350 for perl-5.7.0).

In a list context it returns a list of all the operator names.
(Not yet implemented, use @names = opset_to_ops(full_opset).)

=item opset (OP, ...)

Returns an opset containing the listed operators.

=item opset_to_ops (OPSET)

Returns a list of operator names corresponding to those operators in
the set.

=item opset_to_hex (OPSET)

Returns a string representation of an opset. Can be handy for debugging.

=item full_opset

Returns an opset which includes all operators.

=item empty_opset

Returns an opset which contains no operators.

=item invert_opset (OPSET)

Returns an opset which is the inverse set of the one supplied.

=item verify_opset (OPSET, ...)

Returns true if the supplied opset looks like a valid opset (is the
right length etc) otherwise it returns false. If an optional second
parameter is true then verify_opset will croak on an invalid opset
instead of returning false.

Most of the other Opcode functions call verify_opset automatically
and will croak if given an invalid opset.

=item define_optag (OPTAG, OPSET)

Define OPTAG as a symbolic name for OPSET. Optag names always start
with a colon C<:>.

The optag name used must not be defined already (define_optag will
croak if it is already defined). Optag names are global to the perl
process and optag definitions cannot be altered or deleted once
defined.

It is strongly recommended that applications using Opcode should use a
leading capital letter on their tag names since lowercase names are
reserved for use by the Opcode module. If using Opcode within a module
you should prefix your tags names with the name of your module to
ensure uniqueness and thus avoid clashes with other modules.

=item opmask_add (OPSET)

Adds the supplied opset to the current opmask. Note that there is
currently I<no> mechanism for unmasking ops once they have been masked.
This is intentional.

=item opmask

Returns an opset corresponding to the current opmask.

=item opdesc (OP, ...)

This takes a list of operator names and returns the corresponding list
of operator descriptions.

=item opdump (PAT)

Dumps to STDOUT a two column list of op names and op descriptions.
If an optional pattern is given then only lines which match the
(case insensitive) pattern will be output.

It's designed to be used as a handy command line utility:

	perl -MOpcode=opdump -e opdump
	perl -MOpcode=opdump -e 'opdump Eval'

=back

=head1 Manipulating Opsets

Opsets may be manipulated using the perl bit vector operators & (and), | (or),
^ (xor) and ~ (negate/invert).

However you should never rely on the numerical position of any opcode
within the opset. In other words both sides of a bit vector operator
should be opsets returned from Opcode functions.

Also, since the number of opcodes in your current version of perl might
not be an exact multiple of eight, there may be unused bits in the last
byte of an upset. This should not cause any problems (Opcode functions
ignore those extra bits) but it does mean that using the ~ operator
will typically not produce the same 'physical' opset 'string' as the
invert_opset function.


=head1 TO DO (maybe)

    $bool = opset_eq($opset1, $opset2)	true if opsets are logically
					equivalent
    $yes = opset_can($opset, @ops)	true if $opset has all @ops set

    @diff = opset_diff($opset1, $opset2) => ('foo', '!bar', ...)

=cut

# the =cut above is used by _init_optags() to get here quickly

=head1 Predefined Opcode Tags

=over 5

=item :base_core

    null stub scalar pushmark wantarray const defined undef

    rv2sv sassign

    rv2av aassign aelem aelemfast aelemfast_lex aslice kvaslice
    av2arylen

    rv2hv helem hslice kvhslice each values keys exists delete
    aeach akeys avalues multideref

    preinc i_preinc predec i_predec postinc i_postinc
    postdec i_postdec int hex oct abs pow multiply i_multiply
    divide i_divide modulo i_modulo add i_add subtract i_subtract

    left_shift right_shift bit_and bit_xor bit_or nbit_and
    nbit_xor nbit_or sbit_and sbit_xor sbit_or negate i_negate not
    complement ncomplement scomplement

    lt i_lt gt i_gt le i_le ge i_ge eq i_eq ne i_ne ncmp i_ncmp
    slt sgt sle sge seq sne scmp

    substr vec stringify study pos length index rindex ord chr

    ucfirst lcfirst uc lc fc quotemeta trans transr chop schop
    chomp schomp

    match split qr

    list lslice splice push pop shift unshift reverse

    cond_expr flip flop andassign orassign dorassign and or dor xor

    warn die lineseq nextstate scope enter leave

    rv2cv anoncode prototype coreargs anonconst

    entersub leavesub leavesublv return method method_named
    method_super method_redir method_redir_super
     -- XXX loops via recursion?

    leaveeval -- needed for Safe to operate, is safe
		 without entereval

=item :base_mem

These memory related ops are not included in :base_core because they
can easily be used to implement a resource attack (e.g., consume all
available memory).

    concat repeat join range

    anonlist anonhash

Note that despite the existence of this optag a memory resource attack
may still be possible using only :base_core ops.

Disabling these ops is a I<very> heavy handed way to attempt to prevent
a memory resource attack. It's probable that a specific memory limit
mechanism will be added to perl in the near future.

=item :base_loop

These loop ops are not included in :base_core because they can easily be
used to implement a resource attack (e.g., consume all available CPU time).

    grepstart grepwhile
    mapstart mapwhile
    enteriter iter
    enterloop leaveloop unstack
    last next redo
    goto

=item :base_io

These ops enable I<filehandle> (rather than filename) based input and
output. These are safe on the assumption that only pre-existing
filehandles are available for use.  Usually, to create new filehandles
other ops such as open would need to be enabled, if you don't take into
account the magical open of ARGV.

    readline rcatline getc read

    formline enterwrite leavewrite

    print say sysread syswrite send recv

    eof tell seek sysseek

    readdir telldir seekdir rewinddir

=item :base_orig

These are a hotchpotch of opcodes still waiting to be considered

    gvsv gv gelem

    padsv padav padhv padcv padany padrange introcv clonecv

    once

    rv2gv refgen srefgen ref refassign lvref lvrefslice lvavref

    bless -- could be used to change ownership of objects
	     (reblessing)

    pushre regcmaybe regcreset regcomp subst substcont

    sprintf prtf -- can core dump

    crypt

    tie untie

    dbmopen dbmclose
    sselect select
    pipe_op sockpair

    getppid getpgrp setpgrp getpriority setpriority
    localtime gmtime

    entertry leavetry -- can be used to 'hide' fatal errors

    entergiven leavegiven
    enterwhen leavewhen
    break continue
    smartmatch

    custom -- where should this go

=item :base_math

These ops are not included in :base_core because of the risk of them being
used to generate floating point exceptions (which would have to be caught
using a $SIG{FPE} handler).

    atan2 sin cos exp log sqrt

These ops are not included in :base_core because they have an effect
beyond the scope of the compartment.

    rand srand

=item :base_thread

These ops are related to multi-threading.

    lock

=item :default

A handy tag name for a I<reasonable> default set of ops.  (The current ops
allowed are unstable while development continues. It will change.)

    :base_core :base_mem :base_loop :base_orig :base_thread

This list used to contain :base_io prior to Opcode 1.07.

If safety matters to you (and why else would you be using the Opcode module?)
then you should not rely on the definition of this, or indeed any other, optag!

=item :filesys_read

    stat lstat readlink

    ftatime ftblk ftchr ftctime ftdir fteexec fteowned
    fteread ftewrite ftfile ftis ftlink ftmtime ftpipe
    ftrexec ftrowned ftrread ftsgid ftsize ftsock ftsuid
    fttty ftzero ftrwrite ftsvtx

    fttext ftbinary

    fileno

=item :sys_db

    ghbyname ghbyaddr ghostent shostent ehostent      -- hosts
    gnbyname gnbyaddr gnetent snetent enetent         -- networks
    gpbyname gpbynumber gprotoent sprotoent eprotoent -- protocols
    gsbyname gsbyport gservent sservent eservent      -- services

    gpwnam gpwuid gpwent spwent epwent getlogin       -- users
    ggrnam ggrgid ggrent sgrent egrent                -- groups

=item :browse

A handy tag name for a I<reasonable> default set of ops beyond the
:default optag.  Like :default (and indeed all the other optags) its
current definition is unstable while development continues. It will change.

The :browse tag represents the next step beyond :default. It it a
superset of the :default ops and adds :filesys_read the :sys_db.
The intent being that scripts can access more (possibly sensitive)
information about your system but not be able to change it.

    :default :filesys_read :sys_db

=item :filesys_open

    sysopen open close
    umask binmode

    open_dir closedir -- other dir ops are in :base_io

=item :filesys_write

    link unlink rename symlink truncate

    mkdir rmdir

    utime chmod chown

    fcntl -- not strictly filesys related, but possibly as
	     dangerous?

=item :subprocess

    backtick system

    fork

    wait waitpid

    glob -- access to Cshell via <`rm *`>

=item :ownprocess

    exec exit kill

    time tms -- could be used for timing attacks (paranoid?)

=item :others

This tag holds groups of assorted specialist opcodes that don't warrant
having optags defined for them.

SystemV Interprocess Communications:

    msgctl msgget msgrcv msgsnd

    semctl semget semop

    shmctl shmget shmread shmwrite

=item :load

This tag holds opcodes related to loading modules and getting information
about calling environment and args.

    require dofile 
    caller runcv

=item :still_to_be_decided

    chdir
    flock ioctl

    socket getpeername ssockopt
    bind connect listen accept shutdown gsockopt getsockname

    sleep alarm -- changes global timer state and signal handling
    sort -- assorted problems including core dumps
    tied -- can be used to access object implementing a tie
    pack unpack -- can be used to create/use memory pointers

    hintseval -- constant op holding eval hints

    entereval -- can be used to hide code from initial compile

    reset

    dbstate -- perl -d version of nextstate(ment) opcode

=item :dangerous

This tag is simply a bucket for opcodes that are unlikely to be used via
a tag name but need to be tagged for completeness and documentation.

    syscall dump chroot

=back

=head1 SEE ALSO

L<ops> -- perl pragma interface to Opcode module.

L<Safe> -- Opcode and namespace limited execution compartments

=head1 AUTHORS

Originally designed and implemented by Malcolm Beattie,
mbeattie@sable.ox.ac.uk as part of Safe version 1.

Split out from Safe module version 1, named opcode tags and other
changes added by Tim Bunce.

=cut

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            package POSIX;
use strict;
use warnings;

our ($AUTOLOAD, %SIGRT);

our $VERSION = '1.65';

require XSLoader;

use Fcntl qw(FD_CLOEXEC F_DUPFD F_GETFD F_GETFL F_GETLK F_RDLCK F_SETFD
	     F_SETFL F_SETLK F_SETLKW F_UNLCK F_WRLCK O_ACCMODE O_APPEND
	     O_CREAT O_EXCL O_NOCTTY O_NONBLOCK O_RDONLY O_RDWR O_TRUNC
	     O_WRONLY SEEK_CUR SEEK_END SEEK_SET
	     S_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISREG
	     S_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU S_ISGID S_ISUID
	     S_IWGRP S_IWOTH S_IWUSR S_IXGRP S_IXOTH S_IXUSR);

my $loaded;

sub import {
    my $pkg = shift;

    load_imports() unless $loaded++;

    # Grandfather old foo_h form to new :foo_h form
    s/^(?=\w+_h$)/:/ for my @list = @_;

    local $Exporter::ExportLevel = 1;
    Exporter::import($pkg,@list);
}

sub croak { require Carp;  goto &Carp::croak }
sub usage { croak "Usage: POSIX::$_[0]" }

XSLoader::load();

my %replacement = (
    atexit      => 'END {}',
    atof        => undef,
    atoi        => undef,
    atol        => undef,
    bsearch     => \'not supplied',
    calloc      => undef,
    clearerr    => 'IO::Handle::clearerr',
    div         => '/, % and int',
    execl       => undef,
    execle      => undef,
    execlp      => undef,
    execv       => undef,
    execve      => undef,
    execvp      => undef,
    fclose      => 'IO::Handle::close',
    fdopen      => 'IO::Handle::new_from_fd',
    feof        => 'IO::Handle::eof',
    ferror      => 'IO::Handle::error',
    fflush      => 'IO::Handle::flush',
    fgetc       => 'IO::Handle::getc',
    fgetpos     => 'IO::Seekable::getpos',
    fgets       => 'IO::Handle::gets',
    fileno      => 'IO::Handle::fileno',
    fopen       => 'IO::File::open',
    fprintf     => 'printf',
    fputc       => 'print',
    fputs       => 'print',
    fread       => 'read',
    free        => undef,
    freopen     => 'open',
    fscanf      => '<> and regular expressions',
    fseek       => 'IO::Seekable::seek',
    fsetpos     => 'IO::Seekable::setpos',
    fsync       => 'IO::Handle::sync',
    ftell       => 'IO::Seekable::tell',
    fwrite      => 'print',
    labs        => 'abs',
    ldiv        => '/, % and int',
    longjmp     => 'die',
    malloc      => undef,
    memchr      => 'index()',
    memcmp      => 'eq',
    memcpy      => '=',
    memmove     => '=',
    memset      => 'x',
    offsetof    => undef,
    putc        => 'print',
    putchar     => 'print',
    puts        => 'print',
    qsort       => 'sort',
    rand        => \'non-portable, use Perl\'s rand instead',
    realloc     => undef,
    scanf       => '<> and regular expressions',
    setbuf      => 'IO::Handle::setbuf',
    setjmp      => 'eval {}',
    setvbuf     => 'IO::Handle::setvbuf',
    siglongjmp  => 'die',
    sigsetjmp   => 'eval {}',
    srand       => \'not supplied; refer to Perl\'s srand documentation',
    sscanf      => 'regular expressions',
    strcat      => '.=',
    strchr      => 'index()',
    strcmp      => 'eq',
    strcpy      => '=',
    strcspn     => 'regular expressions',
    strlen      => 'length',
    strncat     => '.=',
    strncmp     => 'eq',
    strncpy     => '=',
    strpbrk     => undef,
    strrchr     => 'rindex()',
    strspn      => undef,
    strtok      => undef,
    tmpfile     => 'IO::File::new_tmpfile',
    ungetc      => 'IO::Handle::ungetc',
    vfprintf    => undef,
    vprintf     => undef,
    vsprintf    => undef,
);

my %reimpl = (
    assert    => 'expr => croak "Assertion failed" if !$_[0]',
    tolower   => 'string => lc($_[0])',
    toupper   => 'string => uc($_[0])',
    closedir  => 'dirhandle => CORE::closedir($_[0])',
    opendir   => 'directory => my $dh; CORE::opendir($dh, $_[0]) ? $dh : undef',
    readdir   => 'dirhandle => CORE::readdir($_[0])',
    rewinddir => 'dirhandle => CORE::rewinddir($_[0])',
    errno     => '$! + 0',
    creat     => 'filename, mode => &open($_[0], &O_WRONLY | &O_CREAT | &O_TRUNC, $_[1])',
    fcntl     => 'filehandle, cmd, arg => CORE::fcntl($_[0], $_[1], $_[2])',
    getgrgid  => 'gid => CORE::getgrgid($_[0])',
    getgrnam  => 'name => CORE::getgrnam($_[0])',
    atan2     => 'x, y => CORE::atan2($_[0], $_[1])',
    cos       => 'x => CORE::cos($_[0])',
    exp       => 'x => CORE::exp($_[0])',
    fabs      => 'x => CORE::abs($_[0])',
    log       => 'x => CORE::log($_[0])',
    pow       => 'x, exponent => $_[0] ** $_[1]',
    sin       => 'x => CORE::sin($_[0])',
    sqrt      => 'x => CORE::sqrt($_[0])',
    getpwnam  => 'name => CORE::getpwnam($_[0])',
    getpwuid  => 'uid => CORE::getpwuid($_[0])',
    kill      => 'pid, sig => CORE::kill $_[1], $_[0]',
    raise     => 'sig => CORE::kill $_[0], $$;	# Is this good enough',
    getc      => 'handle => CORE::getc($_[0])',
    getchar   => 'CORE::getc(STDIN)',
    gets      => 'scalar <STDIN>',
    remove    => 'filename => (-d $_[0]) ? CORE::rmdir($_[0]) : CORE::unlink($_[0])',
    rename    => 'oldfilename, newfilename => CORE::rename($_[0], $_[1])',
    rewind    => 'filehandle => CORE::seek($_[0],0,0)',
    abs       => 'x => CORE::abs($_[0])',
    exit      => 'status => CORE::exit($_[0])',
    getenv    => 'name => $ENV{$_[0]}',
    system    => 'command => CORE::system($_[0])',
    strerror  => 'errno => BEGIN { local $!; require locale; locale->import} my $e = $_[0] + 0; local $!; $! = $e; "$!"',
    strstr    => 'big, little => CORE::index($_[0], $_[1])',
    chmod     => 'mode, filename => CORE::chmod($_[0], $_[1])',
    fstat     => 'fd => CORE::open my $dup, "<&", $_[0]; CORE::stat($dup)', # Gross.
    mkdir     => 'directoryname, mode => CORE::mkdir($_[0], $_[1])',
    stat      => 'filename => CORE::stat($_[0])',
    umask     => 'mask => CORE::umask($_[0])',
    wait      => 'CORE::wait()',
    waitpid   => 'pid, options => CORE::waitpid($_[0], $_[1])',
    gmtime    => 'time => CORE::gmtime($_[0])',
    localtime => 'time => CORE::localtime($_[0])',
    time      => 'CORE::time',
    alarm     => 'seconds => CORE::alarm($_[0])',
    chdir     => 'directory => CORE::chdir($_[0])',
    chown     => 'uid, gid, filename => CORE::chown($_[0], $_[1], $_[2])',
    fork      => 'CORE::fork',
    getegid   => '$) + 0',
    geteuid   => '$> + 0',
    getgid    => '$( + 0',
    getgroups => 'my %seen; grep !$seen{$_}++, split " ", $)',
    getlogin  => 'CORE::getlogin()',
    getpgrp   => 'CORE::getpgrp',
    getpid    => '$$',
    getppid   => 'CORE::getppid',
    getuid    => '$<',
    isatty    => 'filehandle => -t $_[0]',
    link      => 'oldfilename, newfilename => CORE::link($_[0], $_[1])',
    rmdir     => 'directoryname => CORE::rmdir($_[0])',
    unlink    => 'filename => CORE::unlink($_[0])',
    utime     => 'filename, atime, mtime => CORE::utime($_[1], $_[2], $_[0])',
);

eval join ';', map "sub $_", keys %replacement, keys %reimpl;

sub AUTOLOAD {
    my ($func) = ($AUTOLOAD =~ /.*::(.*)/);

    die "POSIX.xs has failed to load\n" if $func eq 'constant';

    if (my $code = $reimpl{$func}) {
	my ($num, $arg) = (0, '');
	if ($code =~ s/^(.*?) *=> *//) {
	    $arg = $1;
	    $num = 1 + $arg =~ tr/,//;
	}
	# no warnings to be consistent with the old implementation, where each
	# function was in its own little AutoSplit world:
	eval qq{ sub $func {
		no warnings;
		usage "$func($arg)" if \@_ != $num;
		$code
	    } };
	no strict;
	goto &$AUTOLOAD;
    }
    if (exists $replacement{$func}) {
	my $how = $replacement{$func};
	croak "Unimplemented: POSIX::$func() is C-specific, stopped"
	    unless defined $how;
	croak "Unimplemented: POSIX::$func() is $$how" if ref $how;
	croak "Use method $how() instead of POSIX::$func()" if $how =~ /::/;
	croak "Unimplemented: POSIX::$func() is C-specific: use $how instead";
    }

    constant($func);
}

sub perror {
    print STDERR "@_: " if @_;
    print STDERR $!,"\n";
}

sub printf {
    usage "printf(pattern, args...)" if @_ < 1;
    CORE::printf STDOUT @_;
}

sub sprintf {
    usage "sprintf(pattern, args...)" if @_ == 0;
    CORE::sprintf(shift,@_);
}

sub load_imports {
my %default_export_tags = ( # cf. exports policy below

    assert_h =>	[qw(assert NDEBUG)],

    ctype_h =>	[qw(isalnum isalpha iscntrl isdigit isgraph islower
		isprint ispunct isspace isupper isxdigit tolower toupper)],

    dirent_h =>	[],

    errno_h =>	[qw(E2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN
		EALREADY EBADF EBADMSG EBUSY ECANCELED ECHILD ECONNABORTED
		ECONNREFUSED ECONNRESET EDEADLK EDESTADDRREQ EDOM EDQUOT EEXIST
		EFAULT EFBIG EHOSTDOWN EHOSTUNREACH EIDRM EILSEQ EINPROGRESS
		EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK EMSGSIZE
		ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS
		ENODATA ENODEV ENOENT ENOEXEC ENOLCK ENOLINK ENOMEM ENOMSG
		ENOPROTOOPT ENOSPC ENOSR ENOSTR ENOSYS ENOTBLK ENOTCONN ENOTDIR
		ENOTEMPTY ENOTRECOVERABLE ENOTSOCK ENOTSUP ENOTTY ENXIO
		EOPNOTSUPP EOTHER EOVERFLOW EOWNERDEAD EPERM EPFNOSUPPORT EPIPE
		EPROCLIM EPROTO EPROTONOSUPPORT EPROTOTYPE ERANGE EREMOTE
		ERESTART EROFS ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESTALE
		ETIME ETIMEDOUT ETOOMANYREFS ETXTBSY EUSERS EWOULDBLOCK EXDEV
		errno)],

    fcntl_h =>	[qw(FD_CLOEXEC F_DUPFD F_GETFD F_GETFL F_GETLK F_RDLCK
		F_SETFD F_SETFL F_SETLK F_SETLKW F_UNLCK F_WRLCK
		O_ACCMODE O_APPEND O_CREAT O_EXCL O_NOCTTY O_NONBLOCK
		O_RDONLY O_RDWR O_TRUNC O_WRONLY
		creat
		SEEK_CUR SEEK_END SEEK_SET
		S_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU
		S_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISGID S_ISREG S_ISUID
		S_IWGRP S_IWOTH S_IWUSR)],

    float_h =>	[qw(DBL_DIG DBL_EPSILON DBL_MANT_DIG
		DBL_MAX DBL_MAX_10_EXP DBL_MAX_EXP
		DBL_MIN DBL_MIN_10_EXP DBL_MIN_EXP
		FLT_DIG FLT_EPSILON FLT_MANT_DIG
		FLT_MAX FLT_MAX_10_EXP FLT_MAX_EXP
		FLT_MIN FLT_MIN_10_EXP FLT_MIN_EXP
		FLT_RADIX FLT_ROUNDS
		LDBL_DIG LDBL_EPSILON LDBL_MANT_DIG
		LDBL_MAX LDBL_MAX_10_EXP LDBL_MAX_EXP
		LDBL_MIN LDBL_MIN_10_EXP LDBL_MIN_EXP)],

    grp_h =>	[],

    limits_h =>	[qw( ARG_MAX CHAR_BIT CHAR_MAX CHAR_MIN CHILD_MAX
		INT_MAX INT_MIN LINK_MAX LONG_MAX LONG_MIN MAX_CANON
		MAX_INPUT MB_LEN_MAX NAME_MAX NGROUPS_MAX OPEN_MAX
		PATH_MAX PIPE_BUF SCHAR_MAX SCHAR_MIN SHRT_MAX SHRT_MIN
		SSIZE_MAX STREAM_MAX TZNAME_MAX UCHAR_MAX UINT_MAX
		ULONG_MAX USHRT_MAX _POSIX_ARG_MAX _POSIX_CHILD_MAX
		_POSIX_LINK_MAX _POSIX_MAX_CANON _POSIX_MAX_INPUT
		_POSIX_NAME_MAX _POSIX_NGROUPS_MAX _POSIX_OPEN_MAX
		_POSIX_PATH_MAX _POSIX_PIPE_BUF _POSIX_SSIZE_MAX
		_POSIX_STREAM_MAX _POSIX_TZNAME_MAX)],

    locale_h =>	[qw(LC_ALL LC_COLLATE LC_CTYPE LC_MESSAGES
		    LC_MONETARY LC_NUMERIC LC_TIME NULL
		    localeconv setlocale)],

    math_h =>   [qw(FP_ILOGB0 FP_ILOGBNAN FP_INFINITE FP_NAN FP_NORMAL
                    FP_SUBNORMAL FP_ZERO
                    M_1_PI M_2_PI M_2_SQRTPI M_E M_LN10 M_LN2 M_LOG10E M_LOG2E
                    M_PI M_PI_2 M_PI_4 M_SQRT1_2 M_SQRT2
                    HUGE_VAL INFINITY NAN
                    acos asin atan ceil cosh fabs floor fmod
		    frexp ldexp log10 modf pow sinh tan tanh)],

    pwd_h =>	[],

    setjmp_h =>	[qw(longjmp setjmp siglongjmp sigsetjmp)],

    signal_h =>	[qw(SA_NOCLDSTOP SA_NOCLDWAIT SA_NODEFER SA_ONSTACK
		SA_RESETHAND SA_RESTART SA_SIGINFO SIGABRT SIGALRM
		SIGCHLD SIGCONT SIGFPE SIGHUP SIGILL SIGINT SIGKILL
		SIGPIPE %SIGRT SIGRTMIN SIGRTMAX SIGQUIT SIGSEGV SIGSTOP
		SIGTERM SIGTSTP SIGTTIN SIGTTOU SIGUSR1 SIGUSR2 SIGBUS
		SIGPOLL SIGPROF SIGSYS SIGTRAP SIGURG SIGVTALRM SIGXCPU SIGXFSZ
		SIG_BLOCK SIG_DFL SIG_ERR SIG_IGN SIG_SETMASK SIG_UNBLOCK
		raise sigaction signal sigpending sigprocmask sigsuspend)],

    stdarg_h =>	[],

    stddef_h =>	[qw(NULL offsetof)],

    stdio_h =>	[qw(BUFSIZ EOF FILENAME_MAX L_ctermid L_cuserid
		L_tmpname NULL SEEK_CUR SEEK_END SEEK_SET
		STREAM_MAX TMP_MAX stderr stdin stdout
		clearerr fclose fdopen feof ferror fflush fgetc fgetpos
		fgets fopen fprintf fputc fputs fread freopen
		fscanf fseek fsetpos ftell fwrite getchar gets
		perror putc putchar puts remove rewind
		scanf setbuf setvbuf sscanf tmpfile tmpnam
		ungetc vfprintf vprintf vsprintf)],

    stdlib_h =>	[qw(EXIT_FAILURE EXIT_SUCCESS MB_CUR_MAX NULL RAND_MAX
		abort atexit atof atoi atol bsearch calloc div
		free getenv labs ldiv malloc mblen mbstowcs mbtowc
		qsort realloc strtod strtol strtoul wcstombs wctomb)],

    string_h =>	[qw(NULL memchr memcmp memcpy memmove memset strcat
		strchr strcmp strcoll strcpy strcspn strerror strlen
		strncat strncmp strncpy strpbrk strrchr strspn strstr
		strtok strxfrm)],

    sys_stat_h => [qw(S_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU
		S_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISGID S_ISREG
		S_ISUID S_IWGRP S_IWOTH S_IWUSR S_IXGRP S_IXOTH S_IXUSR
		fstat mkfifo)],

    sys_times_h => [],

    sys_types_h => [],

    sys_utsname_h => [qw(uname)],

    sys_wait_h => [qw(WEXITSTATUS WIFEXITED WIFSIGNALED WIFSTOPPED
		WNOHANG WSTOPSIG WTERMSIG WUNTRACED)],

    termios_h => [qw( B0 B110 B1200 B134 B150 B1800 B19200 B200 B2400
		B300 B38400 B4800 B50 B600 B75 B9600 BRKINT CLOCAL
		CREAD CS5 CS6 CS7 CS8 CSIZE CSTOPB ECHO ECHOE ECHOK
		ECHONL HUPCL ICANON ICRNL IEXTEN IGNBRK IGNCR IGNPAR
		INLCR INPCK ISIG ISTRIP IXOFF IXON NCCS NOFLSH OPOST
		PARENB PARMRK PARODD TCIFLUSH TCIOFF TCIOFLUSH TCION
		TCOFLUSH TCOOFF TCOON TCSADRAIN TCSAFLUSH TCSANOW
		TOSTOP VEOF VEOL VERASE VINTR VKILL VMIN VQUIT VSTART
		VSTOP VSUSP VTIME
		cfgetispeed cfgetospeed cfsetispeed cfsetospeed tcdrain
		tcflow tcflush tcgetattr tcsendbreak tcsetattr )],

    time_h =>	[qw(CLK_TCK CLOCKS_PER_SEC NULL asctime clock ctime
		difftime mktime strftime tzset tzname)],

    unistd_h =>	[qw(F_OK NULL R_OK SEEK_CUR SEEK_END SEEK_SET
		STDERR_FILENO STDIN_FILENO STDOUT_FILENO W_OK X_OK
		_PC_CHOWN_RESTRICTED _PC_LINK_MAX _PC_MAX_CANON
		_PC_MAX_INPUT _PC_NAME_MAX _PC_NO_TRUNC _PC_PATH_MAX
		_PC_PIPE_BUF _PC_VDISABLE _POSIX_CHOWN_RESTRICTED
		_POSIX_JOB_CONTROL _POSIX_NO_TRUNC _POSIX_SAVED_IDS
		_POSIX_VDISABLE _POSIX_VERSION _SC_ARG_MAX
		_SC_CHILD_MAX _SC_CLK_TCK _SC_JOB_CONTROL
		_SC_NGROUPS_MAX _SC_OPEN_MAX _SC_PAGESIZE _SC_SAVED_IDS
		_SC_STREAM_MAX _SC_TZNAME_MAX _SC_VERSION
		_exit access ctermid cuserid
		dup2 dup execl execle execlp execv execve execvp
		fpathconf fsync getcwd getegid geteuid getgid getgroups
		getpid getuid isatty lseek pathconf pause setgid setpgid
		setsid setuid sysconf tcgetpgrp tcsetpgrp ttyname)],

    utime_h =>	[],
);

if ($^O eq 'MSWin32') {
    $default_export_tags{winsock_h} = [qw(
	WSAEINTR WSAEBADF WSAEACCES WSAEFAULT WSAEINVAL WSAEMFILE WSAEWOULDBLOCK
	WSAEINPROGRESS WSAEALREADY WSAENOTSOCK WSAEDESTADDRREQ WSAEMSGSIZE
	WSAEPROTOTYPE WSAENOPROTOOPT WSAEPROTONOSUPPORT WSAESOCKTNOSUPPORT
	WSAEOPNOTSUPP WSAEPFNOSUPPORT WSAEAFNOSUPPORT WSAEADDRINUSE
	WSAEADDRNOTAVAIL WSAENETDOWN WSAENETUNREACH WSAENETRESET WSAECONNABORTED
	WSAECONNRESET WSAENOBUFS WSAEISCONN WSAENOTCONN WSAESHUTDOWN
	WSAETOOMANYREFS WSAETIMEDOUT WSAECONNREFUSED WSAELOOP WSAENAMETOOLONG
	WSAEHOSTDOWN WSAEHOSTUNREACH WSAENOTEMPTY WSAEPROCLIM WSAEUSERS
	WSAEDQUOT WSAESTALE WSAEREMOTE WSAEDISCON WSAENOMORE WSAECANCELLED
	WSAEINVALIDPROCTABLE WSAEINVALIDPROVIDER WSAEPROVIDERFAILEDINIT
	WSAEREFUSED)];
}

my %other_export_tags = ( # cf. exports policy below
    fenv_h => [qw(
        FE_DOWNWARD FE_TONEAREST FE_TOWARDZERO FE_UPWARD fegetround fesetround
    )],

    math_h_c99 => [ @{$default_export_tags{math_h}}, qw(
        Inf NaN acosh asinh atanh cbrt copysign erf erfc exp2 expm1 fdim fma
        fmax fmin fpclassify hypot ilogb isfinite isgreater isgreaterequal
        isinf isless islessequal islessgreater isnan isnormal isunordered j0 j1
        jn lgamma log1p log2 logb lrint nan nearbyint nextafter nexttoward
        remainder remquo rint round scalbn signbit tgamma trunc y0 y1 yn
    )],

    stdlib_h_c99 => [ @{$default_export_tags{stdlib_h}}, 'strtold' ],

    nan_payload => [ qw(getpayload setpayload setpayloadsig issignaling) ],

    signal_h_si_code => [qw(
        ILL_ILLOPC ILL_ILLOPN ILL_ILLADR ILL_ILLTRP ILL_PRVOPC ILL_PRVREG
        ILL_COPROC ILL_BADSTK
        FPE_INTDIV FPE_INTOVF FPE_FLTDIV FPE_FLTOVF FPE_FLTUND
        FPE_FLTRES FPE_FLTINV FPE_FLTSUB
        SEGV_MAPERR SEGV_ACCERR
        BUS_ADRALN BUS_ADRERR BUS_OBJERR
        TRAP_BRKPT TRAP_TRACE
        CLD_EXITED CLD_KILLED CLD_DUMPED CLD_TRAPPED CLD_STOPPED CLD_CONTINUED
        POLL_IN POLL_OUT POLL_MSG POLL_ERR POLL_PRI POLL_HUP
        SI_USER SI_QUEUE SI_TIMER SI_ASYNCIO SI_MESGQ
  )],
);

# exports policy:
# - new functions may not be added to @EXPORT, only to @EXPORT_OK
# - new SHOUTYCONSTANTS are OK to add to @EXPORT

{
  # De-duplicate the export list: 
  my ( %export, %export_ok );
  @export   {map {@$_} values %default_export_tags} = ();
  @export_ok{map {@$_} values   %other_export_tags} = ();
  # Doing the de-dup with a temporary hash has the advantage that the SVs in
  # @EXPORT are actually shared hash key scalars, which will save some memory.
  our @EXPORT = keys %export;

  # you do not want to add symbols to the following list. add a new tag instead
  our @EXPORT_OK = (qw(close lchown nice open pipe read sleep times write
		       printf sprintf lround),
                    # lround() should really be in the :math_h_c99 tag, but
                    # we're too far into the 5.24 code freeze for that to be
                    # done now. This can be revisited in the 5.25.x cycle.
		    grep {!exists $export{$_}} keys %reimpl, keys %replacement, keys %export_ok);

  our %EXPORT_TAGS = ( %default_export_tags, %other_export_tags );
}

require Exporter;
}

package POSIX::SigAction;

sub new { bless {HANDLER => $_[1], MASK => $_[2], FLAGS => $_[3] || 0, SAFE => 0}, $_[0] }
sub handler { $_[0]->{HANDLER} = $_[1] if @_ > 1; $_[0]->{HANDLER} };
sub mask    { $_[0]->{MASK}    = $_[1] if @_ > 1; $_[0]->{MASK} };
sub flags   { $_[0]->{FLAGS}   = $_[1] if @_ > 1; $_[0]->{FLAGS} };
sub safe    { $_[0]->{SAFE}    = $_[1] if @_ > 1; $_[0]->{SAFE} };

{
package POSIX::SigSet;
# This package is here entirely to make sure that POSIX::SigSet is seen by the
# PAUSE indexer, so that it will always be clearly indexed in core.  This is to
# prevent the accidental case where a third-party distribution can accidentally
# claim the POSIX::SigSet package, as occurred in 2011-12. -- rjbs, 2011-12-30
}

package POSIX::SigRt;

require Tie::Hash;

our @ISA = 'Tie::StdHash';

our ($_SIGRTMIN, $_SIGRTMAX, $_sigrtn);

our $SIGACTION_FLAGS = 0;

sub _init {
    $_SIGRTMIN = &POSIX::SIGRTMIN;
    $_SIGRTMAX = &POSIX::SIGRTMAX;
    $_sigrtn   = $_SIGRTMAX - $_SIGRTMIN;
}

sub _croak {
    &_init unless defined $_sigrtn;
    die "POSIX::SigRt not available" unless defined $_sigrtn && $_sigrtn > 0;
}

sub _getsig {
    &_croak;
    my $rtsig = $_[0];
    # Allow (SIGRT)?MIN( + n)?, a common idiom when doing these things in C.
    $rtsig = $_SIGRTMIN + ($1 || 0)
	if $rtsig =~ /^(?:(?:SIG)?RT)?MIN(\s*\+\s*(\d+))?$/;
    return $rtsig;
}

sub _exist {
    my $rtsig = _getsig($_[1]);
    my $ok    = $rtsig >= $_SIGRTMIN && $rtsig <= $_SIGRTMAX;
    ($rtsig, $ok);
}

sub _check {
    my ($rtsig, $ok) = &_exist;
    die "No POSIX::SigRt signal $_[1] (valid range SIGRTMIN..SIGRTMAX, or $_SIGRTMIN..$_SIGRTMAX)"
	unless $ok;
    return $rtsig;
}

sub new {
    my ($rtsig, $handler, $flags) = @_;
    my $sigset = POSIX::SigSet->new($rtsig);
    my $sigact = POSIX::SigAction->new($handler, $sigset, $flags);
    POSIX::sigaction($rtsig, $sigact);
}

sub EXISTS { &_exist }
sub FETCH  { my $rtsig = &_check;
	     my $oa = POSIX::SigAction->new();
	     POSIX::sigaction($rtsig, undef, $oa);
	     return $oa->{HANDLER} }
sub STORE  { my $rtsig = &_check; new($rtsig, $_[2], $SIGACTION_FLAGS) }
sub DELETE { delete $SIG{ &_check } }
sub CLEAR  { &_exist; delete @SIG{ &POSIX::SIGRTMIN .. &POSIX::SIGRTMAX } }
sub SCALAR { &_croak; $_sigrtn + 1 }

tie %POSIX::SIGRT, 'POSIX::SigRt';
# and the expression on the line above is true, so we return true.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         =head1 NAME

POSIX - Perl interface to IEEE Std 1003.1

=head1 SYNOPSIS

    use POSIX ();
    use POSIX qw(setsid);
    use POSIX qw(:errno_h :fcntl_h);

    printf "EINTR is %d\n", EINTR;

    $sess_id = POSIX::setsid();

    $fd = POSIX::open($path, O_CREAT|O_EXCL|O_WRONLY, 0644);
	# note: that's a filedescriptor, *NOT* a filehandle

=head1 DESCRIPTION

The POSIX module permits you to access all (or nearly all) the standard
POSIX 1003.1 identifiers.  Many of these identifiers have been given Perl-ish
interfaces.

This document gives a condensed list of the features available in the POSIX
module.  Consult your operating system's manpages for general information on
most features.  Consult L<perlfunc> for functions which are noted as being
identical to Perl's builtin functions.

The first section describes POSIX functions from the 1003.1 specification.
The second section describes some classes for signal objects, TTY objects,
and other miscellaneous objects.  The remaining sections list various
constants and macros in an organization which roughly follows IEEE Std
1003.1b-1993.

=head1 CAVEATS

I<Everything is exported by default> (with a handful of exceptions).
This is an unfortunate backwards compatibility feature and its use is
B<strongly L<discouraged|perlpolicy/discouraged>>.
You should either prevent the exporting (by saying S<C<use POSIX ();>>,
as usual) and then use fully qualified names (e.g. C<POSIX::SEEK_END>),
or give an explicit import list.
If you do neither and opt for the default (as in S<C<use POSIX;>>), you
will import I<hundreds and hundreds> of symbols into your namespace.

A few functions are not implemented because they are C specific.  If you
attempt to call these, they will print a message telling you that they
aren't implemented, and suggest using the Perl equivalent, should one
exist.  For example, trying to access the C<setjmp()> call will elicit the
message "C<setjmp() is C-specific: use eval {} instead>".

Furthermore, some evil vendors will claim 1003.1 compliance, but in fact
are not so: they will not pass the PCTS (POSIX Compliance Test Suites).
For example, one vendor may not define C<EDEADLK>, or the semantics of the
errno values set by C<open(2)> might not be quite right.  Perl does not
attempt to verify POSIX compliance.  That means you can currently
successfully say "use POSIX",  and then later in your program you find
that your vendor has been lax and there's no usable C<ICANON> macro after
all.  This could be construed to be a bug.

=head1 FUNCTIONS

=over 8

=item C<_exit>

This is identical to the C function C<_exit()>.  It exits the program
immediately which means among other things buffered I/O is B<not> flushed.

Note that when using threads and in Linux this is B<not> a good way to
exit a thread because in Linux processes and threads are kind of the
same thing (Note: while this is the situation in early 2003 there are
projects under way to have threads with more POSIXly semantics in Linux).
If you want not to return from a thread, detach the thread.

=item C<abort>

This is identical to the C function C<abort()>.  It terminates the
process with a C<SIGABRT> signal unless caught by a signal handler or
if the handler does not return normally (it e.g.  does a C<longjmp>).

=item C<abs>

This is identical to Perl's builtin C<abs()> function, returning
the absolute value of its numerical argument.

=item C<access>

Determines the accessibility of a file.

	if( POSIX::access( "/", &POSIX::R_OK ) ){
		print "have read permission\n";
	}

Returns C<undef> on failure.  Note: do not use C<access()> for
security purposes.  Between the C<access()> call and the operation
you are preparing for the permissions might change: a classic
I<race condition>.

=item C<acos>

This is identical to the C function C<acos()>, returning
the arcus cosine of its numerical argument.  See also L<Math::Trig>.

=item C<acosh>

This is identical to the C function C<acosh()>, returning the
hyperbolic arcus cosine of its numerical argument [C99].  See also
L<Math::Trig>.

=item C<alarm>

This is identical to Perl's builtin C<alarm()> function,
either for arming or disarming the C<SIGARLM> timer.

=item C<asctime>

This is identical to the C function C<asctime()>.  It returns
a string of the form

	"Fri Jun  2 18:22:13 2000\n\0"

and it is called thusly

	$asctime = asctime($sec, $min, $hour, $mday, $mon,
			   $year, $wday, $yday, $isdst);

The C<$mon> is zero-based: January equals C<0>.  The C<$year> is
1900-based: 2001 equals C<101>.  C<$wday> and C<$yday> default to zero
(and are usually ignored anyway), and C<$isdst> defaults to -1.

=item C<asin>

This is identical to the C function C<asin()>, returning
the arcus sine of its numerical argument.  See also L<Math::Trig>.

=item C<asinh>

This is identical to the C function C<asinh()>, returning the
hyperbolic arcus sine of its numerical argument [C99].  See also
L<Math::Trig>.

=item C<assert>

Unimplemented, but you can use L<perlfunc/die> and the L<Carp> module
to achieve similar things.

=item C<atan>

This is identical to the C function C<atan()>, returning the
arcus tangent of its numerical argument.  See also L<Math::Trig>.

=item C<atanh>

This is identical to the C function C<atanh()>, returning the
hyperbolic arcus tangent of its numerical argument [C99].  See also
L<Math::Trig>.

=item C<atan2>

This is identical to Perl's builtin C<atan2()> function, returning
the arcus tangent defined by its two numerical arguments, the I<y>
coordinate and the I<x> coordinate.  See also L<Math::Trig>.

=item C<atexit>

Not implemented.  C<atexit()> is C-specific: use C<END {}> instead, see L<perlmod>.

=item C<atof>

Not implemented.  C<atof()> is C-specific.  Perl converts strings to numbers transparently.
If you need to force a scalar to a number, add a zero to it.

=item C<atoi>

Not implemented.  C<atoi()> is C-specific.  Perl converts strings to numbers transparently.
If you need to force a scalar to a number, add a zero to it.
If you need to have just the integer part, see L<perlfunc/int>.

=item C<atol>

Not implemented.  C<atol()> is C-specific.  Perl converts strings to numbers transparently.
If you need to force a scalar to a number, add a zero to it.
If you need to have just the integer part, see L<perlfunc/int>.

=item C<bsearch>

C<bsearch()> not supplied.  For doing binary search on wordlists,
see L<Search::Dict>.

=item C<calloc>

Not implemented.  C<calloc()> is C-specific.  Perl does memory management transparently.

=item C<cbrt>

The cube root [C99].

=item C<ceil>

This is identical to the C function C<ceil()>, returning the smallest
integer value greater than or equal to the given numerical argument.

=item C<chdir>

This is identical to Perl's builtin C<chdir()> function, allowing
one to change the working (default) directory, see L<perlfunc/chdir>.

=item C<chmod>

This is identical to Perl's builtin C<chmod()> function, allowing
one to change file and directory permissions, see L<perlfunc/chmod>.

=item C<chown>

This is identical to Perl's builtin C<chown()> function, allowing one
to change file and directory owners and groups, see L<perlfunc/chown>.

=item C<clearerr>

Not implemented.  Use the method C<IO::Handle::clearerr()> instead, to reset the error
state (if any) and EOF state (if any) of the given stream.

=item C<clock>

This is identical to the C function C<clock()>, returning the
amount of spent processor time in microseconds.

=item C<close>

Close the file.  This uses file descriptors such as those obtained by calling
C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	POSIX::close( $fd );

Returns C<undef> on failure.

See also L<perlfunc/close>.

=item C<closedir>

This is identical to Perl's builtin C<closedir()> function for closing
a directory handle, see L<perlfunc/closedir>.

=item C<cos>

This is identical to Perl's builtin C<cos()> function, for returning
the cosine of its numerical argument, see L<perlfunc/cos>.
See also L<Math::Trig>.

=item C<cosh>

This is identical to the C function C<cosh()>, for returning
the hyperbolic cosine of its numeric argument.  See also L<Math::Trig>.

=item C<copysign>

Returns C<x> but with the sign of C<y> [C99].

 $x_with_sign_of_y = POSIX::copysign($x, $y);

See also L</signbit>.

=item C<creat>

Create a new file.  This returns a file descriptor like the ones returned by
C<POSIX::open>.  Use C<POSIX::close> to close the file.

	$fd = POSIX::creat( "foo", 0611 );
	POSIX::close( $fd );

See also L<perlfunc/sysopen> and its C<O_CREAT> flag.

=item C<ctermid>

Generates the path name for the controlling terminal.

	$path = POSIX::ctermid();

=item C<ctime>

This is identical to the C function C<ctime()> and equivalent
to C<asctime(localtime(...))>, see L</asctime> and L</localtime>.

=item C<cuserid>

Get the login name of the owner of the current process.

	$name = POSIX::cuserid();

=item C<difftime>

This is identical to the C function C<difftime()>, for returning
the time difference (in seconds) between two times (as returned
by C<time()>), see L</time>.

=item C<div>

Not implemented.  C<div()> is C-specific, use L<perlfunc/int> on the usual C</> division and
the modulus C<%>.

=item C<dup>

This is similar to the C function C<dup()>, for duplicating a file
descriptor.

This uses file descriptors such as those obtained by calling
C<POSIX::open>.

Returns C<undef> on failure.

=item C<dup2>

This is similar to the C function C<dup2()>, for duplicating a file
descriptor to an another known file descriptor.

This uses file descriptors such as those obtained by calling
C<POSIX::open>.

Returns C<undef> on failure.

=item C<erf>

The error function [C99].

=item C<erfc>

The complementary error function [C99].

=item C<errno>

Returns the value of errno.

	$errno = POSIX::errno();

This identical to the numerical values of the C<$!>, see L<perlvar/$ERRNO>.

=item C<execl>

Not implemented.  C<execl()> is C-specific, see L<perlfunc/exec>.

=item C<execle>

Not implemented.  C<execle()> is C-specific, see L<perlfunc/exec>.

=item C<execlp>

Not implemented.  C<execlp()> is C-specific, see L<perlfunc/exec>.

=item C<execv>

Not implemented.  C<execv()> is C-specific, see L<perlfunc/exec>.

=item C<execve>

Not implemented.  C<execve()> is C-specific, see L<perlfunc/exec>.

=item C<execvp>

Not implemented.  C<execvp()> is C-specific, see L<perlfunc/exec>.

=item C<exit>

This is identical to Perl's builtin C<exit()> function for exiting the
program, see L<perlfunc/exit>.

=item C<exp>

This is identical to Perl's builtin C<exp()> function for
returning the exponent (I<e>-based) of the numerical argument,
see L<perlfunc/exp>.

=item C<expm1>

Equivalent to C<exp(x) - 1>, but more precise for small argument values [C99].

See also L</log1p>.

=item C<fabs>

This is identical to Perl's builtin C<abs()> function for returning
the absolute value of the numerical argument, see L<perlfunc/abs>.

=item C<fclose>

Not implemented.  Use method C<IO::Handle::close()> instead, or see L<perlfunc/close>.

=item C<fcntl>

This is identical to Perl's builtin C<fcntl()> function,
see L<perlfunc/fcntl>.

=item C<fdopen>

Not implemented.  Use method C<IO::Handle::new_from_fd()> instead, or see L<perlfunc/open>.

=item C<feof>

Not implemented.  Use method C<IO::Handle::eof()> instead, or see L<perlfunc/eof>.

=item C<ferror>

Not implemented.  Use method C<IO::Handle::error()> instead.

=item C<fflush>

Not implemented.  Use method C<IO::Handle::flush()> instead.
See also C<L<perlvar/$OUTPUT_AUTOFLUSH>>.

=item C<fgetc>

Not implemented.  Use method C<IO::Handle::getc()> instead, or see L<perlfunc/read>.

=item C<fgetpos>

Not implemented.  Use method C<IO::Seekable::getpos()> instead, or see L<perlfunc/seek>.

=item C<fgets>

Not implemented.  Use method C<IO::Handle::gets()> instead.  Similar to E<lt>E<gt>, also known
as L<perlfunc/readline>.

=item C<fileno>

Not implemented.  Use method C<IO::Handle::fileno()> instead, or see L<perlfunc/fileno>.

=item C<floor>

This is identical to the C function C<floor()>, returning the largest
integer value less than or equal to the numerical argument.

=item C<fdim>

"Positive difference", S<C<x - y>> if S<C<x E<gt> y>>, zero otherwise [C99].

=item C<fegetround>

Returns the current floating point rounding mode, one of

  FE_TONEAREST FE_TOWARDZERO FE_UPWARD FE_UPWARD

C<FE_TONEAREST> is like L</round>, C<FE_TOWARDZERO> is like L</trunc> [C99].

=item C<fesetround>

Sets the floating point rounding mode, see L</fegetround> [C99].

=item C<fma>

"Fused multiply-add", S<C<x * y + z>>, possibly faster (and less lossy)
than the explicit two operations [C99].

 my $fused = POSIX::fma($x, $y, $z);

=item C<fmax>

Maximum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].

 my $min = POSIX::fmax($x, $y);

=item C<fmin>

Minimum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].

 my $min = POSIX::fmin($x, $y);

=item C<fmod>

This is identical to the C function C<fmod()>.

	$r = fmod($x, $y);

It returns the remainder S<C<$r = $x - $n*$y>>, where S<C<$n = trunc($x/$y)>>.
The C<$r> has the same sign as C<$x> and magnitude (absolute value)
less than the magnitude of C<$y>.

=item C<fopen>

Not implemented.  Use method C<IO::File::open()> instead, or see L<perlfunc/open>.

=item C<fork>

This is identical to Perl's builtin C<fork()> function
for duplicating the current process, see L<perlfunc/fork>
and L<perlfork> if you are in Windows.

=item C<fpathconf>

Retrieves the value of a configurable limit on a file or directory.  This
uses file descriptors such as those obtained by calling C<POSIX::open>.

The following will determine the maximum length of the longest allowable
pathname on the filesystem which holds F</var/foo>.

	$fd = POSIX::open( "/var/foo", &POSIX::O_RDONLY );
	$path_max = POSIX::fpathconf($fd, &POSIX::_PC_PATH_MAX);

Returns C<undef> on failure.

=item C<fpclassify>

Returns one of

  FP_NORMAL FP_ZERO FP_SUBNORMAL FP_INFINITE FP_NAN

telling the class of the argument [C99].  C<FP_INFINITE> is positive
or negative infinity, C<FP_NAN> is not-a-number.  C<FP_SUBNORMAL>
means subnormal numbers (also known as denormals), very small numbers
with low precision. C<FP_ZERO> is zero.  C<FP_NORMAL> is all the rest.

=item C<fprintf>

Not implemented.  C<fprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<fputc>

Not implemented.  C<fputc()> is C-specific, see L<perlfunc/print> instead.

=item C<fputs>

Not implemented.  C<fputs()> is C-specific, see L<perlfunc/print> instead.

=item C<fread>

Not implemented.  C<fread()> is C-specific, see L<perlfunc/read> instead.

=item C<free>

Not implemented.  C<free()> is C-specific.  Perl does memory management transparently.

=item C<freopen>

Not implemented.  C<freopen()> is C-specific, see L<perlfunc/open> instead.

=item C<frexp>

Return the mantissa and exponent of a floating-point number.

	($mantissa, $exponent) = POSIX::frexp( 1.234e56 );

=item C<fscanf>

Not implemented.  C<fscanf()> is C-specific, use E<lt>E<gt> and regular expressions instead.

=item C<fseek>

Not implemented.  Use method C<IO::Seekable::seek()> instead, or see L<perlfunc/seek>.

=item C<fsetpos>

Not implemented.  Use method C<IO::Seekable::setpos()> instead, or seek L<perlfunc/seek>.

=item C<fstat>

Get file status.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.  The data returned is identical to the data from
Perl's builtin C<stat> function.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	@stats = POSIX::fstat( $fd );

=item C<fsync>

Not implemented.  Use method C<IO::Handle::sync()> instead.

=item C<ftell>

Not implemented.  Use method C<IO::Seekable::tell()> instead, or see L<perlfunc/tell>.

=item C<fwrite>

Not implemented.  C<fwrite()> is C-specific, see L<perlfunc/print> instead.

=item C<getc>

This is identical to Perl's builtin C<getc()> function,
see L<perlfunc/getc>.

=item C<getchar>

Returns one character from STDIN.  Identical to Perl's C<getc()>,
see L<perlfunc/getc>.

=item C<getcwd>

Returns the name of the current working directory.
See also L<Cwd>.

=item C<getegid>

Returns the effective group identifier.  Similar to Perl' s builtin
variable C<$(>, see L<perlvar/$EGID>.

=item C<getenv>

Returns the value of the specified environment variable.
The same information is available through the C<%ENV> array.

=item C<geteuid>

Returns the effective user identifier.  Identical to Perl's builtin C<$E<gt>>
variable, see L<perlvar/$EUID>.

=item C<getgid>

Returns the user's real group identifier.  Similar to Perl's builtin
variable C<$)>, see L<perlvar/$GID>.

=item C<getgrgid>

This is identical to Perl's builtin C<getgrgid()> function for
returning group entries by group identifiers, see
L<perlfunc/getgrgid>.

=item C<getgrnam>

This is identical to Perl's builtin C<getgrnam()> function for
returning group entries by group names, see L<perlfunc/getgrnam>.

=item C<getgroups>

Returns the ids of the user's supplementary groups.  Similar to Perl's
builtin variable C<$)>, see L<perlvar/$GID>.

=item C<getlogin>

This is identical to Perl's builtin C<getlogin()> function for
returning the user name associated with the current session, see
L<perlfunc/getlogin>.

=item C<getpayload>

	use POSIX ':nan_payload';
	getpayload($var)

Returns the C<NaN> payload.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

=item C<getpgrp>

This is identical to Perl's builtin C<getpgrp()> function for
returning the process group identifier of the current process, see
L<perlfunc/getpgrp>.

=item C<getpid>

Returns the process identifier.  Identical to Perl's builtin
variable C<$$>, see L<perlvar/$PID>.

=item C<getppid>

This is identical to Perl's builtin C<getppid()> function for
returning the process identifier of the parent process of the current
process , see L<perlfunc/getppid>.

=item C<getpwnam>

This is identical to Perl's builtin C<getpwnam()> function for
returning user entries by user names, see L<perlfunc/getpwnam>.

=item C<getpwuid>

This is identical to Perl's builtin C<getpwuid()> function for
returning user entries by user identifiers, see L<perlfunc/getpwuid>.

=item C<gets>

Returns one line from C<STDIN>, similar to E<lt>E<gt>, also known
as the C<readline()> function, see L<perlfunc/readline>.

B<NOTE>: if you have C programs that still use C<gets()>, be very
afraid.  The C<gets()> function is a source of endless grief because
it has no buffer overrun checks.  It should B<never> be used.  The
C<fgets()> function should be preferred instead.

=item C<getuid>

Returns the user's identifier.  Identical to Perl's builtin C<$E<lt>> variable,
see L<perlvar/$UID>.

=item C<gmtime>

This is identical to Perl's builtin C<gmtime()> function for
converting seconds since the epoch to a date in Greenwich Mean Time,
see L<perlfunc/gmtime>.

=item C<hypot>

Equivalent to C<S<sqrt(x * x + y * y)>> except more stable on very large
or very small arguments [C99].

=item C<ilogb>

Integer binary logarithm [C99]

For example C<ilogb(20)> is 4, as an integer.

See also L</logb>.

=item C<Inf>

The infinity as a constant:

   use POSIX qw(Inf);
   my $pos_inf = +Inf;  # Or just Inf.
   my $neg_inf = -Inf;

See also L</isinf>, and L</fpclassify>.

=item C<isalnum>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alnum:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isalpha>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alpha:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isatty>

Returns a boolean indicating whether the specified filehandle is connected
to a tty.  Similar to the C<-t> operator, see L<perlfunc/-X>.

=item C<iscntrl>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:cntrl:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isdigit>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:digit:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isfinite>

Returns true if the argument is a finite number (that is, not an
infinity, or the not-a-number) [C99].

See also L</isinf>, L</isnan>, and L</fpclassify>.

=item C<isgraph>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:graph:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isgreater>

(Also C<isgreaterequal>, C<isless>, C<islessequal>, C<islessgreater>,
C<isunordered>)

Floating point comparisons which handle the C<NaN> [C99].

=item C<isinf>

Returns true if the argument is an infinity (positive or negative) [C99].

See also L</Inf>, L</isnan>, L</isfinite>, and L</fpclassify>.

=item C<islower>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:lower:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isnan>

Returns true if the argument is C<NaN> (not-a-number) [C99].

Note that you cannot test for "C<NaN>-ness" with

   $x == $x

since the C<NaN> is not equivalent to anything, B<including itself>.

See also L</nan>, L</NaN>, L</isinf>, and L</fpclassify>.

=item C<isnormal>

Returns true if the argument is normal (that is, not a subnormal/denormal,
and not an infinity, or a not-a-number) [C99].

See also L</isfinite>, and L</fpclassify>.

=item C<isprint>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:print:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<ispunct>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:punct:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<issignaling>

	use POSIX ':nan_payload';
	issignaling($var, $payload)

Return true if the argument is a I<signaling> NaN.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

=item C<isspace>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:space:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isupper>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:upper:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isxdigit>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:xdigit:]]+ $ /x>>, which you should
convert to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<j0>

=item C<j1>

=item C<jn>

=item C<y0>

=item C<y1>

=item C<yn>

The Bessel function of the first kind of the order zero.

=item C<kill>

This is identical to Perl's builtin C<kill()> function for sending
signals to processes (often to terminate them), see L<perlfunc/kill>.

=item C<labs>

Not implemented.  (For returning absolute values of long integers.)
C<labs()> is C-specific, see L<perlfunc/abs> instead.

=item C<lchown>

This is identical to the C function, except the order of arguments is
consistent with Perl's builtin C<chown()> with the added restriction
of only one path, not a list of paths.  Does the same thing as the
C<chown()> function but changes the owner of a symbolic link instead
of the file the symbolic link points to.

 POSIX::lchown($uid, $gid, $file_path);

=item C<ldexp>

This is identical to the C function C<ldexp()>
for multiplying floating point numbers with powers of two.

	$x_quadrupled = POSIX::ldexp($x, 2);

=item C<ldiv>

Not implemented.  (For computing dividends of long integers.)
C<ldiv()> is C-specific, use C</> and C<int()> instead.

=item C<lgamma>

The logarithm of the Gamma function [C99].

See also L</tgamma>.

=item C<log1p>

Equivalent to S<C<log(1 + x)>>, but more stable results for small argument
values [C99].

=item C<log2>

Logarithm base two [C99].

See also L</expm1>.

=item C<logb>

Integer binary logarithm [C99].

For example C<logb(20)> is 4, as a floating point number.

See also L</ilogb>.

=item C<link>

This is identical to Perl's builtin C<link()> function
for creating hard links into files, see L<perlfunc/link>.

=item C<localeconv>

Get numeric formatting information.  Returns a reference to a hash
containing the current underlying locale's formatting values.  Users of this function
should also read L<perllocale>, which provides a comprehensive
discussion of Perl locale handling, including
L<a section devoted to this function|perllocale/The localeconv function>.

Here is how to query the database for the B<de> (Deutsch or German) locale.

	my $loc = POSIX::setlocale( &POSIX::LC_ALL, "de" );
	print "Locale: \"$loc\"\n";
	my $lconv = POSIX::localeconv();
	foreach my $property (qw(
		decimal_point
		thousands_sep
		grouping
		int_curr_symbol
		currency_symbol
		mon_decimal_point
		mon_thousands_sep
		mon_grouping
		positive_sign
		negative_sign
		int_frac_digits
		frac_digits
		p_cs_precedes
		p_sep_by_space
		n_cs_precedes
		n_sep_by_space
		p_sign_posn
		n_sign_posn
		int_p_cs_precedes
		int_p_sep_by_space
		int_n_cs_precedes
		int_n_sep_by_space
		int_p_sign_posn
		int_n_sign_posn
	))
	{
		printf qq(%s: "%s",\n),
			$property, $lconv->{$property};
	}

The members whose names begin with C<int_p_> and C<int_n_> were added by
POSIX.1-2008 and are only available on systems that support them.

=item C<localtime>

This is identical to Perl's builtin C<localtime()> function for
converting seconds since the epoch to a date see L<perlfunc/localtime>.

=item C<log>

This is identical to Perl's builtin C<log()> function,
returning the natural (I<e>-based) logarithm of the numerical argument,
see L<perlfunc/log>.

=item C<log10>

This is identical to the C function C<log10()>,
returning the 10-base logarithm of the numerical argument.
You can also use

    sub log10 { log($_[0]) / log(10) }

or

    sub log10 { log($_[0]) / 2.30258509299405 }

or

    sub log10 { log($_[0]) * 0.434294481903252 }

=item C<longjmp>

Not implemented.  C<longjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<lseek>

Move the file's read/write position.  This uses file descriptors such as
those obtained by calling C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	$off_t = POSIX::lseek( $fd, 0, &POSIX::SEEK_SET );

Returns C<undef> on failure.

=item C<lrint>

Depending on the current floating point rounding mode, rounds the
argument either toward nearest (like L</round>), toward zero (like
L</trunc>), downward (toward negative infinity), or upward (toward
positive infinity) [C99].

For the rounding mode, see L</fegetround>.

=item C<lround>

Like L</round>, but as integer, as opposed to floating point [C99].

See also L</ceil>, L</floor>, L</trunc>.

Owing to an oversight, this is not currently exported by default, or as part of
the C<:math_h_c99> export tag; importing it must therefore be done by explicit
name. This will be changed in Perl 5.26.

=item C<malloc>

Not implemented.  C<malloc()> is C-specific.  Perl does memory management transparently.

=item C<mblen>

This is identical to the C function C<mblen()>.

Core Perl does not have any support for the wide and multibyte
characters of the C standards, except under UTF-8 locales, so this might
be a rather useless function.

However, Perl supports Unicode, see L<perluniintro>.

=item C<mbstowcs>

This is identical to the C function C<mbstowcs()>.

See L</mblen>.

=item C<mbtowc>

This is identical to the C function C<mbtowc()>.

See L</mblen>.

=item C<memchr>

Not implemented.  C<memchr()> is C-specific, see L<perlfunc/index> instead.

=item C<memcmp>

Not implemented.  C<memcmp()> is C-specific, use C<eq> instead, see L<perlop>.

=item C<memcpy>

Not implemented.  C<memcpy()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.

=item C<memmove>

Not implemented.  C<memmove()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.

=item C<memset>

Not implemented.  C<memset()> is C-specific, use C<x> instead, see L<perlop>.

=item C<mkdir>

This is identical to Perl's builtin C<mkdir()> function
for creating directories, see L<perlfunc/mkdir>.

=item C<mkfifo>

This is similar to the C function C<mkfifo()> for creating
FIFO special files.

	if (mkfifo($path, $mode)) { ....

Returns C<undef> on failure.  The C<$mode> is similar to the
mode of C<mkdir()>, see L<perlfunc/mkdir>, though for C<mkfifo>
you B<must> specify the C<$mode>.

=item C<mktime>

Convert date/time info to a calendar time.

Synopsis:

	mktime(sec, min, hour, mday, mon, year, wday = 0,
	       yday = 0, isdst = -1)

The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900; I<i.e.>, the year 1995 is 95; the
year 2001 is 101.  Consult your system's C<mktime()> manpage for details
about these and the other arguments.

Calendar time for December 12, 1995, at 10:30 am.

	$time_t = POSIX::mktime( 0, 30, 10, 12, 11, 95 );
	print "Date = ", POSIX::ctime($time_t);

Returns C<undef> on failure.

=item C<modf>

Return the integral and fractional parts of a floating-point number.

	($fractional, $integral) = POSIX::modf( 3.14 );

See also L</round>.

=item C<NaN>

The not-a-number as a constant:

   use POSIX qw(NaN);
   my $nan = NaN;

See also L</nan>, C</isnan>, and L</fpclassify>.

=item C<nan>

   my $nan = nan();

Returns C<NaN>, not-a-number [C99].

The returned NaN is always a I<quiet> NaN, as opposed to I<signaling>.

With an argument, can be used to generate a NaN with I<payload>.
The argument is first interpreted as a floating point number,
but then any fractional parts are truncated (towards zero),
and the value is interpreted as an unsigned integer.
The bits of this integer are stored in the unused bits of the NaN.

The result has a dual nature: it is a NaN, but it also carries
the integer inside it.  The integer can be retrieved with L</getpayload>.
Note, though, that the payload is not propagated, not even on copies,
and definitely not in arithmetic operations.

How many bits fit in the NaN depends on what kind of floating points
are being used, but on the most common platforms (64-bit IEEE 754,
or the x86 80-bit long doubles) there are 51 and 61 bits available,
respectively.  (There would be 52 and 62, but the quiet/signaling
bit of NaNs takes away one.)  However, because of the floating-point-to-
integer-and-back conversions, please test carefully whether you get back
what you put in.  If your integers are only 32 bits wide, you probably
should not rely on more than 32 bits of payload.

Whether a "signaling" NaN is in any way different from a "quiet" NaN,
depends on the platform.  Also note that the payload of the default
NaN (no argument to nan()) is not necessarily zero, use C<setpayload>
to explicitly set the payload.  On some platforms like the 32-bit x86,
(unless using the 80-bit long doubles) the signaling bit is not supported
at all.

See also L</isnan>, L</NaN>, L</setpayload> and L</issignaling>.

=item C<nearbyint>

Returns the nearest integer to the argument, according to the current
rounding mode (see L</fegetround>) [C99].

=item C<nextafter>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].

 my $nextafter = POSIX::nextafter($x, $y);

Like L</nexttoward>, but potentially less accurate.

=item C<nexttoward>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].

 my $nexttoward = POSIX::nexttoward($x, $y);

Like L</nextafter>, but potentially more accurate.

=item C<nice>

This is similar to the C function C<nice()>, for changing
the scheduling preference of the current process.  Positive
arguments mean a more polite process, negative values a more
needy process.  Normal (non-root) user processes can only change towards
being more polite.

Returns C<undef> on failure.

=item C<offsetof>

Not implemented.  C<offsetof()> is C-specific, you probably want to see L<perlfunc/pack> instead.

=item C<open>

Open a file for reading for writing.  This returns file descriptors, not
Perl filehandles.  Use C<POSIX::close> to close the file.

Open a file read-only with mode 0666.

	$fd = POSIX::open( "foo" );

Open a file for read and write.

	$fd = POSIX::open( "foo", &POSIX::O_RDWR );

Open a file for write, with truncation.

	$fd = POSIX::open(
		"foo", &POSIX::O_WRONLY | &POSIX::O_TRUNC
	);

Create a new file with mode 0640.  Set up the file for writing.

	$fd = POSIX::open(
		"foo", &POSIX::O_CREAT | &POSIX::O_WRONLY, 0640
	);

Returns C<undef> on failure.

See also L<perlfunc/sysopen>.

=item C<opendir>

Open a directory for reading.

	$dir = POSIX::opendir( "/var" );
	@files = POSIX::readdir( $dir );
	POSIX::closedir( $dir );

Returns C<undef> on failure.

=item C<pathconf>

Retrieves the value of a configurable limit on a file or directory.

The following will determine the maximum length of the longest allowable
pathname on the filesystem which holds C</var>.

	$path_max = POSIX::pathconf( "/var",
				      &POSIX::_PC_PATH_MAX );

Returns C<undef> on failure.

=item C<pause>

This is similar to the C function C<pause()>, which suspends
the execution of the current process until a signal is received.

Returns C<undef> on failure.

=item C<perror>

This is identical to the C function C<perror()>, which outputs to the
standard error stream the specified message followed by C<": "> and the
current error string.  Use the C<warn()> function and the C<$!>
variable instead, see L<perlfunc/warn> and L<perlvar/$ERRNO>.

=item C<pipe>

Create an interprocess channel.  This returns file descriptors like those
returned by C<POSIX::open>.

	my ($read, $write) = POSIX::pipe();
	POSIX::write( $write, "hello", 5 );
	POSIX::read( $read, $buf, 5 );

See also L<perlfunc/pipe>.

=item C<pow>

Computes C<$x> raised to the power C<$exponent>.

	$ret = POSIX::pow( $x, $exponent );

You can also use the C<**> operator, see L<perlop>.

=item C<printf>

Formats and prints the specified arguments to C<STDOUT>.
See also L<perlfunc/printf>.

=item C<putc>

Not implemented.  C<putc()> is C-specific, see L<perlfunc/print> instead.

=item C<putchar>

Not implemented.  C<putchar()> is C-specific, see L<perlfunc/print> instead.

=item C<puts>

Not implemented.  C<puts()> is C-specific, see L<perlfunc/print> instead.

=item C<qsort>

Not implemented.  C<qsort()> is C-specific, see L<perlfunc/sort> instead.

=item C<raise>

Sends the specified signal to the current process.
See also L<perlfunc/kill> and the C<$$> in L<perlvar/$PID>.

=item C<rand>

Not implemented.  C<rand()> is non-portable, see L<perlfunc/rand> instead.

=item C<read>

Read from a file.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.  If the buffer C<$buf> is not large enough for the
read then Perl will extend it to make room for the request.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	$bytes = POSIX::read( $fd, $buf, 3 );

Returns C<undef> on failure.

See also L<perlfunc/sysread>.

=item C<readdir>

This is identical to Perl's builtin C<readdir()> function
for reading directory entries, see L<perlfunc/readdir>.

=item C<realloc>

Not implemented.  C<realloc()> is C-specific.  Perl does memory management transparently.

=item C<remainder>

Given C<x> and C<y>, returns the value S<C<x - n*y>>, where C<n> is the integer
closest to C<x>/C<y>. [C99]

 my $remainder = POSIX::remainder($x, $y)

See also L</remquo>.

=item C<remove>

This is identical to Perl's builtin C<unlink()> function
for removing files, see L<perlfunc/unlink>.

=item C<remquo>

Like L</remainder> but also returns the low-order bits of the quotient (n)
[C99]

(This is quite esoteric interface, mainly used to implement numerical
algorithms.)

=item C<rename>

This is identical to Perl's builtin C<rename()> function
for renaming files, see L<perlfunc/rename>.

=item C<rewind>

Seeks to the beginning of the file.

=item C<rewinddir>

This is identical to Perl's builtin C<rewinddir()> function for
rewinding directory entry streams, see L<perlfunc/rewinddir>.

=item C<rint>

Identical to L</lrint>.

=item C<rmdir>

This is identical to Perl's builtin C<rmdir()> function
for removing (empty) directories, see L<perlfunc/rmdir>.

=item C<round>

Returns the integer (but still as floating point) nearest to the
argument [C99].

See also L</ceil>, L</floor>, L</lround>, L</modf>, and L</trunc>.

=item C<scalbn>

Returns S<C<x * 2**y>> [C99].

See also L</frexp> and L</ldexp>.

=item C<scanf>

Not implemented.  C<scanf()> is C-specific, use E<lt>E<gt> and regular expressions instead,
see L<perlre>.

=item C<setgid>

Sets the real group identifier and the effective group identifier for
this process.  Similar to assigning a value to the Perl's builtin
C<$)> variable, see L<perlvar/$EGID>, except that the latter
will change only the real user identifier, and that the setgid()
uses only a single numeric argument, as opposed to a space-separated
list of numbers.

=item C<setjmp>

Not implemented.  C<setjmp()> is C-specific: use C<eval {}> instead,
see L<perlfunc/eval>.

=item C<setlocale>

WARNING!  Do NOT use this function in a L<thread|threads>.  The locale
will change in all other threads at the same time, and should your
thread get paused by the operating system, and another started, that
thread will not have the locale it is expecting.  On some platforms,
there can be a race leading to segfaults if two threads call this
function nearly simultaneously.

Modifies and queries the program's underlying locale.  Users of this
function should read L<perllocale>, whch provides a comprehensive
discussion of Perl locale handling, knowledge of which is necessary to
properly use this function.  It contains
L<a section devoted to this function|perllocale/The setlocale function>.
The discussion here is merely a summary reference for C<setlocale()>.
Note that Perl itself is almost entirely unaffected by the locale
except within the scope of S<C<"use locale">>.  (Exceptions are listed
in L<perllocale/Not within the scope of "use locale">.)

The following examples assume

	use POSIX qw(setlocale LC_ALL LC_CTYPE);

has been issued.

The following will set the traditional UNIX system locale behavior
(the second argument C<"C">).

	$loc = setlocale( LC_ALL, "C" );

The following will query the current C<LC_CTYPE> category.  (No second
argument means 'query'.)

	$loc = setlocale( LC_CTYPE );

The following will set the C<LC_CTYPE> behaviour according to the locale
environment variables (the second argument C<"">).
Please see your system's C<setlocale(3)> documentation for the locale
environment variables' meaning or consult L<perllocale>.

	$loc = setlocale( LC_CTYPE, "" );

The following will set the C<LC_COLLATE> behaviour to Argentinian
Spanish. B<NOTE>: The naming and availability of locales depends on
your operating system. Please consult L<perllocale> for how to find
out which locales are available in your system.

	$loc = setlocale( LC_COLLATE, "es_AR.ISO8859-1" );

=item C<setpayload>

	use POSIX ':nan_payload';
	setpayload($var, $payload);

Sets the C<NaN> payload of var.

NOTE: the NaN payload APIs are based on the latest (as of June 2015)
proposed ISO C interfaces, but they are not yet a standard.  Things
may change.

See L</nan> for more discussion about C<NaN>.

See also L</setpayloadsig>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpayloadsig>

	use POSIX ':nan_payload';
	setpayloadsig($var, $payload);

Like L</setpayload> but also makes the NaN I<signaling>.

Depending on the platform the NaN may or may not behave differently.

Note the API instability warning in L</setpayload>.

Note that because how the floating point formats work out, on the most
common platforms signaling payload of zero is best avoided,
since it might end up being identical to C<+Inf>.

See also L</nan>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpgid>

This is similar to the C function C<setpgid()> for
setting the process group identifier of the current process.

Returns C<undef> on failure.

=item C<setsid>

This is identical to the C function C<setsid()> for
setting the session identifier of the current process.

=item C<setuid>

Sets the real user identifier and the effective user identifier for
this process.  Similar to assigning a value to the Perl's builtin
C<$E<lt>> variable, see L<perlvar/$UID>, except that the latter
will change only the real user identifier.

=item C<sigaction>

Detailed signal management.  This uses C<POSIX::SigAction> objects for
the C<action> and C<oldaction> arguments (the oldaction can also be
just a hash reference).  Consult your system's C<sigaction> manpage
for details, see also C<POSIX::SigRt>.

Synopsis:

	sigaction(signal, action, oldaction = 0)

Returns C<undef> on failure.  The C<signal> must be a number (like
C<SIGHUP>), not a string (like C<"SIGHUP">), though Perl does try hard
to understand you.

If you use the C<SA_SIGINFO> flag, the signal handler will in addition to
the first argument, the signal name, also receive a second argument, a
hash reference, inside which are the following keys with the following
semantics, as defined by POSIX/SUSv3:

    signo       the signal number
    errno       the error number
    code        if this is zero or less, the signal was sent by
                a user process and the uid and pid make sense,
                otherwise the signal was sent by the kernel

The constants for specific C<code> values can be imported individually
or using the C<:signal_h_si_code> tag.

The following are also defined by POSIX/SUSv3, but unfortunately
not very widely implemented:

    pid         the process id generating the signal
    uid         the uid of the process id generating the signal
    status      exit value or signal for SIGCHLD
    band        band event for SIGPOLL
    addr        address of faulting instruction or memory
                reference for SIGILL, SIGFPE, SIGSEGV or SIGBUS

A third argument is also passed to the handler, which contains a copy
of the raw binary contents of the C<siginfo> structure: if a system has
some non-POSIX fields, this third argument is where to C<unpack()> them
from.

Note that not all C<siginfo> values make sense simultaneously (some are
valid only for certain signals, for example), and not all values make
sense from Perl perspective, you should to consult your system's
C<sigaction> and possibly also C<siginfo> documentation.

=item C<siglongjmp>

Not implemented.  C<siglongjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<signbit>

Returns zero for positive arguments, non-zero for negative arguments [C99].

=item C<sigpending>

Examine signals that are blocked and pending.  This uses C<POSIX::SigSet>
objects for the C<sigset> argument.  Consult your system's C<sigpending>
manpage for details.

Synopsis:

	sigpending(sigset)

Returns C<undef> on failure.

=item C<sigprocmask>

Change and/or examine calling process's signal mask.  This uses
C<POSIX::SigSet> objects for the C<sigset> and C<oldsigset> arguments.
Consult your system's C<sigprocmask> manpage for details.

Synopsis:

	sigprocmask(how, sigset, oldsigset = 0)

Returns C<undef> on failure.

Note that you can't reliably block or unblock a signal from its own signal
handler if you're using safe signals. Other signals can be blocked or unblocked
reliably.

=item C<sigsetjmp>

Not implemented.  C<sigsetjmp()> is C-specific: use C<eval {}> instead,
see L<perlfunc/eval>.

=item C<sigsuspend>

Install a signal mask and suspend process until signal arrives.  This uses
C<POSIX::SigSet> objects for the C<signal_mask> argument.  Consult your
system's C<sigsuspend> manpage for details.

Synopsis:

	sigsuspend(signal_mask)

Returns C<undef> on failure.

=item C<sin>

This is identical to Perl's builtin C<sin()> function
for returning the sine of the numerical argument,
see L<perlfunc/sin>.  See also L<Math::Trig>.

=item C<sinh>

This is identical to the C function C<sinh()>
for returning the hyperbolic sine of the numerical argument.
See also L<Math::Trig>.

=item C<sleep>

This is functionally identical to Perl's builtin C<sleep()> function
for suspending the execution of the current for process for certain
number of seconds, see L<perlfunc/sleep>.  There is one significant
difference, however: C<POSIX::sleep()> returns the number of
B<unslept> seconds, while the C<CORE::sleep()> returns the
number of slept seconds.

=item C<sprintf>

This is similar to Perl's builtin C<sprintf()> function
for returning a string that has the arguments formatted as requested,
see L<perlfunc/sprintf>.

=item C<sqrt>

This is identical to Perl's builtin C<sqrt()> function.
for returning the square root of the numerical argument,
see L<perlfunc/sqrt>.

=item C<srand>

Give a seed the pseudorandom number generator, see L<perlfunc/srand>.

=item C<sscanf>

Not implemented.  C<sscanf()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<stat>

This is identical to Perl's builtin C<stat()> function
for returning information about files and directories.

=item C<strcat>

Not implemented.  C<strcat()> is C-specific, use C<.=> instead, see L<perlop>.

=item C<strchr>

Not implemented.  C<strchr()> is C-specific, see L<perlfunc/index> instead.

=item C<strcmp>

Not implemented.  C<strcmp()> is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.

=item C<strcoll>

This is identical to the C function C<strcoll()>
for collating (comparing) strings transformed using
the C<strxfrm()> function.  Not really needed since
Perl can do this transparently, see L<perllocale>.

=item C<strcpy>

Not implemented.  C<strcpy()> is C-specific, use C<=> instead, see L<perlop>.

=item C<strcspn>

Not implemented.  C<strcspn()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strerror>

Returns the error string for the specified errno.
Identical to the string form of C<$!>, see L<perlvar/$ERRNO>.

=item C<strftime>

Convert date and time information to string.  Returns the string.

Synopsis:

	strftime(fmt, sec, min, hour, mday, mon, year,
		 wday = -1, yday = -1, isdst = -1)

The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900, I<i.e.>, the year 1995 is 95; the
year 2001 is 101.  Consult your system's C<strftime()> manpage for details
about these and the other arguments.

If you want your code to be portable, your format (C<fmt>) argument
should use only the conversion specifiers defined by the ANSI C
standard (C89, to play safe).  These are C<aAbBcdHIjmMpSUwWxXyYZ%>.
But even then, the B<results> of some of the conversion specifiers are
non-portable.  For example, the specifiers C<aAbBcpZ> change according
to the locale settings of the user, and both how to set locales (the
locale names) and what output to expect are non-standard.
The specifier C<c> changes according to the timezone settings of the
user and the timezone computation rules of the operating system.
The C<Z> specifier is notoriously unportable since the names of
timezones are non-standard. Sticking to the numeric specifiers is the
safest route.

The given arguments are made consistent as though by calling
C<mktime()> before calling your system's C<strftime()> function,
except that the C<isdst> value is not affected.

The string for Tuesday, December 12, 1995.

	$str = POSIX::strftime( "%A, %B %d, %Y",
				 0, 0, 0, 12, 11, 95, 2 );
	print "$str\n";

=item C<strlen>

Not implemented.  C<strlen()> is C-specific, use C<length()> instead, see L<perlfunc/length>.

=item C<strncat>

Not implemented.  C<strncat()> is C-specific, use C<.=> instead, see L<perlop>.

=item C<strncmp>

Not implemented.  C<strncmp()> is C-specific, use C<eq> instead, see L<perlop>.

=item C<strncpy>

Not implemented.  C<strncpy()> is C-specific, use C<=> instead, see L<perlop>.

=item C<strpbrk>

Not implemented.  C<strpbrk()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strrchr>

Not implemented.  C<strrchr()> is C-specific, see L<perlfunc/rindex> instead.

=item C<strspn>

Not implemented.  C<strspn()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strstr>

This is identical to Perl's builtin C<index()> function,
see L<perlfunc/index>.

=item C<strtod>

String to double translation. Returns the parsed number and the number
of characters in the unparsed portion of the string.  Truly
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtod>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

C<strtod> respects any POSIX C<setlocale()> C<LC_TIME> settings,
regardless of whether or not it is called from Perl code that is within
the scope of S<C<use locale>>.

To parse a string C<$str> as a floating point number use

    $! = 0;
    ($num, $n_unparsed) = POSIX::strtod($str);

The second returned item and C<$!> can be used to check for valid input:

    if (($str eq '') || ($n_unparsed != 0) || $!) {
        die "Non-numeric input $str" . ($! ? ": $!\n" : "\n");
    }

When called in a scalar context C<strtod> returns the parsed number.

=item C<strtok>

Not implemented.  C<strtok()> is C-specific, use regular expressions instead, see
L<perlre>, or L<perlfunc/split>.

=item C<strtol>

String to (long) integer translation.  Returns the parsed number and
the number of characters in the unparsed portion of the string.  Truly
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtol>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

C<strtol> should respect any POSIX I<setlocale()> settings.

To parse a string C<$str> as a number in some base C<$base> use

    $! = 0;
    ($num, $n_unparsed) = POSIX::strtol($str, $base);

The base should be zero or between 2 and 36, inclusive.  When the base
is zero or omitted C<strtol> will use the string itself to determine the
base: a leading "0x" or "0X" means hexadecimal; a leading "0" means
octal; any other leading characters mean decimal.  Thus, "1234" is
parsed as a decimal number, "01234" as an octal number, and "0x1234"
as a hexadecimal number.

The second returned item and C<$!> can be used to check for valid input:

    if (($str eq '') || ($n_unparsed != 0) || !$!) {
        die "Non-numeric input $str" . $! ? ": $!\n" : "\n";
    }

When called in a scalar context C<strtol> returns the parsed number.

=item C<strtold>

Like L</strtod> but for long doubles.  Defined only if the
system supports long doubles.

=item C<strtoul>

String to unsigned (long) integer translation.  C<strtoul()> is identical
to C<strtol()> except that C<strtoul()> only parses unsigned integers.  See
L</strtol> for details.

Note: Some vendors supply C<strtod()> and C<strtol()> but not C<strtoul()>.
Other vendors that do supply C<strtoul()> parse "-1" as a valid value.

=item C<strxfrm>

String transformation.  Returns the transformed string.

	$dst = POSIX::strxfrm( $src );

Used in conjunction with the C<strcoll()> function, see L</strcoll>.

Not really needed since Perl can do this transparently, see
L<perllocale>.

=item C<sysconf>

Retrieves values of system configurable variables.

The following will get the machine's clock speed.

	$clock_ticks = POSIX::sysconf( &POSIX::_SC_CLK_TCK );

Returns C<undef> on failure.

=item C<system>

This is identical to Perl's builtin C<system()> function, see
L<perlfunc/system>.

=item C<tan>

This is identical to the C function C<tan()>, returning the
tangent of the numerical argument.  See also L<Math::Trig>.

=item C<tanh>

This is identical to the C function C<tanh()>, returning the
hyperbolic tangent of the numerical argument.   See also L<Math::Trig>.

=item C<tcdrain>

This is similar to the C function C<tcdrain()> for draining
the output queue of its argument stream.

Returns C<undef> on failure.

=item C<tcflow>

This is similar to the C function C<tcflow()> for controlling
the flow of its argument stream.

Returns C<undef> on failure.

=item C<tcflush>

This is similar to the C function C<tcflush()> for flushing
the I/O buffers of its argument stream.

Returns C<undef> on failure.

=item C<tcgetpgrp>

This is identical to the C function C<tcgetpgrp()> for returning the
process group identifier of the foreground process group of the controlling
terminal.

=item C<tcsendbreak>

This is similar to the C function C<tcsendbreak()> for sending
a break on its argument stream.

Returns C<undef> on failure.

=item C<tcsetpgrp>

This is similar to the C function C<tcsetpgrp()> for setting the
process group identifier of the foreground process group of the controlling
terminal.

Returns C<undef> on failure.

=item C<tgamma>

The Gamma function [C99].

See also L</lgamma>.

=item C<time>

This is identical to Perl's builtin C<time()> function
for returning the number of seconds since the epoch
(whatever it is for the system), see L<perlfunc/time>.

=item C<times>

The C<times()> function returns elapsed realtime since some point in the past
(such as system startup), user and system times for this process, and user
and system times used by child processes.  All times are returned in clock
ticks.

    ($realtime, $user, $system, $cuser, $csystem)
	= POSIX::times();

Note: Perl's builtin C<times()> function returns four values, measured in
seconds.

=item C<tmpfile>

Not implemented.  Use method C<IO::File::new_tmpfile()> instead, or see L<File::Temp>.

=item C<tmpnam>

Returns a name for a temporary file.

	$tmpfile = POSIX::tmpnam();

For security reasons, which are probably detailed in your system's
documentation for the C library C<tmpnam()> function, this interface
should not be used; instead see L<File::Temp>.

=item C<tolower>

This is identical to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<lc()> function, see L<perlfunc/lc>,
see L<perlfunc/lc>, or the equivalent C<\L> operator inside doublequotish
strings.

=item C<toupper>

This is similar to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<uc()> function, see L<perlfunc/uc>,
or the equivalent C<\U> operator inside doublequotish strings.

=item C<trunc>

Returns the integer toward zero from the argument [C99].

See also L</ceil>, L</floor>, and L</round>.

=item C<ttyname>

This is identical to the C function C<ttyname()> for returning the
name of the current terminal.

=item C<tzname>

Retrieves the time conversion information from the C<tzname> variable.

	POSIX::tzset();
	($std, $dst) = POSIX::tzname();

=item C<tzset>

This is identical to the C function C<tzset()> for setting
the current timezone based on the environment variable C<TZ>,
to be used by C<ctime()>, C<localtime()>, C<mktime()>, and C<strftime()>
functions.

=item C<umask>

This is identical to Perl's builtin C<umask()> function
for setting (and querying) the file creation permission mask,
see L<perlfunc/umask>.

=item C<uname>

Get name of current operating system.

	($sysname, $nodename, $release, $version, $machine)
		= POSIX::uname();

Note that the actual meanings of the various fields are not
that well standardized, do not expect any great portability.
The C<$sysname> might be the name of the operating system,
the C<$nodename> might be the name of the host, the C<$release>
might be the (major) release number of the operating system,
the C<$version> might be the (minor) release number of the
operating system, and the C<$machine> might be a hardware identifier.
Maybe.

=item C<ungetc>

Not implemented.  Use method C<IO::Handle::ungetc()> instead.

=item C<unlink>

This is identical to Perl's builtin C<unlink()> function
for removing files, see L<perlfunc/unlink>.

=item C<utime>

This is identical to Perl's builtin C<utime()> function
for changing the time stamps of files and directories,
see L<perlfunc/utime>.

=item C<vfprintf>

Not implemented.  C<vfprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<vprintf>

Not implemented.  C<vprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<vsprintf>

Not implemented.  C<vsprintf()> is C-specific, see L<perlfunc/sprintf> instead.

=item C<wait>

This is identical to Perl's builtin C<wait()> function,
see L<perlfunc/wait>.

=item C<waitpid>

Wait for a child process to change state.  This is identical to Perl's
builtin C<waitpid()> function, see L<perlfunc/waitpid>.

	$pid = POSIX::waitpid( -1, POSIX::WNOHANG );
	print "status = ", ($? / 256), "\n";

=item C<wcstombs>

This is identical to the C function C<wcstombs()>.

See L</mblen>.

=item C<wctomb>

This is identical to the C function C<wctomb()>.

See L</mblen>.

=item C<write>

Write to a file.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_WRONLY );
	$buf = "hello";
	$bytes = POSIX::write( $fd, $buf, 5 );

Returns C<undef> on failure.

See also L<perlfunc/syswrite>.

=back

=head1 CLASSES

=head2 C<POSIX::SigAction>

=over 8

=item C<new>

Creates a new C<POSIX::SigAction> object which corresponds to the C
C<struct sigaction>.  This object will be destroyed automatically when
it is no longer needed.  The first parameter is the handler, a sub
reference.  The second parameter is a C<POSIX::SigSet> object, it
defaults to the empty set.  The third parameter contains the
C<sa_flags>, it defaults to 0.

	$sigset = POSIX::SigSet->new(SIGINT, SIGQUIT);
	$sigaction = POSIX::SigAction->new(
			\&handler, $sigset, &POSIX::SA_NOCLDSTOP
		     );

This C<POSIX::SigAction> object is intended for use with the C<POSIX::sigaction()>
function.

=back

=over 8

=item C<handler>

=item C<mask>

=item C<flags>

accessor functions to get/set the values of a SigAction object.

	$sigset = $sigaction->mask;
	$sigaction->flags(&POSIX::SA_RESTART);

=item C<safe>

accessor function for the "safe signals" flag of a SigAction object; see
L<perlipc> for general information on safe (a.k.a. "deferred") signals.  If
you wish to handle a signal safely, use this accessor to set the "safe" flag
in the C<POSIX::SigAction> object:

	$sigaction->safe(1);

You may also examine the "safe" flag on the output action object which is
filled in when given as the third parameter to C<POSIX::sigaction()>:

	sigaction(SIGINT, $new_action, $old_action);
	if ($old_action->safe) {
	    # previous SIGINT handler used safe signals
	}

=back

=head2 C<POSIX::SigRt>

=over 8

=item C<%SIGRT>

A hash of the POSIX realtime signal handlers.  It is an extension of
the standard C<%SIG>, the C<$POSIX::SIGRT{SIGRTMIN}> is roughly equivalent
to C<$SIG{SIGRTMIN}>, but the right POSIX moves (see below) are made with
the C<POSIX::SigSet> and C<POSIX::sigaction> instead of accessing the C<%SIG>.

You can set the C<%POSIX::SIGRT> elements to set the POSIX realtime
signal handlers, use C<delete> and C<exists> on the elements, and use
C<scalar> on the C<%POSIX::SIGRT> to find out how many POSIX realtime
signals there are available S<C<(SIGRTMAX - SIGRTMIN + 1>>, the C<SIGRTMAX> is
a valid POSIX realtime signal).

Setting the C<%SIGRT> elements is equivalent to calling this:

  sub new {
    my ($rtsig, $handler, $flags) = @_;
    my $sigset = POSIX::SigSet($rtsig);
    my $sigact = POSIX::SigAction->new($handler,$sigset,$flags);
    sigaction($rtsig, $sigact);
  }

The flags default to zero, if you want something different you can
either use C<local> on C<$POSIX::SigRt::SIGACTION_FLAGS>, or you can
derive from POSIX::SigRt and define your own C<new()> (the tied hash
STORE method of the C<%SIGRT> calls C<new($rtsig, $handler, $SIGACTION_FLAGS)>,
where the C<$rtsig> ranges from zero to S<C<SIGRTMAX - SIGRTMIN + 1)>>.

Just as with any signal, you can use C<sigaction($rtsig, undef, $oa)> to
retrieve the installed signal handler (or, rather, the signal action).

B<NOTE:> whether POSIX realtime signals really work in your system, or
whether Perl has been compiled so that it works with them, is outside
of this discussion.

=item C<SIGRTMIN>

Return the minimum POSIX realtime signal number available, or C<undef>
if no POSIX realtime signals are available.

=item C<SIGRTMAX>

Return the maximum POSIX realtime signal number available, or C<undef>
if no POSIX realtime signals are available.

=back

=head2 C<POSIX::SigSet>

=over 8

=item C<new>

Create a new SigSet object.  This object will be destroyed automatically
when it is no longer needed.  Arguments may be supplied to initialize the
set.

Create an empty set.

	$sigset = POSIX::SigSet->new;

Create a set with C<SIGUSR1>.

	$sigset = POSIX::SigSet->new( &POSIX::SIGUSR1 );

=item C<addset>

Add a signal to a SigSet object.

	$sigset->addset( &POSIX::SIGUSR2 );

Returns C<undef> on failure.

=item C<delset>

Remove a signal from the SigSet object.

	$sigset->delset( &POSIX::SIGUSR2 );

Returns C<undef> on failure.

=item C<emptyset>

Initialize the SigSet object to be empty.

	$sigset->emptyset();

Returns C<undef> on failure.

=item C<fillset>

Initialize the SigSet object to include all signals.

	$sigset->fillset();

Returns C<undef> on failure.

=item C<ismember>

Tests the SigSet object to see if it contains a specific signal.

	if( $sigset->ismember( &POSIX::SIGUSR1 ) ){
		print "contains SIGUSR1\n";
	}

=back

=head2 C<POSIX::Termios>

=over 8

=item C<new>

Create a new Termios object.  This object will be destroyed automatically
when it is no longer needed.  A Termios object corresponds to the C<termios>
C struct.  C<new()> mallocs a new one, C<getattr()> fills it from a file descriptor,
and C<setattr()> sets a file descriptor's parameters to match Termios' contents.

	$termios = POSIX::Termios->new;

=item C<getattr>

Get terminal control attributes.

Obtain the attributes for C<stdin>.

	$termios->getattr( 0 ) # Recommended for clarity.
	$termios->getattr()

Obtain the attributes for stdout.

	$termios->getattr( 1 )

Returns C<undef> on failure.

=item C<getcc>

Retrieve a value from the C<c_cc> field of a C<termios> object.  The C<c_cc> field is
an array so an index must be specified.

	$c_cc[1] = $termios->getcc(1);

=item C<getcflag>

Retrieve the C<c_cflag> field of a C<termios> object.

	$c_cflag = $termios->getcflag;

=item C<getiflag>

Retrieve the C<c_iflag> field of a C<termios> object.

	$c_iflag = $termios->getiflag;

=item C<getispeed>

Retrieve the input baud rate.

	$ispeed = $termios->getispeed;

=item C<getlflag>

Retrieve the C<c_lflag> field of a C<termios> object.

	$c_lflag = $termios->getlflag;

=item C<getoflag>

Retrieve the C<c_oflag> field of a C<termios> object.

	$c_oflag = $termios->getoflag;

=item C<getospeed>

Retrieve the output baud rate.

	$ospeed = $termios->getospeed;

=item C<setattr>

Set terminal control attributes.

Set attributes immediately for stdout.

	$termios->setattr( 1, &POSIX::TCSANOW );

Returns C<undef> on failure.

=item C<setcc>

Set a value in the C<c_cc> field of a C<termios> object.  The C<c_cc> field is an
array so an index must be specified.

	$termios->setcc( &POSIX::VEOF, 1 );

=item C<setcflag>

Set the C<c_cflag> field of a C<termios> object.

	$termios->setcflag( $c_cflag | &POSIX::CLOCAL );

=item C<setiflag>

Set the C<c_iflag> field of a C<termios> object.

	$termios->setiflag( $c_iflag | &POSIX::BRKINT );

=item C<setispeed>

Set the input baud rate.

	$termios->setispeed( &POSIX::B9600 );

Returns C<undef> on failure.

=item C<setlflag>

Set the C<c_lflag> field of a C<termios> object.

	$termios->setlflag( $c_lflag | &POSIX::ECHO );

=item C<setoflag>

Set the C<c_oflag> field of a C<termios> object.

	$termios->setoflag( $c_oflag | &POSIX::OPOST );

=item C<setospeed>

Set the output baud rate.

	$termios->setospeed( &POSIX::B9600 );

Returns C<undef> on failure.

=item Baud rate values

C<B38400> C<B75> C<B200> C<B134> C<B300> C<B1800> C<B150> C<B0> C<B19200> C<B1200> C<B9600> C<B600> C<B4800> C<B50> C<B2400> C<B110>

=item Terminal interface values

C<TCSADRAIN> C<TCSANOW> C<TCOON> C<TCIOFLUSH> C<TCOFLUSH> C<TCION> C<TCIFLUSH> C<TCSAFLUSH> C<TCIOFF> C<TCOOFF>

=item C<c_cc> field values

C<VEOF> C<VEOL> C<VERASE> C<VINTR> C<VKILL> C<VQUIT> C<VSUSP> C<VSTART> C<VSTOP> C<VMIN> C<VTIME> C<NCCS>

=item C<c_cflag> field values

C<CLOCAL> C<CREAD> C<CSIZE> C<CS5> C<CS6> C<CS7> C<CS8> C<CSTOPB> C<HUPCL> C<PARENB> C<PARODD>

=item C<c_iflag> field values

C<BRKINT> C<ICRNL> C<IGNBRK> C<IGNCR> C<IGNPAR> C<INLCR> C<INPCK> C<ISTRIP> C<IXOFF> C<IXON> C<PARMRK>

=item C<c_lflag> field values

C<ECHO> C<ECHOE> C<ECHOK> C<ECHONL> C<ICANON> C<IEXTEN> C<ISIG> C<NOFLSH> C<TOSTOP>

=item C<c_oflag> field values

C<OPOST>

=back

=head1 PATHNAME CONSTANTS

=over 8

=item Constants

C<_PC_CHOWN_RESTRICTED> C<_PC_LINK_MAX> C<_PC_MAX_CANON> C<_PC_MAX_INPUT> C<_PC_NAME_MAX>
C<_PC_NO_TRUNC> C<_PC_PATH_MAX> C<_PC_PIPE_BUF> C<_PC_VDISABLE>

=back

=head1 POSIX CONSTANTS

=over 8

=item Constants

C<_POSIX_ARG_MAX> C<_POSIX_CHILD_MAX> C<_POSIX_CHOWN_RESTRICTED> C<_POSIX_JOB_CONTROL>
C<_POSIX_LINK_MAX> C<_POSIX_MAX_CANON> C<_POSIX_MAX_INPUT> C<_POSIX_NAME_MAX>
C<_POSIX_NGROUPS_MAX> C<_POSIX_NO_TRUNC> C<_POSIX_OPEN_MAX> C<_POSIX_PATH_MAX>
C<_POSIX_PIPE_BUF> C<_POSIX_SAVED_IDS> C<_POSIX_SSIZE_MAX> C<_POSIX_STREAM_MAX>
C<_POSIX_TZNAME_MAX> C<_POSIX_VDISABLE> C<_POSIX_VERSION>

=back

=head1 SYSTEM CONFIGURATION

=over 8

=item Constants

C<_SC_ARG_MAX> C<_SC_CHILD_MAX> C<_SC_CLK_TCK> C<_SC_JOB_CONTROL> C<_SC_NGROUPS_MAX>
C<_SC_OPEN_MAX> C<_SC_PAGESIZE> C<_SC_SAVED_IDS> C<_SC_STREAM_MAX> C<_SC_TZNAME_MAX>
C<_SC_VERSION>

=back

=head1 ERRNO

=over 8

=item Constants

C<E2BIG> C<EACCES> C<EADDRINUSE> C<EADDRNOTAVAIL> C<EAFNOSUPPORT> C<EAGAIN> C<EALREADY> C<EBADF> C<EBADMSG>
C<EBUSY> C<ECANCELED> C<ECHILD> C<ECONNABORTED> C<ECONNREFUSED> C<ECONNRESET> C<EDEADLK> C<EDESTADDRREQ>
C<EDOM> C<EDQUOT> C<EEXIST> C<EFAULT> C<EFBIG> C<EHOSTDOWN> C<EHOSTUNREACH> C<EIDRM> C<EILSEQ> C<EINPROGRESS>
C<EINTR> C<EINVAL> C<EIO> C<EISCONN> C<EISDIR> C<ELOOP> C<EMFILE> C<EMLINK> C<EMSGSIZE> C<ENAMETOOLONG>
C<ENETDOWN> C<ENETRESET> C<ENETUNREACH> C<ENFILE> C<ENOBUFS> C<ENODATA> C<ENODEV> C<ENOENT> C<ENOEXEC>
C<ENOLCK> C<ENOLINK> C<ENOMEM> C<ENOMSG> C<ENOPROTOOPT> C<ENOSPC> C<ENOSR> C<ENOSTR> C<ENOSYS> C<ENOTBLK>
C<ENOTCONN> C<ENOTDIR> C<ENOTEMPTY> C<ENOTRECOVERABLE> C<ENOTSOCK> C<ENOTSUP> C<ENOTTY> C<ENXIO>
C<EOPNOTSUPP> C<EOTHER> C<EOVERFLOW> C<EOWNERDEAD> C<EPERM> C<EPFNOSUPPORT> C<EPIPE> C<EPROCLIM> C<EPROTO>
C<EPROTONOSUPPORT> C<EPROTOTYPE> C<ERANGE> C<EREMOTE> C<ERESTART> C<EROFS> C<ESHUTDOWN>
C<ESOCKTNOSUPPORT> C<ESPIPE> C<ESRCH> C<ESTALE> C<ETIME> C<ETIMEDOUT> C<ETOOMANYREFS> C<ETXTBSY> C<EUSERS>
C<EWOULDBLOCK> C<EXDEV>

=back

=head1 FCNTL

=over 8

=item Constants

C<FD_CLOEXEC> C<F_DUPFD> C<F_GETFD> C<F_GETFL> C<F_GETLK> C<F_OK> C<F_RDLCK> C<F_SETFD> C<F_SETFL> C<F_SETLK>
C<F_SETLKW> C<F_UNLCK> C<F_WRLCK> C<O_ACCMODE> C<O_APPEND> C<O_CREAT> C<O_EXCL> C<O_NOCTTY> C<O_NONBLOCK>
C<O_RDONLY> C<O_RDWR> C<O_TRUNC> C<O_WRONLY>

=back

=head1 FLOAT

=over 8

=item Constants

C<DBL_DIG> C<DBL_EPSILON> C<DBL_MANT_DIG> C<DBL_MAX> C<DBL_MAX_10_EXP> C<DBL_MAX_EXP> C<DBL_MIN>
C<DBL_MIN_10_EXP> C<DBL_MIN_EXP> C<FLT_DIG> C<FLT_EPSILON> C<FLT_MANT_DIG> C<FLT_MAX>
C<FLT_MAX_10_EXP> C<FLT_MAX_EXP> C<FLT_MIN> C<FLT_MIN_10_EXP> C<FLT_MIN_EXP> C<FLT_RADIX>
C<FLT_ROUNDS> C<LDBL_DIG> C<LDBL_EPSILON> C<LDBL_MANT_DIG> C<LDBL_MAX> C<LDBL_MAX_10_EXP>
C<LDBL_MAX_EXP> C<LDBL_MIN> C<LDBL_MIN_10_EXP> C<LDBL_MIN_EXP>

=back

=head1 FLOATING-POINT ENVIRONMENT

=over 8

=item Constants

C<FE_DOWNWARD> C<FE_TONEAREST> C<FE_TOWARDZERO> C<FE_UPWARD>
on systems that support them.

=back

=head1 LIMITS

=over 8

=item Constants

C<ARG_MAX> C<CHAR_BIT> C<CHAR_MAX> C<CHAR_MIN> C<CHILD_MAX> C<INT_MAX> C<INT_MIN> C<LINK_MAX> C<LONG_MAX>
C<LONG_MIN> C<MAX_CANON> C<MAX_INPUT> C<MB_LEN_MAX> C<NAME_MAX> C<NGROUPS_MAX> C<OPEN_MAX> C<PATH_MAX>
C<PIPE_BUF> C<SCHAR_MAX> C<SCHAR_MIN> C<SHRT_MAX> C<SHRT_MIN> C<SSIZE_MAX> C<STREAM_MAX> C<TZNAME_MAX>
C<UCHAR_MAX> C<UINT_MAX> C<ULONG_MAX> C<USHRT_MAX>

=back

=head1 LOCALE

=over 8

=item Constants

C<LC_ALL> C<LC_COLLATE> C<LC_CTYPE> C<LC_MONETARY> C<LC_NUMERIC> C<LC_TIME> C<LC_MESSAGES>
on systems that support them.

=back

=head1 MATH

=over 8

=item Constants

C<HUGE_VAL>

C<FP_ILOGB0> C<FP_ILOGBNAN> C<FP_INFINITE> C<FP_NAN> C<FP_NORMAL> C<FP_SUBNORMAL> C<FP_ZERO>
C<INFINITY> C<NAN> C<Inf> C<NaN>
C<M_1_PI> C<M_2_PI> C<M_2_SQRTPI> C<M_E> C<M_LN10> C<M_LN2> C<M_LOG10E> C<M_LOG2E> C<M_PI>
C<M_PI_2> C<M_PI_4> C<M_SQRT1_2> C<M_SQRT2>
on systems with C99 support.

=back

=head1 SIGNAL

=over 8

=item Constants

C<SA_NOCLDSTOP> C<SA_NOCLDWAIT> C<SA_NODEFER> C<SA_ONSTACK> C<SA_RESETHAND> C<SA_RESTART>
C<SA_SIGINFO> C<SIGABRT> C<SIGALRM> C<SIGCHLD> C<SIGCONT> C<SIGFPE> C<SIGHUP> C<SIGILL> C<SIGINT>
C<SIGKILL> C<SIGPIPE> C<SIGQUIT> C<SIGSEGV> C<SIGSTOP> C<SIGTERM> C<SIGTSTP> C<SIGTTIN> C<SIGTTOU>
C<SIGUSR1> C<SIGUSR2> C<SIG_BLOCK> C<SIG_DFL> C<SIG_ERR> C<SIG_IGN> C<SIG_SETMASK>
C<SIG_UNBLOCK>
C<ILL_ILLOPC> C<ILL_ILLOPN> C<ILL_ILLADR> C<ILL_ILLTRP> C<ILL_PRVOPC> C<ILL_PRVREG> C<ILL_COPROC>
C<ILL_BADSTK> C<FPE_INTDIV> C<FPE_INTOVF> C<FPE_FLTDIV> C<FPE_FLTOVF> C<FPE_FLTUND> C<FPE_FLTRES>
C<FPE_FLTINV> C<FPE_FLTSUB> C<SEGV_MAPERR> C<SEGV_ACCERR> C<BUS_ADRALN> C<BUS_ADRERR>
C<BUS_OBJERR> C<TRAP_BRKPT> C<TRAP_TRACE> C<CLD_EXITED> C<CLD_KILLED> C<CLD_DUMPED> C<CLD_TRAPPED>
C<CLD_STOPPED> C<CLD_CONTINUED> C<POLL_IN> C<POLL_OUT> C<POLL_MSG> C<POLL_ERR> C<POLL_PRI>
C<POLL_HUP> C<SI_USER> C<SI_QUEUE> C<SI_TIMER> C<SI_ASYNCIO> C<SI_MESGQ>

=back

=head1 STAT

=over 8

=item Constants

C<S_IRGRP> C<S_IROTH> C<S_IRUSR> C<S_IRWXG> C<S_IRWXO> C<S_IRWXU> C<S_ISGID> C<S_ISUID> C<S_IWGRP> C<S_IWOTH>
C<S_IWUSR> C<S_IXGRP> C<S_IXOTH> C<S_IXUSR>

=item Macros

C<S_ISBLK> C<S_ISCHR> C<S_ISDIR> C<S_ISFIFO> C<S_ISREG>

=back

=head1 STDLIB

=over 8

=item Constants

C<EXIT_FAILURE> C<EXIT_SUCCESS> C<MB_CUR_MAX> C<RAND_MAX>

=back

=head1 STDIO

=over 8

=item Constants

C<BUFSIZ> C<EOF> C<FILENAME_MAX> C<L_ctermid> C<L_cuserid> C<L_tmpname> C<TMP_MAX>

=back

=head1 TIME

=over 8

=item Constants

C<CLK_TCK> C<CLOCKS_PER_SEC>

=back

=head1 UNISTD

=over 8

=item Constants

C<R_OK> C<SEEK_CUR> C<SEEK_END> C<SEEK_SET> C<STDIN_FILENO> C<STDOUT_FILENO> C<STDERR_FILENO> C<W_OK> C<X_OK>

=back

=head1 WAIT

=over 8

=item Constants

C<WNOHANG> C<WUNTRACED>

=over 16

=item C<WNOHANG>

Do not suspend the calling process until a child process
changes state but instead return immediately.

=item C<WUNTRACED>

Catch stopped child processes.

=back

=item Macros

C<WIFEXITED> C<WEXITSTATUS> C<WIFSIGNALED> C<WTERMSIG> C<WIFSTOPPED> C<WSTOPSIG>

=over 16

=item C<WIFEXITED>

C<WIFEXITED(${^CHILD_ERROR_NATIVE})> returns true if the child process
exited normally (C<exit()> or by falling off the end of C<main()>)

=item C<WEXITSTATUS>

C<WEXITSTATUS(${^CHILD_ERROR_NATIVE})> returns the normal exit status of
the child process (only meaningful if C<WIFEXITED(${^CHILD_ERROR_NATIVE})>
is true)

=item C<WIFSIGNALED>

C<WIFSIGNALED(${^CHILD_ERROR_NATIVE})> returns true if the child process
terminated because of a signal

=item C<WTERMSIG>

C<WTERMSIG(${^CHILD_ERROR_NATIVE})> returns the signal the child process
terminated for (only meaningful if
C<WIFSIGNALED(${^CHILD_ERROR_NATIVE})>
is true)

=item C<WIFSTOPPED>

C<WIFSTOPPED(${^CHILD_ERROR_NATIVE})> returns true if the child process is
currently stopped (can happen only if you specified the WUNTRACED flag
to C<waitpid()>)

=item C<WSTOPSIG>

C<WSTOPSIG(${^CHILD_ERROR_NATIVE})> returns the signal the child process
was stopped for (only meaningful if
C<WIFSTOPPED(${^CHILD_ERROR_NATIVE})>
is true)

=back

=back

=head1 WINSOCK

(Windows only.)

=over 8

=item Constants

C<WSAEINTR> C<WSAEBADF> C<WSAEACCES> C<WSAEFAULT> C<WSAEINVAL> C<WSAEMFILE> C<WSAEWOULDBLOCK>
C<WSAEINPROGRESS> C<WSAEALREADY> C<WSAENOTSOCK> C<WSAEDESTADDRREQ> C<WSAEMSGSIZE>
C<WSAEPROTOTYPE> C<WSAENOPROTOOPT> C<WSAEPROTONOSUPPORT> C<WSAESOCKTNOSUPPORT>
C<WSAEOPNOTSUPP> C<WSAEPFNOSUPPORT> C<WSAEAFNOSUPPORT> C<WSAEADDRINUSE>
C<WSAEADDRNOTAVAIL> C<WSAENETDOWN> C<WSAENETUNREACH> C<WSAENETRESET> C<WSAECONNABORTED>
C<WSAECONNRESET> C<WSAENOBUFS> C<WSAEISCONN> C<WSAENOTCONN> C<WSAESHUTDOWN>
C<WSAETOOMANYREFS> C<WSAETIMEDOUT> C<WSAECONNREFUSED> C<WSAELOOP> C<WSAENAMETOOLONG>
C<WSAEHOSTDOWN> C<WSAEHOSTUNREACH> C<WSAENOTEMPTY> C<WSAEPROCLIM> C<WSAEUSERS>
C<WSAEDQUOT> C<WSAESTALE> C<WSAEREMOTE> C<WSAEDISCON> C<WSAENOMORE> C<WSAECANCELLED>
C<WSAEINVALIDPROCTABLE> C<WSAEINVALIDPROVIDER> C<WSAEPROVIDERFAILEDINIT>
C<WSAEREFUSED>

=back

                                                                                                                                                                                                                                       package SDBM_File;

use strict;
use warnings;

require Tie::Hash;
require XSLoader;

our @ISA = qw(Tie::Hash);
our $VERSION = "1.14";

our @EXPORT_OK = qw(PAGFEXT DIRFEXT PAIRMAX);
use Exporter "import";

XSLoader::load();

1;

__END__

=head1 NAME

SDBM_File - Tied access to sdbm files

=head1 SYNOPSIS

 use Fcntl;   # For O_RDWR, O_CREAT, etc.
 use SDBM_File;

 tie(%h, 'SDBM_File', 'filename', O_RDWR|O_CREAT, 0666)
   or die "Couldn't tie SDBM file 'filename': $!; aborting";

 # Now read and change the hash
 $h{newkey} = newvalue;
 print $h{oldkey}; 
 ...

 untie %h;

=head1 DESCRIPTION

C<SDBM_File> establishes a connection between a Perl hash variable and
a file in SDBM_File format.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.

=head2 Tie

Use C<SDBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.

    tie %hash, 'SDBM_File', $basename, $modeflags, $perms;

    tie %hash, 'SDBM_File', $dirfile,  $modeflags, $perms, $pagfilename;

C<$basename> is the base filename for the database.  The database is two
files with ".dir" and ".pag" extensions appended to C<$basename>,

    $basename.dir     (or .sdbm_dir on VMS, per DIRFEXT constant)
    $basename.pag

The two filenames can also be given separately in full as C<$dirfile>
and C<$pagfilename>.  This suits for two files without ".dir" and ".pag"
extensions, perhaps for example two files from L<File::Temp>.

C<$modeflags> can be the following constants from the C<Fcntl> module (in
the style of the L<open(2)> system call),

    O_RDONLY          read-only access
    O_WRONLY          write-only access
    O_RDWR            read and write access

If you want to create the file if it does not already exist then bitwise-OR
(C<|>) C<O_CREAT> too.  If you omit C<O_CREAT> and the database does not
already exist then the C<tie> call will fail.

    O_CREAT           create database if doesn't already exist

C<$perms> is the file permissions bits to use if new database files are
created.  This parameter is mandatory even when not creating a new database.
The permissions will be reduced by the user's umask so the usual value here
would be 0666, or if some very private data then 0600.  (See
L<perlfunc/umask>.)

=head1 EXPORTS

SDBM_File optionally exports the following constants:

=over

=item *

C<PAGFEXT> - the extension used for the page file, usually C<.pag>.

=item *

C<DIRFEXT> - the extension used for the directory file, C<.dir>
everywhere but VMS, where it is C<.sdbm_dir>.

=item *

C<PAIRMAX> - the maximum size of a stored hash entry, including the
length of both the key and value.

=back

These constants can also be used with fully qualified names,
eg. C<SDBM_File::PAGFEXT>.

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<sdbm store returned -1, errno 22, key "..." at ...>

This warning is emitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the SDBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.

See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           package Socket;

use strict;
{ use 5.006001; }

our $VERSION = '2.020_03'; # patched in perl5.git

# Still undocumented: SCM_*, SOMAXCONN, IOV_MAX, UIO_MAXIOV

use Carp;
use warnings::register;

require Exporter;
require XSLoader;
our @ISA = qw(Exporter);

# <@Nicholas> you can't change @EXPORT without breaking the implicit API
# Please put any new constants in @EXPORT_OK!

# List re-ordered to match documentation above. Try to keep the ordering
# consistent so it's easier to see which ones are or aren't documented.
our @EXPORT = qw(
	PF_802 PF_AAL PF_APPLETALK PF_CCITT PF_CHAOS PF_CTF PF_DATAKIT
	PF_DECnet PF_DLI PF_ECMA PF_GOSIP PF_HYLINK PF_IMPLINK PF_INET PF_INET6
	PF_ISO PF_KEY PF_LAST PF_LAT PF_LINK PF_MAX PF_NBS PF_NIT PF_NS PF_OSI
	PF_OSINET PF_PUP PF_ROUTE PF_SNA PF_UNIX PF_UNSPEC PF_USER PF_WAN
	PF_X25

	AF_802 AF_AAL AF_APPLETALK AF_CCITT AF_CHAOS AF_CTF AF_DATAKIT
	AF_DECnet AF_DLI AF_ECMA AF_GOSIP AF_HYLINK AF_IMPLINK AF_INET AF_INET6
	AF_ISO AF_KEY AF_LAST AF_LAT AF_LINK AF_MAX AF_NBS AF_NIT AF_NS AF_OSI
	AF_OSINET AF_PUP AF_ROUTE AF_SNA AF_UNIX AF_UNSPEC AF_USER AF_WAN
	AF_X25

	SOCK_DGRAM SOCK_RAW SOCK_RDM SOCK_SEQPACKET SOCK_STREAM

	SOL_SOCKET

	SO_ACCEPTCONN SO_ATTACH_FILTER SO_BACKLOG SO_BROADCAST SO_CHAMELEON
	SO_DEBUG SO_DETACH_FILTER SO_DGRAM_ERRIND SO_DOMAIN SO_DONTLINGER
	SO_DONTROUTE SO_ERROR SO_FAMILY SO_KEEPALIVE SO_LINGER SO_OOBINLINE
	SO_PASSCRED SO_PASSIFNAME SO_PEERCRED SO_PROTOCOL SO_PROTOTYPE
	SO_RCVBUF SO_RCVLOWAT SO_RCVTIMEO SO_REUSEADDR SO_REUSEPORT
	SO_SECURITY_AUTHENTICATION SO_SECURITY_ENCRYPTION_NETWORK
	SO_SECURITY_ENCRYPTION_TRANSPORT SO_SNDBUF SO_SNDLOWAT SO_SNDTIMEO
	SO_STATE SO_TYPE SO_USELOOPBACK SO_XOPEN SO_XSE

	IP_OPTIONS IP_HDRINCL IP_TOS IP_TTL IP_RECVOPTS IP_RECVRETOPTS
	IP_RETOPTS

	MSG_BCAST MSG_BTAG MSG_CTLFLAGS MSG_CTLIGNORE MSG_CTRUNC MSG_DONTROUTE
	MSG_DONTWAIT MSG_EOF MSG_EOR MSG_ERRQUEUE MSG_ETAG MSG_FIN
	MSG_MAXIOVLEN MSG_MCAST MSG_NOSIGNAL MSG_OOB MSG_PEEK MSG_PROXY MSG_RST
	MSG_SYN MSG_TRUNC MSG_URG MSG_WAITALL MSG_WIRE

	SHUT_RD SHUT_RDWR SHUT_WR

	INADDR_ANY INADDR_BROADCAST INADDR_LOOPBACK INADDR_NONE

	SCM_CONNECT SCM_CREDENTIALS SCM_CREDS SCM_RIGHTS SCM_TIMESTAMP

	SOMAXCONN

	IOV_MAX
	UIO_MAXIOV

	sockaddr_family
	pack_sockaddr_in  unpack_sockaddr_in  sockaddr_in
	pack_sockaddr_in6 unpack_sockaddr_in6 sockaddr_in6
	pack_sockaddr_un  unpack_sockaddr_un  sockaddr_un 

	inet_aton inet_ntoa
);

# List re-ordered to match documentation above. Try to keep the ordering
# consistent so it's easier to see which ones are or aren't documented.
our @EXPORT_OK = qw(
	CR LF CRLF $CR $LF $CRLF

	SOCK_NONBLOCK SOCK_CLOEXEC

	IP_ADD_MEMBERSHIP IP_ADD_SOURCE_MEMBERSHIP IP_DROP_MEMBERSHIP
	IP_DROP_SOURCE_MEMBERSHIP IP_MULTICAST_IF IP_MULTICAST_LOOP
	IP_MULTICAST_TTL

	IPPROTO_IP IPPROTO_IPV6 IPPROTO_RAW IPPROTO_ICMP IPPROTO_IGMP
	IPPROTO_TCP IPPROTO_UDP IPPROTO_GRE IPPROTO_ESP IPPROTO_AH
	IPPROTO_SCTP

	IPTOS_LOWDELAY IPTOS_THROUGHPUT IPTOS_RELIABILITY IPTOS_MINCOST

	TCP_CONGESTION TCP_CONNECTIONTIMEOUT TCP_CORK TCP_DEFER_ACCEPT TCP_INFO
	TCP_INIT_CWND TCP_KEEPALIVE TCP_KEEPCNT TCP_KEEPIDLE TCP_KEEPINTVL
	TCP_LINGER2 TCP_MAXRT TCP_MAXSEG TCP_MD5SIG TCP_NODELAY TCP_NOOPT
	TCP_NOPUSH TCP_QUICKACK TCP_SACK_ENABLE TCP_STDURG TCP_SYNCNT
	TCP_WINDOW_CLAMP

	IN6ADDR_ANY IN6ADDR_LOOPBACK

	IPV6_ADD_MEMBERSHIP IPV6_DROP_MEMBERSHIP IPV6_JOIN_GROUP
	IPV6_LEAVE_GROUP IPV6_MTU IPV6_MTU_DISCOVER IPV6_MULTICAST_HOPS
	IPV6_MULTICAST_IF IPV6_MULTICAST_LOOP IPV6_UNICAST_HOPS IPV6_V6ONLY

	pack_ip_mreq unpack_ip_mreq pack_ip_mreq_source unpack_ip_mreq_source

	pack_ipv6_mreq unpack_ipv6_mreq

	inet_pton inet_ntop

	getaddrinfo getnameinfo

	AI_ADDRCONFIG AI_ALL AI_CANONIDN AI_CANONNAME AI_IDN
	AI_IDN_ALLOW_UNASSIGNED AI_IDN_USE_STD3_ASCII_RULES AI_NUMERICHOST
	AI_NUMERICSERV AI_PASSIVE AI_V4MAPPED

	NI_DGRAM NI_IDN NI_IDN_ALLOW_UNASSIGNED NI_IDN_USE_STD3_ASCII_RULES
	NI_NAMEREQD NI_NOFQDN NI_NUMERICHOST NI_NUMERICSERV

	NIx_NOHOST NIx_NOSERV

	EAI_ADDRFAMILY EAI_AGAIN EAI_BADFLAGS EAI_BADHINTS EAI_FAIL EAI_FAMILY
	EAI_NODATA EAI_NONAME EAI_PROTOCOL EAI_SERVICE EAI_SOCKTYPE EAI_SYSTEM
);

our %EXPORT_TAGS = (
    crlf     => [qw(CR LF CRLF $CR $LF $CRLF)],
    addrinfo => [qw(getaddrinfo getnameinfo), grep m/^(?:AI|NI|NIx|EAI)_/, @EXPORT_OK],
    all      => [@EXPORT, @EXPORT_OK],
);

BEGIN {
    sub CR   () {"\015"}
    sub LF   () {"\012"}
    sub CRLF () {"\015\012"}

    # These are not gni() constants; they're extensions for the perl API
    # The definitions in Socket.pm and Socket.xs must match
    sub NIx_NOHOST() {1 << 0}
    sub NIx_NOSERV() {1 << 1}
}

*CR   = \CR();
*LF   = \LF();
*CRLF = \CRLF();

sub sockaddr_in {
    if (@_ == 6 && !wantarray) { # perl5.001m compat; use this && die
	my($af, $port, @quad) = @_;
	warnings::warn "6-ARG sockaddr_in call is deprecated" 
	    if warnings::enabled();
	pack_sockaddr_in($port, inet_aton(join('.', @quad)));
    } elsif (wantarray) {
	croak "usage:   (port,iaddr) = sockaddr_in(sin_sv)" unless @_ == 1;
        unpack_sockaddr_in(@_);
    } else {
	croak "usage:   sin_sv = sockaddr_in(port,iaddr))" unless @_ == 2;
        pack_sockaddr_in(@_);
    }
}

sub sockaddr_in6 {
    if (wantarray) {
	croak "usage:   (port,in6addr,scope_id,flowinfo) = sockaddr_in6(sin6_sv)" unless @_ == 1;
	unpack_sockaddr_in6(@_);
    }
    else {
	croak "usage:   sin6_sv = sockaddr_in6(port,in6addr,[scope_id,[flowinfo]])" unless @_ >= 2 and @_ <= 4;
	pack_sockaddr_in6(@_);
    }
}

sub sockaddr_un {
    if (wantarray) {
	croak "usage:   (filename) = sockaddr_un(sun_sv)" unless @_ == 1;
        unpack_sockaddr_un(@_);
    } else {
	croak "usage:   sun_sv = sockaddr_un(filename)" unless @_ == 1;
        pack_sockaddr_un(@_);
    }
}

XSLoader::load(__PACKAGE__, $VERSION);

my %errstr;

if( defined &getaddrinfo ) {
    # These are not part of the API, nothing uses them, and deleting them
    # reduces the size of %Socket:: by about 12K
    delete $Socket::{fake_getaddrinfo};
    delete $Socket::{fake_getnameinfo};
} else {
    require Scalar::Util;

    *getaddrinfo = \&fake_getaddrinfo;
    *getnameinfo = \&fake_getnameinfo;

    # These numbers borrowed from GNU libc's implementation, but since
    # they're only used by our emulation, it doesn't matter if the real
    # platform's values differ
    my %constants = (
	AI_PASSIVE     => 1,
	AI_CANONNAME   => 2,
	AI_NUMERICHOST => 4,
	AI_V4MAPPED    => 8,
	AI_ALL         => 16,
	AI_ADDRCONFIG  => 32,
	# RFC 2553 doesn't define this but Linux does - lets be nice and
	# provide it since we can
	AI_NUMERICSERV => 1024,

	EAI_BADFLAGS   => -1,
	EAI_NONAME     => -2,
	EAI_NODATA     => -5,
	EAI_FAMILY     => -6,
	EAI_SERVICE    => -8,

	NI_NUMERICHOST => 1,
	NI_NUMERICSERV => 2,
	NI_NOFQDN      => 4,
	NI_NAMEREQD    => 8,
	NI_DGRAM       => 16,

	# Constants we don't support. Export them, but croak if anyone tries to
	# use them
	AI_IDN                      => 64,
	AI_CANONIDN                 => 128,
	AI_IDN_ALLOW_UNASSIGNED     => 256,
	AI_IDN_USE_STD3_ASCII_RULES => 512,
	NI_IDN                      => 32,
	NI_IDN_ALLOW_UNASSIGNED     => 64,
	NI_IDN_USE_STD3_ASCII_RULES => 128,

	# Error constants we'll never return, so it doesn't matter what value
	# these have, nor that we don't provide strings for them
	EAI_SYSTEM   => -11,
	EAI_BADHINTS => -1000,
	EAI_PROTOCOL => -1001
    );

    foreach my $name ( keys %constants ) {
	my $value = $constants{$name};

	no strict 'refs';
	defined &$name or *$name = sub () { $value };
    }

    %errstr = (
	# These strings from RFC 2553
	EAI_BADFLAGS()   => "invalid value for ai_flags",
	EAI_NONAME()     => "nodename nor servname provided, or not known",
	EAI_NODATA()     => "no address associated with nodename",
	EAI_FAMILY()     => "ai_family not supported",
	EAI_SERVICE()    => "servname not supported for ai_socktype",
    );
}

# The following functions are used if the system does not have a
# getaddrinfo(3) function in libc; and are used to emulate it for the AF_INET
# family

# Borrowed from Regexp::Common::net
my $REGEXP_IPv4_DECIMAL = qr/25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}/;
my $REGEXP_IPv4_DOTTEDQUAD = qr/$REGEXP_IPv4_DECIMAL\.$REGEXP_IPv4_DECIMAL\.$REGEXP_IPv4_DECIMAL\.$REGEXP_IPv4_DECIMAL/;

sub fake_makeerr
{
    my ( $errno ) = @_;
    my $errstr = $errno == 0 ? "" : ( $errstr{$errno} || $errno );
    return Scalar::Util::dualvar( $errno, $errstr );
}

sub fake_getaddrinfo
{
    my ( $node, $service, $hints ) = @_;

    $node = "" unless defined $node;

    $service = "" unless defined $service;

    my ( $family, $socktype, $protocol, $flags ) = @$hints{qw( family socktype protocol flags )};

    $family ||= Socket::AF_INET(); # 0 == AF_UNSPEC, which we want too
    $family == Socket::AF_INET() or return fake_makeerr( EAI_FAMILY() );

    $socktype ||= 0;

    $protocol ||= 0;

    $flags ||= 0;

    my $flag_passive     = $flags & AI_PASSIVE();     $flags &= ~AI_PASSIVE();
    my $flag_canonname   = $flags & AI_CANONNAME();   $flags &= ~AI_CANONNAME();
    my $flag_numerichost = $flags & AI_NUMERICHOST(); $flags &= ~AI_NUMERICHOST();
    my $flag_numericserv = $flags & AI_NUMERICSERV(); $flags &= ~AI_NUMERICSERV();

    # These constants don't apply to AF_INET-only lookups, so we might as well
    # just ignore them. For AI_ADDRCONFIG we just presume the host has ability
    # to talk AF_INET. If not we'd have to return no addresses at all. :)
    $flags &= ~(AI_V4MAPPED()|AI_ALL()|AI_ADDRCONFIG());

    $flags & (AI_IDN()|AI_CANONIDN()|AI_IDN_ALLOW_UNASSIGNED()|AI_IDN_USE_STD3_ASCII_RULES()) and
	croak "Socket::getaddrinfo() does not support IDN";

    $flags == 0 or return fake_makeerr( EAI_BADFLAGS() );

    $node eq "" and $service eq "" and return fake_makeerr( EAI_NONAME() );

    my $canonname;
    my @addrs;
    if( $node ne "" ) {
	return fake_makeerr( EAI_NONAME() ) if( $flag_numerichost and $node !~ m/^$REGEXP_IPv4_DOTTEDQUAD$/ );
	( $canonname, undef, undef, undef, @addrs ) = gethostbyname( $node );
	defined $canonname or return fake_makeerr( EAI_NONAME() );

	undef $canonname unless $flag_canonname;
    }
    else {
	$addrs[0] = $flag_passive ? Socket::inet_aton( "0.0.0.0" )
				  : Socket::inet_aton( "127.0.0.1" );
    }

    my @ports; # Actually ARRAYrefs of [ socktype, protocol, port ]
    my $protname = "";
    if( $protocol ) {
	$protname = eval { getprotobynumber( $protocol ) };
    }

    if( $service ne "" and $service !~ m/^\d+$/ ) {
	return fake_makeerr( EAI_NONAME() ) if( $flag_numericserv );
	getservbyname( $service, $protname ) or return fake_makeerr( EAI_SERVICE() );
    }

    foreach my $this_socktype ( Socket::SOCK_STREAM(), Socket::SOCK_DGRAM(), Socket::SOCK_RAW() ) {
	next if $socktype and $this_socktype != $socktype;

	my $this_protname = "raw";
	$this_socktype == Socket::SOCK_STREAM() and $this_protname = "tcp";
	$this_socktype == Socket::SOCK_DGRAM()  and $this_protname = "udp";

	next if $protname and $this_protname ne $protname;

	my $port;
	if( $service ne "" ) {
	    if( $service =~ m/^\d+$/ ) {
		$port = "$service";
	    }
	    else {
		( undef, undef, $port, $this_protname ) = getservbyname( $service, $this_protname );
		next unless defined $port;
	    }
	}
	else {
	    $port = 0;
	}

	push @ports, [ $this_socktype, eval { scalar getprotobyname( $this_protname ) } || 0, $port ];
    }

    my @ret;
    foreach my $addr ( @addrs ) {
	foreach my $portspec ( @ports ) {
	    my ( $socktype, $protocol, $port ) = @$portspec;
	    push @ret, {
		family    => $family,
		socktype  => $socktype,
		protocol  => $protocol,
		addr      => Socket::pack_sockaddr_in( $port, $addr ),
		canonname => undef,
	    };
	}
    }

    # Only supply canonname for the first result
    if( defined $canonname ) {
	$ret[0]->{canonname} = $canonname;
    }

    return ( fake_makeerr( 0 ), @ret );
}

sub fake_getnameinfo
{
    my ( $addr, $flags, $xflags ) = @_;

    my ( $port, $inetaddr );
    eval { ( $port, $inetaddr ) = Socket::unpack_sockaddr_in( $addr ) }
	or return fake_makeerr( EAI_FAMILY() );

    my $family = Socket::AF_INET();

    $flags ||= 0;

    my $flag_numerichost = $flags & NI_NUMERICHOST(); $flags &= ~NI_NUMERICHOST();
    my $flag_numericserv = $flags & NI_NUMERICSERV(); $flags &= ~NI_NUMERICSERV();
    my $flag_nofqdn      = $flags & NI_NOFQDN();      $flags &= ~NI_NOFQDN();
    my $flag_namereqd    = $flags & NI_NAMEREQD();    $flags &= ~NI_NAMEREQD();
    my $flag_dgram       = $flags & NI_DGRAM()   ;    $flags &= ~NI_DGRAM();

    $flags & (NI_IDN()|NI_IDN_ALLOW_UNASSIGNED()|NI_IDN_USE_STD3_ASCII_RULES()) and
	croak "Socket::getnameinfo() does not support IDN";

    $flags == 0 or return fake_makeerr( EAI_BADFLAGS() );

    $xflags ||= 0;

    my $node;
    if( $xflags & NIx_NOHOST ) {
	$node = undef;
    }
    elsif( $flag_numerichost ) {
	$node = Socket::inet_ntoa( $inetaddr );
    }
    else {
	$node = gethostbyaddr( $inetaddr, $family );
	if( !defined $node ) {
	    return fake_makeerr( EAI_NONAME() ) if $flag_namereqd;
	    $node = Socket::inet_ntoa( $inetaddr );
	}
	elsif( $flag_nofqdn ) {
	    my ( $shortname ) = split m/\./, $node;
	    my ( $fqdn ) = gethostbyname $shortname;
	    $node = $shortname if defined $fqdn and $fqdn eq $node;
	}
    }

    my $service;
    if( $xflags & NIx_NOSERV ) {
	$service = undef;
    }
    elsif( $flag_numericserv ) {
	$service = "$port";
    }
    else {
	my $protname = $flag_dgram ? "udp" : "";
	$service = getservbyport( $port, $protname );
	if( !defined $service ) {
	    $service = "$port";
	}
    }

    return ( fake_makeerr( 0 ), $node, $service );
}

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #
#  Copyright (c) 1995-2001, Raphael Manfredi
#  Copyright (c) 2002-2014 by the Perl 5 Porters
#
#  You may redistribute only under the same terms as Perl 5, as specified
#  in the README file that comes with the distribution.
#

require XSLoader;
require Exporter;
package Storable; @ISA = qw(Exporter);

@EXPORT = qw(store retrieve);
@EXPORT_OK = qw(
	nstore store_fd nstore_fd fd_retrieve
	freeze nfreeze thaw
	dclone
	retrieve_fd
	lock_store lock_nstore lock_retrieve
        file_magic read_magic
);

use vars qw($canonical $forgive_me $VERSION);

$VERSION = '2.56_01';

BEGIN {
    if (eval {
        local $SIG{__DIE__};
        local @INC = @INC;
        pop @INC if $INC[-1] eq '.';
        require Log::Agent;
        1;
    }) {
        Log::Agent->import;
    }
    #
    # Use of Log::Agent is optional. If it hasn't imported these subs then
    # provide a fallback implementation.
    #
    unless ($Storable::{logcroak} && *{$Storable::{logcroak}}{CODE}) {
        require Carp;
        *logcroak = sub {
            Carp::croak(@_);
        };
    }
    unless ($Storable::{logcarp} && *{$Storable::{logcarp}}{CODE}) {
	require Carp;
        *logcarp = sub {
          Carp::carp(@_);
        };
    }
}

#
# They might miss :flock in Fcntl
#

BEGIN {
	if (eval { require Fcntl; 1 } && exists $Fcntl::EXPORT_TAGS{'flock'}) {
		Fcntl->import(':flock');
	} else {
		eval q{
			sub LOCK_SH ()	{1}
			sub LOCK_EX ()	{2}
		};
	}
}

sub CLONE {
    # clone context under threads
    Storable::init_perinterp();
}

# By default restricted hashes are downgraded on earlier perls.

$Storable::downgrade_restricted = 1;
$Storable::accept_future_minor = 1;

XSLoader::load('Storable', $Storable::VERSION);

#
# Determine whether locking is possible, but only when needed.
#

sub CAN_FLOCK; my $CAN_FLOCK; sub CAN_FLOCK {
	return $CAN_FLOCK if defined $CAN_FLOCK;
	require Config; import Config;
	return $CAN_FLOCK =
		$Config{'d_flock'} ||
		$Config{'d_fcntl_can_lock'} ||
		$Config{'d_lockf'};
}

sub show_file_magic {
    print <<EOM;
#
# To recognize the data files of the Perl module Storable,
# the following lines need to be added to the local magic(5) file,
# usually either /usr/share/misc/magic or /etc/magic.
#
0	string	perl-store	perl Storable(v0.6) data
>4	byte	>0	(net-order %d)
>>4	byte	&01	(network-ordered)
>>4	byte	=3	(major 1)
>>4	byte	=2	(major 1)

0	string	pst0	perl Storable(v0.7) data
>4	byte	>0
>>4	byte	&01	(network-ordered)
>>4	byte	=5	(major 2)
>>4	byte	=4	(major 2)
>>5	byte	>0	(minor %d)
EOM
}

sub file_magic {
    require IO::File;

    my $file = shift;
    my $fh = IO::File->new;
    open($fh, "<". $file) || die "Can't open '$file': $!";
    binmode($fh);
    defined(sysread($fh, my $buf, 32)) || die "Can't read from '$file': $!";
    close($fh);

    $file = "./$file" unless $file;  # ensure TRUE value

    return read_magic($buf, $file);
}

sub read_magic {
    my($buf, $file) = @_;
    my %info;

    my $buflen = length($buf);
    my $magic;
    if ($buf =~ s/^(pst0|perl-store)//) {
	$magic = $1;
	$info{file} = $file || 1;
    }
    else {
	return undef if $file;
	$magic = "";
    }

    return undef unless length($buf);

    my $net_order;
    if ($magic eq "perl-store" && ord(substr($buf, 0, 1)) > 1) {
	$info{version} = -1;
	$net_order = 0;
    }
    else {
	$buf =~ s/(.)//s;
	my $major = (ord $1) >> 1;
	return undef if $major > 4; # sanity (assuming we never go that high)
	$info{major} = $major;
	$net_order = (ord $1) & 0x01;
	if ($major > 1) {
	    return undef unless $buf =~ s/(.)//s;
	    my $minor = ord $1;
	    $info{minor} = $minor;
	    $info{version} = "$major.$minor";
	    $info{version_nv} = sprintf "%d.%03d", $major, $minor;
	}
	else {
	    $info{version} = $major;
	}
    }
    $info{version_nv} ||= $info{version};
    $info{netorder} = $net_order;

    unless ($net_order) {
	return undef unless $buf =~ s/(.)//s;
	my $len = ord $1;
	return undef unless length($buf) >= $len;
	return undef unless $len == 4 || $len == 8;  # sanity
	@info{qw(byteorder intsize longsize ptrsize)}
	    = unpack "a${len}CCC", $buf;
	(substr $buf, 0, $len + 3) = '';
	if ($info{version_nv} >= 2.002) {
	    return undef unless $buf =~ s/(.)//s;
	    $info{nvsize} = ord $1;
	}
    }
    $info{hdrsize} = $buflen - length($buf);

    return \%info;
}

sub BIN_VERSION_NV {
    sprintf "%d.%03d", BIN_MAJOR(), BIN_MINOR();
}

sub BIN_WRITE_VERSION_NV {
    sprintf "%d.%03d", BIN_MAJOR(), BIN_WRITE_MINOR();
}

#
# store
#
# Store target object hierarchy, identified by a reference to its root.
# The stored object tree may later be retrieved to memory via retrieve.
# Returns undef if an I/O error occurred, in which case the file is
# removed.
#
sub store {
	return _store(\&pstore, @_, 0);
}

#
# nstore
#
# Same as store, but in network order.
#
sub nstore {
	return _store(\&net_pstore, @_, 0);
}

#
# lock_store
#
# Same as store, but flock the file first (advisory locking).
#
sub lock_store {
	return _store(\&pstore, @_, 1);
}

#
# lock_nstore
#
# Same as nstore, but flock the file first (advisory locking).
#
sub lock_nstore {
	return _store(\&net_pstore, @_, 1);
}

# Internal store to file routine
sub _store {
	my $xsptr = shift;
	my $self = shift;
	my ($file, $use_locking) = @_;
	logcroak "not a reference" unless ref($self);
	logcroak "wrong argument number" unless @_ == 2;	# No @foo in arglist
	local *FILE;
	if ($use_locking) {
		open(FILE, ">>$file") || logcroak "can't write into $file: $!";
		unless (&CAN_FLOCK) {
			logcarp
				"Storable::lock_store: fcntl/flock emulation broken on $^O";
			return undef;
		}
		flock(FILE, LOCK_EX) ||
			logcroak "can't get exclusive lock on $file: $!";
		truncate FILE, 0;
		# Unlocking will happen when FILE is closed
	} else {
		open(FILE, ">$file") || logcroak "can't create $file: $!";
	}
	binmode FILE;				# Archaic systems...
	my $da = $@;				# Don't mess if called from exception handler
	my $ret;
	# Call C routine nstore or pstore, depending on network order
	eval { $ret = &$xsptr(*FILE, $self) };
	# close will return true on success, so the or short-circuits, the ()
	# expression is true, and for that case the block will only be entered
	# if $@ is true (ie eval failed)
	# if close fails, it returns false, $ret is altered, *that* is (also)
	# false, so the () expression is false, !() is true, and the block is
	# entered.
	if (!(close(FILE) or undef $ret) || $@) {
		unlink($file) or warn "Can't unlink $file: $!\n";
	}
	logcroak $@ if $@ =~ s/\.?\n$/,/;
	$@ = $da;
	return $ret;
}

#
# store_fd
#
# Same as store, but perform on an already opened file descriptor instead.
# Returns undef if an I/O error occurred.
#
sub store_fd {
	return _store_fd(\&pstore, @_);
}

#
# nstore_fd
#
# Same as store_fd, but in network order.
#
sub nstore_fd {
	my ($self, $file) = @_;
	return _store_fd(\&net_pstore, @_);
}

# Internal store routine on opened file descriptor
sub _store_fd {
	my $xsptr = shift;
	my $self = shift;
	my ($file) = @_;
	logcroak "not a reference" unless ref($self);
	logcroak "too many arguments" unless @_ == 1;	# No @foo in arglist
	my $fd = fileno($file);
	logcroak "not a valid file descriptor" unless defined $fd;
	my $da = $@;				# Don't mess if called from exception handler
	my $ret;
	# Call C routine nstore or pstore, depending on network order
	eval { $ret = &$xsptr($file, $self) };
	logcroak $@ if $@ =~ s/\.?\n$/,/;
	local $\; print $file '';	# Autoflush the file if wanted
	$@ = $da;
	return $ret;
}

#
# freeze
#
# Store object and its hierarchy in memory and return a scalar
# containing the result.
#
sub freeze {
	_freeze(\&mstore, @_);
}

#
# nfreeze
#
# Same as freeze but in network order.
#
sub nfreeze {
	_freeze(\&net_mstore, @_);
}

# Internal freeze routine
sub _freeze {
	my $xsptr = shift;
	my $self = shift;
	logcroak "not a reference" unless ref($self);
	logcroak "too many arguments" unless @_ == 0;	# No @foo in arglist
	my $da = $@;				# Don't mess if called from exception handler
	my $ret;
	# Call C routine mstore or net_mstore, depending on network order
	eval { $ret = &$xsptr($self) };
	logcroak $@ if $@ =~ s/\.?\n$/,/;
	$@ = $da;
	return $ret ? $ret : undef;
}

#
# retrieve
#
# Retrieve object hierarchy from disk, returning a reference to the root
# object of that tree.
#
sub retrieve {
	_retrieve($_[0], 0);
}

#
# lock_retrieve
#
# Same as retrieve, but with advisory locking.
#
sub lock_retrieve {
	_retrieve($_[0], 1);
}

# Internal retrieve routine
sub _retrieve {
	my ($file, $use_locking) = @_;
	local *FILE;
	open(FILE, $file) || logcroak "can't open $file: $!";
	binmode FILE;							# Archaic systems...
	my $self;
	my $da = $@;							# Could be from exception handler
	if ($use_locking) {
		unless (&CAN_FLOCK) {
			logcarp
				"Storable::lock_store: fcntl/flock emulation broken on $^O";
			return undef;
		}
		flock(FILE, LOCK_SH) || logcroak "can't get shared lock on $file: $!";
		# Unlocking will happen when FILE is closed
	}
	eval { $self = pretrieve(*FILE) };		# Call C routine
	close(FILE);
	logcroak $@ if $@ =~ s/\.?\n$/,/;
	$@ = $da;
	return $self;
}

#
# fd_retrieve
#
# Same as retrieve, but perform from an already opened file descriptor instead.
#
sub fd_retrieve {
	my ($file) = @_;
	my $fd = fileno($file);
	logcroak "not a valid file descriptor" unless defined $fd;
	my $self;
	my $da = $@;							# Could be from exception handler
	eval { $self = pretrieve($file) };		# Call C routine
	logcroak $@ if $@ =~ s/\.?\n$/,/;
	$@ = $da;
	return $self;
}

sub retrieve_fd { &fd_retrieve }		# Backward compatibility

#
# thaw
#
# Recreate objects in memory from an existing frozen image created
# by freeze.  If the frozen image passed is undef, return undef.
#
sub thaw {
	my ($frozen) = @_;
	return undef unless defined $frozen;
	my $self;
	my $da = $@;							# Could be from exception handler
	eval { $self = mretrieve($frozen) };	# Call C routine
	logcroak $@ if $@ =~ s/\.?\n$/,/;
	$@ = $da;
	return $self;
}

1;
__END__

=head1 NAME

Storable - persistence for Perl data structures

=head1 SYNOPSIS

 use Storable;
 store \%table, 'file';
 $hashref = retrieve('file');

 use Storable qw(nstore store_fd nstore_fd freeze thaw dclone);

 # Network order
 nstore \%table, 'file';
 $hashref = retrieve('file');	# There is NO nretrieve()

 # Storing to and retrieving from an already opened file
 store_fd \@array, \*STDOUT;
 nstore_fd \%table, \*STDOUT;
 $aryref = fd_retrieve(\*SOCKET);
 $hashref = fd_retrieve(\*SOCKET);

 # Serializing to memory
 $serialized = freeze \%table;
 %table_clone = %{ thaw($serialized) };

 # Deep (recursive) cloning
 $cloneref = dclone($ref);

 # Advisory locking
 use Storable qw(lock_store lock_nstore lock_retrieve)
 lock_store \%table, 'file';
 lock_nstore \%table, 'file';
 $hashref = lock_retrieve('file');

=head1 DESCRIPTION

The Storable package brings persistence to your Perl data structures
containing SCALAR, ARRAY, HASH or REF objects, i.e. anything that can be
conveniently stored to disk and retrieved at a later time.

It can be used in the regular procedural way by calling C<store> with
a reference to the object to be stored, along with the file name where
the image should be written.

The routine returns C<undef> for I/O problems or other internal error,
a true value otherwise. Serious errors are propagated as a C<die> exception.

To retrieve data stored to disk, use C<retrieve> with a file name.
The objects stored into that file are recreated into memory for you,
and a I<reference> to the root object is returned. In case an I/O error
occurs while reading, C<undef> is returned instead. Other serious
errors are propagated via C<die>.

Since storage is performed recursively, you might want to stuff references
to objects that share a lot of common data into a single array or hash
table, and then store that object. That way, when you retrieve back the
whole thing, the objects will continue to share what they originally shared.

At the cost of a slight header overhead, you may store to an already
opened file descriptor using the C<store_fd> routine, and retrieve
from a file via C<fd_retrieve>. Those names aren't imported by default,
so you will have to do that explicitly if you need those routines.
The file descriptor you supply must be already opened, for read
if you're going to retrieve and for write if you wish to store.

	store_fd(\%table, *STDOUT) || die "can't store to stdout\n";
	$hashref = fd_retrieve(*STDIN);

You can also store data in network order to allow easy sharing across
multiple platforms, or when storing on a socket known to be remotely
connected. The routines to call have an initial C<n> prefix for I<network>,
as in C<nstore> and C<nstore_fd>. At retrieval time, your data will be
correctly restored so you don't have to know whether you're restoring
from native or network ordered data.  Double values are stored stringified
to ensure portability as well, at the slight risk of loosing some precision
in the last decimals.

When using C<fd_retrieve>, objects are retrieved in sequence, one
object (i.e. one recursive tree) per associated C<store_fd>.

If you're more from the object-oriented camp, you can inherit from
Storable and directly store your objects by invoking C<store> as
a method. The fact that the root of the to-be-stored tree is a
blessed reference (i.e. an object) is special-cased so that the
retrieve does not provide a reference to that object but rather the
blessed object reference itself. (Otherwise, you'd get a reference
to that blessed object).

=head1 MEMORY STORE

The Storable engine can also store data into a Perl scalar instead, to
later retrieve them. This is mainly used to freeze a complex structure in
some safe compact memory place (where it can possibly be sent to another
process via some IPC, since freezing the structure also serializes it in
effect). Later on, and maybe somewhere else, you can thaw the Perl scalar
out and recreate the original complex structure in memory.

Surprisingly, the routines to be called are named C<freeze> and C<thaw>.
If you wish to send out the frozen scalar to another machine, use
C<nfreeze> instead to get a portable image.

Note that freezing an object structure and immediately thawing it
actually achieves a deep cloning of that structure:

    dclone(.) = thaw(freeze(.))

Storable provides you with a C<dclone> interface which does not create
that intermediary scalar but instead freezes the structure in some
internal memory space and then immediately thaws it out.

=head1 ADVISORY LOCKING

The C<lock_store> and C<lock_nstore> routine are equivalent to
C<store> and C<nstore>, except that they get an exclusive lock on
the file before writing.  Likewise, C<lock_retrieve> does the same
as C<retrieve>, but also gets a shared lock on the file before reading.

As with any advisory locking scheme, the protection only works if you
systematically use C<lock_store> and C<lock_retrieve>.  If one side of
your application uses C<store> whilst the other uses C<lock_retrieve>,
you will get no protection at all.

The internal advisory locking is implemented using Perl's flock()
routine.  If your system does not support any form of flock(), or if
you share your files across NFS, you might wish to use other forms
of locking by using modules such as LockFile::Simple which lock a
file using a filesystem entry, instead of locking the file descriptor.

=head1 SPEED

The heart of Storable is written in C for decent speed. Extra low-level
optimizations have been made when manipulating perl internals, to
sacrifice encapsulation for the benefit of greater speed.

=head1 CANONICAL REPRESENTATION

Normally, Storable stores elements of hashes in the order they are
stored internally by Perl, i.e. pseudo-randomly.  If you set
C<$Storable::canonical> to some C<TRUE> value, Storable will store
hashes with the elements sorted by their key.  This allows you to
compare data structures by comparing their frozen representations (or
even the compressed frozen representations), which can be useful for
creating lookup tables for complicated queries.

Canonical order does not imply network order; those are two orthogonal
settings.

=head1 CODE REFERENCES

Since Storable version 2.05, CODE references may be serialized with
the help of L<B::Deparse>. To enable this feature, set
C<$Storable::Deparse> to a true value. To enable deserialization,
C<$Storable::Eval> should be set to a true value. Be aware that
deserialization is done through C<eval>, which is dangerous if the
Storable file contains malicious data. You can set C<$Storable::Eval>
to a subroutine reference which would be used instead of C<eval>. See
below for an example using a L<Safe> compartment for deserialization
of CODE references.

If C<$Storable::Deparse> and/or C<$Storable::Eval> are set to false
values, then the value of C<$Storable::forgive_me> (see below) is
respected while serializing and deserializing.

=head1 FORWARD COMPATIBILITY

This release of Storable can be used on a newer version of Perl to
serialize data which is not supported by earlier Perls.  By default,
Storable will attempt to do the right thing, by C<croak()>ing if it
encounters data that it cannot deserialize.  However, the defaults
can be changed as follows:

=over 4

=item utf8 data

Perl 5.6 added support for Unicode characters with code points > 255,
and Perl 5.8 has full support for Unicode characters in hash keys.
Perl internally encodes strings with these characters using utf8, and
Storable serializes them as utf8.  By default, if an older version of
Perl encounters a utf8 value it cannot represent, it will C<croak()>.
To change this behaviour so that Storable deserializes utf8 encoded
values as the string of bytes (effectively dropping the I<is_utf8> flag)
set C<$Storable::drop_utf8> to some C<TRUE> value.  This is a form of
data loss, because with C<$drop_utf8> true, it becomes impossible to tell
whether the original data was the Unicode string, or a series of bytes
that happen to be valid utf8.

=item restricted hashes

Perl 5.8 adds support for restricted hashes, which have keys
restricted to a given set, and can have values locked to be read only.
By default, when Storable encounters a restricted hash on a perl
that doesn't support them, it will deserialize it as a normal hash,
silently discarding any placeholder keys and leaving the keys and
all values unlocked.  To make Storable C<croak()> instead, set
C<$Storable::downgrade_restricted> to a C<FALSE> value.  To restore
the default set it back to some C<TRUE> value.

=item files from future versions of Storable

Earlier versions of Storable would immediately croak if they encountered
a file with a higher internal version number than the reading Storable
knew about.  Internal version numbers are increased each time new data
types (such as restricted hashes) are added to the vocabulary of the file
format.  This meant that a newer Storable module had no way of writing a
file readable by an older Storable, even if the writer didn't store newer
data types.

This version of Storable will defer croaking until it encounters a data
type in the file that it does not recognize.  This means that it will
continue to read files generated by newer Storable modules which are careful
in what they write out, making it easier to upgrade Storable modules in a
mixed environment.

The old behaviour of immediate croaking can be re-instated by setting
C<$Storable::accept_future_minor> to some C<FALSE> value.

=back

All these variables have no effect on a newer Perl which supports the
relevant feature.

=head1 ERROR REPORTING

Storable uses the "exception" paradigm, in that it does not try to workaround
failures: if something bad happens, an exception is generated from the
caller's perspective (see L<Carp> and C<croak()>).  Use eval {} to trap
those exceptions.

When Storable croaks, it tries to report the error via the C<logcroak()>
routine from the C<Log::Agent> package, if it is available.

Normal errors are reported by having store() or retrieve() return C<undef>.
Such errors are usually I/O errors (or truncated stream errors at retrieval).

=head1 WIZARDS ONLY

=head2 Hooks

Any class may define hooks that will be called during the serialization
and deserialization process on objects that are instances of that class.
Those hooks can redefine the way serialization is performed (and therefore,
how the symmetrical deserialization should be conducted).

Since we said earlier:

    dclone(.) = thaw(freeze(.))

everything we say about hooks should also hold for deep cloning. However,
hooks get to know whether the operation is a mere serialization, or a cloning.

Therefore, when serializing hooks are involved,

    dclone(.) <> thaw(freeze(.))

Well, you could keep them in sync, but there's no guarantee it will always
hold on classes somebody else wrote.  Besides, there is little to gain in
doing so: a serializing hook could keep only one attribute of an object,
which is probably not what should happen during a deep cloning of that
same object.

Here is the hooking interface:

=over 4

=item C<STORABLE_freeze> I<obj>, I<cloning>

The serializing hook, called on the object during serialization.  It can be
inherited, or defined in the class itself, like any other method.

Arguments: I<obj> is the object to serialize, I<cloning> is a flag indicating
whether we're in a dclone() or a regular serialization via store() or freeze().

Returned value: A LIST C<($serialized, $ref1, $ref2, ...)> where $serialized
is the serialized form to be used, and the optional $ref1, $ref2, etc... are
extra references that you wish to let the Storable engine serialize.

At deserialization time, you will be given back the same LIST, but all the
extra references will be pointing into the deserialized structure.

The B<first time> the hook is hit in a serialization flow, you may have it
return an empty list.  That will signal the Storable engine to further
discard that hook for this class and to therefore revert to the default
serialization of the underlying Perl data.  The hook will again be normally
processed in the next serialization.

Unless you know better, serializing hook should always say:

    sub STORABLE_freeze {
        my ($self, $cloning) = @_;
        return if $cloning;         # Regular default serialization
        ....
    }

in order to keep reasonable dclone() semantics.

=item C<STORABLE_thaw> I<obj>, I<cloning>, I<serialized>, ...

The deserializing hook called on the object during deserialization.
But wait: if we're deserializing, there's no object yet... right?

Wrong: the Storable engine creates an empty one for you.  If you know Eiffel,
you can view C<STORABLE_thaw> as an alternate creation routine.

This means the hook can be inherited like any other method, and that
I<obj> is your blessed reference for this particular instance.

The other arguments should look familiar if you know C<STORABLE_freeze>:
I<cloning> is true when we're part of a deep clone operation, I<serialized>
is the serialized string you returned to the engine in C<STORABLE_freeze>,
and there may be an optional list of references, in the same order you gave
them at serialization time, pointing to the deserialized objects (which
have been processed courtesy of the Storable engine).

When the Storable engine does not find any C<STORABLE_thaw> hook routine,
it tries to load the class by requiring the package dynamically (using
the blessed package name), and then re-attempts the lookup.  If at that
time the hook cannot be located, the engine croaks.  Note that this mechanism
will fail if you define several classes in the same file, but L<perlmod>
warned you.

It is up to you to use this information to populate I<obj> the way you want.

Returned value: none.

=item C<STORABLE_attach> I<class>, I<cloning>, I<serialized>

While C<STORABLE_freeze> and C<STORABLE_thaw> are useful for classes where
each instance is independent, this mechanism has difficulty (or is
incompatible) with objects that exist as common process-level or
system-level resources, such as singleton objects, database pools, caches
or memoized objects.

The alternative C<STORABLE_attach> method provides a solution for these
shared objects. Instead of C<STORABLE_freeze> --E<gt> C<STORABLE_thaw>,
you implement C<STORABLE_freeze> --E<gt> C<STORABLE_attach> instead.

Arguments: I<class> is the class we are attaching to, I<cloning> is a flag
indicating whether we're in a dclone() or a regular de-serialization via
thaw(), and I<serialized> is the stored string for the resource object.

Because these resource objects are considered to be owned by the entire
process/system, and not the "property" of whatever is being serialized,
no references underneath the object should be included in the serialized
string. Thus, in any class that implements C<STORABLE_attach>, the
C<STORABLE_freeze> method cannot return any references, and C<Storable>
will throw an error if C<STORABLE_freeze> tries to return references.

All information required to "attach" back to the shared resource object
B<must> be contained B<only> in the C<STORABLE_freeze> return string.
Otherwise, C<STORABLE_freeze> behaves as normal for C<STORABLE_attach>
classes.

Because C<STORABLE_attach> is passed the class (rather than an object),
it also returns the object directly, rather than modifying the passed
object.

Returned value: object of type C<class>

=back

=head2 Predicates

Predicates are not exportable.  They must be called by explicitly prefixing
them with the Storable package name.

=over 4

=item C<Storable::last_op_in_netorder>

The C<Storable::last_op_in_netorder()> predicate will tell you whether
network order was used in the last store or retrieve operation.  If you
don't know how to use this, just forget about it.

=item C<Storable::is_storing>

Returns true if within a store operation (via STORABLE_freeze hook).

=item C<Storable::is_retrieving>

Returns true if within a retrieve operation (via STORABLE_thaw hook).

=back

=head2 Recursion

With hooks comes the ability to recurse back to the Storable engine.
Indeed, hooks are regular Perl code, and Storable is convenient when
it comes to serializing and deserializing things, so why not use it
to handle the serialization string?

There are a few things you need to know, however:

=over 4

=item *

You can create endless loops if the things you serialize via freeze()
(for instance) point back to the object we're trying to serialize in
the hook.

=item *

Shared references among objects will not stay shared: if we're serializing
the list of object [A, C] where both object A and C refer to the SAME object
B, and if there is a serializing hook in A that says freeze(B), then when
deserializing, we'll get [A', C'] where A' refers to B', but C' refers to D,
a deep clone of B'.  The topology was not preserved.

=back

That's why C<STORABLE_freeze> lets you provide a list of references
to serialize.  The engine guarantees that those will be serialized in the
same context as the other objects, and therefore that shared objects will
stay shared.

In the above [A, C] example, the C<STORABLE_freeze> hook could return:

	("something", $self->{B})

and the B part would be serialized by the engine.  In C<STORABLE_thaw>, you
would get back the reference to the B' object, deserialized for you.

Therefore, recursion should normally be avoided, but is nonetheless supported.

=head2 Deep Cloning

There is a Clone module available on CPAN which implements deep cloning
natively, i.e. without freezing to memory and thawing the result.  It is
aimed to replace Storable's dclone() some day.  However, it does not currently
support Storable hooks to redefine the way deep cloning is performed.

=head1 Storable magic

Yes, there's a lot of that :-) But more precisely, in UNIX systems
there's a utility called C<file>, which recognizes data files based on
their contents (usually their first few bytes).  For this to work,
a certain file called F<magic> needs to taught about the I<signature>
of the data.  Where that configuration file lives depends on the UNIX
flavour; often it's something like F</usr/share/misc/magic> or
F</etc/magic>.  Your system administrator needs to do the updating of
the F<magic> file.  The necessary signature information is output to
STDOUT by invoking Storable::show_file_magic().  Note that the GNU
implementation of the C<file> utility, version 3.38 or later,
is expected to contain support for recognising Storable files
out-of-the-box, in addition to other kinds of Perl files.

You can also use the following functions to extract the file header
information from Storable images:

=over

=item $info = Storable::file_magic( $filename )

If the given file is a Storable image return a hash describing it.  If
the file is readable, but not a Storable image return C<undef>.  If
the file does not exist or is unreadable then croak.

The hash returned has the following elements:

=over

=item C<version>

This returns the file format version.  It is a string like "2.7".

Note that this version number is not the same as the version number of
the Storable module itself.  For instance Storable v0.7 create files
in format v2.0 and Storable v2.15 create files in format v2.7.  The
file format version number only increment when additional features
that would confuse older versions of the module are added.

Files older than v2.0 will have the one of the version numbers "-1",
"0" or "1".  No minor number was used at that time.

=item C<version_nv>

This returns the file format version as number.  It is a string like
"2.007".  This value is suitable for numeric comparisons.

The constant function C<Storable::BIN_VERSION_NV> returns a comparable
number that represents the highest file version number that this
version of Storable fully supports (but see discussion of
C<$Storable::accept_future_minor> above).  The constant
C<Storable::BIN_WRITE_VERSION_NV> function returns what file version
is written and might be less than C<Storable::BIN_VERSION_NV> in some
configurations.

=item C<major>, C<minor>

This also returns the file format version.  If the version is "2.7"
then major would be 2 and minor would be 7.  The minor element is
missing for when major is less than 2.

=item C<hdrsize>

The is the number of bytes that the Storable header occupies.

=item C<netorder>

This is TRUE if the image store data in network order.  This means
that it was created with nstore() or similar.

=item C<byteorder>

This is only present when C<netorder> is FALSE.  It is the
$Config{byteorder} string of the perl that created this image.  It is
a string like "1234" (32 bit little endian) or "87654321" (64 bit big
endian).  This must match the current perl for the image to be
readable by Storable.

=item C<intsize>, C<longsize>, C<ptrsize>, C<nvsize>

These are only present when C<netorder> is FALSE. These are the sizes of
various C datatypes of the perl that created this image.  These must
match the current perl for the image to be readable by Storable.

The C<nvsize> element is only present for file format v2.2 and
higher.

=item C<file>

The name of the file.

=back

=item $info = Storable::read_magic( $buffer )

=item $info = Storable::read_magic( $buffer, $must_be_file )

The $buffer should be a Storable image or the first few bytes of it.
If $buffer starts with a Storable header, then a hash describing the
image is returned, otherwise C<undef> is returned.

The hash has the same structure as the one returned by
Storable::file_magic().  The C<file> element is true if the image is a
file image.

If the $must_be_file argument is provided and is TRUE, then return
C<undef> unless the image looks like it belongs to a file dump.

The maximum size of a Storable header is currently 21 bytes.  If the
provided $buffer is only the first part of a Storable image it should
at least be this long to ensure that read_magic() will recognize it as
such.

=back

=head1 EXAMPLES

Here are some code samples showing a possible usage of Storable:

 use Storable qw(store retrieve freeze thaw dclone);

 %color = ('Blue' => 0.1, 'Red' => 0.8, 'Black' => 0, 'White' => 1);

 store(\%color, 'mycolors') or die "Can't store %a in mycolors!\n";

 $colref = retrieve('mycolors');
 die "Unable to retrieve from mycolors!\n" unless defined $colref;
 printf "Blue is still %lf\n", $colref->{'Blue'};

 $colref2 = dclone(\%color);

 $str = freeze(\%color);
 printf "Serialization of %%color is %d bytes long.\n", length($str);
 $colref3 = thaw($str);

which prints (on my machine):

 Blue is still 0.100000
 Serialization of %color is 102 bytes long.

Serialization of CODE references and deserialization in a safe
compartment:

=for example begin

 use Storable qw(freeze thaw);
 use Safe;
 use strict;
 my $safe = new Safe;
        # because of opcodes used in "use strict":
 $safe->permit(qw(:default require));
 local $Storable::Deparse = 1;
 local $Storable::Eval = sub { $safe->reval($_[0]) };
 my $serialized = freeze(sub { 42 });
 my $code = thaw($serialized);
 $code->() == 42;

=for example end

=for example_testing
        is( $code->(), 42 );

=head1 SECURITY WARNING

B<Do not accept Storable documents from untrusted sources!>

Some features of Storable can lead to security vulnerabilities if you
accept Storable documents from untrusted sources. Most obviously, the
optional (off by default) CODE reference serialization feature allows
transfer of code to the deserializing process. Furthermore, any
serialized object will cause Storable to helpfully load the module
corresponding to the class of the object in the deserializing module.
For manipulated module names, this can load almost arbitrary code.
Finally, the deserialized object's destructors will be invoked when
the objects get destroyed in the deserializing process. Maliciously
crafted Storable documents may put such objects in the value of
a hash key that is overridden by another key/value pair in the
same hash, thus causing immediate destructor execution.

In a future version of Storable, we intend to provide options to disable
loading modules for classes and to disable deserializing objects
altogether. I<Nonetheless, Storable deserializing documents from
untrusted sources is expected to have other, yet undiscovered,
security concerns such as allowing an attacker to cause the deserializer
to crash hard.>

B<Therefore, let me repeat: Do not accept Storable documents from
untrusted sources!>

If your application requires accepting data from untrusted sources, you
are best off with a less powerful and more-likely safe serialization format
and implementation. If your data is sufficiently simple, JSON is a good
choice and offers maximum interoperability.

=head1 WARNING

If you're using references as keys within your hash tables, you're bound
to be disappointed when retrieving your data. Indeed, Perl stringifies
references used as hash table keys. If you later wish to access the
items via another reference stringification (i.e. using the same
reference that was used for the key originally to record the value into
the hash table), it will work because both references stringify to the
same string.

It won't work across a sequence of C<store> and C<retrieve> operations,
however, because the addresses in the retrieved objects, which are
part of the stringified references, will probably differ from the
original addresses. The topology of your structure is preserved,
but not hidden semantics like those.

On platforms where it matters, be sure to call C<binmode()> on the
descriptors that you pass to Storable functions.

Storing data canonically that contains large hashes can be
significantly slower than storing the same data normally, as
temporary arrays to hold the keys for each hash have to be allocated,
populated, sorted and freed.  Some tests have shown a halving of the
speed of storing -- the exact penalty will depend on the complexity of
your data.  There is no slowdown on retrieval.

=head1 BUGS

You can't store GLOB, FORMLINE, REGEXP, etc.... If you can define semantics
for those operations, feel free to enhance Storable so that it can
deal with them.

The store functions will C<croak> if they run into such references
unless you set C<$Storable::forgive_me> to some C<TRUE> value. In that
case, the fatal message is converted to a warning and some meaningless
string is stored instead.

Setting C<$Storable::canonical> may not yield frozen strings that
compare equal due to possible stringification of numbers. When the
string version of a scalar exists, it is the form stored; therefore,
if you happen to use your numbers as strings between two freezing
operations on the same data structures, you will get different
results.

When storing doubles in network order, their value is stored as text.
However, you should also not expect non-numeric floating-point values
such as infinity and "not a number" to pass successfully through a
nstore()/retrieve() pair.

As Storable neither knows nor cares about character sets (although it
does know that characters may be more than eight bits wide), any difference
in the interpretation of character codes between a host and a target
system is your problem.  In particular, if host and target use different
code points to represent the characters used in the text representation
of floating-point numbers, you will not be able be able to exchange
floating-point data, even with nstore().

C<Storable::drop_utf8> is a blunt tool.  There is no facility either to
return B<all> strings as utf8 sequences, or to attempt to convert utf8
data back to 8 bit and C<croak()> if the conversion fails.

Prior to Storable 2.01, no distinction was made between signed and
unsigned integers on storing.  By default Storable prefers to store a
scalars string representation (if it has one) so this would only cause
problems when storing large unsigned integers that had never been converted
to string or floating point.  In other words values that had been generated
by integer operations such as logic ops and then not used in any string or
arithmetic context before storing.

=head2 64 bit data in perl 5.6.0 and 5.6.1

This section only applies to you if you have existing data written out
by Storable 2.02 or earlier on perl 5.6.0 or 5.6.1 on Unix or Linux which
has been configured with 64 bit integer support (not the default)
If you got a precompiled perl, rather than running Configure to build
your own perl from source, then it almost certainly does not affect you,
and you can stop reading now (unless you're curious). If you're using perl
on Windows it does not affect you.

Storable writes a file header which contains the sizes of various C
language types for the C compiler that built Storable (when not writing in
network order), and will refuse to load files written by a Storable not
on the same (or compatible) architecture.  This check and a check on
machine byteorder is needed because the size of various fields in the file
are given by the sizes of the C language types, and so files written on
different architectures are incompatible.  This is done for increased speed.
(When writing in network order, all fields are written out as standard
lengths, which allows full interworking, but takes longer to read and write)

Perl 5.6.x introduced the ability to optional configure the perl interpreter
to use C's C<long long> type to allow scalars to store 64 bit integers on 32
bit systems.  However, due to the way the Perl configuration system
generated the C configuration files on non-Windows platforms, and the way
Storable generates its header, nothing in the Storable file header reflected
whether the perl writing was using 32 or 64 bit integers, despite the fact
that Storable was storing some data differently in the file.  Hence Storable
running on perl with 64 bit integers will read the header from a file
written by a 32 bit perl, not realise that the data is actually in a subtly
incompatible format, and then go horribly wrong (possibly crashing) if it
encountered a stored integer.  This is a design failure.

Storable has now been changed to write out and read in a file header with
information about the size of integers.  It's impossible to detect whether
an old file being read in was written with 32 or 64 bit integers (they have
the same header) so it's impossible to automatically switch to a correct
backwards compatibility mode.  Hence this Storable defaults to the new,
correct behaviour.

What this means is that if you have data written by Storable 1.x running
on perl 5.6.0 or 5.6.1 configured with 64 bit integers on Unix or Linux
then by default this Storable will refuse to read it, giving the error
I<Byte order is not compatible>.  If you have such data then you
should set C<$Storable::interwork_56_64bit> to a true value to make this
Storable read and write files with the old header.  You should also
migrate your data, or any older perl you are communicating with, to this
current version of Storable.

If you don't have data written with specific configuration of perl described
above, then you do not and should not do anything.  Don't set the flag -
not only will Storable on an identically configured perl refuse to load them,
but Storable a differently configured perl will load them believing them
to be correct for it, and then may well fail or crash part way through
reading them.

=head1 CREDITS

Thank you to (in chronological order):

	Jarkko Hietaniemi <jhi@iki.fi>
	Ulrich Pfeifer <pfeifer@charly.informatik.uni-dortmund.de>
	Benjamin A. Holzman <bholzman@earthlink.net>
	Andrew Ford <A.Ford@ford-mason.co.uk>
	Gisle Aas <gisle@aas.no>
	Jeff Gresham <gresham_jeffrey@jpmorgan.com>
	Murray Nesbitt <murray@activestate.com>
	Marc Lehmann <pcg@opengroup.org>
	Justin Banks <justinb@wamnet.com>
	Jarkko Hietaniemi <jhi@iki.fi> (AGAIN, as perl 5.7.0 Pumpkin!)
	Salvador Ortiz Garcia <sog@msg.com.mx>
	Dominic Dunlop <domo@computer.org>
	Erik Haugan <erik@solbors.no>
	Benjamin A. Holzman <ben.holzman@grantstreet.com>
	Reini Urban <rurban@cpanel.net>

for their bug reports, suggestions and contributions.

Benjamin Holzman contributed the tied variable support, Andrew Ford
contributed the canonical order for hashes, and Gisle Aas fixed
a few misunderstandings of mine regarding the perl internals,
and optimized the emission of "tags" in the output streams by
simply counting the objects instead of tagging them (leading to
a binary incompatibility for the Storable image starting at version
0.6--older images are, of course, still properly understood).
Murray Nesbitt made Storable thread-safe.  Marc Lehmann added overloading
and references to tied items support.  Benjamin Holzman added a performance
improvement for overloaded classes; thanks to Grant Street Group for footing
the bill.

=head1 AUTHOR

Storable was written by Raphael Manfredi
F<E<lt>Raphael_Manfredi@pobox.comE<gt>>
Maintenance is now done by the perl5-porters
F<E<lt>perl5-porters@perl.orgE<gt>>

Please e-mail us with problems, bug fixes, comments and complaints,
although if you have compliments you should send them to Raphael.
Please don't e-mail Raphael with problems, as he no longer works on
Storable, and your message will be delayed while he forwards it to us.

=head1 SEE ALSO

L<Clone>.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          package arybase;

our $VERSION = "0.11";

require XSLoader;
XSLoader::load(); # This returns true, which makes require happy.

__END__

=head1 NAME

arybase - Set indexing base via $[

=head1 SYNOPSIS

    $[ = 1;

    @a = qw(Sun Mon Tue Wed Thu Fri Sat);
    print $a[3], "\n";  # prints Tue

=head1 DESCRIPTION

This module implements Perl's C<$[> variable.  You should not use it
directly.

Assigning to C<$[> has the I<compile-time> effect of making the assigned
value, converted to an integer, the index of the first element in an array
and the first character in a substring, within the enclosing lexical scope.

It can be written with or without C<local>:

    $[ = 1;
    local $[ = 1;

It only works if the assignment can be detected at compile time and the
value assigned is constant.

It affects the following operations:

    $array[$element]
    @array[@slice]
    $#array
    (list())[$slice]
    splice @array, $index, ...
    each @array
    keys @array

    index $string, $substring  # return value is affected
    pos $string
    substr $string, $offset, ...

As with the default base of 0, negative bases count from the end of the
array or string, starting with -1.  If C<$[> is a positive integer, indices
from C<$[-1> to 0 also count from the end.  If C<$[> is negative (why would
you do that, though?), indices from C<$[> to 0 count from the beginning of
the string, but indices below C<$[> count from the end of the string as
though the base were 0.

Prior to Perl 5.16, indices from 0 to C<$[-1> inclusive, for positive
values of C<$[>, behaved differently for different operations; negative
indices equal to or greater than a negative C<$[> likewise behaved
inconsistently.

=head1 HISTORY

Before Perl 5, C<$[> was a global variable that affected all array indices
and string offsets.

Starting with Perl 5, it became a file-scoped compile-time directive, which
could be made lexically-scoped with C<local>.  "File-scoped" means that the
C<$[> assignment could leak out of the block in which occurred:

    {
        $[ = 1;
        # ... array base is 1 here ...
    }
    # ... still 1, but not in other files ...

In Perl 5.10, it became strictly lexical.  The file-scoped behaviour was
removed (perhaps inadvertently, but what's done is done).

In Perl 5.16, the implementation was moved into this module, and out of the
Perl core.  The erratic behaviour that occurred with indices between -1 and
C<$[> was made consistent between operations, and, for negative bases,
indices from C<$[> to -1 inclusive were made consistent between operations.

=head1 BUGS

Error messages that mention array indices use the 0-based index.

C<keys $arrayref> and C<each $arrayref> do not respect the current value of
C<$[>.

=head1 SEE ALSO

L<perlvar/"$[">, L<Array::Base> and L<String::Base>.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # This file was created by h2ph version 4
no warnings qw(portable);
unless (defined &_FILE_OFFSET_BITS) { sub _FILE_OFFSET_BITS() { 64 } }

unless (defined &_FORTIFY_SOURCE) { sub _FORTIFY_SOURCE() { 2 } }

unless (defined &_GNU_SOURCE) { sub _GNU_SOURCE() { 1 } }

unless (defined &_LARGEFILE64_SOURCE) { sub _LARGEFILE64_SOURCE() { 1 } }

unless (defined &_LARGEFILE_SOURCE) { sub _LARGEFILE_SOURCE() { 1 } }

unless (defined &_POSIX_C_SOURCE) { sub _POSIX_C_SOURCE() { 200809 } }

unless (defined &_POSIX_SOURCE) { sub _POSIX_SOURCE() { 1 } }

unless (defined &_REENTRANT) { sub _REENTRANT() { 1 } }

unless (defined &_STDC_PREDEF_H) { sub _STDC_PREDEF_H() { 1 } }

unless (defined &_XOPEN_SOURCE) { sub _XOPEN_SOURCE() { 700 } }

unless (defined &_XOPEN_SOURCE_EXTENDED) { sub _XOPEN_SOURCE_EXTENDED() { 1 } }

unless (defined &__ACCUM_EPSILON__) { sub __ACCUM_EPSILON__() { "0x1P\-15K" } }

unless (defined &__ACCUM_FBIT__) { sub __ACCUM_FBIT__() { 15 } }

unless (defined &__ACCUM_IBIT__) { sub __ACCUM_IBIT__() { 16 } }

unless (defined &__ACCUM_MAX__) { sub __ACCUM_MAX__() { "0X7FFFFFFFP\-15K" } }

unless (defined &__ACCUM_MIN__) { sub __ACCUM_MIN__() { "\-0X1P15K\-0X1P15K" } }

unless (defined &__APCS_32__) { sub __APCS_32__() { 1 } }

unless (defined &__ARMEL__) { sub __ARMEL__() { 1 } }

unless (defined &__ARM_32BIT_STATE) { sub __ARM_32BIT_STATE() { 1 } }

unless (defined &__ARM_ARCH) { sub __ARM_ARCH() { 6 } }

unless (defined &__ARM_ARCH_6__) { sub __ARM_ARCH_6__() { 1 } }

unless (defined &__ARM_ARCH_ISA_ARM) { sub __ARM_ARCH_ISA_ARM() { 1 } }

unless (defined &__ARM_ARCH_ISA_THUMB) { sub __ARM_ARCH_ISA_THUMB() { 1 } }

unless (defined &__ARM_EABI__) { sub __ARM_EABI__() { 1 } }

unless (defined &__ARM_FEATURE_CLZ) { sub __ARM_FEATURE_CLZ() { 1 } }

unless (defined &__ARM_FEATURE_DSP) { sub __ARM_FEATURE_DSP() { 1 } }

unless (defined &__ARM_FEATURE_LDREX) { sub __ARM_FEATURE_LDREX() { 4 } }

unless (defined &__ARM_FEATURE_QBIT) { sub __ARM_FEATURE_QBIT() { 1 } }

unless (defined &__ARM_FEATURE_SAT) { sub __ARM_FEATURE_SAT() { 1 } }

unless (defined &__ARM_FEATURE_SIMD32) { sub __ARM_FEATURE_SIMD32() { 1 } }

unless (defined &__ARM_FEATURE_UNALIGNED) { sub __ARM_FEATURE_UNALIGNED() { 1 } }

unless (defined &__ARM_FP) { sub __ARM_FP() { 12 } }

unless (defined &__ARM_PCS_VFP) { sub __ARM_PCS_VFP() { 1 } }

unless (defined &__ARM_SIZEOF_MINIMAL_ENUM) { sub __ARM_SIZEOF_MINIMAL_ENUM() { 4 } }

unless (defined &__ARM_SIZEOF_WCHAR_T) { sub __ARM_SIZEOF_WCHAR_T() { 4 } }

unless (defined &__ATOMIC_ACQUIRE) { sub __ATOMIC_ACQUIRE() { 2 } }

unless (defined &__ATOMIC_ACQ_REL) { sub __ATOMIC_ACQ_REL() { 4 } }

unless (defined &__ATOMIC_CONSUME) { sub __ATOMIC_CONSUME() { 1 } }

unless (defined &__ATOMIC_RELAXED) { sub __ATOMIC_RELAXED() { 0 } }

unless (defined &__ATOMIC_RELEASE) { sub __ATOMIC_RELEASE() { 3 } }

unless (defined &__ATOMIC_SEQ_CST) { sub __ATOMIC_SEQ_CST() { 5 } }

unless (defined &__BIGGEST_ALIGNMENT__) { sub __BIGGEST_ALIGNMENT__() { 8 } }

unless (defined &__BYTE_ORDER__) { sub __BYTE_ORDER__() { 1234 } }

unless (defined &__CHAR16_TYPE__) { sub __CHAR16_TYPE__() { "short\\\ unsigned\\\ int" } }

unless (defined &__CHAR32_TYPE__) { sub __CHAR32_TYPE__() { "unsigned\\\ int" } }

unless (defined &__CHAR_BIT__) { sub __CHAR_BIT__() { 8 } }

unless (defined &__CHAR_UNSIGNED__) { sub __CHAR_UNSIGNED__() { 1 } }

unless (defined &__DA_FBIT__) { sub __DA_FBIT__() { 31 } }

unless (defined &__DA_IBIT__) { sub __DA_IBIT__() { 32 } }

unless (defined &__DBL_DECIMAL_DIG__) { sub __DBL_DECIMAL_DIG__() { 17 } }

unless (defined &__DBL_DENORM_MIN__) { sub __DBL_DENORM_MIN__() { "\(double\)4\.9406564584124654e\-324L" } }

unless (defined &__DBL_DIG__) { sub __DBL_DIG__() { 15 } }

unless (defined &__DBL_EPSILON__) { sub __DBL_EPSILON__() { "\(double\)2\.2204460492503131e\-16L" } }

unless (defined &__DBL_HAS_DENORM__) { sub __DBL_HAS_DENORM__() { 1 } }

unless (defined &__DBL_HAS_INFINITY__) { sub __DBL_HAS_INFINITY__() { 1 } }

unless (defined &__DBL_HAS_QUIET_NAN__) { sub __DBL_HAS_QUIET_NAN__() { 1 } }

unless (defined &__DBL_MANT_DIG__) { sub __DBL_MANT_DIG__() { 53 } }

unless (defined &__DBL_MAX_10_EXP__) { sub __DBL_MAX_10_EXP__() { 308 } }

unless (defined &__DBL_MAX_EXP__) { sub __DBL_MAX_EXP__() { 1024 } }

unless (defined &__DBL_MAX__) { sub __DBL_MAX__() { "\(double\)1\.7976931348623157e\+308L" } }

unless (defined &__DBL_MIN_10_EXP__) { sub __DBL_MIN_10_EXP__() { -307 } }

unless (defined &__DBL_MIN_EXP__) { sub __DBL_MIN_EXP__() { -1021 } }

unless (defined &__DBL_MIN__) { sub __DBL_MIN__() { "\(double\)2\.2250738585072014e\-308L" } }

unless (defined &__DEC128_EPSILON__) { sub __DEC128_EPSILON__() { "1E\-33DL" } }

unless (defined &__DEC128_MANT_DIG__) { sub __DEC128_MANT_DIG__() { 34 } }

unless (defined &__DEC128_MAX_EXP__) { sub __DEC128_MAX_EXP__() { 6145 } }

unless (defined &__DEC128_MAX__) { sub __DEC128_MAX__() { "9\.999999999999999999999999999999999E6144DL" } }

unless (defined &__DEC128_MIN_EXP__) { sub __DEC128_MIN_EXP__() { -6142 } }

unless (defined &__DEC128_MIN__) { sub __DEC128_MIN__() { "1E\-6143DL" } }

unless (defined &__DEC128_SUBNORMAL_MIN__) { sub __DEC128_SUBNORMAL_MIN__() { "0\.000000000000000000000000000000001E\-6143DL" } }

unless (defined &__DEC32_EPSILON__) { sub __DEC32_EPSILON__() { "1E\-6DF" } }

unless (defined &__DEC32_MANT_DIG__) { sub __DEC32_MANT_DIG__() { 7 } }

unless (defined &__DEC32_MAX_EXP__) { sub __DEC32_MAX_EXP__() { 97 } }

unless (defined &__DEC32_MAX__) { sub __DEC32_MAX__() { "9\.999999E96DF" } }

unless (defined &__DEC32_MIN_EXP__) { sub __DEC32_MIN_EXP__() { -94 } }

unless (defined &__DEC32_MIN__) { sub __DEC32_MIN__() { "1E\-95DF" } }

unless (defined &__DEC32_SUBNORMAL_MIN__) { sub __DEC32_SUBNORMAL_MIN__() { "0\.000001E\-95DF" } }

unless (defined &__DEC64_EPSILON__) { sub __DEC64_EPSILON__() { "1E\-15DD" } }

unless (defined &__DEC64_MANT_DIG__) { sub __DEC64_MANT_DIG__() { 16 } }

unless (defined &__DEC64_MAX_EXP__) { sub __DEC64_MAX_EXP__() { 385 } }

unless (defined &__DEC64_MAX__) { sub __DEC64_MAX__() { "9\.999999999999999E384DD" } }

unless (defined &__DEC64_MIN_EXP__) { sub __DEC64_MIN_EXP__() { -382 } }

unless (defined &__DEC64_MIN__) { sub __DEC64_MIN__() { "1E\-383DD" } }

unless (defined &__DEC64_SUBNORMAL_MIN__) { sub __DEC64_SUBNORMAL_MIN__() { "0\.000000000000001E\-383DD" } }

unless (defined &__DECIMAL_DIG__) { sub __DECIMAL_DIG__() { 17 } }

unless (defined &__DEC_EVAL_METHOD__) { sub __DEC_EVAL_METHOD__() { 2 } }

unless (defined &__DQ_FBIT__) { sub __DQ_FBIT__() { 63 } }

unless (defined &__DQ_IBIT__) { sub __DQ_IBIT__() { 0 } }

unless (defined &__ELF__) { sub __ELF__() { 1 } }

unless (defined &__FINITE_MATH_ONLY__) { sub __FINITE_MATH_ONLY__() { 0 } }

unless (defined &__FLOAT_WORD_ORDER__) { sub __FLOAT_WORD_ORDER__() { 1234 } }

unless (defined &__FLT_DECIMAL_DIG__) { sub __FLT_DECIMAL_DIG__() { 9 } }

unless (defined &__FLT_DENORM_MIN__) { sub __FLT_DENORM_MIN__() { 1.4012984643248171e-45 } }

unless (defined &__FLT_DIG__) { sub __FLT_DIG__() { 6 } }

unless (defined &__FLT_EPSILON__) { sub __FLT_EPSILON__() { 1.1920928955078125e-7 } }

unless (defined &__FLT_EVAL_METHOD__) { sub __FLT_EVAL_METHOD__() { 0 } }

unless (defined &__FLT_HAS_DENORM__) { sub __FLT_HAS_DENORM__() { 1 } }

unless (defined &__FLT_HAS_INFINITY__) { sub __FLT_HAS_INFINITY__() { 1 } }

unless (defined &__FLT_HAS_QUIET_NAN__) { sub __FLT_HAS_QUIET_NAN__() { 1 } }

unless (defined &__FLT_MANT_DIG__) { sub __FLT_MANT_DIG__() { 24 } }

unless (defined &__FLT_MAX_10_EXP__) { sub __FLT_MAX_10_EXP__() { 38 } }

unless (defined &__FLT_MAX_EXP__) { sub __FLT_MAX_EXP__() { 128 } }

unless (defined &__FLT_MAX__) { sub __FLT_MAX__() { 3.4028234663852886e+38 } }

unless (defined &__FLT_MIN_10_EXP__) { sub __FLT_MIN_10_EXP__() { -37 } }

unless (defined &__FLT_MIN_EXP__) { sub __FLT_MIN_EXP__() { -125 } }

unless (defined &__FLT_MIN__) { sub __FLT_MIN__() { 1.1754943508222875e-38 } }

unless (defined &__FLT_RADIX__) { sub __FLT_RADIX__() { 2 } }

unless (defined &__FRACT_EPSILON__) { sub __FRACT_EPSILON__() { "0x1P\-15R" } }

unless (defined &__FRACT_FBIT__) { sub __FRACT_FBIT__() { 15 } }

unless (defined &__FRACT_IBIT__) { sub __FRACT_IBIT__() { 0 } }

unless (defined &__FRACT_MAX__) { sub __FRACT_MAX__() { "0X7FFFP\-15R" } }

unless (defined &__FRACT_MIN__) { sub __FRACT_MIN__() { "\-0\.5R\-0\.5R" } }

unless (defined &__GCC_ATOMIC_BOOL_LOCK_FREE) { sub __GCC_ATOMIC_BOOL_LOCK_FREE() { 1 } }

unless (defined &__GCC_ATOMIC_CHAR16_T_LOCK_FREE) { sub __GCC_ATOMIC_CHAR16_T_LOCK_FREE() { 1 } }

unless (defined &__GCC_ATOMIC_CHAR32_T_LOCK_FREE) { sub __GCC_ATOMIC_CHAR32_T_LOCK_FREE() { 2 } }

unless (defined &__GCC_ATOMIC_CHAR_LOCK_FREE) { sub __GCC_ATOMIC_CHAR_LOCK_FREE() { 1 } }

unless (defined &__GCC_ATOMIC_INT_LOCK_FREE) { sub __GCC_ATOMIC_INT_LOCK_FREE() { 2 } }

unless (defined &__GCC_ATOMIC_LLONG_LOCK_FREE) { sub __GCC_ATOMIC_LLONG_LOCK_FREE() { 1 } }

unless (defined &__GCC_ATOMIC_LONG_LOCK_FREE) { sub __GCC_ATOMIC_LONG_LOCK_FREE() { 2 } }

unless (defined &__GCC_ATOMIC_POINTER_LOCK_FREE) { sub __GCC_ATOMIC_POINTER_LOCK_FREE() { 2 } }

unless (defined &__GCC_ATOMIC_SHORT_LOCK_FREE) { sub __GCC_ATOMIC_SHORT_LOCK_FREE() { 1 } }

unless (defined &__GCC_ATOMIC_TEST_AND_SET_TRUEVAL) { sub __GCC_ATOMIC_TEST_AND_SET_TRUEVAL() { 1 } }

unless (defined &__GCC_ATOMIC_WCHAR_T_LOCK_FREE) { sub __GCC_ATOMIC_WCHAR_T_LOCK_FREE() { 2 } }

unless (defined &__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4) { sub __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4() { 1 } }

unless (defined &__GCC_IEC_559) { sub __GCC_IEC_559() { 2 } }

unless (defined &__GCC_IEC_559_COMPLEX) { sub __GCC_IEC_559_COMPLEX() { 2 } }

unless (defined &__GLIBC_MINOR__) { sub __GLIBC_MINOR__() { 24 } }

unless (defined &__GLIBC__) { sub __GLIBC__() { 2 } }

unless (defined &__GNUC_MINOR__) { sub __GNUC_MINOR__() { 3 } }

unless (defined &__GNUC_PATCHLEVEL__) { sub __GNUC_PATCHLEVEL__() { 0 } }

unless (defined &__GNUC_STDC_INLINE__) { sub __GNUC_STDC_INLINE__() { 1 } }

unless (defined &__GNUC__) { sub __GNUC__() { 6 } }

unless (defined &__GNU_LIBRARY__) { sub __GNU_LIBRARY__() { 6 } }

unless (defined &__GXX_ABI_VERSION) { sub __GXX_ABI_VERSION() { 1010 } }

unless (defined &__GXX_TYPEINFO_EQUALITY_INLINE) { sub __GXX_TYPEINFO_EQUALITY_INLINE() { 0 } }

unless (defined &__HA_FBIT__) { sub __HA_FBIT__() { 7 } }

unless (defined &__HA_IBIT__) { sub __HA_IBIT__() { 8 } }

unless (defined &__HQ_FBIT__) { sub __HQ_FBIT__() { 15 } }

unless (defined &__HQ_IBIT__) { sub __HQ_IBIT__() { 0 } }

unless (defined &__INT16_C) { sub __INT16_C() { &__INT16_C } }

unless (defined &__INT16_MAX__) { sub __INT16_MAX__() { 0x7fff } }

unless (defined &__INT16_TYPE__) { sub __INT16_TYPE__() { "short\\\ int" } }

unless (defined &__INT32_C) { sub __INT32_C() { &__INT32_C } }

unless (defined &__INT32_MAX__) { sub __INT32_MAX__() { 0x7fffffff } }

unless (defined &__INT32_TYPE__) { sub __INT32_TYPE__() { "int" } }

unless (defined &__INT64_C) { sub __INT64_C() { &__INT64_C } }

unless (defined &__INT64_MAX__) { sub __INT64_MAX__() { hex('0x7fffffffffffffff') } }

unless (defined &__INT64_TYPE__) { sub __INT64_TYPE__() { "long\\\ long\\\ int" } }

unless (defined &__INT8_C) { sub __INT8_C() { &__INT8_C } }

unless (defined &__INT8_MAX__) { sub __INT8_MAX__() { 0x7f } }

unless (defined &__INT8_TYPE__) { sub __INT8_TYPE__() { "signed\\\ char" } }

unless (defined &__INTMAX_C) { sub __INTMAX_C() { &__INTMAX_C } }

unless (defined &__INTMAX_MAX__) { sub __INTMAX_MAX__() { hex('0x7fffffffffffffff') } }

unless (defined &__INTMAX_TYPE__) { sub __INTMAX_TYPE__() { "long\\\ long\\\ int" } }

unless (defined &__INTPTR_MAX__) { sub __INTPTR_MAX__() { 0x7fffffff } }

unless (defined &__INTPTR_TYPE__) { sub __INTPTR_TYPE__() { "int" } }

unless (defined &__INT_FAST16_MAX__) { sub __INT_FAST16_MAX__() { 0x7fffffff } }

unless (defined &__INT_FAST16_TYPE__) { sub __INT_FAST16_TYPE__() { "int" } }

unless (defined &__INT_FAST32_MAX__) { sub __INT_FAST32_MAX__() { 0x7fffffff } }

unless (defined &__INT_FAST32_TYPE__) { sub __INT_FAST32_TYPE__() { "int" } }

unless (defined &__INT_FAST64_MAX__) { sub __INT_FAST64_MAX__() { hex('0x7fffffffffffffff') } }

unless (defined &__INT_FAST64_TYPE__) { sub __INT_FAST64_TYPE__() { "long\\\ long\\\ int" } }

unless (defined &__INT_FAST8_MAX__) { sub __INT_FAST8_MAX__() { 0x7f } }

unless (defined &__INT_FAST8_TYPE__) { sub __INT_FAST8_TYPE__() { "signed\\\ char" } }

unless (defined &__INT_LEAST16_MAX__) { sub __INT_LEAST16_MAX__() { 0x7fff } }

unless (defined &__INT_LEAST16_TYPE__) { sub __INT_LEAST16_TYPE__() { "short\\\ int" } }

unless (defined &__INT_LEAST32_MAX__) { sub __INT_LEAST32_MAX__() { 0x7fffffff } }

unless (defined &__INT_LEAST32_TYPE__) { sub __INT_LEAST32_TYPE__() { "int" } }

unless (defined &__INT_LEAST64_MAX__) { sub __INT_LEAST64_MAX__() { hex('0x7fffffffffffffff') } }

unless (defined &__INT_LEAST64_TYPE__) { sub __INT_LEAST64_TYPE__() { "long\\\ long\\\ int" } }

unless (defined &__INT_LEAST8_MAX__) { sub __INT_LEAST8_MAX__() { 0x7f } }

unless (defined &__INT_LEAST8_TYPE__) { sub __INT_LEAST8_TYPE__() { "signed\\\ char" } }

unless (defined &__INT_MAX__) { sub __INT_MAX__() { 0x7fffffff } }

unless (defined &__LACCUM_EPSILON__) { sub __LACCUM_EPSILON__() { "0x1P\-31LK" } }

unless (defined &__LACCUM_FBIT__) { sub __LACCUM_FBIT__() { 31 } }

unless (defined &__LACCUM_IBIT__) { sub __LACCUM_IBIT__() { 32 } }

unless (defined &__LACCUM_MAX__) { sub __LACCUM_MAX__() { "0X7FFFFFFFFFFFFFFFP\-31LK" } }

unless (defined &__LACCUM_MIN__) { sub __LACCUM_MIN__() { "\-0X1P31LK\-0X1P31LK" } }

unless (defined &__LDBL_DENORM_MIN__) { sub __LDBL_DENORM_MIN__() { 4.9406564584124654e-324 } }

unless (defined &__LDBL_DIG__) { sub __LDBL_DIG__() { 15 } }

unless (defined &__LDBL_EPSILON__) { sub __LDBL_EPSILON__() { 2.2204460492503131e-16 } }

unless (defined &__LDBL_HAS_DENORM__) { sub __LDBL_HAS_DENORM__() { 1 } }

unless (defined &__LDBL_HAS_INFINITY__) { sub __LDBL_HAS_INFINITY__() { 1 } }

unless (defined &__LDBL_HAS_QUIET_NAN__) { sub __LDBL_HAS_QUIET_NAN__() { 1 } }

unless (defined &__LDBL_MANT_DIG__) { sub __LDBL_MANT_DIG__() { 53 } }

unless (defined &__LDBL_MAX_10_EXP__) { sub __LDBL_MAX_10_EXP__() { 308 } }

unless (defined &__LDBL_MAX_EXP__) { sub __LDBL_MAX_EXP__() { 1024 } }

unless (defined &__LDBL_MAX__) { sub __LDBL_MAX__() { 1.7976931348623157e+308 } }

unless (defined &__LDBL_MIN_10_EXP__) { sub __LDBL_MIN_10_EXP__() { -307 } }

unless (defined &__LDBL_MIN_EXP__) { sub __LDBL_MIN_EXP__() { -1021 } }

unless (defined &__LDBL_MIN__) { sub __LDBL_MIN__() { 2.2250738585072014e-308 } }

unless (defined &__LFRACT_EPSILON__) { sub __LFRACT_EPSILON__() { "0x1P\-31LR" } }

unless (defined &__LFRACT_FBIT__) { sub __LFRACT_FBIT__() { 31 } }

unless (defined &__LFRACT_IBIT__) { sub __LFRACT_IBIT__() { 0 } }

unless (defined &__LFRACT_MAX__) { sub __LFRACT_MAX__() { "0X7FFFFFFFP\-31LR" } }

unless (defined &__LFRACT_MIN__) { sub __LFRACT_MIN__() { "\-0\.5LR\-0\.5LR" } }

unless (defined &__LLACCUM_EPSILON__) { sub __LLACCUM_EPSILON__() { "0x1P\-31LLK" } }

unless (defined &__LLACCUM_FBIT__) { sub __LLACCUM_FBIT__() { 31 } }

unless (defined &__LLACCUM_IBIT__) { sub __LLACCUM_IBIT__() { 32 } }

unless (defined &__LLACCUM_MAX__) { sub __LLACCUM_MAX__() { "0X7FFFFFFFFFFFFFFFP\-31LLK" } }

unless (defined &__LLACCUM_MIN__) { sub __LLACCUM_MIN__() { "\-0X1P31LLK\-0X1P31LLK" } }

unless (defined &__LLFRACT_EPSILON__) { sub __LLFRACT_EPSILON__() { "0x1P\-63LLR" } }

unless (defined &__LLFRACT_FBIT__) { sub __LLFRACT_FBIT__() { 63 } }

unless (defined &__LLFRACT_IBIT__) { sub __LLFRACT_IBIT__() { 0 } }

unless (defined &__LLFRACT_MAX__) { sub __LLFRACT_MAX__() { "0X7FFFFFFFFFFFFFFFP\-63LLR" } }

unless (defined &__LLFRACT_MIN__) { sub __LLFRACT_MIN__() { "\-0\.5LLR\-0\.5LLR" } }

unless (defined &__LONG_LONG_MAX__) { sub __LONG_LONG_MAX__() { hex('0x7fffffffffffffff') } }

unless (defined &__LONG_MAX__) { sub __LONG_MAX__() { 0x7fffffff } }

unless (defined &__ORDER_BIG_ENDIAN__) { sub __ORDER_BIG_ENDIAN__() { 4321 } }

unless (defined &__ORDER_LITTLE_ENDIAN__) { sub __ORDER_LITTLE_ENDIAN__() { 1234 } }

unless (defined &__ORDER_PDP_ENDIAN__) { sub __ORDER_PDP_ENDIAN__() { 3412 } }

unless (defined &__PRAGMA_REDEFINE_EXTNAME) { sub __PRAGMA_REDEFINE_EXTNAME() { 1 } }

unless (defined &__PTRDIFF_MAX__) { sub __PTRDIFF_MAX__() { 0x7fffffff } }

unless (defined &__PTRDIFF_TYPE__) { sub __PTRDIFF_TYPE__() { "int" } }

unless (defined &__QQ_FBIT__) { sub __QQ_FBIT__() { 7 } }

unless (defined &__QQ_IBIT__) { sub __QQ_IBIT__() { 0 } }

unless (defined &__SACCUM_EPSILON__) { sub __SACCUM_EPSILON__() { "0x1P\-7HK" } }

unless (defined &__SACCUM_FBIT__) { sub __SACCUM_FBIT__() { 7 } }

unless (defined &__SACCUM_IBIT__) { sub __SACCUM_IBIT__() { 8 } }

unless (defined &__SACCUM_MAX__) { sub __SACCUM_MAX__() { "0X7FFFP\-7HK" } }

unless (defined &__SACCUM_MIN__) { sub __SACCUM_MIN__() { "\-0X1P7HK\-0X1P7HK" } }

unless (defined &__SA_FBIT__) { sub __SA_FBIT__() { 15 } }

unless (defined &__SA_IBIT__) { sub __SA_IBIT__() { 16 } }

unless (defined &__SCHAR_MAX__) { sub __SCHAR_MAX__() { 0x7f } }

unless (defined &__SFRACT_EPSILON__) { sub __SFRACT_EPSILON__() { "0x1P\-7HR" } }

unless (defined &__SFRACT_FBIT__) { sub __SFRACT_FBIT__() { 7 } }

unless (defined &__SFRACT_IBIT__) { sub __SFRACT_IBIT__() { 0 } }

unless (defined &__SFRACT_MAX__) { sub __SFRACT_MAX__() { "0X7FP\-7HR" } }

unless (defined &__SFRACT_MIN__) { sub __SFRACT_MIN__() { "\-0\.5HR\-0\.5HR" } }

unless (defined &__SHRT_MAX__) { sub __SHRT_MAX__() { 0x7fff } }

unless (defined &__SIG_ATOMIC_MAX__) { sub __SIG_ATOMIC_MAX__() { 0x7fffffff } }

unless (defined &__SIG_ATOMIC_MIN__) { sub __SIG_ATOMIC_MIN__() { "\-0x7fffffff\\\ \-\\\ 1" } }

unless (defined &__SIG_ATOMIC_TYPE__) { sub __SIG_ATOMIC_TYPE__() { "int" } }

unless (defined &__SIZEOF_DOUBLE__) { sub __SIZEOF_DOUBLE__() { 8 } }

unless (defined &__SIZEOF_FLOAT__) { sub __SIZEOF_FLOAT__() { 4 } }

unless (defined &__SIZEOF_INT__) { sub __SIZEOF_INT__() { 4 } }

unless (defined &__SIZEOF_LONG_DOUBLE__) { sub __SIZEOF_LONG_DOUBLE__() { 8 } }

unless (defined &__SIZEOF_LONG_LONG__) { sub __SIZEOF_LONG_LONG__() { 8 } }

unless (defined &__SIZEOF_LONG__) { sub __SIZEOF_LONG__() { 4 } }

unless (defined &__SIZEOF_POINTER__) { sub __SIZEOF_POINTER__() { 4 } }

unless (defined &__SIZEOF_PTRDIFF_T__) { sub __SIZEOF_PTRDIFF_T__() { 4 } }

unless (defined &__SIZEOF_SHORT__) { sub __SIZEOF_SHORT__() { 2 } }

unless (defined &__SIZEOF_SIZE_T__) { sub __SIZEOF_SIZE_T__() { 4 } }

unless (defined &__SIZEOF_WCHAR_T__) { sub __SIZEOF_WCHAR_T__() { 4 } }

unless (defined &__SIZEOF_WINT_T__) { sub __SIZEOF_WINT_T__() { 4 } }

unless (defined &__SIZE_MAX__) { sub __SIZE_MAX__() { 0xffffffff } }

unless (defined &__SIZE_TYPE__) { sub __SIZE_TYPE__() { "unsigned\\\ int" } }

unless (defined &__SQ_FBIT__) { sub __SQ_FBIT__() { 31 } }

unless (defined &__SQ_IBIT__) { sub __SQ_IBIT__() { 0 } }

unless (defined &__STDC_HOSTED__) { sub __STDC_HOSTED__() { 1 } }

unless (defined &__STDC_IEC_559_COMPLEX__) { sub __STDC_IEC_559_COMPLEX__() { 1 } }

unless (defined &__STDC_IEC_559__) { sub __STDC_IEC_559__() { 1 } }

unless (defined &__STDC_ISO_10646__) { sub __STDC_ISO_10646__() { 201605 } }

unless (defined &__STDC_NO_THREADS__) { sub __STDC_NO_THREADS__() { 1 } }

unless (defined &__STDC_UTF_16__) { sub __STDC_UTF_16__() { 1 } }

unless (defined &__STDC_UTF_32__) { sub __STDC_UTF_32__() { 1 } }

unless (defined &__STDC_VERSION__) { sub __STDC_VERSION__() { 201112 } }

unless (defined &__STDC__) { sub __STDC__() { 1 } }

unless (defined &__TA_FBIT__) { sub __TA_FBIT__() { 63 } }

unless (defined &__TA_IBIT__) { sub __TA_IBIT__() { 64 } }

unless (defined &__THUMB_INTERWORK__) { sub __THUMB_INTERWORK__() { 1 } }

unless (defined &__TQ_FBIT__) { sub __TQ_FBIT__() { 127 } }

unless (defined &__TQ_IBIT__) { sub __TQ_IBIT__() { 0 } }

unless (defined &__UACCUM_EPSILON__) { sub __UACCUM_EPSILON__() { "0x1P\-16UK" } }

unless (defined &__UACCUM_FBIT__) { sub __UACCUM_FBIT__() { 16 } }

unless (defined &__UACCUM_IBIT__) { sub __UACCUM_IBIT__() { 16 } }

unless (defined &__UACCUM_MAX__) { sub __UACCUM_MAX__() { "0XFFFFFFFFP\-16UK" } }

unless (defined &__UACCUM_MIN__) { sub __UACCUM_MIN__() { "0\.0UK" } }

unless (defined &__UDA_FBIT__) { sub __UDA_FBIT__() { 32 } }

unless (defined &__UDA_IBIT__) { sub __UDA_IBIT__() { 32 } }

unless (defined &__UDQ_FBIT__) { sub __UDQ_FBIT__() { 64 } }

unless (defined &__UDQ_IBIT__) { sub __UDQ_IBIT__() { 0 } }

unless (defined &__UFRACT_EPSILON__) { sub __UFRACT_EPSILON__() { "0x1P\-16UR" } }

unless (defined &__UFRACT_FBIT__) { sub __UFRACT_FBIT__() { 16 } }

unless (defined &__UFRACT_IBIT__) { sub __UFRACT_IBIT__() { 0 } }

unless (defined &__UFRACT_MAX__) { sub __UFRACT_MAX__() { "0XFFFFP\-16UR" } }

unless (defined &__UFRACT_MIN__) { sub __UFRACT_MIN__() { "0\.0UR" } }

unless (defined &__UHA_FBIT__) { sub __UHA_FBIT__() { 8 } }

unless (defined &__UHA_IBIT__) { sub __UHA_IBIT__() { 8 } }

unless (defined &__UHQ_FBIT__) { sub __UHQ_FBIT__() { 16 } }

unless (defined &__UHQ_IBIT__) { sub __UHQ_IBIT__() { 0 } }

unless (defined &__UINT16_C) { sub __UINT16_C() { &__UINT16_C } }

unless (defined &__UINT16_MAX__) { sub __UINT16_MAX__() { 0xffff } }

unless (defined &__UINT16_TYPE__) { sub __UINT16_TYPE__() { "short\\\ unsigned\\\ int" } }

unless (defined &__UINT32_C) { sub __UINT32_C() { &__UINT32_C } }

unless (defined &__UINT32_MAX__) { sub __UINT32_MAX__() { 0xffffffff } }

unless (defined &__UINT32_TYPE__) { sub __UINT32_TYPE__() { "unsigned\\\ int" } }

unless (defined &__UINT64_C) { sub __UINT64_C() { &__UINT64_C } }

unless (defined &__UINT64_MAX__) { sub __UINT64_MAX__() { hex('0xffffffffffffffff') } }

unless (defined &__UINT64_TYPE__) { sub __UINT64_TYPE__() { "long\\\ long\\\ unsigned\\\ int" } }

unless (defined &__UINT8_C) { sub __UINT8_C() { &__UINT8_C } }

unless (defined &__UINT8_MAX__) { sub __UINT8_MAX__() { 0xff } }

unless (defined &__UINT8_TYPE__) { sub __UINT8_TYPE__() { "unsigned\\\ char" } }

unless (defined &__UINTMAX_C) { sub __UINTMAX_C() { &__UINTMAX_C } }

unless (defined &__UINTMAX_MAX__) { sub __UINTMAX_MAX__() { hex('0xffffffffffffffff') } }

unless (defined &__UINTMAX_TYPE__) { sub __UINTMAX_TYPE__() { "long\\\ long\\\ unsigned\\\ int" } }

unless (defined &__UINTPTR_MAX__) { sub __UINTPTR_MAX__() { 0xffffffff } }

unless (defined &__UINTPTR_TYPE__) { sub __UINTPTR_TYPE__() { "unsigned\\\ int" } }

unless (defined &__UINT_FAST16_MAX__) { sub __UINT_FAST16_MAX__() { 0xffffffff } }

unless (defined &__UINT_FAST16_TYPE__) { sub __UINT_FAST16_TYPE__() { "unsigned\\\ int" } }

unless (defined &__UINT_FAST32_MAX__) { sub __UINT_FAST32_MAX__() { 0xffffffff } }

unless (defined &__UINT_FAST32_TYPE__) { sub __UINT_FAST32_TYPE__() { "unsigned\\\ int" } }

unless (defined &__UINT_FAST64_MAX__) { sub __UINT_FAST64_MAX__() { hex('0xffffffffffffffff') } }

unless (defined &__UINT_FAST64_TYPE__) { sub __UINT_FAST64_TYPE__() { "long\\\ long\\\ unsigned\\\ int" } }

unless (defined &__UINT_FAST8_MAX__) { sub __UINT_FAST8_MAX__() { 0xff } }

unless (defined &__UINT_FAST8_TYPE__) { sub __UINT_FAST8_TYPE__() { "unsigned\\\ char" } }

unless (defined &__UINT_LEAST16_MAX__) { sub __UINT_LEAST16_MAX__() { 0xffff } }

unless (defined &__UINT_LEAST16_TYPE__) { sub __UINT_LEAST16_TYPE__() { "short\\\ unsigned\\\ int" } }

unless (defined &__UINT_LEAST32_MAX__) { sub __UINT_LEAST32_MAX__() { 0xffffffff } }

unless (defined &__UINT_LEAST32_TYPE__) { sub __UINT_LEAST32_TYPE__() { "unsigned\\\ int" } }

unless (defined &__UINT_LEAST64_MAX__) { sub __UINT_LEAST64_MAX__() { hex('0xffffffffffffffff') } }

unless (defined &__UINT_LEAST64_TYPE__) { sub __UINT_LEAST64_TYPE__() { "long\\\ long\\\ unsigned\\\ int" } }

unless (defined &__UINT_LEAST8_MAX__) { sub __UINT_LEAST8_MAX__() { 0xff } }

unless (defined &__UINT_LEAST8_TYPE__) { sub __UINT_LEAST8_TYPE__() { "unsigned\\\ char" } }

unless (defined &__ULACCUM_EPSILON__) { sub __ULACCUM_EPSILON__() { "0x1P\-32ULK" } }

unless (defined &__ULACCUM_FBIT__) { sub __ULACCUM_FBIT__() { 32 } }

unless (defined &__ULACCUM_IBIT__) { sub __ULACCUM_IBIT__() { 32 } }

unless (defined &__ULACCUM_MAX__) { sub __ULACCUM_MAX__() { "0XFFFFFFFFFFFFFFFFP\-32ULK" } }

unless (defined &__ULACCUM_MIN__) { sub __ULACCUM_MIN__() { "0\.0ULK" } }

unless (defined &__ULFRACT_EPSILON__) { sub __ULFRACT_EPSILON__() { "0x1P\-32ULR" } }

unless (defined &__ULFRACT_FBIT__) { sub __ULFRACT_FBIT__() { 32 } }

unless (defined &__ULFRACT_IBIT__) { sub __ULFRACT_IBIT__() { 0 } }

unless (defined &__ULFRACT_MAX__) { sub __ULFRACT_MAX__() { "0XFFFFFFFFP\-32ULR" } }

unless (defined &__ULFRACT_MIN__) { sub __ULFRACT_MIN__() { "0\.0ULR" } }

unless (defined &__ULLACCUM_EPSILON__) { sub __ULLACCUM_EPSILON__() { "0x1P\-32ULLK" } }

unless (defined &__ULLACCUM_FBIT__) { sub __ULLACCUM_FBIT__() { 32 } }

unless (defined &__ULLACCUM_IBIT__) { sub __ULLACCUM_IBIT__() { 32 } }

unless (defined &__ULLACCUM_MAX__) { sub __ULLACCUM_MAX__() { "0XFFFFFFFFFFFFFFFFP\-32ULLK" } }

unless (defined &__ULLACCUM_MIN__) { sub __ULLACCUM_MIN__() { "0\.0ULLK" } }

unless (defined &__ULLFRACT_EPSILON__) { sub __ULLFRACT_EPSILON__() { "0x1P\-64ULLR" } }

unless (defined &__ULLFRACT_FBIT__) { sub __ULLFRACT_FBIT__() { 64 } }

unless (defined &__ULLFRACT_IBIT__) { sub __ULLFRACT_IBIT__() { 0 } }

unless (defined &__ULLFRACT_MAX__) { sub __ULLFRACT_MAX__() { "0XFFFFFFFFFFFFFFFFP\-64ULLR" } }

unless (defined &__ULLFRACT_MIN__) { sub __ULLFRACT_MIN__() { "0\.0ULLR" } }

unless (defined &__UQQ_FBIT__) { sub __UQQ_FBIT__() { 8 } }

unless (defined &__UQQ_IBIT__) { sub __UQQ_IBIT__() { 0 } }

unless (defined &__USACCUM_EPSILON__) { sub __USACCUM_EPSILON__() { "0x1P\-8UHK" } }

unless (defined &__USACCUM_FBIT__) { sub __USACCUM_FBIT__() { 8 } }

unless (defined &__USACCUM_IBIT__) { sub __USACCUM_IBIT__() { 8 } }

unless (defined &__USACCUM_MAX__) { sub __USACCUM_MAX__() { "0XFFFFP\-8UHK" } }

unless (defined &__USACCUM_MIN__) { sub __USACCUM_MIN__() { "0\.0UHK" } }

unless (defined &__USA_FBIT__) { sub __USA_FBIT__() { 16 } }

unless (defined &__USA_IBIT__) { sub __USA_IBIT__() { 16 } }

unless (defined &__USE_FILE_OFFSET64) { sub __USE_FILE_OFFSET64() { 1 } }

unless (defined &__USE_GNU) { sub __USE_GNU() { 1 } }

unless (defined &__USE_LARGEFILE) { sub __USE_LARGEFILE() { 1 } }

unless (defined &__USE_LARGEFILE64) { sub __USE_LARGEFILE64() { 1 } }

unless (defined &__USE_MISC) { sub __USE_MISC() { 1 } }

unless (defined &__USE_POSIX) { sub __USE_POSIX() { 1 } }

unless (defined &__USE_POSIX199309) { sub __USE_POSIX199309() { 1 } }

unless (defined &__USE_POSIX199506) { sub __USE_POSIX199506() { 1 } }

unless (defined &__USE_POSIX2) { sub __USE_POSIX2() { 1 } }

unless (defined &__USE_REENTRANT) { sub __USE_REENTRANT() { 1 } }

unless (defined &__USE_UNIX98) { sub __USE_UNIX98() { 1 } }

unless (defined &__USE_XOPEN) { sub __USE_XOPEN() { 1 } }

unless (defined &__USE_XOPEN_EXTENDED) { sub __USE_XOPEN_EXTENDED() { 1 } }

unless (defined &__USFRACT_EPSILON__) { sub __USFRACT_EPSILON__() { "0x1P\-8UHR" } }

unless (defined &__USFRACT_FBIT__) { sub __USFRACT_FBIT__() { 8 } }

unless (defined &__USFRACT_IBIT__) { sub __USFRACT_IBIT__() { 0 } }

unless (defined &__USFRACT_MAX__) { sub __USFRACT_MAX__() { "0XFFP\-8UHR" } }

unless (defined &__USFRACT_MIN__) { sub __USFRACT_MIN__() { "0\.0UHR" } }

unless (defined &__USQ_FBIT__) { sub __USQ_FBIT__() { 32 } }

unless (defined &__USQ_IBIT__) { sub __USQ_IBIT__() { 0 } }

unless (defined &__UTA_FBIT__) { sub __UTA_FBIT__() { 64 } }

unless (defined &__UTA_IBIT__) { sub __UTA_IBIT__() { 64 } }

unless (defined &__UTQ_FBIT__) { sub __UTQ_FBIT__() { 128 } }

unless (defined &__UTQ_IBIT__) { sub __UTQ_IBIT__() { 0 } }

unless (defined &__VERSION__) { sub __VERSION__() { "\"6\.3\.0\\\ 20170516\"" } }

unless (defined &__VFP_FP__) { sub __VFP_FP__() { 1 } }

unless (defined &__WCHAR_MAX__) { sub __WCHAR_MAX__() { 0xffffffff } }

unless (defined &__WCHAR_MIN__) { sub __WCHAR_MIN__() { 0 } }

unless (defined &__WCHAR_TYPE__) { sub __WCHAR_TYPE__() { "unsigned\\\ int" } }

unless (defined &__WINT_MAX__) { sub __WINT_MAX__() { 0xffffffff } }

unless (defined &__WINT_MIN__) { sub __WINT_MIN__() { 0 } }

unless (defined &__WINT_TYPE__) { sub __WINT_TYPE__() { "unsigned\\\ int" } }

unless (defined &__arm__) { sub __arm__() { 1 } }

unless (defined &__gnu_linux__) { sub __gnu_linux__() { 1 } }

unless (defined &__has_include) { sub __has_include() { &__has_include } }

unless (defined &__has_include_next) { sub __has_include_next() { &__has_include_next } }

unless (defined &__linux) { sub __linux() { 1 } }

unless (defined &__linux__) { sub __linux__() { 1 } }

unless (defined &__unix) { sub __unix() { 1 } }

unless (defined &__unix__) { sub __unix__() { 1 } }

unless (defined &linux) { sub linux() { 1 } }

unless (defined &unix) { sub unix() { 1 } }


1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  package attributes;

our $VERSION = 0.27;

@EXPORT_OK = qw(get reftype);
@EXPORT = ();
%EXPORT_TAGS = (ALL => [@EXPORT, @EXPORT_OK]);

use strict;

sub croak {
    require Carp;
    goto &Carp::croak;
}

sub carp {
    require Carp;
    goto &Carp::carp;
}

my %deprecated;
$deprecated{CODE} = qr/\A-?(locked)\z/;
$deprecated{ARRAY} = $deprecated{HASH} = $deprecated{SCALAR}
    = qr/\A-?(unique)\z/;

my %msg = (
    lvalue => 'lvalue attribute applied to already-defined subroutine',
   -lvalue => 'lvalue attribute removed from already-defined subroutine',
    const  => 'Useless use of attribute "const"',
);

sub _modify_attrs_and_deprecate {
    my $svtype = shift;
    # Now that we've removed handling of locked from the XS code, we need to
    # remove it here, else it ends up in @badattrs. (If we do the deprecation in
    # XS, we can't control the warning based on *our* caller's lexical settings,
    # and the warned line is in this package)
    grep {
	$deprecated{$svtype} && /$deprecated{$svtype}/ ? do {
	    require warnings;
	    warnings::warnif('deprecated', "Attribute \"$1\" is deprecated");
	    0;
	} : $svtype eq 'CODE' && exists $msg{$_} ? do {
	    require warnings;
	    warnings::warnif(
		'misc',
		 $msg{$_}
	    );
	    0;
	} : 1
    } _modify_attrs(@_);
}

sub import {
    @_ > 2 && ref $_[2] or do {
	require Exporter;
	goto &Exporter::import;
    };
    my (undef,$home_stash,$svref,@attrs) = @_;

    my $svtype = uc reftype($svref);
    my $pkgmeth;
    $pkgmeth = UNIVERSAL::can($home_stash, "MODIFY_${svtype}_ATTRIBUTES")
	if defined $home_stash && $home_stash ne '';
    my @badattrs;
    if ($pkgmeth) {
	my @pkgattrs = _modify_attrs_and_deprecate($svtype, $svref, @attrs);
	@badattrs = $pkgmeth->($home_stash, $svref, @pkgattrs);
	if (!@badattrs && @pkgattrs) {
            require warnings;
	    return unless warnings::enabled('reserved');
	    @pkgattrs = grep { m/\A[[:lower:]]+(?:\z|\()/ } @pkgattrs;
	    if (@pkgattrs) {
		for my $attr (@pkgattrs) {
		    $attr =~ s/\(.+\z//s;
		}
		my $s = ((@pkgattrs == 1) ? '' : 's');
		carp "$svtype package attribute$s " .
		    "may clash with future reserved word$s: " .
		    join(' : ' , @pkgattrs);
	    }
	}
    }
    else {
	@badattrs = _modify_attrs_and_deprecate($svtype, $svref, @attrs);
    }
    if (@badattrs) {
	croak "Invalid $svtype attribute" .
	    (( @badattrs == 1 ) ? '' : 's') .
	    ": " .
	    join(' : ', @badattrs);
    }
}

sub get ($) {
    @_ == 1  && ref $_[0] or
	croak 'Usage: '.__PACKAGE__.'::get $ref';
    my $svref = shift;
    my $svtype = uc reftype($svref);
    my $stash = _guess_stash($svref);
    $stash = caller unless defined $stash;
    my $pkgmeth;
    $pkgmeth = UNIVERSAL::can($stash, "FETCH_${svtype}_ATTRIBUTES")
	if defined $stash && $stash ne '';
    return $pkgmeth ?
		(_fetch_attrs($svref), $pkgmeth->($stash, $svref)) :
		(_fetch_attrs($svref))
	;
}

sub require_version { goto &UNIVERSAL::VERSION }

require XSLoader;
XSLoader::load();

1;
__END__
#The POD goes here

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # $Id: encoding.pm,v 2.17 2015/09/15 13:53:27 dankogai Exp dankogai $
package encoding;
our $VERSION = sprintf "%d.%02d", q$Revision: 2.17 $ =~ /(\d+)/g;

use Encode;
use strict;
use warnings;

use constant {
    DEBUG => !!$ENV{PERL_ENCODE_DEBUG},
    HAS_PERLIO => eval { require PerlIO::encoding; PerlIO::encoding->VERSION(0.02) },
    PERL_5_21_7 => $^V && $^V ge v5.21.7,
};

sub _exception {
    my $name = shift;
    $] > 5.008 and return 0;    # 5.8.1 or higher then no
    my %utfs = map { $_ => 1 }
      qw(utf8 UCS-2BE UCS-2LE UTF-16 UTF-16BE UTF-16LE
      UTF-32 UTF-32BE UTF-32LE);
    $utfs{$name} or return 0;    # UTFs or no
    require Config;
    Config->import();
    our %Config;
    return $Config{perl_patchlevel} ? 0 : 1    # maintperl then no
}

sub in_locale { $^H & ( $locale::hint_bits || 0 ) }

sub _get_locale_encoding {
    my $locale_encoding;

    if ($^O eq 'MSWin32') {
        my @tries = (
            # First try to get the OutputCP. This will work only if we
            # are attached to a console
            'Win32.pm' => 'Win32::GetConsoleOutputCP',
            'Win32/Console.pm' => 'Win32::Console::OutputCP',
            # If above failed, this means that we are a GUI app
            # Let's assume that the ANSI codepage is what matters
            'Win32.pm' => 'Win32::GetACP',
        );
        while (@tries) {
            my $cp = eval {
                require $tries[0];
                no strict 'refs';
                &{$tries[1]}()
            };
            if ($cp) {
                if ($cp == 65001) { # Code page for UTF-8
                    $locale_encoding = 'UTF-8';
                } else {
                    $locale_encoding = 'cp' . $cp;
                }
                return $locale_encoding;
            }
            splice(@tries, 0, 2)
        }
    }

    # I18N::Langinfo isn't available everywhere
    $locale_encoding = eval {
        require I18N::Langinfo;
        find_encoding(
            I18N::Langinfo::langinfo( I18N::Langinfo::CODESET() )
        )->name
    };
    return $locale_encoding if defined $locale_encoding;

    eval {
        require POSIX;
        # Get the current locale
        # Remember that MSVCRT impl is quite different from Unixes
        my $locale = POSIX::setlocale(POSIX::LC_CTYPE());
        if ( $locale =~ /^([^.]+)\.([^.@]+)(?:@.*)?$/ ) {
            my $country_language;
            ( $country_language, $locale_encoding ) = ( $1, $2 );

            # Could do more heuristics based on the country and language
            # since we have Locale::Country and Locale::Language available.
            # TODO: get a database of Language -> Encoding mappings
            # (the Estonian database at http://www.eki.ee/letter/
            # would be excellent!) --jhi
            if (lc($locale_encoding) eq 'euc') {
                if ( $country_language =~ /^ja_JP|japan(?:ese)?$/i ) {
                    $locale_encoding = 'euc-jp';
                }
                elsif ( $country_language =~ /^ko_KR|korean?$/i ) {
                    $locale_encoding = 'euc-kr';
                }
                elsif ( $country_language =~ /^zh_CN|chin(?:a|ese)$/i ) {
                    $locale_encoding = 'euc-cn';
                }
                elsif ( $country_language =~ /^zh_TW|taiwan(?:ese)?$/i ) {
                    $locale_encoding = 'euc-tw';
                }
                else {
                    require Carp;
                    Carp::croak(
                        "encoding: Locale encoding '$locale_encoding' too ambiguous"
                    );
                }
            }
        }
    };

    return $locale_encoding;
}

sub import {

    if ( ord("A") == 193 ) {
        require Carp;
        Carp::croak("encoding: pragma does not support EBCDIC platforms");
    }

    if ($] >= 5.017) {
	warnings::warnif("deprecated",
			 "Use of the encoding pragma is deprecated")
    }
    my $class = shift;
    my $name  = shift;
    if (!$name){
	require Carp;
        Carp::croak("encoding: no encoding specified.");
    }
    if ( $name eq ':_get_locale_encoding' ) {    # used by lib/open.pm
        my $caller = caller();
        {
            no strict 'refs';
            *{"${caller}::_get_locale_encoding"} = \&_get_locale_encoding;
        }
        return;
    }
    $name = _get_locale_encoding() if $name eq ':locale';
    my %arg = @_;
    $name = $ENV{PERL_ENCODING} unless defined $name;
    my $enc = find_encoding($name);
    unless ( defined $enc ) {
        require Carp;
        Carp::croak("encoding: Unknown encoding '$name'");
    }
    $name = $enc->name;    # canonize
    unless ( $arg{Filter} ) {
        DEBUG and warn "_exception($name) = ", _exception($name);
        if (! _exception($name)) {
            if (!PERL_5_21_7) {
                ${^ENCODING} = $enc;
            }
            else {
                # Starting with 5.21.7, this pragma uses a shadow variable
                # designed explicitly for it, ${^E_NCODING}, to enforce
                # lexical scope; instead of ${^ENCODING}.
                $^H{'encoding'} = 1;
                ${^E_NCODING} = $enc;
            }
        }
        HAS_PERLIO or return 1;
    }
    else {
        defined( ${^ENCODING} ) and undef ${^ENCODING};
        undef ${^E_NCODING} if PERL_5_21_7;

        # implicitly 'use utf8'
        require utf8;      # to fetch $utf8::hint_bits;
        $^H |= $utf8::hint_bits;
        eval {
            require Filter::Util::Call;
            Filter::Util::Call->import;
            filter_add(
                sub {
                    my $status = filter_read();
                    if ( $status > 0 ) {
                        $_ = $enc->decode( $_, 1 );
                        DEBUG and warn $_;
                    }
                    $status;
                }
            );
        };
        $@ eq '' and DEBUG and warn "Filter installed";
    }
    defined ${^UNICODE} and ${^UNICODE} != 0 and return 1;
    for my $h (qw(STDIN STDOUT)) {
        if ( $arg{$h} ) {
            unless ( defined find_encoding( $arg{$h} ) ) {
                require Carp;
                Carp::croak(
                    "encoding: Unknown encoding for $h, '$arg{$h}'");
            }
            eval { binmode( $h, ":raw :encoding($arg{$h})" ) };
        }
        else {
            unless ( exists $arg{$h} ) {
                eval {
                    no warnings 'uninitialized';
                    binmode( $h, ":raw :encoding($name)" );
                };
            }
        }
        if ($@) {
            require Carp;
            Carp::croak($@);
        }
    }
    return 1;    # I doubt if we need it, though
}

sub unimport {
    no warnings;
    undef ${^ENCODING};
    undef ${^E_NCODING} if PERL_5_21_7;
    if (HAS_PERLIO) {
        binmode( STDIN,  ":raw" );
        binmode( STDOUT, ":raw" );
    }
    else {
        binmode(STDIN);
        binmode(STDOUT);
    }
    if ( $INC{"Filter/Util/Call.pm"} ) {
        eval { filter_del() };
    }
}

1;
__END__

=pod

=head1 NAME

encoding - allows you to write your script in non-ASCII and non-UTF-8

=head1 WARNING

This module has been deprecated since perl v5.18.  See L</DESCRIPTION> and
L</BUGS>.

=head1 SYNOPSIS

  use encoding "greek";  # Perl like Greek to you?
  use encoding "euc-jp"; # Jperl!

  # or you can even do this if your shell supports your native encoding

  perl -Mencoding=latin2 -e'...' # Feeling centrally European?
  perl -Mencoding=euc-kr -e'...' # Or Korean?

  # more control

  # A simple euc-cn => utf-8 converter
  use encoding "euc-cn", STDOUT => "utf8";  while(<>){print};

  # "no encoding;" supported
  no encoding;

  # an alternate way, Filter
  use encoding "euc-jp", Filter=>1;
  # now you can use kanji identifiers -- in euc-jp!

  # encode based on the current locale - specialized purposes only;
  # fraught with danger!!
  use encoding ':locale';

=head1 DESCRIPTION

This pragma is used to enable a Perl script to be written in encodings that
aren't strictly ASCII nor UTF-8.  It translates all or portions of the Perl
program script from a given encoding into UTF-8, and changes the PerlIO layers
of C<STDIN> and C<STDOUT> to the encoding specified.

This pragma dates from the days when UTF-8-enabled editors were uncommon.  But
that was long ago, and the need for it is greatly diminished.  That, coupled
with the fact that it doesn't work with threads, along with other problems,
(see L</BUGS>) have led to its being deprecated.  It is planned to remove this
pragma in a future Perl version.  New code should be written in UTF-8, and the
C<use utf8> pragma used instead (see L<perluniintro> and L<utf8> for details).
Old code should be converted to UTF-8, via something like the recipe in the
L</SYNOPSIS> (though this simple approach may require manual adjustments
afterwards).

The only legitimate use of this pragma is almost certainly just one per file,
near the top, with file scope, as the file is likely going to only be written
in one encoding.  Further restrictions apply in Perls before v5.22 (see
L</Prior to Perl v5.22>).

There are two basic modes of operation (plus turning if off):

=over 4

=item C<use encoding ['I<ENCNAME>'] ;>

This is the normal operation.  It translates various literals encountered in
the Perl source file from the encoding I<ENCNAME> into UTF-8, and similarly
converts character code points.  This is used when the script is a combination
of ASCII (for the variable names and punctuation, I<etc>), but the literal
data is in the specified encoding.

I<ENCNAME> is optional.  If omitted, the encoding specified in the environment
variable L<C<PERL_ENCODING>|perlrun/PERL_ENCODING> is used.  If this isn't
set, or the resolved-to encoding is not known to C<L<Encode>>, the error
C<Unknown encoding 'I<ENCNAME>'> will be thrown.

Starting in Perl v5.8.6 (C<Encode> version 2.0.1), I<ENCNAME> may be the
name C<:locale>.  This is for very specialized applications, and is documented
in L</The C<:locale> sub-pragma> below.

The literals that are converted are C<q//, qq//, qr//, qw///, qx//>, and
starting in v5.8.1, C<tr///>.  Operations that do conversions include C<chr>,
C<ord>, C<utf8::upgrade> (but not C<utf8::downgrade>), and C<chomp>.

Also starting in v5.8.1, the C<DATA> pseudo-filehandle is translated from the
encoding into UTF-8.

For example, you can write code in EUC-JP as follows:

  my $Rakuda = "\xF1\xD1\xF1\xCC"; # Camel in Kanji
               #<-char-><-char->   # 4 octets
  s/\bCamel\b/$Rakuda/;

And with C<use encoding "euc-jp"> in effect, it is the same thing as
that code in UTF-8:

  my $Rakuda = "\x{99F1}\x{99DD}"; # two Unicode Characters
  s/\bCamel\b/$Rakuda/;

See L</EXAMPLE> below for a more complete example.

Unless C<${^UNICODE}> (available starting in v5.8.2) exists and is non-zero, the
PerlIO layers of C<STDIN> and C<STDOUT> are set to "C<:encoding(I<ENCNAME>)>".
Therefore,

  use encoding "euc-jp";
  my $message = "Camel is the symbol of perl.\n";
  my $Rakuda = "\xF1\xD1\xF1\xCC"; # Camel in Kanji
  $message =~ s/\bCamel\b/$Rakuda/;
  print $message;

will print

 "\xF1\xD1\xF1\xCC is the symbol of perl.\n"

not

 "\x{99F1}\x{99DD} is the symbol of perl.\n"

You can override this by giving extra arguments; see below.

Note that C<STDERR> WILL NOT be changed, regardless.

Also note that non-STD file handles remain unaffected.  Use C<use
open> or C<binmode> to change the layers of those.

=item C<use encoding I<ENCNAME> Filter=E<gt>1;>

This operates as above, but the C<Filter> argument with a non-zero
value causes the entire script, and not just literals, to be translated from
the encoding into UTF-8.  This allows identifiers in the source to be in that
encoding as well.  (Problems may occur if the encoding is not a superset of
ASCII; imagine all your semi-colons being translated into something
different.)  One can use this form to make

 ${"\x{4eba}"}++

work.  (This is equivalent to C<$I<human>++>, where I<human> is a single Han
ideograph).

This effectively means that your source code behaves as if it were written in
UTF-8 with C<'use utf8>' in effect.  So even if your editor only supports
Shift_JIS, for example, you can still try examples in Chapter 15 of
C<Programming Perl, 3rd Ed.>.

This option is significantly slower than the other one.

=item C<no encoding;>

Unsets the script encoding. The layers of C<STDIN>, C<STDOUT> are
reset to "C<:raw>" (the default unprocessed raw stream of bytes).

=back

=head1 OPTIONS

=head2 Setting C<STDIN> and/or C<STDOUT> individually

The encodings of C<STDIN> and C<STDOUT> are individually settable by parameters to
the pragma:

 use encoding 'euc-tw', STDIN => 'greek'  ...;

In this case, you cannot omit the first I<ENCNAME>.  C<< STDIN => undef >>
turns the I/O transcoding completely off for that filehandle.

When C<${^UNICODE}> (available starting in v5.8.2) exists and is non-zero,
these options will be completely ignored.  See L<perlvar/C<${^UNICODE}>> and
L<"C<-C>" in perlrun|perlrun/-C [numberE<sol>list]> for details.

=head2 The C<:locale> sub-pragma

Starting in v5.8.6, the encoding name may be C<:locale>.  This means that the
encoding is taken from the current locale, and not hard-coded by the pragma.
Since a script really can only be encoded in exactly one encoding, this option
is dangerous.  It makes sense only if the script itself is written in ASCII,
and all the possible locales that will be in use when the script is executed
are supersets of ASCII.  That means that the script itself doesn't get
changed, but the I/O handles have the specified encoding added, and the
operations like C<chr> and C<ord> use that encoding.

The logic of finding which locale C<:locale> uses is as follows:

=over 4

=item 1.

If the platform supports the C<langinfo(CODESET)> interface, the codeset
returned is used as the default encoding for the open pragma.

=item 2.

If 1. didn't work but we are under the locale pragma, the environment
variables C<LC_ALL> and C<LANG> (in that order) are matched for encodings
(the part after "C<.>", if any), and if any found, that is used
as the default encoding for the open pragma.

=item 3.

If 1. and 2. didn't work, the environment variables C<LC_ALL> and C<LANG>
(in that order) are matched for anything looking like UTF-8, and if
any found, C<:utf8> is used as the default encoding for the open
pragma.

=back

If your locale environment variables (C<LC_ALL>, C<LC_CTYPE>, C<LANG>)
contain the strings 'UTF-8' or 'UTF8' (case-insensitive matching),
the default encoding of your C<STDIN>, C<STDOUT>, and C<STDERR>, and of
B<any subsequent file open>, is UTF-8.

=head1 CAVEATS

=head2 SIDE EFFECTS

=over

=item *

If the C<encoding> pragma is in scope then the lengths returned are
calculated from the length of C<$/> in Unicode characters, which is not
always the same as the length of C<$/> in the native encoding.

=item *

Without this pragma, if strings operating under byte semantics and strings
with Unicode character data are concatenated, the new string will
be created by decoding the byte strings as I<ISO 8859-1 (Latin-1)>.

The B<encoding> pragma changes this to use the specified encoding
instead.  For example:

    use encoding 'utf8';
    my $string = chr(20000); # a Unicode string
    utf8::encode($string);   # now it's a UTF-8 encoded byte string
    # concatenate with another Unicode string
    print length($string . chr(20000));

Will print C<2>, because C<$string> is upgraded as UTF-8.  Without
C<use encoding 'utf8';>, it will print C<4> instead, since C<$string>
is three octets when interpreted as Latin-1.

=back

=head2 DO NOT MIX MULTIPLE ENCODINGS

Notice that only literals (string or regular expression) having only
legacy code points are affected: if you mix data like this

    \x{100}\xDF
    \xDF\x{100}

the data is assumed to be in (Latin 1 and) Unicode, not in your native
encoding.  In other words, this will match in "greek":

    "\xDF" =~ /\x{3af}/

but this will not

    "\xDF\x{100}" =~ /\x{3af}\x{100}/

since the C<\xDF> (ISO 8859-7 GREEK SMALL LETTER IOTA WITH TONOS) on
the left will B<not> be upgraded to C<\x{3af}> (Unicode GREEK SMALL
LETTER IOTA WITH TONOS) because of the C<\x{100}> on the left.  You
should not be mixing your legacy data and Unicode in the same string.

This pragma also affects encoding of the 0x80..0xFF code point range:
normally characters in that range are left as eight-bit bytes (unless
they are combined with characters with code points 0x100 or larger,
in which case all characters need to become UTF-8 encoded), but if
the C<encoding> pragma is present, even the 0x80..0xFF range always
gets UTF-8 encoded.

After all, the best thing about this pragma is that you don't have to
resort to \x{....} just to spell your name in a native encoding.
So feel free to put your strings in your encoding in quotes and
regexes.

=head2 Prior to Perl v5.22

The pragma was a per script, not a per block lexical.  Only the last
C<use encoding> or C<no encoding> mattered, and it affected
B<the whole script>.  However, the C<no encoding> pragma was supported and
C<use encoding> could appear as many times as you want in a given script
(though only the last was effective).

Since the scope wasn't lexical, other modules' use of C<chr>, C<ord>, I<etc.>
were affected.  This leads to spooky, incorrect action at a distance that is
hard to debug.

This means you would have to be very careful of the load order:

  # called module
  package Module_IN_BAR;
  use encoding "bar";
  # stuff in "bar" encoding here
  1;

  # caller script
  use encoding "foo"
  use Module_IN_BAR;
  # surprise! use encoding "bar" is in effect.

The best way to avoid this oddity is to use this pragma RIGHT AFTER
other modules are loaded.  i.e.

  use Module_IN_BAR;
  use encoding "foo";

=head2 Prior to Encode version 1.87

=over

=item *

C<STDIN> and C<STDOUT> were not set under the filter option.
And C<< STDIN=>I<ENCODING> >> and C<< STDOUT=>I<ENCODING> >> didn't work like
non-filter version.

=item *

C<use utf8> wasn't implicitly declared so you have to C<use utf8> to do

 ${"\x{4eba}"}++

=back

=head2 Prior to Perl v5.8.1

=over

=item "NON-EUC" doublebyte encodings

Because perl needs to parse the script before applying this pragma, such
encodings as Shift_JIS and Big-5 that may contain C<'\'> (BACKSLASH;
C<\x5c>) in the second byte fail because the second byte may
accidentally escape the quoting character that follows.

=item C<tr///>

The B<encoding> pragma works by decoding string literals in
C<q//,qq//,qr//,qw///, qx//> and so forth.  In perl v5.8.0, this
does not apply to C<tr///>.  Therefore,

  use encoding 'euc-jp';
  #....
  $kana =~ tr/\xA4\xA1-\xA4\xF3/\xA5\xA1-\xA5\xF3/;
  #           -------- -------- -------- --------

Does not work as

  $kana =~ tr/\x{3041}-\x{3093}/\x{30a1}-\x{30f3}/;

=over

=item Legend of characters above

  utf8     euc-jp   charnames::viacode()
  -----------------------------------------
  \x{3041} \xA4\xA1 HIRAGANA LETTER SMALL A
  \x{3093} \xA4\xF3 HIRAGANA LETTER N
  \x{30a1} \xA5\xA1 KATAKANA LETTER SMALL A
  \x{30f3} \xA5\xF3 KATAKANA LETTER N

=back

This counterintuitive behavior has been fixed in perl v5.8.1.

In perl v5.8.0, you can work around this as follows;

  use encoding 'euc-jp';
  #  ....
  eval qq{ \$kana =~ tr/\xA4\xA1-\xA4\xF3/\xA5\xA1-\xA5\xF3/ };

Note the C<tr//> expression is surrounded by C<qq{}>.  The idea behind
this is the same as the classic idiom that makes C<tr///> 'interpolate':

   tr/$from/$to/;            # wrong!
   eval qq{ tr/$from/$to/ }; # workaround.

=back

=head1 EXAMPLE - Greekperl

    use encoding "iso 8859-7";

    # \xDF in ISO 8859-7 (Greek) is \x{3af} in Unicode.

    $a = "\xDF";
    $b = "\x{100}";

    printf "%#x\n", ord($a); # will print 0x3af, not 0xdf

    $c = $a . $b;

    # $c will be "\x{3af}\x{100}", not "\x{df}\x{100}".

    # chr() is affected, and ...

    print "mega\n"  if ord(chr(0xdf)) == 0x3af;

    # ... ord() is affected by the encoding pragma ...

    print "tera\n" if ord(pack("C", 0xdf)) == 0x3af;

    # ... as are eq and cmp ...

    print "peta\n" if "\x{3af}" eq  pack("C", 0xdf);
    print "exa\n"  if "\x{3af}" cmp pack("C", 0xdf) == 0;

    # ... but pack/unpack C are not affected, in case you still
    # want to go back to your native encoding

    print "zetta\n" if unpack("C", (pack("C", 0xdf))) == 0xdf;

=head1 BUGS

=over

=item Thread safety

C<use encoding ...> is not thread-safe (i.e., do not use in threaded
applications).

=item Can't be used by more than one module in a single program.

Only one encoding is allowed.  If you combine modules in a program that have
different encodings, only one will be actually used.

=item Other modules using C<STDIN> and C<STDOUT> get the encoded stream

They may be expecting something completely different.

=item literals in regex that are longer than 127 bytes

For native multibyte encodings (either fixed or variable length),
the current implementation of the regular expressions may introduce
recoding errors for regular expression literals longer than 127 bytes.

=item EBCDIC

The encoding pragma is not supported on EBCDIC platforms.

=item C<format>

This pragma doesn't work well with C<format> because PerlIO does not
get along very well with it.  When C<format> contains non-ASCII
characters it prints funny or gets "wide character warnings".
To understand it, try the code below.

  # Save this one in utf8
  # replace *non-ascii* with a non-ascii string
  my $camel;
  format STDOUT =
  *non-ascii*@>>>>>>>
  $camel
  .
  $camel = "*non-ascii*";
  binmode(STDOUT=>':encoding(utf8)'); # bang!
  write;              # funny
  print $camel, "\n"; # fine

Without binmode this happens to work but without binmode, print()
fails instead of write().

At any rate, the very use of C<format> is questionable when it comes to
unicode characters since you have to consider such things as character
width (i.e. double-width for ideographs) and directions (i.e. BIDI for
Arabic and Hebrew).

=item See also L</CAVEATS>

=back

=head1 HISTORY

This pragma first appeared in Perl v5.8.0.  It has been enhanced in later
releases as specified above.

=head1 SEE ALSO

L<perlunicode>, L<Encode>, L<open>, L<Filter::Util::Call>,

Ch. 15 of C<Programming Perl (3rd Edition)>
by Larry Wall, Tom Christiansen, Jon Orwant;
O'Reilly & Associates; ISBN 0-596-00027-8

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            use Errno ':POSIX';
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_ENDIAN_H)) {
    eval 'sub _ENDIAN_H () {1;}' unless defined(&_ENDIAN_H);
    require 'features.ph';
    eval 'sub __LITTLE_ENDIAN () {1234;}' unless defined(&__LITTLE_ENDIAN);
    eval 'sub __BIG_ENDIAN () {4321;}' unless defined(&__BIG_ENDIAN);
    eval 'sub __PDP_ENDIAN () {3412;}' unless defined(&__PDP_ENDIAN);
    require 'bits/endian.ph';
    unless(defined(&__FLOAT_WORD_ORDER)) {
	eval 'sub __FLOAT_WORD_ORDER () { &__BYTE_ORDER;}' unless defined(&__FLOAT_WORD_ORDER);
    }
    if(defined(&__USE_MISC)) {
	eval 'sub LITTLE_ENDIAN () { &__LITTLE_ENDIAN;}' unless defined(&LITTLE_ENDIAN);
	eval 'sub BIG_ENDIAN () { &__BIG_ENDIAN;}' unless defined(&BIG_ENDIAN);
	eval 'sub PDP_ENDIAN () { &__PDP_ENDIAN;}' unless defined(&PDP_ENDIAN);
	eval 'sub BYTE_ORDER () { &__BYTE_ORDER;}' unless defined(&BYTE_ORDER);
    }
    if((defined(&__BYTE_ORDER) ? &__BYTE_ORDER : undef) == (defined(&__LITTLE_ENDIAN) ? &__LITTLE_ENDIAN : undef)) {
	eval 'sub __LONG_LONG_PAIR {
	    my($HI, $LO) = @_;
    	    eval q($LO, $HI);
	}' unless defined(&__LONG_LONG_PAIR);
    }
 elsif((defined(&__BYTE_ORDER) ? &__BYTE_ORDER : undef) == (defined(&__BIG_ENDIAN) ? &__BIG_ENDIAN : undef)) {
	eval 'sub __LONG_LONG_PAIR {
	    my($HI, $LO) = @_;
    	    eval q($HI, $LO);
	}' unless defined(&__LONG_LONG_PAIR);
    }
    if(defined (&__USE_MISC)  && !defined (&__ASSEMBLER__)) {
	require 'bits/byteswap.ph';
	if((defined(&__BYTE_ORDER) ? &__BYTE_ORDER : undef) == (defined(&__LITTLE_ENDIAN) ? &__LITTLE_ENDIAN : undef)) {
	    eval 'sub htobe16 {
	        my($x) = @_;
    		eval q( &__bswap_16 ($x));
	    }' unless defined(&htobe16);
	    eval 'sub htole16 {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&htole16);
	    eval 'sub be16toh {
	        my($x) = @_;
    		eval q( &__bswap_16 ($x));
	    }' unless defined(&be16toh);
	    eval 'sub le16toh {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&le16toh);
	    eval 'sub htobe32 {
	        my($x) = @_;
    		eval q( &__bswap_32 ($x));
	    }' unless defined(&htobe32);
	    eval 'sub htole32 {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&htole32);
	    eval 'sub be32toh {
	        my($x) = @_;
    		eval q( &__bswap_32 ($x));
	    }' unless defined(&be32toh);
	    eval 'sub le32toh {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&le32toh);
	    eval 'sub htobe64 {
	        my($x) = @_;
    		eval q( &__bswap_64 ($x));
	    }' unless defined(&htobe64);
	    eval 'sub htole64 {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&htole64);
	    eval 'sub be64toh {
	        my($x) = @_;
    		eval q( &__bswap_64 ($x));
	    }' unless defined(&be64toh);
	    eval 'sub le64toh {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&le64toh);
	} else {
	    eval 'sub htobe16 {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&htobe16);
	    eval 'sub htole16 {
	        my($x) = @_;
    		eval q( &__bswap_16 ($x));
	    }' unless defined(&htole16);
	    eval 'sub be16toh {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&be16toh);
	    eval 'sub le16toh {
	        my($x) = @_;
    		eval q( &__bswap_16 ($x));
	    }' unless defined(&le16toh);
	    eval 'sub htobe32 {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&htobe32);
	    eval 'sub htole32 {
	        my($x) = @_;
    		eval q( &__bswap_32 ($x));
	    }' unless defined(&htole32);
	    eval 'sub be32toh {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&be32toh);
	    eval 'sub le32toh {
	        my($x) = @_;
    		eval q( &__bswap_32 ($x));
	    }' unless defined(&le32toh);
	    eval 'sub htobe64 {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&htobe64);
	    eval 'sub htole64 {
	        my($x) = @_;
    		eval q( &__bswap_64 ($x));
	    }' unless defined(&htole64);
	    eval 'sub be64toh {
	        my($x) = @_;
    		eval q(($x));
	    }' unless defined(&be64toh);
	    eval 'sub le64toh {
	        my($x) = @_;
    		eval q( &__bswap_64 ($x));
	    }' unless defined(&le64toh);
	}
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_FEATURES_H)) {
    eval 'sub _FEATURES_H () {1;}' unless defined(&_FEATURES_H);
    undef(&__USE_ISOC11) if defined(&__USE_ISOC11);
    undef(&__USE_ISOC99) if defined(&__USE_ISOC99);
    undef(&__USE_ISOC95) if defined(&__USE_ISOC95);
    undef(&__USE_ISOCXX11) if defined(&__USE_ISOCXX11);
    undef(&__USE_POSIX) if defined(&__USE_POSIX);
    undef(&__USE_POSIX2) if defined(&__USE_POSIX2);
    undef(&__USE_POSIX199309) if defined(&__USE_POSIX199309);
    undef(&__USE_POSIX199506) if defined(&__USE_POSIX199506);
    undef(&__USE_XOPEN) if defined(&__USE_XOPEN);
    undef(&__USE_XOPEN_EXTENDED) if defined(&__USE_XOPEN_EXTENDED);
    undef(&__USE_UNIX98) if defined(&__USE_UNIX98);
    undef(&__USE_XOPEN2K) if defined(&__USE_XOPEN2K);
    undef(&__USE_XOPEN2KXSI) if defined(&__USE_XOPEN2KXSI);
    undef(&__USE_XOPEN2K8) if defined(&__USE_XOPEN2K8);
    undef(&__USE_XOPEN2K8XSI) if defined(&__USE_XOPEN2K8XSI);
    undef(&__USE_LARGEFILE) if defined(&__USE_LARGEFILE);
    undef(&__USE_LARGEFILE64) if defined(&__USE_LARGEFILE64);
    undef(&__USE_FILE_OFFSET64) if defined(&__USE_FILE_OFFSET64);
    undef(&__USE_MISC) if defined(&__USE_MISC);
    undef(&__USE_ATFILE) if defined(&__USE_ATFILE);
    undef(&__USE_GNU) if defined(&__USE_GNU);
    undef(&__USE_REENTRANT) if defined(&__USE_REENTRANT);
    undef(&__USE_FORTIFY_LEVEL) if defined(&__USE_FORTIFY_LEVEL);
    undef(&__KERNEL_STRICT_NAMES) if defined(&__KERNEL_STRICT_NAMES);
    unless(defined(&_LOOSE_KERNEL_NAMES)) {
	eval 'sub __KERNEL_STRICT_NAMES () {1;}' unless defined(&__KERNEL_STRICT_NAMES);
    }
    if(defined (&__GNUC__)  && defined (&__GNUC_MINOR__)) {
	eval 'sub __GNUC_PREREQ {
	    my($maj, $min) = @_;
    	    eval q((( &__GNUC__ << 16) +  &__GNUC_MINOR__ >= (($maj) << 16) + ($min)));
	}' unless defined(&__GNUC_PREREQ);
    } else {
	eval 'sub __GNUC_PREREQ {
	    my($maj, $min) = @_;
    	    eval q(0);
	}' unless defined(&__GNUC_PREREQ);
    }
    if((defined (&_BSD_SOURCE) || defined (&_SVID_SOURCE))  && !defined (&_DEFAULT_SOURCE)) {
	warn("\"_BSD_SOURCE\ and\ _SVID_SOURCE\ are\ deprecated\,\ use\ _DEFAULT_SOURCE\"");
	undef(&_DEFAULT_SOURCE) if defined(&_DEFAULT_SOURCE);
	eval 'sub _DEFAULT_SOURCE () {1;}' unless defined(&_DEFAULT_SOURCE);
    }
    if(defined(&_GNU_SOURCE)) {
	undef(&_ISOC95_SOURCE) if defined(&_ISOC95_SOURCE);
	eval 'sub _ISOC95_SOURCE () {1;}' unless defined(&_ISOC95_SOURCE);
	undef(&_ISOC99_SOURCE) if defined(&_ISOC99_SOURCE);
	eval 'sub _ISOC99_SOURCE () {1;}' unless defined(&_ISOC99_SOURCE);
	undef(&_ISOC11_SOURCE) if defined(&_ISOC11_SOURCE);
	eval 'sub _ISOC11_SOURCE () {1;}' unless defined(&_ISOC11_SOURCE);
	undef(&_POSIX_SOURCE) if defined(&_POSIX_SOURCE);
	eval 'sub _POSIX_SOURCE () {1;}' unless defined(&_POSIX_SOURCE);
	undef(&_POSIX_C_SOURCE) if defined(&_POSIX_C_SOURCE);
	eval 'sub _POSIX_C_SOURCE () {200809;}' unless defined(&_POSIX_C_SOURCE);
	undef(&_XOPEN_SOURCE) if defined(&_XOPEN_SOURCE);
	eval 'sub _XOPEN_SOURCE () {700;}' unless defined(&_XOPEN_SOURCE);
	undef(&_XOPEN_SOURCE_EXTENDED) if defined(&_XOPEN_SOURCE_EXTENDED);
	eval 'sub _XOPEN_SOURCE_EXTENDED () {1;}' unless defined(&_XOPEN_SOURCE_EXTENDED);
	undef(&_LARGEFILE64_SOURCE) if defined(&_LARGEFILE64_SOURCE);
	eval 'sub _LARGEFILE64_SOURCE () {1;}' unless defined(&_LARGEFILE64_SOURCE);
	undef(&_DEFAULT_SOURCE) if defined(&_DEFAULT_SOURCE);
	eval 'sub _DEFAULT_SOURCE () {1;}' unless defined(&_DEFAULT_SOURCE);
	undef(&_ATFILE_SOURCE) if defined(&_ATFILE_SOURCE);
	eval 'sub _ATFILE_SOURCE () {1;}' unless defined(&_ATFILE_SOURCE);
    }
    if((defined (&_DEFAULT_SOURCE) || (!defined (&__STRICT_ANSI__)  && !defined (&_ISOC99_SOURCE)  && !defined (&_POSIX_SOURCE)  && !defined (&_POSIX_C_SOURCE)  && !defined (&_XOPEN_SOURCE)))) {
	undef(&_DEFAULT_SOURCE) if defined(&_DEFAULT_SOURCE);
	eval 'sub _DEFAULT_SOURCE () {1;}' unless defined(&_DEFAULT_SOURCE);
    }
    if((defined (&_ISOC11_SOURCE) || (defined (&__STDC_VERSION__)  && (defined(&__STDC_VERSION__) ? &__STDC_VERSION__ : undef) >= 201112))) {
	eval 'sub __USE_ISOC11 () {1;}' unless defined(&__USE_ISOC11);
    }
    if((defined (&_ISOC99_SOURCE) || defined (&_ISOC11_SOURCE) || (defined (&__STDC_VERSION__)  && (defined(&__STDC_VERSION__) ? &__STDC_VERSION__ : undef) >= 199901))) {
	eval 'sub __USE_ISOC99 () {1;}' unless defined(&__USE_ISOC99);
    }
    if((defined (&_ISOC99_SOURCE) || defined (&_ISOC11_SOURCE) || (defined (&__STDC_VERSION__)  && (defined(&__STDC_VERSION__) ? &__STDC_VERSION__ : undef) >= 199409))) {
	eval 'sub __USE_ISOC95 () {1;}' unless defined(&__USE_ISOC95);
    }
    if(((defined (&__cplusplus)  && (defined(&__cplusplus) ? &__cplusplus : undef) >= 201103) || defined (&__GXX_EXPERIMENTAL_CXX0X__))) {
	eval 'sub __USE_ISOCXX11 () {1;}' unless defined(&__USE_ISOCXX11);
    }
    if(defined(&_DEFAULT_SOURCE)) {
	if(!defined (&_POSIX_SOURCE)  && !defined (&_POSIX_C_SOURCE)) {
	    eval 'sub __USE_POSIX_IMPLICITLY () {1;}' unless defined(&__USE_POSIX_IMPLICITLY);
	}
	undef(&_POSIX_SOURCE) if defined(&_POSIX_SOURCE);
	eval 'sub _POSIX_SOURCE () {1;}' unless defined(&_POSIX_SOURCE);
	undef(&_POSIX_C_SOURCE) if defined(&_POSIX_C_SOURCE);
	eval 'sub _POSIX_C_SOURCE () {200809;}' unless defined(&_POSIX_C_SOURCE);
    }
    if(((!defined (&__STRICT_ANSI__) || (defined (&_XOPEN_SOURCE)  && ((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) >= 500))  && !defined (&_POSIX_SOURCE)  && !defined (&_POSIX_C_SOURCE))) {
	eval 'sub _POSIX_SOURCE () {1;}' unless defined(&_POSIX_SOURCE);
	if(defined (&_XOPEN_SOURCE)  && ((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) < 500) {
	    eval 'sub _POSIX_C_SOURCE () {2;}' unless defined(&_POSIX_C_SOURCE);
	}
 elsif(defined (&_XOPEN_SOURCE)  && ((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) < 600) {
	    eval 'sub _POSIX_C_SOURCE () {199506;}' unless defined(&_POSIX_C_SOURCE);
	}
 elsif(defined (&_XOPEN_SOURCE)  && ((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) < 700) {
	    eval 'sub _POSIX_C_SOURCE () {200112;}' unless defined(&_POSIX_C_SOURCE);
	} else {
	    eval 'sub _POSIX_C_SOURCE () {200809;}' unless defined(&_POSIX_C_SOURCE);
	}
	eval 'sub __USE_POSIX_IMPLICITLY () {1;}' unless defined(&__USE_POSIX_IMPLICITLY);
    }
    if((defined (&_POSIX_SOURCE) || (defined (&_POSIX_C_SOURCE)  && (defined(&_POSIX_C_SOURCE) ? &_POSIX_C_SOURCE : undef) >= 1) || defined (&_XOPEN_SOURCE))) {
	eval 'sub __USE_POSIX () {1;}' unless defined(&__USE_POSIX);
    }
    if(defined (&_POSIX_C_SOURCE)  && (defined(&_POSIX_C_SOURCE) ? &_POSIX_C_SOURCE : undef) >= 2|| defined (&_XOPEN_SOURCE)) {
	eval 'sub __USE_POSIX2 () {1;}' unless defined(&__USE_POSIX2);
    }
    if(defined (&_POSIX_C_SOURCE)  && ((defined(&_POSIX_C_SOURCE) ? &_POSIX_C_SOURCE : undef) - 0) >= 199309) {
	eval 'sub __USE_POSIX199309 () {1;}' unless defined(&__USE_POSIX199309);
    }
    if(defined (&_POSIX_C_SOURCE)  && ((defined(&_POSIX_C_SOURCE) ? &_POSIX_C_SOURCE : undef) - 0) >= 199506) {
	eval 'sub __USE_POSIX199506 () {1;}' unless defined(&__USE_POSIX199506);
    }
    if(defined (&_POSIX_C_SOURCE)  && ((defined(&_POSIX_C_SOURCE) ? &_POSIX_C_SOURCE : undef) - 0) >= 200112) {
	eval 'sub __USE_XOPEN2K () {1;}' unless defined(&__USE_XOPEN2K);
	undef(&__USE_ISOC95) if defined(&__USE_ISOC95);
	eval 'sub __USE_ISOC95 () {1;}' unless defined(&__USE_ISOC95);
	undef(&__USE_ISOC99) if defined(&__USE_ISOC99);
	eval 'sub __USE_ISOC99 () {1;}' unless defined(&__USE_ISOC99);
    }
    if(defined (&_POSIX_C_SOURCE)  && ((defined(&_POSIX_C_SOURCE) ? &_POSIX_C_SOURCE : undef) - 0) >= 200809) {
	eval 'sub __USE_XOPEN2K8 () {1;}' unless defined(&__USE_XOPEN2K8);
	undef(&_ATFILE_SOURCE) if defined(&_ATFILE_SOURCE);
	eval 'sub _ATFILE_SOURCE () {1;}' unless defined(&_ATFILE_SOURCE);
    }
    if(defined(&_XOPEN_SOURCE)) {
	eval 'sub __USE_XOPEN () {1;}' unless defined(&__USE_XOPEN);
	if(((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) >= 500) {
	    eval 'sub __USE_XOPEN_EXTENDED () {1;}' unless defined(&__USE_XOPEN_EXTENDED);
	    eval 'sub __USE_UNIX98 () {1;}' unless defined(&__USE_UNIX98);
	    undef(&_LARGEFILE_SOURCE) if defined(&_LARGEFILE_SOURCE);
	    eval 'sub _LARGEFILE_SOURCE () {1;}' unless defined(&_LARGEFILE_SOURCE);
	    if(((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) >= 600) {
		if(((defined(&_XOPEN_SOURCE) ? &_XOPEN_SOURCE : undef) - 0) >= 700) {
		    eval 'sub __USE_XOPEN2K8 () {1;}' unless defined(&__USE_XOPEN2K8);
		    eval 'sub __USE_XOPEN2K8XSI () {1;}' unless defined(&__USE_XOPEN2K8XSI);
		}
		eval 'sub __USE_XOPEN2K () {1;}' unless defined(&__USE_XOPEN2K);
		eval 'sub __USE_XOPEN2KXSI () {1;}' unless defined(&__USE_XOPEN2KXSI);
		undef(&__USE_ISOC95) if defined(&__USE_ISOC95);
		eval 'sub __USE_ISOC95 () {1;}' unless defined(&__USE_ISOC95);
		undef(&__USE_ISOC99) if defined(&__USE_ISOC99);
		eval 'sub __USE_ISOC99 () {1;}' unless defined(&__USE_ISOC99);
	    }
	} else {
	    if(defined(&_XOPEN_SOURCE_EXTENDED)) {
		eval 'sub __USE_XOPEN_EXTENDED () {1;}' unless defined(&__USE_XOPEN_EXTENDED);
	    }
	}
    }
    if(defined(&_LARGEFILE_SOURCE)) {
	eval 'sub __USE_LARGEFILE () {1;}' unless defined(&__USE_LARGEFILE);
    }
    if(defined(&_LARGEFILE64_SOURCE)) {
	eval 'sub __USE_LARGEFILE64 () {1;}' unless defined(&__USE_LARGEFILE64);
    }
    if(defined (&_FILE_OFFSET_BITS)  && (defined(&_FILE_OFFSET_BITS) ? &_FILE_OFFSET_BITS : undef) == 64) {
	eval 'sub __USE_FILE_OFFSET64 () {1;}' unless defined(&__USE_FILE_OFFSET64);
    }
    if(defined (&_DEFAULT_SOURCE)) {
	eval 'sub __USE_MISC () {1;}' unless defined(&__USE_MISC);
    }
    if(defined(&_ATFILE_SOURCE)) {
	eval 'sub __USE_ATFILE () {1;}' unless defined(&__USE_ATFILE);
    }
    if(defined(&_GNU_SOURCE)) {
	eval 'sub __USE_GNU () {1;}' unless defined(&__USE_GNU);
    }
    if(defined (&_REENTRANT) || defined (&_THREAD_SAFE)) {
	eval 'sub __USE_REENTRANT () {1;}' unless defined(&__USE_REENTRANT);
    }
    if(defined (&_FORTIFY_SOURCE)  && (defined(&_FORTIFY_SOURCE) ? &_FORTIFY_SOURCE : undef) > 0 &&  &__GNUC_PREREQ (4, 1)  && defined (&__OPTIMIZE__)  && (defined(&__OPTIMIZE__) ? &__OPTIMIZE__ : undef) > 0) {
	if((defined(&_FORTIFY_SOURCE) ? &_FORTIFY_SOURCE : undef) > 1) {
	    eval 'sub __USE_FORTIFY_LEVEL () {2;}' unless defined(&__USE_FORTIFY_LEVEL);
	} else {
	    eval 'sub __USE_FORTIFY_LEVEL () {1;}' unless defined(&__USE_FORTIFY_LEVEL);
	}
    } else {
	eval 'sub __USE_FORTIFY_LEVEL () {0;}' unless defined(&__USE_FORTIFY_LEVEL);
    }
    require 'stdc-predef.ph';
    undef(&__GNU_LIBRARY__) if defined(&__GNU_LIBRARY__);
    eval 'sub __GNU_LIBRARY__ () {6;}' unless defined(&__GNU_LIBRARY__);
    eval 'sub __GLIBC__ () {2;}' unless defined(&__GLIBC__);
    eval 'sub __GLIBC_MINOR__ () {24;}' unless defined(&__GLIBC_MINOR__);
    eval 'sub __GLIBC_PREREQ {
        my($maj, $min) = @_;
	    eval q((( &__GLIBC__ << 16) +  &__GLIBC_MINOR__ >= (($maj) << 16) + ($min)));
    }' unless defined(&__GLIBC_PREREQ);
    unless(defined(&__ASSEMBLER__)) {
	unless(defined(&_SYS_CDEFS_H)) {
	    require 'sys/cdefs.ph';
	}
	if(defined (&__USE_FILE_OFFSET64)  && !defined (&__REDIRECT)) {
	    eval 'sub __USE_LARGEFILE () {1;}' unless defined(&__USE_LARGEFILE);
	    eval 'sub __USE_LARGEFILE64 () {1;}' unless defined(&__USE_LARGEFILE64);
	}
    }
    if( &__GNUC_PREREQ (2, 7)  && defined (&__OPTIMIZE__)  && !defined (&__OPTIMIZE_SIZE__)  && !defined (&__NO_INLINE__)  && defined (&__extern_inline)) {
	eval 'sub __USE_EXTERN_INLINES () {1;}' unless defined(&__USE_EXTERN_INLINES);
    }
    require 'gnu/stubs.ph';
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            package lib;

# THIS FILE IS AUTOMATICALLY GENERATED FROM lib_pm.PL.
# ANY CHANGES TO THIS FILE WILL BE OVERWRITTEN BY THE NEXT PERL BUILD.

use Config;

use strict;

my $archname         = $Config{archname};
my $version          = $Config{version};
my @inc_version_list = reverse split / /, $Config{inc_version_list};

our @ORIG_INC = @INC;	# take a handy copy of 'original' value
our $VERSION = '0.63';

sub import {
    shift;

    my %names;
    foreach (reverse @_) {
	my $path = $_;		# we'll be modifying it, so break the alias
	if ($path eq '') {
	    require Carp;
	    Carp::carp("Empty compile time value given to use lib");
	}

	if ($path !~ /\.par$/i && -e $path && ! -d _) {
	    require Carp;
	    Carp::carp("Parameter to use lib must be directory, not file");
	}
	unshift(@INC, $path);
	# Add any previous version directories we found at configure time
	foreach my $incver (@inc_version_list)
	{
	    my $dir = "$path/$incver";
	    unshift(@INC, $dir) if -d $dir;
	}
	# Put a corresponding archlib directory in front of $path if it
	# looks like $path has an archlib directory below it.
	my($arch_auto_dir, $arch_dir, $version_dir, $version_arch_dir)
	    = _get_dirs($path);
	unshift(@INC, $arch_dir)         if -d $arch_auto_dir;
	unshift(@INC, $version_dir)      if -d $version_dir;
	unshift(@INC, $version_arch_dir) if -d $version_arch_dir;
    }

    # remove trailing duplicates
    @INC = grep { ++$names{$_} == 1 } @INC;
    return;
}

sub unimport {
    shift;

    my %names;
    foreach my $path (@_) {
	my($arch_auto_dir, $arch_dir, $version_dir, $version_arch_dir)
	    = _get_dirs($path);
	++$names{$path};
	++$names{$arch_dir}         if -d $arch_auto_dir;
	++$names{$version_dir}      if -d $version_dir;
	++$names{$version_arch_dir} if -d $version_arch_dir;
    }

    # Remove ALL instances of each named directory.
    @INC = grep { !exists $names{$_} } @INC;
    return;
}

sub _get_dirs {
    my($dir) = @_;
    my($arch_auto_dir, $arch_dir, $version_dir, $version_arch_dir);

    $arch_auto_dir    = "$dir/$archname/auto";
    $arch_dir         = "$dir/$archname";
    $version_dir      = "$dir/$version";
    $version_arch_dir = "$dir/$version/$archname";

    return($arch_auto_dir, $arch_dir, $version_dir, $version_arch_dir);
}

1;
__END__

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #      mro.pm
#
#      Copyright (c) 2007 Brandon L Black
#      Copyright (c) 2008,2009 Larry Wall and others
#
#      You may distribute under the terms of either the GNU General Public
#      License or the Artistic License, as specified in the README file.
#
package mro;
use strict;
use warnings;

# mro.pm versions < 1.00 reserved for MRO::Compat
#  for partial back-compat to 5.[68].x
our $VERSION = '1.18';

sub import {
    mro::set_mro(scalar(caller), $_[1]) if $_[1];
}

package # hide me from PAUSE
    next;

sub can { mro::_nextcan($_[0], 0) }

sub method {
    my $method = mro::_nextcan($_[0], 1);
    goto &$method;
}

package # hide me from PAUSE
    maybe::next;

sub method {
    my $method = mro::_nextcan($_[0], 0);
    goto &$method if defined $method;
    return;
}

require XSLoader;
XSLoader::load('mro');

1;

__END__

=head1 NAME

mro - Method Resolution Order

=head1 SYNOPSIS

  use mro; # enables next::method and friends globally

  use mro 'dfs'; # enable DFS MRO for this class (Perl default)
  use mro 'c3'; # enable C3 MRO for this class

=head1 DESCRIPTION

The "mro" namespace provides several utilities for dealing
with method resolution order and method caching in general.

These interfaces are only available in Perl 5.9.5 and higher.
See L<MRO::Compat> on CPAN for a mostly forwards compatible
implementation for older Perls.

=head1 OVERVIEW

It's possible to change the MRO of a given class either by using C<use
mro> as shown in the synopsis, or by using the L</mro::set_mro> function
below.

The special methods C<next::method>, C<next::can>, and
C<maybe::next::method> are not available until this C<mro> module
has been loaded via C<use> or C<require>.

=head1 The C3 MRO

In addition to the traditional Perl default MRO (depth first
search, called C<DFS> here), Perl now offers the C3 MRO as
well.  Perl's support for C3 is based on the work done in
Stevan Little's module L<Class::C3>, and most of the C3-related
documentation here is ripped directly from there.

=head2 What is C3?

C3 is the name of an algorithm which aims to provide a sane method
resolution order under multiple inheritance. It was first introduced in
the language Dylan (see links in the L</"SEE ALSO"> section), and then
later adopted as the preferred MRO (Method Resolution Order) for the
new-style classes in Python 2.3. Most recently it has been adopted as the
"canonical" MRO for Perl 6 classes, and the default MRO for Parrot objects
as well.

=head2 How does C3 work

C3 works by always preserving local precedence ordering. This essentially
means that no class will appear before any of its subclasses. Take, for
instance, the classic diamond inheritance pattern:

     <A>
    /   \
  <B>   <C>
    \   /
     <D>

The standard Perl 5 MRO would be (D, B, A, C). The result being that B<A>
appears before B<C>, even though B<C> is the subclass of B<A>. The C3 MRO
algorithm however, produces the following order: (D, B, C, A), which does
not have this issue.

This example is fairly trivial; for more complex cases and a deeper
explanation, see the links in the L</"SEE ALSO"> section.

=head1 Functions

=head2 mro::get_linear_isa($classname[, $type])

Returns an arrayref which is the linearized MRO of the given class.
Uses whichever MRO is currently in effect for that class by default,
or the given MRO (either C<c3> or C<dfs> if specified as C<$type>).

The linearized MRO of a class is an ordered array of all of the
classes one would search when resolving a method on that class,
starting with the class itself.

If the requested class doesn't yet exist, this function will still
succeed, and return C<[ $classname ]>

Note that C<UNIVERSAL> (and any members of C<UNIVERSAL>'s MRO) are not
part of the MRO of a class, even though all classes implicitly inherit
methods from C<UNIVERSAL> and its parents.

=head2 mro::set_mro ($classname, $type)

Sets the MRO of the given class to the C<$type> argument (either
C<c3> or C<dfs>).

=head2 mro::get_mro($classname)

Returns the MRO of the given class (either C<c3> or C<dfs>).

=head2 mro::get_isarev($classname)

Gets the C<mro_isarev> for this class, returned as an
arrayref of class names.  These are every class that "isa"
the given class name, even if the isa relationship is
indirect.  This is used internally by the MRO code to
keep track of method/MRO cache invalidations.

As with C<mro::get_linear_isa> above, C<UNIVERSAL> is special.
C<UNIVERSAL> (and parents') isarev lists do not include
every class in existence, even though all classes are
effectively descendants for method inheritance purposes.

=head2 mro::is_universal($classname)

Returns a boolean status indicating whether or not
the given classname is either C<UNIVERSAL> itself,
or one of C<UNIVERSAL>'s parents by C<@ISA> inheritance.

Any class for which this function returns true is
"universal" in the sense that all classes potentially
inherit methods from it.

=head2 mro::invalidate_all_method_caches()

Increments C<PL_sub_generation>, which invalidates method
caching in all packages.

=head2 mro::method_changed_in($classname)

Invalidates the method cache of any classes dependent on the
given class.  This is not normally necessary.  The only
known case where pure perl code can confuse the method
cache is when you manually install a new constant
subroutine by using a readonly scalar value, like the
internals of L<constant> do.  If you find another case,
please report it so we can either fix it or document
the exception here.

=head2 mro::get_pkg_gen($classname)

Returns an integer which is incremented every time a
real local method in the package C<$classname> changes,
or the local C<@ISA> of C<$classname> is modified.

This is intended for authors of modules which do lots
of class introspection, as it allows them to very quickly
check if anything important about the local properties
of a given class have changed since the last time they
looked.  It does not increment on method/C<@ISA>
changes in superclasses.

It's still up to you to seek out the actual changes,
and there might not actually be any.  Perhaps all
of the changes since you last checked cancelled each
other out and left the package in the state it was in
before.

This integer normally starts off at a value of C<1>
when a package stash is instantiated.  Calling it
on packages whose stashes do not exist at all will
return C<0>.  If a package stash is completely
deleted (not a normal occurrence, but it can happen
if someone does something like C<undef %PkgName::>),
the number will be reset to either C<0> or C<1>,
depending on how completely the package was wiped out.

=head2 next::method

This is somewhat like C<SUPER>, but it uses the C3 method
resolution order to get better consistency in multiple
inheritance situations.  Note that while inheritance in
general follows whichever MRO is in effect for the
given class, C<next::method> only uses the C3 MRO.

One generally uses it like so:

  sub some_method {
    my $self = shift;
    my $superclass_answer = $self->next::method(@_);
    return $superclass_answer + 1;
  }

Note that you don't (re-)specify the method name.
It forces you to always use the same method name
as the method you started in.

It can be called on an object or a class, of course.

The way it resolves which actual method to call is:

=over 4

=item 1

First, it determines the linearized C3 MRO of
the object or class it is being called on.

=item 2

Then, it determines the class and method name
of the context it was invoked from.

=item 3

Finally, it searches down the C3 MRO list until
it reaches the contextually enclosing class, then
searches further down the MRO list for the next
method with the same name as the contextually
enclosing method.

=back

Failure to find a next method will result in an
exception being thrown (see below for alternatives).

This is substantially different than the behavior
of C<SUPER> under complex multiple inheritance.
(This becomes obvious when one realizes that the
common superclasses in the C3 linearizations of
a given class and one of its parents will not
always be ordered the same for both.)

B<Caveat>: Calling C<next::method> from methods defined outside the class:

There is an edge case when using C<next::method> from within a subroutine
which was created in a different module than the one it is called from. It
sounds complicated, but it really isn't. Here is an example which will not
work correctly:

  *Foo::foo = sub { (shift)->next::method(@_) };

The problem exists because the anonymous subroutine being assigned to the
C<*Foo::foo> glob will show up in the call stack as being called
C<__ANON__> and not C<foo> as you might expect. Since C<next::method> uses
C<caller> to find the name of the method it was called in, it will fail in
this case. 

But fear not, there's a simple solution. The module C<Sub::Name> will
reach into the perl internals and assign a name to an anonymous subroutine
for you. Simply do this:

  use Sub::Name 'subname';
  *Foo::foo = subname 'Foo::foo' => sub { (shift)->next::method(@_) };

and things will Just Work.

=head2 next::can

This is similar to C<next::method>, but just returns either a code
reference or C<undef> to indicate that no further methods of this name
exist.

=head2 maybe::next::method

In simple cases, it is equivalent to:

   $self->next::method(@_) if $self->next::can;

But there are some cases where only this solution
works (like C<goto &maybe::next::method>);

=head1 SEE ALSO

=head2 The original Dylan paper

=over 4

=item L<http://haahr.tempdomainname.com/dylan/linearization-oopsla96.html>

=back

=head2 Pugs

The Pugs prototype Perl 6 Object Model uses C3

=head2 Parrot

Parrot now uses C3

=over 4

=item L<http://use.perl.org/~autrijus/journal/25768>

=back

=head2 Python 2.3 MRO related links

=over 4

=item L<http://www.python.org/2.3/mro.html>

=item L<http://www.python.org/2.2.2/descrintro.html#mro>

=back

=head2 Class::C3

=over 4

=item L<Class::C3>

=back

=head1 AUTHOR

Brandon L. Black, E<lt>blblack@gmail.comE<gt>

Based on Stevan Little's L<Class::C3>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             package ops;

our $VERSION = '1.02';

use Opcode qw(opmask_add opset invert_opset);

sub import {
    shift;
    # Not that unimport is the preferred form since import's don't
	# accumulate well owing to the 'only ever add opmask' rule.
	# E.g., perl -Mops=:set1 -Mops=:setb is unlikely to do as expected.
    opmask_add(invert_opset opset(@_)) if @_;
}

sub unimport {
    shift;
    opmask_add(opset(@_)) if @_;
}

1;

__END__

=head1 NAME

ops - Perl pragma to restrict unsafe operations when compiling

=head1 SYNOPSIS  

  perl -Mops=:default ...    # only allow reasonably safe operations

  perl -M-ops=system ...     # disable the 'system' opcode

=head1 DESCRIPTION

Since the C<ops> pragma currently has an irreversible global effect, it is
only of significant practical use with the C<-M> option on the command line.

See the L<Opcode> module for information about opcodes, optags, opmasks
and important information about safety.

=head1 SEE ALSO

L<Opcode>, L<Safe>, L<perlrun>

=cut

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           package re;

# pragma for controlling the regexp engine
use strict;
use warnings;

our $VERSION     = "0.32";
our @ISA         = qw(Exporter);
our @EXPORT_OK   = ('regmust',
                    qw(is_regexp regexp_pattern
                       regname regnames regnames_count));
our %EXPORT_OK = map { $_ => 1 } @EXPORT_OK;

my %bitmask = (
    taint   => 0x00100000, # HINT_RE_TAINT
    eval    => 0x00200000, # HINT_RE_EVAL
);

my $flags_hint = 0x02000000; # HINT_RE_FLAGS
my $PMMOD_SHIFT = 0;
my %reflags = (
    m => 1 << ($PMMOD_SHIFT + 0),
    s => 1 << ($PMMOD_SHIFT + 1),
    i => 1 << ($PMMOD_SHIFT + 2),
    x => 1 << ($PMMOD_SHIFT + 3),
    n => 1 << ($PMMOD_SHIFT + 5),
    p => 1 << ($PMMOD_SHIFT + 6),
    strict => 1 << ($PMMOD_SHIFT + 10),
# special cases:
    d => 0,
    l => 1,
    u => 2,
    a => 3,
    aa => 4,
);

sub setcolor {
 eval {				# Ignore errors
  require Term::Cap;

  my $terminal = Tgetent Term::Cap ({OSPEED => 9600}); # Avoid warning.
  my $props = $ENV{PERL_RE_TC} || 'md,me,so,se,us,ue';
  my @props = split /,/, $props;
  my $colors = join "\t", map {$terminal->Tputs($_,1)} @props;

  $colors =~ s/\0//g;
  $ENV{PERL_RE_COLORS} = $colors;
 };
 if ($@) {
    $ENV{PERL_RE_COLORS} ||= qq'\t\t> <\t> <\t\t';
 }

}

my %flags = (
    COMPILE         => 0x0000FF,
    PARSE           => 0x000001,
    OPTIMISE        => 0x000002,
    TRIEC           => 0x000004,
    DUMP            => 0x000008,
    FLAGS           => 0x000010,
    TEST            => 0x000020,

    EXECUTE         => 0x00FF00,
    INTUIT          => 0x000100,
    MATCH           => 0x000200,
    TRIEE           => 0x000400,

    EXTRA           => 0xFF0000,
    TRIEM           => 0x010000,
    OFFSETS         => 0x020000,
    OFFSETSDBG      => 0x040000,
    STATE           => 0x080000,
    OPTIMISEM       => 0x100000,
    STACK           => 0x280000,
    BUFFERS         => 0x400000,
    GPOS            => 0x800000,
);
$flags{ALL} = -1 & ~($flags{OFFSETS}|$flags{OFFSETSDBG}|$flags{BUFFERS});
$flags{All} = $flags{all} = $flags{DUMP} | $flags{EXECUTE};
$flags{Extra} = $flags{EXECUTE} | $flags{COMPILE} | $flags{GPOS};
$flags{More} = $flags{MORE} = $flags{All} | $flags{TRIEC} | $flags{TRIEM} | $flags{STATE};
$flags{State} = $flags{DUMP} | $flags{EXECUTE} | $flags{STATE};
$flags{TRIE} = $flags{DUMP} | $flags{EXECUTE} | $flags{TRIEC};

if (defined &DynaLoader::boot_DynaLoader) {
    require XSLoader;
    XSLoader::load();
}
# else we're miniperl
# We need to work for miniperl, because the XS toolchain uses Text::Wrap, which
# uses re 'taint'.

sub _load_unload {
    my ($on)= @_;
    if ($on) {
	# We call install() every time, as if we didn't, we wouldn't
	# "see" any changes to the color environment var since
	# the last time it was called.

	# install() returns an integer, which if casted properly
	# in C resolves to a structure containing the regexp
	# hooks. Setting it to a random integer will guarantee
	# segfaults.
	$^H{regcomp} = install();
    } else {
        delete $^H{regcomp};
    }
}

sub bits {
    my $on = shift;
    my $bits = 0;
    my $turning_all_off = ! @_ && ! $on;
    my %seen;   # Has flag already been seen?
    if ($turning_all_off) {

        # Pretend were called with certain parameters, which are best dealt
        # with that way.
        push @_, keys %bitmask; # taint and eval
        push @_, 'strict';
    }

    # Process each subpragma parameter
   ARG:
    foreach my $idx (0..$#_){
        my $s=$_[$idx];
        if ($s eq 'Debug' or $s eq 'Debugcolor') {
            setcolor() if $s =~/color/i;
            ${^RE_DEBUG_FLAGS} = 0 unless defined ${^RE_DEBUG_FLAGS};
            for my $idx ($idx+1..$#_) {
                if ($flags{$_[$idx]}) {
                    if ($on) {
                        ${^RE_DEBUG_FLAGS} |= $flags{$_[$idx]};
                    } else {
                        ${^RE_DEBUG_FLAGS} &= ~ $flags{$_[$idx]};
                    }
                } else {
                    require Carp;
                    Carp::carp("Unknown \"re\" Debug flag '$_[$idx]', possible flags: ",
                               join(", ",sort keys %flags ) );
                }
            }
            _load_unload($on ? 1 : ${^RE_DEBUG_FLAGS});
            last;
        } elsif ($s eq 'debug' or $s eq 'debugcolor') {
	    setcolor() if $s =~/color/i;
	    _load_unload($on);
	    last;
        } elsif (exists $bitmask{$s}) {
	    $bits |= $bitmask{$s};
	} elsif ($EXPORT_OK{$s}) {
	    require Exporter;
	    re->export_to_level(2, 're', $s);
        } elsif ($s eq 'strict') {
            if ($on) {
                $^H{reflags} |= $reflags{$s};
                warnings::warnif('experimental::re_strict',
                                 "\"use re 'strict'\" is experimental");

                # Turn on warnings if not already done.
                if (! warnings::enabled('regexp')) {
                    require warnings;
                    warnings->import('regexp');
                    $^H{re_strict} = 1;
                }
            }
            else {
                $^H{reflags} &= ~$reflags{$s} if $^H{reflags};

                # Turn off warnings if we turned them on.
                warnings->unimport('regexp') if $^H{re_strict};
            }
	    if ($^H{reflags}) {
                $^H |= $flags_hint;
            }
            else {
                $^H &= ~$flags_hint;
            }
	} elsif ($s =~ s/^\///) {
	    my $reflags = $^H{reflags} || 0;
	    my $seen_charset;
	    while ($s =~ m/( . )/gx) {
                local $_ = $1;
		if (/[adul]/) {
                    # The 'a' may be repeated; hide this from the rest of the
                    # code by counting and getting rid of all of them, then
                    # changing to 'aa' if there is a repeat.
                    if ($_ eq 'a') {
                        my $sav_pos = pos $s;
                        my $a_count = $s =~ s/a//g;
                        pos $s = $sav_pos - 1;  # -1 because got rid of the 'a'
                        if ($a_count > 2) {
			    require Carp;
                            Carp::carp(
                            qq 'The "a" flag may only appear a maximum of twice'
                            );
                        }
                        elsif ($a_count == 2) {
                            $_ = 'aa';
                        }
                    }
		    if ($on) {
			if ($seen_charset) {
			    require Carp;
                            if ($seen_charset ne $_) {
                                Carp::carp(
                                qq 'The "$seen_charset" and "$_" flags '
                                .qq 'are exclusive'
                                );
                            }
                            else {
                                Carp::carp(
                                qq 'The "$seen_charset" flag may not appear '
                                .qq 'twice'
                                );
                            }
			}
			$^H{reflags_charset} = $reflags{$_};
			$seen_charset = $_;
		    }
		    else {
			delete $^H{reflags_charset}
                                     if defined $^H{reflags_charset}
                                        && $^H{reflags_charset} == $reflags{$_};
		    }
		} elsif (exists $reflags{$_}) {
                    $seen{$_}++;
                    $on
		      ? $reflags |= $reflags{$_}
		      : ($reflags &= ~$reflags{$_});
		} else {
		    require Carp;
		    Carp::carp(
		     qq'Unknown regular expression flag "$_"'
		    );
		    next ARG;
		}
	    }
	    ($^H{reflags} = $reflags or defined $^H{reflags_charset})
	                    ? $^H |= $flags_hint
	                    : ($^H &= ~$flags_hint);
	} else {
	    require Carp;
	    Carp::carp("Unknown \"re\" subpragma '$s' (known ones are: ",
                       join(', ', map {qq('$_')} 'debug', 'debugcolor', sort keys %bitmask),
                       ")");
	}
    }
    if (exists $seen{'x'} && $seen{'x'} > 1
        && (warnings::enabled("deprecated")
            || warnings::enabled("regexp")))
    {
        my $message = "Having more than one /x regexp modifier is deprecated";
        if (warnings::enabled("deprecated")) {
            warnings::warn("deprecated", $message);
        }
        else {
            warnings::warn("regexp", $message);
        }
    }

    if ($turning_all_off) {
        _load_unload(0);
        $^H{reflags} = 0;
        $^H{reflags_charset} = 0;
        $^H &= ~$flags_hint;
    }

    $bits;
}

sub import {
    shift;
    $^H |= bits(1, @_);
}

sub unimport {
    shift;
    $^H &= ~ bits(0, @_);
}

1;

__END__

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SIGNAL_H)) {
    if(!defined (&__need_sig_atomic_t)  && !defined (&__need_sigset_t)) {
	eval 'sub _SIGNAL_H () {1;}' unless defined(&_SIGNAL_H);
    }
    require 'features.ph';
    require 'bits/sigset.ph';
    if(defined (&__need_sig_atomic_t) || defined (&_SIGNAL_H)) {
	unless(defined(&__sig_atomic_t_defined)) {
	    eval 'sub __sig_atomic_t_defined () {1;}' unless defined(&__sig_atomic_t_defined);
	}
	undef(&__need_sig_atomic_t) if defined(&__need_sig_atomic_t);
    }
    if(defined (&__need_sigset_t) || (defined (&_SIGNAL_H)  && defined (&__USE_POSIX))) {
	unless(defined(&__sigset_t_defined)) {
	    eval 'sub __sigset_t_defined () {1;}' unless defined(&__sigset_t_defined);
	}
	undef(&__need_sigset_t) if defined(&__need_sigset_t);
    }
    if(defined(&_SIGNAL_H)) {
	require 'bits/types.ph';
	require 'bits/signum.ph';
	if(defined (&__USE_XOPEN) || defined (&__USE_XOPEN2K)) {
	    unless(defined(&__pid_t_defined)) {
		eval 'sub __pid_t_defined () {1;}' unless defined(&__pid_t_defined);
	    }
	    if(defined(&__USE_XOPEN)) {
	    }
	    unless(defined(&__uid_t_defined)) {
		eval 'sub __uid_t_defined () {1;}' unless defined(&__uid_t_defined);
	    }
	}
	if(defined(&__USE_POSIX199309)) {
	    eval 'sub __need_timespec () {1;}' unless defined(&__need_timespec);
	    require 'time.ph';
	}
	if(defined (&__USE_POSIX199309) || defined (&__USE_XOPEN_EXTENDED)) {
	    require 'bits/siginfo.ph';
	}
	if(defined(&__USE_GNU)) {
	}
	if(defined(&__USE_MISC)) {
	} else {
	    if(defined(&__REDIRECT_NTH)) {
	    } else {
		eval 'sub signal () { &__sysv_signal;}' unless defined(&signal);
	    }
	}
	if(defined(&__USE_XOPEN)) {
	}
	if(defined(&__USE_POSIX)) {
	}
	if(defined (&__USE_MISC) || defined (&__USE_XOPEN_EXTENDED)) {
	}
	if(defined(&__USE_MISC)) {
	}
	if(defined(&__USE_XOPEN2K8)) {
	}
	if(defined(&__USE_XOPEN)) {
	    if(defined(&__GNUC__)) {
	    } else {
		eval 'sub sigpause {
		    my($sig) = @_;
    		    eval q( &__sigpause (($sig), 1));
		}' unless defined(&sigpause);
	    }
	}
	if(defined(&__USE_MISC)) {
	    eval 'sub sigmask {
	        my($sig) = @_;
    		eval q( &__sigmask($sig));
	    }' unless defined(&sigmask);
	}
	if(defined(&__USE_MISC)) {
	    eval 'sub NSIG () { &_NSIG;}' unless defined(&NSIG);
	}
	if(defined(&__USE_GNU)) {
	}
	if(defined(&__USE_MISC)) {
	}
	if(defined(&__USE_POSIX)) {
	    if(defined(&__USE_GNU)) {
	    }
	    require 'bits/sigaction.ph';
	    if(defined(&__USE_POSIX199309)) {
	    }
	}
	if(defined(&__USE_MISC)) {
	    require 'bits/sigcontext.ph';
	}
	if(defined (&__USE_XOPEN_EXTENDED) || defined (&__USE_XOPEN2K8)) {
	    eval 'sub __need_size_t () {1;}' unless defined(&__need_size_t);
	    require 'stddef.ph';
	    require 'bits/sigstack.ph';
	    if(defined (&__USE_XOPEN) || defined (&__USE_XOPEN2K8)) {
		require 'sys/ucontext.ph';
	    }
	}
	if(defined(&__USE_XOPEN_EXTENDED)) {
	}
	if(defined (&__USE_POSIX199506) || defined (&__USE_UNIX98)) {
	    require 'bits/pthreadtypes.ph';
	    require 'bits/sigthread.ph';
	}
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_STDARG_H)) {
    unless(defined(&_ANSI_STDARG_H_)) {
	unless(defined(&__need___va_list)) {
	    eval 'sub _STDARG_H () {1;}' unless defined(&_STDARG_H);
	    eval 'sub _ANSI_STDARG_H_ () {1;}' unless defined(&_ANSI_STDARG_H_);
	}
	undef(&__need___va_list) if defined(&__need___va_list);
	unless(defined(&__GNUC_VA_LIST)) {
	    eval 'sub __GNUC_VA_LIST () {1;}' unless defined(&__GNUC_VA_LIST);
	}
	if(defined(&_STDARG_H)) {
	    eval 'sub va_start {
	        my($v,$l) = @_;
    		eval q( &__builtin_va_start($v,$l));
	    }' unless defined(&va_start);
	    eval 'sub va_end {
	        my($v) = @_;
    		eval q( &__builtin_va_end($v));
	    }' unless defined(&va_end);
	    eval 'sub va_arg {
	        my($v,$l) = @_;
    		eval q( &__builtin_va_arg($v,$l));
	    }' unless defined(&va_arg);
	    if(!defined(&__STRICT_ANSI__) || (defined(&__STDC_VERSION__) ? &__STDC_VERSION__ : undef) + 0>= 199900 || (defined(&__cplusplus) ? &__cplusplus : undef) + 0>= 201103) {
		eval 'sub va_copy {
		    my($d,$s) = @_;
    		    eval q( &__builtin_va_copy($d,$s));
		}' unless defined(&va_copy);
	    }
	    eval 'sub __va_copy {
	        my($d,$s) = @_;
    		eval q( &__builtin_va_copy($d,$s));
	    }' unless defined(&__va_copy);
	    if(defined(&_BSD_VA_LIST)) {
		undef(&_BSD_VA_LIST) if defined(&_BSD_VA_LIST);
	    }
	    if(defined(&__svr4__) || (defined(&_SCO_DS)  && !defined(&__VA_LIST))) {
		unless(defined(&_VA_LIST_)) {
		    eval 'sub _VA_LIST_ () {1;}' unless defined(&_VA_LIST_);
		    if(defined(&__i860__)) {
			unless(defined(&_VA_LIST)) {
			    eval 'sub _VA_LIST () { &va_list;}' unless defined(&_VA_LIST);
			}
		    }
		    if(defined(&_SCO_DS)) {
			eval 'sub __VA_LIST () {1;}' unless defined(&__VA_LIST);
		    }
		}
	    } else {
		if(!defined (&_VA_LIST_) || defined (&__BSD_NET2__) || defined (&____386BSD____) || defined (&__bsdi__) || defined (&__sequent__) || defined (&__FreeBSD__) || defined(&WINNT)) {
		    unless(defined(&_VA_LIST_DEFINED)) {
			unless(defined(&_VA_LIST)) {
			    unless(defined(&_VA_LIST_T_H)) {
				unless(defined(&__va_list__)) {
				}
			    }
			}
		    }
		    if(!(defined (&__BSD_NET2__) || defined (&____386BSD____) || defined (&__bsdi__) || defined (&__sequent__) || defined (&__FreeBSD__))) {
			eval 'sub _VA_LIST_ () {1;}' unless defined(&_VA_LIST_);
		    }
		    unless(defined(&_VA_LIST)) {
			eval 'sub _VA_LIST () {1;}' unless defined(&_VA_LIST);
		    }
		    unless(defined(&_VA_LIST_DEFINED)) {
			eval 'sub _VA_LIST_DEFINED () {1;}' unless defined(&_VA_LIST_DEFINED);
		    }
		    unless(defined(&_VA_LIST_T_H)) {
			eval 'sub _VA_LIST_T_H () {1;}' unless defined(&_VA_LIST_T_H);
		    }
		    unless(defined(&__va_list__)) {
			eval 'sub __va_list__ () {1;}' unless defined(&__va_list__);
		    }
		}
	    }
	}
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_STDC_PREDEF_H)) {
    eval 'sub _STDC_PREDEF_H () {1;}' unless defined(&_STDC_PREDEF_H);
    if(defined(&__GCC_IEC_559)) {
	if((defined(&__GCC_IEC_559) ? &__GCC_IEC_559 : undef) > 0) {
	    eval 'sub __STDC_IEC_559__ () {1;}' unless defined(&__STDC_IEC_559__);
	}
    } else {
	eval 'sub __STDC_IEC_559__ () {1;}' unless defined(&__STDC_IEC_559__);
    }
    if(defined(&__GCC_IEC_559_COMPLEX)) {
	if((defined(&__GCC_IEC_559_COMPLEX) ? &__GCC_IEC_559_COMPLEX : undef) > 0) {
	    eval 'sub __STDC_IEC_559_COMPLEX__ () {1;}' unless defined(&__STDC_IEC_559_COMPLEX__);
	}
    } else {
	eval 'sub __STDC_IEC_559_COMPLEX__ () {1;}' unless defined(&__STDC_IEC_559_COMPLEX__);
    }
    eval 'sub __STDC_ISO_10646__ () {201605;}' unless defined(&__STDC_ISO_10646__);
    eval 'sub __STDC_NO_THREADS__ () {1;}' unless defined(&__STDC_NO_THREADS__);
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       require '_h2ph_pre.ph';

no warnings qw(redefine misc);

if((!defined(&_STDDEF_H)  && !defined(&_STDDEF_H_)  && !defined(&_ANSI_STDDEF_H)  && !defined(&__STDDEF_H__)) || defined(&__need_wchar_t) || defined(&__need_size_t) || defined(&__need_ptrdiff_t) || defined(&__need_NULL) || defined(&__need_wint_t)) {
    if((!defined(&__need_wchar_t)  && !defined(&__need_size_t)  && !defined(&__need_ptrdiff_t)  && !defined(&__need_NULL)  && !defined(&__need_wint_t))) {
	eval 'sub _STDDEF_H () {1;}' unless defined(&_STDDEF_H);
	eval 'sub _STDDEF_H_ () {1;}' unless defined(&_STDDEF_H_);
	eval 'sub _ANSI_STDDEF_H () {1;}' unless defined(&_ANSI_STDDEF_H);
    }
    unless(defined(&__sys_stdtypes_h)) {
	if(defined (&__BSD_NET2__) || defined (&____386BSD____) || (defined (&__FreeBSD__)  && ((defined(&__FreeBSD__) ? &__FreeBSD__ : undef) < 5)) || defined(&__NetBSD__)) {
	    require 'machine/ansi.ph';
	}
	if(defined (&__FreeBSD__)  && ((defined(&__FreeBSD__) ? &__FreeBSD__ : undef) >= 5)) {
	    require 'sys/_types.ph';
	}
	if(defined(&_ANSI_H_) || defined(&_MACHINE_ANSI_H_) || defined(&_X86_64_ANSI_H_) || defined(&_I386_ANSI_H_)) {
	    if(!defined(&_SIZE_T_)  && !defined(&_BSD_SIZE_T_)) {
		eval 'sub _SIZE_T () {1;}' unless defined(&_SIZE_T);
	    }
	    if(!defined(&_PTRDIFF_T_)  && !defined(&_BSD_PTRDIFF_T_)) {
		eval 'sub _PTRDIFF_T () {1;}' unless defined(&_PTRDIFF_T);
	    }
	    if(!defined(&_WCHAR_T_)  && !defined(&_BSD_WCHAR_T_)) {
		unless(defined(&_BSD_WCHAR_T_)) {
		    eval 'sub _WCHAR_T () {1;}' unless defined(&_WCHAR_T);
		}
	    }
	    if(defined (&__need_ptrdiff_t) || defined (&_STDDEF_H_)) {
		undef(&_PTRDIFF_T_) if defined(&_PTRDIFF_T_);
		undef(&_BSD_PTRDIFF_T_) if defined(&_BSD_PTRDIFF_T_);
	    }
	    if(defined (&__need_size_t) || defined (&_STDDEF_H_)) {
		undef(&_SIZE_T_) if defined(&_SIZE_T_);
		undef(&_BSD_SIZE_T_) if defined(&_BSD_SIZE_T_);
	    }
	    if(defined (&__need_wchar_t) || defined (&_STDDEF_H_)) {
		undef(&_WCHAR_T_) if defined(&_WCHAR_T_);
		undef(&_BSD_WCHAR_T_) if defined(&_BSD_WCHAR_T_);
	    }
	}
	if(defined (&__sequent__)  && defined (&_PTRDIFF_T_)) {
	    undef(&_PTRDIFF_T_) if defined(&_PTRDIFF_T_);
	}
	if(defined (&_TYPE_ptrdiff_t)  && (defined (&__need_ptrdiff_t) || defined (&_STDDEF_H_))) {
	    undef(&_TYPE_ptrdiff_t) if defined(&_TYPE_ptrdiff_t);
	}
	if(defined (&_TYPE_size_t)  && (defined (&__need_size_t) || defined (&_STDDEF_H_))) {
	    undef(&_TYPE_size_t) if defined(&_TYPE_size_t);
	}
	if(defined (&_TYPE_wchar_t)  && (defined (&__need_wchar_t) || defined (&_STDDEF_H_))) {
	    undef(&_TYPE_wchar_t) if defined(&_TYPE_wchar_t);
	}
	if(defined (&_STDDEF_H) || defined (&__need_ptrdiff_t)) {
	    unless(defined(&_PTRDIFF_T)) {
		unless(defined(&_T_PTRDIFF_)) {
		    unless(defined(&_T_PTRDIFF)) {
			unless(defined(&__PTRDIFF_T)) {
			    unless(defined(&_PTRDIFF_T_)) {
				unless(defined(&_BSD_PTRDIFF_T_)) {
				    unless(defined(&___int_ptrdiff_t_h)) {
					unless(defined(&_GCC_PTRDIFF_T)) {
					    unless(defined(&_PTRDIFF_T_DECLARED)) {
						eval 'sub _PTRDIFF_T () {1;}' unless defined(&_PTRDIFF_T);
						eval 'sub _T_PTRDIFF_ () {1;}' unless defined(&_T_PTRDIFF_);
						eval 'sub _T_PTRDIFF () {1;}' unless defined(&_T_PTRDIFF);
						eval 'sub __PTRDIFF_T () {1;}' unless defined(&__PTRDIFF_T);
						eval 'sub _PTRDIFF_T_ () {1;}' unless defined(&_PTRDIFF_T_);
						eval 'sub _BSD_PTRDIFF_T_ () {1;}' unless defined(&_BSD_PTRDIFF_T_);
						eval 'sub ___int_ptrdiff_t_h () {1;}' unless defined(&___int_ptrdiff_t_h);
						eval 'sub _GCC_PTRDIFF_T () {1;}' unless defined(&_GCC_PTRDIFF_T);
						eval 'sub _PTRDIFF_T_DECLARED () {1;}' unless defined(&_PTRDIFF_T_DECLARED);
						unless(defined(&__PTRDIFF_TYPE__)) {
						    eval 'sub __PTRDIFF_TYPE__ () {\'long int\';}' unless defined(&__PTRDIFF_TYPE__);
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    undef(&__need_ptrdiff_t) if defined(&__need_ptrdiff_t);
	}
	if(defined (&_STDDEF_H) || defined (&__need_size_t)) {
	    unless(defined(&__size_t__)) {
		unless(defined(&__SIZE_T__)) {
		    unless(defined(&_SIZE_T)) {
			unless(defined(&_SYS_SIZE_T_H)) {
			    unless(defined(&_T_SIZE_)) {
				unless(defined(&_T_SIZE)) {
				    unless(defined(&__SIZE_T)) {
					unless(defined(&_SIZE_T_)) {
					    unless(defined(&_BSD_SIZE_T_)) {
						unless(defined(&_SIZE_T_DEFINED_)) {
						    unless(defined(&_SIZE_T_DEFINED)) {
							unless(defined(&_BSD_SIZE_T_DEFINED_)) {
							    unless(defined(&_SIZE_T_DECLARED)) {
								unless(defined(&___int_size_t_h)) {
								    unless(defined(&_GCC_SIZE_T)) {
									unless(defined(&_SIZET_)) {
									    unless(defined(&__size_t)) {
										eval 'sub __size_t__ () {1;}' unless defined(&__size_t__);
										eval 'sub __SIZE_T__ () {1;}' unless defined(&__SIZE_T__);
										eval 'sub _SIZE_T () {1;}' unless defined(&_SIZE_T);
										eval 'sub _SYS_SIZE_T_H () {1;}' unless defined(&_SYS_SIZE_T_H);
										eval 'sub _T_SIZE_ () {1;}' unless defined(&_T_SIZE_);
										eval 'sub _T_SIZE () {1;}' unless defined(&_T_SIZE);
										eval 'sub __SIZE_T () {1;}' unless defined(&__SIZE_T);
										eval 'sub _SIZE_T_ () {1;}' unless defined(&_SIZE_T_);
										eval 'sub _BSD_SIZE_T_ () {1;}' unless defined(&_BSD_SIZE_T_);
										eval 'sub _SIZE_T_DEFINED_ () {1;}' unless defined(&_SIZE_T_DEFINED_);
										eval 'sub _SIZE_T_DEFINED () {1;}' unless defined(&_SIZE_T_DEFINED);
										eval 'sub _BSD_SIZE_T_DEFINED_ () {1;}' unless defined(&_BSD_SIZE_T_DEFINED_);
										eval 'sub _SIZE_T_DECLARED () {1;}' unless defined(&_SIZE_T_DECLARED);
										eval 'sub ___int_size_t_h () {1;}' unless defined(&___int_size_t_h);
										eval 'sub _GCC_SIZE_T () {1;}' unless defined(&_GCC_SIZE_T);
										eval 'sub _SIZET_ () {1;}' unless defined(&_SIZET_);
										if((defined (&__FreeBSD__)  && ((defined(&__FreeBSD__) ? &__FreeBSD__ : undef) >= 5)) || defined(&__DragonFly__) || defined(&__FreeBSD_kernel__)) {
										}
 elsif(defined (&__VMS__)) {
										} else {
										    eval 'sub __size_t () {1;}' unless defined(&__size_t);
										}
										unless(defined(&__SIZE_TYPE__)) {
										    eval 'sub __SIZE_TYPE__ () {\'long unsigned int\';}' unless defined(&__SIZE_TYPE__);
										}
										if(!(defined (&__GNUG__)  && defined )) {
										    if(defined(&__BEOS__)) {
										    }
										}
									    }
									}
								    }
								}
							    }
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    undef(&__need_size_t) if defined(&__need_size_t);
	}
	if(defined (&_STDDEF_H) || defined (&__need_wchar_t)) {
	    unless(defined(&__wchar_t__)) {
		unless(defined(&__WCHAR_T__)) {
		    unless(defined(&_WCHAR_T)) {
			unless(defined(&_T_WCHAR_)) {
			    unless(defined(&_T_WCHAR)) {
				unless(defined(&__WCHAR_T)) {
				    unless(defined(&_WCHAR_T_)) {
					unless(defined(&_BSD_WCHAR_T_)) {
					    unless(defined(&_BSD_WCHAR_T_DEFINED_)) {
						unless(defined(&_BSD_RUNE_T_DEFINED_)) {
						    unless(defined(&_WCHAR_T_DECLARED)) {
							unless(defined(&_WCHAR_T_DEFINED_)) {
							    unless(defined(&_WCHAR_T_DEFINED)) {
								unless(defined(&_WCHAR_T_H)) {
								    unless(defined(&___int_wchar_t_h)) {
									unless(defined(&__INT_WCHAR_T_H)) {
									    unless(defined(&_GCC_WCHAR_T)) {
										eval 'sub __wchar_t__ () {1;}' unless defined(&__wchar_t__);
										eval 'sub __WCHAR_T__ () {1;}' unless defined(&__WCHAR_T__);
										eval 'sub _WCHAR_T () {1;}' unless defined(&_WCHAR_T);
										eval 'sub _T_WCHAR_ () {1;}' unless defined(&_T_WCHAR_);
										eval 'sub _T_WCHAR () {1;}' unless defined(&_T_WCHAR);
										eval 'sub __WCHAR_T () {1;}' unless defined(&__WCHAR_T);
										eval 'sub _WCHAR_T_ () {1;}' unless defined(&_WCHAR_T_);
										eval 'sub _BSD_WCHAR_T_ () {1;}' unless defined(&_BSD_WCHAR_T_);
										eval 'sub _WCHAR_T_DEFINED_ () {1;}' unless defined(&_WCHAR_T_DEFINED_);
										eval 'sub _WCHAR_T_DEFINED () {1;}' unless defined(&_WCHAR_T_DEFINED);
										eval 'sub _WCHAR_T_H () {1;}' unless defined(&_WCHAR_T_H);
										eval 'sub ___int_wchar_t_h () {1;}' unless defined(&___int_wchar_t_h);
										eval 'sub __INT_WCHAR_T_H () {1;}' unless defined(&__INT_WCHAR_T_H);
										eval 'sub _GCC_WCHAR_T () {1;}' unless defined(&_GCC_WCHAR_T);
										eval 'sub _WCHAR_T_DECLARED () {1;}' unless defined(&_WCHAR_T_DECLARED);
										if(defined(&_BSD_WCHAR_T_)) {
										    undef(&_BSD_WCHAR_T_) if defined(&_BSD_WCHAR_T_);
										    if(defined(&_BSD_RUNE_T_)) {
											if(!defined (&_ANSI_SOURCE)  && !defined (&_POSIX_SOURCE)) {
											    eval 'sub _BSD_WCHAR_T_DEFINED_ () {1;}' unless defined(&_BSD_WCHAR_T_DEFINED_);
											    eval 'sub _BSD_RUNE_T_DEFINED_ () {1;}' unless defined(&_BSD_RUNE_T_DEFINED_);
											    if(defined (&__FreeBSD__)  && ((defined(&__FreeBSD__) ? &__FreeBSD__ : undef) < 5)) {
												undef(&_BSD_RUNE_T_) if defined(&_BSD_RUNE_T_);
											    }
											}
										    }
										}
										if(defined (&__FreeBSD__)  && ((defined(&__FreeBSD__) ? &__FreeBSD__ : undef) >= 5)) {
										    if(!defined (&_ANSI_SOURCE)  && !defined (&_POSIX_SOURCE)) {
											if((defined(&__BSD_VISIBLE) ? &__BSD_VISIBLE : undef)) {
											    unless(defined(&_RUNE_T_DECLARED)) {
												eval 'sub _RUNE_T_DECLARED () {1;}' unless defined(&_RUNE_T_DECLARED);
											    }
											}
										    }
										}
										unless(defined(&__WCHAR_TYPE__)) {
										    eval 'sub __WCHAR_TYPE__ () {\'int\';}' unless defined(&__WCHAR_TYPE__);
										}
										unless(defined(&__cplusplus)) {
										}
									    }
									}
								    }
								}
							    }
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    undef(&__need_wchar_t) if defined(&__need_wchar_t);
	}
	if(defined (&__need_wint_t)) {
	    unless(defined(&_WINT_T)) {
		eval 'sub _WINT_T () {1;}' unless defined(&_WINT_T);
		unless(defined(&__WINT_TYPE__)) {
		    eval 'sub __WINT_TYPE__ () {\'unsigned int\';}' unless defined(&__WINT_TYPE__);
		}
	    }
	    undef(&__need_wint_t) if defined(&__need_wint_t);
	}
	if(defined(&_ANSI_H_) || defined(&_MACHINE_ANSI_H_) || defined(&_X86_64_ANSI_H_) || defined(&_I386_ANSI_H_)) {
	    if(defined(&_GCC_PTRDIFF_T_)) {
		undef(&_PTRDIFF_T_) if defined(&_PTRDIFF_T_);
		undef(&_BSD_PTRDIFF_T_) if defined(&_BSD_PTRDIFF_T_);
	    }
	    if(defined(&_GCC_SIZE_T_)) {
		undef(&_SIZE_T_) if defined(&_SIZE_T_);
		undef(&_BSD_SIZE_T_) if defined(&_BSD_SIZE_T_);
	    }
	    if(defined(&_GCC_WCHAR_T_)) {
		undef(&_WCHAR_T_) if defined(&_WCHAR_T_);
		undef(&_BSD_WCHAR_T_) if defined(&_BSD_WCHAR_T_);
	    }
	    if(defined(&_GCC_PTRDIFF_T)) {
		undef(&_PTRDIFF_T_) if defined(&_PTRDIFF_T_);
		undef(&_BSD_PTRDIFF_T_) if defined(&_BSD_PTRDIFF_T_);
	    }
	    if(defined(&_GCC_SIZE_T)) {
		undef(&_SIZE_T_) if defined(&_SIZE_T_);
		undef(&_BSD_SIZE_T_) if defined(&_BSD_SIZE_T_);
	    }
	    if(defined(&_GCC_WCHAR_T)) {
		undef(&_WCHAR_T_) if defined(&_WCHAR_T_);
		undef(&_BSD_WCHAR_T_) if defined(&_BSD_WCHAR_T_);
	    }
	}
    }
    if(defined (&_STDDEF_H) || defined (&__need_NULL)) {
	undef(&NULL) if defined(&NULL);
	if(defined(&__GNUG__)) {
	    eval 'sub NULL () { &__null;}' unless defined(&NULL);
	} else {
	    unless(defined(&__cplusplus)) {
		eval 'sub NULL () {(( &void *)0);}' unless defined(&NULL);
	    } else {
		eval 'sub NULL () {0;}' unless defined(&NULL);
	    }
	}
    }
    undef(&__need_NULL) if defined(&__need_NULL);
    if(defined(&_STDDEF_H)) {
	eval 'sub offsetof {
	    my($TYPE, $MEMBER) = @_;
    	    eval q( &__builtin_offsetof ($TYPE, $MEMBER));
	}' unless defined(&offsetof);
	if((defined (&__STDC_VERSION__)  && (defined(&__STDC_VERSION__) ? &__STDC_VERSION__ : undef) >= 201112) || (defined(&__cplusplus)  && (defined(&__cplusplus) ? &__cplusplus : undef) >= 201103)) {
	    unless(defined(&_GCC_MAX_ALIGN_T)) {
		eval 'sub _GCC_MAX_ALIGN_T () {1;}' unless defined(&_GCC_MAX_ALIGN_T);
	    }
	}
	if(defined(&__cplusplus)  && (defined(&__cplusplus) ? &__cplusplus : undef) >= 201103) {
	    unless(defined(&_GXX_NULLPTR_T)) {
		eval 'sub _GXX_NULLPTR_T () {1;}' unless defined(&_GXX_NULLPTR_T);
	    }
	}
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           require '_h2ph_pre.ph';

no warnings qw(redefine misc);

require 'sys/syscall.ph';
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SYSEXITS_H)) {
    eval 'sub _SYSEXITS_H () {1;}' unless defined(&_SYSEXITS_H);
    eval 'sub EX_OK () {0;}' unless defined(&EX_OK);
    eval 'sub EX__BASE () {64;}' unless defined(&EX__BASE);
    eval 'sub EX_USAGE () {64;}' unless defined(&EX_USAGE);
    eval 'sub EX_DATAERR () {65;}' unless defined(&EX_DATAERR);
    eval 'sub EX_NOINPUT () {66;}' unless defined(&EX_NOINPUT);
    eval 'sub EX_NOUSER () {67;}' unless defined(&EX_NOUSER);
    eval 'sub EX_NOHOST () {68;}' unless defined(&EX_NOHOST);
    eval 'sub EX_UNAVAILABLE () {69;}' unless defined(&EX_UNAVAILABLE);
    eval 'sub EX_SOFTWARE () {70;}' unless defined(&EX_SOFTWARE);
    eval 'sub EX_OSERR () {71;}' unless defined(&EX_OSERR);
    eval 'sub EX_OSFILE () {72;}' unless defined(&EX_OSFILE);
    eval 'sub EX_CANTCREAT () {73;}' unless defined(&EX_CANTCREAT);
    eval 'sub EX_IOERR () {74;}' unless defined(&EX_IOERR);
    eval 'sub EX_TEMPFAIL () {75;}' unless defined(&EX_TEMPFAIL);
    eval 'sub EX_PROTOCOL () {76;}' unless defined(&EX_PROTOCOL);
    eval 'sub EX_NOPERM () {77;}' unless defined(&EX_NOPERM);
    eval 'sub EX_CONFIG () {78;}' unless defined(&EX_CONFIG);
    eval 'sub EX__MAX () {78;}' unless defined(&EX__MAX);
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          require '_h2ph_pre.ph';

no warnings qw(redefine misc);

eval 'sub _GCC_NEXT_LIMITS_H () {1;}' unless defined(&_GCC_NEXT_LIMITS_H);
eval {
    my(@REM);
    my(%INCD) = map { $INC{$_} => 1 } (grep { $_ eq "limits.ph" } keys(%INC));
    @REM = map { "$_/limits.ph" } (grep { not exists($INCD{"$_/limits.ph"}) and -f "$_/limits.ph" } @INC);
    require "$REM[0]" if @REM;
};
warn($@) if $@;
undef(&_GCC_NEXT_LIMITS_H) if defined(&_GCC_NEXT_LIMITS_H);
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            require '_h2ph_pre.ph';

no warnings qw(redefine misc);

require 'sys/syslog.ph';
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           package threads;

use 5.008;

use strict;
use warnings;

our $VERSION = '2.07';
my $XS_VERSION = $VERSION;
$VERSION = eval $VERSION;

# Verify this Perl supports threads
require Config;
if (! $Config::Config{useithreads}) {
    die("This Perl not built to support threads\n");
}

# Complain if 'threads' is loaded after 'threads::shared'
if ($threads::shared::threads_shared) {
    warn <<'_MSG_';
Warning, threads::shared has already been loaded.  To
enable shared variables, 'use threads' must be called
before threads::shared or any module that uses it.
_MSG_
}

# Declare that we have been loaded
$threads::threads = 1;

# Load the XS code
require XSLoader;
XSLoader::load('threads', $XS_VERSION);


### Export ###

sub import
{
    my $class = shift;   # Not used

    # Exported subroutines
    my @EXPORT = qw(async);

    # Handle args
    while (my $sym = shift) {
        if ($sym =~ /^(?:stack|exit)/i) {
            if (defined(my $arg = shift)) {
                if ($sym =~ /^stack/i) {
                    threads->set_stack_size($arg);
                } else {
                    $threads::thread_exit_only = $arg =~ /^thread/i;
                }
            } else {
                require Carp;
                Carp::croak("threads: Missing argument for option: $sym");
            }

        } elsif ($sym =~ /^str/i) {
            import overload ('""' => \&tid);

        } elsif ($sym =~ /^(?::all|yield)$/) {
            push(@EXPORT, qw(yield));

        } else {
            require Carp;
            Carp::croak("threads: Unknown import option: $sym");
        }
    }

    # Export subroutine names
    my $caller = caller();
    foreach my $sym (@EXPORT) {
        no strict 'refs';
        *{$caller.'::'.$sym} = \&{$sym};
    }

    # Set stack size via environment variable
    if (exists($ENV{'PERL5_ITHREADS_STACK_SIZE'})) {
        threads->set_stack_size($ENV{'PERL5_ITHREADS_STACK_SIZE'});
    }
}


### Methods, etc. ###

# Exit from a thread (only)
sub exit
{
    my ($class, $status) = @_;
    if (! defined($status)) {
        $status = 0;
    }

    # Class method only
    if (ref($class)) {
        require Carp;
        Carp::croak('Usage: threads->exit(status)');
    }

    $class->set_thread_exit_only(1);
    CORE::exit($status);
}

# 'Constant' args for threads->list()
sub threads::all      { }
sub threads::running  { 1 }
sub threads::joinable { 0 }

# 'new' is an alias for 'create'
*new = \&create;

# 'async' is a function alias for the 'threads->create()' method
sub async (&;@)
{
    unshift(@_, 'threads');
    # Use "goto" trick to avoid pad problems from 5.8.1 (fixed in 5.8.2)
    goto &create;
}

# Thread object equality checking
use overload (
    '==' => \&equal,
    '!=' => sub { ! equal(@_) },
    'fallback' => 1
);

1;

__END__

=head1 NAME

threads - Perl interpreter-based threads

=head1 VERSION

This document describes threads version 2.07

=head1 WARNING

The "interpreter-based threads" provided by Perl are not the fast, lightweight
system for multitasking that one might expect or hope for.  Threads are
implemented in a way that make them easy to misuse.  Few people know how to
use them correctly or will be able to provide help.

The use of interpreter-based threads in perl is officially
L<discouraged|perlpolicy/discouraged>.

=head1 SYNOPSIS

    use threads ('yield',
                 'stack_size' => 64*4096,
                 'exit' => 'threads_only',
                 'stringify');

    sub start_thread {
        my @args = @_;
        print('Thread started: ', join(' ', @args), "\n");
    }
    my $thr = threads->create('start_thread', 'argument');
    $thr->join();

    threads->create(sub { print("I am a thread\n"); })->join();

    my $thr2 = async { foreach (@files) { ... } };
    $thr2->join();
    if (my $err = $thr2->error()) {
        warn("Thread error: $err\n");
    }

    # Invoke thread in list context (implicit) so it can return a list
    my ($thr) = threads->create(sub { return (qw/a b c/); });
    # or specify list context explicitly
    my $thr = threads->create({'context' => 'list'},
                              sub { return (qw/a b c/); });
    my @results = $thr->join();

    $thr->detach();

    # Get a thread's object
    $thr = threads->self();
    $thr = threads->object($tid);

    # Get a thread's ID
    $tid = threads->tid();
    $tid = $thr->tid();
    $tid = "$thr";

    # Give other threads a chance to run
    threads->yield();
    yield();

    # Lists of non-detached threads
    my @threads = threads->list();
    my $thread_count = threads->list();

    my @running = threads->list(threads::running);
    my @joinable = threads->list(threads::joinable);

    # Test thread objects
    if ($thr1 == $thr2) {
        ...
    }

    # Manage thread stack size
    $stack_size = threads->get_stack_size();
    $old_size = threads->set_stack_size(32*4096);

    # Create a thread with a specific context and stack size
    my $thr = threads->create({ 'context'    => 'list',
                                'stack_size' => 32*4096,
                                'exit'       => 'thread_only' },
                              \&foo);

    # Get thread's context
    my $wantarray = $thr->wantarray();

    # Check thread's state
    if ($thr->is_running()) {
        sleep(1);
    }
    if ($thr->is_joinable()) {
        $thr->join();
    }

    # Send a signal to a thread
    $thr->kill('SIGUSR1');

    # Exit a thread
    threads->exit();

=head1 DESCRIPTION

Since Perl 5.8, thread programming has been available using a model called
I<interpreter threads> which provides a new Perl interpreter for each
thread, and, by default, results in no data or state information being shared
between threads.

(Prior to Perl 5.8, I<5005threads> was available through the C<Thread.pm> API.
This threading model has been deprecated, and was removed as of Perl 5.10.0.)

As just mentioned, all variables are, by default, thread local.  To use shared
variables, you need to also load L<threads::shared>:

    use threads;
    use threads::shared;

When loading L<threads::shared>, you must C<use threads> before you
C<use threads::shared>.  (C<threads> will emit a warning if you do it the
other way around.)

It is strongly recommended that you enable threads via C<use threads> as early
as possible in your script.

If needed, scripts can be written so as to run on both threaded and
non-threaded Perls:

    my $can_use_threads = eval 'use threads; 1';
    if ($can_use_threads) {
        # Do processing using threads
        ...
    } else {
        # Do it without using threads
        ...
    }

=over

=item $thr = threads->create(FUNCTION, ARGS)

This will create a new thread that will begin execution with the specified
entry point function, and give it the I<ARGS> list as parameters.  It will
return the corresponding threads object, or C<undef> if thread creation failed.

I<FUNCTION> may either be the name of a function, an anonymous subroutine, or
a code ref.

    my $thr = threads->create('func_name', ...);
        # or
    my $thr = threads->create(sub { ... }, ...);
        # or
    my $thr = threads->create(\&func, ...);

The C<-E<gt>new()> method is an alias for C<-E<gt>create()>.

=item $thr->join()

This will wait for the corresponding thread to complete its execution.  When
the thread finishes, C<-E<gt>join()> will return the return value(s) of the
entry point function.

The context (void, scalar or list) for the return value(s) for C<-E<gt>join()>
is determined at the time of thread creation.

    # Create thread in list context (implicit)
    my ($thr1) = threads->create(sub {
                                    my @results = qw(a b c);
                                    return (@results);
                                 });
    #   or (explicit)
    my $thr1 = threads->create({'context' => 'list'},
                               sub {
                                    my @results = qw(a b c);
                                    return (@results);
                               });
    # Retrieve list results from thread
    my @res1 = $thr1->join();

    # Create thread in scalar context (implicit)
    my $thr2 = threads->create(sub {
                                    my $result = 42;
                                    return ($result);
                                 });
    # Retrieve scalar result from thread
    my $res2 = $thr2->join();

    # Create a thread in void context (explicit)
    my $thr3 = threads->create({'void' => 1},
                               sub { print("Hello, world\n"); });
    # Join the thread in void context (i.e., no return value)
    $thr3->join();

See L</"THREAD CONTEXT"> for more details.

If the program exits without all threads having either been joined or
detached, then a warning will be issued.

Calling C<-E<gt>join()> or C<-E<gt>detach()> on an already joined thread will
cause an error to be thrown.

=item $thr->detach()

Makes the thread unjoinable, and causes any eventual return value to be
discarded.  When the program exits, any detached threads that are still
running are silently terminated.

If the program exits without all threads having either been joined or
detached, then a warning will be issued.

Calling C<-E<gt>join()> or C<-E<gt>detach()> on an already detached thread
will cause an error to be thrown.

=item threads->detach()

Class method that allows a thread to detach itself.

=item threads->self()

Class method that allows a thread to obtain its own I<threads> object.

=item $thr->tid()

Returns the ID of the thread.  Thread IDs are unique integers with the main
thread in a program being 0, and incrementing by 1 for every thread created.

=item threads->tid()

Class method that allows a thread to obtain its own ID.

=item "$thr"

If you add the C<stringify> import option to your C<use threads> declaration,
then using a threads object in a string or a string context (e.g., as a hash
key) will cause its ID to be used as the value:

    use threads qw(stringify);

    my $thr = threads->create(...);
    print("Thread $thr started\n");  # Prints: Thread 1 started

=item threads->object($tid)

This will return the I<threads> object for the I<active> thread associated
with the specified thread ID.  If C<$tid> is the value for the current thread,
then this call works the same as C<-E<gt>self()>.  Otherwise, returns C<undef>
if there is no thread associated with the TID, if the thread is joined or
detached, if no TID is specified or if the specified TID is undef.

=item threads->yield()

This is a suggestion to the OS to let this thread yield CPU time to other
threads.  What actually happens is highly dependent upon the underlying
thread implementation.

You may do C<use threads qw(yield)>, and then just use C<yield()> in your
code.

=item threads->list()

=item threads->list(threads::all)

=item threads->list(threads::running)

=item threads->list(threads::joinable)

With no arguments (or using C<threads::all>) and in a list context, returns a
list of all non-joined, non-detached I<threads> objects.  In a scalar context,
returns a count of the same.

With a I<true> argument (using C<threads::running>), returns a list of all
non-joined, non-detached I<threads> objects that are still running.

With a I<false> argument (using C<threads::joinable>), returns a list of all
non-joined, non-detached I<threads> objects that have finished running (i.e.,
for which C<-E<gt>join()> will not I<block>).

=item $thr1->equal($thr2)

Tests if two threads objects are the same thread or not.  This is overloaded
to the more natural forms:

    if ($thr1 == $thr2) {
        print("Threads are the same\n");
    }
    # or
    if ($thr1 != $thr2) {
        print("Threads differ\n");
    }

(Thread comparison is based on thread IDs.)

=item async BLOCK;

C<async> creates a thread to execute the block immediately following
it.  This block is treated as an anonymous subroutine, and so must have a
semicolon after the closing brace.  Like C<threads-E<gt>create()>, C<async>
returns a I<threads> object.

=item $thr->error()

Threads are executed in an C<eval> context.  This method will return C<undef>
if the thread terminates I<normally>.  Otherwise, it returns the value of
C<$@> associated with the thread's execution status in its C<eval> context.

=item $thr->_handle()

This I<private> method returns a pointer (i.e., the memory location expressed
as an unsigned integer) to the internal thread structure associated with a
threads object.  For Win32, this is a pointer to the C<HANDLE> value returned
by C<CreateThread> (i.e., C<HANDLE *>); for other platforms, it is a pointer
to the C<pthread_t> structure used in the C<pthread_create> call (i.e.,
C<pthread_t *>).

This method is of no use for general Perl threads programming.  Its intent is
to provide other (XS-based) thread modules with the capability to access, and
possibly manipulate, the underlying thread structure associated with a Perl
thread.

=item threads->_handle()

Class method that allows a thread to obtain its own I<handle>.

=back

=head1 EXITING A THREAD

The usual method for terminating a thread is to
L<return()|perlfunc/"return EXPR"> from the entry point function with the
appropriate return value(s).

=over

=item threads->exit()

If needed, a thread can be exited at any time by calling
C<threads-E<gt>exit()>.  This will cause the thread to return C<undef> in a
scalar context, or the empty list in a list context.

When called from the I<main> thread, this behaves the same as C<exit(0)>.

=item threads->exit(status)

When called from a thread, this behaves like C<threads-E<gt>exit()> (i.e., the
exit status code is ignored).

When called from the I<main> thread, this behaves the same as C<exit(status)>.

=item die()

Calling C<die()> in a thread indicates an abnormal exit for the thread.  Any
C<$SIG{__DIE__}> handler in the thread will be called first, and then the
thread will exit with a warning message that will contain any arguments passed
in the C<die()> call.

=item exit(status)

Calling L<exit()|perlfunc/"exit EXPR"> inside a thread causes the whole
application to terminate.  Because of this, the use of C<exit()> inside
threaded code, or in modules that might be used in threaded applications, is
strongly discouraged.

If C<exit()> really is needed, then consider using the following:

    threads->exit() if threads->can('exit');   # Thread friendly
    exit(status);

=item use threads 'exit' => 'threads_only'

This globally overrides the default behavior of calling C<exit()> inside a
thread, and effectively causes such calls to behave the same as
C<threads-E<gt>exit()>.  In other words, with this setting, calling C<exit()>
causes only the thread to terminate.

Because of its global effect, this setting should not be used inside modules
or the like.

The I<main> thread is unaffected by this setting.

=item threads->create({'exit' => 'thread_only'}, ...)

This overrides the default behavior of C<exit()> inside the newly created
thread only.

=item $thr->set_thread_exit_only(boolean)

This can be used to change the I<exit thread only> behavior for a thread after
it has been created.  With a I<true> argument, C<exit()> will cause only the
thread to exit.  With a I<false> argument, C<exit()> will terminate the
application.

The I<main> thread is unaffected by this call.

=item threads->set_thread_exit_only(boolean)

Class method for use inside a thread to change its own behavior for C<exit()>.

The I<main> thread is unaffected by this call.

=back

=head1 THREAD STATE

The following boolean methods are useful in determining the I<state> of a
thread.

=over

=item $thr->is_running()

Returns true if a thread is still running (i.e., if its entry point function
has not yet finished or exited).

=item $thr->is_joinable()

Returns true if the thread has finished running, is not detached and has not
yet been joined.  In other words, the thread is ready to be joined, and a call
to C<$thr-E<gt>join()> will not I<block>.

=item $thr->is_detached()

Returns true if the thread has been detached.

=item threads->is_detached()

Class method that allows a thread to determine whether or not it is detached.

=back

=head1 THREAD CONTEXT

As with subroutines, the type of value returned from a thread's entry point
function may be determined by the thread's I<context>:  list, scalar or void.
The thread's context is determined at thread creation.  This is necessary so
that the context is available to the entry point function via
L<wantarray()|perlfunc/"wantarray">.  The thread may then specify a value of
the appropriate type to be returned from C<-E<gt>join()>.

=head2 Explicit context

Because thread creation and thread joining may occur in different contexts, it
may be desirable to state the context explicitly to the thread's entry point
function.  This may be done by calling C<-E<gt>create()> with a hash reference
as the first argument:

    my $thr = threads->create({'context' => 'list'}, \&foo);
    ...
    my @results = $thr->join();

In the above, the threads object is returned to the parent thread in scalar
context, and the thread's entry point function C<foo> will be called in list
(array) context such that the parent thread can receive a list (array) from
the C<-E<gt>join()> call.  (C<'array'> is synonymous with C<'list'>.)

Similarly, if you need the threads object, but your thread will not be
returning a value (i.e., I<void> context), you would do the following:

    my $thr = threads->create({'context' => 'void'}, \&foo);
    ...
    $thr->join();

The context type may also be used as the I<key> in the hash reference followed
by a I<true> value:

    threads->create({'scalar' => 1}, \&foo);
    ...
    my ($thr) = threads->list();
    my $result = $thr->join();

=head2 Implicit context

If not explicitly stated, the thread's context is implied from the context
of the C<-E<gt>create()> call:

    # Create thread in list context
    my ($thr) = threads->create(...);

    # Create thread in scalar context
    my $thr = threads->create(...);

    # Create thread in void context
    threads->create(...);

=head2 $thr->wantarray()

This returns the thread's context in the same manner as
L<wantarray()|perlfunc/"wantarray">.

=head2 threads->wantarray()

Class method to return the current thread's context.  This returns the same
value as running L<wantarray()|perlfunc/"wantarray"> inside the current
thread's entry point function.

=head1 THREAD STACK SIZE

The default per-thread stack size for different platforms varies
significantly, and is almost always far more than is needed for most
applications.  On Win32, Perl's makefile explicitly sets the default stack to
16 MB; on most other platforms, the system default is used, which again may be
much larger than is needed.

By tuning the stack size to more accurately reflect your application's needs,
you may significantly reduce your application's memory usage, and increase the
number of simultaneously running threads.

Note that on Windows, address space allocation granularity is 64 KB,
therefore, setting the stack smaller than that on Win32 Perl will not save any
more memory.

=over

=item threads->get_stack_size();

Returns the current default per-thread stack size.  The default is zero, which
means the system default stack size is currently in use.

=item $size = $thr->get_stack_size();

Returns the stack size for a particular thread.  A return value of zero
indicates the system default stack size was used for the thread.

=item $old_size = threads->set_stack_size($new_size);

Sets a new default per-thread stack size, and returns the previous setting.

Some platforms have a minimum thread stack size.  Trying to set the stack size
below this value will result in a warning, and the minimum stack size will be
used.

Some Linux platforms have a maximum stack size.  Setting too large of a stack
size will cause thread creation to fail.

If needed, C<$new_size> will be rounded up to the next multiple of the memory
page size (usually 4096 or 8192).

Threads created after the stack size is set will then either call
C<pthread_attr_setstacksize()> I<(for pthreads platforms)>, or supply the
stack size to C<CreateThread()> I<(for Win32 Perl)>.

(Obviously, this call does not affect any currently extant threads.)

=item use threads ('stack_size' => VALUE);

This sets the default per-thread stack size at the start of the application.

=item $ENV{'PERL5_ITHREADS_STACK_SIZE'}

The default per-thread stack size may be set at the start of the application
through the use of the environment variable C<PERL5_ITHREADS_STACK_SIZE>:

    PERL5_ITHREADS_STACK_SIZE=1048576
    export PERL5_ITHREADS_STACK_SIZE
    perl -e'use threads; print(threads->get_stack_size(), "\n")'

This value overrides any C<stack_size> parameter given to C<use threads>.  Its
primary purpose is to permit setting the per-thread stack size for legacy
threaded applications.

=item threads->create({'stack_size' => VALUE}, FUNCTION, ARGS)

To specify a particular stack size for any individual thread, call
C<-E<gt>create()> with a hash reference as the first argument:

    my $thr = threads->create({'stack_size' => 32*4096},
                              \&foo, @args);

=item $thr2 = $thr1->create(FUNCTION, ARGS)

This creates a new thread (C<$thr2>) that inherits the stack size from an
existing thread (C<$thr1>).  This is shorthand for the following:

    my $stack_size = $thr1->get_stack_size();
    my $thr2 = threads->create({'stack_size' => $stack_size},
                               FUNCTION, ARGS);

=back

=head1 THREAD SIGNALLING

When safe signals is in effect (the default behavior - see L</"Unsafe signals">
for more details), then signals may be sent and acted upon by individual
threads.

=over 4

=item $thr->kill('SIG...');

Sends the specified signal to the thread.  Signal names and (positive) signal
numbers are the same as those supported by
L<kill()|perlfunc/"kill SIGNAL, LIST">.  For example, 'SIGTERM', 'TERM' and
(depending on the OS) 15 are all valid arguments to C<-E<gt>kill()>.

Returns the thread object to allow for method chaining:

    $thr->kill('SIG...')->join();

=back

Signal handlers need to be set up in the threads for the signals they are
expected to act upon.  Here's an example for I<cancelling> a thread:

    use threads;

    sub thr_func
    {
        # Thread 'cancellation' signal handler
        $SIG{'KILL'} = sub { threads->exit(); };

        ...
    }

    # Create a thread
    my $thr = threads->create('thr_func');

    ...

    # Signal the thread to terminate, and then detach
    # it so that it will get cleaned up automatically
    $thr->kill('KILL')->detach();

Here's another simplistic example that illustrates the use of thread
signalling in conjunction with a semaphore to provide rudimentary I<suspend>
and I<resume> capabilities:

    use threads;
    use Thread::Semaphore;

    sub thr_func
    {
        my $sema = shift;

        # Thread 'suspend/resume' signal handler
        $SIG{'STOP'} = sub {
            $sema->down();      # Thread suspended
            $sema->up();        # Thread resumes
        };

        ...
    }

    # Create a semaphore and pass it to a thread
    my $sema = Thread::Semaphore->new();
    my $thr = threads->create('thr_func', $sema);

    # Suspend the thread
    $sema->down();
    $thr->kill('STOP');

    ...

    # Allow the thread to continue
    $sema->up();

CAVEAT:  The thread signalling capability provided by this module does not
actually send signals via the OS.  It I<emulates> signals at the Perl-level
such that signal handlers are called in the appropriate thread.  For example,
sending C<$thr-E<gt>kill('STOP')> does not actually suspend a thread (or the
whole process), but does cause a C<$SIG{'STOP'}> handler to be called in that
thread (as illustrated above).

As such, signals that would normally not be appropriate to use in the
C<kill()> command (e.g., C<kill('KILL', $$)>) are okay to use with the
C<-E<gt>kill()> method (again, as illustrated above).

Correspondingly, sending a signal to a thread does not disrupt the operation
the thread is currently working on:  The signal will be acted upon after the
current operation has completed.  For instance, if the thread is I<stuck> on
an I/O call, sending it a signal will not cause the I/O call to be interrupted
such that the signal is acted up immediately.

Sending a signal to a terminated/finished thread is ignored.

=head1 WARNINGS

=over 4

=item Perl exited with active threads:

If the program exits without all threads having either been joined or
detached, then this warning will be issued.

NOTE:  If the I<main> thread exits, then this warning cannot be suppressed
using C<no warnings 'threads';> as suggested below.

=item Thread creation failed: pthread_create returned #

See the appropriate I<man> page for C<pthread_create> to determine the actual
cause for the failure.

=item Thread # terminated abnormally: ...

A thread terminated in some manner other than just returning from its entry
point function, or by using C<threads-E<gt>exit()>.  For example, the thread
may have terminated because of an error, or by using C<die>.

=item Using minimum thread stack size of #

Some platforms have a minimum thread stack size.  Trying to set the stack size
below this value will result in the above warning, and the stack size will be
set to the minimum.

=item Thread creation failed: pthread_attr_setstacksize(I<SIZE>) returned 22

The specified I<SIZE> exceeds the system's maximum stack size.  Use a smaller
value for the stack size.

=back

If needed, thread warnings can be suppressed by using:

    no warnings 'threads';

in the appropriate scope.

=head1 ERRORS

=over 4

=item This Perl not built to support threads

The particular copy of Perl that you're trying to use was not built using the
C<useithreads> configuration option.

Having threads support requires all of Perl and all of the XS modules in the
Perl installation to be rebuilt; it is not just a question of adding the
L<threads> module (i.e., threaded and non-threaded Perls are binary
incompatible).

=item Cannot change stack size of an existing thread

The stack size of currently extant threads cannot be changed, therefore, the
following results in the above error:

    $thr->set_stack_size($size);

=item Cannot signal threads without safe signals

Safe signals must be in effect to use the C<-E<gt>kill()> signalling method.
See L</"Unsafe signals"> for more details.

=item Unrecognized signal name: ...

The particular copy of Perl that you're trying to use does not support the
specified signal being used in a C<-E<gt>kill()> call.

=back

=head1 BUGS AND LIMITATIONS

Before you consider posting a bug report, please consult, and possibly post a
message to the discussion forum to see if what you've encountered is a known
problem.

=over

=item Thread-safe modules

See L<perlmod/"Making your module threadsafe"> when creating modules that may
be used in threaded applications, especially if those modules use non-Perl
data, or XS code.

=item Using non-thread-safe modules

Unfortunately, you may encounter Perl modules that are not I<thread-safe>.
For example, they may crash the Perl interpreter during execution, or may dump
core on termination.  Depending on the module and the requirements of your
application, it may be possible to work around such difficulties.

If the module will only be used inside a thread, you can try loading the
module from inside the thread entry point function using C<require> (and
C<import> if needed):

    sub thr_func
    {
        require Unsafe::Module
        # Unsafe::Module->import(...);

        ....
    }

If the module is needed inside the I<main> thread, try modifying your
application so that the module is loaded (again using C<require> and
C<-E<gt>import()>) after any threads are started, and in such a way that no
other threads are started afterwards.

If the above does not work, or is not adequate for your application, then file
a bug report on L<http://rt.cpan.org/Public/> against the problematic module.

=item Memory consumption

On most systems, frequent and continual creation and destruction of threads
can lead to ever-increasing growth in the memory footprint of the Perl
interpreter.  While it is simple to just launch threads and then
C<-E<gt>join()> or C<-E<gt>detach()> them, for long-lived applications, it is
better to maintain a pool of threads, and to reuse them for the work needed,
using L<queues|Thread::Queue> to notify threads of pending work.  The CPAN
distribution of this module contains a simple example
(F<examples/pool_reuse.pl>) illustrating the creation, use and monitoring of a
pool of I<reusable> threads.

=item Current working directory

On all platforms except MSWin32, the setting for the current working directory
is shared among all threads such that changing it in one thread (e.g., using
C<chdir()>) will affect all the threads in the application.

On MSWin32, each thread maintains its own the current working directory
setting.

=item Environment variables

Currently, on all platforms except MSWin32, all I<system> calls (e.g., using
C<system()> or back-ticks) made from threads use the environment variable
settings from the I<main> thread.  In other words, changes made to C<%ENV> in
a thread will not be visible in I<system> calls made by that thread.

To work around this, set environment variables as part of the I<system> call.
For example:

    my $msg = 'hello';
    system("FOO=$msg; echo \$FOO");   # Outputs 'hello' to STDOUT

On MSWin32, each thread maintains its own set of environment variables.

=item Catching signals

Signals are I<caught> by the main thread (thread ID = 0) of a script.
Therefore, setting up signal handlers in threads for purposes other than
L</"THREAD SIGNALLING"> as documented above will not accomplish what is
intended.

This is especially true if trying to catch C<SIGALRM> in a thread.  To handle
alarms in threads, set up a signal handler in the main thread, and then use
L</"THREAD SIGNALLING"> to relay the signal to the thread:

  # Create thread with a task that may time out
  my $thr = threads->create(sub {
      threads->yield();
      eval {
          $SIG{ALRM} = sub { die("Timeout\n"); };
          alarm(10);
          ...  # Do work here
          alarm(0);
      };
      if ($@ =~ /Timeout/) {
          warn("Task in thread timed out\n");
      }
  };

  # Set signal handler to relay SIGALRM to thread
  $SIG{ALRM} = sub { $thr->kill('ALRM') };

  ... # Main thread continues working

=item Parent-child threads

On some platforms, it might not be possible to destroy I<parent> threads while
there are still existing I<child> threads.

=item Creating threads inside special blocks

Creating threads inside C<BEGIN>, C<CHECK> or C<INIT> blocks should not be
relied upon.  Depending on the Perl version and the application code, results
may range from success, to (apparently harmless) warnings of leaked scalar, or
all the way up to crashing of the Perl interpreter.

=item Unsafe signals

Since Perl 5.8.0, signals have been made safer in Perl by postponing their
handling until the interpreter is in a I<safe> state.  See
L<perl58delta/"Safe Signals"> and L<perlipc/"Deferred Signals (Safe Signals)">
for more details.

Safe signals is the default behavior, and the old, immediate, unsafe
signalling behavior is only in effect in the following situations:

=over 4

=item * Perl has been built with C<PERL_OLD_SIGNALS> (see C<perl -V>).

=item * The environment variable C<PERL_SIGNALS> is set to C<unsafe>
(see L<perlrun/"PERL_SIGNALS">).

=item * The module L<Perl::Unsafe::Signals> is used.

=back

If unsafe signals is in effect, then signal handling is not thread-safe, and
the C<-E<gt>kill()> signalling method cannot be used.

=item Returning closures from threads

Returning closures from threads should not be relied upon.  Depending on the
Perl version and the application code, results may range from success, to
(apparently harmless) warnings of leaked scalar, or all the way up to crashing
of the Perl interpreter.

=item Returning objects from threads

Returning objects from threads does not work.  Depending on the classes
involved, you may be able to work around this by returning a serialized
version of the object (e.g., using L<Data::Dumper> or L<Storable>), and then
reconstituting it in the joining thread.  If you're using Perl 5.10.0 or
later, and if the class supports L<shared objects|threads::shared/"OBJECTS">,
you can pass them via L<shared queues|Thread::Queue>.

=item END blocks in threads

It is possible to add L<END blocks|perlmod/"BEGIN, UNITCHECK, CHECK, INIT and
END"> to threads by using L<require|perlfunc/"require VERSION"> or
L<eval|perlfunc/"eval EXPR"> with the appropriate code.  These C<END> blocks
will then be executed when the thread's interpreter is destroyed (i.e., either
during a C<-E<gt>join()> call, or at program termination).

However, calling any L<threads> methods in such an C<END> block will most
likely I<fail> (e.g., the application may hang, or generate an error) due to
mutexes that are needed to control functionality within the L<threads> module.

For this reason, the use of C<END> blocks in threads is B<strongly>
discouraged.

=item Open directory handles

In perl 5.14 and higher, on systems other than Windows that do
not support the C<fchdir> C function, directory handles (see
L<opendir|perlfunc/"opendir DIRHANDLE,EXPR">) will not be copied to new
threads. You can use the C<d_fchdir> variable in L<Config.pm|Config> to
determine whether your system supports it.

In prior perl versions, spawning threads with open directory handles would
crash the interpreter.
L<[perl #75154]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=75154>

=item Perl Bugs and the CPAN Version of L<threads>

Support for threads extends beyond the code in this module (i.e.,
F<threads.pm> and F<threads.xs>), and into the Perl interpreter itself.  Older
versions of Perl contain bugs that may manifest themselves despite using the
latest version of L<threads> from CPAN.  There is no workaround for this other
than upgrading to the latest version of Perl.

Even with the latest version of Perl, it is known that certain constructs
with threads may result in warning messages concerning leaked scalars or
unreferenced scalars.  However, such warnings are harmless, and may safely be
ignored.

You can search for L<threads> related bug reports at
L<http://rt.cpan.org/Public/>.  If needed submit any new bugs, problems,
patches, etc. to: L<http://rt.cpan.org/Public/Dist/Display.html?Name=threads>

=back

=head1 REQUIREMENTS

Perl 5.8.0 or later

=head1 SEE ALSO

L<threads> Discussion Forum on CPAN:
L<http://www.cpanforum.com/dist/threads>

L<threads::shared>, L<perlthrtut>

L<http://www.perl.com/pub/a/2002/06/11/threads.html> and
L<http://www.perl.com/pub/a/2002/09/04/threads.html>

Perl threads mailing list:
L<http://lists.perl.org/list/ithreads.html>

Stack size discussion:
L<http://www.perlmonks.org/?node_id=532956>

=head1 AUTHOR

Artur Bergman E<lt>sky AT crucially DOT netE<gt>

CPAN version produced by Jerry D. Hedden <jdhedden AT cpan DOT org>

=head1 LICENSE

threads is released under the same license as Perl.

=head1 ACKNOWLEDGEMENTS

Richard Soderberg E<lt>perl AT crystalflame DOT netE<gt> -
Helping me out tons, trying to find reasons for races and other weird bugs!

Simon Cozens E<lt>simon AT brecon DOT co DOT ukE<gt> -
Being there to answer zillions of annoying questions

Rocco Caputo E<lt>troc AT netrus DOT netE<gt>

Vipul Ved Prakash E<lt>mail AT vipul DOT netE<gt> -
Helping with debugging

Dean Arnold E<lt>darnold AT presicient DOT comE<gt> -
Stack size API

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_TIME_H)) {
    if((! defined (&__need_time_t)  && !defined (&__need_clock_t)  && ! defined (&__need_timespec))) {
	eval 'sub _TIME_H () {1;}' unless defined(&_TIME_H);
	require 'features.ph';
    }
    if(defined(&_TIME_H)) {
	eval 'sub __need_size_t () {1;}' unless defined(&__need_size_t);
	eval 'sub __need_NULL () {1;}' unless defined(&__need_NULL);
	require 'stddef.ph';
	require 'bits/time.ph';
	if(!defined (&__STRICT_ANSI__)  && !defined (&__USE_XOPEN2K)) {
	    unless(defined(&CLK_TCK)) {
		eval 'sub CLK_TCK () { &CLOCKS_PER_SEC;}' unless defined(&CLK_TCK);
	    }
	}
    }
    if(!defined (&__clock_t_defined)  && (defined (&_TIME_H) || defined (&__need_clock_t))) {
	eval 'sub __clock_t_defined () {1;}' unless defined(&__clock_t_defined);
	require 'bits/types.ph';
	if(defined (&__USE_XOPEN) || defined (&__USE_POSIX)) {
	}
    }
    undef(&__need_clock_t) if defined(&__need_clock_t);
    if(!defined (&__time_t_defined)  && (defined (&_TIME_H) || defined (&__need_time_t))) {
	eval 'sub __time_t_defined () {1;}' unless defined(&__time_t_defined);
	require 'bits/types.ph';
	if(defined(&__USE_POSIX)) {
	}
    }
    undef(&__need_time_t) if defined(&__need_time_t);
    if(!defined (&__clockid_t_defined)  && ((defined (&_TIME_H)  && defined (&__USE_POSIX199309)) || defined (&__need_clockid_t))) {
	eval 'sub __clockid_t_defined () {1;}' unless defined(&__clockid_t_defined);
	require 'bits/types.ph';
    }
    undef(&__clockid_time_t) if defined(&__clockid_time_t);
    if(!defined (&__timer_t_defined)  && ((defined (&_TIME_H)  && defined (&__USE_POSIX199309)) || defined (&__need_timer_t))) {
	eval 'sub __timer_t_defined () {1;}' unless defined(&__timer_t_defined);
	require 'bits/types.ph';
    }
    undef(&__need_timer_t) if defined(&__need_timer_t);
    if((!defined (&__timespec_defined)  && ((defined (&_TIME_H)  && (defined (&__USE_POSIX199309) || defined (&__USE_ISOC11))) || defined (&__need_timespec)))) {
	eval 'sub __timespec_defined () {1;}' unless defined(&__timespec_defined);
	require 'bits/types.ph';
    }
    undef(&__need_timespec) if defined(&__need_timespec);
    if(defined(&_TIME_H)) {
	if(defined(&__USE_MISC)) {
	} else {
	}
	if(defined (&__USE_XOPEN) || defined (&__USE_POSIX)) {
	}
	if(defined(&__USE_POSIX199309)) {
	}
	if(defined(&__USE_XOPEN2K)) {
	    unless(defined(&__pid_t_defined)) {
		eval 'sub __pid_t_defined () {1;}' unless defined(&__pid_t_defined);
	    }
	}
	if(defined(&__USE_ISOC11)) {
	    eval 'sub TIME_UTC () {1;}' unless defined(&TIME_UTC);
	}
	if(defined(&__USE_XOPEN)) {
	}
	if(defined(&__USE_XOPEN2K8)) {
	    require 'xlocale.ph';
	}
	if(defined(&__USE_GNU)) {
	}
	if(defined(&__USE_POSIX)) {
	}
	if(defined(&__USE_POSIX)) {
	}
	if(defined(&__USE_POSIX)) {
	}
	if(defined (&__USE_MISC) || defined (&__USE_XOPEN)) {
	}
	if(defined(&__USE_MISC)) {
	}
	eval 'sub __isleap {
	    my($year) = @_;
    	    eval q((($year) % 4== 0 && (($year) % 100!= 0|| ($year) % 400== 0)));
	}' unless defined(&__isleap);
	if(defined(&__USE_MISC)) {
	}
	if(defined(&__USE_POSIX199309)) {
	    if(defined(&__USE_XOPEN2K)) {
	    }
	}
	if(defined(&__USE_ISOC11)) {
	}
	if(defined(&__USE_XOPEN_EXTENDED)) {
	}
	if(defined(&__USE_GNU)) {
	}
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  require '_h2ph_pre.ph';

no warnings qw(redefine misc);

require 'sys/wait.ph';
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_XLOCALE_H)) {
    eval 'sub _XLOCALE_H () {1;}' unless defined(&_XLOCALE_H);
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    package B::Concise;
# Copyright (C) 2000-2003 Stephen McCamant. All rights reserved.
# This program is free software; you can redistribute and/or modify it
# under the same terms as Perl itself.

# Note: we need to keep track of how many use declarations/BEGIN
# blocks this module uses, so we can avoid printing them when user
# asks for the BEGIN blocks in her program. Update the comments and
# the count in concise_specials if you add or delete one. The
# -MO=Concise counts as use #1.

use strict; # use #2
use warnings; # uses #3 and #4, since warnings uses Carp

use Exporter (); # use #5

our $VERSION   = "0.996";
our @ISA       = qw(Exporter);
our @EXPORT_OK = qw( set_style set_style_standard add_callback
		     concise_subref concise_cv concise_main
		     add_style walk_output compile reset_sequence );
our %EXPORT_TAGS =
    ( io	=> [qw( walk_output compile reset_sequence )],
      style	=> [qw( add_style set_style_standard )],
      cb	=> [qw( add_callback )],
      mech	=> [qw( concise_subref concise_cv concise_main )],  );

# use #6
use B qw(class ppname main_start main_root main_cv cstring svref_2object
	 SVf_IOK SVf_NOK SVf_POK SVf_IVisUV SVf_FAKE OPf_KIDS OPf_SPECIAL
	 CVf_ANON PAD_FAKELEX_ANON PAD_FAKELEX_MULTI SVf_ROK);

my %style =
  ("terse" =>
   ["(?(#label =>\n)?)(*(    )*)#class (#addr) #name (?([#targ])?) "
    . "#svclass~(?((#svaddr))?)~#svval~(?(label \"#coplabel\")?)\n",
    "(*(    )*)goto #class (#addr)\n",
    "#class pp_#name"],
   "concise" =>
   ["#hyphseq2 (*(   (x( ;)x))*)<#classsym> #exname#arg(?([#targarglife])?)"
    . "~#flags(?(/#private)?)(?(:#hints)?)(x(;~->#next)x)\n"
    , "  (*(    )*)     goto #seq\n",
    "(?(<#seq>)?)#exname#arg(?([#targarglife])?)"],
   "linenoise" =>
   ["(x(;(*( )*))x)#noise#arg(?([#targarg])?)(x( ;\n)x)",
    "gt_#seq ",
    "(?(#seq)?)#noise#arg(?([#targarg])?)"],
   "debug" =>
   ["#class (#addr)\n\top_next\t\t#nextaddr\n\t(?(op_other\t#otheraddr\n\t)?)"
    . "op_sibling\t#sibaddr\n\t"
    . "op_ppaddr\tPL_ppaddr[OP_#NAME]\n\top_type\t\t#typenum\n"
    . "\top_flags\t#flagval\n\top_private\t#privval\t#hintsval\n"
    . "(?(\top_first\t#firstaddr\n)?)(?(\top_last\t\t#lastaddr\n)?)"
    . "(?(\top_sv\t\t#svaddr\n)?)",
    "    GOTO #addr\n",
    "#addr"],
   "env" => [$ENV{B_CONCISE_FORMAT}, $ENV{B_CONCISE_GOTO_FORMAT},
	     $ENV{B_CONCISE_TREE_FORMAT}],
  );

# Renderings, ie how Concise prints, is controlled by these vars
# primary:
our $stylename;		# selects current style from %style
my $order = "basic";	# how optree is walked & printed: basic, exec, tree

# rendering mechanics:
# these 'formats' are the line-rendering templates
# they're updated from %style when $stylename changes
my ($format, $gotofmt, $treefmt);

# lesser players:
my $base = 36;		# how <sequence#> is displayed
my $big_endian = 1;	# more <sequence#> display
my $tree_style = 0;	# tree-order details
my $banner = 1;		# print banner before optree is traversed
my $do_main = 0;	# force printing of main routine
my $show_src;		# show source code

# another factor: can affect all styles!
our @callbacks;		# allow external management

set_style_standard("concise");

my $curcv;
my $cop_seq_base;

sub set_style {
    ($format, $gotofmt, $treefmt) = @_;
    #warn "set_style: deprecated, use set_style_standard instead\n"; # someday
    die "expecting 3 style-format args\n" unless @_ == 3;
}

sub add_style {
    my ($newstyle,@args) = @_;
    die "style '$newstyle' already exists, choose a new name\n"
	if exists $style{$newstyle};
    die "expecting 3 style-format args\n" unless @args == 3;
    $style{$newstyle} = [@args];
    $stylename = $newstyle; # update rendering state
}

sub set_style_standard {
    ($stylename) = @_; # update rendering state
    die "err: style '$stylename' unknown\n" unless exists $style{$stylename};
    set_style(@{$style{$stylename}});
}

sub add_callback {
    push @callbacks, @_;
}

# output handle, used with all Concise-output printing
our $walkHandle;	# public for your convenience
BEGIN { $walkHandle = \*STDOUT }

sub walk_output { # updates $walkHandle
    my $handle = shift;
    return $walkHandle unless $handle; # allow use as accessor

    if (ref $handle eq 'SCALAR') {
	require Config;
	die "no perlio in this build, can't call walk_output (\\\$scalar)\n"
	    unless $Config::Config{useperlio};
	# in 5.8+, open(FILEHANDLE,MODE,REFERENCE) writes to string
	open my $tmp, '>', $handle;	# but cant re-set existing STDOUT
	$walkHandle = $tmp;		# so use my $tmp as intermediate var
	return $walkHandle;
    }
    my $iotype = ref $handle;
    die "expecting argument/object that can print\n"
	unless $iotype eq 'GLOB' or $iotype and $handle->can('print');
    $walkHandle = $handle;
}

sub concise_subref {
    my($order, $coderef, $name) = @_;
    my $codeobj = svref_2object($coderef);

    return concise_stashref(@_)
	unless ref($codeobj) =~ '^B::(?:CV|FM)\z';
    concise_cv_obj($order, $codeobj, $name);
}

sub concise_stashref {
    my($order, $h) = @_;
    local *s;
    foreach my $k (sort keys %$h) {
	next unless defined $h->{$k};
	*s = $h->{$k};
	my $coderef = *s{CODE} or next;
	reset_sequence();
	print "FUNC: ", *s, "\n";
	my $codeobj = svref_2object($coderef);
	next unless ref $codeobj eq 'B::CV';
	eval { concise_cv_obj($order, $codeobj, $k) };
	warn "err $@ on $codeobj" if $@;
    }
}

# This should have been called concise_subref, but it was exported
# under this name in versions before 0.56
*concise_cv = \&concise_subref;

sub concise_cv_obj {
    my ($order, $cv, $name) = @_;
    # name is either a string, or a CODE ref (copy of $cv arg??)

    $curcv = $cv;

    if (ref($cv->XSUBANY) =~ /B::(\w+)/) {
	print $walkHandle "$name is a constant sub, optimized to a $1\n";
	return;
    }
    if ($cv->XSUB) {
	print $walkHandle "$name is XS code\n";
	return;
    }
    if (class($cv->START) eq "NULL") {
	no strict 'refs';
	if (ref $name eq 'CODE') {
	    print $walkHandle "coderef $name has no START\n";
	}
	elsif (exists &$name) {
	    print $walkHandle "$name exists in stash, but has no START\n";
	}
	else {
	    print $walkHandle "$name not in symbol table\n";
	}
	return;
    }
    sequence($cv->START);
    if ($order eq "exec") {
	walk_exec($cv->START);
    }
    elsif ($order eq "basic") {
	# walk_topdown($cv->ROOT, sub { $_[0]->concise($_[1]) }, 0);
	my $root = $cv->ROOT;
	unless (ref $root eq 'B::NULL') {
	    walk_topdown($root, sub { $_[0]->concise($_[1]) }, 0);
	} else {
	    print $walkHandle "B::NULL encountered doing ROOT on $cv. avoiding disaster\n";
	}
    } else {
	print $walkHandle tree($cv->ROOT, 0);
    }
}

sub concise_main {
    my($order) = @_;
    sequence(main_start);
    $curcv = main_cv;
    if ($order eq "exec") {
	return if class(main_start) eq "NULL";
	walk_exec(main_start);
    } elsif ($order eq "tree") {
	return if class(main_root) eq "NULL";
	print $walkHandle tree(main_root, 0);
    } elsif ($order eq "basic") {
	return if class(main_root) eq "NULL";
	walk_topdown(main_root,
		     sub { $_[0]->concise($_[1]) }, 0);
    }
}

sub concise_specials {
    my($name, $order, @cv_s) = @_;
    my $i = 1;
    if ($name eq "BEGIN") {
	splice(@cv_s, 0, 8); # skip 7 BEGIN blocks in this file. NOW 8 ??
    } elsif ($name eq "CHECK") {
	pop @cv_s; # skip the CHECK block that calls us
    }
    for my $cv (@cv_s) {
	print $walkHandle "$name $i:\n";
	$i++;
	concise_cv_obj($order, $cv, $name);
    }
}

my $start_sym = "\e(0"; # "\cN" sometimes also works
my $end_sym   = "\e(B"; # "\cO" respectively

my @tree_decorations =
  (["  ", "--", "+-", "|-", "| ", "`-", "-", 1],
   [" ", "-", "+", "+", "|", "`", "", 0],
   ["  ", map("$start_sym$_$end_sym", "qq", "wq", "tq", "x ", "mq", "q"), 1],
   [" ", map("$start_sym$_$end_sym", "q", "w", "t", "x", "m"), "", 0],
  );

my @render_packs; # collect -stash=<packages>

sub compileOpts {
    # set rendering state from options and args
    my (@options,@args);
    if (@_) {
	@options = grep(/^-/, @_);
	@args = grep(!/^-/, @_);
    }
    for my $o (@options) {
	# mode/order
	if ($o eq "-basic") {
	    $order = "basic";
	} elsif ($o eq "-exec") {
	    $order = "exec";
	} elsif ($o eq "-tree") {
	    $order = "tree";
	}
	# tree-specific
	elsif ($o eq "-compact") {
	    $tree_style |= 1;
	} elsif ($o eq "-loose") {
	    $tree_style &= ~1;
	} elsif ($o eq "-vt") {
	    $tree_style |= 2;
	} elsif ($o eq "-ascii") {
	    $tree_style &= ~2;
	}
	# sequence numbering
	elsif ($o =~ /^-base(\d+)$/) {
	    $base = $1;
	} elsif ($o eq "-bigendian") {
	    $big_endian = 1;
	} elsif ($o eq "-littleendian") {
	    $big_endian = 0;
	}
	# miscellaneous, presentation
	elsif ($o eq "-nobanner") {
	    $banner = 0;
	} elsif ($o eq "-banner") {
	    $banner = 1;
	}
	elsif ($o eq "-main") {
	    $do_main = 1;
	} elsif ($o eq "-nomain") {
	    $do_main = 0;
	} elsif ($o eq "-src") {
	    $show_src = 1;
	}
	elsif ($o =~ /^-stash=(.*)/) {
	    my $pkg = $1;
	    no strict 'refs';
	    if (! %{$pkg.'::'}) {
		eval "require $pkg";
	    } else {
		require Config;
		if (!$Config::Config{usedl}
		    && keys %{$pkg.'::'} == 1
		    && $pkg->can('bootstrap')) {
		    # It is something that we're statically linked to, but hasn't
		    # yet been used.
		    eval "require $pkg";
		}
	    }
	    push @render_packs, $pkg;
	}
	# line-style options
	elsif (exists $style{substr($o, 1)}) {
	    $stylename = substr($o, 1);
	    set_style_standard($stylename);
	} else {
	    warn "Option $o unrecognized";
	}
    }
    return (@args);
}

sub compile {
    my (@args) = compileOpts(@_);
    return sub {
	my @newargs = compileOpts(@_); # accept new rendering options
	warn "disregarding non-options: @newargs\n" if @newargs;

	for my $objname (@args) {
	    next unless $objname; # skip null args to avoid noisy responses

	    if ($objname eq "BEGIN") {
		concise_specials("BEGIN", $order,
				 B::begin_av->isa("B::AV") ?
				 B::begin_av->ARRAY : ());
	    } elsif ($objname eq "INIT") {
		concise_specials("INIT", $order,
				 B::init_av->isa("B::AV") ?
				 B::init_av->ARRAY : ());
	    } elsif ($objname eq "CHECK") {
		concise_specials("CHECK", $order,
				 B::check_av->isa("B::AV") ?
				 B::check_av->ARRAY : ());
	    } elsif ($objname eq "UNITCHECK") {
		concise_specials("UNITCHECK", $order,
				 B::unitcheck_av->isa("B::AV") ?
				 B::unitcheck_av->ARRAY : ());
	    } elsif ($objname eq "END") {
		concise_specials("END", $order,
				 B::end_av->isa("B::AV") ?
				 B::end_av->ARRAY : ());
	    }
	    else {
		# convert function names to subrefs
		if (ref $objname) {
		    print $walkHandle "B::Concise::compile($objname)\n"
			if $banner;
		    concise_subref($order, ($objname)x2);
		    next;
		} else {
		    $objname = "main::" . $objname unless $objname =~ /::/;
		    no strict 'refs';
		    my $glob = \*$objname;
		    unless (*$glob{CODE} || *$glob{FORMAT}) {
			print $walkHandle "$objname:\n" if $banner;
			print $walkHandle "err: unknown function ($objname)\n";
			return;
		    }
		    if (my $objref = *$glob{CODE}) {
			print $walkHandle "$objname:\n" if $banner;
			concise_subref($order, $objref, $objname);
		    }
		    if (my $objref = *$glob{FORMAT}) {
			print $walkHandle "$objname (FORMAT):\n"
			    if $banner;
			concise_subref($order, $objref, $objname);
		    }
		}
	    }
	}
	for my $pkg (@render_packs) {
	    no strict 'refs';
	    concise_stashref($order, \%{$pkg.'::'});
	}

	if (!@args or $do_main or @render_packs) {
	    print $walkHandle "main program:\n" if $do_main;
	    concise_main($order);
	}
	return @args;	# something
    }
}

my %labels;
my $lastnext;	# remembers op-chain, used to insert gotos

my %opclass = ('OP' => "0", 'UNOP' => "1", 'BINOP' => "2", 'LOGOP' => "|",
	       'LISTOP' => "@", 'PMOP' => "/", 'SVOP' => "\$", 'GVOP' => "*",
	       'PVOP' => '"', 'LOOP' => "{", 'COP' => ";", 'PADOP' => "#",
	       'METHOP' => '.', UNOP_AUX => '+');

no warnings 'qw'; # "Possible attempt to put comments..."; use #7
my @linenoise =
  qw'#  () sc (  @? 1  $* gv *{ m$ m@ m% m? p/ *$ $  $# & a& pt \\ s\\ rf bl
     `  *? <> ?? ?/ r/ c/ // qr s/ /c y/ =  @= C  sC Cp sp df un BM po +1 +I
     -1 -I 1+ I+ 1- I- ** *  i* /  i/ %$ i% x  +  i+ -  i- .  "  << >> <  i<
     >  i> <= i, >= i. == i= != i! <? i? s< s> s, s. s= s! s? b& b^ b| -0 -i
     !  ~  a2 si cs rd sr e^ lg sq in %x %o ab le ss ve ix ri sf FL od ch cy
     uf lf uc lc qm @  [f [  @[ eh vl ky dl ex %  ${ @{ uk pk st jn )  )[ a@
     a% sl +] -] [- [+ so rv GS GW MS MW .. f. .f && || ^^ ?: &= |= -> s{ s}
     v} ca wa di rs ;; ;  ;d }{ {  }  {} f{ it {l l} rt }l }n }r dm }g }e ^o
     ^c ^| ^# um bm t~ u~ ~d DB db ^s se ^g ^r {w }w pf pr ^O ^K ^R ^W ^d ^v
     ^e ^t ^k t. fc ic fl .s .p .b .c .l .a .h g1 s1 g2 s2 ?. l? -R -W -X -r
     -w -x -e -o -O -z -s -M -A -C -S -c -b -f -d -p -l -u -g -k -t -T -B cd
     co cr u. cm ut r. l@ s@ r@ mD uD oD rD tD sD wD cD f$ w$ p$ sh e$ k$ g3
     g4 s4 g5 s5 T@ C@ L@ G@ A@ S@ Hg Hc Hr Hw Mg Mc Ms Mr Sg Sc So rq do {e
     e} {t t} g6 G6 6e g7 G7 7e g8 G8 8e g9 G9 9e 6s 7s 8s 9s 6E 7E 8E 9E Pn
     Pu GP SP EP Gn Gg GG SG EG g0 c$ lk t$ ;s n> // /= CO';

my $chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

sub op_flags { # common flags (see BASOP.op_flags in op.h)
    my($x) = @_;
    my(@v);
    push @v, "v" if ($x & 3) == 1;
    push @v, "s" if ($x & 3) == 2;
    push @v, "l" if ($x & 3) == 3;
    push @v, "K" if $x & 4;
    push @v, "P" if $x & 8;
    push @v, "R" if $x & 16;
    push @v, "M" if $x & 32;
    push @v, "S" if $x & 64;
    push @v, "*" if $x & 128;
    return join("", @v);
}

sub base_n {
    my $x = shift;
    return "-" . base_n(-$x) if $x < 0;
    my $str = "";
    do { $str .= substr($chars, $x % $base, 1) } while $x = int($x / $base);
    $str = reverse $str if $big_endian;
    return $str;
}

my %sequence_num;
my $seq_max = 1;

sub reset_sequence {
    # reset the sequence
    %sequence_num = ();
    $seq_max = 1;
    $lastnext = 0;
}

sub seq {
    my($op) = @_;
    return "-" if not exists $sequence_num{$$op};
    return base_n($sequence_num{$$op});
}

sub walk_topdown {
    my($op, $sub, $level) = @_;
    $sub->($op, $level);
    if ($op->flags & OPf_KIDS) {
	for (my $kid = $op->first; $$kid; $kid = $kid->sibling) {
	    walk_topdown($kid, $sub, $level + 1);
	}
    }
    if (class($op) eq "PMOP") {
	my $maybe_root = $op->code_list;
	if ( ref($maybe_root) and $maybe_root->isa("B::OP")
	 and not $op->flags & OPf_KIDS) {
	    walk_topdown($maybe_root, $sub, $level + 1);
	}
	$maybe_root = $op->pmreplroot;
	if (ref($maybe_root) and $maybe_root->isa("B::OP")) {
	    # It really is the root of the replacement, not something
	    # else stored here for lack of space elsewhere
	    walk_topdown($maybe_root, $sub, $level + 1);
	}
    }
}

sub walklines {
    my($ar, $level) = @_;
    for my $l (@$ar) {
	if (ref($l) eq "ARRAY") {
	    walklines($l, $level + 1);
	} else {
	    $l->concise($level);
	}
    }
}

sub walk_exec {
    my($top, $level) = @_;
    my %opsseen;
    my @lines;
    my @todo = ([$top, \@lines]);
    while (@todo and my($op, $targ) = @{shift @todo}) {
	for (; $$op; $op = $op->next) {
	    last if $opsseen{$$op}++;
	    push @$targ, $op;
	    my $name = $op->name;
	    if (class($op) eq "LOGOP") {
		my $ar = [];
		push @$targ, $ar;
		push @todo, [$op->other, $ar];
	    } elsif ($name eq "subst" and $ {$op->pmreplstart}) {
		my $ar = [];
		push @$targ, $ar;
		push @todo, [$op->pmreplstart, $ar];
	    } elsif ($name =~ /^enter(loop|iter)$/) {
		$labels{${$op->nextop}} = "NEXT";
		$labels{${$op->lastop}} = "LAST";
		$labels{${$op->redoop}} = "REDO";
	    }
	}
    }
    walklines(\@lines, 0);
}

# The structure of this routine is purposely modeled after op.c's peep()
sub sequence {
    my($op) = @_;
    my $oldop = 0;
    return if class($op) eq "NULL" or exists $sequence_num{$$op};
    for (; $$op; $op = $op->next) {
	last if exists $sequence_num{$$op};
	my $name = $op->name;
	$sequence_num{$$op} = $seq_max++;
	if (class($op) eq "LOGOP") {
	    sequence($op->other);
	} elsif (class($op) eq "LOOP") {
	    sequence($op->redoop);
	    sequence( $op->nextop);
	    sequence($op->lastop);
	} elsif ($name eq "subst" and $ {$op->pmreplstart}) {
	    sequence($op->pmreplstart);
	}
	$oldop = $op;
    }
}

sub fmt_line {    # generate text-line for op.
    my($hr, $op, $text, $level) = @_;

    $_->($hr, $op, \$text, \$level, $stylename) for @callbacks;

    return '' if $hr->{SKIP};	# suppress line if a callback said so
    return '' if $hr->{goto} and $hr->{goto} eq '-';	# no goto nowhere

    # spec: (?(text1#varText2)?)
    $text =~ s/\(\?\(([^\#]*?)\#(\w+)([^\#]*?)\)\?\)/
	$hr->{$2} ? $1.$hr->{$2}.$3 : ""/eg;

    # spec: (x(exec_text;basic_text)x)
    $text =~ s/\(x\((.*?);(.*?)\)x\)/$order eq "exec" ? $1 : $2/egs;

    # spec: (*(text)*)
    $text =~ s/\(\*\(([^;]*?)\)\*\)/$1 x $level/egs;

    # spec: (*(text1;text2)*)
    $text =~ s/\(\*\((.*?);(.*?)\)\*\)/$1 x ($level - 1) . $2 x ($level>0)/egs;

    # convert #Var to tag=>val form: Var\t#var
    $text =~ s/\#([A-Z][a-z]+)(\d+)?/\t\u$1\t\L#$1$2/gs;

    # spec: #varN
    $text =~ s/\#([a-zA-Z]+)(\d+)/sprintf("%-$2s", $hr->{$1})/eg;

    $text =~ s/\#([a-zA-Z]+)/$hr->{$1}/eg;	# populate #var's
    $text =~ s/[ \t]*~+[ \t]*/ /g;		# squeeze tildes

    $text = "# $hr->{src}\n$text" if $show_src and $hr->{src};

    chomp $text;
    return "$text\n" if $text ne "" and $order ne "tree";
    return $text; # suppress empty lines
}



# use require rather than use here to avoid disturbing tests that dump
# BEGIN blocks
require B::Op_private;



our %hints; # used to display each COP's op_hints values

# strict refs, subs, vars
@hints{2,512,1024,32,64,128} = ('$', '&', '*', 'x$', 'x&', 'x*');
# integers, locale, bytes
@hints{1,4,8,16} = ('i', 'l', 'b');
# block scope, localise %^H, $^OPEN (in), $^OPEN (out)
@hints{256,131072,262144,524288} = ('{','%','<','>');
# overload new integer, float, binary, string, re
@hints{4096,8192,16384,32768,65536} = ('I', 'F', 'B', 'S', 'R');
# taint and eval
@hints{1048576,2097152} = ('T', 'E');
# filetest access, UTF-8
@hints{4194304,8388608} = ('X', 'U');

sub _flags {
    my($hash, $x) = @_;
    my @s;
    for my $flag (sort {$b <=> $a} keys %$hash) {
	if ($hash->{$flag} and $x & $flag and $x >= $flag) {
	    $x -= $flag;
	    push @s, $hash->{$flag};
	}
    }
    push @s, $x if $x;
    return join(",", @s);
}

# return a string like 'LVINTRO,1' for the op $name with op_private
# value $x

sub private_flags {
    my($name, $x) = @_;
    my $entry = $B::Op_private::bits{$name};
    return $x ? "$x" : '' unless $entry;

    my @flags;
    my $bit;
    for ($bit = 7; $bit >= 0; $bit--) {
        next unless exists $entry->{$bit};
        my $e = $entry->{$bit};
        if (ref($e) eq 'HASH') {
            # bit field

            my ($bitmin, $bitmax, $bitmask, $enum, $label) =
                    @{$e}{qw(bitmin bitmax bitmask enum label)};
            $bit = $bitmin;
            next if defined $label && $label eq '-'; # display as raw number

            my $val = $x & $bitmask;
            $x &= ~$bitmask;
            $val >>= $bitmin;

            if (defined $enum) {
                # try to convert numeric $val into symbolic
                my @enum = @$enum;
                while (@enum) {
                    my $ix    = shift @enum;
                    my $name  = shift @enum;
                    my $label = shift @enum;
                    if ($val == $ix) {
                        $val = $label;
                        last;
                    }
                }
            }
            next if $val eq '0'; # don't display anonymous zero values
            push @flags, defined $label ? "$label=$val" : $val;

        }
        else {
            # flag bit
            my $label = $B::Op_private::labels{$e};
            next if defined $label && $label eq '-'; # display as raw number
            if ($x & (1<<$bit)) {
                $x -= (1<<$bit);
                push @flags, $label;
            }
        }
    }

    push @flags, $x if $x; # display unknown bits numerically
    return join ",", @flags;
}

sub hints_flags {
    my($x) = @_;
    _flags(\%hints, $x);
}

sub concise_sv {
    my($sv, $hr, $preferpv) = @_;
    $hr->{svclass} = class($sv);
    $hr->{svclass} = "UV"
      if $hr->{svclass} eq "IV" and $sv->FLAGS & SVf_IVisUV;
    Carp::cluck("bad concise_sv: $sv") unless $sv and $$sv;
    $hr->{svaddr} = sprintf("%#x", $$sv);
    if ($hr->{svclass} eq "GV" && $sv->isGV_with_GP()) {
	my $gv = $sv;
	my $stash = $gv->STASH;
	if (class($stash) eq "SPECIAL") {
	    $stash = "<none>";
	}
	else {
	    $stash = $stash->NAME;
	}
	if ($stash eq "main") {
	    $stash = "";
	} else {
	    $stash = $stash . "::";
	}
	$hr->{svval} = "*$stash" . $gv->SAFENAME;
	return "*$stash" . $gv->SAFENAME;
    } else {
	if ($] >= 5.011) {
	    while (class($sv) eq "IV" && $sv->FLAGS & SVf_ROK) {
		$hr->{svval} .= "\\";
		$sv = $sv->RV;
	    }
	} else {
	    while (class($sv) eq "RV") {
		$hr->{svval} .= "\\";
		$sv = $sv->RV;
	    }
	}
	if (class($sv) eq "SPECIAL") {
	    $hr->{svval} .= ["Null", "sv_undef", "sv_yes", "sv_no"]->[$$sv];
	} elsif ($preferpv
	      && ($sv->FLAGS & SVf_POK || class($sv) eq "REGEXP")) {
	    $hr->{svval} .= cstring($sv->PV);
	} elsif ($sv->FLAGS & SVf_NOK) {
	    $hr->{svval} .= $sv->NV;
	} elsif ($sv->FLAGS & SVf_IOK) {
	    $hr->{svval} .= $sv->int_value;
	} elsif ($sv->FLAGS & SVf_POK || class($sv) eq "REGEXP") {
	    $hr->{svval} .= cstring($sv->PV);
	} elsif (class($sv) eq "HV") {
	    $hr->{svval} .= 'HASH';
	}

	$hr->{svval} = 'undef' unless defined $hr->{svval};
	my $out = $hr->{svclass};
	return $out .= " $hr->{svval}" ; 
    }
}

my %srclines;

sub fill_srclines {
    my $fullnm = shift;
    if ($fullnm eq '-e') {
	$srclines{$fullnm} = [ $fullnm, "-src not supported for -e" ];
	return;
    }
    open (my $fh, '<', $fullnm)
	or warn "# $fullnm: $!, (chdirs not supported by this feature yet)\n"
	and return;
    my @l = <$fh>;
    chomp @l;
    unshift @l, $fullnm; # like @{_<$fullnm} in debug, array starts at 1
    $srclines{$fullnm} = \@l;
}

sub concise_op {
    my ($op, $level, $format) = @_;
    my %h;
    $h{exname} = $h{name} = $op->name;
    $h{NAME} = uc $h{name};
    $h{class} = class($op);
    $h{extarg} = $h{targ} = $op->targ;
    $h{extarg} = "" unless $h{extarg};
    $h{privval} = $op->private;
    # for null ops, targ holds the old type
    my $origname = $h{name} eq "null" && $h{targ}
      ? substr(ppname($h{targ}), 3)
      : $h{name};
    $h{private} = private_flags($origname, $op->private);
    if ($op->folded) {
      $h{private} &&= "$h{private},";
      $h{private} .= "FOLD";
    }

    if ($h{name} ne $origname) { # a null op
	$h{exname} = "ex-$origname";
	$h{extarg} = "";
    } elsif ($h{private} =~ /\bREFC\b/) {
	# targ holds a reference count
        my $refs = "ref" . ($h{targ} != 1 ? "s" : "");
        $h{targarglife} = $h{targarg} = "$h{targ} $refs";
    } elsif ($h{targ}) {
	my $count = $h{name} eq 'padrange'
            ? ($op->private & $B::Op_private::defines{'OPpPADRANGE_COUNTMASK'})
            : 1;
	my (@targarg, @targarglife);
	for my $i (0..$count-1) {
	    my ($targarg, $targarglife);
	    my $padname = (($curcv->PADLIST->ARRAY)[0]->ARRAY)[$h{targ}+$i];
	    if (defined $padname and class($padname) ne "SPECIAL" and
		$padname->LEN)
	    {
		$targarg  = $padname->PVX;
		if ($padname->FLAGS & SVf_FAKE) {
		    # These changes relate to the jumbo closure fix.
		    # See changes 19939 and 20005
		    my $fake = '';
		    $fake .= 'a'
			if $padname->PARENT_FAKELEX_FLAGS & PAD_FAKELEX_ANON;
		    $fake .= 'm'
			if $padname->PARENT_FAKELEX_FLAGS & PAD_FAKELEX_MULTI;
		    $fake .= ':' . $padname->PARENT_PAD_INDEX
			if $curcv->CvFLAGS & CVf_ANON;
		    $targarglife = "$targarg:FAKE:$fake";
		}
		else {
		    my $intro = $padname->COP_SEQ_RANGE_LOW - $cop_seq_base;
		    my $finish = int($padname->COP_SEQ_RANGE_HIGH) - $cop_seq_base;
		    $finish = "end" if $finish == 999999999 - $cop_seq_base;
		    $targarglife = "$targarg:$intro,$finish";
		}
	    } else {
		$targarglife = $targarg = "t" . ($h{targ}+$i);
	    }
	    push @targarg,     $targarg;
	    push @targarglife, $targarglife;
	}
	$h{targarg}     = join '; ', @targarg;
	$h{targarglife} = join '; ', @targarglife;
    }
    $h{arg} = "";
    $h{svclass} = $h{svaddr} = $h{svval} = "";
    if ($h{class} eq "PMOP") {
	my $extra = '';
	my $precomp = $op->precomp;
	if (defined $precomp) {
	    $precomp = cstring($precomp); # Escape literal control sequences
 	    $precomp = "/$precomp/";
	} else {
	    $precomp = "";
	}
	if ($op->name eq 'subst') {
	    if (class($op->pmreplstart) ne "NULL") {
		undef $lastnext;
		$extra = " replstart->" . seq($op->pmreplstart);
	    }
	}
	elsif ($op->name eq 'pushre') {
	    # with C<@stash_array = split(/pat/, str);>,
	    #  *stash_array is stored in /pat/'s pmreplroot.
	    my $gv = $op->pmreplroot;
	    if (!ref($gv)) {
		# threaded: the value is actually a pad offset for where
		# the GV is kept (op_pmtargetoff)
		if ($gv) {
		    $gv = (($curcv->PADLIST->ARRAY)[1]->ARRAY)[$gv]->NAME;
		}
	    }
	    else {
		# unthreaded: its a GV (if it exists)
		$gv = (ref($gv) eq "B::GV") ? $gv->NAME : undef;
	    }
	    $extra = " => \@$gv" if $gv;
	}
	$h{arg} = "($precomp$extra)";
    } elsif ($h{class} eq "PVOP" and $h{name} !~ '^transr?\z') {
	$h{arg} = '("' . $op->pv . '")';
	$h{svval} = '"' . $op->pv . '"';
    } elsif ($h{class} eq "COP") {
	my $label = $op->label;
	$h{coplabel} = $label;
	$label = $label ? "$label: " : "";
	my $loc = $op->file;
	my $pathnm = $loc;
	$loc =~ s[.*/][];
	my $ln = $op->line;
	$loc .= ":$ln";
	my($stash, $cseq) = ($op->stash->NAME, $op->cop_seq - $cop_seq_base);
	$h{arg} = "($label$stash $cseq $loc)";
	if ($show_src) {
	    fill_srclines($pathnm) unless exists $srclines{$pathnm};
	    # Would love to retain Jim's use of // but this code needs to be
	    # portable to 5.8.x
	    my $line = $srclines{$pathnm}[$ln];
	    $line = "-src unavailable under -e" unless defined $line;
	    $h{src} = "$ln: $line";
	}
    } elsif ($h{class} eq "LOOP") {
	$h{arg} = "(next->" . seq($op->nextop) . " last->" . seq($op->lastop)
	  . " redo->" . seq($op->redoop) . ")";
    } elsif ($h{class} eq "LOGOP") {
	undef $lastnext;
	$h{arg} = "(other->" . seq($op->other) . ")";
	$h{otheraddr} = sprintf("%#x", $ {$op->other});
    }
    elsif ($h{class} eq "SVOP" or $h{class} eq "PADOP") {
	unless ($h{name} eq 'aelemfast' and $op->flags & OPf_SPECIAL) {
	    my $idx = ($h{class} eq "SVOP") ? $op->targ : $op->padix;
	    if ($h{class} eq "PADOP" or !${$op->sv}) {
		my $sv = (($curcv->PADLIST->ARRAY)[1]->ARRAY)[$idx];
		$h{arg} = "[" . concise_sv($sv, \%h, 0) . "]";
		$h{targarglife} = $h{targarg} = "";
	    } else {
		$h{arg} = "(" . concise_sv($op->sv, \%h, 0) . ")";
	    }
	}
    }
    elsif ($h{class} eq "METHOP") {
        my $prefix = '';
        if ($h{name} eq 'method_redir' or $h{name} eq 'method_redir_super') {
            my $rclass_sv = $op->rclass;
            $rclass_sv = (($curcv->PADLIST->ARRAY)[1]->ARRAY)[$rclass_sv]
                unless ref $rclass_sv;
            $prefix .= 'PACKAGE "'.$rclass_sv->PV.'", ';
        }
        if ($h{name} ne "method") {
            if (${$op->meth_sv}) {
                $h{arg} = "($prefix" . concise_sv($op->meth_sv, \%h, 1) . ")";
            } else {
                my $sv = (($curcv->PADLIST->ARRAY)[1]->ARRAY)[$op->targ];
                $h{arg} = "[$prefix" . concise_sv($sv, \%h, 1) . "]";
                $h{targarglife} = $h{targarg} = "";
            }
        }
    }
    elsif ($h{class} eq "UNOP_AUX") {
        $h{arg} = "(" . $op->string($curcv) . ")";
    }

    $h{seq} = $h{hyphseq} = seq($op);
    $h{seq} = "" if $h{seq} eq "-";
    $h{opt} = $op->opt;
    $h{label} = $labels{$$op};
    $h{next} = $op->next;
    $h{next} = (class($h{next}) eq "NULL") ? "(end)" : seq($h{next});
    $h{nextaddr} = sprintf("%#x", $ {$op->next});
    $h{sibaddr} = sprintf("%#x", $ {$op->sibling});
    $h{firstaddr} = sprintf("%#x", $ {$op->first}) if $op->can("first");
    $h{lastaddr} = sprintf("%#x", $ {$op->last}) if $op->can("last");

    $h{classsym} = $opclass{$h{class}};
    $h{flagval} = $op->flags;
    $h{flags} = op_flags($op->flags);
    if ($op->can("hints")) {
      $h{hintsval} = $op->hints;
      $h{hints} = hints_flags($h{hintsval});
    } else {
      $h{hintsval} = $h{hints} = '';
    }
    $h{addr} = sprintf("%#x", $$op);
    $h{typenum} = $op->type;
    $h{noise} = $linenoise[$op->type];

    return fmt_line(\%h, $op, $format, $level);
}

sub B::OP::concise {
    my($op, $level) = @_;
    if ($order eq "exec" and $lastnext and $$lastnext != $$op) {
	# insert a 'goto' line
	my $synth = {"seq" => seq($lastnext), "class" => class($lastnext),
		     "addr" => sprintf("%#x", $$lastnext),
		     "goto" => seq($lastnext), # simplify goto '-' removal
	     };
	print $walkHandle fmt_line($synth, $op, $gotofmt, $level+1);
    }
    $lastnext = $op->next;
    print $walkHandle concise_op($op, $level, $format);
}

# B::OP::terse (see Terse.pm) now just calls this
sub b_terse {
    my($op, $level) = @_;

    # This isn't necessarily right, but there's no easy way to get
    # from an OP to the right CV. This is a limitation of the
    # ->terse() interface style, and there isn't much to do about
    # it. In particular, we can die in concise_op if the main pad
    # isn't long enough, or has the wrong kind of entries, compared to
    # the pad a sub was compiled with. The fix for that would be to
    # make a backwards compatible "terse" format that never even
    # looked at the pad, just like the old B::Terse. I don't think
    # that's worth the effort, though.
    $curcv = main_cv unless $curcv;

    if ($order eq "exec" and $lastnext and $$lastnext != $$op) {
	# insert a 'goto'
	my $h = {"seq" => seq($lastnext), "class" => class($lastnext),
		 "addr" => sprintf("%#x", $$lastnext)};
	print # $walkHandle
	    fmt_line($h, $op, $style{"terse"}[1], $level+1);
    }
    $lastnext = $op->next;
    print # $walkHandle 
	concise_op($op, $level, $style{"terse"}[0]);
}

sub tree {
    my $op = shift;
    my $level = shift;
    my $style = $tree_decorations[$tree_style];
    my($space, $single, $kids, $kid, $nokid, $last, $lead, $size) = @$style;
    my $name = concise_op($op, $level, $treefmt);
    if (not $op->flags & OPf_KIDS) {
	return $name . "\n";
    }
    my @lines;
    for (my $kid = $op->first; $$kid; $kid = $kid->sibling) {
	push @lines, tree($kid, $level+1);
    }
    my $i;
    for ($i = $#lines; substr($lines[$i], 0, 1) eq " "; $i--) {
	$lines[$i] = $space . $lines[$i];
    }
    if ($i > 0) {
	$lines[$i] = $last . $lines[$i];
	while ($i-- > 1) {
	    if (substr($lines[$i], 0, 1) eq " ") {
		$lines[$i] = $nokid . $lines[$i];
	    } else {
		$lines[$i] = $kid . $lines[$i];
	    }
	}
	$lines[$i] = $kids . $lines[$i];
    } else {
	$lines[0] = $single . $lines[0];
    }
    return("$name$lead" . shift @lines,
           map(" " x (length($name)+$size) . $_, @lines));
}

# *** Warning: fragile kludge ahead ***
# Because the B::* modules run in the same interpreter as the code
# they're compiling, their presence tends to distort the view we have of
# the code we're looking at. In particular, perl gives sequence numbers
# to COPs. If the program we're looking at were run on its own, this
# would start at 1. Because all of B::Concise and all the modules it
# uses are compiled first, though, by the time we get to the user's
# program the sequence number is already pretty high, which could be
# distracting if you're trying to tell OPs apart. Therefore we'd like to
# subtract an offset from all the sequence numbers we display, to
# restore the simpler view of the world. The trick is to know what that
# offset will be, when we're still compiling B::Concise!  If we
# hardcoded a value, it would have to change every time B::Concise or
# other modules we use do. To help a little, what we do here is compile
# a little code at the end of the module, and compute the base sequence
# number for the user's program as being a small offset later, so all we
# have to worry about are changes in the offset.

# [For 5.8.x and earlier perl is generating sequence numbers for all ops,
#  and using them to reference labels]


# When you say "perl -MO=Concise -e '$a'", the output should look like:

# 4  <@> leave[t1] vKP/REFC ->(end)
# 1     <0> enter ->2
 #^ smallest OP sequence number should be 1
# 2     <;> nextstate(main 1 -e:1) v ->3
 #                         ^ smallest COP sequence number should be 1
# -     <1> ex-rv2sv vK/1 ->4
# 3        <$> gvsv(*a) s ->4

# If the second of the marked numbers there isn't 1, it means you need
# to update the corresponding magic number in the next line.
# Remember, this needs to stay the last things in the module.

my $cop_seq_mnum = 16;
$cop_seq_base = svref_2object(eval 'sub{0;}')->START->cop_seq + $cop_seq_mnum;

1;

__END__

=head1 NAME

B::Concise - Walk Perl syntax tree, printing concise info about ops

=head1 SYNOPSIS

    perl -MO=Concise[,OPTIONS] foo.pl

    use B::Concise qw(set_style add_callback);

=head1 DESCRIPTION

This compiler backend prints the internal OPs of a Perl program's syntax
tree in one of several space-efficient text formats suitable for debugging
the inner workings of perl or other compiler backends. It can print OPs in
the order they appear in the OP tree, in the order they will execute, or
in a text approximation to their tree structure, and the format of the
information displayed is customizable. Its function is similar to that of
perl's B<-Dx> debugging flag or the B<B::Terse> module, but it is more
sophisticated and flexible.

=head1 EXAMPLE

Here's two outputs (or 'renderings'), using the -exec and -basic
(i.e. default) formatting conventions on the same code snippet.

    % perl -MO=Concise,-exec -e '$a = $b + 42'
    1  <0> enter
    2  <;> nextstate(main 1 -e:1) v
    3  <#> gvsv[*b] s
    4  <$> const[IV 42] s
 *  5  <2> add[t3] sK/2
    6  <#> gvsv[*a] s
    7  <2> sassign vKS/2
    8  <@> leave[1 ref] vKP/REFC

In this -exec rendering, each opcode is executed in the order shown.
The add opcode, marked with '*', is discussed in more detail.

The 1st column is the op's sequence number, starting at 1, and is
displayed in base 36 by default.  Here they're purely linear; the
sequences are very helpful when looking at code with loops and
branches.

The symbol between angle brackets indicates the op's type, for
example; <2> is a BINOP, <@> a LISTOP, and <#> is a PADOP, which is
used in threaded perls. (see L</"OP class abbreviations">).

The opname, as in B<'add[t1]'>, may be followed by op-specific
information in parentheses or brackets (ex B<'[t1]'>).

The op-flags (ex B<'sK/2'>) are described in (L</"OP flags
abbreviations">).

    % perl -MO=Concise -e '$a = $b + 42'
    8  <@> leave[1 ref] vKP/REFC ->(end)
    1     <0> enter ->2
    2     <;> nextstate(main 1 -e:1) v ->3
    7     <2> sassign vKS/2 ->8
 *  5        <2> add[t1] sK/2 ->6
    -           <1> ex-rv2sv sK/1 ->4
    3              <$> gvsv(*b) s ->4
    4           <$> const(IV 42) s ->5
    -        <1> ex-rv2sv sKRM*/1 ->7
    6           <$> gvsv(*a) s ->7

The default rendering is top-down, so they're not in execution order.
This form reflects the way the stack is used to parse and evaluate
expressions; the add operates on the two terms below it in the tree.

Nullops appear as C<ex-opname>, where I<opname> is an op that has been
optimized away by perl.  They're displayed with a sequence-number of
'-', because they are not executed (they don't appear in previous
example), they're printed here because they reflect the parse.

The arrow points to the sequence number of the next op; they're not
displayed in -exec mode, for obvious reasons.

Note that because this rendering was done on a non-threaded perl, the
PADOPs in the previous examples are now SVOPs, and some (but not all)
of the square brackets have been replaced by round ones.  This is a
subtle feature to provide some visual distinction between renderings
on threaded and un-threaded perls.


=head1 OPTIONS

Arguments that don't start with a hyphen are taken to be the names of
subroutines or formats to render; if no
such functions are specified, the main
body of the program (outside any subroutines, and not including use'd
or require'd files) is rendered.  Passing C<BEGIN>, C<UNITCHECK>,
C<CHECK>, C<INIT>, or C<END> will cause all of the corresponding
special blocks to be printed.  Arguments must follow options.

Options affect how things are rendered (ie printed).  They're presented
here by their visual effect, 1st being strongest.  They're grouped
according to how they interrelate; within each group the options are
mutually exclusive (unless otherwise stated).

=head2 Options for Opcode Ordering

These options control the 'vertical display' of opcodes.  The display
'order' is also called 'mode' elsewhere in this document.

=over 4

=item B<-basic>

Print OPs in the order they appear in the OP tree (a preorder
traversal, starting at the root). The indentation of each OP shows its
level in the tree, and the '->' at the end of the line indicates the
next opcode in execution order.  This mode is the default, so the flag
is included simply for completeness.

=item B<-exec>

Print OPs in the order they would normally execute (for the majority
of constructs this is a postorder traversal of the tree, ending at the
root). In most cases the OP that usually follows a given OP will
appear directly below it; alternate paths are shown by indentation. In
cases like loops when control jumps out of a linear path, a 'goto'
line is generated.

=item B<-tree>

Print OPs in a text approximation of a tree, with the root of the tree
at the left and 'left-to-right' order of children transformed into
'top-to-bottom'. Because this mode grows both to the right and down,
it isn't suitable for large programs (unless you have a very wide
terminal).

=back

=head2 Options for Line-Style

These options select the line-style (or just style) used to render
each opcode, and dictates what info is actually printed into each line.

=over 4

=item B<-concise>

Use the author's favorite set of formatting conventions. This is the
default, of course.

=item B<-terse>

Use formatting conventions that emulate the output of B<B::Terse>. The
basic mode is almost indistinguishable from the real B<B::Terse>, and the
exec mode looks very similar, but is in a more logical order and lacks
curly brackets. B<B::Terse> doesn't have a tree mode, so the tree mode
is only vaguely reminiscent of B<B::Terse>.

=item B<-linenoise>

Use formatting conventions in which the name of each OP, rather than being
written out in full, is represented by a one- or two-character abbreviation.
This is mainly a joke.

=item B<-debug>

Use formatting conventions reminiscent of B<B::Debug>; these aren't
very concise at all.

=item B<-env>

Use formatting conventions read from the environment variables
C<B_CONCISE_FORMAT>, C<B_CONCISE_GOTO_FORMAT>, and C<B_CONCISE_TREE_FORMAT>.

=back

=head2 Options for tree-specific formatting

=over 4

=item B<-compact>

Use a tree format in which the minimum amount of space is used for the
lines connecting nodes (one character in most cases). This squeezes out
a few precious columns of screen real estate.

=item B<-loose>

Use a tree format that uses longer edges to separate OP nodes. This format
tends to look better than the compact one, especially in ASCII, and is
the default.

=item B<-vt>

Use tree connecting characters drawn from the VT100 line-drawing set.
This looks better if your terminal supports it.

=item B<-ascii>

Draw the tree with standard ASCII characters like C<+> and C<|>. These don't
look as clean as the VT100 characters, but they'll work with almost any
terminal (or the horizontal scrolling mode of less(1)) and are suitable
for text documentation or email. This is the default.

=back

These are pairwise exclusive, i.e. compact or loose, vt or ascii.

=head2 Options controlling sequence numbering

=over 4

=item B<-base>I<n>

Print OP sequence numbers in base I<n>. If I<n> is greater than 10, the
digit for 11 will be 'a', and so on. If I<n> is greater than 36, the digit
for 37 will be 'A', and so on until 62. Values greater than 62 are not
currently supported. The default is 36.

=item B<-bigendian>

Print sequence numbers with the most significant digit first. This is the
usual convention for Arabic numerals, and the default.

=item B<-littleendian>

Print sequence numbers with the least significant digit first.  This is
obviously mutually exclusive with bigendian.

=back

=head2 Other options

=over 4

=item B<-src>

With this option, the rendering of each statement (starting with the
nextstate OP) will be preceded by the 1st line of source code that
generates it.  For example:

    1  <0> enter
    # 1: my $i;
    2  <;> nextstate(main 1 junk.pl:1) v:{
    3  <0> padsv[$i:1,10] vM/LVINTRO
    # 3: for $i (0..9) {
    4  <;> nextstate(main 3 junk.pl:3) v:{
    5  <0> pushmark s
    6  <$> const[IV 0] s
    7  <$> const[IV 9] s
    8  <{> enteriter(next->j last->m redo->9)[$i:1,10] lKS
    k  <0> iter s
    l  <|> and(other->9) vK/1
    # 4:     print "line ";
    9      <;> nextstate(main 2 junk.pl:4) v
    a      <0> pushmark s
    b      <$> const[PV "line "] s
    c      <@> print vK
    # 5:     print "$i\n";
    ...

=item B<-stash="somepackage">

With this, "somepackage" will be required, then the stash is
inspected, and each function is rendered.

=back

The following options are pairwise exclusive.

=over 4

=item B<-main>

Include the main program in the output, even if subroutines were also
specified.  This rendering is normally suppressed when a subroutine
name or reference is given.

=item B<-nomain>

This restores the default behavior after you've changed it with '-main'
(it's not normally needed).  If no subroutine name/ref is given, main is
rendered, regardless of this flag.

=item B<-nobanner>

Renderings usually include a banner line identifying the function name
or stringified subref.  This suppresses the printing of the banner.

TBC: Remove the stringified coderef; while it provides a 'cookie' for
each function rendered, the cookies used should be 1,2,3.. not a
random hex-address.  It also complicates string comparison of two
different trees.

=item B<-banner>

restores default banner behavior.

=item B<-banneris> => subref

TBC: a hookpoint (and an option to set it) for a user-supplied
function to produce a banner appropriate for users needs.  It's not
ideal, because the rendering-state variables, which are a natural
candidate for use in concise.t, are unavailable to the user.

=back

=head2 Option Stickiness

If you invoke Concise more than once in a program, you should know that
the options are 'sticky'.  This means that the options you provide in
the first call will be remembered for the 2nd call, unless you
re-specify or change them.

=head1 ABBREVIATIONS

The concise style uses symbols to convey maximum info with minimal
clutter (like hex addresses).  With just a little practice, you can
start to see the flowers, not just the branches, in the trees.

=head2 OP class abbreviations

These symbols appear before the op-name, and indicate the
B:: namespace that represents the ops in your Perl code.

    0      OP (aka BASEOP)  An OP with no children
    1      UNOP             An OP with one child
    +      UNOP_AUX         A UNOP with auxillary fields
    2      BINOP            An OP with two children
    |      LOGOP            A control branch OP
    @      LISTOP           An OP that could have lots of children
    /      PMOP             An OP with a regular expression
    $      SVOP             An OP with an SV
    "      PVOP             An OP with a string
    {      LOOP             An OP that holds pointers for a loop
    ;      COP              An OP that marks the start of a statement
    #      PADOP            An OP with a GV on the pad
    .      METHOP           An OP with method call info

=head2 OP flags abbreviations

OP flags are either public or private.  The public flags alter the
behavior of each opcode in consistent ways, and are represented by 0
or more single characters.

    v      OPf_WANT_VOID    Want nothing (void context)
    s      OPf_WANT_SCALAR  Want single value (scalar context)
    l      OPf_WANT_LIST    Want list of any length (list context)
                            Want is unknown
    K      OPf_KIDS         There is a firstborn child.
    P      OPf_PARENS       This operator was parenthesized.
                             (Or block needs explicit scope entry.)
    R      OPf_REF          Certified reference.
                             (Return container, not containee).
    M      OPf_MOD          Will modify (lvalue).
    S      OPf_STACKED      Some arg is arriving on the stack.
    *      OPf_SPECIAL      Do something weird for this op (see op.h)

Private flags, if any are set for an opcode, are displayed after a '/'

    8  <@> leave[1 ref] vKP/REFC ->(end)
    7     <2> sassign vKS/2 ->8

They're opcode specific, and occur less often than the public ones, so
they're represented by short mnemonics instead of single-chars; see
B::Op_private and F<regen/op_private> for more details.

=head1 FORMATTING SPECIFICATIONS

For each line-style ('concise', 'terse', 'linenoise', etc.) there are
3 format-specs which control how OPs are rendered.

The first is the 'default' format, which is used in both basic and exec
modes to print all opcodes.  The 2nd, goto-format, is used in exec
mode when branches are encountered.  They're not real opcodes, and are
inserted to look like a closing curly brace.  The tree-format is tree
specific.

When a line is rendered, the correct format-spec is copied and scanned
for the following items; data is substituted in, and other
manipulations like basic indenting are done, for each opcode rendered.

There are 3 kinds of items that may be populated; special patterns,
#vars, and literal text, which is copied verbatim.  (Yes, it's a set
of s///g steps.)

=head2 Special Patterns

These items are the primitives used to perform indenting, and to
select text from amongst alternatives.

=over 4

=item B<(x(>I<exec_text>B<;>I<basic_text>B<)x)>

Generates I<exec_text> in exec mode, or I<basic_text> in basic mode.

=item B<(*(>I<text>B<)*)>

Generates one copy of I<text> for each indentation level.

=item B<(*(>I<text1>B<;>I<text2>B<)*)>

Generates one fewer copies of I<text1> than the indentation level, followed
by one copy of I<text2> if the indentation level is more than 0.

=item B<(?(>I<text1>B<#>I<var>I<Text2>B<)?)>

If the value of I<var> is true (not empty or zero), generates the
value of I<var> surrounded by I<text1> and I<Text2>, otherwise
nothing.

=item B<~>

Any number of tildes and surrounding whitespace will be collapsed to
a single space.

=back

=head2 # Variables

These #vars represent opcode properties that you may want as part of
your rendering.  The '#' is intended as a private sigil; a #var's
value is interpolated into the style-line, much like "read $this".

These vars take 3 forms:

=over 4

=item B<#>I<var>

A property named 'var' is assumed to exist for the opcodes, and is
interpolated into the rendering.

=item B<#>I<var>I<N>

Generates the value of I<var>, left justified to fill I<N> spaces.
Note that this means while you can have properties 'foo' and 'foo2',
you cannot render 'foo2', but you could with 'foo2a'.  You would be
wise not to rely on this behavior going forward ;-)

=item B<#>I<Var>

This ucfirst form of #var generates a tag-value form of itself for
display; it converts '#Var' into a 'Var => #var' style, which is then
handled as described above.  (Imp-note: #Vars cannot be used for
conditional-fills, because the => #var transform is done after the check
for #Var's value).

=back

The following variables are 'defined' by B::Concise; when they are
used in a style, their respective values are plugged into the
rendering of each opcode.

Only some of these are used by the standard styles, the others are
provided for you to delve into optree mechanics, should you wish to
add a new style (see L</add_style> below) that uses them.  You can
also add new ones using L</add_callback>.

=over 4

=item B<#addr>

The address of the OP, in hexadecimal.

=item B<#arg>

The OP-specific information of the OP (such as the SV for an SVOP, the
non-local exit pointers for a LOOP, etc.) enclosed in parentheses.

=item B<#class>

The B-determined class of the OP, in all caps.

=item B<#classsym>

A single symbol abbreviating the class of the OP.

=item B<#coplabel>

The label of the statement or block the OP is the start of, if any.

=item B<#exname>

The name of the OP, or 'ex-foo' if the OP is a null that used to be a foo.

=item B<#extarg>

The target of the OP, or nothing for a nulled OP.

=item B<#firstaddr>

The address of the OP's first child, in hexadecimal.

=item B<#flags>

The OP's flags, abbreviated as a series of symbols.

=item B<#flagval>

The numeric value of the OP's flags.

=item B<#hints>

The COP's hint flags, rendered with abbreviated names if possible. An empty
string if this is not a COP. Here are the symbols used:

    $ strict refs
    & strict subs
    * strict vars
   x$ explicit use/no strict refs
   x& explicit use/no strict subs
   x* explicit use/no strict vars
    i integers
    l locale
    b bytes
    { block scope
    % localise %^H
    < open in
    > open out
    I overload int
    F overload float
    B overload binary
    S overload string
    R overload re
    T taint
    E eval
    X filetest access
    U utf-8

=item B<#hintsval>

The numeric value of the COP's hint flags, or an empty string if this is not
a COP.

=item B<#hyphseq>

The sequence number of the OP, or a hyphen if it doesn't have one.

=item B<#label>

'NEXT', 'LAST', or 'REDO' if the OP is a target of one of those in exec
mode, or empty otherwise.

=item B<#lastaddr>

The address of the OP's last child, in hexadecimal.

=item B<#name>

The OP's name.

=item B<#NAME>

The OP's name, in all caps.

=item B<#next>

The sequence number of the OP's next OP.

=item B<#nextaddr>

The address of the OP's next OP, in hexadecimal.

=item B<#noise>

A one- or two-character abbreviation for the OP's name.

=item B<#private>

The OP's private flags, rendered with abbreviated names if possible.

=item B<#privval>

The numeric value of the OP's private flags.

=item B<#seq>

The sequence number of the OP. Note that this is a sequence number
generated by B::Concise.

=item B<#seqnum>

5.8.x and earlier only. 5.9 and later do not provide this.

The real sequence number of the OP, as a regular number and not adjusted
to be relative to the start of the real program. (This will generally be
a fairly large number because all of B<B::Concise> is compiled before
your program is).

=item B<#opt>

Whether or not the op has been optimized by the peephole optimizer.

Only available in 5.9 and later.

=item B<#sibaddr>

The address of the OP's next youngest sibling, in hexadecimal.

=item B<#svaddr>

The address of the OP's SV, if it has an SV, in hexadecimal.

=item B<#svclass>

The class of the OP's SV, if it has one, in all caps (e.g., 'IV').

=item B<#svval>

The value of the OP's SV, if it has one, in a short human-readable format.

=item B<#targ>

The numeric value of the OP's targ.

=item B<#targarg>

The name of the variable the OP's targ refers to, if any, otherwise the
letter t followed by the OP's targ in decimal.

=item B<#targarglife>

Same as B<#targarg>, but followed by the COP sequence numbers that delimit
the variable's lifetime (or 'end' for a variable in an open scope) for a
variable.

=item B<#typenum>

The numeric value of the OP's type, in decimal.

=back

=head1 One-Liner Command tips

=over 4

=item perl -MO=Concise,bar foo.pl

Renders only bar() from foo.pl.  To see main, drop the ',bar'.  To see
both, add ',-main'

=item perl -MDigest::MD5=md5 -MO=Concise,md5 -e1

Identifies md5 as an XS function.  The export is needed so that BC can
find it in main.

=item perl -MPOSIX -MO=Concise,_POSIX_ARG_MAX -e1

Identifies _POSIX_ARG_MAX as a constant sub, optimized to an IV.
Although POSIX isn't entirely consistent across platforms, this is
likely to be present in virtually all of them.

=item perl -MPOSIX -MO=Concise,a -e 'print _POSIX_SAVED_IDS'

This renders a print statement, which includes a call to the function.
It's identical to rendering a file with a use call and that single
statement, except for the filename which appears in the nextstate ops.

=item perl -MPOSIX -MO=Concise,a -e 'sub a{_POSIX_SAVED_IDS}'

This is B<very> similar to previous, only the first two ops differ.  This
subroutine rendering is more representative, insofar as a single main
program will have many subs.

=item perl -MB::Concise -e 'B::Concise::compile("-exec","-src", \%B::Concise::)->()'

This renders all functions in the B::Concise package with the source
lines.  It eschews the O framework so that the stashref can be passed
directly to B::Concise::compile().  See -stash option for a more
convenient way to render a package.

=back

=head1 Using B::Concise outside of the O framework

The common (and original) usage of B::Concise was for command-line
renderings of simple code, as given in EXAMPLE.  But you can also use
B<B::Concise> from your code, and call compile() directly, and
repeatedly.  By doing so, you can avoid the compile-time only
operation of O.pm, and even use the debugger to step through
B::Concise::compile() itself.

Once you're doing this, you may alter Concise output by adding new
rendering styles, and by optionally adding callback routines which
populate new variables, if such were referenced from those (just
added) styles.  

=head2 Example: Altering Concise Renderings

    use B::Concise qw(set_style add_callback);
    add_style($yourStyleName => $defaultfmt, $gotofmt, $treefmt);
    add_callback
      ( sub {
            my ($h, $op, $format, $level, $stylename) = @_;
            $h->{variable} = some_func($op);
        });
    $walker = B::Concise::compile(@options,@subnames,@subrefs);
    $walker->();

=head2 set_style()

B<set_style> accepts 3 arguments, and updates the three format-specs
comprising a line-style (basic-exec, goto, tree).  It has one minor
drawback though; it doesn't register the style under a new name.  This
can become an issue if you render more than once and switch styles.
Thus you may prefer to use add_style() and/or set_style_standard()
instead.

=head2 set_style_standard($name)

This restores one of the standard line-styles: C<terse>, C<concise>,
C<linenoise>, C<debug>, C<env>, into effect.  It also accepts style
names previously defined with add_style().

=head2 add_style ()

This subroutine accepts a new style name and three style arguments as
above, and creates, registers, and selects the newly named style.  It is
an error to re-add a style; call set_style_standard() to switch between
several styles.

=head2 add_callback ()

If your newly minted styles refer to any new #variables, you'll need
to define a callback subroutine that will populate (or modify) those
variables.  They are then available for use in the style you've
chosen.

The callbacks are called for each opcode visited by Concise, in the
same order as they are added.  Each subroutine is passed five
parameters.

  1. A hashref, containing the variable names and values which are
     populated into the report-line for the op
  2. the op, as a B<B::OP> object
  3. a reference to the format string
  4. the formatting (indent) level
  5. the selected stylename

To define your own variables, simply add them to the hash, or change
existing values if you need to.  The level and format are passed in as
references to scalars, but it is unlikely that they will need to be
changed or even used.

=head2 Running B::Concise::compile()

B<compile> accepts options as described above in L</OPTIONS>, and
arguments, which are either coderefs, or subroutine names.

It constructs and returns a $treewalker coderef, which when invoked,
traverses, or walks, and renders the optrees of the given arguments to
STDOUT.  You can reuse this, and can change the rendering style used
each time; thereafter the coderef renders in the new style.

B<walk_output> lets you change the print destination from STDOUT to
another open filehandle, or into a string passed as a ref (unless
you've built perl with -Uuseperlio).

  my $walker = B::Concise::compile('-terse','aFuncName', \&aSubRef); # 1
  walk_output(\my $buf);
  $walker->();			        # 1 renders -terse
  set_style_standard('concise');	# 2
  $walker->();  		        # 2 renders -concise
  $walker->(@new);			# 3 renders whatever
  print "3 different renderings: terse, concise, and @new: $buf\n";

When $walker is called, it traverses the subroutines supplied when it
was created, and renders them using the current style.  You can change
the style afterwards in several different ways:

  1. call C<compile>, altering style or mode/order
  2. call C<set_style_standard>
  3. call $walker, passing @new options

Passing new options to the $walker is the easiest way to change
amongst any pre-defined styles (the ones you add are automatically
recognized as options), and is the only way to alter rendering order
without calling compile again.  Note however that rendering state is
still shared amongst multiple $walker objects, so they must still be
used in a coordinated manner.

=head2 B::Concise::reset_sequence()

This function (not exported) lets you reset the sequence numbers (note
that they're numbered arbitrarily, their goal being to be human
readable).  Its purpose is mostly to support testing, i.e. to compare
the concise output from two identical anonymous subroutines (but
different instances).  Without the reset, B::Concise, seeing that
they're separate optrees, generates different sequence numbers in
the output.

=head2 Errors

Errors in rendering (non-existent function-name, non-existent coderef)
are written to the STDOUT, or wherever you've set it via
walk_output().

Errors using the various *style* calls, and bad args to walk_output(),
result in die().  Use an eval if you wish to catch these errors and
continue processing.

=head1 AUTHOR

Stephen McCamant, E<lt>smcc@CSUA.Berkeley.EDUE<gt>.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      package B::Terse;

our $VERSION = '1.06';

use strict;
use B qw(class @specialsv_name);
use B::Concise qw(concise_subref set_style_standard);
use Carp;

sub terse {
    my ($order, $subref) = @_;
    set_style_standard("terse");
    if ($order eq "exec") {
	concise_subref('exec', $subref);
    } else {
	concise_subref('basic', $subref);
    }
}

sub compile {
    my @args = @_;
    my $order = @args ? shift(@args) : "";
    $order = "-exec" if $order eq "exec";
    unshift @args, $order if $order ne "";
    B::Concise::compile("-terse", @args);
}

sub indent {
    my ($level) = @_ ? shift : 0;
    return "    " x $level;
}

# Don't use this, at least on OPs in subroutines: it has no way of
# getting to the pad, and will give wrong answers or crash.
sub B::OP::terse {
    carp "B::OP::terse is deprecated; use B::Concise instead";
    B::Concise::b_terse(@_);
}

sub B::SV::terse {
    my($sv, $level) = (@_, 0);
    my %info;
    B::Concise::concise_sv($sv, \%info);
    my $s = indent($level)
	. B::Concise::fmt_line(\%info, $sv,
				 "#svclass~(?((#svaddr))?)~#svval", 0);
    chomp $s;
    print "$s\n" unless defined wantarray;
    $s;
}

sub B::NULL::terse {
    my ($sv, $level) = (@_, 0);
    my $s = indent($level) . sprintf "%s (0x%lx)", class($sv), $$sv;
    print "$s\n" unless defined wantarray;
    $s;
}

sub B::SPECIAL::terse {
    my ($sv, $level) = (@_, 0);
    my $s = indent($level)
	. sprintf( "%s #%d %s", class($sv), $$sv, $specialsv_name[$$sv]);
    print "$s\n" unless defined wantarray;
    $s;
}

1;

__END__

=head1 NAME

B::Terse - Walk Perl syntax tree, printing terse info about ops

=head1 SYNOPSIS

	perl -MO=Terse[,OPTIONS] foo.pl

=head1 DESCRIPTION

This module prints the contents of the parse tree, but without as much
information as L<B::Debug>.  For comparison, C<print "Hello, world.">
produced 96 lines of output from B::Debug, but only 6 from B::Terse.

This module is useful for people who are writing their own back end,
or who are learning about the Perl internals.  It's not useful to the
average programmer.

This version of B::Terse is really just a wrapper that calls L<B::Concise>
with the B<-terse> option. It is provided for compatibility with old scripts
(and habits) but using B::Concise directly is now recommended instead.

For compatibility with the old B::Terse, this module also adds a
method named C<terse> to B::OP and B::SV objects. The B::SV method is
largely compatible with the old one, though authors of new software
might be advised to choose a more user-friendly output format. The
B::OP C<terse> method, however, doesn't work well. Since B::Terse was
first written, much more information in OPs has migrated to the
scratchpad datastructure, but the C<terse> interface doesn't have any
way of getting to the correct pad. As a kludge, the new version will
always use the pad for the main program, but for OPs in subroutines
this will give the wrong answer or crash.

=head1 AUTHOR

The original version of B::Terse was written by Malcolm Beattie,
E<lt>mbeattie@sable.ox.ac.ukE<gt>. This wrapper was written by Stephen
McCamant, E<lt>smcc@MIT.EDUE<gt>.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                package B::Showlex;

our $VERSION = '1.05';

use strict;
use B qw(svref_2object comppadlist class);
use B::Terse ();
use B::Concise ();

#
# Invoke as
#     perl -MO=Showlex,foo bar.pl
# to see the names of lexical variables used by &foo
# or as
#     perl -MO=Showlex bar.pl
# to see the names of file scope lexicals used by bar.pl
#


# borrowed from B::Concise
our $walkHandle = \*STDOUT;

sub walk_output { # updates $walkHandle
    $walkHandle = B::Concise::walk_output(@_);
    #print "got $walkHandle";
    #print $walkHandle "using it";
    $walkHandle;
}

sub shownamearray {
    my ($name, $av) = @_;
    my @els = $av->ARRAY;
    my $count = @els;
    my $i;
    print $walkHandle "$name has $count entries\n";
    for ($i = 0; $i < $count; $i++) {
	my $sv = $els[$i];
	if (class($sv) ne "SPECIAL") {
	    printf $walkHandle "$i: (0x%lx) %s\n",
				$$sv, $sv->PVX // "undef" || "const";
	} else {
	    printf $walkHandle "$i: %s\n", $sv->terse;
	    #printf $walkHandle "$i: %s\n", B::Concise::concise_sv($sv);
	}
    }
}

sub showvaluearray {
    my ($name, $av) = @_;
    my @els = $av->ARRAY;
    my $count = @els;
    my $i;
    print $walkHandle "$name has $count entries\n";
    for ($i = 0; $i < $count; $i++) {
	printf $walkHandle "$i: %s\n", $els[$i]->terse;
	#print $walkHandle "$i: %s\n", B::Concise::concise_sv($els[$i]);
    }
}

sub showlex {
    my ($objname, $namesav, $valsav) = @_;
    shownamearray("Pad of lexical names for $objname", $namesav);
    showvaluearray("Pad of lexical values for $objname", $valsav);
}

my ($newlex, $nosp1); # rendering state vars

sub padname_terse {
    my $name = shift;
    return $name->terse if class($name) eq 'SPECIAL';
    my $str = $name->PVX;
    return sprintf "(0x%lx) %s",
	       $$name,
	       length $str ? qq'"$str"' : defined $str ? "const" : 'undef';
}

sub newlex { # drop-in for showlex
    my ($objname, $names, $vals) = @_;
    my @names = $names->ARRAY;
    my @vals  = $vals->ARRAY;
    my $count = @names;
    print $walkHandle "$objname Pad has $count entries\n";
    printf $walkHandle "0: %s\n", padname_terse($names[0]) unless $nosp1;
    for (my $i = 1; $i < $count; $i++) {
	printf $walkHandle "$i: %s = %s\n", padname_terse($names[$i]),
					    $vals[$i]->terse,
	    unless $nosp1
	       and class($names[$i]) eq 'SPECIAL' || !$names[$i]->LEN;
    }
}

sub showlex_obj {
    my ($objname, $obj) = @_;
    $objname =~ s/^&main::/&/;
    showlex($objname, svref_2object($obj)->PADLIST->ARRAY) if !$newlex;
    newlex ($objname, svref_2object($obj)->PADLIST->ARRAY) if  $newlex;
}

sub showlex_main {
    showlex("comppadlist", comppadlist->ARRAY)	if !$newlex;
    newlex ("main", comppadlist->ARRAY)		if  $newlex;
}

sub compile {
    my @options = grep(/^-/, @_);
    my @args = grep(!/^-/, @_);
    for my $o (@options) {
	$newlex = 1 if $o eq "-newlex";
	$nosp1  = 1 if $o eq "-nosp";
    }

    return \&showlex_main unless @args;
    return sub {
	my $objref;
	foreach my $objname (@args) {
	    next unless $objname;	# skip nulls w/o carping

	    if (ref $objname) {
		print $walkHandle "B::Showlex::compile($objname)\n";
		$objref = $objname;
	    } else {
		$objname = "main::$objname" unless $objname =~ /::/;
		print $walkHandle "$objname:\n";
		no strict 'refs';
		die "err: unknown function ($objname)\n"
		    unless *{$objname}{CODE};
		$objref = \&$objname;
	    }
	    showlex_obj($objname, $objref);
	}
    }
}

1;

__END__

=head1 NAME

B::Showlex - Show lexical variables used in functions or files

=head1 SYNOPSIS

	perl -MO=Showlex[,-OPTIONS][,SUBROUTINE] foo.pl

=head1 DESCRIPTION

When a comma-separated list of subroutine names is given as options, Showlex
prints the lexical variables used in those subroutines.  Otherwise, it prints
the file-scope lexicals in the file.

=head1 EXAMPLES

Traditional form:

 $ perl -MO=Showlex -e 'my ($i,$j,$k)=(1,"foo")'
 Pad of lexical names for comppadlist has 4 entries
 0: (0x8caea4) undef
 1: (0x9db0fb0) $i
 2: (0x9db0f38) $j
 3: (0x9db0f50) $k
 Pad of lexical values for comppadlist has 5 entries
 0: SPECIAL #1 &PL_sv_undef
 1: NULL (0x9da4234)
 2: NULL (0x9db0f2c)
 3: NULL (0x9db0f44)
 4: NULL (0x9da4264)
 -e syntax OK

New-style form:

 $ perl -MO=Showlex,-newlex -e 'my ($i,$j,$k)=(1,"foo")'
 main Pad has 4 entries
 0: (0x8caea4) undef
 1: (0xa0c4fb8) "$i" = NULL (0xa0b8234)
 2: (0xa0c4f40) "$j" = NULL (0xa0c4f34)
 3: (0xa0c4f58) "$k" = NULL (0xa0c4f4c)
 -e syntax OK

New form, no specials, outside O framework:

 $ perl -MB::Showlex -e \
    'my ($i,$j,$k)=(1,"foo"); B::Showlex::compile(-newlex,-nosp)->()'
 main Pad has 4 entries
 1: (0x998ffb0) "$i" = IV (0x9983234) 1
 2: (0x998ff68) "$j" = PV (0x998ff5c) "foo"
 3: (0x998ff80) "$k" = NULL (0x998ff74)

Note that this example shows the values of the lexicals, whereas the other
examples did not (as they're compile-time only).

=head2 OPTIONS

The C<-newlex> option produces a more readable C<< name => value >> format,
and is shown in the second example above.

The C<-nosp> option eliminates reporting of SPECIALs, such as C<0: SPECIAL
#1 &PL_sv_undef> above.  Reporting of SPECIALs can sometimes overwhelm
your declared lexicals.

=head1 SEE ALSO

L<B::Showlex> can also be used outside of the O framework, as in the third
example.  See L<B::Concise> for a fuller explanation of reasons.

=head1 TODO

Some of the reported info, such as hex addresses, is not particularly
valuable.  Other information would be more useful for the typical
programmer, such as line-numbers, pad-slot reuses, etc..  Given this,
-newlex is not a particularly good flag-name.

=head1 AUTHOR

Malcolm Beattie, C<mbeattie@sable.ox.ac.uk>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*    EXTERN.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1995, 1996, 1997, 1998, 1999,
 *    2000, 2001, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * EXT  designates a global var which is defined in perl.h
 * dEXT designates a global var which is defined in another
 *      file, so we can't count on finding it in perl.h
 *      (this practice should be avoided).
 */
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST

#  if (defined(WIN32) || defined(__SYMBIAN32__)) && !defined(PERL_STATIC_SYMS)
    /* miniperl should not export anything */
#    if defined(PERL_IS_MINIPERL) && !defined(UNDER_CE) && defined(_MSC_VER)
#      define EXT extern
#      define dEXT 
#      define EXTCONST extern const
#      define dEXTCONST const
#    else
#      if defined(PERLDLL) || defined(__SYMBIAN32__)
#        define EXT EXTERN_C __declspec(dllexport)
#        define dEXT 
#        define EXTCONST EXTERN_C __declspec(dllexport) const
#        define dEXTCONST const
#      else
#        define EXT EXTERN_C __declspec(dllimport)
#        define dEXT 
#        define EXTCONST EXTERN_C __declspec(dllimport) const
#        define dEXTCONST const
#      endif
#    endif
#  else
#    if defined(__CYGWIN__) && defined(USEIMPORTLIB)
#      define EXT extern __declspec(dllimport)
#      define dEXT 
#      define EXTCONST extern __declspec(dllimport) const
#      define dEXTCONST const
#    else
#      define EXT extern
#      define dEXT
#      define EXTCONST extern const
#      define dEXTCONST const
#    endif
#  endif

#undef INIT
#define INIT(x)

#undef DOINIT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /*    INTERN.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1995, 1996, 1998, 2000, 2001,
 *    by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * EXT  designates a global var which is defined in perl.h
 * dEXT designates a global var which is defined in another
 *      file, so we can't count on finding it in perl.h
 *      (this practice should be avoided).
 */
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST

#  if (defined(WIN32) && defined(__MINGW32__)) || defined(__SYMBIAN32__)
#    ifdef __cplusplus
#      define EXT	__declspec(dllexport)
#      define dEXT
#      define EXTCONST	__declspec(dllexport) extern const
#      define dEXTCONST	const
#    else
#      define EXT	__declspec(dllexport)
#      define dEXT
#      define EXTCONST	__declspec(dllexport) const
#      define dEXTCONST	const
#    endif
#  else
#    ifdef __cplusplus
#      define EXT
#      define dEXT
#      define EXTCONST EXTERN_C const
#      define dEXTCONST const
#    else
#      define EXT
#      define dEXT
#      define EXTCONST const
#      define dEXTCONST const
#    endif
#  endif

#undef INIT
#define INIT(x) = x

#define DOINIT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         package B::Xref;

our $VERSION = '1.05';

=head1 NAME

B::Xref - Generates cross reference reports for Perl programs

=head1 SYNOPSIS

perl -MO=Xref[,OPTIONS] foo.pl

=head1 DESCRIPTION

The B::Xref module is used to generate a cross reference listing of all
definitions and uses of variables, subroutines and formats in a Perl program.
It is implemented as a backend for the Perl compiler.

The report generated is in the following format:

    File filename1
      Subroutine subname1
	Package package1
	  object1        line numbers
	  object2        line numbers
	  ...
	Package package2
	...

Each B<File> section reports on a single file. Each B<Subroutine> section
reports on a single subroutine apart from the special cases
"(definitions)" and "(main)". These report, respectively, on subroutine
definitions found by the initial symbol table walk and on the main part of
the program or module external to all subroutines.

The report is then grouped by the B<Package> of each variable,
subroutine or format with the special case "(lexicals)" meaning
lexical variables. Each B<object> name (implicitly qualified by its
containing B<Package>) includes its type character(s) at the beginning
where possible. Lexical variables are easier to track and even
included dereferencing information where possible.

The C<line numbers> are a comma separated list of line numbers (some
preceded by code letters) where that object is used in some way.
Simple uses aren't preceded by a code letter. Introductions (such as
where a lexical is first defined with C<my>) are indicated with the
letter "i". Subroutine and method calls are indicated by the character
"&".  Subroutine definitions are indicated by "s" and format
definitions by "f".

For instance, here's part of the report from the I<pod2man> program that
comes with Perl:

  Subroutine clear_noremap
    Package (lexical)
      $ready_to_print   i1069, 1079
    Package main
      $&                1086
      $.                1086
      $0                1086
      $1                1087
      $2                1085, 1085
      $3                1085, 1085
      $ARGV             1086
      %HTML_Escapes     1085, 1085

This shows the variables used in the subroutine C<clear_noremap>.  The
variable C<$ready_to_print> is a my() (lexical) variable,
B<i>ntroduced (first declared with my()) on line 1069, and used on
line 1079.  The variable C<$&> from the main package is used on 1086,
and so on.

A line number may be prefixed by a single letter:

=over 4

=item i

Lexical variable introduced (declared with my()) for the first time.

=item &

Subroutine or method call.

=item s

Subroutine defined.

=item r

Format defined.

=back

The most useful option the cross referencer has is to save the report
to a separate file.  For instance, to save the report on
I<myperlprogram> to the file I<report>:

  $ perl -MO=Xref,-oreport myperlprogram

=head1 OPTIONS

Option words are separated by commas (not whitespace) and follow the
usual conventions of compiler backend options.

=over 8

=item C<-oFILENAME>

Directs output to C<FILENAME> instead of standard output.

=item C<-r>

Raw output. Instead of producing a human-readable report, outputs a line
in machine-readable form for each definition/use of a variable/sub/format.

=item C<-d>

Don't output the "(definitions)" sections.

=item C<-D[tO]>

(Internal) debug options, probably only useful if C<-r> included.
The C<t> option prints the object on the top of the stack as it's
being tracked. The C<O> option prints each operator as it's being
processed in the execution order of the program.

=back

=head1 BUGS

Non-lexical variables are quite difficult to track through a program.
Sometimes the type of a non-lexical variable's use is impossible to
determine. Introductions of non-lexical non-scalars don't seem to be
reported properly.

=head1 AUTHOR

Malcolm Beattie, mbeattie@sable.ox.ac.uk.

=cut

use strict;
use Config;
use B qw(peekop class comppadlist main_start svref_2object walksymtable
         OPpLVAL_INTRO SVf_POK OPpOUR_INTRO cstring
        );

sub UNKNOWN { ["?", "?", "?"] }

my @pad;			# lexicals in current pad
				# as ["(lexical)", type, name]
my %done;			# keyed by $$op: set when each $op is done
my $top = UNKNOWN;		# shadows top element of stack as
				# [pack, type, name] (pack can be "(lexical)")
my $file;			# shadows current filename
my $line;			# shadows current line number
my $subname;			# shadows current sub name
my %table;			# Multi-level hash to record all uses etc.
my @todo = ();			# List of CVs that need processing

my %code = (intro => "i", used => "",
	    subdef => "s", subused => "&",
	    formdef => "f", meth => "->");


# Options
my ($debug_op, $debug_top, $nodefs, $raw);

sub process {
    my ($var, $event) = @_;
    my ($pack, $type, $name) = @$var;
    if ($type eq "*") {
	if ($event eq "used") {
	    return;
	} elsif ($event eq "subused") {
	    $type = "&";
	}
    }
    $type =~ s/(.)\*$/$1/g;
    if ($raw) {
	printf "%-16s %-12s %5d %-12s %4s %-16s %s\n",
	    $file, $subname, $line, $pack, $type, $name, $event;
    } else {
	# Wheee
	push(@{$table{$file}->{$subname}->{$pack}->{$type.$name}->{$event}},
	    $line);
    }
}

sub load_pad {
    my $padlist = shift;
    my ($namelistav, $vallistav, @namelist, $ix);
    @pad = ();
    return if class($padlist) =~ '^(?:SPECIAL|NULL)\z';
    ($namelistav,$vallistav) = $padlist->ARRAY;
    @namelist = $namelistav->ARRAY;
    for ($ix = 1; $ix < @namelist; $ix++) {
	my $namesv = $namelist[$ix];
	next if class($namesv) eq "SPECIAL";
	my ($type, $name) = $namesv->PV =~ /^(.)([^\0]*)(\0.*)?$/;
	$pad[$ix] = ["(lexical)", $type || '?', $name || '?'];
    }
    if ($Config{useithreads}) {
	my (@vallist);
	@vallist = $vallistav->ARRAY;
	for ($ix = 1; $ix < @vallist; $ix++) {
	    my $valsv = $vallist[$ix];
	    next unless class($valsv) eq "GV";
            next if class($valsv->STASH) eq 'SPECIAL';
	    # these pad GVs don't have corresponding names, so same @pad
	    # array can be used without collisions
	    $pad[$ix] = [$valsv->STASH->NAME, "*", $valsv->NAME];
	}
    }
}

sub xref {
    my $start = shift;
    my $op;
    for ($op = $start; $$op; $op = $op->next) {
	last if $done{$$op}++;
	warn sprintf("top = [%s, %s, %s]\n", @$top) if $debug_top;
	warn peekop($op), "\n" if $debug_op;
	my $opname = $op->name;
	if ($opname =~ /^(or|and|mapwhile|grepwhile|range|cond_expr)$/) {
	    xref($op->other);
	} elsif ($opname eq "match" || $opname eq "subst") {
	    xref($op->pmreplstart);
	} elsif ($opname eq "substcont") {
	    xref($op->other->pmreplstart);
	    $op = $op->other;
	    redo;
	} elsif ($opname eq "enterloop") {
	    xref($op->redoop);
	    xref($op->nextop);
	    xref($op->lastop);
	} elsif ($opname eq "subst") {
	    xref($op->pmreplstart);
	} else {
	    no strict 'refs';
	    my $ppname = "pp_$opname";
	    &$ppname($op) if defined(&$ppname);
	}
    }
}

sub xref_cv {
    my $cv = shift;
    my $pack = $cv->GV->STASH->NAME;
    $subname = ($pack eq "main" ? "" : "$pack\::") . $cv->GV->NAME;
    load_pad($cv->PADLIST);
    xref($cv->START);
    $subname = "(main)";
}

sub xref_object {
    my $cvref = shift;
    xref_cv(svref_2object($cvref));
}

sub xref_main {
    $subname = "(main)";
    load_pad(comppadlist);
    xref(main_start);
    while (@todo) {
	xref_cv(shift @todo);
    }
}

sub pp_nextstate {
    my $op = shift;
    $file = $op->file;
    $line = $op->line;
    $top = UNKNOWN;
}

sub pp_padrange {
    my $op = shift;
    my $count = $op->private & 127;
    for my $i (0..$count-1) {
	$top = $pad[$op->targ + $i];
	process($top, $op->private & OPpLVAL_INTRO ? "intro" : "used");
    }
}

sub pp_padsv {
    my $op = shift;
    $top = $pad[$op->targ];
    process($top, $op->private & OPpLVAL_INTRO ? "intro" : "used");
}

sub pp_padav { pp_padsv(@_) }
sub pp_padhv { pp_padsv(@_) }

sub deref {
    my ($op, $var, $as) = @_;
    $var->[1] = $as . $var->[1];
    process($var, $op->private & OPpOUR_INTRO ? "intro" : "used");
}

sub pp_rv2cv { deref(shift, $top, "&"); }
sub pp_rv2hv { deref(shift, $top, "%"); }
sub pp_rv2sv { deref(shift, $top, "\$"); }
sub pp_rv2av { deref(shift, $top, "\@"); }
sub pp_rv2gv { deref(shift, $top, "*"); }

sub pp_gvsv {
    my $op = shift;
    my $gv;
    if ($Config{useithreads}) {
	$top = $pad[$op->padix];
	$top = UNKNOWN unless $top;
	$top->[1] = '$';
    }
    else {
	$gv = $op->gv;
	$top = [$gv->STASH->NAME, '$', $gv->SAFENAME];
    }
    process($top, $op->private & OPpLVAL_INTRO ||
                  $op->private & OPpOUR_INTRO   ? "intro" : "used");
}

sub pp_gv {
    my $op = shift;
    my $gv;
    if ($Config{useithreads}) {
	$top = $pad[$op->padix];
	$top = UNKNOWN unless $top;
	$top->[1] = '*';
    }
    else {
	$gv = $op->gv;
	$top = [$gv->STASH->NAME, "*", $gv->SAFENAME];
    }
    process($top, $op->private & OPpLVAL_INTRO ? "intro" : "used");
}

sub pp_const {
    my $op = shift;
    my $sv = $op->sv;
    # constant could be in the pad (under useithreads)
    if ($$sv) {
	$top = ["?", "",
		(class($sv) ne "SPECIAL" && $sv->FLAGS & SVf_POK)
		? cstring($sv->PV) : "?"];
    }
    else {
	$top = $pad[$op->targ];
	$top = UNKNOWN unless $top;
    }
}

sub pp_method {
    my $op = shift;
    $top = ["(method)", "->".$top->[1], $top->[2]];
}

sub pp_entersub {
    my $op = shift;
    if ($top->[1] eq "m") {
	process($top, "meth");
    } else {
	process($top, "subused");
    }
    $top = UNKNOWN;
}

#
# Stuff for cross referencing definitions of variables and subs
#

sub B::GV::xref {
    my $gv = shift;
    my $cv = $gv->CV;
    if ($$cv) {
	#return if $done{$$cv}++;
	$file = $gv->FILE;
	$line = $gv->LINE;
	process([$gv->STASH->NAME, "&", $gv->NAME], "subdef");
	push(@todo, $cv);
    }
    my $form = $gv->FORM;
    if ($$form) {
	return if $done{$$form}++;
	$file = $gv->FILE;
	$line = $gv->LINE;
	process([$gv->STASH->NAME, "", $gv->NAME], "formdef");
    }
}

sub xref_definitions {
    my ($pack, %exclude);
    return if $nodefs;
    $subname = "(definitions)";
    foreach $pack (qw(B O AutoLoader DynaLoader XSLoader Config DB VMS
		      strict vars FileHandle Exporter Carp PerlIO::Layer
		      attributes utf8 warnings)) {
        $exclude{$pack."::"} = 1;
    }
    no strict qw(vars refs);
    walksymtable(\%{"main::"}, "xref", sub { !defined($exclude{$_[0]}) });
}

sub output {
    return if $raw;
    my ($file, $subname, $pack, $name, $ev, $perfile, $persubname,
	$perpack, $pername, $perev);
    foreach $file (sort(keys(%table))) {
	$perfile = $table{$file};
	print "File $file\n";
	foreach $subname (sort(keys(%$perfile))) {
	    $persubname = $perfile->{$subname};
	    print "  Subroutine $subname\n";
	    foreach $pack (sort(keys(%$persubname))) {
		$perpack = $persubname->{$pack};
		print "    Package $pack\n";
		foreach $name (sort(keys(%$perpack))) {
		    $pername = $perpack->{$name};
		    my @lines;
		    foreach $ev (qw(intro formdef subdef meth subused used)) {
			$perev = $pername->{$ev};
			if (defined($perev) && @$perev) {
			    my $code = $code{$ev};
			    push(@lines, map("$code$_", @$perev));
			}
		    }
		    printf "      %-16s  %s\n", $name, join(", ", @lines);
		}
	    }
	}
    }
}

sub compile {
    my @options = @_;
    my ($option, $opt, $arg);
  OPTION:
    while ($option = shift @options) {
	if ($option =~ /^-(.)(.*)/) {
	    $opt = $1;
	    $arg = $2;
	} else {
	    unshift @options, $option;
	    last OPTION;
	}
	if ($opt eq "-" && $arg eq "-") {
	    shift @options;
	    last OPTION;
	} elsif ($opt eq "o") {
	    $arg ||= shift @options;
	    open(STDOUT, ">$arg") or return "$arg: $!\n";
	} elsif ($opt eq "d") {
	    $nodefs = 1;
	} elsif ($opt eq "r") {
	    $raw = 1;
	} elsif ($opt eq "D") {
            $arg ||= shift @options;
	    foreach $arg (split(//, $arg)) {
		if ($arg eq "o") {
		    B->debug(1);
		} elsif ($arg eq "O") {
		    $debug_op = 1;
		} elsif ($arg eq "t") {
		    $debug_top = 1;
		}
	    }
	}
    }
    if (@options) {
	return sub {
	    my $objname;
	    xref_definitions();
	    foreach $objname (@options) {
		$objname = "main::$objname" unless $objname =~ /::/;
		eval "xref_object(\\&$objname)";
		die "xref_object(\\&$objname) failed: $@" if $@;
	    }
	    output();
	}
    } else {
	return sub {
	    xref_definitions();
	    xref_main();
	    output();
	}
    }
}

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*    XSUB.h
 *
 *    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
 *    2003, 2004, 2005, 2006, 2007, 2008 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifndef _INC_PERL_XSUB_H
#define _INC_PERL_XSUB_H 1

/* first, some documentation for xsubpp-generated items */

/*
=head1 C<xsubpp> variables and internal functions

=for apidoc Amn|char*|CLASS
Variable which is setup by C<xsubpp> to indicate the 
class name for a C++ XS constructor.  This is always a C<char*>.  See
C<L</THIS>>.

=for apidoc Amn|(whatever)|RETVAL
Variable which is setup by C<xsubpp> to hold the return value for an 
XSUB.  This is always the proper type for the XSUB.  See 
L<perlxs/"The RETVAL Variable">.

=for apidoc Amn|(whatever)|THIS
Variable which is setup by C<xsubpp> to designate the object in a C++ 
XSUB.  This is always the proper type for the C++ object.  See C<L</CLASS>> and
L<perlxs/"Using XS With C++">.

=for apidoc Amn|I32|ax
Variable which is setup by C<xsubpp> to indicate the stack base offset,
used by the C<ST>, C<XSprePUSH> and C<XSRETURN> macros.  The C<dMARK> macro
must be called prior to setup the C<MARK> variable.

=for apidoc Amn|I32|items
Variable which is setup by C<xsubpp> to indicate the number of 
items on the stack.  See L<perlxs/"Variable-length Parameter Lists">.

=for apidoc Amn|I32|ix
Variable which is setup by C<xsubpp> to indicate which of an 
XSUB's aliases was used to invoke it.  See L<perlxs/"The ALIAS: Keyword">.

=for apidoc Am|SV*|ST|int ix
Used to access elements on the XSUB's stack.

=for apidoc AmU||XS
Macro to declare an XSUB and its C parameter list.  This is handled by
C<xsubpp>.  It is the same as using the more explicit C<XS_EXTERNAL> macro.

=for apidoc AmU||XS_INTERNAL
Macro to declare an XSUB and its C parameter list without exporting the symbols.
This is handled by C<xsubpp> and generally preferable over exporting the XSUB
symbols unnecessarily.

=for apidoc AmU||XS_EXTERNAL
Macro to declare an XSUB and its C parameter list explicitly exporting the symbols.

=for apidoc Ams||dAX
Sets up the C<ax> variable.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.

=for apidoc Ams||dAXMARK
Sets up the C<ax> variable and stack marker variable C<mark>.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.

=for apidoc Ams||dITEMS
Sets up the C<items> variable.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.

=for apidoc Ams||dXSARGS
Sets up stack and mark pointers for an XSUB, calling C<dSP> and C<dMARK>.
Sets up the C<ax> and C<items> variables by calling C<dAX> and C<dITEMS>.
This is usually handled automatically by C<xsubpp>.

=for apidoc Ams||dXSI32
Sets up the C<ix> variable for an XSUB which has aliases.  This is usually
handled automatically by C<xsubpp>.

=for apidoc Ams||dUNDERBAR
Sets up any variable needed by the C<UNDERBAR> macro.  It used to define
C<padoff_du>, but it is currently a noop.  However, it is strongly advised
to still use it for ensuring past and future compatibility.

=for apidoc AmU||UNDERBAR
The SV* corresponding to the C<$_> variable.  Works even if there
is a lexical C<$_> in scope.

=cut
*/

#ifndef PERL_UNUSED_ARG
#  if defined(lint) && defined(S_SPLINT_S) /* www.splint.org */
#    include <note.h>
#    define PERL_UNUSED_ARG(x) NOTE(ARGUNUSED(x))
#  else
#    define PERL_UNUSED_ARG(x) ((void)x)
#  endif
#endif
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(x) ((void)x)
#endif

#define ST(off) PL_stack_base[ax + (off)]

/* XSPROTO() is also used by SWIG like this:
 *
 *     typedef XSPROTO(SwigPerlWrapper);
 *     typedef SwigPerlWrapper *SwigPerlWrapperPtr;
 *
 * This code needs to be compilable under both C and C++.
 *
 * Don't forget to change the __attribute__unused__ version of XS()
 * below too if you change XSPROTO() here.
 */

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that.
 */

#define XSPROTO(name) void name(pTHX_ CV* cv)

#undef XS
#undef XS_EXTERNAL
#undef XS_INTERNAL
#if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#  define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#  define XS_INTERNAL(name) STATIC XSPROTO(name)
#endif
#if defined(__SYMBIAN32__)
#  define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#  define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#endif
#ifndef XS_EXTERNAL
#  if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#    define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#    define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#  else
#    ifdef __cplusplus
#      define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#      define XS_INTERNAL(name) static XSPROTO(name)
#    else
#      define XS_EXTERNAL(name) XSPROTO(name)
#      define XS_INTERNAL(name) STATIC XSPROTO(name)
#    endif
#  endif
#endif

/* We do export xsub symbols by default for the public XS macro.
 * Try explicitly using XS_INTERNAL/XS_EXTERNAL instead, please. */
#define XS(name) XS_EXTERNAL(name)

#define dAX const I32 ax = (I32)(MARK - PL_stack_base + 1)

#define dAXMARK				\
	I32 ax = POPMARK;	\
	SV **mark = PL_stack_base + ax++

#define dITEMS I32 items = (I32)(SP - MARK)

#if defined(lint) && defined(S_SPLINT_S) /* www.splint.org */
#  define dXSARGS \
	NOTE(ARGUNUSED(cv)) \
	dSP; dAXMARK; dITEMS
#else
#  define dXSARGS \
	dSP; dAXMARK; dITEMS
/* These 3 macros are replacements for dXSARGS macro only in bootstrap.
   They factor out common code in every BOOT XSUB. Computation of vars mark
   and items will optimize away in most BOOT functions. Var ax can never be
   optimized away since BOOT must return &PL_sv_yes by default from xsubpp.
   Note these macros are not drop in replacements for dXSARGS since they set
   PL_xsubfilename. */
#  define dXSBOOTARGSXSAPIVERCHK  \
	I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;	\
	SV **mark = PL_stack_base + ax; dSP; dITEMS
#  define dXSBOOTARGSAPIVERCHK  \
	I32 ax = XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK;	\
	SV **mark = PL_stack_base + ax; dSP; dITEMS
/* dXSBOOTARGSNOVERCHK has no API in xsubpp to choose it so do
#undef dXSBOOTARGSXSAPIVERCHK
#define dXSBOOTARGSXSAPIVERCHK dXSBOOTARGSNOVERCHK */
#  define dXSBOOTARGSNOVERCHK  \
	I32 ax = XS_SETXSUBFN_POPMARK;  \
	SV **mark = PL_stack_base + ax; dSP; dITEMS
#endif

#define dXSTARG SV * const targ = ((PL_op->op_private & OPpENTERSUB_HASTARG) \
			     ? PAD_SV(PL_op->op_targ) : sv_newmortal())

/* Should be used before final PUSHi etc. if not in PPCODE section. */
#define XSprePUSH (sp = PL_stack_base + ax - 1)

#define XSANY CvXSUBANY(cv)

#define dXSI32 I32 ix = XSANY.any_i32

#ifdef __cplusplus
#  define XSINTERFACE_CVT(ret,name) ret (*name)(...)
#  define XSINTERFACE_CVT_ANON(ret) ret (*)(...)
#else
#  define XSINTERFACE_CVT(ret,name) ret (*name)()
#  define XSINTERFACE_CVT_ANON(ret) ret (*)()
#endif
#define dXSFUNCTION(ret)		XSINTERFACE_CVT(ret,XSFUNCTION)
#define XSINTERFACE_FUNC(ret,cv,f)     ((XSINTERFACE_CVT_ANON(ret))(f))
#define XSINTERFACE_FUNC_SET(cv,f)	\
		CvXSUBANY(cv).any_dxptr = (void (*) (pTHX_ void*))(f)

#define dUNDERBAR dNOOP
#define UNDERBAR  find_rundefsv()

/* Simple macros to put new mortal values onto the stack.   */
/* Typically used to return values from XS functions.       */

/*
=head1 Stack Manipulation Macros

=for apidoc Am|void|XST_mIV|int pos|IV iv
Place an integer into the specified position C<pos> on the stack.  The
value is stored in a new mortal SV.

=for apidoc Am|void|XST_mNV|int pos|NV nv
Place a double into the specified position C<pos> on the stack.  The value
is stored in a new mortal SV.

=for apidoc Am|void|XST_mPV|int pos|char* str
Place a copy of a string into the specified position C<pos> on the stack. 
The value is stored in a new mortal SV.

=for apidoc Am|void|XST_mNO|int pos
Place C<&PL_sv_no> into the specified position C<pos> on the
stack.

=for apidoc Am|void|XST_mYES|int pos
Place C<&PL_sv_yes> into the specified position C<pos> on the
stack.

=for apidoc Am|void|XST_mUNDEF|int pos
Place C<&PL_sv_undef> into the specified position C<pos> on the
stack.

=for apidoc Am|void|XSRETURN|int nitems
Return from XSUB, indicating number of items on the stack.  This is usually
handled by C<xsubpp>.

=for apidoc Am|void|XSRETURN_IV|IV iv
Return an integer from an XSUB immediately.  Uses C<XST_mIV>.

=for apidoc Am|void|XSRETURN_UV|IV uv
Return an integer from an XSUB immediately.  Uses C<XST_mUV>.

=for apidoc Am|void|XSRETURN_NV|NV nv
Return a double from an XSUB immediately.  Uses C<XST_mNV>.

=for apidoc Am|void|XSRETURN_PV|char* str
Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.

=for apidoc Ams||XSRETURN_NO
Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.

=for apidoc Ams||XSRETURN_YES
Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.

=for apidoc Ams||XSRETURN_UNDEF
Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.

=for apidoc Ams||XSRETURN_EMPTY
Return an empty list from an XSUB immediately.

=head1 Variables created by C<xsubpp> and C<xsubpp> internal functions

=for apidoc AmU||newXSproto|char* name|XSUBADDR_t f|char* filename|const char *proto
Used by C<xsubpp> to hook up XSUBs as Perl subs.  Adds Perl prototypes to
the subs.

=for apidoc AmU||XS_VERSION
The version identifier for an XS module.  This is usually
handled automatically by C<ExtUtils::MakeMaker>.  See
C<L</XS_VERSION_BOOTCHECK>>.

=for apidoc Ams||XS_VERSION_BOOTCHECK
Macro to verify that a PM module's C<$VERSION> variable matches the XS
module's C<XS_VERSION> variable.  This is usually handled automatically by
C<xsubpp>.  See L<perlxs/"The VERSIONCHECK: Keyword">.

=for apidoc Ams||XS_APIVERSION_BOOTCHECK
Macro to verify that the perl api version an XS module has been compiled against
matches the api version of the perl interpreter it's being loaded into.

=head1 Exception Handling (simple) Macros

=for apidoc Ams||dXCPT
Set up necessary local variables for exception handling.
See L<perlguts/"Exception Handling">.

=for apidoc AmU||XCPT_TRY_START
Starts a try block.  See L<perlguts/"Exception Handling">.

=for apidoc AmU||XCPT_TRY_END
Ends a try block.  See L<perlguts/"Exception Handling">.

=for apidoc AmU||XCPT_CATCH
Introduces a catch block.  See L<perlguts/"Exception Handling">.

=for apidoc Ams||XCPT_RETHROW
Rethrows a previously caught exception.  See L<perlguts/"Exception Handling">.

=cut
*/

#define XST_mIV(i,v)  (ST(i) = sv_2mortal(newSViv(v))  )
#define XST_mUV(i,v)  (ST(i) = sv_2mortal(newSVuv(v))  )
#define XST_mNV(i,v)  (ST(i) = sv_2mortal(newSVnv(v))  )
#define XST_mPV(i,v)  (ST(i) = sv_2mortal(newSVpv(v,0)))
#define XST_mPVN(i,v,n)  (ST(i) = newSVpvn_flags(v,n, SVs_TEMP))
#define XST_mNO(i)    (ST(i) = &PL_sv_no   )
#define XST_mYES(i)   (ST(i) = &PL_sv_yes  )
#define XST_mUNDEF(i) (ST(i) = &PL_sv_undef)

#define XSRETURN(off)					\
    STMT_START {					\
	const IV tmpXSoff = (off);			\
	assert(tmpXSoff >= 0);\
	PL_stack_sp = PL_stack_base + ax + (tmpXSoff - 1);	\
	return;						\
    } STMT_END

#define XSRETURN_IV(v) STMT_START { XST_mIV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_UV(v) STMT_START { XST_mUV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_NV(v) STMT_START { XST_mNV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_PV(v) STMT_START { XST_mPV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_PVN(v,n) STMT_START { XST_mPVN(0,v,n);  XSRETURN(1); } STMT_END
#define XSRETURN_NO    STMT_START { XST_mNO(0);    XSRETURN(1); } STMT_END
#define XSRETURN_YES   STMT_START { XST_mYES(0);   XSRETURN(1); } STMT_END
#define XSRETURN_UNDEF STMT_START { XST_mUNDEF(0); XSRETURN(1); } STMT_END
#define XSRETURN_EMPTY STMT_START {                XSRETURN(0); } STMT_END

#define newXSproto(a,b,c,d)	newXS_flags(a,b,c,d,0)

#ifdef XS_VERSION
#  define XS_VERSION_BOOTCHECK						\
    Perl_xs_handshake(HS_KEY(FALSE, FALSE, "", XS_VERSION), HS_CXT, __FILE__,	\
        items, ax, XS_VERSION)
#else
#  define XS_VERSION_BOOTCHECK
#endif

#define XS_APIVERSION_BOOTCHECK						\
    Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, ""),	\
        HS_CXT, __FILE__, items, ax, "v" PERL_API_VERSION_STRING)
/* public API, this is a combination of XS_VERSION_BOOTCHECK and
   XS_APIVERSION_BOOTCHECK in 1, and is backportable */
#ifdef XS_VERSION
#  define XS_BOTHVERSION_BOOTCHECK						\
    Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, XS_VERSION),	\
        HS_CXT, __FILE__, items, ax, "v" PERL_API_VERSION_STRING, XS_VERSION)
#else
/* should this be a #error? if you want both checked, you better supply XS_VERSION right? */
#  define XS_BOTHVERSION_BOOTCHECK XS_APIVERSION_BOOTCHECK
#endif

/* private API */
#define XS_APIVERSION_POPMARK_BOOTCHECK					\
    Perl_xs_handshake(HS_KEY(FALSE, TRUE, "v" PERL_API_VERSION_STRING, ""),	\
        HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING)
#ifdef XS_VERSION
#  define XS_BOTHVERSION_POPMARK_BOOTCHECK					\
    Perl_xs_handshake(HS_KEY(FALSE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),	\
        HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING, XS_VERSION)
#else
/* should this be a #error? if you want both checked, you better supply XS_VERSION right? */
#  define XS_BOTHVERSION_POPMARK_BOOTCHECK XS_APIVERSION_POPMARK_BOOTCHECK
#endif

#define XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK				\
    Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, ""),	\
        HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING)
#ifdef XS_VERSION
#  define XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK				  \
    Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
        HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING, XS_VERSION)
#else
/* should this be a #error? if you want both checked, you better supply XS_VERSION right? */
#  define XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK
#endif

/* For a normal bootstrap without API or XS version checking.
   Useful for static XS modules or debugging/testing scenarios.
   If this macro gets heavily used in the future, it should separated into
   a separate function independent of Perl_xs_handshake for efficiency */
#define XS_SETXSUBFN_POPMARK \
    Perl_xs_handshake(HS_KEY(TRUE, TRUE, "", "") | HSf_NOCHK, HS_CXT, __FILE__)

#ifdef NO_XSLOCKS
#  define dXCPT             dJMPENV; int rEtV = 0
#  define XCPT_TRY_START    JMPENV_PUSH(rEtV); if (rEtV == 0)
#  define XCPT_TRY_END      JMPENV_POP;
#  define XCPT_CATCH        if (rEtV != 0)
#  define XCPT_RETHROW      JMPENV_JUMP(rEtV)
#endif

/*
   The DBM_setFilter & DBM_ckFilter macros are only used by
   the *DB*_File modules
*/

#define DBM_setFilter(db_type,code)				\
	STMT_START {						\
	    if (db_type)					\
	        RETVAL = sv_mortalcopy(db_type) ;		\
	    ST(0) = RETVAL ;					\
	    if (db_type && (code == &PL_sv_undef)) {		\
	        SvREFCNT_dec_NN(db_type) ;			\
	        db_type = NULL ;				\
	    }							\
	    else if (code) {					\
	        if (db_type)					\
	            sv_setsv(db_type, code) ;			\
	        else						\
	            db_type = newSVsv(code) ;			\
	    }	    						\
	} STMT_END

#define DBM_ckFilter(arg,type,name)				\
        STMT_START {						\
	if (db->type) {						\
	    if (db->filtering) {				\
	        croak("recursion detected in %s", name) ;	\
	    }                     				\
	    ENTER ;						\
	    SAVETMPS ;						\
	    SAVEINT(db->filtering) ;				\
	    db->filtering = TRUE ;				\
	    SAVE_DEFSV ;					\
            if (name[7] == 's')                                 \
                arg = newSVsv(arg);                             \
	    DEFSV_set(arg) ;					\
	    SvTEMP_off(arg) ;					\
	    PUSHMARK(SP) ;					\
	    PUTBACK ;						\
	    (void) perl_call_sv(db->type, G_DISCARD); 		\
	    SPAGAIN ;						\
	    PUTBACK ;						\
	    FREETMPS ;						\
	    LEAVE ;						\
            if (name[7] == 's'){                                \
                arg = sv_2mortal(arg);                          \
            }                                                   \
	} } STMT_END                                                     

#if 1		/* for compatibility */
#  define VTBL_sv		&PL_vtbl_sv
#  define VTBL_env		&PL_vtbl_env
#  define VTBL_envelem		&PL_vtbl_envelem
#  define VTBL_sigelem		&PL_vtbl_sigelem
#  define VTBL_pack		&PL_vtbl_pack
#  define VTBL_packelem		&PL_vtbl_packelem
#  define VTBL_dbline		&PL_vtbl_dbline
#  define VTBL_isa		&PL_vtbl_isa
#  define VTBL_isaelem		&PL_vtbl_isaelem
#  define VTBL_arylen		&PL_vtbl_arylen
#  define VTBL_glob		&PL_vtbl_glob
#  define VTBL_mglob		&PL_vtbl_mglob
#  define VTBL_nkeys		&PL_vtbl_nkeys
#  define VTBL_taint		&PL_vtbl_taint
#  define VTBL_substr		&PL_vtbl_substr
#  define VTBL_vec		&PL_vtbl_vec
#  define VTBL_pos		&PL_vtbl_pos
#  define VTBL_bm		&PL_vtbl_bm
#  define VTBL_fm		&PL_vtbl_fm
#  define VTBL_uvar		&PL_vtbl_uvar
#  define VTBL_defelem		&PL_vtbl_defelem
#  define VTBL_regexp		&PL_vtbl_regexp
#  define VTBL_regdata		&PL_vtbl_regdata
#  define VTBL_regdatum		&PL_vtbl_regdatum
#  ifdef USE_LOCALE_COLLATE
#    define VTBL_collxfrm	&PL_vtbl_collxfrm
#  endif
#  define VTBL_amagic		&PL_vtbl_amagic
#  define VTBL_amagicelem	&PL_vtbl_amagicelem
#endif

#include "perlapi.h"

#if defined(PERL_IMPLICIT_CONTEXT) && !defined(PERL_NO_GET_CONTEXT) && !defined(PERL_CORE)
#  undef aTHX
#  undef aTHX_
#  define aTHX		PERL_GET_THX
#  define aTHX_		aTHX,
#endif

#if defined(PERL_IMPLICIT_SYS) && !defined(PERL_CORE)
#  ifndef NO_XSLOCKS
# if defined (NETWARE) && defined (USE_STDIO)
#    define times		PerlProc_times
#    define setuid		PerlProc_setuid
#    define setgid		PerlProc_setgid
#    define getpid		PerlProc_getpid
#    define pause		PerlProc_pause
#    define exit		PerlProc_exit
#    define _exit		PerlProc__exit
# else
#    undef closedir
#    undef opendir
#    undef stdin
#    undef stdout
#    undef stderr
#    undef feof
#    undef ferror
#    undef fgetpos
#    undef ioctl
#    undef getlogin
#    undef setjmp
#    undef getc
#    undef ungetc
#    undef fileno

/* Following symbols were giving redefinition errors while building extensions - sgp 17th Oct 2000 */
#ifdef NETWARE
#	undef readdir
#	undef fstat
#	undef stat
#	undef longjmp
#	undef endhostent
#	undef endnetent
#	undef endprotoent
#	undef endservent
#	undef gethostbyaddr
#	undef gethostbyname
#	undef gethostent
#	undef getnetbyaddr
#	undef getnetbyname
#	undef getnetent
#	undef getprotobyname
#	undef getprotobynumber
#	undef getprotoent
#	undef getservbyname
#	undef getservbyport
#	undef getservent
#	undef inet_ntoa
#	undef sethostent
#	undef setnetent
#	undef setprotoent
#	undef setservent
#endif	/* NETWARE */

/* to avoid warnings: "xyz" redefined */
#ifdef WIN32
#    undef  popen
#    undef  pclose
#endif /* WIN32 */

#    undef  socketpair

#    define mkdir		PerlDir_mkdir
#    define chdir		PerlDir_chdir
#    define rmdir		PerlDir_rmdir
#    define closedir		PerlDir_close
#    define opendir		PerlDir_open
#    define readdir		PerlDir_read
#    define rewinddir		PerlDir_rewind
#    define seekdir		PerlDir_seek
#    define telldir		PerlDir_tell
#    define putenv		PerlEnv_putenv
#    define getenv		PerlEnv_getenv
#    define uname		PerlEnv_uname
#    define stdin		PerlSIO_stdin
#    define stdout		PerlSIO_stdout
#    define stderr		PerlSIO_stderr
#    define fopen		PerlSIO_fopen
#    define fclose		PerlSIO_fclose
#    define feof		PerlSIO_feof
#    define ferror		PerlSIO_ferror
#    define clearerr		PerlSIO_clearerr
#    define getc		PerlSIO_getc
#    define fgets		PerlSIO_fgets
#    define fputc		PerlSIO_fputc
#    define fputs		PerlSIO_fputs
#    define fflush		PerlSIO_fflush
#    define ungetc		PerlSIO_ungetc
#    define fileno		PerlSIO_fileno
#    define fdopen		PerlSIO_fdopen
#    define freopen		PerlSIO_freopen
#    define fread		PerlSIO_fread
#    define fwrite		PerlSIO_fwrite
#    define setbuf		PerlSIO_setbuf
#    define setvbuf		PerlSIO_setvbuf
#    define setlinebuf		PerlSIO_setlinebuf
#    define stdoutf		PerlSIO_stdoutf
#    define vfprintf		PerlSIO_vprintf
#    define ftell		PerlSIO_ftell
#    define fseek		PerlSIO_fseek
#    define fgetpos		PerlSIO_fgetpos
#    define fsetpos		PerlSIO_fsetpos
#    define frewind		PerlSIO_rewind
#    define tmpfile		PerlSIO_tmpfile
#    define access		PerlLIO_access
#    define chmod		PerlLIO_chmod
#    define chsize		PerlLIO_chsize
#    define close		PerlLIO_close
#    define dup			PerlLIO_dup
#    define dup2		PerlLIO_dup2
#    define flock		PerlLIO_flock
#    define fstat		PerlLIO_fstat
#    define ioctl		PerlLIO_ioctl
#    define isatty		PerlLIO_isatty
#    define link                PerlLIO_link
#    define lseek		PerlLIO_lseek
#    define lstat		PerlLIO_lstat
#    define mktemp		PerlLIO_mktemp
#    define open		PerlLIO_open
#    define read		PerlLIO_read
#    define rename		PerlLIO_rename
#    define setmode		PerlLIO_setmode
#    define stat(buf,sb)	PerlLIO_stat(buf,sb)
#    define tmpnam		PerlLIO_tmpnam
#    define umask		PerlLIO_umask
#    define unlink		PerlLIO_unlink
#    define utime		PerlLIO_utime
#    define write		PerlLIO_write
#    define malloc		PerlMem_malloc
#    define realloc		PerlMem_realloc
#    define free		PerlMem_free
#    define abort		PerlProc_abort
#    define exit		PerlProc_exit
#    define _exit		PerlProc__exit
#    define execl		PerlProc_execl
#    define execv		PerlProc_execv
#    define execvp		PerlProc_execvp
#    define getuid		PerlProc_getuid
#    define geteuid		PerlProc_geteuid
#    define getgid		PerlProc_getgid
#    define getegid		PerlProc_getegid
#    define getlogin		PerlProc_getlogin
#    define kill		PerlProc_kill
#    define killpg		PerlProc_killpg
#    define pause		PerlProc_pause
#    define popen		PerlProc_popen
#    define pclose		PerlProc_pclose
#    define pipe		PerlProc_pipe
#    define setuid		PerlProc_setuid
#    define setgid		PerlProc_setgid
#    define sleep		PerlProc_sleep
#    define times		PerlProc_times
#    define wait		PerlProc_wait
#    define setjmp		PerlProc_setjmp
#    define longjmp		PerlProc_longjmp
#    define signal		PerlProc_signal
#    define getpid		PerlProc_getpid
#    define gettimeofday	PerlProc_gettimeofday
#    define htonl		PerlSock_htonl
#    define htons		PerlSock_htons
#    define ntohl		PerlSock_ntohl
#    define ntohs		PerlSock_ntohs
#    define accept		PerlSock_accept
#    define bind		PerlSock_bind
#    define connect		PerlSock_connect
#    define endhostent		PerlSock_endhostent
#    define endnetent		PerlSock_endnetent
#    define endprotoent		PerlSock_endprotoent
#    define endservent		PerlSock_endservent
#    define gethostbyaddr	PerlSock_gethostbyaddr
#    define gethostbyname	PerlSock_gethostbyname
#    define gethostent		PerlSock_gethostent
#    define gethostname		PerlSock_gethostname
#    define getnetbyaddr	PerlSock_getnetbyaddr
#    define getnetbyname	PerlSock_getnetbyname
#    define getnetent		PerlSock_getnetent
#    define getpeername		PerlSock_getpeername
#    define getprotobyname	PerlSock_getprotobyname
#    define getprotobynumber	PerlSock_getprotobynumber
#    define getprotoent		PerlSock_getprotoent
#    define getservbyname	PerlSock_getservbyname
#    define getservbyport	PerlSock_getservbyport
#    define getservent		PerlSock_getservent
#    define getsockname		PerlSock_getsockname
#    define getsockopt		PerlSock_getsockopt
#    define inet_addr		PerlSock_inet_addr
#    define inet_ntoa		PerlSock_inet_ntoa
#    define listen		PerlSock_listen
#    define recv		PerlSock_recv
#    define recvfrom		PerlSock_recvfrom
#    define select		PerlSock_select
#    define send		PerlSock_send
#    define sendto		PerlSock_sendto
#    define sethostent		PerlSock_sethostent
#    define setnetent		PerlSock_setnetent
#    define setprotoent		PerlSock_setprotoent
#    define setservent		PerlSock_setservent
#    define setsockopt		PerlSock_setsockopt
#    define shutdown		PerlSock_shutdown
#    define socket		PerlSock_socket
#    define socketpair		PerlSock_socketpair
#	endif	/* NETWARE && USE_STDIO */

#    undef fd_set
#    undef FD_SET
#    undef FD_CLR
#    undef FD_ISSET
#    undef FD_ZERO
#    define fd_set		Perl_fd_set
#    define FD_SET(n,p)		PERL_FD_SET(n,p)
#    define FD_CLR(n,p)		PERL_FD_CLR(n,p)
#    define FD_ISSET(n,p)	PERL_FD_ISSET(n,p)
#    define FD_ZERO(p)		PERL_FD_ZERO(p)

#  endif  /* NO_XSLOCKS */
#endif  /* PERL_IMPLICIT_SYS && !PERL_CORE */

#endif /* _INC_PERL_XSUB_H */		/* include guard */

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /*    av.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1995, 1996, 1997, 1998, 1999, 2000,
 *    2001, 2002, 2005, 2006, 2007, 2008, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

struct xpvav {
    HV*		xmg_stash;	/* class package */
    union _xmgu	xmg_u;
    SSize_t	xav_fill;       /* Index of last element present */
    SSize_t	xav_max;        /* max index for which array has space */
    SV**	xav_alloc;	/* pointer to beginning of C array of SVs */
};

/* SV*	xav_arylen; */

/* SVpav_REAL is set for all AVs whose xav_array contents are refcounted.
 * Some things like "@_" and the scratchpad list do not set this, to
 * indicate that they are cheating (for efficiency) by not refcounting
 * the AV's contents.
 * 
 * SVpav_REIFY is only meaningful on such "fake" AVs (i.e. where SVpav_REAL
 * is not set).  It indicates that the fake AV is capable of becoming
 * real if the array needs to be modified in some way.  Functions that
 * modify fake AVs check both flags to call av_reify() as appropriate.
 *
 * Note that the Perl stack has neither flag set. (Thus,
 * items that go on the stack are never refcounted.)
 *
 * These internal details are subject to change any time.  AV
 * manipulations external to perl should not care about any of this.
 * GSAR 1999-09-10
 */

/*
=head1 Handy Values

=for apidoc AmU||Nullav
Null AV pointer.

(deprecated - use C<(AV *)NULL> instead)

=head1 Array Manipulation Functions

=for apidoc Am|int|AvFILL|AV* av
Same as C<av_top_index()>.  Deprecated, use C<av_top_index()> instead.

=for apidoc Am|int|av_tindex|AV* av
Same as C<av_top_index()>.

=cut
*/

#ifndef PERL_CORE
#  define Nullav Null(AV*)
#endif

#define AvARRAY(av)	((av)->sv_u.svu_array)
#define AvALLOC(av)	((XPVAV*)  SvANY(av))->xav_alloc
#define AvMAX(av)	((XPVAV*)  SvANY(av))->xav_max
#define AvFILLp(av)	((XPVAV*)  SvANY(av))->xav_fill
#define AvARYLEN(av)	(*Perl_av_arylen_p(aTHX_ MUTABLE_AV(av)))

#define AvREAL(av)	(SvFLAGS(av) & SVpav_REAL)
#define AvREAL_on(av)	(SvFLAGS(av) |= SVpav_REAL)
#define AvREAL_off(av)	(SvFLAGS(av) &= ~SVpav_REAL)
#define AvREAL_only(av)	(AvREIFY_off(av), SvFLAGS(av) |= SVpav_REAL)
#define AvREIFY(av)	(SvFLAGS(av) & SVpav_REIFY)
#define AvREIFY_on(av)	(SvFLAGS(av) |= SVpav_REIFY)
#define AvREIFY_off(av)	(SvFLAGS(av) &= ~SVpav_REIFY)
#define AvREIFY_only(av)	(AvREAL_off(av), SvFLAGS(av) |= SVpav_REIFY)


#define AvREALISH(av)	(SvFLAGS(av) & (SVpav_REAL|SVpav_REIFY))
                                          
#define AvFILL(av)	((SvRMAGICAL((const SV *) (av))) \
			 ? mg_size(MUTABLE_SV(av)) : AvFILLp(av))
#define av_tindex(av)   av_top_index(av)

#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C)
/* Note that it doesn't make sense to do this:
 *      SvGETMAGIC(av); IV x = av_tindex_nomg(av);
 * This name is controversial, and so is restricted by the #ifdef to the places
 * it already occurs
 */
#   define av_tindex_nomg(av)  (__ASSERT_(SvTYPE(av) == SVt_PVAV) AvFILLp(av))
#endif

#define NEGATIVE_INDICES_VAR "NEGATIVE_INDICES"

/*
=for apidoc newAV

Creates a new AV.  The reference count is set to 1.

Perl equivalent: C<my @array;>.

=cut
*/

#define newAV()	MUTABLE_AV(newSV_type(SVt_PVAV))

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              /* -*- buffer-read-only: t -*-
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/mk_invlists.pl from Unicode::UCD.
 * Any changes made here will be lost!
 */

/* See the generating file for comments */


#if defined(PERL_IN_REGCOMP_C)

static const UV Latin1_invlist[] = {
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100
};

static const UV AboveLatin1_invlist[] = {
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if 'A' == 65 /* ASCII/Latin1 */

#if defined(PERL_IN_PERL_C)

static const UV ASCII_invlist[] = { /* for ASCII/Latin1 */
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80
};

static const UV Cased_invlist[] = { /* for ASCII/Latin1 */
	263,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGCOMP_C)

static const UV NonL1_Perl_Non_Final_Folds_invlist[] = { /* for ASCII/Latin1 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2BC,
	0x2BD,
	0x308,
	0x309,
	0x313,
	0x314,
	0x342,
	0x343,
	0x3AC,
	0x3AD,
	0x3AE,
	0x3AF,
	0x3B1,
	0x3B2,
	0x3B7,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3C1,
	0x3C2,
	0x3C5,
	0x3C6,
	0x3C9,
	0x3CA,
	0x3CE,
	0x3CF,
	0x565,
	0x566,
	0x574,
	0x575,
	0x57E,
	0x57F,
	0x1F00,
	0x1F08,
	0x1F20,
	0x1F28,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F74,
	0x1F75,
	0x1F7C,
	0x1F7D
};

static const UV _Perl_Any_Folds_invlist[] = { /* for ASCII/Latin1 */
	247,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x131,
	0x132,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26A,
	0x26B,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x2BC,
	0x2BD,
	0x2BE,
	0x2BF,
	0x300,
	0x302,
	0x307,
	0x309,
	0x30A,
	0x30B,
	0x30C,
	0x30D,
	0x313,
	0x314,
	0x331,
	0x332,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0
};

static const UV _Perl_Folds_To_Multi_Char_invlist[] = { /* for ASCII/Latin1 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDF,
	0xE0,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x1F0,
	0x1F1,
	0x390,
	0x391,
	0x3B0,
	0x3B1,
	0x587,
	0x588,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE2,
	0x1FE5,
	0x1FE6,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_GCB_invlist[] = { /* for ASCII/Latin1 */
	1502,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8E3,
	0x903,
	0x904,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xB01,
	0xB02,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC3E,
	0xC41,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC6,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD01,
	0xD02,
	0xD04,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1056,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B05,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA983,
	0xA984,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0xABEE,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E8D0,
	0x1E8D7,
	0x1F1E6,
	0x1F200,
	0xE0000,
	0xE0100,
	0xE01F0,
	0xE1000
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define GCB_ENUM_COUNT 14

typedef enum {
	GCB_Other = 0,
	GCB_CR = 1,
	GCB_Control = 2,
	GCB_Extend = 3,
	GCB_L = 4,
	GCB_LF = 5,
	GCB_LV = 6,
	GCB_LVT = 7,
	GCB_Prepend = 8,
	GCB_Regional_Indicator = 9,
	GCB_SpacingMark = 10,
	GCB_T = 11,
	GCB_V = 12,
	GCB_EDGE = 13
} GCB_enum;

static const GCB_enum _Perl_GCB_invmap[] = { /* for ASCII/Latin1 */
	GCB_Control,
	GCB_LF,
	GCB_Control,
	GCB_CR,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_L,
	GCB_V,
	GCB_T,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_L,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_Other,
	GCB_V,
	GCB_Other,
	GCB_T,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Regional_Indicator,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

static const UV _Perl_IDCont_invlist[] = { /* for ASCII/Latin1 */
	1317,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

static const UV _Perl_IDStart_invlist[] = { /* for ASCII/Latin1 */
	1129,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_LB_invlist[] = { /* for ASCII/Latin1 */
	2156,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x24,
	0x25,
	0x26,
	0x27,
	0x28,
	0x29,
	0x2A,
	0x2B,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x30,
	0x3A,
	0x3C,
	0x3F,
	0x40,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0x7F,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xA2,
	0xA3,
	0xA6,
	0xAB,
	0xAC,
	0xAD,
	0xAE,
	0xB0,
	0xB1,
	0xB2,
	0xB4,
	0xB5,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x37E,
	0x37F,
	0x483,
	0x48A,
	0x589,
	0x58A,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x609,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7F9,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xBF9,
	0xBFA,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xD01,
	0xD04,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD79,
	0xD7A,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0xFD9,
	0xFDB,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169C,
	0x169D,
	0x16EB,
	0x16EE,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1737,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17D6,
	0x17D7,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1806,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x200C,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2015,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2024,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2038,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2044,
	0x2045,
	0x2046,
	0x2047,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2061,
	0x2066,
	0x2070,
	0x207D,
	0x207E,
	0x207F,
	0x208D,
	0x208E,
	0x208F,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0x22EF,
	0x22F0,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x231A,
	0x231C,
	0x2329,
	0x232A,
	0x232B,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270E,
	0x275B,
	0x2761,
	0x2762,
	0x2764,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C5,
	0x27C6,
	0x27C7,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FC,
	0x29FD,
	0x29FE,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2CFA,
	0x2CFD,
	0x2CFE,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301D,
	0x301E,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x3099,
	0x309B,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA620,
	0xA62A,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F8,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA838,
	0xA839,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFB00,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFD3E,
	0xFD3F,
	0xFD40,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE17,
	0xFE18,
	0xFE19,
	0xFE1A,
	0xFE20,
	0xFE30,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE47,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6B,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF04,
	0xFF05,
	0xFF06,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE0,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7,
	0xFFF9,
	0xFFFC,
	0xFFFD,
	0x10100,
	0x10103,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x104A0,
	0x104AA,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A50,
	0x10A58,
	0x10AE5,
	0x10AE7,
	0x10AF0,
	0x10AF6,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110C2,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x114B0,
	0x114C4,
	0x114D0,
	0x114DA,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x11643,
	0x11650,
	0x1165A,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118E0,
	0x118EA,
	0x12470,
	0x12475,
	0x13258,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x13379,
	0x1337A,
	0x1337C,
	0x145CE,
	0x145CF,
	0x145D0,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B30,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1B000,
	0x1B002,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E8D0,
	0x1E8D7,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F1E6,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3FB,
	0x1F400,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F650,
	0x1F676,
	0x1F679,
	0x1F67C,
	0x1F680,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define LB_ENUM_COUNT 36

typedef enum {
	LB_Alphabetic = 0,
	LB_Break_After = 1,
	LB_Break_Before = 2,
	LB_Break_Both = 3,
	LB_Break_Symbols = 4,
	LB_Carriage_Return = 5,
	LB_Close_Parenthesis = 6,
	LB_Close_Punctuation = 7,
	LB_Combining_Mark = 8,
	LB_Contingent_Break = 9,
	LB_Exclamation = 10,
	LB_Glue = 11,
	LB_H2 = 12,
	LB_H3 = 13,
	LB_Hebrew_Letter = 14,
	LB_Hyphen = 15,
	LB_Ideographic = 16,
	LB_Infix_Numeric = 17,
	LB_Inseparable = 18,
	LB_JL = 19,
	LB_JT = 20,
	LB_JV = 21,
	LB_Line_Feed = 22,
	LB_Mandatory_Break = 23,
	LB_Next_Line = 24,
	LB_Nonstarter = 25,
	LB_Numeric = 26,
	LB_Open_Punctuation = 27,
	LB_Postfix_Numeric = 28,
	LB_Prefix_Numeric = 29,
	LB_Quotation = 30,
	LB_Regional_Indicator = 31,
	LB_Space = 32,
	LB_Word_Joiner = 33,
	LB_ZWSpace = 34,
	LB_EDGE = 35
} LB_enum;

static const LB_enum _Perl_LB_invmap[] = { /* for ASCII/Latin1 */
	LB_Combining_Mark,
	LB_Break_After,
	LB_Line_Feed,
	LB_Mandatory_Break,
	LB_Carriage_Return,
	LB_Combining_Mark,
	LB_Space,
	LB_Exclamation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Parenthesis,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Infix_Numeric,
	LB_Hyphen,
	LB_Infix_Numeric,
	LB_Break_Symbols,
	LB_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Prefix_Numeric,
	LB_Close_Parenthesis,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Next_Line,
	LB_Combining_Mark,
	LB_Glue,
	LB_Open_Punctuation,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Postfix_Numeric,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Glue,
	LB_Break_Before,
	LB_Break_After,
	LB_Glue,
	LB_Exclamation,
	LB_Glue,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Glue,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_JV,
	LB_JT,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_ZWSpace,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_Break_Both,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Break_After,
	LB_Mandatory_Break,
	LB_Combining_Mark,
	LB_Glue,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Quotation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Both,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_Alphabetic,
	LB_JV,
	LB_Alphabetic,
	LB_JT,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Combining_Mark,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Infix_Numeric,
	LB_Close_Punctuation,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Contingent_Break,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Regional_Indicator,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Quotation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_SB_invlist[] = { /* for ASCII/Latin1 */
	2896,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x27,
	0x2A,
	0x2C,
	0x2E,
	0x2F,
	0x30,
	0x3A,
	0x3B,
	0x3F,
	0x40,
	0x41,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x61,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xAA,
	0xAB,
	0xAC,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xBC,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BC,
	0x1BD,
	0x1C0,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x483,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x703,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1803,
	0x1804,
	0x1808,
	0x1809,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A20,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FDC,
	0x1FE0,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x2047,
	0x204A,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x207F,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2170,
	0x2180,
	0x2183,
	0x2184,
	0x2185,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24D0,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF2,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3001,
	0x3002,
	0x3003,
	0x3005,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA500,
	0xA60D,
	0xA60E,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA789,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AE,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA92F,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x10428,
	0x10450,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118C0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B39,
	0x16B40,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define SB_ENUM_COUNT 16

typedef enum {
	SB_Other = 0,
	SB_ATerm = 1,
	SB_CR = 2,
	SB_Close = 3,
	SB_Extend = 4,
	SB_Format = 5,
	SB_LF = 6,
	SB_Lower = 7,
	SB_Numeric = 8,
	SB_OLetter = 9,
	SB_SContinue = 10,
	SB_STerm = 11,
	SB_Sep = 12,
	SB_Sp = 13,
	SB_Upper = 14,
	SB_EDGE = 15
} SB_enum;

static const SB_enum _Perl_SB_invmap[] = { /* for ASCII/Latin1 */
	SB_Other,
	SB_Sp,
	SB_LF,
	SB_Sp,
	SB_CR,
	SB_Other,
	SB_Sp,
	SB_STerm,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_Numeric,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sep,
	SB_Other,
	SB_Sp,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Format,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Sp,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Sep,
	SB_Format,
	SB_Sp,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sp,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_SContinue,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_SContinue,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Close,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_WB_invlist[] = { /* for ASCII/Latin1 */
	1535,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x27,
	0x28,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x30,
	0x3A,
	0x3B,
	0x3C,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2D7,
	0x2D8,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3000,
	0x3001,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE14,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define WB_ENUM_COUNT 20

typedef enum {
	WB_Other = 0,
	WB_ALetter = 1,
	WB_CR = 2,
	WB_Double_Quote = 3,
	WB_Extend = 4,
	WB_ExtendNumLet = 5,
	WB_Format = 6,
	WB_Hebrew_Letter = 7,
	WB_Katakana = 8,
	WB_LF = 9,
	WB_MidLetter = 10,
	WB_MidNum = 11,
	WB_MidNumLet = 12,
	WB_Newline = 13,
	WB_Numeric = 14,
	WB_Perl_Tailored_HSpace = 15,
	WB_Regional_Indicator = 16,
	WB_Single_Quote = 17,
	WB_EDGE = 18,
	WB_UNKNOWN = 19
} WB_enum;

static const WB_enum _Perl_WB_invmap[] = { /* for ASCII/Latin1 */
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_LF,
	WB_Newline,
	WB_CR,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Double_Quote,
	WB_Other,
	WB_Single_Quote,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_Numeric,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Newline,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidNum,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidLetter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_MidLetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_Newline,
	WB_Format,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Extend,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_MidNum,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Regional_Indicator,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_REGCOMP_C)

static const UV UpperLatin1_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80,
	0x100
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if defined(PERL_IN_PERL_C)

static const UV VertSpace_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xE,
	0x85,
	0x86,
	0x2028,
	0x202A
};

static const UV XPerlSpace_invlist[] = { /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x21,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixAlnum_invlist[] = { /* for ASCII/Latin1 */
	1297,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF20,
	0xF2A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x104A,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8D0,
	0xA8DA,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11066,
	0x11070,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11133,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B6,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

static const UV XPosixAlpha_invlist[] = { /* for ASCII/Latin1 */
	1235,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x660,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1040,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x11100,
	0x11133,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11680,
	0x116B6,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

static const UV XPosixBlank_invlist[] = { /* for ASCII/Latin1 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0x20,
	0x21,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixCntrl_invlist[] = { /* for ASCII/Latin1 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0
};

static const UV XPosixDigit_invlist[] = { /* for ASCII/Latin1 */
	103,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800
};

static const UV XPosixGraph_invlist[] = { /* for ASCII/Latin1 */
	1237,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x7F,
	0xA1,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x1681,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV XPosixLower_invlist[] = { /* for ASCII/Latin1 */
	1275,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC
};

static const UV XPosixPrint_invlist[] = { /* for ASCII/Latin1 */
	1231,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2028,
	0x202A,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV XPosixPunct_invlist[] = { /* for ASCII/Latin1 */
	313,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0x7F,
	0xA1,
	0xA2,
	0xA7,
	0xA8,
	0xAB,
	0xAC,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E43,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x1173C,
	0x1173F,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C
};

static const UV XPosixSpace_invlist[] = { /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x21,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixUpper_invlist[] = { /* for ASCII/Latin1 */
	1261,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AE,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

static const UV XPosixWord_invlist[] = { /* for ASCII/Latin1 */
	1311,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x200E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

static const UV XPosixXDigit_invlist[] = { /* for ASCII/Latin1 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x47,
	0x61,
	0x67,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF27,
	0xFF41,
	0xFF47
};

#endif	/* defined(PERL_IN_PERL_C) */

#endif	/* ASCII/Latin1 */

#if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#if defined(PERL_IN_PERL_C)

static const UV ASCII_invlist[] = { /* for EBCDIC 1047 */
	54,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

static const UV Cased_invlist[] = { /* for EBCDIC 1047 */
	289,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGCOMP_C)

static const UV NonL1_Perl_Non_Final_Folds_invlist[] = { /* for EBCDIC 1047 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2BC,
	0x2BD,
	0x308,
	0x309,
	0x313,
	0x314,
	0x342,
	0x343,
	0x3AC,
	0x3AD,
	0x3AE,
	0x3AF,
	0x3B1,
	0x3B2,
	0x3B7,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3C1,
	0x3C2,
	0x3C5,
	0x3C6,
	0x3C9,
	0x3CA,
	0x3CE,
	0x3CF,
	0x565,
	0x566,
	0x574,
	0x575,
	0x57E,
	0x57F,
	0x1F00,
	0x1F08,
	0x1F20,
	0x1F28,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F74,
	0x1F75,
	0x1F7C,
	0x1F7D
};

static const UV _Perl_Any_Folds_invlist[] = { /* for EBCDIC 1047 */
	279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x131,
	0x132,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26A,
	0x26B,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x2BC,
	0x2BD,
	0x2BE,
	0x2BF,
	0x300,
	0x302,
	0x307,
	0x309,
	0x30A,
	0x30B,
	0x30C,
	0x30D,
	0x313,
	0x314,
	0x331,
	0x332,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0
};

static const UV _Perl_Folds_To_Multi_Char_invlist[] = { /* for EBCDIC 1047 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x1F0,
	0x1F1,
	0x390,
	0x391,
	0x3B0,
	0x3B1,
	0x587,
	0x588,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE2,
	0x1FE5,
	0x1FE6,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_GCB_invlist[] = { /* for EBCDIC 1047 */
	1502,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x15,
	0x16,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8E3,
	0x903,
	0x904,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xB01,
	0xB02,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC3E,
	0xC41,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC6,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD01,
	0xD02,
	0xD04,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1056,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B05,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA983,
	0xA984,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0xABEE,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E8D0,
	0x1E8D7,
	0x1F1E6,
	0x1F200,
	0xE0000,
	0xE0100,
	0xE01F0,
	0xE1000
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define GCB_ENUM_COUNT 14

typedef enum {
	GCB_Other = 0,
	GCB_CR = 1,
	GCB_Control = 2,
	GCB_Extend = 3,
	GCB_L = 4,
	GCB_LF = 5,
	GCB_LV = 6,
	GCB_LVT = 7,
	GCB_Prepend = 8,
	GCB_Regional_Indicator = 9,
	GCB_SpacingMark = 10,
	GCB_T = 11,
	GCB_V = 12,
	GCB_EDGE = 13
} GCB_enum;

static const GCB_enum _Perl_GCB_invmap[] = { /* for EBCDIC 1047 */
	GCB_Control,
	GCB_CR,
	GCB_Control,
	GCB_LF,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_L,
	GCB_V,
	GCB_T,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_L,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_Other,
	GCB_V,
	GCB_Other,
	GCB_T,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Regional_Indicator,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

static const UV _Perl_IDCont_invlist[] = { /* for EBCDIC 1047 */
	1341,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

static const UV _Perl_IDStart_invlist[] = { /* for EBCDIC 1047 */
	1155,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_LB_invlist[] = { /* for EBCDIC 1047 */
	2168,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x41,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x4F,
	0x50,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0x62,
	0x6B,
	0x6C,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x90,
	0x91,
	0x9F,
	0xA0,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB1,
	0xB3,
	0xBD,
	0xBE,
	0xBF,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x37E,
	0x37F,
	0x483,
	0x48A,
	0x589,
	0x58A,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x609,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7F9,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xBF9,
	0xBFA,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xD01,
	0xD04,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD79,
	0xD7A,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0xFD9,
	0xFDB,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169C,
	0x169D,
	0x16EB,
	0x16EE,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1737,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17D6,
	0x17D7,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1806,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x200C,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2015,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2024,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2038,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2044,
	0x2045,
	0x2046,
	0x2047,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2061,
	0x2066,
	0x2070,
	0x207D,
	0x207E,
	0x207F,
	0x208D,
	0x208E,
	0x208F,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0x22EF,
	0x22F0,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x231A,
	0x231C,
	0x2329,
	0x232A,
	0x232B,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270E,
	0x275B,
	0x2761,
	0x2762,
	0x2764,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C5,
	0x27C6,
	0x27C7,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FC,
	0x29FD,
	0x29FE,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2CFA,
	0x2CFD,
	0x2CFE,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301D,
	0x301E,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x3099,
	0x309B,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA620,
	0xA62A,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F8,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA838,
	0xA839,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFB00,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFD3E,
	0xFD3F,
	0xFD40,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE17,
	0xFE18,
	0xFE19,
	0xFE1A,
	0xFE20,
	0xFE30,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE47,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6B,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF04,
	0xFF05,
	0xFF06,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE0,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7,
	0xFFF9,
	0xFFFC,
	0xFFFD,
	0x10100,
	0x10103,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x104A0,
	0x104AA,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A50,
	0x10A58,
	0x10AE5,
	0x10AE7,
	0x10AF0,
	0x10AF6,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110C2,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x114B0,
	0x114C4,
	0x114D0,
	0x114DA,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x11643,
	0x11650,
	0x1165A,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118E0,
	0x118EA,
	0x12470,
	0x12475,
	0x13258,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x13379,
	0x1337A,
	0x1337C,
	0x145CE,
	0x145CF,
	0x145D0,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B30,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1B000,
	0x1B002,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E8D0,
	0x1E8D7,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F1E6,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3FB,
	0x1F400,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F650,
	0x1F676,
	0x1F679,
	0x1F67C,
	0x1F680,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define LB_ENUM_COUNT 36

typedef enum {
	LB_Alphabetic = 0,
	LB_Break_After = 1,
	LB_Break_Before = 2,
	LB_Break_Both = 3,
	LB_Break_Symbols = 4,
	LB_Carriage_Return = 5,
	LB_Close_Parenthesis = 6,
	LB_Close_Punctuation = 7,
	LB_Combining_Mark = 8,
	LB_Contingent_Break = 9,
	LB_Exclamation = 10,
	LB_Glue = 11,
	LB_H2 = 12,
	LB_H3 = 13,
	LB_Hebrew_Letter = 14,
	LB_Hyphen = 15,
	LB_Ideographic = 16,
	LB_Infix_Numeric = 17,
	LB_Inseparable = 18,
	LB_JL = 19,
	LB_JT = 20,
	LB_JV = 21,
	LB_Line_Feed = 22,
	LB_Mandatory_Break = 23,
	LB_Next_Line = 24,
	LB_Nonstarter = 25,
	LB_Numeric = 26,
	LB_Open_Punctuation = 27,
	LB_Postfix_Numeric = 28,
	LB_Prefix_Numeric = 29,
	LB_Quotation = 30,
	LB_Regional_Indicator = 31,
	LB_Space = 32,
	LB_Word_Joiner = 33,
	LB_ZWSpace = 34,
	LB_EDGE = 35
} LB_enum;

static const LB_enum _Perl_LB_invmap[] = { /* for EBCDIC 1047 */
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Mandatory_Break,
	LB_Carriage_Return,
	LB_Combining_Mark,
	LB_Line_Feed,
	LB_Combining_Mark,
	LB_Next_Line,
	LB_Combining_Mark,
	LB_Space,
	LB_Glue,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Prefix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Close_Parenthesis,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Hyphen,
	LB_Break_Symbols,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Close_Parenthesis,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Postfix_Numeric,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Glue,
	LB_Break_Before,
	LB_Break_After,
	LB_Glue,
	LB_Exclamation,
	LB_Glue,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Glue,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_JV,
	LB_JT,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_ZWSpace,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_Break_Both,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Break_After,
	LB_Mandatory_Break,
	LB_Combining_Mark,
	LB_Glue,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Quotation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Both,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_Alphabetic,
	LB_JV,
	LB_Alphabetic,
	LB_JT,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Combining_Mark,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Infix_Numeric,
	LB_Close_Punctuation,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Contingent_Break,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Regional_Indicator,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Quotation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_SB_invlist[] = { /* for EBCDIC 1047 */
	2920,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x51,
	0x5A,
	0x5B,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x71,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BC,
	0x1BD,
	0x1C0,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x483,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x703,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1803,
	0x1804,
	0x1808,
	0x1809,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A20,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FDC,
	0x1FE0,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x2047,
	0x204A,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x207F,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2170,
	0x2180,
	0x2183,
	0x2184,
	0x2185,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24D0,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF2,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3001,
	0x3002,
	0x3003,
	0x3005,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA500,
	0xA60D,
	0xA60E,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA789,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AE,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA92F,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x10428,
	0x10450,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118C0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B39,
	0x16B40,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define SB_ENUM_COUNT 16

typedef enum {
	SB_Other = 0,
	SB_ATerm = 1,
	SB_CR = 2,
	SB_Close = 3,
	SB_Extend = 4,
	SB_Format = 5,
	SB_LF = 6,
	SB_Lower = 7,
	SB_Numeric = 8,
	SB_OLetter = 9,
	SB_SContinue = 10,
	SB_STerm = 11,
	SB_Sep = 12,
	SB_Sp = 13,
	SB_Upper = 14,
	SB_EDGE = 15
} SB_enum;

static const SB_enum _Perl_SB_invmap[] = { /* for EBCDIC 1047 */
	SB_Other,
	SB_Sp,
	SB_Other,
	SB_Sp,
	SB_CR,
	SB_Other,
	SB_LF,
	SB_Other,
	SB_Sep,
	SB_Other,
	SB_Sp,
	SB_Lower,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Lower,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Format,
	SB_Lower,
	SB_Close,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper