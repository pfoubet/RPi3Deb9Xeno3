,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Format,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Sp,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Sep,
	SB_Format,
	SB_Sp,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sp,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_SContinue,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_SContinue,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Close,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_WB_invlist[] = { /* for EBCDIC 1047 */
	1558,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x51,
	0x5A,
	0x5E,
	0x5F,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2D7,
	0x2D8,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3000,
	0x3001,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE14,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define WB_ENUM_COUNT 20

typedef enum {
	WB_Other = 0,
	WB_ALetter = 1,
	WB_CR = 2,
	WB_Double_Quote = 3,
	WB_Extend = 4,
	WB_ExtendNumLet = 5,
	WB_Format = 6,
	WB_Hebrew_Letter = 7,
	WB_Katakana = 8,
	WB_LF = 9,
	WB_MidLetter = 10,
	WB_MidNum = 11,
	WB_MidNumLet = 12,
	WB_Newline = 13,
	WB_Numeric = 14,
	WB_Perl_Tailored_HSpace = 15,
	WB_Regional_Indicator = 16,
	WB_Single_Quote = 17,
	WB_EDGE = 18,
	WB_UNKNOWN = 19
} WB_enum;

static const WB_enum _Perl_WB_invmap[] = { /* for EBCDIC 1047 */
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Newline,
	WB_CR,
	WB_Other,
	WB_LF,
	WB_Other,
	WB_Newline,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_Single_Quote,
	WB_Other,
	WB_Double_Quote,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Format,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidNum,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidLetter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_MidLetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_Newline,
	WB_Format,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Extend,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_MidNum,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Regional_Indicator,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_REGCOMP_C)

static const UV UpperLatin1_invlist[] = { /* for EBCDIC 1047 */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if defined(PERL_IN_PERL_C)

static const UV VertSpace_invlist[] = { /* for EBCDIC 1047 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x2028,
	0x202A
};

static const UV XPerlSpace_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixAlnum_invlist[] = { /* for EBCDIC 1047 */
	1321,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF20,
	0xF2A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x104A,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8D0,
	0xA8DA,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11066,
	0x11070,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11133,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B6,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

static const UV XPosixAlpha_invlist[] = { /* for EBCDIC 1047 */
	1261,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x660,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1040,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x11100,
	0x11133,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11680,
	0x116B6,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

static const UV XPosixBlank_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixCntrl_invlist[] = { /* for EBCDIC 1047 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100
};

static const UV XPosixDigit_invlist[] = { /* for EBCDIC 1047 */
	103,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800
};

static const UV XPosixGraph_invlist[] = { /* for EBCDIC 1047 */
	1237,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x1681,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV XPosixLower_invlist[] = { /* for EBCDIC 1047 */
	1283,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC
};

static const UV XPosixPrint_invlist[] = { /* for EBCDIC 1047 */
	1231,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2028,
	0x202A,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV XPosixPunct_invlist[] = { /* for EBCDIC 1047 */
	321,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E43,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x1173C,
	0x1173F,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C
};

static const UV XPosixSpace_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixUpper_invlist[] = { /* for EBCDIC 1047 */
	1279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AE,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

static const UV XPosixWord_invlist[] = { /* for EBCDIC 1047 */
	1335,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x200E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

static const UV XPosixXDigit_invlist[] = { /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x87,
	0xC1,
	0xC7,
	0xF0,
	0xFA,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF27,
	0xFF41,
	0xFF47
};

#endif	/* defined(PERL_IN_PERL_C) */

#endif	/* EBCDIC 1047 */

#if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#if defined(PERL_IN_PERL_C)

static const UV ASCII_invlist[] = { /* for EBCDIC 037 */
	56,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

static const UV Cased_invlist[] = { /* for EBCDIC 037 */
	285,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGCOMP_C)

static const UV NonL1_Perl_Non_Final_Folds_invlist[] = { /* for EBCDIC 037 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2BC,
	0x2BD,
	0x308,
	0x309,
	0x313,
	0x314,
	0x342,
	0x343,
	0x3AC,
	0x3AD,
	0x3AE,
	0x3AF,
	0x3B1,
	0x3B2,
	0x3B7,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3C1,
	0x3C2,
	0x3C5,
	0x3C6,
	0x3C9,
	0x3CA,
	0x3CE,
	0x3CF,
	0x565,
	0x566,
	0x574,
	0x575,
	0x57E,
	0x57F,
	0x1F00,
	0x1F08,
	0x1F20,
	0x1F28,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F74,
	0x1F75,
	0x1F7C,
	0x1F7D
};

static const UV _Perl_Any_Folds_invlist[] = { /* for EBCDIC 037 */
	275,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x131,
	0x132,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26A,
	0x26B,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x2BC,
	0x2BD,
	0x2BE,
	0x2BF,
	0x300,
	0x302,
	0x307,
	0x309,
	0x30A,
	0x30B,
	0x30C,
	0x30D,
	0x313,
	0x314,
	0x331,
	0x332,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0
};

static const UV _Perl_Folds_To_Multi_Char_invlist[] = { /* for EBCDIC 037 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x1F0,
	0x1F1,
	0x390,
	0x391,
	0x3B0,
	0x3B1,
	0x587,
	0x588,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE2,
	0x1FE5,
	0x1FE6,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_GCB_invlist[] = { /* for EBCDIC 037 */
	1502,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x25,
	0x26,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8E3,
	0x903,
	0x904,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xB01,
	0xB02,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC3E,
	0xC41,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC6,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD01,
	0xD02,
	0xD04,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1056,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B05,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA983,
	0xA984,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0xABEE,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E8D0,
	0x1E8D7,
	0x1F1E6,
	0x1F200,
	0xE0000,
	0xE0100,
	0xE01F0,
	0xE1000
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define GCB_ENUM_COUNT 14

typedef enum {
	GCB_Other = 0,
	GCB_CR = 1,
	GCB_Control = 2,
	GCB_Extend = 3,
	GCB_L = 4,
	GCB_LF = 5,
	GCB_LV = 6,
	GCB_LVT = 7,
	GCB_Prepend = 8,
	GCB_Regional_Indicator = 9,
	GCB_SpacingMark = 10,
	GCB_T = 11,
	GCB_V = 12,
	GCB_EDGE = 13
} GCB_enum;

static const GCB_enum _Perl_GCB_invmap[] = { /* for EBCDIC 037 */
	GCB_Control,
	GCB_CR,
	GCB_Control,
	GCB_LF,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_L,
	GCB_V,
	GCB_T,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_L,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_Other,
	GCB_V,
	GCB_Other,
	GCB_T,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Regional_Indicator,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

static const UV _Perl_IDCont_invlist[] = { /* for EBCDIC 037 */
	1337,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

static const UV _Perl_IDStart_invlist[] = { /* for EBCDIC 037 */
	1151,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_LB_invlist[] = { /* for EBCDIC 037 */
	2168,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x41,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x4F,
	0x50,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0x62,
	0x6B,
	0x6C,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x90,
	0x91,
	0x9F,
	0xA0,
	0xAA,
	0xAC,
	0xB1,
	0xB3,
	0xBA,
	0xBB,
	0xBC,
	0xBE,
	0xBF,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x37E,
	0x37F,
	0x483,
	0x48A,
	0x589,
	0x58A,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x609,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7F9,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xBF9,
	0xBFA,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xD01,
	0xD04,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD79,
	0xD7A,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0xFD9,
	0xFDB,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169C,
	0x169D,
	0x16EB,
	0x16EE,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1737,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17D6,
	0x17D7,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1806,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x200C,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2015,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2024,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2038,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2044,
	0x2045,
	0x2046,
	0x2047,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2061,
	0x2066,
	0x2070,
	0x207D,
	0x207E,
	0x207F,
	0x208D,
	0x208E,
	0x208F,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0x22EF,
	0x22F0,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x231A,
	0x231C,
	0x2329,
	0x232A,
	0x232B,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270E,
	0x275B,
	0x2761,
	0x2762,
	0x2764,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C5,
	0x27C6,
	0x27C7,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FC,
	0x29FD,
	0x29FE,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2CFA,
	0x2CFD,
	0x2CFE,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301D,
	0x301E,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x3099,
	0x309B,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA620,
	0xA62A,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F8,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA838,
	0xA839,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFB00,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFD3E,
	0xFD3F,
	0xFD40,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE17,
	0xFE18,
	0xFE19,
	0xFE1A,
	0xFE20,
	0xFE30,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE47,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6B,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF04,
	0xFF05,
	0xFF06,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE0,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7,
	0xFFF9,
	0xFFFC,
	0xFFFD,
	0x10100,
	0x10103,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x104A0,
	0x104AA,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A50,
	0x10A58,
	0x10AE5,
	0x10AE7,
	0x10AF0,
	0x10AF6,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110C2,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x114B0,
	0x114C4,
	0x114D0,
	0x114DA,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x11643,
	0x11650,
	0x1165A,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118E0,
	0x118EA,
	0x12470,
	0x12475,
	0x13258,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x13379,
	0x1337A,
	0x1337C,
	0x145CE,
	0x145CF,
	0x145D0,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B30,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1B000,
	0x1B002,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E8D0,
	0x1E8D7,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F1E6,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3FB,
	0x1F400,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F650,
	0x1F676,
	0x1F679,
	0x1F67C,
	0x1F680,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define LB_ENUM_COUNT 36

typedef enum {
	LB_Alphabetic = 0,
	LB_Break_After = 1,
	LB_Break_Before = 2,
	LB_Break_Both = 3,
	LB_Break_Symbols = 4,
	LB_Carriage_Return = 5,
	LB_Close_Parenthesis = 6,
	LB_Close_Punctuation = 7,
	LB_Combining_Mark = 8,
	LB_Contingent_Break = 9,
	LB_Exclamation = 10,
	LB_Glue = 11,
	LB_H2 = 12,
	LB_H3 = 13,
	LB_Hebrew_Letter = 14,
	LB_Hyphen = 15,
	LB_Ideographic = 16,
	LB_Infix_Numeric = 17,
	LB_Inseparable = 18,
	LB_JL = 19,
	LB_JT = 20,
	LB_JV = 21,
	LB_Line_Feed = 22,
	LB_Mandatory_Break = 23,
	LB_Next_Line = 24,
	LB_Nonstarter = 25,
	LB_Numeric = 26,
	LB_Open_Punctuation = 27,
	LB_Postfix_Numeric = 28,
	LB_Prefix_Numeric = 29,
	LB_Quotation = 30,
	LB_Regional_Indicator = 31,
	LB_Space = 32,
	LB_Word_Joiner = 33,
	LB_ZWSpace = 34,
	LB_EDGE = 35
} LB_enum;

static const LB_enum _Perl_LB_invmap[] = { /* for EBCDIC 037 */
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Mandatory_Break,
	LB_Carriage_Return,
	LB_Combining_Mark,
	LB_Next_Line,
	LB_Combining_Mark,
	LB_Line_Feed,
	LB_Combining_Mark,
	LB_Space,
	LB_Glue,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Prefix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Close_Parenthesis,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Hyphen,
	LB_Break_Symbols,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Parenthesis,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Postfix_Numeric,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Glue,
	LB_Break_Before,
	LB_Break_After,
	LB_Glue,
	LB_Exclamation,
	LB_Glue,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Glue,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_JV,
	LB_JT,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_ZWSpace,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_Break_Both,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Break_After,
	LB_Mandatory_Break,
	LB_Combining_Mark,
	LB_Glue,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Quotation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Both,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_Alphabetic,
	LB_JV,
	LB_Alphabetic,
	LB_JT,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Combining_Mark,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Infix_Numeric,
	LB_Close_Punctuation,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Contingent_Break,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Regional_Indicator,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Quotation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_SB_invlist[] = { /* for EBCDIC 037 */
	2916,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x51,
	0x5A,
	0x5B,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x71,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BC,
	0x1BD,
	0x1C0,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x483,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x703,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1803,
	0x1804,
	0x1808,
	0x1809,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A20,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FDC,
	0x1FE0,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x2047,
	0x204A,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x207F,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2170,
	0x2180,
	0x2183,
	0x2184,
	0x2185,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24D0,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF2,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3001,
	0x3002,
	0x3003,
	0x3005,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA500,
	0xA60D,
	0xA60E,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA789,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AE,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA92F,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x10428,
	0x10450,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118C0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B39,
	0x16B40,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define SB_ENUM_COUNT 16

typedef enum {
	SB_Other = 0,
	SB_ATerm = 1,
	SB_CR = 2,
	SB_Close = 3,
	SB_Extend = 4,
	SB_Format = 5,
	SB_LF = 6,
	SB_Lower = 7,
	SB_Numeric = 8,
	SB_OLetter = 9,
	SB_SContinue = 10,
	SB_STerm = 11,
	SB_Sep = 12,
	SB_Sp = 13,
	SB_Upper = 14,
	SB_EDGE = 15
} SB_enum;

static const SB_enum _Perl_SB_invmap[] = { /* for EBCDIC 037 */
	SB_Other,
	SB_Sp,
	SB_Other,
	SB_Sp,
	SB_CR,
	SB_Other,
	SB_Sep,
	SB_Other,
	SB_LF,
	SB_Other,
	SB_Sp,
	SB_Lower,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Lower,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Format,
	SB_Lower,
	SB_Close,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Format,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Sp,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Sep,
	SB_Format,
	SB_Sp,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sp,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_SContinue,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_SContinue,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Close,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_PERL_C)

static const UV _Perl_WB_invlist[] = { /* for EBCDIC 037 */
	1554,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x51,
	0x5A,
	0x5E,
	0x5F,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2D7,
	0x2D8,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DF6,
	0x1DFC,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3000,
	0x3001,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE14,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#endif	/* defined(PERL_IN_PERL_C) */

#if defined(PERL_IN_REGEXEC_C)

#define WB_ENUM_COUNT 20

typedef enum {
	WB_Other = 0,
	WB_ALetter = 1,
	WB_CR = 2,
	WB_Double_Quote = 3,
	WB_Extend = 4,
	WB_ExtendNumLet = 5,
	WB_Format = 6,
	WB_Hebrew_Letter = 7,
	WB_Katakana = 8,
	WB_LF = 9,
	WB_MidLetter = 10,
	WB_MidNum = 11,
	WB_MidNumLet = 12,
	WB_Newline = 13,
	WB_Numeric = 14,
	WB_Perl_Tailored_HSpace = 15,
	WB_Regional_Indicator = 16,
	WB_Single_Quote = 17,
	WB_EDGE = 18,
	WB_UNKNOWN = 19
} WB_enum;

static const WB_enum _Perl_WB_invmap[] = { /* for EBCDIC 037 */
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Newline,
	WB_CR,
	WB_Other,
	WB_Newline,
	WB_Other,
	WB_LF,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_Single_Quote,
	WB_Other,
	WB_Double_Quote,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Format,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidNum,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidLetter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_MidLetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_Newline,
	WB_Format,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Extend,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_MidNum,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Regional_Indicator,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_REGCOMP_C)

static const UV UpperLatin1_invlist[] = { /* for EBCDIC 037 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#endif	/* defined(PERL_IN_REGCOMP_C) */

#if defined(PERL_IN_PERL_C)

static const UV VertSpace_invlist[] = { /* for EBCDIC 037 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x2028,
	0x202A
};

static const UV XPerlSpace_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixAlnum_invlist[] = { /* for EBCDIC 037 */
	1317,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF20,
	0xF2A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x104A,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8D0,
	0xA8DA,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11066,
	0x11070,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11133,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B6,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

static const UV XPosixAlpha_invlist[] = { /* for EBCDIC 037 */
	1257,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x660,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x8A0,
	0x8B5,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9F0,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1040,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x11100,
	0x11133,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11680,
	0x116B6,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E
};

static const UV XPosixBlank_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixCntrl_invlist[] = { /* for EBCDIC 037 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100
};

static const UV XPosixDigit_invlist[] = { /* for EBCDIC 037 */
	103,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800
};

static const UV XPosixGraph_invlist[] = { /* for EBCDIC 037 */
	1237,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x1681,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV XPosixLower_invlist[] = { /* for EBCDIC 037 */
	1283,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC
};

static const UV XPosixPrint_invlist[] = { /* for EBCDIC 037 */
	1231,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2028,
	0x202A,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV XPosixPunct_invlist[] = { /* for EBCDIC 037 */
	323,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xB0,
	0xB1,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E43,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x1173C,
	0x1173F,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C
};

static const UV XPosixSpace_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

static const UV XPosixUpper_invlist[] = { /* for EBCDIC 037 */
	1275,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AE,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

static const UV XPosixWord_invlist[] = { /* for EBCDIC 037 */
	1331,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x8A0,
	0x8B5,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x200E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C5,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

static const UV XPosixXDigit_invlist[] = { /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x87,
	0xC1,
	0xC7,
	0xF0,
	0xFA,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF27,
	0xFF41,
	0xFF47
};

#endif	/* defined(PERL_IN_PERL_C) */

#endif	/* EBCDIC 037 */

#if defined(PERL_IN_REGEXEC_C)

static const bool GCB_table[14][14] = {
   /* 'edg' stands for 'EDGE' */
/*        XX CR CN EX  L LF LV LVT PP RI SM  T  V edg */
/* XX */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 1, 1,  1 },
/* CR */ { 1, 1, 1, 1, 1, 0, 1,  1, 1, 1, 1, 1, 1,  1 },
/* CN */ { 1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1,  1 },
/* EX */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 1, 1,  1 },
/* L  */ { 1, 1, 1, 0, 0, 1, 0,  0, 1, 1, 0, 1, 0,  1 },
/* LF */ { 1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1,  1 },
/* LV */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 0, 0,  1 },
/* LVT*/ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 0, 1,  1 },
/* PP */ { 0, 1, 1, 0, 0, 1, 0,  0, 0, 0, 0, 0, 0,  1 },
/* RI */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 0, 0, 1, 1,  1 },
/* SM */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 1, 1,  1 },
/* T  */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 0, 1,  1 },
/* V  */ { 1, 1, 1, 0, 1, 1, 1,  1, 1, 1, 0, 0, 0,  1 },
/* edg*/ { 1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1,  0 }
};

#define LB_NOBREAK                        0
#define LB_BREAKABLE                      1
#define LB_NOBREAK_EVEN_WITH_SP_BETWEEN   2
#define LB_CM_foo                         3
#define LB_SP_foo                         6
#define LB_PR_or_PO_then_OP_or_HY         9
#define LB_SY_or_IS_then_various         11
#define LB_HY_or_BA_then_foo             13
#define LB_various_then_PO_or_PR         16

static const U8 LB_table[36][36] = {
   /* 'edg' stands for 'EDGE' */
/*        AL BA BB B2 SY CR CP CL CM CB EX GL H2 H3 HL HY ID IS IN JL JT JV LF BK NL NS NU OP PO PR QU RI SP WJ ZW edg */
/* AL */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,  1 },
/* BA */ {14, 0,14,14, 2, 0, 2, 2, 0, 1, 2,14,14,14,14, 0,14, 2,14,14,14,14, 0, 0, 0, 0,14,14,14,14, 0,14, 0, 0, 0,  1 },
/* BB */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1 },
/* B2 */ { 1, 0, 1, 2, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0,  1 },
/* SY */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0,12, 1,17,17, 0, 1, 0, 0, 0,  1 },
/* CR */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* CP */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 2, 0, 1,17,17, 0, 1, 0, 0, 0,  1 },
/* CL */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 2, 1, 1,17,17, 0, 1, 0, 0, 0,  1 },
/* CM */ { 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0,  1 },
/* CB */ { 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0,  1 },
/* EX */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0,  1 },
/* GL */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1 },
/* H2 */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,  1 },
/* H3 */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,  1 },
/* HL */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,  1 },
/* HY */ {14, 0,14,14, 2, 0, 2, 2, 0, 1, 2,14,14,14,14, 0,14, 2,14,14,14,14, 0, 0, 0, 0,13,14,14,14, 0,14, 0, 0, 0,  1 },
/* ID */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,  1 },
/* IS */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0,12, 1,17,17, 0, 1, 0, 0, 0,  1 },
/* IN */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0,  1 },
/* JL */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,  1 },
/* JT */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,  1 },
/* JV */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,  1 },
/* LF */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* BK */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* NL */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* NS */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0,  1 },
/* NU */ { 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  1 },
/* OP */ { 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0,  1 },
/* PO */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0,10, 1, 1, 0, 1, 0, 0, 0,  1 },
/* PR */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0,10, 1, 1, 0, 1, 0, 0, 0,  1 },
/* QU */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,  1 },
/* RI */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  1 },
/* SP */ { 7, 7, 7, 7, 8, 0, 8, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 8, 0,  1 },
/* WJ */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1 },
/* ZW */ { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,  1 },
/* edg*/ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0 }
};

#define WB_NOBREAK                        0
#define WB_BREAKABLE                      1
#define WB_hs_then_hs                     2
#define WB_Ex_or_FO_then_foo              3
#define WB_DQ_then_HL                     4
#define WB_HL_then_DQ                     6
#define WB_LE_or_HL_then_MB_or_ML_or_SQ   8
#define WB_MB_or_ML_or_SQ_then_LE_or_HL  10
#define WB_MB_or_MN_or_SQ_then_NU        12
#define WB_NU_then_MB_or_MN_or_SQ        14

static const U8 WB_table[19][19] = {
   /* 'Ext' stands for 'Extend'; 'edg' stands for 'EDGE'; 'hs' stands
    * for 'Perl_Tailored_HSpace'; 'unk' stands for 'UNKNOWN' */
/*        XX LE CR DQ Ext EX FO HL KA LF ML MN MB NL NU hs RI SQ edg */
/* XX */ { 1, 1, 1, 1,  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* LE */ { 1, 0, 1, 1,  0, 0, 0, 0, 1, 1, 9, 1, 9, 1, 0, 1, 1, 9,  1 },
/* CR */ { 1, 1, 0, 1,  1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,  1 },
/* DQ */ { 1, 1, 1, 1,  0, 1, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* Ext*/ { 3, 3, 1, 3,  0, 3, 0, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3,  1 },
/* EX */ { 1, 0, 1, 1,  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,  1 },
/* FO */ { 3, 3, 1, 3,  0, 3, 0, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3,  1 },
/* HL */ { 1, 0, 1, 7,  0, 0, 0, 0, 1, 1, 9, 1, 9, 1, 0, 1, 1, 8,  1 },
/* KA */ { 1, 1, 1, 1,  0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* LF */ { 1, 1, 0, 1,  1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,  1 },
/* ML */ { 1,11, 1, 1,  0, 1, 0,11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1 },
/* MN */ { 1, 1, 1, 1,  0, 1, 0, 1, 1, 1, 1, 1, 1, 1,13, 1, 1, 1,  1 },
/* MB */ { 1,11, 1, 1,  0, 1, 0,11, 1, 1, 1, 1, 1, 1,13, 1, 1, 1,  1 },
/* NL */ { 1, 1, 0, 1,  1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,  1 },
/* NU */ { 1, 0, 1, 1,  0, 0, 0, 0, 1, 1, 1,15,15, 1, 0, 1, 1,15,  1 },
/* hs */ { 1, 1, 0, 1,  0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1,  1 },
/* RI */ { 1, 1, 1, 1,  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,  1 },
/* SQ */ { 1,11, 1, 1,  0, 1, 0,11, 1, 1, 1, 1, 1, 1,13, 1, 1, 1,  1 },
/* edg*/ { 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0 }
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

/* Generated from:
 * cb3170dd603ad12ba0299440e99e8f50a8afde60ade2ffcbf1ff4a8a53854b90 lib/Unicode/UCD.pm
 * ae98bec7e4f0564758eed81eca5015481ba32581f8a735a825b71b3bba714450 lib/unicore/ArabicShaping.txt
 * 1687fe5994eb7e5c0dab8503fc2a1b3b479d91af9d3b8055941c9bd791f7d0b5 lib/unicore/BidiBrackets.txt
 * 350d1302116194b0b21def287434b55c5088098fbc726e879f7420a391965643 lib/unicore/BidiMirroring.txt
 * 288fc7b85c76bda296e296c8465f1f4baeb456cb814430dfaa0f546bfbe86b4a lib/unicore/Blocks.txt
 * 86e075f2ede997b3fa5965516c75190b5a88bb82d302272d9c3179b7a57af03f lib/unicore/CaseFolding.txt
 * 2fafee5be73bf2817ee669c53c504a6c4aa02ac7344194af18511aea2e05d750 lib/unicore/CompositionExclusions.txt
 * 302f6d6171dc9c6165db86d0226b7923a64cea06c493d339d35436bf137606a3 lib/unicore/DAge.txt
 * ff666dece87dfdbdbf04a2e26a0bfb52c4ba98db1f8965b0b01ddb9e15f97476 lib/unicore/DCoreProperties.txt
 * 6cc76100d402d7dd12bd769ac61158b91e71aad58c8333abb848f1b9c9fdde2d lib/unicore/DNormalizationProps.txt
 * ccc571829b384b8a2c24b7a62f8aa6a891a6e8c48f08513ef84fd6da26dba4bb lib/unicore/EastAsianWidth.txt
 * 2320db06cf88c755ec7b9cfec96dd9e1d774173521dbc3ee7985377c2ab90d32 lib/unicore/HangulSyllableType.txt
 * e52216b5fdb04910e06e94f01cabdf70656b0077c92b756c7b38822626d572f2 lib/unicore/IndicPositionalCategory.txt
 * 4db71a39102e173095cb8bda8b4c35e78fe6b365e443c584b19f081d8c4894fc lib/unicore/IndicSyllabicCategory.txt
 * eeb30346bb545bb45ff16486d9234397bfe1a195bb12b54fc1d9f48f87e8aa5e lib/unicore/Jamo.txt
 * 13e2b7087bcca3163272e64e34e480534bd2f8353a0245c26e6642566f59a60d lib/unicore/LineBreak.txt
 * 9bb54cd7b5509779f269fa60341bcbfca8da8f17d3c4999e44a5a51671d3c402 lib/unicore/NameAliases.txt
 * e4c29d9ceefbe2382af819ac7646265a9e4ea599ce04a90d31bec97cfaa2848f lib/unicore/NamedSequences.txt
 * 70d40297f1bf91397fbdab5a770c12100733e67c5c3398446c5e950715d5e535 lib/unicore/PropList.txt
 * 03a440f2a4b9151043a6bb53d4a4e528b73238079f9d686dc2a5846e6895588a lib/unicore/PropValueAliases.txt
 * 8e8b48c2080d31aa6713f5535aad94a1f7bc9a65cc52563724e5e69b0a3b4196 lib/unicore/PropertyAliases.txt
 * 45d42b1ecbac2263c1c63c95104e63ea64313eb99be94542e040aea11c449f6c lib/unicore/ScriptExtensions.txt
 * 79fbd73ad82c30fdb67d36a349d12667bd58d3e9da6a8ce7dd26383b637ba85f lib/unicore/Scripts.txt
 * fb2025dae3b9b17649b6e379c1cdbddf50641267ca6d2446caeccf4a141fe167 lib/unicore/SpecialCasing.txt
 * 38b17e1118206489a7e0ab5d29d7932212d38838df7d3ec025ecb58e8798ec20 lib/unicore/UnicodeData.txt
 * 0cedd6e0f5cadf57ce9cfc96beccfd083b0faa0809a631a777cd25f0316bfabb lib/unicore/auxiliary/GCBTest.txt
 * 230005412f9a47128e37bc52330766aaa0b5522a53737a89cff66e891e14527a lib/unicore/auxiliary/GraphemeBreakProperty.txt
 * 149b14ab93b06c887a958fb16d0ad01193063ef69cc14f10338ae4d0accd6c28 lib/unicore/auxiliary/LBTest.txt
 * 41bf82452d71ce15eda8c9bb1bb0c20b72205acaaf503e3cb84734ed8e85d33a lib/unicore/auxiliary/SBTest.txt
 * d3b45cdb0a73eeb9d25158336583dfc1e6f64da59537acb0008988b40e6b3b63 lib/unicore/auxiliary/SentenceBreakProperty.txt
 * a661f42a54f7cc4dded72a61c508be2b482f912d4b6cf140335010f0c684dbb9 lib/unicore/auxiliary/WBTest.txt
 * c255bd2e1f163373510679bf4b272eee97b635bfce2a6550d6c10fe5c917f01a lib/unicore/auxiliary/WordBreakProperty.txt
 * 16dac6f1c164a4f52741b71221a8aafb6acb52cd8a436af139da6e93d86efdfb lib/unicore/extracted/DBidiClass.txt
 * c4e78efc041668548117f7462af03b28dfbb2caca5d46a1ae78ae0ce0bb26c4a lib/unicore/extracted/DBinaryProperties.txt
 * 5886bb44aae8f2821663f742793cb91d4ed0923c6840f3bfb73530e37030abf8 lib/unicore/extracted/DCombiningClass.txt
 * 9edba3785ed0e6e46e10f67e2dd0ec3cb0799b7f75f526fe918429576060352e lib/unicore/extracted/DDecompositionType.txt
 * b774387f79b27ae4268ae89450f971408dc9bbbb523426482ab4375c962bd922 lib/unicore/extracted/DEastAsianWidth.txt
 * ba4207d2464077e807b20caf063041142afc0a8a38c328c5c23b3417c9f2da33 lib/unicore/extracted/DGeneralCategory.txt
 * 29fdd151266595eb1b37715937afe0727bb632a2bc1130f0d2314040175df82e lib/unicore/extracted/DJoinGroup.txt
 * 7725fe247da06986e43e89fd316b8b22a0619546d0c1ed499a94b25e9164c150 lib/unicore/extracted/DJoinType.txt
 * 1a0687fb9c6c4567e853913549df0944fe40821279a3e9cdaa6ab8679bc286fd lib/unicore/extracted/DLineBreak.txt
 * 40bcfed3ca727c19e1331f6c33806231d5f7eeeabd2e6a9e06a3740c85d0c250 lib/unicore/extracted/DNumType.txt
 * a18d502bad39d527ac5586d7bc93e29f565859e3bcc24ada627eff606d6f5fed lib/unicore/extracted/DNumValues.txt
 * 285aef7ed2bf69724b1fa9bba177640636f666e1a5dd0ba5e538d4790129bbfe lib/unicore/mktables
 * 462c9aaa608fb2014cd9649af1c5c009485c60b9c8b15b89401fdc10cf6161c6 lib/unicore/version
 * 913d2f93f3cb6cdf1664db888bf840bc4eb074eef824e082fceda24a9445e60c regen/charset_translations.pl
 * 12bd58cb9d5a99f631ca95e269f7f9c90dacaf81020efa5d95a995f3cdc19200 regen/mk_invlists.pl
 * ex: set ro: */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /* This file was produced by running the config_h.SH script, which
 * gets its values from config.sh, which is generally produced by
 * running Configure.
 *
 * Feel free to modify any of this as the need arises.  Note, however,
 * that running config_h.SH again will wipe out any changes you've made.
 * For a more permanent change edit config.sh and rerun config_h.SH.
 */

/* Package name      : perl5
 * Source directory  : .
 * Configuration time: Thu Nov 29 11:11:57 UTC 2018
 * Configured by     : Debian Project
 * Target system     : linux localhost 3.16.0 #1 smp debian 3.16.0 armv7l gnulinux 
 */

#ifndef _config_h_
#define _config_h_

/* LOC_SED:
 *	This symbol holds the complete pathname to the sed program.
 */
#define LOC_SED 	"/bin/sed"	/**/

/* HAS_ALARM:
 *	This symbol, if defined, indicates that the alarm routine is
 *	available.
 */
#define HAS_ALARM		/**/

/* HAS_BCMP:
 *	This symbol is defined if the bcmp() routine is available to
 *	compare blocks of memory.
 */
#define HAS_BCMP	/**/

/* HAS_BCOPY:
 *	This symbol is defined if the bcopy() routine is available to
 *	copy blocks of memory.
 */
#define HAS_BCOPY	/**/

/* HAS_BZERO:
 *	This symbol is defined if the bzero() routine is available to
 *	set a memory block to 0.
 */
#define HAS_BZERO	/**/

/* HAS_CBRT:
 *	This symbol, if defined, indicates that the cbrt() (cube root)
 *	function is available.
 */
#define HAS_CBRT	/**/

/* HAS_CHOWN:
 *	This symbol, if defined, indicates that the chown routine is
 *	available.
 */
#define HAS_CHOWN		/**/

/* HAS_CHROOT:
 *	This symbol, if defined, indicates that the chroot routine is
 *	available.
 */
#define HAS_CHROOT		/**/

/* HAS_CHSIZE:
 *	This symbol, if defined, indicates that the chsize routine is available
 *	to truncate files.  You might need a -lx to get this routine.
 */
/*#define	HAS_CHSIZE		/ **/

/* HAS_CRYPT:
 *	This symbol, if defined, indicates that the crypt routine is available
 *	to encrypt passwords and the like.
 */
#define HAS_CRYPT		/**/

/* HAS_CTERMID:
 *	This symbol, if defined, indicates that the ctermid routine is
 *	available to generate filename for terminal.
 */
#define HAS_CTERMID		/**/

/* HAS_CUSERID:
 *	This symbol, if defined, indicates that the cuserid routine is
 *	available to get character login names.
 */
#define HAS_CUSERID		/**/

/* HAS_DBL_DIG:
 *	This symbol, if defined, indicates that this system's <float.h>
 *	or <limits.h> defines the symbol DBL_DIG, which is the number
 *	of significant digits in a double precision number.  If this
 *	symbol is not defined, a guess of 15 is usually pretty good.
 */
#define HAS_DBL_DIG 	/**/

/* HAS_DIFFTIME:
 *	This symbol, if defined, indicates that the difftime routine is
 *	available.
 */
#define HAS_DIFFTIME		/**/

/* HAS_DLERROR:
 *	This symbol, if defined, indicates that the dlerror routine is
 *	available to return a string describing the last error that
 *	occurred from a call to dlopen(), dlclose() or dlsym().
 */
#define HAS_DLERROR	/**/

/* HAS_DUP2:
 *	This symbol, if defined, indicates that the dup2 routine is
 *	available to duplicate file descriptors.
 */
#define HAS_DUP2	/**/

/* HAS_FCHMOD:
 *	This symbol, if defined, indicates that the fchmod routine is available
 *	to change mode of opened files.  If unavailable, use chmod().
 */
#define HAS_FCHMOD		/**/

/* HAS_FCHOWN:
 *	This symbol, if defined, indicates that the fchown routine is available
 *	to change ownership of opened files.  If unavailable, use chown().
 */
#define HAS_FCHOWN		/**/

/* HAS_FCNTL:
 *	This symbol, if defined, indicates to the C program that
 *	the fcntl() function exists.
 */
#define HAS_FCNTL		/**/

/* HAS_FGETPOS:
 *	This symbol, if defined, indicates that the fgetpos routine is
 *	available to get the file position indicator, similar to ftell().
 */
#define HAS_FGETPOS	/**/

/* HAS_FLOCK:
 *	This symbol, if defined, indicates that the flock routine is
 *	available to do file locking.
 */
#define HAS_FLOCK		/**/

/* HAS_FORK:
 *	This symbol, if defined, indicates that the fork routine is
 *	available.
 */
#define HAS_FORK		/**/

/* HAS_FSETPOS:
 *	This symbol, if defined, indicates that the fsetpos routine is
 *	available to set the file position indicator, similar to fseek().
 */
#define HAS_FSETPOS	/**/

/* HAS_GETTIMEOFDAY:
 *	This symbol, if defined, indicates that the gettimeofday() system
 *	call is available for a sub-second accuracy clock. Usually, the file
 *	<sys/resource.h> needs to be included (see I_SYS_RESOURCE).
 *	The type "Timeval" should be used to refer to "struct timeval".
 */
#define HAS_GETTIMEOFDAY	/**/
#ifdef HAS_GETTIMEOFDAY
#define Timeval struct timeval	/* Structure used by gettimeofday() */
#endif

/* HAS_GETGROUPS:
 *	This symbol, if defined, indicates that the getgroups() routine is
 *	available to get the list of process groups.  If unavailable, multiple
 *	groups are probably not supported.
 */
#define HAS_GETGROUPS		/**/

/* HAS_GETLOGIN:
 *	This symbol, if defined, indicates that the getlogin routine is
 *	available to get the login name.
 */
#define HAS_GETLOGIN		/**/

/* HAS_GETPGID:
 *	This symbol, if defined, indicates to the C program that 
 *	the getpgid(pid) function is available to get the
 *	process group id.
 */
#define HAS_GETPGID		/**/

/* HAS_GETPGRP2:
 *	This symbol, if defined, indicates that the getpgrp2() (as in DG/UX)
 *	routine is available to get the current process group.
 */
/*#define HAS_GETPGRP2		/ **/

/* HAS_GETPPID:
 *	This symbol, if defined, indicates that the getppid routine is
 *	available to get the parent process ID.
 */
#define HAS_GETPPID		/**/

/* HAS_GETPRIORITY:
 *	This symbol, if defined, indicates that the getpriority routine is
 *	available to get a process's priority.
 */
#define HAS_GETPRIORITY		/**/

/* HAS_INET_ATON:
 *	This symbol, if defined, indicates to the C program that the
 *	inet_aton() function is available to parse IP address "dotted-quad"
 *	strings.
 */
#define HAS_INET_ATON		/**/

/* HAS_KILLPG:
 *	This symbol, if defined, indicates that the killpg routine is available
 *	to kill process groups.  If unavailable, you probably should use kill
 *	with a negative process number.
 */
#define HAS_KILLPG	/**/

/* HAS_LINK:
 *	This symbol, if defined, indicates that the link routine is
 *	available to create hard links.
 */
#define HAS_LINK	/**/

/* HAS_LOCALECONV:
 *	This symbol, if defined, indicates that the localeconv routine is
 *	available for numeric and monetary formatting conventions.
 */
#define HAS_LOCALECONV	/**/

/* HAS_LOCKF:
 *	This symbol, if defined, indicates that the lockf routine is
 *	available to do file locking.
 */
#define HAS_LOCKF		/**/

/* HAS_LSTAT:
 *	This symbol, if defined, indicates that the lstat routine is
 *	available to do file stats on symbolic links.
 */
#define HAS_LSTAT		/**/

/* HAS_MBLEN:
 *	This symbol, if defined, indicates that the mblen routine is available
 *	to find the number of bytes in a multibye character.
 */
#define HAS_MBLEN		/**/

/* HAS_MBSTOWCS:
 *	This symbol, if defined, indicates that the mbstowcs routine is
 *	available to convert a multibyte string into a wide character string.
 */
#define	HAS_MBSTOWCS		/**/

/* HAS_MBTOWC:
 *	This symbol, if defined, indicates that the mbtowc routine is available
 *	to convert a multibyte to a wide character.
 */
#define HAS_MBTOWC		/**/

/* HAS_MEMCMP:
 *	This symbol, if defined, indicates that the memcmp routine is available
 *	to compare blocks of memory.
 */
#define HAS_MEMCMP	/**/

/* HAS_MEMCPY:
 *	This symbol, if defined, indicates that the memcpy routine is available
 *	to copy blocks of memory.
 */
#define HAS_MEMCPY	/**/

/* HAS_MEMMOVE:
 *	This symbol, if defined, indicates that the memmove routine is available
 *	to copy potentially overlapping blocks of memory. This should be used
 *	only when HAS_SAFE_BCOPY is not defined. If neither is there, roll your
 *	own version.
 */
#define HAS_MEMMOVE	/**/

/* HAS_MEMSET:
 *	This symbol, if defined, indicates that the memset routine is available
 *	to set blocks of memory.
 */
#define HAS_MEMSET	/**/

/* HAS_MKDIR:
 *	This symbol, if defined, indicates that the mkdir routine is available
 *	to create directories.  Otherwise you should fork off a new process to
 *	exec /bin/mkdir.
 */
#define HAS_MKDIR		/**/

/* HAS_MKFIFO:
 *	This symbol, if defined, indicates that the mkfifo routine is
 *	available to create FIFOs. Otherwise, mknod should be able to
 *	do it for you. However, if mkfifo is there, mknod might require
 *	super-user privileges which mkfifo will not.
 */
#define HAS_MKFIFO		/**/

/* HAS_MKTIME:
 *	This symbol, if defined, indicates that the mktime routine is
 *	available.
 */
#define HAS_MKTIME		/**/

/* HAS_MSYNC:
 *	This symbol, if defined, indicates that the msync system call is
 *	available to synchronize a mapped file.
 */
#define HAS_MSYNC		/**/

/* HAS_MUNMAP:
 *	This symbol, if defined, indicates that the munmap system call is
 *	available to unmap a region, usually mapped by mmap().
 */
#define HAS_MUNMAP		/**/

/* HAS_NICE:
 *	This symbol, if defined, indicates that the nice routine is
 *	available.
 */
#define HAS_NICE		/**/

/* HAS_PATHCONF:
 *	This symbol, if defined, indicates that pathconf() is available
 *	to determine file-system related limits and options associated
 *	with a given filename.
 */
/* HAS_FPATHCONF:
 *	This symbol, if defined, indicates that pathconf() is available
 *	to determine file-system related limits and options associated
 *	with a given open file descriptor.
 */
#define HAS_PATHCONF		/**/
#define HAS_FPATHCONF		/**/

/* HAS_PAUSE:
 *	This symbol, if defined, indicates that the pause routine is
 *	available to suspend a process until a signal is received.
 */
#define HAS_PAUSE		/**/

/* HAS_PIPE:
 *	This symbol, if defined, indicates that the pipe routine is
 *	available to create an inter-process channel.
 */
#define HAS_PIPE		/**/

/* HAS_POLL:
 *	This symbol, if defined, indicates that the poll routine is
 *	available to poll active file descriptors.  Please check I_POLL and
 *	I_SYS_POLL to know which header should be included as well.
 */
#define HAS_POLL		/**/

/* HAS_READDIR:
 *	This symbol, if defined, indicates that the readdir routine is
 *	available to read directory entries. You may have to include
 *	<dirent.h>. See I_DIRENT.
 */
#define HAS_READDIR		/**/

/* HAS_SEEKDIR:
 *	This symbol, if defined, indicates that the seekdir routine is
 *	available. You may have to include <dirent.h>. See I_DIRENT.
 */
#define HAS_SEEKDIR		/**/

/* HAS_TELLDIR:
 *	This symbol, if defined, indicates that the telldir routine is
 *	available. You may have to include <dirent.h>. See I_DIRENT.
 */
#define HAS_TELLDIR		/**/

/* HAS_REWINDDIR:
 *	This symbol, if defined, indicates that the rewinddir routine is
 *	available. You may have to include <dirent.h>. See I_DIRENT.
 */
#define HAS_REWINDDIR		/**/

/* HAS_READLINK:
 *	This symbol, if defined, indicates that the readlink routine is
 *	available to read the value of a symbolic link.
 */
#define HAS_READLINK		/**/

/* HAS_REGCOMP:
 *	This symbol, if defined, indicates that the regcomp() routine is
 *	available to do some regular patern matching (usually on POSIX.2
 *	conforming systems).
 */
#define HAS_REGCOMP		/* POSIX.2 */

/* HAS_RENAME:
 *	This symbol, if defined, indicates that the rename routine is available
 *	to rename files.  Otherwise you should do the unlink(), link(), unlink()
 *	trick.
 */
#define HAS_RENAME	/**/

/* HAS_RMDIR:
 *	This symbol, if defined, indicates that the rmdir routine is
 *	available to remove directories. Otherwise you should fork off a
 *	new process to exec /bin/rmdir.
 */
#define HAS_RMDIR		/**/

/* HAS_SELECT:
 *	This symbol, if defined, indicates that the select routine is
 *	available to select active file descriptors. If the timeout field
 *	is used, <sys/time.h> may need to be included.
 */
#define HAS_SELECT	/**/

/* HAS_SETEGID:
 *	This symbol, if defined, indicates that the setegid routine is available
 *	to change the effective gid of the current program.
 */
#define HAS_SETEGID		/**/

/* HAS_SETEUID:
 *	This symbol, if defined, indicates that the seteuid routine is available
 *	to change the effective uid of the current program.
 */
#define HAS_SETEUID		/**/

/* HAS_SETGROUPS:
 *	This symbol, if defined, indicates that the setgroups() routine is
 *	available to set the list of process groups.  If unavailable, multiple
 *	groups are probably not supported.
 */
#define HAS_SETGROUPS		/**/

/* HAS_SETLINEBUF:
 *	This symbol, if defined, indicates that the setlinebuf routine is
 *	available to change stderr or stdout from block-buffered or unbuffered
 *	to a line-buffered mode.
 */
#define HAS_SETLINEBUF		/**/

/* HAS_SETLOCALE:
 *	This symbol, if defined, indicates that the setlocale routine is
 *	available to handle locale-specific ctype implementations.
 */
#define HAS_SETLOCALE	/**/

/* HAS_SETPGID:
 *	This symbol, if defined, indicates that the setpgid(pid, gpid)
 *	routine is available to set process group ID.
 */
#define HAS_SETPGID	/**/

/* HAS_SETPGRP2:
 *	This symbol, if defined, indicates that the setpgrp2() (as in DG/UX)
 *	routine is available to set the current process group.
 */
/*#define HAS_SETPGRP2		/ **/

/* HAS_SETPRIORITY:
 *	This symbol, if defined, indicates that the setpriority routine is
 *	available to set a process's priority.
 */
#define HAS_SETPRIORITY		/**/

/* HAS_SETREGID:
 *	This symbol, if defined, indicates that the setregid routine is
 *	available to change the real and effective gid of the current
 *	process.
 */
/* HAS_SETRESGID:
 *	This symbol, if defined, indicates that the setresgid routine is
 *	available to change the real, effective and saved gid of the current
 *	process.
 */
#define HAS_SETREGID		/**/
#define HAS_SETRESGID		/**/

/* HAS_SETREUID:
 *	This symbol, if defined, indicates that the setreuid routine is
 *	available to change the real and effective uid of the current
 *	process.
 */
/* HAS_SETRESUID:
 *	This symbol, if defined, indicates that the setresuid routine is
 *	available to change the real, effective and saved uid of the current
 *	process.
 */
#define HAS_SETREUID		/**/
#define HAS_SETRESUID		/**/

/* HAS_SETRGID:
 *	This symbol, if defined, indicates that the setrgid routine is available
 *	to change the real gid of the current program.
 */
/*#define HAS_SETRGID		/ **/

/* HAS_SETRUID:
 *	This symbol, if defined, indicates that the setruid routine is available
 *	to change the real uid of the current program.
 */
/*#define HAS_SETRUID		/ **/

/* HAS_SETSID:
 *	This symbol, if defined, indicates that the setsid routine is
 *	available to set the process group ID.
 */
#define HAS_SETSID	/**/

/* HAS_STAT:
 *	This symbol, if defined, indicates that the stat routine is
 *	available to get file status.
 */
#define HAS_STAT	/**/

/* HAS_STRCHR:
 *	This symbol is defined to indicate that the strchr()/strrchr()
 *	functions are available for string searching. If not, try the
 *	index()/rindex() pair.
 */
/* HAS_INDEX:
 *	This symbol is defined to indicate that the index()/rindex()
 *	functions are available for string searching.
 */
#define HAS_STRCHR	/**/
/*#define HAS_INDEX	/ **/

/* HAS_STRCOLL:
 *	This symbol, if defined, indicates that the strcoll routine is
 *	available to compare strings using collating information.
 */
#define HAS_STRCOLL	/**/

/* HAS_STRTOD:
 *	This symbol, if defined, indicates that the strtod routine is
 *	available to provide better numeric string conversion than atof().
 */
#define HAS_STRTOD	/**/

/* HAS_STRTOL:
 *	This symbol, if defined, indicates that the strtol routine is available
 *	to provide better numeric string conversion than atoi() and friends.
 */
#define HAS_STRTOL	/**/

/* HAS_STRXFRM:
 *	This symbol, if defined, indicates that the strxfrm() routine is
 *	available to transform strings.
 */
#define HAS_STRXFRM	/**/

/* HAS_SYMLINK:
 *	This symbol, if defined, indicates that the symlink routine is available
 *	to create symbolic links.
 */
#define HAS_SYMLINK	/**/

/* HAS_SYSCALL:
 *	This symbol, if defined, indicates that the syscall routine is
 *	available to call arbitrary system calls. If undefined, that's tough.
 */
#define HAS_SYSCALL	/**/

/* HAS_SYSCONF:
 *	This symbol, if defined, indicates that sysconf() is available
 *	to determine system related limits and options.
 */
#define HAS_SYSCONF	/**/

/* HAS_SYSTEM:
 *	This symbol, if defined, indicates that the system routine is
 *	available to issue a shell command.
 */
#define HAS_SYSTEM	/**/

/* HAS_TCGETPGRP:
 *	This symbol, if defined, indicates that the tcgetpgrp routine is
 *	available to get foreground process group ID.
 */
#define HAS_TCGETPGRP		/**/

/* HAS_TCSETPGRP:
 *	This symbol, if defined, indicates that the tcsetpgrp routine is
 *	available to set foreground process group ID.
 */
#define HAS_TCSETPGRP		/**/

/* HAS_TRUNCATE:
 *	This symbol, if defined, indicates that the truncate routine is
 *	available to truncate files.
 */
#define HAS_TRUNCATE	/**/

/* HAS_TZNAME:
 *	This symbol, if defined, indicates that the tzname[] array is
 *	available to access timezone names.
 */
#define HAS_TZNAME		/**/

/* HAS_UMASK:
 *	This symbol, if defined, indicates that the umask routine is
 *	available to set and get the value of the file creation mask.
 */
#define HAS_UMASK		/**/

/* HAS_USLEEP:
 *	This symbol, if defined, indicates that the usleep routine is
 *	available to let the process sleep on a sub-second accuracy.
 */
#define HAS_USLEEP		/**/

/* HAS_WAIT4:
 *	This symbol, if defined, indicates that wait4() exists.
 */
#define HAS_WAIT4	/**/

/* HAS_WAITPID:
 *	This symbol, if defined, indicates that the waitpid routine is
 *	available to wait for child process.
 */
#define HAS_WAITPID	/**/

/* HAS_WCSTOMBS:
 *	This symbol, if defined, indicates that the wcstombs routine is
 *	available to convert wide character strings to multibyte strings.
 */
#define HAS_WCSTOMBS	/**/

/* HAS_WCTOMB:
 *	This symbol, if defined, indicates that the wctomb routine is available
 *	to convert a wide character to a multibyte.
 */
#define HAS_WCTOMB		/**/

/* Groups_t:
 *	This symbol holds the type used for the second argument to
 *	getgroups() and setgroups().  Usually, this is the same as
 *	gidtype (gid_t) , but sometimes it isn't.
 *	It can be int, ushort, gid_t, etc... 
 *	It may be necessary to include <sys/types.h> to get any 
 *	typedef'ed information.  This is only required if you have
 *	getgroups() or setgroups()..
 */
#if defined(HAS_GETGROUPS) || defined(HAS_SETGROUPS)
#define Groups_t gid_t	/* Type for 2nd arg to [sg]etgroups() */
#endif

/* I_ARPA_INET:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <arpa/inet.h> to get inet_addr and friends declarations.
 */
#define	I_ARPA_INET		/**/

/* I_DBM:
 *	This symbol, if defined, indicates that <dbm.h> exists and should
 *	be included.
 */
/* I_RPCSVC_DBM:
 *	This symbol, if defined, indicates that <rpcsvc/dbm.h> exists and
 *	should be included.
 */
#define I_DBM	/**/
/*#define I_RPCSVC_DBM	/ **/

/* I_DLFCN:
 *	This symbol, if defined, indicates that <dlfcn.h> exists and should
 *	be included.
 */
#define I_DLFCN		/**/

/* I_FCNTL:
 *	This manifest constant tells the C program to include <fcntl.h>.
 */
/*#define I_FCNTL	/ **/

/* I_FLOAT:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <float.h> to get definition of symbols like DBL_MAX or
 *	DBL_MIN, i.e. machine dependent floating point values.
 */
#define I_FLOAT		/**/

/* I_GDBM:
 *	This symbol, if defined, indicates that <gdbm.h> exists and should
 *	be included.
 */
#define I_GDBM	/**/

/* I_LIMITS:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <limits.h> to get definition of symbols like WORD_BIT or
 *	LONG_MAX, i.e. machine dependant limitations.
 */
#define I_LIMITS		/**/

/* I_LOCALE:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <locale.h>.
 */
#define	I_LOCALE		/**/

/* I_MATH:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <math.h>.
 */
#define I_MATH		/**/

/* I_MEMORY:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <memory.h>.
 */
/*#define I_MEMORY		/ **/

/* I_NETINET_IN:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <netinet/in.h>. Otherwise, you may try <sys/in.h>.
 */
#define I_NETINET_IN	/**/

/* I_STDDEF:
 *	This symbol, if defined, indicates that <stddef.h> exists and should
 *	be included.
 */
#define I_STDDEF	/**/

/* I_STDLIB:
 *	This symbol, if defined, indicates that <stdlib.h> exists and should
 *	be included.
 */
#define I_STDLIB		/**/

/* I_STRING:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <string.h> (USG systems) instead of <strings.h> (BSD systems).
 */
#define I_STRING		/**/

/* I_SYS_DIR:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/dir.h>.
 */
#define I_SYS_DIR		/**/

/* I_SYS_FILE:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/file.h> to get definition of R_OK and friends.
 */
#define I_SYS_FILE		/**/

/* I_SYS_IOCTL:
 *	This symbol, if defined, indicates that <sys/ioctl.h> exists and should
 *	be included. Otherwise, include <sgtty.h> or <termio.h>.
 */
/* I_SYS_SOCKIO:
 *	This symbol, if defined, indicates the <sys/sockio.h> should be included
 *	to get socket ioctl options, like SIOCATMARK.
 */
#define	I_SYS_IOCTL		/**/
/*#define I_SYS_SOCKIO	/ **/

/* I_SYS_NDIR:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/ndir.h>.
 */
/*#define I_SYS_NDIR	/ **/

/* I_SYS_PARAM:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/param.h>.
 */
#define I_SYS_PARAM		/**/

/* I_SYS_POLL:
 *	This symbol, if defined, indicates that the program may include
 *	<sys/poll.h>.  When I_POLL is also defined, it's probably safest
 *	to only include <poll.h>.
 */
#define I_SYS_POLL	/**/

/* I_SYS_RESOURCE:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/resource.h>.
 */
#define I_SYS_RESOURCE		/**/

/* I_SYS_SELECT:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/select.h> in order to get definition of struct timeval.
 */
#define I_SYS_SELECT	/**/

/* I_SYS_STAT:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/stat.h>.
 */
#define	I_SYS_STAT		/**/

/* I_SYS_TIMES:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/times.h>.
 */
#define	I_SYS_TIMES		/**/

/* I_SYS_TYPES:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/types.h>.
 */
#define	I_SYS_TYPES		/**/

/* I_SYS_UN:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/un.h> to get UNIX domain socket definitions.
 */
#define I_SYS_UN		/**/

/* I_SYS_WAIT:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/wait.h>.
 */
#define I_SYS_WAIT	/**/

/* I_UNISTD:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <unistd.h>.
 */
#define I_UNISTD		/**/

/* I_UTIME:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <utime.h>.
 */
#define I_UTIME		/**/

/* I_VALUES:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <values.h> to get definition of symbols like MINFLOAT or
 *	MAXLONG, i.e. machine dependant limitations.  Probably, you
 *	should use <limits.h> instead, if it is available.
 */
#define I_VALUES		/**/

/* I_VFORK:
 *	This symbol, if defined, indicates to the C program that it should
 *	include vfork.h.
 */
/*#define I_VFORK	/ **/

/* STDCHAR:
 *	This symbol is defined to be the type of char used in stdio.h.
 *	It has the values "unsigned char" or "char".
 */
#define STDCHAR char	/**/

/* CAN_VAPROTO:
 *	This variable is defined on systems supporting prototype declaration
 *	of functions with a variable number of arguments.
 */
/* _V:
 *	This macro is used to declare function parameters in prototypes for
 *	functions with a variable number of parameters. Use double parentheses.
 *	For example:
 *
 *		int printf _V((char *fmt, ...));
 *
 *	Remember to use the plain simple _() macro when declaring a function
 *	with no variable number of arguments, since it might be possible to
 *	have a non-effect _V() macro and still get prototypes via _().
 */
#define CAN_VAPROTO	/**/
#ifdef CAN_VAPROTO
#define	_V(args) args
#else
#define	_V(args) ()
#endif

/* INTSIZE:
 *	This symbol contains the value of sizeof(int) so that the C
 *	preprocessor can make decisions based on it.
 */
/* LONGSIZE:
 *	This symbol contains the value of sizeof(long) so that the C
 *	preprocessor can make decisions based on it.
 */
/* SHORTSIZE:
 *	This symbol contains the value of sizeof(short) so that the C
 *	preprocessor can make decisions based on it.
 */
#define INTSIZE 4		/**/
#define LONGSIZE 4		/**/
#define SHORTSIZE 2		/**/

/* MULTIARCH:
 *	This symbol, if defined, signifies that the build
 *	process will produce some binary files that are going to be
 *	used in a cross-platform environment.  This is the case for
 *	example with the NeXT "fat" binaries that contain executables
 *	for several CPUs.
 */
/*#define MULTIARCH		/ **/

/* HAS_QUAD:
 *	This symbol, if defined, tells that there's a 64-bit integer type,
 *	Quad_t, and its unsigned counterpart, Uquad_t. QUADKIND will be one
 *	of QUAD_IS_INT, QUAD_IS_LONG, QUAD_IS_LONG_LONG, QUAD_IS_INT64_T,
 *	or QUAD_IS___INT64.
 */
#define HAS_QUAD	/**/
#ifdef HAS_QUAD
#   define Quad_t long long	/**/
#   define Uquad_t unsigned long long	/**/
#   define QUADKIND 3	/**/
#   define QUAD_IS_INT	1
#   define QUAD_IS_LONG	2
#   define QUAD_IS_LONG_LONG	3
#   define QUAD_IS_INT64_T	4
#   define QUAD_IS___INT64	5
#endif

/* HAS_ACCESSX:
 *	This symbol, if defined, indicates that the accessx routine is
 *	available to do extended access checks.
 */
/*#define HAS_ACCESSX		/ **/

/* HAS_EACCESS:
 *	This symbol, if defined, indicates that the eaccess routine is
 *	available to do extended access checks.
 */
#define HAS_EACCESS		/**/

/* I_SYS_ACCESS:
 *     This symbol, if defined, indicates to the C program that it should
 *     include <sys/access.h>.
 */
/*#define   I_SYS_ACCESS                / **/

/* I_SYS_SECURITY:
 *     This symbol, if defined, indicates to the C program that it should
 *     include <sys/security.h>.
 */
/*#define   I_SYS_SECURITY	/ **/

/* MEM_ALIGNBYTES:
 *	This symbol contains the number of bytes required to align a
 *	double, or a long double when applicable. Usual values are 2,
 *	4 and 8. The default is eight, for safety.  For cross-compiling
 *  	or multiarch support, Configure will set a minimum of 8.
 */
#define MEM_ALIGNBYTES 8

/* BYTEORDER:
 *	This symbol holds the hexadecimal constant defined in byteorder,
 *	in a UV, i.e. 0x1234 or 0x4321 or 0x12345678, etc...
 *	If the compiler supports cross-compiling or multiple-architecture
 *	binaries, use compiler-defined macros to
 *	determine the byte order.
 */
#if defined(MULTIARCH)
#  ifdef __LITTLE_ENDIAN__
#    if LONGSIZE == 4
#      define BYTEORDER 0x1234
#    else
#      if LONGSIZE == 8
#        define BYTEORDER 0x12345678
#      endif
#    endif
#  else
#    ifdef __BIG_ENDIAN__
#      if LONGSIZE == 4
#        define BYTEORDER 0x4321
#      else
#        if LONGSIZE == 8
#          define BYTEORDER 0x87654321
#        endif
#      endif
#    endif
#  endif
#else
#define BYTEORDER 0x12345678	/* large digits for MSB */
#endif

/* CHARBITS:
 *	This symbol contains the size of a char, so that the C preprocessor
 *	can make decisions based on it.
 */
#define CHARBITS 8		/**/

/* CASTI32:
 *	This symbol is defined if the C compiler can cast negative
 *	or large floating point numbers to 32-bit ints.
 */
#define	CASTI32		/**/

/* CASTNEGFLOAT:
 *	This symbol is defined if the C compiler can cast negative
 *	numbers to unsigned longs, ints and shorts.
 */
/* CASTFLAGS:
 *	This symbol contains flags that say what difficulties the compiler
 *	has casting odd floating values to unsigned long:
 *		0 = ok
 *		1 = couldn't cast < 0
 *		2 = couldn't cast >= 0x80000000
 *		4 = couldn't cast in argument expression list
 */
/*#define	CASTNEGFLOAT		/ **/
#define CASTFLAGS 1		/**/

/* VOID_CLOSEDIR:
 *	This symbol, if defined, indicates that the closedir() routine
 *	does not return a value.
 */
/*#define VOID_CLOSEDIR		/ **/

/* HAS_FD_SET:
 *	This symbol, when defined, indicates presence of the fd_set typedef
 *	in <sys/types.h>
 */
#define HAS_FD_SET	/**/

/* Gconvert:
 *	This preprocessor macro is defined to convert a floating point
 *	number to a string without a trailing decimal point.  This
 *	emulates the behavior of sprintf("%g"), but is sometimes much more
 *	efficient.  If gconvert() is not available, but gcvt() drops the
 *	trailing decimal point, then gcvt() is used.  If all else fails,
 *	a macro using sprintf("%g") is used. Arguments for the Gconvert
 *	macro are: value, number of digits, whether trailing zeros should
 *	be retained, and the output buffer.
 *	The usual values are:
 *		d_Gconvert='gconvert((x),(n),(t),(b))'
 *		d_Gconvert='gcvt((x),(n),(b))'
 *		d_Gconvert='sprintf((b),"%.*g",(n),(x))'
 *	The last two assume trailing zeros should not be kept.
 */
#define Gconvert(x,n,t,b) gcvt((x),(n),(b))

/* HAS_GETPAGESIZE:
 *	This symbol, if defined, indicates that the getpagesize system call
 *	is available to get system page size, which is the granularity of
 *	many memory management calls.
 */
#define HAS_GETPAGESIZE		/**/

/* HAS_GNULIBC:
 *	This symbol, if defined, indicates to the C program that
 *	the GNU C library is being used.  A better check is to use
 *	the __GLIBC__ and __GLIBC_MINOR__ symbols supplied with glibc.
 */
#define HAS_GNULIBC  	/**/
#if defined(HAS_GNULIBC) && !defined(_GNU_SOURCE)
#   define _GNU_SOURCE
#endif

/* HAS_ISASCII:
 *	This manifest constant lets the C program know that isascii
 *	is available.
 */
#define HAS_ISASCII		/**/

/* HAS_LCHOWN:
 *	This symbol, if defined, indicates that the lchown routine is
 *	available to operate on a symbolic link (instead of following the
 *	link).
 */
#define HAS_LCHOWN		/**/

/* HAS_OPEN3:
 *	This manifest constant lets the C program know that the three
 *	argument form of open(2) is available.
 */
#define HAS_OPEN3		/**/

/* HAS_SAFE_BCOPY:
 *	This symbol, if defined, indicates that the bcopy routine is available
 *	to copy potentially overlapping memory blocks. Normally, you should
 *	probably use memmove() or memcpy(). If neither is defined, roll your
 *	own version.
 */
/*#define HAS_SAFE_BCOPY	/ **/

/* HAS_SAFE_MEMCPY:
 *	This symbol, if defined, indicates that the memcpy routine is available
 *	to copy potentially overlapping memory blocks.  If you need to
 *	copy overlapping memory blocks, you should check HAS_MEMMOVE and
 *	use memmove() instead, if available.
 */
/*#define HAS_SAFE_MEMCPY	/ **/

/* HAS_SANE_MEMCMP:
 *	This symbol, if defined, indicates that the memcmp routine is available
 *	and can be used to compare relative magnitudes of chars with their high
 *	bits set.  If it is not defined, roll your own version.
 */
#define HAS_SANE_MEMCMP	/**/

/* HAS_SIGACTION:
 *	This symbol, if defined, indicates that Vr4's sigaction() routine
 *	is available.
 */
#define HAS_SIGACTION	/**/

/* HAS_SIGINFO_SI_ERRNO:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_errno member
 */
/* HAS_SIGINFO_SI_PID:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_pid member
 */
/* HAS_SIGINFO_SI_UID:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_uid member
 */
/* HAS_SIGINFO_SI_ADDR:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_addr member
 */
/* HAS_SIGINFO_SI_STATUS:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_status member
 */
/* HAS_SIGINFO_SI_BAND:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_band member
 */
/* HAS_SIGINFO_SI_VALUE:
 *	This symbol, if defined, indicates that siginfo_t has the
 *	si_value member
 */
#define	HAS_SIGINFO_SI_ERRNO	/**/
#define	HAS_SIGINFO_SI_PID	/**/
#define	HAS_SIGINFO_SI_UID	/**/
#define	HAS_SIGINFO_SI_ADDR	/**/
#define	HAS_SIGINFO_SI_STATUS	/**/
#define	HAS_SIGINFO_SI_BAND	/**/
#define	HAS_SIGINFO_SI_VALUE	/**/

/* HAS_SIGSETJMP:
 *	This variable indicates to the C program that the sigsetjmp()
 *	routine is available to save the calling process's registers
 *	and stack environment for later use by siglongjmp(), and
 *	to optionally save the process's signal mask.  See
 *	Sigjmp_buf, Sigsetjmp, and Siglongjmp.
 */
/* Sigjmp_buf:
 *	This is the buffer type to be used with Sigsetjmp and Siglongjmp.
 */
/* Sigsetjmp:
 *	This macro is used in the same way as sigsetjmp(), but will invoke
 *	traditional setjmp() if sigsetjmp isn't available.
 *	See HAS_SIGSETJMP.
 */
/* Siglongjmp:
 *	This macro is used in the same way as siglongjmp(), but will invoke
 *	traditional longjmp() if siglongjmp isn't available.
 *	See HAS_SIGSETJMP.
 */
#define HAS_SIGSETJMP	/**/
#ifdef HAS_SIGSETJMP
#define Sigjmp_buf sigjmp_buf
#define Sigsetjmp(buf,save_mask) sigsetjmp((buf),(save_mask))
#define Siglongjmp(buf,retval) siglongjmp((buf),(retval))
#else
#define Sigjmp_buf jmp_buf
#define Sigsetjmp(buf,save_mask) setjmp((buf))
#define Siglongjmp(buf,retval) longjmp((buf),(retval))
#endif

/* HAS_STATIC_INLINE:
 *	This symbol, if defined, indicates that the C compiler supports
 *	C99-style static inline.  That is, the function can't be called
 *	from another translation unit.
 */
/* PERL_STATIC_INLINE:
 *	This symbol gives the best-guess incantation to use for static
 *	inline functions.  If HAS_STATIC_INLINE is defined, this will
 *	give C99-style inline.  If HAS_STATIC_INLINE is not defined,
 *	this will give a plain 'static'.  It will always be defined
 *	to something that gives static linkage.
 *	Possibilities include
 *		static inline       (c99)
 *		static __inline__   (gcc -ansi)
 *		static __inline     (MSVC)
 *		static _inline      (older MSVC)
 *		static              (c89 compilers)
 */
#define HAS_STATIC_INLINE				/**/
#define PERL_STATIC_INLINE static __inline__	/**/

/* USE_STDIO_PTR:
 *	This symbol is defined if the _ptr and _cnt fields (or similar)
 *	of the stdio FILE structure can be used to access the stdio buffer
 *	for a file handle.  If this is defined, then the FILE_ptr(fp)
 *	and FILE_cnt(fp) macros will also be defined and should be used
 *	to access these fields.
 */
/* FILE_ptr:
 *	This macro is used to access the _ptr field (or equivalent) of the
 *	FILE structure pointed to by its argument. This macro will always be
 *	defined if USE_STDIO_PTR is defined.
 */
/* STDIO_PTR_LVALUE:
 *	This symbol is defined if the FILE_ptr macro can be used as an
 *	lvalue.
 */
/* FILE_cnt:
 *	This macro is used to access the _cnt field (or equivalent) of the
 *	FILE structure pointed to by its argument. This macro will always be
 *	defined if USE_STDIO_PTR is defined.
 */
/* STDIO_CNT_LVALUE:
 *	This symbol is defined if the FILE_cnt macro can be used as an
 *	lvalue.
 */
/* STDIO_PTR_LVAL_SETS_CNT:
 *	This symbol is defined if using the FILE_ptr macro as an lvalue
 *	to increase the pointer by n has the side effect of decreasing the
 *	value of File_cnt(fp) by n.
 */
/* STDIO_PTR_LVAL_NOCHANGE_CNT:
 *	This symbol is defined if using the FILE_ptr macro as an lvalue
 *	to increase the pointer by n leaves File_cnt(fp) unchanged.
 */
/*#define USE_STDIO_PTR 	/ **/
#ifdef USE_STDIO_PTR
#define FILE_ptr(fp)	((fp)->_IO_read_ptr)
/*#define STDIO_PTR_LVALUE 		/ **/
#define FILE_cnt(fp)	((fp)->_IO_read_end - (fp)->_IO_read_ptr)
/*#define STDIO_CNT_LVALUE 		/ **/
/*#define STDIO_PTR_LVAL_SETS_CNT	/ **/
/*#define STDIO_PTR_LVAL_NOCHANGE_CNT	/ **/
#endif

/* USE_STDIO_BASE:
 *	This symbol is defined if the _base field (or similar) of the
 *	stdio FILE structure can be used to access the stdio buffer for
 *	a file handle.  If this is defined, then the FILE_base(fp) macro
 *	will also be defined and should be used to access this field.
 *	Also, the FILE_bufsiz(fp) macro will be defined and should be used
 *	to determine the number of bytes in the buffer.  USE_STDIO_BASE
 *	will never be defined unless USE_STDIO_PTR is.
 */
/* FILE_base:
 *	This macro is used to access the _base field (or equivalent) of the
 *	FILE structure pointed to by its argument. This macro will always be
 *	defined if USE_STDIO_BASE is defined.
 */
/* FILE_bufsiz:
 *	This macro is used to determine the number of bytes in the I/O
 *	buffer pointed to by _base field (or equivalent) of the FILE
 *	structure pointed to its argument. This macro will always be defined
 *	if USE_STDIO_BASE is defined.
 */
/*#define USE_STDIO_BASE 	/ **/
#ifdef USE_STDIO_BASE
#define FILE_base(fp)	((fp)->_IO_read_base)
#define FILE_bufsiz(fp)	((fp)->_IO_read_end - (fp)->_IO_read_base)
#endif

/* HAS_VPRINTF:
 *	This symbol, if defined, indicates that the vprintf routine is available
 *	to printf with a pointer to an argument list.  If unavailable, you
 *	may need to write your own, probably in terms of _doprnt().
 */
/* USE_CHAR_VSPRINTF:
 *	This symbol is defined if this system has vsprintf() returning type
 *	(char*).  The trend seems to be to declare it as "int vsprintf()".  It
 *	is up to the package author to declare vsprintf correctly based on the
 *	symbol.
 */
#define HAS_VPRINTF	/**/
/*#define USE_CHAR_VSPRINTF 	/ **/

/* DOUBLESIZE:
 *	This symbol contains the size of a double, so that the C preprocessor
 *	can make decisions based on it.
 */
#define DOUBLESIZE 8		/**/

/* I_TIME:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <time.h>.
 */
/* I_SYS_TIME:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/time.h>.
 */
/* I_SYS_TIME_KERNEL:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <sys/time.h> with KERNEL defined.
 */
/* HAS_TM_TM_ZONE:
 *	This symbol, if defined, indicates to the C program that
 *	the struct tm has a tm_zone field.
 */
/* HAS_TM_TM_GMTOFF:
 *	This symbol, if defined, indicates to the C program that
 *	the struct tm has a tm_gmtoff field.
 */
#define I_TIME		/**/
#define I_SYS_TIME		/**/
/*#define I_SYS_TIME_KERNEL		/ **/
#define HAS_TM_TM_ZONE		/**/
#define HAS_TM_TM_GMTOFF		/**/

/* VAL_O_NONBLOCK:
 *	This symbol is to be used during open() or fcntl(F_SETFL) to turn on
 *	non-blocking I/O for the file descriptor. Note that there is no way
 *	back, i.e. you cannot turn it blocking again this way. If you wish to
 *	alternatively switch between blocking and non-blocking, use the
 *	ioctl(FIOSNBIO) call instead, but that is not supported by all devices.
 */
/* VAL_EAGAIN:
 *	This symbol holds the errno error code set by read() when no data was
 *	present on the non-blocking file descriptor.
 */
/* RD_NODATA:
 *	This symbol holds the return code from read() when no data is present
 *	on the non-blocking file descriptor. Be careful! If EOF_NONBLOCK is
 *	not defined, then you can't distinguish between no data and EOF by
 *	issuing a read(). You'll have to find another way to tell for sure!
 */
/* EOF_NONBLOCK:
 *	This symbol, if defined, indicates to the C program that a read() on
 *	a non-blocking file descriptor will return 0 on EOF, and not the value
 *	held in RD_NODATA (-1 usually, in that case!).
 */
#define VAL_O_NONBLOCK O_NONBLOCK
#define VAL_EAGAIN EAGAIN
#define RD_NODATA -1
#define EOF_NONBLOCK

/* PTRSIZE:
 *	This symbol contains the size of a pointer, so that the C preprocessor
 *	can make decisions based on it.  It will be sizeof(void *) if
 *	the compiler supports (void *); otherwise it will be
 *	sizeof(char *).
 */
#define PTRSIZE 4		/**/

/* Drand01:
 *	This macro is to be used to generate uniformly distributed
 *	random numbers over the range [0., 1.[.  You may have to supply
 *	an 'extern double drand48();' in your program since SunOS 4.1.3
 *	doesn't provide you with anything relevant in its headers.
 *	See HAS_DRAND48_PROTO.
 */
/* Rand_seed_t:
 *	This symbol defines the type of the argument of the
 *	random seed function.
 */
/* seedDrand01:
 *	This symbol defines the macro to be used in seeding the
 *	random number generator (see Drand01).
 */
/* RANDBITS:
 *	This symbol indicates how many bits are produced by the
 *	function used to generate normalized random numbers.
 *	Values include 15, 16, 31, and 48.
 */
#define Drand01()		Perl_drand48()		/**/
#define Rand_seed_t		U32		/**/
#define seedDrand01(x)	Perl_drand48_init((Rand_seed_t)x)	/**/
#define RANDBITS		48		/**/

/* SSize_t:
 *	This symbol holds the type used by functions that return
 *	a count of bytes or an error condition.  It must be a signed type.
 *	It is usually ssize_t, but may be long or int, etc.
 *	It may be necessary to include <sys/types.h> or <unistd.h>
 *	to get any typedef'ed information.
 *	We will pick a type such that sizeof(SSize_t) == sizeof(Size_t).
 */
#define SSize_t ssize_t	 /* signed count of bytes */

/* EBCDIC:
 *	This symbol, if defined, indicates that this system uses
 *	EBCDIC encoding.
 */
/*#define	EBCDIC 		/ **/

/* ARCHLIB:
 *	This variable, if defined, holds the name of the directory in
 *	which the user wants to put architecture-dependent public
 *	library files for perl5.  It is most often a local directory
 *	such as /usr/local/lib.  Programs using this variable must be
 *	prepared to deal with filename expansion.  If ARCHLIB is the
 *	same as PRIVLIB, it is not defined, since presumably the
 *	program already searches PRIVLIB.
 */
/* ARCHLIB_EXP:
 *	This symbol contains the ~name expanded version of ARCHLIB, to be used
 *	in programs that are not prepared to deal with ~ expansion at run-time.
 */
#define ARCHLIB "/usr/lib/arm-linux-gnueabihf/perl/5.24"		/**/
#define ARCHLIB_EXP "/usr/lib/arm-linux-gnueabihf/perl/5.24"		/**/

/* BIN:
 *	This symbol holds the path of the bin directory where the package will
 *	be installed. Program must be prepared to deal with ~name substitution.
 */
/* BIN_EXP:
 *	This symbol is the filename expanded version of the BIN symbol, for
 *	programs that do not want to deal with that at run-time.
 */
/* PERL_RELOCATABLE_INC:
 *	This symbol, if defined, indicates that we'd like to relocate entries
 *	in @INC at run time based on the location of the perl binary.
 */
#define BIN "/usr/bin"	/**/
#define BIN_EXP "/usr/bin"	/**/
#define PERL_RELOCATABLE_INC "undef" 		/**/

/* PERL_INC_VERSION_LIST:
 *	This variable specifies the list of subdirectories in over
 *	which perl.c:incpush() and lib/lib.pm will automatically
 *	search when adding directories to @INC, in a format suitable
 *	for a C initialization string.  See the inc_version_list entry
 *	in Porting/Glossary for more details.
 */
/*#define PERL_INC_VERSION_LIST 0		/ **/

/* INSTALL_USR_BIN_PERL:
 *	This symbol, if defined, indicates that Perl is to be installed
 * 	also as /usr/bin/perl.
 */
/*#define INSTALL_USR_BIN_PERL	/ **/

/* PERL_OTHERLIBDIRS:
 *	This variable contains a colon-separated set of paths for the perl
 *	binary to search for additional library files or modules.
 *	These directories will be tacked to the end of @INC.
 *	Perl will automatically search below each path for version-
 *	and architecture-specific directories.  See PERL_INC_VERSION_LIST
 *	for more details.
 */
/*#define PERL_OTHERLIBDIRS " "		/ **/

/* PRIVLIB:
 *	This symbol contains the name of the private library for this package.
 *	The library is private in the sense that it needn't be in anyone's
 *	execution path, but it should be accessible by the world.  The program
 *	should be prepared to do ~ expansion.
 */
/* PRIVLIB_EXP:
 *	This symbol contains the ~name expanded version of PRIVLIB, to be used
 *	in programs that are not prepared to deal with ~ expansion at run-time.
 */
#define PRIVLIB "/usr/share/perl/5.24"		/**/
#define PRIVLIB_EXP "/usr/share/perl/5.24"		/**/

/* SITEARCH:
 *	This symbol contains the name of the private library for this package.
 *	The library is private in the sense that it needn't be in anyone's
 *	execution path, but it should be accessible by the world.  The program
 *	should be prepared to do ~ expansion.
 *	The standard distribution will put nothing in this directory.
 *	After perl has been installed, users may install their own local
 *	architecture-dependent modules in this directory with
 *		MakeMaker Makefile.PL
 *	or equivalent.  See INSTALL for details.
 */
/* SITEARCH_EXP:
 *	This symbol contains the ~name expanded version of SITEARCH, to be used
 *	in programs that are not prepared to deal with ~ expansion at run-time.
 */
#define SITEARCH "/usr/local/lib/arm-linux-gnueabihf/perl/5.24.1"		/**/
#define SITEARCH_EXP "/usr/local/lib/arm-linux-gnueabihf/perl/5.24.1"		/**/

/* SITELIB:
 *	This symbol contains the name of the private library for this package.
 *	The library is private in the sense that it needn't be in anyone's
 *	execution path, but it should be accessible by the world.  The program
 *	should be prepared to do ~ expansion.
 *	The standard distribution will put nothing in this directory.
 *	After perl has been installed, users may install their own local
 *	architecture-independent modules in this directory with
 *		MakeMaker Makefile.PL
 *	or equivalent.  See INSTALL for details.
 */
/* SITELIB_EXP:
 *	This symbol contains the ~name expanded version of SITELIB, to be used
 *	in programs that are not prepared to deal with ~ expansion at run-time.
 */
/* SITELIB_STEM:
 *	This define is SITELIB_EXP with any trailing version-specific component
 *	removed.  The elements in inc_version_list (inc_version_list.U) can
 *	be tacked onto this variable to generate a list of directories to search.
 */
#define SITELIB "/usr/local/share/perl/5.24.1"		/**/
#define SITELIB_EXP "/usr/local/share/perl/5.24.1"		/**/
#define SITELIB_STEM ""		/**/

/* PERL_VENDORARCH:
 *	If defined, this symbol contains the name of a private library.
 *	The library is private in the sense that it needn't be in anyone's
 *	execution path, but it should be accessible by the world.
 *	It may have a ~ on the front.
 *	The standard distribution will put nothing in this directory.
 *	Vendors who distribute perl may wish to place their own
 *	architecture-dependent modules and extensions in this directory with
 *		MakeMaker Makefile.PL INSTALLDIRS=vendor
 *	or equivalent.  See INSTALL for details.
 */
/* PERL_VENDORARCH_EXP:
 *	This symbol contains the ~name expanded version of PERL_VENDORARCH, to be used
 *	in programs that are not prepared to deal with ~ expansion at run-time.
 */
#define PERL_VENDORARCH "/usr/lib/arm-linux-gnueabihf/perl5/5.24"		/**/
#define PERL_VENDORARCH_EXP "/usr/lib/arm-linux-gnueabihf/perl5/5.24"		/**/

/* PERL_VENDORLIB_EXP:
 *	This symbol contains the ~name expanded version of VENDORLIB, to be used
 *	in programs that are not prepared to deal with ~ expansion at run-time.
 */
/* PERL_VENDORLIB_STEM:
 *	This define is PERL_VENDORLIB_EXP with any trailing version-specific component
 *	removed.  The elements in inc_version_list (inc_version_list.U) can
 *	be tacked onto this variable to generate a list of directories to search.
 */
#define PERL_VENDORLIB_EXP "/usr/share/perl5"		/**/
#define PERL_VENDORLIB_STEM ""		/**/

/* OSNAME:
 *	This symbol contains the name of the operating system, as determined
 *	by Configure.  You shouldn't rely on it too much; the specific
 *	feature tests from Configure are generally more reliable.
 */
/* OSVERS:
 *	This symbol contains the version of the operating system, as determined
 *	by Configure.  You shouldn't rely on it too much; the specific
 *	feature tests from Configure are generally more reliable.
 */
#define OSNAME "linux"		/**/
#define OSVERS "3.16.0"		/**/

/* CAT2:
 *	This macro concatenates 2 tokens together.
 */
/* STRINGIFY:
 *	This macro surrounds its token with double quotes.
 */
#if 42 == 1
#define CAT2(a,b)	a/**/b
#define STRINGIFY(a)	"a"
#endif
#if 42 == 42
#define PeRl_CaTiFy(a, b)	a ## b
#define PeRl_StGiFy(a)	#a
#define CAT2(a,b)	PeRl_CaTiFy(a,b)
#define StGiFy(a)	PeRl_StGiFy(a)
#define STRINGIFY(a)	PeRl_StGiFy(a)
#endif
#if 42 != 1 && 42 != 42
#include "Bletch: How does this C preprocessor concatenate tokens?"
#endif

/* CPPSTDIN:
 *	This symbol contains the first part of the string which will invoke
 *	the C preprocessor on the standard input and produce to standard
 *	output.	 Typical value of "cc -E" or "/lib/cpp", but it can also
 *	call a wrapper. See CPPRUN.
 */
/* CPPMINUS:
 *	This symbol contains the second part of the string which will invoke
 *	the C preprocessor on the standard input and produce to standard
 *	output.  This symbol will have the value "-" if CPPSTDIN needs a minus
 *	to specify standard input, otherwise the value is "".
 */
/* CPPRUN:
 *	This symbol contains the string which will invoke a C preprocessor on
 *	the standard input and produce to standard output. It needs to end
 *	with CPPLAST, after all other preprocessor flags have been specified.
 *	The main difference with CPPSTDIN is that this program will never be a
 *	pointer to a shell wrapper, i.e. it will be empty if no preprocessor is
 *	available directly to the user. Note that it may well be different from
 *	the preprocessor used to compile the C program.
 */
/* CPPLAST:
 *	This symbol is intended to be used along with CPPRUN in the same manner
 *	symbol CPPMINUS is used with CPPSTDIN. It contains either "-" or "".
 */
#define CPPSTDIN "arm-linux-gnueabihf-gcc  -E"
#define CPPMINUS "-"
#define CPPRUN "arm-linux-gnueabihf-gcc  -E"
#define CPPLAST "-"

/* HAS_ACCESS:
 *	This manifest constant lets the C program know that the access()
 *	system call is available to check for accessibility using real UID/GID.
 *	(always present on UNIX.)
 */
#define HAS_ACCESS		/**/

/* HASATTRIBUTE_FORMAT:
 *	Can we handle GCC attribute for checking printf-style formats
 */
/* PRINTF_FORMAT_NULL_OK:
 *	Allows __printf__ format to be null when checking printf-style
 */
/* HASATTRIBUTE_MALLOC:
 *	Can we handle GCC attribute for malloc-style functions.
 */
/* HASATTRIBUTE_NONNULL:
 *	Can we handle GCC attribute for nonnull function parms.
 */
/* HASATTRIBUTE_NORETURN:
 *	Can we handle GCC attribute for functions that do not return
 */
/* HASATTRIBUTE_PURE:
 *	Can we handle GCC attribute for pure functions
 */
/* HASATTRIBUTE_UNUSED:
 *	Can we handle GCC attribute for unused variables and arguments
 */
/* HASATTRIBUTE_DEPRECATED:
 *	Can we handle GCC attribute for marking deprecated APIs
 */
/* HASATTRIBUTE_WARN_UNUSED_RESULT:
 *	Can we handle GCC attribute for warning on unused results
 */
#define HASATTRIBUTE_DEPRECATED	/**/
#define HASATTRIBUTE_FORMAT	/**/
#define PRINTF_FORMAT_NULL_OK	/**/
#define HASATTRIBUTE_NORETURN	/**/
#define HASATTRIBUTE_MALLOC	/**/
#define HASATTRIBUTE_NONNULL	/**/
#define HASATTRIBUTE_PURE	/**/
#define HASATTRIBUTE_UNUSED	/**/
#define HASATTRIBUTE_WARN_UNUSED_RESULT	/**/

/* HAS_BACKTRACE:
 *	This symbol, if defined, indicates that the backtrace() routine is
 *	available to get a stack trace.  The <execinfo.h> header must be
 *	included to use this routine.
 */
#define HAS_BACKTRACE	/**/

/* HASCONST:
 *	This symbol, if defined, indicates that this C compiler knows about
 *	the const type. There is no need to actually test for that symbol
 *	within your programs. The mere use of the "const" keyword will
 *	trigger the necessary tests.
 */
#define HASCONST	/**/
#ifndef HASCONST
#define const
#endif

/* HAS_CSH:
 *	This symbol, if defined, indicates that the C-shell exists.
 */
/* CSH:
 *	This symbol, if defined, contains the full pathname of csh.
 */
/*#define HAS_CSH		/ **/
#ifdef HAS_CSH
#define CSH "csh"	/**/
#endif

/* HAS_DLADDR:
 *	This symbol, if defined, indicates that the dladdr() routine is
 *	available to query dynamic linker information for an address.
 *	The <dlfcn.h> header must be included to use this routine.
 */
#define HAS_DLADDR	/**/

/* SETUID_SCRIPTS_ARE_SECURE_NOW:
 *	This symbol, if defined, indicates that the bug that prevents
 *	setuid scripts from being secure is not present in this kernel.
 */
/* DOSUID:
 *	This symbol, if defined, indicates that the C program should
 *	check the script that it is executing for setuid/setgid bits, and
 *	attempt to emulate setuid/setgid on systems that have disabled
 *	setuid #! scripts because the kernel can't do it securely.
 *	It is up to the package designer to make sure that this emulation
 *	is done securely.  Among other things, it should do an fstat on
 *	the script it just opened to make sure it really is a setuid/setgid
 *	script, it should make sure the arguments passed correspond exactly
 *	to the argument on the #! line, and it should not trust any
 *	subprocesses to which it must pass the filename rather than the
 *	file descriptor of the script to be executed.
 */
/*#define SETUID_SCRIPTS_ARE_SECURE_NOW	/ **/
/*#define DOSUID		/ **/

/* HAS_ENDGRENT:
 *	This symbol, if defined, indicates that the getgrent routine is
 *	available for finalizing sequential access of the group database.
 */
#define HAS_ENDGRENT		/**/

/* HAS_ENDHOSTENT:
 *	This symbol, if defined, indicates that the endhostent() routine is
 *	available to close whatever was being used for host queries.
 */
#define HAS_ENDHOSTENT		/**/

/* HAS_ENDNETENT:
 *	This symbol, if defined, indicates that the endnetent() routine is
 *	available to close whatever was being used for network queries.
 */
#define HAS_ENDNETENT		/**/

/* HAS_ENDPROTOENT:
 *	This symbol, if defined, indicates that the endprotoent() routine is
 *	available to close whatever was being used for protocol queries.
 */
#define HAS_ENDPROTOENT		/**/

/* HAS_ENDPWENT:
 *	This symbol, if defined, indicates that the getgrent routine is
 *	available for finalizing sequential access of the passwd database.
 */
#define HAS_ENDPWENT		/**/

/* HAS_ENDSERVENT:
 *	This symbol, if defined, indicates that the endservent() routine is
 *	available to close whatever was being used for service queries.
 */
#define HAS_ENDSERVENT		/**/

/* FLEXFILENAMES:
 *	This symbol, if defined, indicates that the system supports filenames
 *	longer than 14 characters.
 */
#define	FLEXFILENAMES		/**/

/* HAS_GETGRENT:
 *	This symbol, if defined, indicates that the getgrent routine is
 *	available for sequential access of the group database.
 */
#define HAS_GETGRENT		/**/

/* HAS_GETHOSTBYADDR:
 *	This symbol, if defined, indicates that the gethostbyaddr() routine is
 *	available to look up hosts by their IP addresses.
 */
#define HAS_GETHOSTBYADDR		/**/

/* HAS_GETHOSTBYNAME:
 *	This symbol, if defined, indicates that the gethostbyname() routine is
 *	available to look up host names in some data base or other.
 */
#define HAS_GETHOSTBYNAME		/**/

/* HAS_GETHOSTENT:
 *	This symbol, if defined, indicates that the gethostent() routine is
 *	available to look up host names in some data base or another.
 */
#define HAS_GETHOSTENT		/**/

/* HAS_GETHOSTNAME:
 *	This symbol, if defined, indicates that the C program may use the
 *	gethostname() routine to derive the host name.  See also HAS_UNAME
 *	and PHOSTNAME.
 */
/* HAS_UNAME:
 *	This symbol, if defined, indicates that the C program may use the
 *	uname() routine to derive the host name.  See also HAS_GETHOSTNAME
 *	and PHOSTNAME.
 */
/* PHOSTNAME:
 *	This symbol, if defined, indicates the command to feed to the
 *	popen() routine to derive the host name.  See also HAS_GETHOSTNAME
 *	and HAS_UNAME.	Note that the command uses a fully qualified path,
 *	so that it is safe even if used by a process with super-user
 *	privileges.
 */
/* HAS_PHOSTNAME:
 *	This symbol, if defined, indicates that the C program may use the
 *	contents of PHOSTNAME as a command to feed to the popen() routine
 *	to derive the host name.
 */
#define HAS_GETHOSTNAME	/**/
#define HAS_UNAME		/**/
/*#define HAS_PHOSTNAME	/ **/
#ifdef HAS_PHOSTNAME
#define PHOSTNAME "/bin/hostname"	/* How to get the host name */
#endif

/* HAS_GETNETBYADDR:
 *	This symbol, if defined, indicates that the getnetbyaddr() routine is
 *	available to look up networks by their IP addresses.
 */
#define HAS_GETNETBYADDR		/**/

/* HAS_GETNETBYNAME:
 *	This symbol, if defined, indicates that the getnetbyname() routine is
 *	available to look up networks by their names.
 */
#define HAS_GETNETBYNAME		/**/

/* HAS_GETNETENT:
 *	This symbol, if defined, indicates that the getnetent() routine is
 *	available to look up network names in some data base or another.
 */
#define HAS_GETNETENT		/**/

/* HAS_GETPROTOENT:
 *	This symbol, if defined, indicates that the getprotoent() routine is
 *	available to look up protocols in some data base or another.
 */
#define HAS_GETPROTOENT		/**/

/* HAS_GETPGRP:
 *	This symbol, if defined, indicates that the getpgrp routine is
 *	available to get the current process group.
 */
/* USE_BSD_GETPGRP:
 *	This symbol, if defined, indicates that getpgrp needs one
 *	arguments whereas USG one needs none.
 */
#define HAS_GETPGRP		/**/
/*#define USE_BSD_GETPGRP	/ **/

/* HAS_GETPROTOBYNAME:
 *	This symbol, if defined, indicates that the getprotobyname()
 *	routine is available to look up protocols by their name.
 */
/* HAS_GETPROTOBYNUMBER:
 *	This symbol, if defined, indicates that the getprotobynumber()
 *	routine is available to look up protocols by their number.
 */
#define HAS_GETPROTOBYNAME		/**/
#define HAS_GETPROTOBYNUMBER		/**/

/* HAS_GETPWENT:
 *	This symbol, if defined, indicates that the getpwent routine is
 *	available for sequential access of the passwd database.
 *	If this is not available, the older getpw() function may be available.
 */
#define HAS_GETPWENT		/**/

/* HAS_GETSERVENT:
 *	This symbol, if defined, indicates that the getservent() routine is
 *	available to look up network services in some data base or another.
 */
#define HAS_GETSERVENT		/**/

/* HAS_GETSERVBYNAME:
 *	This symbol, if defined, indicates that the getservbyname()
 *	routine is available to look up services by their name.
 */
/* HAS_GETSERVBYPORT:
 *	This symbol, if defined, indicates that the getservbyport()
 *	routine is available to look up services by their port.
 */
#define HAS_GETSERVBYNAME		/**/
#define HAS_GETSERVBYPORT		/**/

/* HAS_HTONL:
 *	This symbol, if defined, indicates that the htonl() routine (and
 *	friends htons() ntohl() ntohs()) are available to do network
 *	order byte swapping.
 */
/* HAS_HTONS:
 *	This symbol, if defined, indicates that the htons() routine (and
 *	friends htonl() ntohl() ntohs()) are available to do network
 *	order byte swapping.
 */
/* HAS_NTOHL:
 *	This symbol, if defined, indicates that the ntohl() routine (and
 *	friends htonl() htons() ntohs()) are available to do network
 *	order byte swapping.
 */
/* HAS_NTOHS:
 *	This symbol, if defined, indicates that the ntohs() routine (and
 *	friends htonl() htons() ntohl()) are available to do network
 *	order byte swapping.
 */
#define HAS_HTONL		/**/
#define HAS_HTONS		/**/
#define HAS_NTOHL		/**/
#define HAS_NTOHS		/**/

/* HAS_LONG_DOUBLE:
 *	This symbol will be defined if the C compiler supports long
 *	doubles.
 */
/* LONG_DOUBLESIZE:
 *	This symbol contains the size of a long double, so that the
 *	C preprocessor can make decisions based on it.  It is only
 *	defined if the system supports long doubles.  Note that this
 *	is sizeof(long double), which may include unused bytes.
 */
/* HAS_LDEXPL:
 *	This symbol, if defined, indicates that the ldexpl routine is
 *	available to shift a long double floating-point number
 *	by an integral power of 2.
 */
/* LONG_DOUBLEKIND:
 *	LONG_DOUBLEKIND will be one of
 *	LONG_DOUBLE_IS_DOUBLE
 *	LONG_DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN
 *	LONG_DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN
 *	LONG_DOUBLE_IS_X86_80_BIT_LITTLE_ENDIAN
 *	LONG_DOUBLE_IS_X86_80_BIT_BIG_ENDIAN
 *	LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE
 *	LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE
 *	LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_BE
 *	LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_LE
 *	LONG_DOUBLE_IS_UNKNOWN_FORMAT
 *	It is only defined if the system supports long doubles.
 */
#define  HAS_LDEXPL		/**/
#define HAS_LONG_DOUBLE		/**/
#ifdef HAS_LONG_DOUBLE
#define LONG_DOUBLESIZE 8		/**/
#define LONG_DOUBLEKIND 0		/**/
#define LONG_DOUBLE_IS_DOUBLE				0
#define LONG_DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN	1
#define LONG_DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN	2
#define LONG_DOUBLE_IS_X86_80_BIT_LITTLE_ENDIAN		3
#define LONG_DOUBLE_IS_X86_80_BIT_BIG_ENDIAN		4
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE	5
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE	6
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_BE	7
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_LE	8
#define LONG_DOUBLE_IS_UNKNOWN_FORMAT			-1
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LITTLE_ENDIAN	LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE /* back-compat */
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BIG_ENDIAN	LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE /* back-compat */
#endif

/* HAS_LONG_LONG:
 *	This symbol will be defined if the C compiler supports long long.
 */
/* LONGLONGSIZE:
 *	This symbol contains the size of a long long, so that the
 *	C preprocessor can make decisions based on it.  It is only
 *	defined if the system supports long long.
 */
#define HAS_LONG_LONG		/**/
#ifdef HAS_LONG_LONG
#define LONGLONGSIZE 8		/**/
#endif

/* HAS_MEMCHR:
 *	This symbol, if defined, indicates that the memchr routine is available
 *	to locate characters within a C string.
 */
#define HAS_MEMCHR	/**/

/* HAS_MKSTEMP:
 *	This symbol, if defined, indicates that the mkstemp routine is
 *	available to exclusively create and open a uniquely named
 *	temporary file.
 */
#define HAS_MKSTEMP		/**/

/* HAS_MMAP:
 *	This symbol, if defined, indicates that the mmap system call is
 *	available to map a file into memory.
 */
/* Mmap_t:
 *	This symbol holds the return type of the mmap() system call
 *	(and simultaneously the type of the first argument).
 *	Usually set to 'void *' or 'caddr_t'.
 */
#define HAS_MMAP		/**/
#define Mmap_t void *	/**/

/* HAS_MSG:
 *	This symbol, if defined, indicates that the entire msg*(2) library is
 *	supported (IPC mechanism based on message queues).
 */
#define HAS_MSG		/**/

/* HAS_SEM:
 *	This symbol, if defined, indicates that the entire sem*(2) library is
 *	supported.
 */
#define HAS_SEM		/**/

/* HAS_SETGRENT:
 *	This symbol, if defined, indicates that the setgrent routine is
 *	available for initializing sequential access of the group database.
 */
#define HAS_SETGRENT		/**/

/* HAS_SETHOSTENT:
 *	This symbol, if defined, indicates that the sethostent() routine is
 *	available.
 */
#define HAS_SETHOSTENT		/**/

/* HAS_SETNETENT:
 *	This symbol, if defined, indicates that the setnetent() routine is
 *	available.
 */
#define HAS_SETNETENT		/**/

/* HAS_SETPROTOENT:
 *	This symbol, if defined, indicates that the setprotoent() routine is
 *	available.
 */
#define HAS_SETPROTOENT		/**/

/* HAS_SETPGRP:
 *	This symbol, if defined, indicates that the setpgrp routine is
 *	available to set the current process group.
 */
/* USE_BSD_SETPGRP:
 *	This symbol, if defined, indicates that setpgrp needs two
 *	arguments whereas USG one needs none.  See also HAS_SETPGID
 *	for a POSIX interface.
 */
#define HAS_SETPGRP		/**/
/*#define USE_BSD_SETPGRP	/ **/

/* HAS_SETPWENT:
 *	This symbol, if defined, indicates that the setpwent routine is
 *	available for initializing sequential access of the passwd database.
 */
#define HAS_SETPWENT		/**/

/* HAS_SETSERVENT:
 *	This symbol, if defined, indicates that the setservent() routine is
 *	available.
 */
#define HAS_SETSERVENT		/**/

/* HAS_SETVBUF:
 *	This symbol, if defined, indicates that the setvbuf routine is
 *	available to change buffering on an open stdio stream.
 *	to a line-buffered mode.
 */
#define HAS_SETVBUF		/**/

/* HAS_SHM:
 *	This symbol, if defined, indicates that the entire shm*(2) library is
 *	supported.
 */
#define HAS_SHM		/**/

/* Shmat_t:
 *	This symbol holds the return type of the shmat() system call.
 *	Usually set to 'void *' or 'char *'.
 */
/* HAS_SHMAT_PROTOTYPE:
 *	This symbol, if defined, indicates that the sys/shm.h includes
 *	a prototype for shmat().  Otherwise, it is up to the program to
 *	guess one.  Shmat_t shmat(int, Shmat_t, int) is a good guess,
 *	but not always right so it should be emitted by the program only
 *	when HAS_SHMAT_PROTOTYPE is not defined to avoid conflicting defs.
 */
#define Shmat_t void *	/**/
#define HAS_SHMAT_PROTOTYPE	/**/

/* HAS_SOCKET:
 *	This symbol, if defined, indicates that the BSD socket interface is
 *	supported.
 */
/* HAS_SOCKETPAIR:
 *	This symbol, if defined, indicates that the BSD socketpair() call is
 *	supported.
 */
/* HAS_SOCKADDR_SA_LEN:
 *	This symbol, if defined, indicates that the struct sockaddr
 *	structure has a member called sa_len, indicating the length of
 *	the structure.
 */
/* HAS_SOCKADDR_IN6:
 *	This symbol, if defined, indicates the availability of
 *	struct sockaddr_in6;
 */
/* HAS_SIN6_SCOPE_ID:
 *	This symbol, if defined, indicates that the struct sockaddr_in6
 *	structure has a member called sin6_scope_id.
 */
/* HAS_IP_MREQ:
 *	This symbol, if defined, indicates the availability of
 *	struct ip_mreq;
 */
/* HAS_IP_MREQ_SOURCE:
 *	This symbol, if defined, indicates the availability of
 *	struct ip_mreq_source;
 */
/* HAS_IPV6_MREQ:
 *	This symbol, if defined, indicates the availability of
 *	struct ipv6_mreq;
 */
/* HAS_IPV6_MREQ_SOURCE:
 *	This symbol, if defined, indicates the availability of
 *	struct ipv6_mreq_source;
 */
#define	HAS_SOCKET		/**/
#define	HAS_SOCKETPAIR	/**/
/*#define	HAS_SOCKADDR_SA_LEN	/ **/
#define	HAS_SOCKADDR_IN6	/**/
#define	HAS_SIN6_SCOPE_ID	/**/
#define	HAS_IP_MREQ	/**/
#define	HAS_IP_MREQ_SOURCE	/**/
#define	HAS_IPV6_MREQ	/**/
/*#define	HAS_IPV6_MREQ_SOURCE	/ **/

/* USE_STAT_BLOCKS:
 *	This symbol is defined if this system has a stat structure declaring
 *	st_blksize and st_blocks.
 */
#ifndef USE_STAT_BLOCKS
#define USE_STAT_BLOCKS 	/**/
#endif

/* USE_STRUCT_COPY:
 *	This symbol, if defined, indicates that this C compiler knows how
 *	to copy structures.  If undefined, you'll need to use a block copy
 *	routine of some sort instead.
 */
#define	USE_STRUCT_COPY	/**/

/* HAS_STRERROR:
 *	This symbol, if defined, indicates that the strerror routine is
 *	available to translate error numbers to strings. See the writeup
 *	of Strerror() in this file before you try to define your own.
 */
/* HAS_SYS_ERRLIST:
 *	This symbol, if defined, indicates that the sys_errlist array is
 *	available to translate error numbers to strings. The extern int
 *	sys_nerr gives the size of that table.
 */
/* Strerror:
 *	This preprocessor symbol is defined as a macro if strerror() is
 *	not available to translate error numbers to strings but sys_errlist[]
 *	array is there.
 */
#define HAS_STRERROR		/**/
#define HAS_SYS_ERRLIST	/**/
#define Strerror(e) strerror(e)

/* HAS_STRTOUL:
 *	This symbol, if defined, indicates that the strtoul routine is
 *	available to provide conversion of strings to unsigned long.
 */
#define HAS_STRTOUL	/**/

/* HAS_UNION_SEMUN:
 *	This symbol, if defined, indicates that the union semun is
 *	defined by including <sys/sem.h>.  If not, the user code
 *	probably needs to define it as:
 *	union semun {
 *	    int val;
 *	    struct semid_ds *buf;
 *	    unsigned short *array;
 *	}
 */
/* USE_SEMCTL_SEMUN:
 *	This symbol, if defined, indicates that union semun is
 *	used for semctl IPC_STAT.
 */
/* USE_SEMCTL_SEMID_DS:
 *	This symbol, if defined, indicates that struct semid_ds * is
 *	used for semctl IPC_STAT.
 */
/*#define HAS_UNION_SEMUN	/ **/
#define USE_SEMCTL_SEMUN	/**/
#define USE_SEMCTL_SEMID_DS	/**/

/* HAS_VFORK:
 *	This symbol, if defined, indicates that vfork() exists.
 */
/*#define HAS_VFORK	/ **/

/* HAS_PSEUDOFORK:
 *	This symbol, if defined, indicates that an emulation of the
 *	fork routine is available.
 */
/*#define HAS_PSEUDOFORK	/ **/

/* Signal_t:
 *	This symbol's value is either "void" or "int", corresponding to the
 *	appropriate return type of a signal handler.  Thus, you can declare
 *	a signal handler using "Signal_t (*handler)()", and define the
 *	handler using "Signal_t handler(sig)".
 */
#define Signal_t void	/* Signal handler's return type */

/* HASVOLATILE:
 *	This symbol, if defined, indicates that this C compiler knows about
 *	the volatile declaration.
 */
#define	HASVOLATILE	/**/
#ifndef HASVOLATILE
#define volatile
#endif

/* I_DIRENT:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <dirent.h>. Using this symbol also triggers the definition
 *	of the Direntry_t define which ends up being 'struct dirent' or
 *	'struct direct' depending on the availability of <dirent.h>.
 */
/* DIRNAMLEN:
 *	This symbol, if defined, indicates to the C program that the length
 *	of directory entry names is provided by a d_namlen field.  Otherwise
 *	you need to do strlen() on the d_name field.
 */
/* Direntry_t:
 *	This symbol is set to 'struct direct' or 'struct dirent' depending on
 *	whether dirent is available or not. You should use this pseudo type to
 *	portably declare your directory entries.
 */
#define I_DIRENT		/**/
/*#define DIRNAMLEN	/ **/
#define Direntry_t struct dirent

/* I_EXECINFO:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <execinfo.h> for backtrace() support.
 */
#define I_EXECINFO		/**/

/* I_GRP:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <grp.h>.
 */
/* GRPASSWD:
 *	This symbol, if defined, indicates to the C program that struct group
 *	in <grp.h> contains gr_passwd.
 */
#define I_GRP		/**/
#define GRPASSWD	/**/

/* I_NDBM:
 *	This symbol, if defined, indicates that <ndbm.h> exists and should
 *	be included.
 */
/* I_GDBMNDBM:
 *	This symbol, if defined, indicates that <gdbm/ndbm.h> exists and should
 *	be included.  This was the location of the ndbm.h compatibility file
 *	in RedHat 7.1.
 */
/* I_GDBM_NDBM:
 *	This symbol, if defined, indicates that <gdbm-ndbm.h> exists and should
 *	be included.  This is the location of the ndbm.h compatibility file
 *	in Debian 4.0.
 */
/* NDBM_H_USES_PROTOTYPES:
 *	This symbol, if defined, indicates that <ndbm.h> uses real ANSI C
 *	prototypes instead of K&R style function declarations without any
 *	parameter information. While ANSI C prototypes are supported in C++,
 *	K&R style function declarations will yield errors.
 */
/* GDBMNDBM_H_USES_PROTOTYPES:
 *	This symbol, if defined, indicates that <gdbm/ndbm.h> uses real ANSI C
 *	prototypes instead of K&R style function declarations without any
 *	parameter information. While ANSI C prototypes are supported in C++,
 *	K&R style function declarations will yield errors.
 */
/* GDBM_NDBM_H_USES_PROTOTYPES:
 *	This symbol, if defined, indicates that <gdbm-ndbm.h> uses real ANSI C
 *	prototypes instead of K&R style function declarations without any
 *	parameter information. While ANSI C prototypes are supported in C++,
 *	K&R style function declarations will yield errors.
 */
/*#define I_NDBM	/ **/
/*#define I_GDBMNDBM	/ **/
#define I_GDBM_NDBM	/**/
/*#define NDBM_H_USES_PROTOTYPES	/ **/
/*#define GDBMNDBM_H_USES_PROTOTYPES	/ **/
/*#define GDBM_NDBM_H_USES_PROTOTYPES	/ **/

/* I_NETDB:
 *	This symbol, if defined, indicates that <netdb.h> exists and
 *	should be included.
 */
#define I_NETDB		/**/

/* I_NET_ERRNO:
 *	This symbol, if defined, indicates that <net/errno.h> exists and
 *	should be included.
 */
/*#define I_NET_ERRNO		/ **/

/* I_PWD:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <pwd.h>.
 */
/* PWQUOTA:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_quota.
 */
/* PWAGE:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_age.
 */
/* PWCHANGE:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_change.
 */
/* PWCLASS:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_class.
 */
/* PWEXPIRE:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_expire.
 */
/* PWCOMMENT:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_comment.
 */
/* PWGECOS:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_gecos.
 */
/* PWPASSWD:
 *	This symbol, if defined, indicates to the C program that struct passwd
 *	contains pw_passwd.
 */
#define I_PWD		/**/
/*#define PWQUOTA	/ **/
/*#define PWAGE	/ **/
/*#define PWCHANGE	/ **/
/*#define PWCLASS	/ **/
/*#define PWEXPIRE	/ **/
/*#define PWCOMMENT	/ **/
#define PWGECOS	/**/
#define PWPASSWD	/**/

/* I_SYSUIO:
 *	This symbol, if defined, indicates that <sys/uio.h> exists and
 *	should be included.
 */
#define	I_SYSUIO		/**/

/* I_TERMIO:
 *	This symbol, if defined, indicates that the program should include
 *	<termio.h> rather than <sgtty.h>.  There are also differences in
 *	the ioctl() calls that depend on the value of this symbol.
 */
/* I_TERMIOS:
 *	This symbol, if defined, indicates that the program should include
 *	the POSIX termios.h rather than sgtty.h or termio.h.
 *	There are also differences in the ioctl() calls that depend on the
 *	value of this symbol.
 */
/* I_SGTTY:
 *	This symbol, if defined, indicates that the program should include
 *	<sgtty.h> rather than <termio.h>.  There are also differences in
 *	the ioctl() calls that depend on the value of this symbol.
 */
/*#define I_TERMIO		/ **/
#define I_TERMIOS		/**/
/*#define I_SGTTY		/ **/

/* I_STDARG:
 *	This symbol, if defined, indicates that <stdarg.h> exists and should
 *	be included.
 */
/* I_VARARGS:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <varargs.h>.
 */
#define I_STDARG		/**/
/*#define I_VARARGS	/ **/

/* Free_t:
 *	This variable contains the return type of free().  It is usually
 * void, but occasionally int.
 */
/* Malloc_t:
 *	This symbol is the type of pointer returned by malloc and realloc.
 */
#define Malloc_t void *			/**/
#define Free_t void			/**/

/* PERL_MALLOC_WRAP:
 *	This symbol, if defined, indicates that we'd like malloc wrap checks.
 */
#define PERL_MALLOC_WRAP		/**/

/* MYMALLOC:
 *	This symbol, if defined, indicates that we're using our own malloc.
 */
/*#define MYMALLOC			/ **/

/* CAN_PROTOTYPE:
 *	If defined, this macro indicates that the C compiler can handle
 *	function prototypes.
 */
/* _:
 *	This macro is used to declare function parameters for folks who want
 *	to make declarations with prototypes using a different style than
 *	the above macros.  Use double parentheses.  For example:
 *
 *		int main _((int argc, char *argv[]));
 */
#define	CAN_PROTOTYPE	/**/
#ifdef CAN_PROTOTYPE
#define	_(args) args
#else
#define	_(args) ()
#endif

/* SH_PATH:
 *	This symbol contains the full pathname to the shell used on this
 *	on this system to execute Bourne shell scripts.  Usually, this will be
 *	/bin/sh, though it's possible that some systems will have /bin/ksh,
 *	/bin/pdksh, /bin/ash, /bin/bash, or even something such as
 *	D:/bin/sh.exe.
 */
#define SH_PATH "/bin/sh"  /**/

/* SIG_NAME:
 *	This symbol contains a list of signal names in order of
 *	signal number. This is intended
 *	to be used as a static array initialization, like this:
 *		char *sig_name[] = { SIG_NAME };
 *	The signals in the list are separated with commas, and each signal
 *	is surrounded by double quotes. There is no leading SIG in the signal
 *	name, i.e. SIGQUIT is known as "QUIT".
 *	Gaps in the signal numbers (up to NSIG) are filled in with NUMnn,
 *	etc., where nn is the actual signal number (e.g. NUM37).
 *	The signal number for sig_name[i] is stored in sig_num[i].
 *	The last element is 0 to terminate the list with a NULL.  This
 *	corresponds to the 0 at the end of the sig_name_init list.
 *	Note that this variable is initialized from the sig_name_init,
 *	not from sig_name (which is unused).
 */
/* SIG_NUM:
 *	This symbol contains a list of signal numbers, in the same order as the
 *	SIG_NAME list. It is suitable for static array initialization, as in:
 *		int sig_num[] = { SIG_NUM };
 *	The signals in the list are separated with commas, and the indices
 *	within that list and the SIG_NAME list match, so it's easy to compute
 *	the signal name from a number or vice versa at the price of a small
 *	dynamic linear lookup.
 *	Duplicates are allowed, but are moved to the end of the list.
 *	The signal number corresponding to sig_name[i] is sig_number[i].
 *	if (i < NSIG) then sig_number[i] == i.
 *	The last element is 0, corresponding to the 0 at the end of
 *	the sig_name_init list.
 *	Note that this variable is initialized from the sig_num_init,
 *	not from sig_num (which is unused).
 */
/* SIG_SIZE:
 *	This variable contains the number of elements of the SIG_NAME
 *	and SIG_NUM arrays, excluding the final NULL entry.
 */
#define SIG_NAME "ZERO", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "BUS", "FPE", "KILL", "USR1", "SEGV", "USR2", "PIPE", "ALRM", "TERM", "STKFLT", "CHLD", "CONT", "STOP", "TSTP", "TTIN", "TTOU", "URG", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "IO", "PWR", "SYS", "NUM32", "NUM33", "RTMIN", "NUM35", "NUM36", "NUM37", "NUM38", "NUM39", "NUM40", "NUM41", "NUM42", "NUM43", "NUM44", "NUM45", "NUM46", "NUM47", "NUM48", "NUM49", "NUM50", "NUM51", "NUM52", "NUM53", "NUM54", "NUM55", "NUM56", "NUM57", "NUM58", "NUM59", "NUM60", "NUM61", "NUM62", "NUM63", "RTMAX", "IOT", "CLD", "POLL", "UNUSED", 0		/**/
#define SIG_NUM  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 6, 17, 29, 31, 0		/**/
#define SIG_SIZE 69			/**/

/* USE_CROSS_COMPILE:
 *	This symbol, if defined, indicates that Perl is being cross-compiled.
 */
/* PERL_TARGETARCH:
 *	This symbol, if defined, indicates the target architecture
 *	Perl has been cross-compiled to.  Undefined if not a cross-compile.
 */
#ifndef USE_CROSS_COMPILE
/*#define	USE_CROSS_COMPILE	/ **/
#define	PERL_TARGETARCH	""	/**/
#endif

/* PERL_USE_DEVEL:
 *	This symbol, if defined, indicates that Perl was configured with
 *	-Dusedevel, to enable development features.  This should not be
 *	done for production builds.
 */
/*#define	PERL_USE_DEVEL		/ **/

/* HAS_ATOLF:
 *	This symbol, if defined, indicates that the atolf routine is
 *	available to convert strings into long doubles.
 */
/*#define HAS_ATOLF		/ **/

/* HAS_ATOLL:
 *	This symbol, if defined, indicates that the atoll routine is
 *	available to convert strings into long longs.
 */
#define HAS_ATOLL		/**/

/* HAS__FWALK:
 *	This symbol, if defined, indicates that the _fwalk system call is
 *	available to apply a function to all the file handles.
 */
/*#define HAS__FWALK		/ **/

/* HAS_ACOSH:
 *	This symbol, if defined, indicates that the acosh routine is
 *	available to do the inverse hyperbolic cosine function.
 */
#define HAS_ACOSH		/**/

/* HAS_AINTL:
 *	This symbol, if defined, indicates that the aintl routine is
 *	available.  If copysignl is also present we can emulate modfl.
 */
/*#define HAS_AINTL		/ **/

/* HAS_ASINH:
 *	This symbol, if defined, indicates that the asinh routine is
 *	available to do the inverse hyperbolic sine function.
 */
#define HAS_ASINH		/**/

/* HAS_ATANH:
 *	This symbol, if defined, indicates that the atanh routine is
 *	available to do the inverse hyperbolic tangent function.
 */
#define HAS_ATANH		/**/

/* HAS_BUILTIN_CHOOSE_EXPR:
 *	Can we handle GCC builtin for compile-time ternary-like expressions
 */
/* HAS_BUILTIN_EXPECT:
 *	Can we handle GCC builtin for telling that certain values are more
 *	likely
 */
#define HAS_BUILTIN_EXPECT	/**/
#define HAS_BUILTIN_CHOOSE_EXPR	/**/

/* HAS_C99_VARIADIC_MACROS:
 *	If defined, the compiler supports C99 variadic macros.
 */
#define	HAS_C99_VARIADIC_MACROS	/**/

/* HAS_CLASS:
 *	This symbol, if defined, indicates that the class routine is
 *	available to classify doubles.  Available for example in AIX.
 *	The returned values are defined in <float.h> and are:
 *
 *	FP_PLUS_NORM	Positive normalized, nonzero
 *	FP_MINUS_NORM	Negative normalized, nonzero
 *	FP_PLUS_DENORM	Positive denormalized, nonzero
 *	FP_MINUS_DENORM	Negative denormalized, nonzero
 *	FP_PLUS_ZERO	+0.0
 *	FP_MINUS_ZERO	-0.0
 *	FP_PLUS_INF	+INF
 *	FP_MINUS_INF	-INF
 *	FP_NANS		Signaling Not a Number (NaNS)
 *	FP_NANQ		Quiet Not a Number (NaNQ)
 */
/*#define HAS_CLASS		/ **/

/* HAS_CLEARENV:
 *	This symbol, if defined, indicates that the clearenv () routine is
 *	available for use.
 */
#define HAS_CLEARENV		/**/

/* HAS_STRUCT_CMSGHDR:
 *	This symbol, if defined, indicates that the struct cmsghdr
 *	is supported.
 */
#define HAS_STRUCT_CMSGHDR	/**/

/* HAS_COPYSIGN:
 *	This symbol, if defined, indicates that the copysign routine is
 *	available to do the copysign function.
 */
#define HAS_COPYSIGN		/**/

/* HAS_COPYSIGNL:
 *	This symbol, if defined, indicates that the copysignl routine is
 *	available.  If aintl is also present we can emulate modfl.
 */
#define HAS_COPYSIGNL		/**/

/* USE_CPLUSPLUS:
 *	This symbol, if defined, indicates that a C++ compiler was
 *	used to compiled Perl and will be used to compile extensions.
 */
/*#define USE_CPLUSPLUS		/ **/

/* HAS_DBMINIT_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the dbminit() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern int dbminit(char *);
 */
#define	HAS_DBMINIT_PROTO	/**/

/* HAS_DIR_DD_FD:
 *	This symbol, if defined, indicates that the the DIR* dirstream
 *	structure contains a member variable named dd_fd.
 */
/*#define HAS_DIR_DD_FD		/ **/

/* HAS_DIRFD:
 *	This manifest constant lets the C program know that dirfd
 *	is available.
 */
#define HAS_DIRFD		/**/

/* DLSYM_NEEDS_UNDERSCORE:
 *	This symbol, if defined, indicates that we need to prepend an
 *	underscore to the symbol name before calling dlsym().  This only
 *	makes sense if you *have* dlsym, which we will presume is the
 *	case if you're using dl_dlopen.xs.
 */
/*#define 	DLSYM_NEEDS_UNDERSCORE 	/ **/

/* HAS_ERF:
 *	This symbol, if defined, indicates that the erf routine is
 *	available to do the error function.
 */
#define HAS_ERF		/**/

/* HAS_ERFC:
 *	This symbol, if defined, indicates that the erfc routine is
 *	available to do the complementary error function.
 */
#define HAS_ERFC		/**/

/* HAS_EXP2:
 *	This symbol, if defined, indicates that the exp2 routine is
 *	available to do the 2**x function.
 */
#define HAS_EXP2		/**/

/* HAS_EXPM1:
 *	This symbol, if defined, indicates that the expm1 routine is
 *	available to do the exp(x) - 1 when x is near 1 function.
 */
#define HAS_EXPM1		/**/

/* HAS_FAST_STDIO:
 *	This symbol, if defined, indicates that the "fast stdio"
 *	is available to manipulate the stdio buffers directly.
 */
/*#define HAS_FAST_STDIO		/ **/

/* HAS_FCHDIR:
 *	This symbol, if defined, indicates that the fchdir routine is
 *	available to change directory using a file descriptor.
 */
#define HAS_FCHDIR		/**/

/* FCNTL_CAN_LOCK:
 *	This symbol, if defined, indicates that fcntl() can be used
 *	for file locking.  Normally on Unix systems this is defined.
 *	It may be undefined on VMS.
 */
#define FCNTL_CAN_LOCK		/**/

/* HAS_FDCLOSE:
 *	This symbol, if defined, indicates that the fdclose routine is
 *	available to free a FILE structure without closing the underlying
 *	file descriptor.  This function appeared in FreeBSD 10.2.
 */
/*#define HAS_FDCLOSE		/ **/

/* HAS_FDIM:
 *	This symbol, if defined, indicates that the fdim routine is
 *	available to do the positive difference function.
 */
#define HAS_FDIM		/**/

/* HAS_FEGETROUND:
 *	This symbol, if defined, indicates that the fegetround routine is
 *	available to return the macro corresponding to the current rounding
 *	mode.
 */
#define HAS_FEGETROUND	/**/

/* HAS_FINITE:
 *	This symbol, if defined, indicates that the finite routine is
 *	available to check whether a double is finite (non-infinity non-NaN).
 */
#define HAS_FINITE		/**/

/* HAS_FINITEL:
 *	This symbol, if defined, indicates that the finitel routine is
 *	available to check whether a long double is finite
 *	(non-infinity non-NaN).
 */
#define HAS_FINITEL		/**/

/* HAS_FLOCK_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the flock() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern int flock(int, int);
 */
#define	HAS_FLOCK_PROTO	/**/

/* HAS_FMA:
 *	This symbol, if defined, indicates that the fma routine is
 *	available to do the multiply-add function.
 */
#define HAS_FMA		/**/

/* HAS_FMAX:
 *	This symbol, if defined, indicates that the fmax routine is
 *	available to do the maximum function.
 */
#define HAS_FMAX		/**/

/* HAS_FMIN:
 *	This symbol, if defined, indicates that the fmin routine is
 *	available to do the minimum function.
 */
#define HAS_FMIN		/**/

/* HAS_FP_CLASS:
 *	This symbol, if defined, indicates that the fp_class routine is
 *	available to classify doubles.  Available for example in Digital UNIX.
 *	The returned values are defined in <math.h> and are:
 *
 *	FP_SNAN           Signaling NaN (Not-a-Number)
 *	FP_QNAN           Quiet NaN (Not-a-Number)
 *	FP_POS_INF        +infinity
 *	FP_NEG_INF        -infinity
 *	FP_POS_NORM       Positive normalized
 *	FP_NEG_NORM       Negative normalized
 *	FP_POS_DENORM     Positive denormalized
 *	FP_NEG_DENORM     Negative denormalized
 *	FP_POS_ZERO       +0.0 (positive zero)
 *	FP_NEG_ZERO       -0.0 (negative zero)
 */
/*#define HAS_FP_CLASS		/ **/

/* HAS_FP_CLASSL:
 *	This symbol, if defined, indicates that the fp_classl routine is
 *	available to classify long doubles.  Available for example in
 *	Digital UNIX.  See for possible values HAS_FP_CLASS.
 */
/*#define HAS_FP_CLASSL		/ **/

/* HAS_FPCLASS:
 *	This symbol, if defined, indicates that the fpclass routine is
 *	available to classify doubles.  Available for example in Solaris/SVR4.
 *	The returned values are defined in <ieeefp.h> and are:
 *
 *	FP_SNAN		signaling NaN
 *	FP_QNAN		quiet NaN
 *	FP_NINF		negative infinity
 *	FP_PINF		positive infinity
 *	FP_NDENORM	negative denormalized non-zero
 *	FP_PDENORM	positive denormalized non-zero
 *	FP_NZERO	negative zero
 *	FP_PZERO	positive zero
 *	FP_NNORM	negative normalized non-zero
 *	FP_PNORM	positive normalized non-zero
 */
/*#define HAS_FPCLASS		/ **/

/* HAS_FPCLASSIFY:
 *	This symbol, if defined, indicates that the fpclassify routine is
 *	available to classify doubles.  Available for example in HP-UX.
 *	The returned values are defined in <math.h> and are
 *
 *           FP_NORMAL     Normalized
 *           FP_ZERO       Zero
 *           FP_INFINITE   Infinity
 *           FP_SUBNORMAL  Denormalized
 *           FP_NAN        NaN
 *
 */
/* HAS_FP_CLASSIFY:
 *	This symbol, if defined, indicates that the fp_classify routine is
 *	available to classify doubles. The values are defined in <math.h>
 *
 *           FP_NORMAL     Normalized
 *           FP_ZERO       Zero
 *           FP_INFINITE   Infinity
 *           FP_SUBNORMAL  Denormalized
 *           FP_NAN        NaN
 *
 */
#define	HAS_FPCLASSIFY		/**/
/*#define	HAS_FP_CLASSIFY		/ **/

/* HAS_FPCLASSL:
 *	This symbol, if defined, indicates that the fpclassl routine is
 *	available to classify long doubles.  Available for example in IRIX.
 *	The returned values are defined in <ieeefp.h> and are:
 *
 *	FP_SNAN		signaling NaN
 *	FP_QNAN		quiet NaN
 *	FP_NINF		negative infinity
 *	FP_PINF		positive infinity
 *	FP_NDENORM	negative denormalized non-zero
 *	FP_PDENORM	positive denormalized non-zero
 *	FP_NZERO	negative zero
 *	FP_PZERO	positive zero
 *	FP_NNORM	negative normalized non-zero
 *	FP_PNORM	positive normalized non-zero
 */
/*#define HAS_FPCLASSL		/ **/

/* HAS_FPGETROUND:
 *	This symbol, if defined, indicates that the fpgetround routine is
 *	available to get the floating point rounding mode.
 */
/*#define HAS_FPGETROUND		/ **/

/* HAS_FPOS64_T:
 *	This symbol will be defined if the C compiler supports fpos64_t.
 */
/*#define	HAS_FPOS64_T    	/ **/

/* HAS_FREXPL:
 *	This symbol, if defined, indicates that the frexpl routine is
 *	available to break a long double floating-point number into
 *	a normalized fraction and an integral power of 2.
 */
#define HAS_FREXPL		/**/

/* HAS_STRUCT_FS_DATA:
 *	This symbol, if defined, indicates that the struct fs_data
 *	to do statfs() is supported.
 */
/*#define HAS_STRUCT_FS_DATA	/ **/

/* HAS_FSEEKO:
 *	This symbol, if defined, indicates that the fseeko routine is
 *	available to fseek beyond 32 bits (useful for ILP32 hosts).
 */
#define HAS_FSEEKO		/**/

/* HAS_FSTATFS:
 *	This symbol, if defined, indicates that the fstatfs routine is
 *	available to stat filesystems by file descriptors.
 */
#define HAS_FSTATFS		/**/

/* HAS_FSYNC:
 *	This symbol, if defined, indicates that the fsync routine is
 *	available to write a file's modified data and attributes to
 *	permanent storage.
 */
#define HAS_FSYNC		/**/

/* HAS_FTELLO:
 *	This symbol, if defined, indicates that the ftello routine is
 *	available to ftell beyond 32 bits (useful for ILP32 hosts).
 */
#define HAS_FTELLO		/**/

/* HAS_FUTIMES:
 *	This symbol, if defined, indicates that the futimes routine is
 *	available to change file descriptor time stamps with struct timevals.
 */
#define HAS_FUTIMES		/**/

/* HAS_GETADDRINFO:
 *	This symbol, if defined, indicates that the getaddrinfo() function
 *	is available for use.
 */
#define HAS_GETADDRINFO		/**/

/* HAS_GETCWD:
 *	This symbol, if defined, indicates that the getcwd routine is
 *	available to get the current working directory.
 */
#define HAS_GETCWD		/**/

/* HAS_GETESPWNAM:
 *	This symbol, if defined, indicates that the getespwnam system call is
 *	available to retrieve enhanced (shadow) password entries by name.
 */
/*#define HAS_GETESPWNAM		/ **/

/* HAS_GETFSSTAT:
 *	This symbol, if defined, indicates that the getfsstat routine is
 *	available to stat filesystems in bulk.
 */
/*#define HAS_GETFSSTAT		/ **/

/* HAS_GETITIMER:
 *	This symbol, if defined, indicates that the getitimer routine is
 *	available to return interval timers.
 */
#define HAS_GETITIMER		/**/

/* HAS_GETMNT:
 *	This symbol, if defined, indicates that the getmnt routine is
 *	available to get filesystem mount info by filename.
 */
/*#define HAS_GETMNT		/ **/

/* HAS_GETMNTENT:
 *	This symbol, if defined, indicates that the getmntent routine is
 *	available to iterate through mounted file systems to get their info.
 */
#define HAS_GETMNTENT		/**/

/* HAS_GETNAMEINFO:
 *	This symbol, if defined, indicates that the getnameinfo() function
 *	is available for use.
 */
#define HAS_GETNAMEINFO		/**/

/* HAS_GETPRPWNAM:
 *	This symbol, if defined, indicates that the getprpwnam system call is
 *	available to retrieve protected (shadow) password entries by name.
 */
/*#define HAS_GETPRPWNAM		/ **/

/* HAS_GETSPNAM:
 *	This symbol, if defined, indicates that the getspnam system call is
 *	available to retrieve SysV shadow password entries by name.
 */
#define HAS_GETSPNAM		/**/

/* HAS_HASMNTOPT:
 *	This symbol, if defined, indicates that the hasmntopt routine is
 *	available to query the mount options of file systems.
 */
#define HAS_HASMNTOPT		/**/

/* HAS_HYPOT:
 *	This symbol, if defined, indicates that the hypot routine is
 *	available to do the hypotenuse function.
 */
#define HAS_HYPOT		/**/

/* HAS_ILOGB:
 *	This symbol, if defined, indicates that the ilogb routine is
 *	available to get integer exponent of a floating-point value.
 */
#define HAS_ILOGB		/**/

/* HAS_ILOGBL:
 *	This symbol, if defined, indicates that the ilogbl routine is
 *	available.  If scalbnl is also present we can emulate frexpl.
 */
#define HAS_ILOGBL		/**/

/* HAS_INETNTOP:
 *	This symbol, if defined, indicates that the inet_ntop() function
 *	is available to parse IPv4 and IPv6 strings.
 */
#define HAS_INETNTOP		/**/

/* HAS_INETPTON:
 *	This symbol, if defined, indicates that the inet_pton() function
 *	is available to parse IPv4 and IPv6 strings.
 */
#define HAS_INETPTON		/**/

/* HAS_INT64_T:
 *     This symbol will defined if the C compiler supports int64_t.
 *     Usually the <inttypes.h> needs to be included, but sometimes
 *	<sys/types.h> is enough.
 */
#define     HAS_INT64_T               /**/

/* HAS_ISBLANK:
 *	This manifest constant lets the C program know that isblank
 *	is available.
 */
#define HAS_ISBLANK		/**/

/* HAS_ISFINITE:
 *	This symbol, if defined, indicates that the isfinite routine is
 *	available to check whether a double is finite (non-infinity non-NaN).
 */
#define HAS_ISFINITE		/**/

/* HAS_ISFINITEL:
 *	This symbol, if defined, indicates that the isfinitel routine is
 *	available to check whether a long double is finite.
 *	(non-infinity non-NaN).
 */
/*#define HAS_ISFINITEL		/ **/

/* HAS_ISINF:
 *	This symbol, if defined, indicates that the isinf routine is
 *	available to check whether a double is an infinity.
 */
#define HAS_ISINF		/**/

/* HAS_ISINFL:
 *	This symbol, if defined, indicates that the isinfl routine is
 *	available to check whether a long double is an infinity.
 */
#define HAS_ISINFL		/**/

/* HAS_ISLESS:
 *	This symbol, if defined, indicates that the isless routine is
 *	available to do the isless function.
 */
/*#define HAS_ISLESS		/ **/

/* HAS_ISNAN:
 *	This symbol, if defined, indicates that the isnan routine is
 *	available to check whether a double is a NaN.
 */
#define HAS_ISNAN		/**/

/* HAS_ISNANL:
 *	This symbol, if defined, indicates that the isnanl routine is
 *	available to check whether a long double is a NaN.
 */
#define HAS_ISNANL		/**/

/* HAS_ISNORMAL:
 *	This symbol, if defined, indicates that the isnormal routine is
 *	available to check whether a double is normal (non-zero normalized).
 */
#define HAS_ISNORMAL		/**/

/* HAS_J0:
 *	This symbol, if defined, indicates to the C program that the
 *	j0() function is available for Bessel functions of the first
 *	kind of the order zero, for doubles.
 */
/* HAS_J0L:
 *	This symbol, if defined, indicates to the C program that the
 *	j0l() function is available for Bessel functions of the first
 *	kind of the order zero, for long doubles.
 */
#define	HAS_J0		/**/
#define	HAS_J0L		/**/

/* HAS_LC_MONETARY_2008:
 *	This symbol, if defined, indicates that the localeconv routine is
 *	available and has the additional members added in POSIX 1003.1-2008.
 */
#define HAS_LC_MONETARY_2008		/**/

/* HAS_LDBL_DIG:
 *	This symbol, if defined, indicates that this system's <float.h>
 *	or <limits.h> defines the symbol LDBL_DIG, which is the number
 *	of significant digits in a long double precision number. Unlike
 *	for DBL_DIG, there's no good guess for LDBL_DIG if it is undefined.
 */
#define HAS_LDBL_DIG 	/* */

/* HAS_LGAMMA:
 *	This symbol, if defined, indicates that the lgamma routine is
 *	available to do the log gamma function.  See also HAS_TGAMMA and
 *	HAS_LGAMMA_R.
 */
#define HAS_LGAMMA		/**/

/* HAS_LGAMMA_R:
 *	This symbol, if defined, indicates that the lgamma_r routine is
 *	available to do the log gamma function without using the global
 *	signgam variable.
 */
#define HAS_LGAMMA_R		/**/

/* LIBM_LIB_VERSION:
 *	This symbol, if defined, indicates that libm exports _LIB_VERSION
 *	and that math.h defines the enum to manipulate it.
 */
#define LIBM_LIB_VERSION		/**/

/* HAS_LLRINT:
 *	This symbol, if defined, indicates that the llrint routine is
 *	available to return the long long value closest to a double
 *	(according to the current rounding mode).
 */
#define HAS_LLRINT		/**/

/* HAS_LLRINTL:
 *	This symbol, if defined, indicates that the llrintl routine is
 *	available to return the long long value closest to a long double
 *	(according to the current rounding mode).
 */
#define HAS_LLRINTL		/**/

/* HAS_LLROUND:
 *	This symbol, if defined, indicates that the llround routine is
 *	available to return the nearest long long value.
 */
#define HAS_LLROUND		/**/

/* HAS_LLROUNDL:
 *	This symbol, if defined, indicates that the llroundl routine is
 *	available to return the nearest long long value away from zero of
 *	the long double argument value.
 */
#define HAS_LLROUNDL		/**/

/* HAS_LOG1P:
 *	This symbol, if defined, indicates that the log1p routine is
 *	available to do the logarithm of 1 plus argument function.
 */
#define HAS_LOG1P		/**/

/* HAS_LOG2:
 *	This symbol, if defined, indicates that the log2 routine is
 *	available to do the log2 function.
 */
#define HAS_LOG2		/**/

/* HAS_LOGB:
 *	This symbol, if defined, indicates that the logb routine is
 *	available to do the logb function.
 */
#define HAS_LOGB		/**/

/* HAS_LRINT:
 *	This symbol, if defined, indicates that the lrint routine is
 *	available to return the integral value closest to a double
 *	(according to the current rounding mode).
 */
#define HAS_LRINT		/**/

/* HAS_LRINTL:
 *	This symbol, if defined, indicates that the lrintl routine is
 *	available to return the integral value closest to a long double
 *	(according to the current rounding mode).
 */
#define HAS_LRINTL		/**/

/* HAS_LROUND:
 *	This symbol, if defined, indicates that the lround routine is
 *	available to return the nearest integral value.
 */
#define HAS_LROUND		/**/

/* HAS_LROUNDL:
 *	This symbol, if defined, indicates that the lroundl routine is
 *	available to return the nearest integral value away from zero of
 *	the long double argument value.
 */
#define HAS_LROUNDL		/**/

/* HAS_MADVISE:
 *	This symbol, if defined, indicates that the madvise system call is
 *	available to map a file into memory.
 */
#define HAS_MADVISE		/**/

/* HAS_MALLOC_SIZE:
 *	This symbol, if defined, indicates that the malloc_size
 *	routine is available for use.
 */
/*#define HAS_MALLOC_SIZE		/ **/

/* HAS_MALLOC_GOOD_SIZE:
 *	This symbol, if defined, indicates that the malloc_good_size
 *	routine is available for use.
 */
/*#define HAS_MALLOC_GOOD_SIZE	/ **/

/* HAS_MEMMEM:
 *	This symbol, if defined, indicates that the memmem routine is
 *	available to return a pointer to the start of the first occurance
 *	of a substring in a memory area (or NULL if not found).
 */
#define HAS_MEMMEM		/**/

/* HAS_MKDTEMP:
 *	This symbol, if defined, indicates that the mkdtemp routine is
 *	available to exclusively create a uniquely named temporary directory.
 */
#define HAS_MKDTEMP		/**/

/* HAS_MKSTEMPS:
 *	This symbol, if defined, indicates that the mkstemps routine is
 *	available to exclusively create and open a uniquely named
 *	(with a suffix) temporary file.
 */
#define HAS_MKSTEMPS		/**/

/* HAS_MODFL:
 *	This symbol, if defined, indicates that the modfl routine is
 *	available to split a long double x into a fractional part f and
 *	an integer part i such that |f| < 1.0 and (f + i) = x.
 */
/* HAS_MODFL_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the modfl() function.  Otherwise, it is up
 *	to the program to supply one.
 */
#define HAS_MODFL		/**/
#define HAS_MODFL_PROTO		/**/

/* HAS_MPROTECT:
 *	This symbol, if defined, indicates that the mprotect system call is
 *	available to modify the access protection of a memory mapped file.
 */
#define HAS_MPROTECT		/**/

/* HAS_STRUCT_MSGHDR:
 *	This symbol, if defined, indicates that the struct msghdr
 *	is supported.
 */
#define HAS_STRUCT_MSGHDR	/**/

/* HAS_NAN:
 *	This symbol, if defined, indicates that the nan routine is
 *	available to generate NaN.
 */
#define HAS_NAN		/**/

/* HAS_NEARBYINT:
 *	This symbol, if defined, indicates that the nearbyint routine is
 *	available to return the integral value closest to (according to
 *	the current rounding mode) to x.
 */
#define HAS_NEARBYINT		/**/

/* HAS_NEWLOCALE:
 *	This symbol, if defined, indicates that the newlocale routine is
 *	available to return a new locale object or modify an existing
 *	locale object.
 */
/* HAS_FREELOCALE:
 *	This symbol, if defined, indicates that the freelocale routine is
 *	available to deallocates the resources associated with a locale object.
 */
/* HAS_USELOCALE:
 *	This symbol, if defined, indicates that the uselocale routine is
 *	available to set the current locale for the calling thread.
 */
#define	HAS_NEWLOCALE	/**/
#define	HAS_FREELOCALE	/**/
#define	HAS_USELOCALE	/**/

/* HAS_NEXTAFTER:
 *	This symbol, if defined, indicates that the nextafter routine is
 *	available to return the next machine representable double from
 *	x in direction y.
 */
#define HAS_NEXTAFTER		/**/

/* HAS_NEXTTOWARD:
 *	This symbol, if defined, indicates that the nexttoward routine is
 *	available to return the next machine representable long double from
 *	x in direction y.
 */
#define HAS_NEXTTOWARD		/**/

/* HAS_NL_LANGINFO:
 *	This symbol, if defined, indicates that the nl_langinfo routine is
 *	available to return local data.  You will also need <langinfo.h>
 *	and therefore I_LANGINFO.
 */
#define HAS_NL_LANGINFO		/**/

/* HAS_OFF64_T:
 *	This symbol will be defined if the C compiler supports off64_t.
 */
#define	HAS_OFF64_T    		/**/

/* HAS_PRCTL:
 *	This symbol, if defined, indicates that the prctl routine is
 *	available to set process title.
 *	Note that there are at least two prctl variants: Linux and Irix.
 *	While they are somewhat similar, they are incompatible.
 */
/* HAS_PRCTL_SET_NAME:
 *	This symbol, if defined, indicates that the prctl routine is
 *	available to set process title and supports PR_SET_NAME.
 */
#define HAS_PRCTL		/**/
#define HAS_PRCTL_SET_NAME		/**/

/* HAS_PROCSELFEXE:
 *	This symbol is defined if PROCSELFEXE_PATH is a symlink
 *	to the absolute pathname of the executing program.
 */
/* PROCSELFEXE_PATH:
 *	If HAS_PROCSELFEXE is defined this symbol is the filename
 *	of the symbolic link pointing to the absolute pathname of
 *	the executing program.
 */
#define HAS_PROCSELFEXE	/**/
#if defined(HAS_PROCSELFEXE) && !defined(PROCSELFEXE_PATH)
#define PROCSELFEXE_PATH	"/proc/self/exe"	/**/
#endif

/* HAS_PTHREAD_ATTR_SETSCOPE:
 *	This symbol, if defined, indicates that the pthread_attr_setscope
 *	system call is available to set the contention scope attribute of
 *	a thread attribute object.
 */
#define HAS_PTHREAD_ATTR_SETSCOPE		/**/

/* HAS_PTRDIFF_T:
 *	This symbol will be defined if the C compiler supports ptrdiff_t.
 */
#define	HAS_PTRDIFF_T    		/**/

/* HAS_READV:
 *	This symbol, if defined, indicates that the readv routine is
 *	available to do gather reads.  You will also need <sys/uio.h>
 *	and there I_SYSUIO.
 */
#define HAS_READV		/**/

/* HAS_RECVMSG:
 *	This symbol, if defined, indicates that the recvmsg routine is
 *	available to send structured socket messages.
 */
#define HAS_RECVMSG		/**/

/* HAS_REMAINDER:
 *	This symbol, if defined, indicates that the remainder routine is
 *	available to return the floating-point remainder.
 */
#define HAS_REMAINDER		/**/

/* HAS_REMQUO:
 *	This symbol, if defined, indicates that the remquo routine is
 *	available to return the remainder and part of quotient.
 */
#define HAS_REMQUO		/**/

/* HAS_RINT:
 *	This symbol, if defined, indicates that the rint routine is
 *	available to return the nearest integral value to x as double
 *	using the current rounding mode.
 */
#define HAS_RINT		/**/

/* HAS_ROUND:
 *	This symbol, if defined, indicates that the round routine is
 *	available to round to nearest integer, away from zero.
 */
#define HAS_ROUND		/**/

/* HAS_SBRK_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the sbrk() function.  Otherwise, it is up
 *	to the program to supply one.  Good guesses are
 *		extern void* sbrk(int);
 *		extern void* sbrk(size_t);
 */
#define	HAS_SBRK_PROTO	/**/

/* HAS_SCALBN:
 *	This symbol, if defined, indicates that the scalbn routine is
 *	available to multiply floating-point number by integral power
 *	of radix.
 */
#define HAS_SCALBN		/**/

/* HAS_SCALBNL:
 *	This symbol, if defined, indicates that the scalbnl routine is
 *	available.  If ilogbl is also present we can emulate frexpl.
 */
#define HAS_SCALBNL		/**/

/* HAS_SENDMSG:
 *	This symbol, if defined, indicates that the sendmsg routine is
 *	available to send structured socket messages.
 */
#define HAS_SENDMSG		/**/

/* HAS_SETITIMER:
 *	This symbol, if defined, indicates that the setitimer routine is
 *	available to set interval timers.
 */
#define HAS_SETITIMER		/**/

/* HAS_SETPROCTITLE:
 *	This symbol, if defined, indicates that the setproctitle routine is
 *	available to set process title.
 */
/*#define HAS_SETPROCTITLE		/ **/

/* HAS_SIGNBIT:
 *	This symbol, if defined, indicates that the signbit routine is
 *	available to check if the given number has the sign bit set.
 *	This should include correct testing of -0.0.  This will only be set
 *	if the signbit() routine is safe to use with the NV type used internally
 *	in perl.  Users should call Perl_signbit(), which will be #defined to
 *	the system's signbit() function or macro if this symbol is defined.
 */
#define HAS_SIGNBIT		/**/

/* HAS_SIGPROCMASK:
 *	This symbol, if defined, indicates that the sigprocmask
 *	system call is available to examine or change the signal mask
 *	of the calling process.
 */
#define HAS_SIGPROCMASK		/**/

/* USE_SITECUSTOMIZE:
 *	This symbol, if defined, indicates that sitecustomize should
 *	be used.
 */
#ifndef USE_SITECUSTOMIZE
#define	USE_SITECUSTOMIZE		/**/
#endif

/* HAS_SNPRINTF:
 *	This symbol, if defined, indicates that the snprintf () library
 *	function is available for use.
 */
/* HAS_VSNPRINTF:
 *	This symbol, if defined, indicates that the vsnprintf () library
 *	function is available for use.
 */
#define HAS_SNPRINTF	/**/
#define HAS_VSNPRINTF	/**/

/* HAS_SOCKATMARK:
 *	This symbol, if defined, indicates that the sockatmark routine is
 *	available to test whether a socket is at the out-of-band mark.
 */
#define HAS_SOCKATMARK		/**/

/* HAS_SOCKATMARK_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the sockatmark() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern int sockatmark(int);
 */
#define	HAS_SOCKATMARK_PROTO	/**/

/* HAS_SOCKS5_INIT:
 *	This symbol, if defined, indicates that the socks5_init routine is
 *	available to initialize SOCKS 5.
 */
/*#define HAS_SOCKS5_INIT		/ **/

/* SPRINTF_RETURNS_STRLEN:
 *	This variable defines whether sprintf returns the length of the string
 *	(as per the ANSI spec). Some C libraries retain compatibility with
 *	pre-ANSI C and return a pointer to the passed in buffer; for these
 *	this variable will be undef.
 */
#define SPRINTF_RETURNS_STRLEN	/**/

/* HAS_SQRTL:
 *	This symbol, if defined, indicates that the sqrtl routine is
 *	available to do long double square roots.
 */
#define HAS_SQRTL		/**/

/* HAS_SETRESGID_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the setresgid() function.  Otherwise, it is up
 *	to the program to supply one.  Good guesses are
 *		extern int setresgid(uid_t ruid, uid_t euid, uid_t suid);
 */
#define	HAS_SETRESGID_PROTO	/**/

/* HAS_SETRESUID_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the setresuid() function.  Otherwise, it is up
 *	to the program to supply one.  Good guesses are
 *		extern int setresuid(uid_t ruid, uid_t euid, uid_t suid);
 */
#define	HAS_SETRESUID_PROTO	/**/

/* HAS_STRUCT_STATFS_F_FLAGS:
 *	This symbol, if defined, indicates that the struct statfs
 *	does have the f_flags member containing the mount flags of
 *	the filesystem containing the file.
 *	This kind of struct statfs is coming from <sys/mount.h> (BSD 4.3),
 *	not from <sys/statfs.h> (SYSV).  Older BSDs (like Ultrix) do not
 *	have statfs() and struct statfs, they have ustat() and getmnt()
 *	with struct ustat and struct fs_data.
 */
#define HAS_STRUCT_STATFS_F_FLAGS		/**/

/* HAS_STRUCT_STATFS:
 *	This symbol, if defined, indicates that the struct statfs
 *	to do statfs() is supported.
 */
#define HAS_STRUCT_STATFS	/**/

/* HAS_FSTATVFS:
 *	This symbol, if defined, indicates that the fstatvfs routine is
 *	available to stat filesystems by file descriptors.
 */
#define HAS_FSTATVFS		/**/

/* HAS_STRFTIME:
 *	This symbol, if defined, indicates that the strftime routine is
 *	available to do time formatting.
 */
#define HAS_STRFTIME		/**/

/* HAS_STRLCAT:
 *	This symbol, if defined, indicates that the strlcat () routine is
 *	available to do string concatenation.
 */
/*#define HAS_STRLCAT		/ **/

/* HAS_STRLCPY:
 *	This symbol, if defined, indicates that the strlcpy () routine is
 *	available to do string copying.
 */
/*#define HAS_STRLCPY		/ **/

/* HAS_STRTOLD:
 *	This symbol, if defined, indicates that the strtold routine is
 *	available to convert strings to long doubles.
 */
#define HAS_STRTOLD		/**/

/* HAS_STRTOLL:
 *	This symbol, if defined, indicates that the strtoll routine is
 *	available to convert strings to long longs.
 */
#define HAS_STRTOLL		/**/

/* HAS_STRTOQ:
 *	This symbol, if defined, indicates that the strtoq routine is
 *	available to convert strings to long longs (quads).
 */
#define HAS_STRTOQ		/**/

/* HAS_STRTOULL:
 *	This symbol, if defined, indicates that the strtoull routine is
 *	available to convert strings to unsigned long longs.
 */
#define HAS_STRTOULL		/**/

/* HAS_STRTOUQ:
 *	This symbol, if defined, indicates that the strtouq routine is
 *	available to convert strings to unsigned long longs (quads).
 */
#define HAS_STRTOUQ		/**/

/* HAS_SYSCALL_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the syscall() function.  Otherwise, it is up
 *	to the program to supply one.  Good guesses are
 *		extern int syscall(int,  ...);
 *		extern int syscall(long, ...);
 */
#define	HAS_SYSCALL_PROTO	/**/

/* HAS_TELLDIR_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the telldir() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern long telldir(DIR*);
 */
#define	HAS_TELLDIR_PROTO	/**/

/* HAS_TGAMMA:
 *	This symbol, if defined, indicates that the tgamma routine is
 *	available to do the gamma function. See also HAS_LGAMMA.
 */
#define HAS_TGAMMA		/**/

/* HAS_CTIME64:
 *	This symbol, if defined, indicates that the ctime64 () routine is
 *	available to do the 64bit variant of ctime ()
 */
/* HAS_LOCALTIME64:
 *	This symbol, if defined, indicates that the localtime64 () routine is
 *	available to do the 64bit variant of localtime ()
 */
/* HAS_GMTIME64:
 *	This symbol, if defined, indicates that the gmtime64 () routine is
 *	available to do the 64bit variant of gmtime ()
 */
/* HAS_MKTIME64:
 *	This symbol, if defined, indicates that the mktime64 () routine is
 *	available to do the 64bit variant of mktime ()
 */
/* HAS_DIFFTIME64:
 *	This symbol, if defined, indicates that the difftime64 () routine is
 *	available to do the 64bit variant of difftime ()
 */
/* HAS_ASCTIME64:
 *	This symbol, if defined, indicates that the asctime64 () routine is
 *	available to do the 64bit variant of asctime ()
 */
/*#define	HAS_CTIME64		/ **/
/*#define	HAS_LOCALTIME64		/ **/
/*#define	HAS_GMTIME64		/ **/
/*#define	HAS_MKTIME64		/ **/
/*#define	HAS_DIFFTIME64		/ **/
/*#define	HAS_ASCTIME64		/ **/

/* HAS_TIMEGM:
 *	This symbol, if defined, indicates that the timegm routine is
 *	available to do the opposite of gmtime ()
 */
#define HAS_TIMEGM		/**/

/* HAS_TRUNC:
 *	This symbol, if defined, indicates that the trunc routine is
 *	available to round doubles towards zero.
 */
#define HAS_TRUNC		/**/

/* HAS_TRUNCL:
 *	This symbol, if defined, indicates that the truncl routine is
 *	available. If copysignl is also present we can emulate modfl.
 */
#define HAS_TRUNCL		/**/

/* U32_ALIGNMENT_REQUIRED:
 *	This symbol, if defined, indicates that you must access
 *	character data through U32-aligned pointers.
 */
#ifndef U32_ALIGNMENT_REQUIRED
#define U32_ALIGNMENT_REQUIRED	/**/
#endif

/* HAS_UALARM:
 *	This symbol, if defined, indicates that the ualarm routine is
 *	available to do alarms with microsecond granularity.
 */
/*#define HAS_UALARM		/ **/

/* HAS_UNORDERED:
 *	This symbol, if defined, indicates that the unordered routine is
 *	available to check whether two doubles are unordered
 *	(effectively: whether either of them is NaN)
 */
/*#define HAS_UNORDERED		/ **/

/* HAS_UNSETENV:
 *	This symbol, if defined, indicates that the unsetenv () routine is
 *	available for use.
 */
#define HAS_UNSETENV		/**/

/* HAS_USLEEP_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the usleep() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern int usleep(useconds_t);
 */
#define	HAS_USLEEP_PROTO	/**/

/* HAS_USTAT:
 *	This symbol, if defined, indicates that the ustat system call is
 *	available to query file system statistics by dev_t.
 */
#define HAS_USTAT		/**/

/* HAS_WCSCMP:
 *	This symbol, if defined, indicates that the wcscmp routine is
 *	available to compare two wide character strings.
 */
#define HAS_WCSCMP	/**/

/* HAS_WCSXFRM:
 *	This symbol, if defined, indicates that the wcsxfrm routine is
 *	available to tranform a wide character string for wcscmp().
 */
#define HAS_WCSXFRM	/**/

/* HAS_WRITEV:
 *	This symbol, if defined, indicates that the writev routine is
 *	available to do scatter writes.
 */
#define HAS_WRITEV		/**/

/* USE_DYNAMIC_LOADING:
 *	This symbol, if defined, indicates that dynamic loading of
 *	some sort is available.
 */
#define USE_DYNAMIC_LOADING		/**/

/* FFLUSH_NULL:
 *	This symbol, if defined, tells that fflush(NULL) correctly
 *	flushes all pending stdio output without side effects. In
 *	particular, on some platforms calling fflush(NULL) *still*
 *	corrupts STDIN if it is a pipe.
 */
/* FFLUSH_ALL:
 *	This symbol, if defined, tells that to flush
 *	all pending stdio output one must loop through all
 *	the stdio file handles stored in an array and fflush them.
 *	Note that if fflushNULL is defined, fflushall will not
 *	even be probed for and will be left undefined.
 */
#define	FFLUSH_NULL 		/**/
/*#define	FFLUSH_ALL 		/ **/

/* I_ASSERT:
 *	This symbol, if defined, indicates that <assert.h> exists and
 *	could be included by the C program to get the assert() macro.
 */
#define	I_ASSERT		/**/

/* I_BFD:
 *	This symbol, if defined, indicates that <bfd.h> exists and
 *	can be included.
 */
/*#define	I_BFD		/ **/

/* I_CRYPT:
 *	This symbol, if defined, indicates that <crypt.h> exists and
 *	should be included.
 */
#define	I_CRYPT		/**/

/* DB_Prefix_t:
 *	This symbol contains the type of the prefix structure element
 *	in the <db.h> header file.  In older versions of DB, it was
 *	int, while in newer ones it is u_int32_t.
 */
/* DB_Hash_t:
 *	This symbol contains the type of the prefix structure element
 *	in the <db.h> header file.  In older versions of DB, it was
 *	int, while in newer ones it is size_t.
 */
/* DB_VERSION_MAJOR_CFG:
 *	This symbol, if defined, defines the major version number of
 *	Berkeley DB found in the <db.h> header when Perl was configured.
 */
/* DB_VERSION_MINOR_CFG:
 *	This symbol, if defined, defines the minor version number of
 *	Berkeley DB found in the <db.h> header when Perl was configured.
 *	For DB version 1 this is always 0.
 */
/* DB_VERSION_PATCH_CFG:
 *	This symbol, if defined, defines the patch version number of
 *	Berkeley DB found in the <db.h> header when Perl was configured.
 *	For DB version 1 this is always 0.
 */
#define DB_Hash_t	u_int32_t		/**/
#define DB_Prefix_t	size_t  	/**/
#define DB_VERSION_MAJOR_CFG	5  	/**/
#define DB_VERSION_MINOR_CFG	3  	/**/
#define DB_VERSION_PATCH_CFG	28  	/**/

/* I_FENV:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <fenv.h> to get the floating point environment definitions.
 */
#define I_FENV		/**/

/* I_FP:
 *	This symbol, if defined, indicates that <fp.h> exists and
 *	should be included.
 */
/*#define	I_FP		/ **/

/* I_FP_CLASS:
 *	This symbol, if defined, indicates that <fp_class.h> exists and
 *	should be included.
 */
/*#define	I_FP_CLASS		/ **/

/* I_IEEEFP:
 *	This symbol, if defined, indicates that <ieeefp.h> exists and
 *	should be included.
 */
/*#define	I_IEEEFP		/ **/

/* I_INTTYPES:
 *     This symbol, if defined, indicates to the C program that it should
 *     include <inttypes.h>.
 */
#define   I_INTTYPES                /**/

/* I_LANGINFO:
 *	This symbol, if defined, indicates that <langinfo.h> exists and
 *	should be included.
 */
#define	I_LANGINFO		/**/

/* I_LIBUTIL:
 *	This symbol, if defined, indicates that <libutil.h> exists and
 *	should be included.
 */
/*#define	I_LIBUTIL		/ **/

/* I_MALLOCMALLOC:
 *	This symbol, if defined, indicates to the C program that it should
 *	include <malloc/malloc.h>.
 */
/*#define I_MALLOCMALLOC		/ **/

/* I_MNTENT:
 *	This symbol, if defined, indicates that <mntent.h> exists and
 *	should be included.
 */
#define	I_MNTENT		/**/

/* I_NETINET_TCP:
 *     This symbol, if defined, indicates to the C program that it should
 *     include <netinet/tcp.h>.
 */
#define   I_NETINET_TCP                /**/

/* I_POLL:
 *	This symbol, if defined, indicates that <poll.h> exists and
 *	should be included. (see also HAS_POLL)
 */
#define	I_POLL		/**/

/* I_PROT:
 *	This symbol, if defined, indicates that <prot.h> exists and
 *	should be included.
 */
/*#define	I_PROT		/ **/

/* I_QUADMATH:
 *	This symbol, if defined, indicates that <quadmath.h> exists and
 *	should be included.
 */
/*#define	I_QUADMATH		/ **/

/* I_SHADOW:
 *	This symbol, if defined, indicates that <shadow.h> exists and
 *	should be included.
 */
#define	I_SHADOW		/**/

/* I_SOCKS:
 *	This symbol, if defined, indicates that <socks.h> exists and
 *	should be included.
 */
/*#define	I_SOCKS		/ **/

/* I_STDBOOL:
 *	This symbol, if defined, indicates that <stdbool.h> exists and
 *	can be included.
 */
#define	I_STDBOOL		/**/

/* I_STDINT:
 *	This symbol, if defined, indicates that <stdint.h> exists and
 *	should be included.
 */
#define I_STDINT		/**/

/* I_SUNMATH:
 *	This symbol, if defined, indicates that <sunmath.h> exists and
 *	should be included.
 */
/*#define	I_SUNMATH		/ **/

/* I_SYSLOG:
 *	This symbol, if defined, indicates that <syslog.h> exists and
 *	should be included.
 */
#define	I_SYSLOG		/**/

/* I_SYSMODE:
 *	This symbol, if defined, indicates that <sys/mode.h> exists and
 *	should be included.
 */
/*#define	I_SYSMODE		/ **/

/* I_SYS_MOUNT:
 *	This symbol, if defined, indicates that <sys/mount.h> exists and
 *	should be included.
 */
#define	I_SYS_MOUNT		/**/

/* I_SYS_STATFS:
 *	This symbol, if defined, indicates that <sys/statfs.h> exists.
 */
#define	I_SYS_STATFS		/**/

/* I_SYS_STATVFS:
 *	This symbol, if defined, indicates that <sys/statvfs.h> exists and
 *	should be included.
 */
#define	I_SYS_STATVFS		/**/

/* I_SYSUTSNAME:
 *	This symbol, if defined, indicates that <sys/utsname.h> exists and
 *	should be included.
 */
#define	I_SYSUTSNAME		/**/

/* I_SYS_VFS:
 *	This symbol, if defined, indicates that <sys/vfs.h> exists and
 *	should be included.
 */
#define	I_SYS_VFS		/**/

/* I_USTAT:
 *	This symbol, if defined, indicates that <ustat.h> exists and
 *	should be included.
 */
#define	I_USTAT		/**/

/* DOUBLEINFBYTES:
 *	This symbol, if defined, is a comma-separated list of
 *	hexadecimal bytes for the double precision infinity.
 */
/* DOUBLENANBYTES:
 *	This symbol, if defined, is a comma-separated list of
 *	hexadecimal bytes (0xHH) for the double precision not-a-number.
 */
/* LONGDBLINFBYTES:
 *	This symbol, if defined, is a comma-separated list of
 *	hexadecimal bytes for the long double precision infinity.
 */
/* LONGDBLNANBYTES:
 *	This symbol, if defined, is a comma-separated list of
 *	hexadecimal bytes (0xHH) for the long double precision not-a-number.
 */
#define DOUBLEINFBYTES  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f		/**/
#define DOUBLENANBYTES  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f		/**/
#define LONGDBLINFBYTES 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f		/**/
#define LONGDBLNANBYTES 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f		/**/

/* PERL_PRIfldbl:
 *	This symbol, if defined, contains the string used by stdio to
 *	format long doubles (format 'f') for output.
 */
/* PERL_PRIgldbl:
 *	This symbol, if defined, contains the string used by stdio to
 *	format long doubles (format 'g') for output.
 */
/* PERL_PRIeldbl:
 *	This symbol, if defined, contains the string used by stdio to
 *	format long doubles (format 'e') for output.
 */
/* PERL_SCNfldbl:
 *	This symbol, if defined, contains the string used by stdio to
 *	format long doubles (format 'f') for input.
 */
/* DOUBLEKIND:
 *	DOUBLEKIND will be one of
 *	DOUBLE_IS_IEEE_754_32_BIT_LITTLE_ENDIAN
 *	DOUBLE_IS_IEEE_754_32_BIT_BIG_ENDIAN
 *	DOUBLE_IS_IEEE_754_64_BIT_LITTLE_ENDIAN
 *	DOUBLE_IS_IEEE_754_64_BIT_BIG_ENDIAN
 *	DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN
 *	DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN
 *	DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_LE_BE
 *	DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_BE_LE
 *	DOUBLE_IS_UNKNOWN_FORMAT
 */
#define DOUBLEKIND 3		/**/
#define DOUBLE_IS_IEEE_754_32_BIT_LITTLE_ENDIAN	1
#define DOUBLE_IS_IEEE_754_32_BIT_BIG_ENDIAN	2
#define DOUBLE_IS_IEEE_754_64_BIT_LITTLE_ENDIAN	3
#define DOUBLE_IS_IEEE_754_64_BIT_BIG_ENDIAN	4
#define DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN	5
#define DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN	6
#define DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_LE_BE	7
#define DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_BE_LE	8
#define DOUBLE_IS_UNKNOWN_FORMAT		-1
#define PERL_PRIfldbl	"f"	/**/
#define PERL_PRIgldbl	"g"	/**/
#define PERL_PRIeldbl	"e"	/**/
#define PERL_SCNfldbl	"f"	/**/

/* DOUBLEMANTBITS:
 *	This symbol, if defined, tells how many mantissa bits
 *	there are in double precision floating point format.
 *	Note that this is usually DBL_MANT_DIG minus one, since
 *	with the standard IEEE 754 formats DBL_MANT_DIG includes
 *	the implicit bit, which doesn't really exist.
 */
/* LONGDBLMANTBITS:
 *	This symbol, if defined, tells how many mantissa bits
 *	there are in long double precision floating point format.
 *	Note that this can be LDBL_MANT_DIG minus one,
 *	since LDBL_MANT_DIG can include the IEEE 754 implicit bit.
 *	The common x86-style 80-bit long double does not have
 *	an implicit bit.
 */
/* NVMANTBITS:
 *	This symbol, if defined, tells how many mantissa bits
 *	(not including implicit bit) there are in a Perl NV.
 *	This depends on which floating point type was chosen.
 */
#define DOUBLEMANTBITS  52
#define LONGDBLMANTBITS 52
#define NVMANTBITS      52

/* NEED_VA_COPY:
 *	This symbol, if defined, indicates that the system stores
 *	the variable argument list datatype, va_list, in a format
 *	that cannot be copied by simple assignment, so that some
 *	other means must be used when copying is required.
 *	As such systems vary in their provision (or non-provision)
 *	of copying mechanisms, handy.h defines a platform-
 *	independent macro, Perl_va_copy(src, dst), to do the job.
 */
/*#define	NEED_VA_COPY		/ **/

/* IVTYPE:
 *	This symbol defines the C type used for Perl's IV.
 */
/* UVTYPE:
 *	This symbol defines the C type used for Perl's UV.
 */
/* I8TYPE:
 *	This symbol defines the C type used for Perl's I8.
 */
/* U8TYPE:
 *	This symbol defines the C type used for Perl's U8.
 */
/* I16TYPE:
 *	This symbol defines the C type used for Perl's I16.
 */
/* U16TYPE:
 *	This symbol defines the C type used for Perl's U16.
 */
/* I32TYPE:
 *	This symbol defines the C type used for Perl's I32.
 */
/* U32TYPE:
 *	This symbol defines the C type used for Perl's U32.
 */
/* I64TYPE:
 *	This symbol defines the C type used for Perl's I64.
 */
/* U64TYPE:
 *	This symbol defines the C type used for Perl's U64.
 */
/* NVTYPE:
 *	This symbol defines the C type used for Perl's NV.
 */
/* IVSIZE:
 *	This symbol contains the sizeof(IV).
 */
/* UVSIZE:
 *	This symbol contains the sizeof(UV).
 */
/* I8SIZE:
 *	This symbol contains the sizeof(I8).
 */
/* U8SIZE:
 *	This symbol contains the sizeof(U8).
 */
/* I16SIZE:
 *	This symbol contains the sizeof(I16).
 */
/* U16SIZE:
 *	This symbol contains the sizeof(U16).
 */
/* I32SIZE:
 *	This symbol contains the sizeof(I32).
 */
/* U32SIZE:
 *	This symbol contains the sizeof(U32).
 */
/* I64SIZE:
 *	This symbol contains the sizeof(I64).
 */
/* U64SIZE:
 *	This symbol contains the sizeof(U64).
 */
/* NVSIZE:
 *	This symbol contains the sizeof(NV).
 *	Note that some floating point formats have unused bytes.
 *	The most notable example is the x86* 80-bit extended precision
 *	which comes in byte sizes of 12 and 16 (for 32 and 64 bit
 *	platforms, respectively), but which only uses 10 bytes.
 *	Perl compiled with -Duselongdouble on x86* is like this.
 */
/* NV_PRESERVES_UV:
 *	This symbol, if defined, indicates that a variable of type NVTYPE
 *	can preserve all the bits of a variable of type UVTYPE.
 */
/* NV_PRESERVES_UV_BITS:
 *	This symbol contains the number of bits a variable of type NVTYPE
 *	can preserve of a variable of type UVTYPE.
 */
/* NV_OVERFLOWS_INTEGERS_AT:
 *	This symbol gives the largest integer value that NVs can hold. This
 *	value + 1.0 cannot be stored accurately. It is expressed as constant
 *	floating point expression to reduce the chance of decimal/binary
 *	conversion issues. If it can not be determined, the value 0 is given.
 */
/* NV_ZERO_IS_ALLBITS_ZERO:
 *	This symbol, if defined, indicates that a variable of type NVTYPE
 *	stores 0.0 in memory as all bits zero.
 */
#define	IVTYPE		long long		/**/
#define	UVTYPE		unsigned long long		/**/
#define	I8TYPE		signed char		/**/
#define	U8TYPE		unsigned char		/**/
#define	I16TYPE		short	/**/
#define	U16TYPE		unsigned short	/**/
#define	I32TYPE		long	/**/
#define	U32TYPE		unsigned long	/**/
#ifdef HAS_QUAD
#define	I64TYPE		long long	/**/
#define	U64TYPE		unsigned long long	/**/
#endif
#define	NVTYPE		double		/**/
#define	IVSIZE		8		/**/
#define	UVSIZE		8		/**/
#define	I8SIZE		1		/**/
#define	U8SIZE		1		/**/
#define	I16SIZE		2	/**/
#define	U16SIZE		2	/**/
#define	I32SIZE		4	/**/
#define	U32SIZE		4	/**/
#ifdef HAS_QUAD
#define	I64SIZE		8	/**/
#define	U64SIZE		8	/**/
#endif
#define	NVSIZE		8		/**/
#undef	NV_PRESERVES_UV
#define	NV_PRESERVES_UV_BITS	53
#define	NV_OVERFLOWS_INTEGERS_AT	256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0
#define	NV_ZERO_IS_ALLBITS_ZERO
#if UVSIZE == 8
#   ifdef BYTEORDER
#       if BYTEORDER == 0x1234
#           undef BYTEORDER
#           define BYTEORDER 0x12345678
#       else
#           if BYTEORDER == 0x4321
#               undef BYTEORDER
#               define BYTEORDER 0x87654321
#           endif
#       endif
#   endif
#endif

/* IVdf:
 *	This symbol defines the format string used for printing a Perl IV
 *	as a signed decimal integer.
 */
/* UVuf:
 *	This symbol defines the format string used for printing a Perl UV
 *	as an unsigned decimal integer.
 */
/* UVof:
 *	This symbol defines the format string used for printing a Perl UV
 *	as an unsigned octal integer.
 */
/* UVxf:
 *	This symbol defines the format string used for printing a Perl UV
 *	as an unsigned hexadecimal integer in lowercase abcdef.
 */
/* UVXf:
 *	This symbol defines the format string used for printing a Perl UV
 *	as an unsigned hexadecimal integer in uppercase ABCDEF.
 */
/* NVef:
 *	This symbol defines the format string used for printing a Perl NV
 *	using %e-ish floating point format.
 */
/* NVff:
 *	This symbol defines the format string used for printing a Perl NV
 *	using %f-ish floating point format.
 */
/* NVgf:
 *	This symbol defines the format string used for printing a Perl NV
 *	using %g-ish floating point format.
 */
#define	IVdf		"Ld"		/**/
#define	UVuf		"Lu"		/**/
#define	UVof		"Lo"		/**/
#define	UVxf		"Lx"		/**/
#define	UVXf		"LX"		/**/
#define	NVef		"e"		/**/
#define	NVff		"f"		/**/
#define	NVgf		"g"		/**/

/* SELECT_MIN_BITS:
 *	This symbol holds the minimum number of bits operated by select.
 *	That is, if you do select(n, ...), how many bits at least will be
 *	cleared in the masks if some activity is detected.  Usually this
 *	is either n or 32*ceil(n/32), especially many little-endians do
 *	the latter.  This is only useful if you have select(), naturally.
 */
#define SELECT_MIN_BITS 	32	/**/

/* ST_INO_SIZE:
 *	This variable contains the size of struct stat's st_ino in bytes.
 */
/* ST_INO_SIGN:
 *	This symbol holds the signedness of struct stat's st_ino.
 *	1 for unsigned, -1 for signed.
 */
#define ST_INO_SIGN 1	/* st_ino sign */
#define ST_INO_SIZE 8	/* st_ino size */

/* STARTPERL:
 *	This variable contains the string to put in front of a perl
 *	script to make sure (one hopes) that it runs with perl and not
 *	some shell.
 */
#define STARTPERL "#!/usr/bin/perl"		/**/

/* HAS_STDIO_STREAM_ARRAY:
 *	This symbol, if defined, tells that there is an array
 *	holding the stdio streams.
 */
/* STDIO_STREAM_ARRAY:
 *	This symbol tells the name of the array holding the stdio streams.
 *	Usual values include _iob, __iob, and __sF.
 */
/*#define	HAS_STDIO_STREAM_ARRAY	/ **/
#ifdef HAS_STDIO_STREAM_ARRAY
#define STDIO_STREAM_ARRAY	
#endif

/* GMTIME_MAX:
 *	This symbol contains the maximum value for the time_t offset that
 *	the system function gmtime () accepts, and defaults to 0
 */
/* GMTIME_MIN:
 *	This symbol contains the minimum value for the time_t offset that
 *	the system function gmtime () accepts, and defaults to 0
 */
/* LOCALTIME_MAX:
 *	This symbol contains the maximum value for the time_t offset that
 *	the system function localtime () accepts, and defaults to 0
 */
/* LOCALTIME_MIN:
 *	This symbol contains the minimum value for the time_t offset that
 *	the system function localtime () accepts, and defaults to 0
 */
#define GMTIME_MAX		2147483647	/**/
#define GMTIME_MIN		-2147483648	/**/
#define LOCALTIME_MAX	2147483647	/**/
#define LOCALTIME_MIN	-2147483648	/**/

/* USE_64_BIT_INT:
 *	This symbol, if defined, indicates that 64-bit integers should
 *	be used when available.  If not defined, the native integers
 *	will be employed (be they 32 or 64 bits).  The minimal possible
 *	64-bitness is used, just enough to get 64-bit integers into Perl.
 *	This may mean using for example "long longs", while your memory
 *	may still be limited to 2 gigabytes.
 */
/* USE_64_BIT_ALL:
 *	This symbol, if defined, indicates that 64-bit integers should
 *	be used when available.  If not defined, the native integers
 *	will be used (be they 32 or 64 bits).  The maximal possible
 *	64-bitness is employed: LP64 or ILP64, meaning that you will
 *	be able to use more than 2 gigabytes of memory.  This mode is
 *	even more binary incompatible than USE_64_BIT_INT. You may not
 *	be able to run the resulting executable in a 32-bit CPU at all or
 *	you may need at least to reboot your OS to 64-bit mode.
 */
#ifndef USE_64_BIT_INT
#define	USE_64_BIT_INT		/**/
#endif
#ifndef USE_64_BIT_ALL
/*#define	USE_64_BIT_ALL		/ **/
#endif

/* USE_CBACKTRACE:
 *	This symbol, if defined, indicates that Perl should
 *	be built with support for backtrace.
 */
/*#define USE_CBACKTRACE		/ **/

/* USE_DTRACE:
 *	This symbol, if defined, indicates that Perl should
 *	be built with support for DTrace.
 */
/*#define USE_DTRACE		/ **/

/* USE_FAST_STDIO:
 *	This symbol, if defined, indicates that Perl should
 *	be built to use 'fast stdio'.
 *	Defaults to define in Perls 5.8 and earlier, to undef later.
 */
#ifndef USE_FAST_STDIO
/*#define	USE_FAST_STDIO		/ **/
#endif

/* USE_KERN_PROC_PATHNAME:
 *	This symbol, if defined, indicates that we can use sysctl with
 *	KERN_PROC_PATHNAME to get a full path for the executable, and hence
 * 	convert $^X to an absolute path.
 */
/*#define USE_KERN_PROC_PATHNAME	/ **/

/* USE_LARGE_FILES:
 *	This symbol, if defined, indicates that large file support
 *	should be used when available.
 */
#ifndef USE_LARGE_FILES
#define	USE_LARGE_FILES		/**/
#endif

/* USE_LONG_DOUBLE:
 *	This symbol, if defined, indicates that long doubles should
 *	be used when available.
 */
#ifndef USE_LONG_DOUBLE
/*#define	USE_LONG_DOUBLE		/ **/
#endif

/* USE_MORE_BITS:
 *	This symbol, if defined, indicates that 64-bit interfaces and
 *	long doubles should be used when available.
 */
#ifndef USE_MORE_BITS
/*#define	USE_MORE_BITS		/ **/
#endif

/* MULTIPLICITY:
 *	This symbol, if defined, indicates that Perl should
 *	be built to use multiplicity.
 */
#ifndef MULTIPLICITY
#define	MULTIPLICITY		/**/
#endif

/* USE_NSGETEXECUTABLEPATH:
 *	This symbol, if defined, indicates that we can use _NSGetExecutablePath
 *	and realpath to get a full path for the executable, and hence convert
 *	$^X to an absolute path.
 */
/*#define USE_NSGETEXECUTABLEPATH	/ **/

/* USE_PERLIO:
 *	This symbol, if defined, indicates that the PerlIO abstraction should
 *	be used throughout.  If not defined, stdio should be
 *	used in a fully backward compatible manner.
 */
#ifndef USE_PERLIO
#define	USE_PERLIO		/**/
#endif

/* USE_QUADMATH:
 *	This symbol, if defined, indicates that the quadmath library should
 *	be used when available.
 */
#ifndef USE_QUADMATH
/*#define	USE_QUADMATH		/ **/
#endif

/* USE_SOCKS:
 *	This symbol, if defined, indicates that Perl should
 *	be built to use socks.
 */
#ifndef USE_SOCKS
/*#define	USE_SOCKS		/ **/
#endif

/* HAS_DRAND48_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the drand48() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern double drand48(void);
 */
#define	HAS_DRAND48_PROTO	/**/

/* HAS_GETHOST_PROTOS:
 *	This symbol, if defined, indicates that <netdb.h> includes
 *	prototypes for gethostent(), gethostbyname(), and
 *	gethostbyaddr().  Otherwise, it is up to the program to guess
 *	them.  See netdbtype.U for probing for various Netdb_xxx_t types.
 */
#define	HAS_GETHOST_PROTOS	/**/

/* HAS_GETNET_PROTOS:
 *	This symbol, if defined, indicates that <netdb.h> includes
 *	prototypes for getnetent(), getnetbyname(), and
 *	getnetbyaddr().  Otherwise, it is up to the program to guess
 *	them.  See netdbtype.U for probing for various Netdb_xxx_t types.
 */
#define	HAS_GETNET_PROTOS	/**/

/* HAS_GETPROTO_PROTOS:
 *	This symbol, if defined, indicates that <netdb.h> includes
 *	prototypes for getprotoent(), getprotobyname(), and
 *	getprotobyaddr().  Otherwise, it is up to the program to guess
 *	them.  See netdbtype.U for probing for various Netdb_xxx_t types.
 */
#define	HAS_GETPROTO_PROTOS	/**/

/* HAS_GETSERV_PROTOS:
 *	This symbol, if defined, indicates that <netdb.h> includes
 *	prototypes for getservent(), getservbyname(), and
 *	getservbyaddr().  Otherwise, it is up to the program to guess
 *	them.  See netdbtype.U for probing for various Netdb_xxx_t types.
 */
#define	HAS_GETSERV_PROTOS	/**/

/* HAS_LSEEK_PROTO:
 *	This symbol, if defined, indicates that the system provides
 *	a prototype for the lseek() function.  Otherwise, it is up
 *	to the program to supply one.  A good guess is
 *		extern off_t lseek(int, off_t, int);
 */
#define	HAS_LSEEK_PROTO	/**/

/* Netdb_host_t:
 *	This symbol holds the type used for the 1st argument
 *	to gethostbyaddr().
 */
/* Netdb_hlen_t:
 *	This symbol holds the type used for the 2nd argument
 *	to gethostbyaddr().
 */
/* Netdb_name_t:
 *	This symbol holds the type used for the argument to
 *	gethostbyname().
 */
/* Netdb_net_t:
 *	This symbol holds the type used for the 1st argument to
 *	getnetbyaddr().
 */
#define Netdb_host_t		const void * /**/
#define Netdb_hlen_t		size_t /**/
#define Netdb_name_t		const char * /**/
#define Netdb_net_t		in_addr_t /**/

/* Select_fd_set_t:
 *	This symbol holds the type used for the 2nd, 3rd, and 4th
 *	arguments to select.  Usually, this is 'fd_set *', if HAS_FD_SET
 *	is defined, and 'int *' otherwise.  This is only useful if you
 *	have select(), of course.
 */
#define Select_fd_set_t 	fd_set *	/**/

/* Sock_size_t:
 *	This symbol holds the type used for the size argument of
 *	various socket calls (just the base type, not the pointer-to).
 */
#define Sock_size_t		socklen_t /**/

/* ARCHNAME:
 *	This symbol holds a string representing the architecture name.
 *	It may be used to construct an architecture-dependant pathname
 *	where library files may be held under a private library, for
 *	instance.
 */
#define ARCHNAME "arm-linux-gnueabihf-thread-multi-64int"		/**/

/* HAS_ASCTIME_R:
 *	This symbol, if defined, indicates that the asctime_r routine
 *	is available to asctime re-entrantly.
 */
/* ASCTIME_R_PROTO:
 *	This symbol encodes the prototype of asctime_r.
 *	It is zero if d_asctime_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_asctime_r
 *	is defined.
 */
#define HAS_ASCTIME_R	   /**/
#define ASCTIME_R_PROTO REENTRANT_PROTO_B_SB	   /**/

/* HAS_CRYPT_R:
 *	This symbol, if defined, indicates that the crypt_r routine
 *	is available to crypt re-entrantly.
 */
/* CRYPT_R_PROTO:
 *	This symbol encodes the prototype of crypt_r.
 *	It is zero if d_crypt_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_crypt_r
 *	is defined.
 */
#define HAS_CRYPT_R	   /**/
#define CRYPT_R_PROTO REENTRANT_PROTO_B_CCS	   /**/

/* HAS_CTERMID_R:
 *	This symbol, if defined, indicates that the ctermid_r routine
 *	is available to ctermid re-entrantly.
 */
/* CTERMID_R_PROTO:
 *	This symbol encodes the prototype of ctermid_r.
 *	It is zero if d_ctermid_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_ctermid_r
 *	is defined.
 */
/*#define HAS_CTERMID_R	   / **/
#define CTERMID_R_PROTO 0	   /**/

/* HAS_CTIME_R:
 *	This symbol, if defined, indicates that the ctime_r routine
 *	is available to ctime re-entrantly.
 */
/* CTIME_R_PROTO:
 *	This symbol encodes the prototype of ctime_r.
 *	It is zero if d_ctime_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_ctime_r
 *	is defined.
 */
#define HAS_CTIME_R	   /**/
#define CTIME_R_PROTO REENTRANT_PROTO_B_SB	   /**/

/* HAS_DRAND48_R:
 *	This symbol, if defined, indicates that the drand48_r routine
 *	is available to drand48 re-entrantly.
 */
/* DRAND48_R_PROTO:
 *	This symbol encodes the prototype of drand48_r.
 *	It is zero if d_drand48_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_drand48_r
 *	is defined.
 */
#define HAS_DRAND48_R	   /**/
#define DRAND48_R_PROTO REENTRANT_PROTO_I_ST	   /**/

/* HAS_ENDGRENT_R:
 *	This symbol, if defined, indicates that the endgrent_r routine
 *	is available to endgrent re-entrantly.
 */
/* ENDGRENT_R_PROTO:
 *	This symbol encodes the prototype of endgrent_r.
 *	It is zero if d_endgrent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_endgrent_r
 *	is defined.
 */
/*#define HAS_ENDGRENT_R	   / **/
#define ENDGRENT_R_PROTO 0	   /**/

/* HAS_ENDHOSTENT_R:
 *	This symbol, if defined, indicates that the endhostent_r routine
 *	is available to endhostent re-entrantly.
 */
/* ENDHOSTENT_R_PROTO:
 *	This symbol encodes the prototype of endhostent_r.
 *	It is zero if d_endhostent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_endhostent_r
 *	is defined.
 */
/*#define HAS_ENDHOSTENT_R	   / **/
#define ENDHOSTENT_R_PROTO 0	   /**/

/* HAS_ENDNETENT_R:
 *	This symbol, if defined, indicates that the endnetent_r routine
 *	is available to endnetent re-entrantly.
 */
/* ENDNETENT_R_PROTO:
 *	This symbol encodes the prototype of endnetent_r.
 *	It is zero if d_endnetent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_endnetent_r
 *	is defined.
 */
/*#define HAS_ENDNETENT_R	   / **/
#define ENDNETENT_R_PROTO 0	   /**/

/* HAS_ENDPROTOENT_R:
 *	This symbol, if defined, indicates that the endprotoent_r routine
 *	is available to endprotoent re-entrantly.
 */
/* ENDPROTOENT_R_PROTO:
 *	This symbol encodes the prototype of endprotoent_r.
 *	It is zero if d_endprotoent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_endprotoent_r
 *	is defined.
 */
/*#define HAS_ENDPROTOENT_R	   / **/
#define ENDPROTOENT_R_PROTO 0	   /**/

/* HAS_ENDPWENT_R:
 *	This symbol, if defined, indicates that the endpwent_r routine
 *	is available to endpwent re-entrantly.
 */
/* ENDPWENT_R_PROTO:
 *	This symbol encodes the prototype of endpwent_r.
 *	It is zero if d_endpwent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_endpwent_r
 *	is defined.
 */
/*#define HAS_ENDPWENT_R	   / **/
#define ENDPWENT_R_PROTO 0	   /**/

/* HAS_ENDSERVENT_R:
 *	This symbol, if defined, indicates that the endservent_r routine
 *	is available to endservent re-entrantly.
 */
/* ENDSERVENT_R_PROTO:
 *	This symbol encodes the prototype of endservent_r.
 *	It is zero if d_endservent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_endservent_r
 *	is defined.
 */
/*#define HAS_ENDSERVENT_R	   / **/
#define ENDSERVENT_R_PROTO 0	   /**/

/* HAS_GETGRENT_R:
 *	This symbol, if defined, indicates that the getgrent_r routine
 *	is available to getgrent re-entrantly.
 */
/* GETGRENT_R_PROTO:
 *	This symbol encodes the prototype of getgrent_r.
 *	It is zero if d_getgrent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getgrent_r
 *	is defined.
 */
#define HAS_GETGRENT_R	   /**/
#define GETGRENT_R_PROTO REENTRANT_PROTO_I_SBWR	   /**/

/* HAS_GETGRGID_R:
 *	This symbol, if defined, indicates that the getgrgid_r routine
 *	is available to getgrgid re-entrantly.
 */
/* GETGRGID_R_PROTO:
 *	This symbol encodes the prototype of getgrgid_r.
 *	It is zero if d_getgrgid_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getgrgid_r
 *	is defined.
 */
#define HAS_GETGRGID_R	   /**/
#define GETGRGID_R_PROTO REENTRANT_PROTO_I_TSBWR	   /**/

/* HAS_GETGRNAM_R:
 *	This symbol, if defined, indicates that the getgrnam_r routine
 *	is available to getgrnam re-entrantly.
 */
/* GETGRNAM_R_PROTO:
 *	This symbol encodes the prototype of getgrnam_r.
 *	It is zero if d_getgrnam_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getgrnam_r
 *	is defined.
 */
#define HAS_GETGRNAM_R	   /**/
#define GETGRNAM_R_PROTO REENTRANT_PROTO_I_CSBWR	   /**/

/* HAS_GETHOSTBYADDR_R:
 *	This symbol, if defined, indicates that the gethostbyaddr_r routine
 *	is available to gethostbyaddr re-entrantly.
 */
/* GETHOSTBYADDR_R_PROTO:
 *	This symbol encodes the prototype of gethostbyaddr_r.
 *	It is zero if d_gethostbyaddr_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_gethostbyaddr_r
 *	is defined.
 */
#define HAS_GETHOSTBYADDR_R	   /**/
#define GETHOSTBYADDR_R_PROTO REENTRANT_PROTO_I_TsISBWRE	   /**/

/* HAS_GETHOSTBYNAME_R:
 *	This symbol, if defined, indicates that the gethostbyname_r routine
 *	is available to gethostbyname re-entrantly.
 */
/* GETHOSTBYNAME_R_PROTO:
 *	This symbol encodes the prototype of gethostbyname_r.
 *	It is zero if d_gethostbyname_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_gethostbyname_r
 *	is defined.
 */
#define HAS_GETHOSTBYNAME_R	   /**/
#define GETHOSTBYNAME_R_PROTO REENTRANT_PROTO_I_CSBWRE	   /**/

/* HAS_GETHOSTENT_R:
 *	This symbol, if defined, indicates that the gethostent_r routine
 *	is available to gethostent re-entrantly.
 */
/* GETHOSTENT_R_PROTO:
 *	This symbol encodes the prototype of gethostent_r.
 *	It is zero if d_gethostent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_gethostent_r
 *	is defined.
 */
#define HAS_GETHOSTENT_R	   /**/
#define GETHOSTENT_R_PROTO REENTRANT_PROTO_I_SBWRE	   /**/

/* HAS_GETLOGIN_R:
 *	This symbol, if defined, indicates that the getlogin_r routine
 *	is available to getlogin re-entrantly.
 */
/* GETLOGIN_R_PROTO:
 *	This symbol encodes the prototype of getlogin_r.
 *	It is zero if d_getlogin_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getlogin_r
 *	is defined.
 */
#define HAS_GETLOGIN_R	   /**/
#define GETLOGIN_R_PROTO REENTRANT_PROTO_I_BW	   /**/

/* HAS_GETNETBYADDR_R:
 *	This symbol, if defined, indicates that the getnetbyaddr_r routine
 *	is available to getnetbyaddr re-entrantly.
 */
/* GETNETBYADDR_R_PROTO:
 *	This symbol encodes the prototype of getnetbyaddr_r.
 *	It is zero if d_getnetbyaddr_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getnetbyaddr_r
 *	is defined.
 */
#define HAS_GETNETBYADDR_R	   /**/
#define GETNETBYADDR_R_PROTO REENTRANT_PROTO_I_uISBWRE	   /**/

/* HAS_GETNETBYNAME_R:
 *	This symbol, if defined, indicates that the getnetbyname_r routine
 *	is available to getnetbyname re-entrantly.
 */
/* GETNETBYNAME_R_PROTO:
 *	This symbol encodes the prototype of getnetbyname_r.
 *	It is zero if d_getnetbyname_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getnetbyname_r
 *	is defined.
 */
#define HAS_GETNETBYNAME_R	   /**/
#define GETNETBYNAME_R_PROTO REENTRANT_PROTO_I_CSBWRE	   /**/

/* HAS_GETNETENT_R:
 *	This symbol, if defined, indicates that the getnetent_r routine
 *	is available to getnetent re-entrantly.
 */
/* GETNETENT_R_PROTO:
 *	This symbol encodes the prototype of getnetent_r.
 *	It is zero if d_getnetent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getnetent_r
 *	is defined.
 */
#define HAS_GETNETENT_R	   /**/
#define GETNETENT_R_PROTO REENTRANT_PROTO_I_SBWRE	   /**/

/* HAS_GETPROTOBYNAME_R:
 *	This symbol, if defined, indicates that the getprotobyname_r routine
 *	is available to getprotobyname re-entrantly.
 */
/* GETPROTOBYNAME_R_PROTO:
 *	This symbol encodes the prototype of getprotobyname_r.
 *	It is zero if d_getprotobyname_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getprotobyname_r
 *	is defined.
 */
#define HAS_GETPROTOBYNAME_R	   /**/
#define GETPROTOBYNAME_R_PROTO REENTRANT_PROTO_I_CSBWR	   /**/

/* HAS_GETPROTOBYNUMBER_R:
 *	This symbol, if defined, indicates that the getprotobynumber_r routine
 *	is available to getprotobynumber re-entrantly.
 */
/* GETPROTOBYNUMBER_R_PROTO:
 *	This symbol encodes the prototype of getprotobynumber_r.
 *	It is zero if d_getprotobynumber_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getprotobynumber_r
 *	is defined.
 */
#define HAS_GETPROTOBYNUMBER_R	   /**/
#define GETPROTOBYNUMBER_R_PROTO REENTRANT_PROTO_I_ISBWR	   /**/

/* HAS_GETPROTOENT_R:
 *	This symbol, if defined, indicates that the getprotoent_r routine
 *	is available to getprotoent re-entrantly.
 */
/* GETPROTOENT_R_PROTO:
 *	This symbol encodes the prototype of getprotoent_r.
 *	It is zero if d_getprotoent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getprotoent_r
 *	is defined.
 */
#define HAS_GETPROTOENT_R	   /**/
#define GETPROTOENT_R_PROTO REENTRANT_PROTO_I_SBWR	   /**/

/* HAS_GETPWENT_R:
 *	This symbol, if defined, indicates that the getpwent_r routine
 *	is available to getpwent re-entrantly.
 */
/* GETPWENT_R_PROTO:
 *	This symbol encodes the prototype of getpwent_r.
 *	It is zero if d_getpwent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getpwent_r
 *	is defined.
 */
#define HAS_GETPWENT_R	   /**/
#define GETPWENT_R_PROTO REENTRANT_PROTO_I_SBWR	   /**/

/* HAS_GETPWNAM_R:
 *	This symbol, if defined, indicates that the getpwnam_r routine
 *	is available to getpwnam re-entrantly.
 */
/* GETPWNAM_R_PROTO:
 *	This symbol encodes the prototype of getpwnam_r.
 *	It is zero if d_getpwnam_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getpwnam_r
 *	is defined.
 */
#define HAS_GETPWNAM_R	   /**/
#define GETPWNAM_R_PROTO REENTRANT_PROTO_I_CSBWR	   /**/

/* HAS_GETPWUID_R:
 *	This symbol, if defined, indicates that the getpwuid_r routine
 *	is available to getpwuid re-entrantly.
 */
/* GETPWUID_R_PROTO:
 *	This symbol encodes the prototype of getpwuid_r.
 *	It is zero if d_getpwuid_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getpwuid_r
 *	is defined.
 */
#define HAS_GETPWUID_R	   /**/
#define GETPWUID_R_PROTO REENTRANT_PROTO_I_TSBWR	   /**/

/* HAS_GETSERVBYNAME_R:
 *	This symbol, if defined, indicates that the getservbyname_r routine
 *	is available to getservbyname re-entrantly.
 */
/* GETSERVBYNAME_R_PROTO:
 *	This symbol encodes the prototype of getservbyname_r.
 *	It is zero if d_getservbyname_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getservbyname_r
 *	is defined.
 */
#define HAS_GETSERVBYNAME_R	   /**/
#define GETSERVBYNAME_R_PROTO REENTRANT_PROTO_I_CCSBWR	   /**/

/* HAS_GETSERVBYPORT_R:
 *	This symbol, if defined, indicates that the getservbyport_r routine
 *	is available to getservbyport re-entrantly.
 */
/* GETSERVBYPORT_R_PROTO:
 *	This symbol encodes the prototype of getservbyport_r.
 *	It is zero if d_getservbyport_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getservbyport_r
 *	is defined.
 */
#define HAS_GETSERVBYPORT_R	   /**/
#define GETSERVBYPORT_R_PROTO REENTRANT_PROTO_I_ICSBWR	   /**/

/* HAS_GETSERVENT_R:
 *	This symbol, if defined, indicates that the getservent_r routine
 *	is available to getservent re-entrantly.
 */
/* GETSERVENT_R_PROTO:
 *	This symbol encodes the prototype of getservent_r.
 *	It is zero if d_getservent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getservent_r
 *	is defined.
 */
#define HAS_GETSERVENT_R	   /**/
#define GETSERVENT_R_PROTO REENTRANT_PROTO_I_SBWR	   /**/

/* HAS_GETSPNAM_R:
 *	This symbol, if defined, indicates that the getspnam_r routine
 *	is available to getspnam re-entrantly.
 */
/* GETSPNAM_R_PROTO:
 *	This symbol encodes the prototype of getspnam_r.
 *	It is zero if d_getspnam_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_getspnam_r
 *	is defined.
 */
#define HAS_GETSPNAM_R	   /**/
#define GETSPNAM_R_PROTO REENTRANT_PROTO_I_CSBWR	   /**/

/* HAS_GMTIME_R:
 *	This symbol, if defined, indicates that the gmtime_r routine
 *	is available to gmtime re-entrantly.
 */
/* GMTIME_R_PROTO:
 *	This symbol encodes the prototype of gmtime_r.
 *	It is zero if d_gmtime_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_gmtime_r
 *	is defined.
 */
#define HAS_GMTIME_R	   /**/
#define GMTIME_R_PROTO REENTRANT_PROTO_S_TS	   /**/

/* HAS_LOCALTIME_R:
 *	This symbol, if defined, indicates that the localtime_r routine
 *	is available to localtime re-entrantly.
 */
/* LOCALTIME_R_NEEDS_TZSET:
 *	Many libc's localtime_r implementations do not call tzset,
 *	making them differ from localtime(), and making timezone
 *	changes using $ENV{TZ} without explicitly calling tzset
 *	impossible. This symbol makes us call tzset before localtime_r
 */
#define LOCALTIME_R_NEEDS_TZSET /**/
#ifdef LOCALTIME_R_NEEDS_TZSET
#define L_R_TZSET tzset(),
#else
#define L_R_TZSET
#endif

/* LOCALTIME_R_PROTO:
 *	This symbol encodes the prototype of localtime_r.
 *	It is zero if d_localtime_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_localtime_r
 *	is defined.
 */
#define HAS_LOCALTIME_R	   /**/
#define LOCALTIME_R_PROTO REENTRANT_PROTO_S_TS	   /**/

/* OLD_PTHREAD_CREATE_JOINABLE:
 *	This symbol, if defined, indicates how to create pthread
 *	in joinable (aka undetached) state.  NOTE: not defined
 *	if pthread.h already has defined PTHREAD_CREATE_JOINABLE
 *	(the new version of the constant).
 *	If defined, known values are PTHREAD_CREATE_UNDETACHED
 *	and __UNDETACHED.
 */
/*#define OLD_PTHREAD_CREATE_JOINABLE  / **/

/* HAS_PTHREAD_ATFORK:
 *	This symbol, if defined, indicates that the pthread_atfork routine
 *	is available to setup fork handlers.
 */
#define HAS_PTHREAD_ATFORK		/**/

/* HAS_PTHREAD_YIELD:
 *	This symbol, if defined, indicates that the pthread_yield
 *	routine is available to yield the execution of the current
 *	thread.	 sched_yield is preferable to pthread_yield.
 */
/* SCHED_YIELD:
 *	This symbol defines the way to yield the execution of
 *	the current thread.  Known ways are sched_yield,
 *	pthread_yield, and pthread_yield with NULL.
 */
/* HAS_SCHED_YIELD:
 *	This symbol, if defined, indicates that the sched_yield
 *	routine is available to yield the execution of the current
 *	thread.	 sched_yield is preferable to pthread_yield.
 */
#define HAS_PTHREAD_YIELD	/**/
#define SCHED_YIELD	sched_yield()	/**/
#define HAS_SCHED_YIELD	/**/

/* HAS_RANDOM_R:
 *	This symbol, if defined, indicates that the random_r routine
 *	is available to random re-entrantly.
 */
/* RANDOM_R_PROTO:
 *	This symbol encodes the prototype of random_r.
 *	It is zero if d_random_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_random_r
 *	is defined.
 */
#define HAS_RANDOM_R	   /**/
#define RANDOM_R_PROTO REENTRANT_PROTO_I_St	   /**/

/* HAS_READDIR64_R:
 *	This symbol, if defined, indicates that the readdir64_r routine
 *	is available to readdir64 re-entrantly.
 */
/* READDIR64_R_PROTO:
 *	This symbol encodes the prototype of readdir64_r.
 *	It is zero if d_readdir64_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_readdir64_r
 *	is defined.
 */
#define HAS_READDIR64_R	   /**/
#define READDIR64_R_PROTO REENTRANT_PROTO_I_TSR	   /**/

/* HAS_READDIR_R:
 *	This symbol, if defined, indicates that the readdir_r routine
 *	is available to readdir re-entrantly.
 */
/* READDIR_R_PROTO:
 *	This symbol encodes the prototype of readdir_r.
 *	It is zero if d_readdir_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_readdir_r
 *	is defined.
 */
#define HAS_READDIR_R	   /**/
#define READDIR_R_PROTO REENTRANT_PROTO_I_TSR	   /**/

/* HAS_SETGRENT_R:
 *	This symbol, if defined, indicates that the setgrent_r routine
 *	is available to setgrent re-entrantly.
 */
/* SETGRENT_R_PROTO:
 *	This symbol encodes the prototype of setgrent_r.
 *	It is zero if d_setgrent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_setgrent_r
 *	is defined.
 */
/*#define HAS_SETGRENT_R	   / **/
#define SETGRENT_R_PROTO 0	   /**/

/* HAS_SETHOSTENT_R:
 *	This symbol, if defined, indicates that the sethostent_r routine
 *	is available to sethostent re-entrantly.
 */
/* SETHOSTENT_R_PROTO:
 *	This symbol encodes the prototype of sethostent_r.
 *	It is zero if d_sethostent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_sethostent_r
 *	is defined.
 */
/*#define HAS_SETHOSTENT_R	   / **/
#define SETHOSTENT_R_PROTO 0	   /**/

/* HAS_SETLOCALE_R:
 *	This symbol, if defined, indicates that the setlocale_r routine
 *	is available to setlocale re-entrantly.
 */
/* SETLOCALE_R_PROTO:
 *	This symbol encodes the prototype of setlocale_r.
 *	It is zero if d_setlocale_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_setlocale_r
 *	is defined.
 */
/*#define HAS_SETLOCALE_R	   / **/
#define SETLOCALE_R_PROTO 0	   /**/

/* HAS_SETNETENT_R:
 *	This symbol, if defined, indicates that the setnetent_r routine
 *	is available to setnetent re-entrantly.
 */
/* SETNETENT_R_PROTO:
 *	This symbol encodes the prototype of setnetent_r.
 *	It is zero if d_setnetent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_setnetent_r
 *	is defined.
 */
/*#define HAS_SETNETENT_R	   / **/
#define SETNETENT_R_PROTO 0	   /**/

/* HAS_SETPROTOENT_R:
 *	This symbol, if defined, indicates that the setprotoent_r routine
 *	is available to setprotoent re-entrantly.
 */
/* SETPROTOENT_R_PROTO:
 *	This symbol encodes the prototype of setprotoent_r.
 *	It is zero if d_setprotoent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_setprotoent_r
 *	is defined.
 */
/*#define HAS_SETPROTOENT_R	   / **/
#define SETPROTOENT_R_PROTO 0	   /**/

/* HAS_SETPWENT_R:
 *	This symbol, if defined, indicates that the setpwent_r routine
 *	is available to setpwent re-entrantly.
 */
/* SETPWENT_R_PROTO:
 *	This symbol encodes the prototype of setpwent_r.
 *	It is zero if d_setpwent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_setpwent_r
 *	is defined.
 */
/*#define HAS_SETPWENT_R	   / **/
#define SETPWENT_R_PROTO 0	   /**/

/* HAS_SETSERVENT_R:
 *	This symbol, if defined, indicates that the setservent_r routine
 *	is available to setservent re-entrantly.
 */
/* SETSERVENT_R_PROTO:
 *	This symbol encodes the prototype of setservent_r.
 *	It is zero if d_setservent_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_setservent_r
 *	is defined.
 */
/*#define HAS_SETSERVENT_R	   / **/
#define SETSERVENT_R_PROTO 0	   /**/

/* HAS_SRAND48_R:
 *	This symbol, if defined, indicates that the srand48_r routine
 *	is available to srand48 re-entrantly.
 */
/* SRAND48_R_PROTO:
 *	This symbol encodes the prototype of srand48_r.
 *	It is zero if d_srand48_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_srand48_r
 *	is defined.
 */
#define HAS_SRAND48_R	   /**/
#define SRAND48_R_PROTO REENTRANT_PROTO_I_LS	   /**/

/* HAS_SRANDOM_R:
 *	This symbol, if defined, indicates that the srandom_r routine
 *	is available to srandom re-entrantly.
 */
/* SRANDOM_R_PROTO:
 *	This symbol encodes the prototype of srandom_r.
 *	It is zero if d_srandom_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_srandom_r
 *	is defined.
 */
#define HAS_SRANDOM_R	   /**/
#define SRANDOM_R_PROTO REENTRANT_PROTO_I_TS	   /**/

/* HAS_STRERROR_R:
 *	This symbol, if defined, indicates that the strerror_r routine
 *	is available to strerror re-entrantly.
 */
/* STRERROR_R_PROTO:
 *	This symbol encodes the prototype of strerror_r.
 *	It is zero if d_strerror_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_strerror_r
 *	is defined.
 */
#define HAS_STRERROR_R	   /**/
#define STRERROR_R_PROTO REENTRANT_PROTO_B_IBW	   /**/

/* HAS_TMPNAM_R:
 *	This symbol, if defined, indicates that the tmpnam_r routine
 *	is available to tmpnam re-entrantly.
 */
/* TMPNAM_R_PROTO:
 *	This symbol encodes the prototype of tmpnam_r.
 *	It is zero if d_tmpnam_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_tmpnam_r
 *	is defined.
 */
#define HAS_TMPNAM_R	   /**/
#define TMPNAM_R_PROTO REENTRANT_PROTO_B_B	   /**/

/* HAS_TTYNAME_R:
 *	This symbol, if defined, indicates that the ttyname_r routine
 *	is available to ttyname re-entrantly.
 */
/* TTYNAME_R_PROTO:
 *	This symbol encodes the prototype of ttyname_r.
 *	It is zero if d_ttyname_r is undef, and one of the
 *	REENTRANT_PROTO_T_ABC macros of reentr.h if d_ttyname_r
 *	is defined.
 */
#define HAS_TTYNAME_R	   /**/
#define TTYNAME_R_PROTO REENTRANT_PROTO_I_IBW	   /**/

/* I_MACH_CTHREADS:
 *     This symbol, if defined, indicates to the C program that it should
 *     include <mach/cthreads.h>.
 */
/*#define   I_MACH_CTHREADS	/ **/

/* I_PTHREAD:
 *     This symbol, if defined, indicates to the C program that it should
 *     include <pthread.h>.
 */
#define   I_PTHREAD	/**/

/* USE_ITHREADS:
 *	This symbol, if defined, indicates that Perl should be built to
 *	use the interpreter-based threading implementation.
 */
/* USE_5005THREADS:
 *	This symbol, if defined, indicates that Perl should be built to
 *	use the 5.005-based threading implementation.
 *	Only valid up to 5.8.x.
 */
/* OLD_PTHREADS_API:
 *	This symbol, if defined, indicates that Perl should
 *	be built to use the old draft POSIX threads API.
 */
/* USE_REENTRANT_API:
 *	This symbol, if defined, indicates that Perl should
 *	try to use the various _r versions of library functions.
 *	This is extremely experimental.
 */
/*#define	USE_5005THREADS		/ **/
#define	USE_ITHREADS		/**/
#if defined(USE_5005THREADS) && !defined(USE_ITHREADS)
#define		USE_THREADS		/* until src is revised*/
#endif
/*#define	OLD_PTHREADS_API		/ **/
/*#define	USE_REENTRANT_API	/ **/

/* HAS_TIME:
 *	This symbol, if defined, indicates that the time() routine exists.
 */
/* Time_t:
 *	This symbol holds the type returned by time(). It can be long,
 *	or time_t on BSD sites (in which case <sys/types.h> should be
 *	included).
 */
#define HAS_TIME		/**/
#define Time_t time_t		/* Time type */

/* HAS_TIMES:
 *	This symbol, if defined, indicates that the times() routine exists.
 *	Note that this became obsolete on some systems (SUNOS), which now
 * use getrusage(). It may be necessary to include <sys/times.h>.
 */
#define HAS_TIMES		/**/

/* Fpos_t:
 *	This symbol holds the type used to declare file positions in libc.
 *	It can be fpos_t, long, uint, etc... It may be necessary to include
 *	<sys/types.h> to get any typedef'ed information.
 */
#define Fpos_t fpos_t		/* File position type */

/* Gid_t_f:
 *	This symbol defines the format string used for printing a Gid_t.
 */
#define	Gid_t_f		"lu"		/**/

/* Gid_t_sign:
 *	This symbol holds the signedness of a Gid_t.
 *	1 for unsigned, -1 for signed.
 */
#define Gid_t_sign	1		/* GID sign */

/* Gid_t_size:
 *	This symbol holds the size of a Gid_t in bytes.
 */
#define Gid_t_size 4		/* GID size */

/* Gid_t:
 *	This symbol holds the return type of getgid() and the type of
 *	argument to setrgid() and related functions.  Typically,
 *	it is the type of group ids in the kernel. It can be int, ushort,
 *	gid_t, etc... It may be necessary to include <sys/types.h> to get
 *	any typedef'ed information.
 */
#define Gid_t gid_t		/* Type for getgid(), etc... */

/* Off_t:
 *	This symbol holds the type used to declare offsets in the kernel.
 *	It can be int, long, off_t, etc... It may be necessary to include
 *	<sys/types.h> to get any typedef'ed information.
 */
/* LSEEKSIZE:
 *	This symbol holds the number of bytes used by the Off_t.
 */
/* Off_t_size:
 *	This symbol holds the number of bytes used by the Off_t.
 */
#define Off_t off_t		/* <offset> type */
#define LSEEKSIZE 8		/* <offset> size */
#define Off_t_size 8	/* <offset> size */

/* Mode_t:
 *	This symbol holds the type used to declare file modes
 *	for systems calls.  It is usually mode_t, but may be
 *	int or unsigned short.  It may be necessary to include <sys/types.h>
 *	to get any typedef'ed information.
 */
#define Mode_t mode_t	 /* file mode parameter for system calls */

/* Pid_t:
 *	This symbol holds the type used to declare process ids in the kernel.
 *	It can be int, uint, pid_t, etc... It may be necessary to include
 *	<sys/types.h> to get any typedef'ed information.
 */
#define Pid_t pid_t		/* PID type */

/* Size_t_size:
 *	This symbol holds the size of a Size_t in bytes.
 */
#define Size_t_size 4		/**/

/* Size_t:
 *	This symbol holds the type used to declare length parameters
 *	for string functions.  It is usually size_t, but may be
 *	unsigned long, int, etc.  It may be necessary to include
 *	<sys/types.h> to get any typedef'ed information.
 */
#define Size_t size_t	 /* length parameter for string functions */

/* Uid_t_f:
 *	This symbol defines the format string used for printing a Uid_t.
 */
#define	Uid_t_f		"lu"		/**/

/* Uid_t_sign:
 *	This symbol holds the signedness of a Uid_t.
 *	1 for unsigned, -1 for signed.
 */
#define Uid_t_sign	1		/* UID sign */

/* Uid_t_size:
 *	This symbol holds the size of a Uid_t in bytes.
 */
#define Uid_t_size 4		/* UID size */

/* Uid_t:
 *	This symbol holds the type used to declare user ids in the kernel.
 *	It can be int, ushort, uid_t, etc... It may be necessary to include
 *	<sys/types.h> to get any typedef'ed information.
 */
#define Uid_t uid_t		/* UID type */

#define PERL_BUILD_DATE "Nov 29 2018 11:11:57"
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /*    cop.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
 *    2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * Control ops (cops) are one of the two ops OP_NEXTSTATE and OP_DBSTATE,
 * that (loosely speaking) are statement separators.
 * They hold information important for lexical state and error reporting.
 * At run time, PL_curcop is set to point to the most recently executed cop,
 * and thus can be used to determine our current state.
 */

/* A jmpenv packages the state required to perform a proper non-local jump.
 * Note that there is a PL_start_env initialized when perl starts, and
 * PL_top_env points to this initially, so PL_top_env should always be
 * non-null.
 *
 * Existence of a non-null PL_top_env->je_prev implies it is valid to call
 * longjmp() at that runlevel (we make sure PL_start_env.je_prev is always
 * null to ensure this).
 *
 * je_mustcatch, when set at any runlevel to TRUE, means eval ops must
 * establish a local jmpenv to handle exception traps.  Care must be taken
 * to restore the previous value of je_mustcatch before exiting the
 * stack frame iff JMPENV_PUSH was not called in that stack frame.
 * GSAR 97-03-27
 */

struct jmpenv {
    struct jmpenv *	je_prev;
    Sigjmp_buf		je_buf;		/* uninit if je_prev is NULL */
    int			je_ret;		/* last exception thrown */
    bool		je_mustcatch;	/* need to call longjmp()? */
    U16                 je_old_delaymagic; /* saved PL_delaymagic */
};

typedef struct jmpenv JMPENV;

/*
 * How to build the first jmpenv.
 *
 * top_env needs to be non-zero. It points to an area
 * in which longjmp() stuff is stored, as C callstack
 * info there at least is thread specific this has to
 * be per-thread. Otherwise a 'die' in a thread gives
 * that thread the C stack of last thread to do an eval {}!
 */

#define JMPENV_BOOTSTRAP \
    STMT_START {				\
	PERL_POISON_EXPR(PoisonNew(&PL_start_env, 1, JMPENV));\
	PL_top_env = &PL_start_env;		\
	PL_start_env.je_prev = NULL;		\
	PL_start_env.je_ret = -1;		\
	PL_start_env.je_mustcatch = TRUE;	\
	PL_start_env.je_old_delaymagic = 0;	\
    } STMT_END

/*
 *   PERL_FLEXIBLE_EXCEPTIONS
 * 
 * All the flexible exceptions code has been removed.
 * See the following threads for details:
 *
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2004-07/msg00378.html
 * 
 * Joshua's original patches (which weren't applied) and discussion:
 * 
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1998-02/msg01396.html
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1998-02/msg01489.html
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1998-02/msg01491.html
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1998-02/msg01608.html
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1998-02/msg02144.html
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1998-02/msg02998.html
 * 
 * Chip's reworked patch and discussion:
 * 
 *   http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1999-03/msg00520.html
 * 
 * The flaw in these patches (which went unnoticed at the time) was
 * that they moved some code that could potentially die() out of the
 * region protected by the setjmp()s.  This caused exceptions within
 * END blocks and such to not be handled by the correct setjmp().
 * 
 * The original patches that introduces flexible exceptions were:
 *
 * http://perl5.git.perl.org/perl.git/commit/312caa8e97f1c7ee342a9895c2f0e749625b4929
 * http://perl5.git.perl.org/perl.git/commit/14dd3ad8c9bf82cf09798a22cc89a9862dfd6d1a                                        
 *  
 */

#define dJMPENV		JMPENV cur_env

#define JMPENV_PUSH(v) \
    STMT_START {							\
	DEBUG_l({							\
	    int i = 0; JMPENV *p = PL_top_env;				\
	    while (p) { i++; p = p->je_prev; }				\
	    Perl_deb(aTHX_ "JUMPENV_PUSH level=%d at %s:%d\n",		\
		         i,  __FILE__, __LINE__);})			\
	cur_env.je_prev = PL_top_env;					\
	cur_env.je_ret = PerlProc_setjmp(cur_env.je_buf, SCOPE_SAVES_SIGNAL_MASK);		\
	PL_top_env = &cur_env;						\
	cur_env.je_mustcatch = FALSE;					\
	cur_env.je_old_delaymagic = PL_delaymagic;			\
	(v) = cur_env.je_ret;						\
    } STMT_END

#define JMPENV_POP \
    STMT_START {							\
	DEBUG_l({							\
	    int i = -1; JMPENV *p = PL_top_env;				\
	    while (p) { i++; p = p->je_prev; }				\
	    Perl_deb(aTHX_ "JUMPENV_POP level=%d at %s:%d\n",		\
		         i, __FILE__, __LINE__);})			\
	assert(PL_top_env == &cur_env);					\
	PL_delaymagic = cur_env.je_old_delaymagic;			\
	PL_top_env = cur_env.je_prev;					\
    } STMT_END

#define JMPENV_JUMP(v) \
    STMT_START {						\
	DEBUG_l({						\
	    int i = -1; JMPENV *p = PL_top_env;			\
	    while (p) { i++; p = p->je_prev; }			\
	    Perl_deb(aTHX_ "JUMPENV_JUMP(%d) level=%d at %s:%d\n", \
		         (int)v, i, __FILE__, __LINE__);})	\
	if (PL_top_env->je_prev)				\
	    PerlProc_longjmp(PL_top_env->je_buf, (v));		\
	if ((v) == 2)						\
	    PerlProc_exit(STATUS_EXIT);		                \
	PerlIO_printf(PerlIO_stderr(), "panic: top_env, v=%d\n", (int)v); \
	PerlProc_exit(1);					\
    } STMT_END

#define CATCH_GET		(PL_top_env->je_mustcatch)
#define CATCH_SET(v) \
    STMT_START {							\
	DEBUG_l(							\
	    Perl_deb(aTHX_						\
		"JUMPLEVEL set catch %d => %d (for %p) at %s:%d\n",	\
		 PL_top_env->je_mustcatch, v, (void*)PL_top_env,	\
		 __FILE__, __LINE__);)					\
	PL_top_env->je_mustcatch = (v);					\
    } STMT_END

/*
=head1 COP Hint Hashes
*/

typedef struct refcounted_he COPHH;

#define COPHH_KEY_UTF8 REFCOUNTED_HE_KEY_UTF8

/*
=for apidoc Amx|SV *|cophh_fetch_pvn|const COPHH *cophh|const char *keypv|STRLEN keylen|U32 hash|U32 flags

Look up the entry in the cop hints hash C<cophh> with the key specified by
C<keypv> and C<keylen>.  If C<flags> has the C<COPHH_KEY_UTF8> bit set,
the key octets are interpreted as UTF-8, otherwise they are interpreted
as Latin-1.  C<hash> is a precomputed hash of the key string, or zero if
it has not been precomputed.  Returns a mortal scalar copy of the value
associated with the key, or C<&PL_sv_placeholder> if there is no value
associated with the key.

=cut
*/

#define cophh_fetch_pvn(cophh, keypv, keylen, hash, flags) \
    Perl_refcounted_he_fetch_pvn(aTHX_ cophh, keypv, keylen, hash, flags)

/*
=for apidoc Amx|SV *|cophh_fetch_pvs|const COPHH *cophh|const char *key|U32 flags

Like L</cophh_fetch_pvn>, but takes a C<NUL>-terminated literal string instead
of a string/length pair, and no precomputed hash.

=cut
*/

#define cophh_fetch_pvs(cophh, key, flags) \
    Perl_refcounted_he_fetch_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, flags)

/*
=for apidoc Amx|SV *|cophh_fetch_pv|const COPHH *cophh|const char *key|U32 hash|U32 flags

Like L</cophh_fetch_pvn>, but takes a nul-terminated string instead of
a string/length pair.

=cut
*/

#define cophh_fetch_pv(cophh, key, hash, flags) \
    Perl_refcounted_he_fetch_pv(aTHX_ cophh, key, hash, flags)

/*
=for apidoc Amx|SV *|cophh_fetch_sv|const COPHH *cophh|SV *key|U32 hash|U32 flags

Like L</cophh_fetch_pvn>, but takes a Perl scalar instead of a
string/length pair.

=cut
*/

#define cophh_fetch_sv(cophh, key, hash, flags) \
    Perl_refcounted_he_fetch_sv(aTHX_ cophh, key, hash, flags)

/*
=for apidoc Amx|HV *|cophh_2hv|const COPHH *cophh|U32 flags

Generates and returns a standard Perl hash representing the full set of
key/value pairs in the cop hints hash C<cophh>.  C<flags> is currently
unused and must be zero.

=cut
*/

#define cophh_2hv(cophh, flags) \
    Perl_refcounted_he_chain_2hv(aTHX_ cophh, flags)

/*
=for apidoc Amx|COPHH *|cophh_copy|COPHH *cophh

Make and return a complete copy of the cop hints hash C<cophh>.

=cut
*/

#define cophh_copy(cophh) Perl_refcounted_he_inc(aTHX_ cophh)

/*
=for apidoc Amx|void|cophh_free|COPHH *cophh

Discard the cop hints hash C<cophh>, freeing all resources associated
with it.

=cut
*/

#define cophh_free(cophh) Perl_refcounted_he_free(aTHX_ cophh)

/*
=for apidoc Amx|COPHH *|cophh_new_empty

Generate and return a fresh cop hints hash containing no entries.

=cut
*/

#define cophh_new_empty() ((COPHH *)NULL)

/*
=for apidoc Amx|COPHH *|cophh_store_pvn|COPHH *cophh|const char *keypv|STRLEN keylen|U32 hash|SV *value|U32 flags

Stores a value, associated with a key, in the cop hints hash C<cophh>,
and returns the modified hash.  The returned hash pointer is in general
not the same as the hash pointer that was passed in.  The input hash is
consumed by the function, and the pointer to it must not be subsequently
used.  Use L</cophh_copy> if you need both hashes.

The key is specified by C<keypv> and C<keylen>.  If C<flags> has the
C<COPHH_KEY_UTF8> bit set, the key octets are interpreted as UTF-8,
otherwise they are interpreted as Latin-1.  C<hash> is a precomputed
hash of the key string, or zero if it has not been precomputed.

C<value> is the scalar value to store for this key.  C<value> is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the cop hints hash.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.

=cut
*/

#define cophh_store_pvn(cophh, keypv, keylen, hash, value, flags) \
    Perl_refcounted_he_new_pvn(aTHX_ cophh, keypv, keylen, hash, value, flags)

/*
=for apidoc Amx|COPHH *|cophh_store_pvs|const COPHH *cophh|const char *key|SV *value|U32 flags

Like L</cophh_store_pvn>, but takes a C<NUL>-terminated literal string instead
of a string/length pair, and no precomputed hash.

=cut
*/

#define cophh_store_pvs(cophh, key, value, flags) \
    Perl_refcounted_he_new_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, value, flags)

/*
=for apidoc Amx|COPHH *|cophh_store_pv|const COPHH *cophh|const char *key|U32 hash|SV *value|U32 flags

Like L</cophh_store_pvn>, but takes a nul-terminated string instead of
a string/length pair.

=cut
*/

#define cophh_store_pv(cophh, key, hash, value, flags) \
    Perl_refcounted_he_new_pv(aTHX_ cophh, key, hash, value, flags)

/*
=for apidoc Amx|COPHH *|cophh_store_sv|const COPHH *cophh|SV *key|U32 hash|SV *value|U32 flags

Like L</cophh_store_pvn>, but takes a Perl scalar instead of a
string/length pair.

=cut
*/

#define cophh_store_sv(cophh, key, hash, value, flags) \
    Perl_refcounted_he_new_sv(aTHX_ cophh, key, hash, value, flags)

/*
=for apidoc Amx|COPHH *|cophh_delete_pvn|COPHH *cophh|const char *keypv|STRLEN keylen|U32 hash|U32 flags

Delete a key and its associated value from the cop hints hash C<cophh>,
and returns the modified hash.  The returned hash pointer is in general
not the same as the hash pointer that was passed in.  The input hash is
consumed by the function, and the pointer to it must not be subsequently
used.  Use L</cophh_copy> if you need both hashes.

The key is specified by C<keypv> and C<keylen>.  If C<flags> has the
C<COPHH_KEY_UTF8> bit set, the key octets are interpreted as UTF-8,
otherwise they are interpreted as Latin-1.  C<hash> is a precomputed
hash of the key string, or zero if it has not been precomputed.

=cut
*/

#define cophh_delete_pvn(cophh, keypv, keylen, hash, flags) \
    Perl_refcounted_he_new_pvn(aTHX_ cophh, keypv, keylen, hash, \
	(SV *)NULL, flags)

/*
=for apidoc Amx|COPHH *|cophh_delete_pvs|const COPHH *cophh|const char *key|U32 flags

Like L</cophh_delete_pvn>, but takes a C<NUL>-terminated literal string instead
of a string/length pair, and no precomputed hash.

=cut
*/

#define cophh_delete_pvs(cophh, key, flags) \
    Perl_refcounted_he_new_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, \
	(SV *)NULL, flags)

/*
=for apidoc Amx|COPHH *|cophh_delete_pv|const COPHH *cophh|const char *key|U32 hash|U32 flags

Like L</cophh_delete_pvn>, but takes a nul-terminated string instead of
a string/length pair.

=cut
*/

#define cophh_delete_pv(cophh, key, hash, flags) \
    Perl_refcounted_he_new_pv(aTHX_ cophh, key, hash, (SV *)NULL, flags)

/*
=for apidoc Amx|COPHH *|cophh_delete_sv|const COPHH *cophh|SV *key|U32 hash|U32 flags

Like L</cophh_delete_pvn>, but takes a Perl scalar instead of a
string/length pair.

=cut
*/

#define cophh_delete_sv(cophh, key, hash, flags) \
    Perl_refcounted_he_new_sv(aTHX_ cophh, key, hash, (SV *)NULL, flags)

#include "mydtrace.h"

struct cop {
    BASEOP
    /* On LP64 putting this here takes advantage of the fact that BASEOP isn't
       an exact multiple of 8 bytes to save structure padding.  */
    line_t      cop_line;       /* line # of this command */
    /* label for this construct is now stored in cop_hints_hash */
#ifdef USE_ITHREADS
    PADOFFSET	cop_stashoff;	/* offset into PL_stashpad, for the
				   package the line was compiled in */
    char *	cop_file;	/* file name the following line # is from */
#else
    HV *	cop_stash;	/* package line was compiled in */
    GV *	cop_filegv;	/* file the following line # is from */
#endif
    U32		cop_hints;	/* hints bits from pragmata */
    U32		cop_seq;	/* parse sequence number */
    /* Beware. mg.c and warnings.pl assume the type of this is STRLEN *:  */
    STRLEN *	cop_warnings;	/* lexical warnings bitmask */
    /* compile time state of %^H.  See the comment in op.c for how this is
       used to recreate a hash to return from caller.  */
    COPHH *	cop_hints_hash;
};

#ifdef USE_ITHREADS
#  define CopFILE(c)		((c)->cop_file)
#  define CopFILEGV(c)		(CopFILE(c) \
				 ? gv_fetchfile(CopFILE(c)) : NULL)
				 
#  ifdef NETWARE
#    define CopFILE_set(c,pv)	((c)->cop_file = savepv(pv))
#    define CopFILE_setn(c,pv,l)  ((c)->cop_file = savepvn((pv),(l)))
#  else
#    define CopFILE_set(c,pv)	((c)->cop_file = savesharedpv(pv))
#    define CopFILE_setn(c,pv,l)  ((c)->cop_file = savesharedpvn((pv),(l)))
#  endif

#  define CopFILESV(c)		(CopFILE(c) \
				 ? GvSV(gv_fetchfile(CopFILE(c))) : NULL)
#  define CopFILEAV(c)		(CopFILE(c) \
				 ? GvAV(gv_fetchfile(CopFILE(c))) : NULL)
#  define CopFILEAVx(c)		(assert_(CopFILE(c)) \
				   GvAV(gv_fetchfile(CopFILE(c))))

#  define CopSTASH(c)           PL_stashpad[(c)->cop_stashoff]
#  define CopSTASH_set(c,hv)	((c)->cop_stashoff = (hv)		\
				    ? alloccopstash(hv)			\
				    : 0)
#  ifdef NETWARE
#    define CopFILE_free(c) SAVECOPFILE_FREE(c)
#  else
#    define CopFILE_free(c)	(PerlMemShared_free(CopFILE(c)),(CopFILE(c) = NULL))
#  endif
#else
#  define CopFILEGV(c)		((c)->cop_filegv)
#  define CopFILEGV_set(c,gv)	((c)->cop_filegv = (GV*)SvREFCNT_inc(gv))
#  define CopFILE_set(c,pv)	CopFILEGV_set((c), gv_fetchfile(pv))
#  define CopFILE_setn(c,pv,l)	CopFILEGV_set((c), gv_fetchfile_flags((pv),(l),0))
#  define CopFILESV(c)		(CopFILEGV(c) ? GvSV(CopFILEGV(c)) : NULL)
#  define CopFILEAV(c)		(CopFILEGV(c) ? GvAV(CopFILEGV(c)) : NULL)
#  ifdef DEBUGGING
#    define CopFILEAVx(c)	(assert(CopFILEGV(c)), GvAV(CopFILEGV(c)))
#  else
#    define CopFILEAVx(c)	(GvAV(CopFILEGV(c)))
# endif
#  define CopFILE(c)		(CopFILEGV(c) \
				    ? GvNAME(CopFILEGV(c))+2 : NULL)
#  define CopSTASH(c)		((c)->cop_stash)
#  define CopSTASH_set(c,hv)	((c)->cop_stash = (hv))
#  define CopFILE_free(c)	(SvREFCNT_dec(CopFILEGV(c)),(CopFILEGV(c) = NULL))

#endif /* USE_ITHREADS */

#define CopSTASHPV(c)		(CopSTASH(c) ? HvNAME_get(CopSTASH(c)) : NULL)
   /* cop_stash is not refcounted */
#define CopSTASHPV_set(c,pv)	CopSTASH_set((c), gv_stashpv(pv,GV_ADD))
#define CopSTASH_eq(c,hv)	(CopSTASH(c) == (hv))

#define CopHINTHASH_get(c)	((COPHH*)((c)->cop_hints_hash))
#define CopHINTHASH_set(c,h)	((c)->cop_hints_hash = (h))

/*
=head1 COP Hint Reading
*/

/*
=for apidoc Am|SV *|cop_hints_fetch_pvn|const COP *cop|const char *keypv|STRLEN keylen|U32 hash|U32 flags

Look up the hint entry in the cop C<cop> with the key specified by
C<keypv> and C<keylen>.  If C<flags> has the C<COPHH_KEY_UTF8> bit set,
the key octets are interpreted as UTF-8, otherwise they are interpreted
as Latin-1.  C<hash> is a precomputed hash of the key string, or zero if
it has not been precomputed.  Returns a mortal scalar copy of the value
associated with the key, or C<&PL_sv_placeholder> if there is no value
associated with the key.

=cut
*/

#define cop_hints_fetch_pvn(cop, keypv, keylen, hash, flags) \
    cophh_fetch_pvn(CopHINTHASH_get(cop), keypv, keylen, hash, flags)

/*
=for apidoc Am|SV *|cop_hints_fetch_pvs|const COP *cop|const char *key|U32 flags

Like L</cop_hints_fetch_pvn>, but takes a C<NUL>-terminated literal string
instead of a string/length pair, and no precomputed hash.

=cut
*/

#define cop_hints_fetch_pvs(cop, key, flags) \
    cophh_fetch_pvs(CopHINTHASH_get(cop), key, flags)

/*
=for apidoc Am|SV *|cop_hints_fetch_pv|const COP *cop|const char *key|U32 hash|U32 flags

Like L</cop_hints_fetch_pvn>, but takes a nul-terminated string instead
of a string/length pair.

=cut
*/

#define cop_hints_fetch_pv(cop, key, hash, flags) \
    cophh_fetch_pv(CopHINTHASH_get(cop), key, hash, flags)

/*
=for apidoc Am|SV *|cop_hints_fetch_sv|const COP *cop|SV *key|U32 hash|U32 flags

Like L</cop_hints_fetch_pvn>, but takes a Perl scalar instead of a
string/length pair.

=cut
*/

#define cop_hints_fetch_sv(cop, key, hash, flags) \
    cophh_fetch_sv(CopHINTHASH_get(cop), key, hash, flags)

/*
=for apidoc Am|HV *|cop_hints_2hv|const COP *cop|U32 flags

Generates and returns a standard Perl hash representing the full set of
hint entries in the cop C<cop>.  C<flags> is currently unused and must
be zero.

=cut
*/

#define cop_hints_2hv(cop, flags) \
    cophh_2hv(CopHINTHASH_get(cop), flags)

#define CopLABEL(c)  Perl_cop_fetch_label(aTHX_ (c), NULL, NULL)
#define CopLABEL_len(c,len)  Perl_cop_fetch_label(aTHX_ (c), len, NULL)
#define CopLABEL_len_flags(c,len,flags)  Perl_cop_fetch_label(aTHX_ (c), len, flags)
#define CopLABEL_alloc(pv)	((pv)?savepv(pv):NULL)

#define CopSTASH_ne(c,hv)	(!CopSTASH_eq(c,hv))
#define CopLINE(c)		((c)->cop_line)
#define CopLINE_inc(c)		(++CopLINE(c))
#define CopLINE_dec(c)		(--CopLINE(c))
#define CopLINE_set(c,l)	(CopLINE(c) = (l))

/* OutCopFILE() is CopFILE for output (caller, die, warn, etc.) */
#define OutCopFILE(c) CopFILE(c)

#define CopHINTS_get(c)		((c)->cop_hints + 0)
#define CopHINTS_set(c, h)	STMT_START {				\
				    (c)->cop_hints = (h);		\
				} STMT_END

/*
 * Here we have some enormously heavy (or at least ponderous) wizardry.
 */

/* subroutine context */
struct block_sub {
    OP *	retop;	/* op to execute on exit from sub */
    /* Above here is the same for sub, format and eval.  */
    PAD		*prevcomppad; /* the caller's PL_comppad */
    CV *	cv;
    /* Above here is the same for sub and format.  */
    I32		olddepth;
    AV  	*savearray;
};


/* format context */
struct block_format {
    OP *	retop;	/* op to execute on exit from sub */
    /* Above here is the same for sub, format and eval.  */
    PAD		*prevcomppad; /* the caller's PL_comppad */
    CV *	cv;
    /* Above here is the same for sub and format.  */
    GV *	gv;
    GV *	dfoutgv;
};

/* return a pointer to the current context */

#define CX_CUR() (&cxstack[cxstack_ix])

/* free all savestack items back to the watermark of the specified context */

#define CX_LEAVE_SCOPE(cx) LEAVE_SCOPE(cx->blk_oldsaveix)

#ifdef DEBUGGING
/* on debugging builds, poison cx afterwards so we know no code
 * uses it - because after doing cxstack_ix--, any ties, exceptions etc
 * may overwrite the current stack frame */
#  define CX_POP(cx)                                                   \
        assert(CX_CUR() == cx);                                        \
        cxstack_ix--;                                                  \
        cx = NULL;
#else
#  define CX_POP(cx) cxstack_ix--;
#endif


/* base for the next two macros. Don't use directly.
 * The context frame holds a reference to the CV so that it can't be
 * freed while we're executing it */


#define CX_PUSHSUB_GET_LVALUE_MASK(func) \
	/* If the context is indeterminate, then only the lvalue */	\
	/* flags that the caller also has are applicable.        */	\
	(								\
	   (PL_op->op_flags & OPf_WANT)					\
	       ? OPpENTERSUB_LVAL_MASK					\
	       : !(PL_op->op_private & OPpENTERSUB_LVAL_MASK)		\
	           ? 0 : (U8)func(aTHX)					\
	)

/* Restore old @_ */
#define CX_POP_SAVEARRAY(cx)						\
    STMT_START {							\
        AV *av = GvAV(PL_defgv);                                        \
	GvAV(PL_defgv) = cx->blk_sub.savearray;				\
        cx->blk_sub.savearray = NULL;                                   \
        SvREFCNT_dec(av);	        				\
    } STMT_END

/* junk in @_ spells trouble when cloning CVs and in pp_caller(), so don't
 * leave any (a fast av_clear(ary), basically) */
#define CLEAR_ARGARRAY(ary) \
    STMT_START {							\
	AvMAX(ary) += AvARRAY(ary) - AvALLOC(ary);			\
	AvARRAY(ary) = AvALLOC(ary);					\
	AvFILLp(ary) = -1;						\
    } STMT_END


/* eval context */
struct block_eval {
    OP *	retop;	/* op to execute on exit from eval */
    /* Above here is the same for sub, format and eval.  */
    SV *	old_namesv;
    OP *	old_eval_root;
    SV *	cur_text;
    CV *	cv;
    JMPENV *	cur_top_env; /* value of PL_top_env when eval CX created */
};

/* If we ever need more than 512 op types, change the shift from 7.
   blku_gimme is actually also only 2 bits, so could be merged with something.
*/

#define CxOLD_IN_EVAL(cx)	(((cx)->blk_u16) & 0x7F)
#define CxOLD_OP_TYPE(cx)	(((cx)->blk_u16) >> 7)

/* loop context */
struct block_loop {
    LOOP *	my_op;	/* My op, that contains redo, next and last ops.  */
    union {	/* different ways of locating the iteration variable */
	SV      **svp; /* for lexicals: address of pad slot */
	GV      *gv;   /* for package vars */
    } itervar_u;
    SV          *itersave; /* the original iteration var */
    union {
	struct { /* CXt_LOOP_ARY, C<for (@ary)>  */
	    AV *ary; /* array being iterated over */
	    IV  ix;   /* index relative to base of array */
	} ary;
	struct { /* CXt_LOOP_LIST, C<for (list)> */
	    I32 basesp; /* first element of list on stack */
	    IV  ix;      /* index relative to basesp */
	} stack;
	struct { /* CXt_LOOP_LAZYIV, C<for (1..9)> */
	    IV cur;
	    IV end;
	} lazyiv;
	struct { /* CXt_LOOP_LAZYSV C<for ('a'..'z')> */
	    SV * cur;
	    SV * end; /* maxiumum value (or minimum in reverse) */
	} lazysv;
    } state_u;
#ifdef USE_ITHREADS
    PAD *oldcomppad; /* needed to map itervar_u.svp during thread clone */
#endif
};

#define CxITERVAR(c)                                    \
        (CxPADLOOP(c)                                   \
            ? (c)->blk_loop.itervar_u.svp               \
            : ((c)->cx_type & CXp_FOR_GV)               \
                ? &GvSV((c)->blk_loop.itervar_u.gv)     \
                : (SV **)&(c)->blk_loop.itervar_u.gv)

#define CxLABEL(c)	(0 + CopLABEL((c)->blk_oldcop))
#define CxLABEL_len(c,len)	(0 + CopLABEL_len((c)->blk_oldcop, len))
#define CxLABEL_len_flags(c,len,flags)	(0 + CopLABEL_len_flags((c)->blk_oldcop, len, flags))
#define CxHASARGS(c)	(((c)->cx_type & CXp_HASARGS) == CXp_HASARGS)

/* CxLVAL(): the lval flags of the call site: the relevant flag bits from
 * the op_private field of the calling pp_entersub (or its caller's caller
 * if the caller's lvalue context isn't known):
 *  OPpLVAL_INTRO:  sub used in lvalue context, e.g. f() = 1;
 *  OPpENTERSUB_INARGS (in conjunction with OPpLVAL_INTRO): the
 *      function is being used as a sub arg or as a referent, e.g.
 *      g(...,f(),...)  or $r = \f()
 *  OPpDEREF: 2-bit mask indicating e.g. f()->[0].
 *  Note the contrast with CvLVALUE(), which is a property of the sub
 *  rather than the call site.
 */
#define CxLVAL(c)	(0 + ((c)->blk_u16 & 0xff))



/* given/when context */
struct block_givwhen {
	OP *leave_op;
        SV *defsv_save; /* the original $_ */
};



/* context common to subroutines, evals and loops */
struct block {
    U8		blku_type;	/* what kind of context this is */
    U8		blku_gimme;	/* is this block running in list context? */
    U16		blku_u16;	/* used by block_sub and block_eval (so far) */
    I32		blku_oldsaveix; /* saved PL_savestack_ix */
    /* all the fields above must be aligned with same-sized fields as sbu */
    I32		blku_oldsp;	/* current sp floor: where nextstate pops to */
    I32		blku_oldmarksp;	/* mark stack index */
    COP *	blku_oldcop;	/* old curcop pointer */
    PMOP *	blku_oldpm;	/* values of pattern match vars */
    SSize_t     blku_old_tmpsfloor;     /* saved PL_tmps_floor */
    I32		blku_oldscopesp;	/* scope stack index */

    union {
	struct block_sub	blku_sub;
	struct block_format	blku_format;
	struct block_eval	blku_eval;
	struct block_loop	blku_loop;
	struct block_givwhen	blku_givwhen;
    } blk_u;
};
#define blk_oldsp	cx_u.cx_blk.blku_oldsp
#define blk_oldcop	cx_u.cx_blk.blku_oldcop
#define blk_oldmarksp	cx_u.cx_blk.blku_oldmarksp
#define blk_oldscopesp	cx_u.cx_blk.blku_oldscopesp
#define blk_oldpm	cx_u.cx_blk.blku_oldpm
#define blk_gimme	cx_u.cx_blk.blku_gimme
#define blk_u16		cx_u.cx_blk.blku_u16
#define blk_oldsaveix   cx_u.cx_blk.blku_oldsaveix
#define blk_old_tmpsfloor cx_u.cx_blk.blku_old_tmpsfloor
#define blk_sub		cx_u.cx_blk.blk_u.blku_sub
#define blk_format	cx_u.cx_blk.blk_u.blku_format
#define blk_eval	cx_u.cx_blk.blk_u.blku_eval
#define blk_loop	cx_u.cx_blk.blk_u.blku_loop
#define blk_givwhen	cx_u.cx_blk.blk_u.blku_givwhen

#define CX_DEBUG(cx, action)						\
    DEBUG_l(								\
	Perl_deb(aTHX_ "CX %ld %s %s (scope %ld,%ld) (save %ld,%ld) at %s:%d\n",\
		    (long)cxstack_ix,					\
		    action,						\
		    PL_block_type[CxTYPE(cx)],	                        \
		    (long)PL_scopestack_ix,				\
		    (long)(cx->blk_oldscopesp),		                \
		    (long)PL_savestack_ix,				\
		    (long)(cx->blk_oldsaveix),                          \
		    __FILE__, __LINE__));



/* substitution context */
struct subst {
    U8		sbu_type;	/* same as blku_type */
    U8		sbu_rflags;
    U16		sbu_rxtainted;
    I32		sbu_oldsaveix; /* same as blku_oldsaveix */
    /* all the fields above must be aligned with same-sized fields as blk_u */
    SSize_t	sbu_iters;
    SSize_t	sbu_maxiters;
    char *	sbu_orig;
    SV *	sbu_dstr;
    SV *	sbu_targ;
    char *	sbu_s;
    char *	sbu_m;
    char *	sbu_strend;
    void *	sbu_rxres;
    REGEXP *	sbu_rx;
};
#define sb_iters	cx_u.cx_subst.sbu_iters
#define sb_maxiters	cx_u.cx_subst.sbu_maxiters
#define sb_rflags	cx_u.cx_subst.sbu_rflags
#define sb_rxtainted	cx_u.cx_subst.sbu_rxtainted
#define sb_orig		cx_u.cx_subst.sbu_orig
#define sb_dstr		cx_u.cx_subst.sbu_dstr
#define sb_targ		cx_u.cx_subst.sbu_targ
#define sb_s		cx_u.cx_subst.sbu_s
#define sb_m		cx_u.cx_subst.sbu_m
#define sb_strend	cx_u.cx_subst.sbu_strend
#define sb_rxres	cx_u.cx_subst.sbu_rxres
#define sb_rx		cx_u.cx_subst.sbu_rx

#ifdef PERL_CORE
#  define CX_PUSHSUBST(cx) CXINC, cx = CX_CUR(),		        \
	cx->blk_oldsaveix = oldsave,				        \
	cx->sb_iters		= iters,				\
	cx->sb_maxiters		= maxiters,				\
	cx->sb_rflags		= r_flags,				\
	cx->sb_rxtainted	= rxtainted,				\
	cx->sb_orig		= orig,					\
	cx->sb_dstr		= dstr,					\
	cx->sb_targ		= targ,					\
	cx->sb_s		= s,					\
	cx->sb_m		= m,					\
	cx->sb_strend		= strend,				\
	cx->sb_rxres		= NULL,					\
	cx->sb_rx		= rx,					\
	cx->cx_type		= CXt_SUBST | (once ? CXp_ONCE : 0);	\
	rxres_save(&cx->sb_rxres, rx);					\
	(void)ReREFCNT_inc(rx);						\
        SvREFCNT_inc_void_NN(targ)

#  define CX_POPSUBST(cx) \
    STMT_START {							\
        REGEXP *re;                                                     \
        assert(CxTYPE(cx) == CXt_SUBST);                                \
	rxres_free(&cx->sb_rxres);					\
	re = cx->sb_rx;                                                 \
	cx->sb_rx = NULL;                                               \
	ReREFCNT_dec(re);                                               \
        SvREFCNT_dec_NN(cx->sb_targ);                                   \
    } STMT_END
#endif

#define CxONCE(cx)		((cx)->cx_type & CXp_ONCE)

struct context {
    union {
	struct block	cx_blk;
	struct subst	cx_subst;
    } cx_u;
};
#define cx_type cx_u.cx_subst.sbu_type

/* If you re-order these, there is also an array of uppercase names in perl.h
   and a static array of context names in pp_ctl.c  */
#define CXTYPEMASK	0xf
#define CXt_NULL	0 /* currently only used for sort BLOCK */
#define CXt_WHEN	1
#define CXt_BLOCK	2
/* When micro-optimising :-) keep GIVEN next to the LOOPs, as these 5 share a
   jump table in pp_ctl.c
   The first 4 don't have a 'case' in at least one switch statement in pp_ctl.c
*/
#define CXt_GIVEN	3

/* be careful of the ordering of these five. Macros like CxTYPE_is_LOOP,
 * CxFOREACH compare ranges */
#define CXt_LOOP_ARY	4 /* for (@ary)     { ...; } */
#define CXt_LOOP_LAZYSV	5 /* for ('a'..'z') { ...; } */
#define CXt_LOOP_LAZYIV	6 /* for (1..9)     { ...; } */
#define CXt_LOOP_LIST	7 /* for (1,2,3)    { ...; } */
#define CXt_LOOP_PLAIN	8 /* while (...)    { ...; }
                             or plain block { ...; } */
#define CXt_SUB		9
#define CXt_FORMAT     10
#define CXt_EVAL       11
#define CXt_SUBST      12
/* SUBST doesn't feature in all switch statements.  */

/* private flags for CXt_SUB and CXt_FORMAT */
#define CXp_MULTICALL	0x10	/* part of a multicall (so don't tear down
                                   context on exit). (not CXt_FORMAT) */
#define CXp_HASARGS	0x20
#define CXp_SUB_RE	0x40    /* code called within regex, i.e. (?{}) */
#define CXp_SUB_RE_FAKE	0x80    /* fake sub CX for (?{}) in current scope */

/* private flags for CXt_EVAL */
#define CXp_REAL	0x20	/* truly eval'', not a lookalike */
#define CXp_TRYBLOCK	0x40	/* eval{}, not eval'' or similar */

/* private flags for CXt_LOOP */

/* this is only set in conjunction with CXp_FOR_GV */
#define CXp_FOR_DEF	0x10	/* foreach using $_ */
/* these 3 are mutually exclusive */
#define CXp_FOR_LVREF	0x20	/* foreach using \$var */
#define CXp_FOR_GV	0x40	/* foreach using package var */
#define CXp_FOR_PAD	0x80	/* foreach using lexical var */

#define CxPADLOOP(c)	((c)->cx_type & CXp_FOR_PAD)

/* private flags for CXt_SUBST */
#define CXp_ONCE	0x10	/* What was sbu_once in struct subst */

#define CxTYPE(c)	((c)->cx_type & CXTYPEMASK)
#define CxTYPE_is_LOOP(c) (   CxTYPE(cx) >= CXt_LOOP_ARY                \
                           && CxTYPE(cx) <= CXt_LOOP_PLAIN)
#define CxMULTICALL(c)	((c)->cx_type & CXp_MULTICALL)
#define CxREALEVAL(c)	(((c)->cx_type & (CXTYPEMASK|CXp_REAL))		\
			 == (CXt_EVAL|CXp_REAL))
#define CxTRYBLOCK(c)	(((c)->cx_type & (CXTYPEMASK|CXp_TRYBLOCK))	\
			 == (CXt_EVAL|CXp_TRYBLOCK))
#define CxFOREACH(c)	(   CxTYPE(cx) >= CXt_LOOP_ARY                  \
                         && CxTYPE(cx) <= CXt_LOOP_LIST)

#define CXINC (cxstack_ix < cxstack_max ? ++cxstack_ix : (cxstack_ix = cxinc()))

/* 
=head1 "Gimme" Values
*/

/*
=for apidoc AmU||G_SCALAR
Used to indicate scalar context.  See C<L</GIMME_V>>, C<L</GIMME>>, and
L<perlcall>.

=for apidoc AmU||G_ARRAY
Used to indicate list context.  See C<L</GIMME_V>>, C<L</GIMME>> and
L<perlcall>.

=for apidoc AmU||G_VOID
Used to indicate void context.  See C<L</GIMME_V>> and L<perlcall>.

=for apidoc AmU||G_DISCARD
Indicates that arguments returned from a callback should be discarded.  See
L<perlcall>.

=for apidoc AmU||G_EVAL

Used to force a Perl C<eval> wrapper around a callback.  See
L<perlcall>.

=for apidoc AmU||G_NOARGS

Indicates that no arguments are being sent to a callback.  See
L<perlcall>.

=cut
*/

#define G_SCALAR	2
#define G_ARRAY		3
#define G_VOID		1
#define G_WANT		3

/* extra flags for Perl_call_* routines */
#define G_DISCARD	4	/* Call FREETMPS.
				   Don't change this without consulting the
				   hash actions codes defined in hv.h */
#define G_EVAL		8	/* Assume eval {} around subroutine call. */
#define G_NOARGS       16	/* Don't construct a @_ array. */
#define G_KEEPERR      32	/* Warn for errors, don't overwrite $@ */
#define G_NODEBUG      64	/* Disable debugging at toplevel.  */
#define G_METHOD      128       /* Calling method. */
#define G_FAKINGEVAL  256	/* Faking an eval context for call_sv or
				   fold_constants. */
#define G_UNDEF_FILL  512	/* Fill the stack with &PL_sv_undef
				   A special case for UNSHIFT in
				   Perl_magic_methcall().  */
#define G_WRITING_TO_STDERR 1024 /* Perl_write_to_stderr() is calling
				    Perl_magic_methcall().  */
#define G_RE_REPARSING 0x800     /* compiling a run-time /(?{..})/ */
#define G_METHOD_NAMED 4096	/* calling named method, eg without :: or ' */

/* flag bits for PL_in_eval */
#define EVAL_NULL	0	/* not in an eval */
#define EVAL_INEVAL	1	/* some enclosing scope is an eval */
#define EVAL_WARNONLY	2	/* used by yywarn() when calling yyerror() */
#define EVAL_KEEPERR	4	/* set by Perl_call_sv if G_KEEPERR */
#define EVAL_INREQUIRE	8	/* The code is being required. */
#define EVAL_RE_REPARSING 0x10	/* eval_sv() called with G_RE_REPARSING */

/* Support for switching (stack and block) contexts.
 * This ensures magic doesn't invalidate local stack and cx pointers.
 */

#define PERLSI_UNKNOWN		-1
#define PERLSI_UNDEF		0
#define PERLSI_MAIN		1
#define PERLSI_MAGIC		2
#define PERLSI_SORT		3
#define PERLSI_SIGNAL		4
#define PERLSI_OVERLOAD		5
#define PERLSI_DESTROY		6
#define PERLSI_WARNHOOK		7
#define PERLSI_DIEHOOK		8
#define PERLSI_REQUIRE		9
#define PERLSI_MULTICALL       10

struct stackinfo {
    AV *		si_stack;	/* stack for current runlevel */
    PERL_CONTEXT *	si_cxstack;	/* context stack for runlevel */
    struct stackinfo *	si_prev;
    struct stackinfo *	si_next;
    I32			si_cxix;	/* current context index */
    I32			si_cxmax;	/* maximum allocated index */
    I32			si_type;	/* type of runlevel */
    I32			si_markoff;	/* offset where markstack begins for us.
					 * currently used only with DEBUGGING,
					 * but not #ifdef-ed for bincompat */
};

typedef struct stackinfo PERL_SI;

#define cxstack		(PL_curstackinfo->si_cxstack)
#define cxstack_ix	(PL_curstackinfo->si_cxix)
#define cxstack_max	(PL_curstackinfo->si_cxmax)

#ifdef DEBUGGING
#  define	SET_MARK_OFFSET \
    PL_curstackinfo->si_markoff = PL_markstack_ptr - PL_markstack
#else
#  define	SET_MARK_OFFSET NOOP
#endif

#define PUSHSTACKi(type) \
    STMT_START {							\
	PERL_SI *next = PL_curstackinfo->si_next;			\
	DEBUG_l({							\
	    int i = 0; PERL_SI *p = PL_curstackinfo;			\
	    while (p) { i++; p = p->si_prev; }				\
	    Perl_deb(aTHX_ "push STACKINFO %d at %s:%d\n",		\
		         i, __FILE__, __LINE__);})			\
	if (!next) {							\
	    next = new_stackinfo(32, 2048/sizeof(PERL_CONTEXT) - 1);	\
	    next->si_prev = PL_curstackinfo;				\
	    PL_curstackinfo->si_next = next;				\
	}								\
	next->si_type = type;						\
	next->si_cxix = -1;						\
	AvFILLp(next->si_stack) = 0;					\
	SWITCHSTACK(PL_curstack,next->si_stack);			\
	PL_curstackinfo = next;						\
	SET_MARK_OFFSET;						\
    } STMT_END

#define PUSHSTACK PUSHSTACKi(PERLSI_UNKNOWN)

/* POPSTACK works with PL_stack_sp, so it may need to be bracketed by
 * PUTBACK/SPAGAIN to flush/refresh any local SP that may be active */
#define POPSTACK \
    STMT_START {							\
	dSP;								\
	PERL_SI * const prev = PL_curstackinfo->si_prev;		\
	DEBUG_l({							\
	    int i = -1; PERL_SI *p = PL_curstackinfo;			\
	    while (p) { i++; p = p->si_prev; }				\
	    Perl_deb(aTHX_ "pop  STACKINFO %d at %s:%d\n",		\
		         i, __FILE__, __LINE__);})			\
	if (!prev) {							\
	    Perl_croak_popstack();					\
	}								\
	SWITCHSTACK(PL_curstack,prev->si_stack);			\
	/* don't free prev here, free them all at the END{} */		\
	PL_curstackinfo = prev;						\
    } STMT_END

#define POPSTACK_TO(s) \
    STMT_START {							\
	while (PL_curstack != s) {					\
	    dounwind(-1);						\
	    POPSTACK;							\
	}								\
    } STMT_END

#define IN_PERL_COMPILETIME	cBOOL(PL_curcop == &PL_compiling)
#define IN_PERL_RUNTIME		cBOOL(PL_curcop != &PL_compiling)




/*
=head1 Multicall Functions

=for apidoc Ams||dMULTICALL
Declare local variables for a multicall.  See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=for apidoc Ams||PUSH_MULTICALL
Opening bracket for a lightweight callback.
See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=for apidoc Ams||MULTICALL
Make a lightweight callback.  See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=for apidoc Ams||POP_MULTICALL
Closing bracket for a lightweight callback.
See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=cut
*/

#define dMULTICALL \
    OP  *multicall_cop;							\
    bool multicall_oldcatch

#define PUSH_MULTICALL(the_cv) \
    PUSH_MULTICALL_FLAGS(the_cv, 0)

/* Like PUSH_MULTICALL, but allows you to specify extra flags
 * for the CX stack entry (this isn't part of the public API) */

#define PUSH_MULTICALL_FLAGS(the_cv, flags) \
    STMT_START {							\
        PERL_CONTEXT *cx;						\
	CV * const _nOnclAshIngNamE_ = the_cv;				\
	CV * const cv = _nOnclAshIngNamE_;				\
	PADLIST * const padlist = CvPADLIST(cv);			\
 	multicall_oldcatch = CATCH_GET;					\
	CATCH_SET(TRUE);						\
	PUSHSTACKi(PERLSI_MULTICALL);					\
	cx = cx_pushblock((CXt_SUB|CXp_MULTICALL|flags), (U8)gimme,     \
                  PL_stack_sp, PL_savestack_ix);	                \
        cx_pushsub(cx, cv, NULL, 0);                                    \
	SAVEOP();					                \
        if (!(flags & CXp_SUB_RE_FAKE))                                 \
            CvDEPTH(cv)++;						\
	if (CvDEPTH(cv) >= 2)  						\
	    Perl_pad_push(aTHX_ padlist, CvDEPTH(cv));			\
	PAD_SET_CUR_NOSAVE(padlist, CvDEPTH(cv));			\
	multicall_cop = CvSTART(cv);					\
    } STMT_END

#define MULTICALL \
    STMT_START {							\
	PL_op = multicall_cop;						\
	CALLRUNOPS(aTHX);						\
    } STMT_END

#define POP_MULTICALL \
    STMT_START {							\
        PERL_CONTEXT *cx;						\
	cx = CX_CUR();					                \
	CX_LEAVE_SCOPE(cx);                                             \
        cx_popsub_common(cx);                                           \
        gimme = cx->blk_gimme;                                          \
        PERL_UNUSED_VAR(gimme); /* for API */                           \
	cx_popblock(cx);				   		\
	CX_POP(cx);                                                     \
	POPSTACK;							\
	CATCH_SET(multicall_oldcatch);					\
	SPAGAIN;							\
    } STMT_END

/* Change the CV of an already-pushed MULTICALL CxSUB block.
 * (this isn't part of the public API) */

#define CHANGE_MULTICALL_FLAGS(the_cv, flags) \
    STMT_START {							\
	CV * const _nOnclAshIngNamE_ = the_cv;				\
	CV * const cv = _nOnclAshIngNamE_;				\
	PADLIST * const padlist = CvPADLIST(cv);			\
        PERL_CONTEXT *cx = CX_CUR();					\
	assert(CxMULTICALL(cx));                                        \
        cx_popsub_common(cx);                                           \
	cx->cx_type = (CXt_SUB|CXp_MULTICALL|flags);                    \
        cx_pushsub(cx, cv, NULL, 0);			                \
        if (!(flags & CXp_SUB_RE_FAKE))                                 \
            CvDEPTH(cv)++;						\
	if (CvDEPTH(cv) >= 2)  						\
	    Perl_pad_push(aTHX_ padlist, CvDEPTH(cv));			\
	PAD_SET_CUR_NOSAVE(padlist, CvDEPTH(cv));			\
	multicall_cop = CvSTART(cv);					\
    } STMT_END
/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*    cv.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/* This structure must match the beginning of XPVFM in sv.h  */

struct xpvcv {
    _XPV_HEAD;
    _XPVCV_COMMON;
};

/*
=head1 Handy Values

=for apidoc AmU||Nullcv
Null CV pointer.

(deprecated - use C<(CV *)NULL> instead)

=head1 CV Manipulation Functions

This section documents functions to manipulate CVs which are code-values,
or subroutines.  For more information, see L<perlguts>.

=for apidoc Am|HV*|CvSTASH|CV* cv
Returns the stash of the CV.  A stash is the symbol table hash, containing
the package-scoped variables in the package where the subroutine was defined.
For more information, see L<perlguts>.

This also has a special use with XS AUTOLOAD subs.
See L<perlguts/Autoloading with XSUBs>.

=cut
*/

#ifndef PERL_CORE
#  define Nullcv Null(CV*)
#endif

#define CvSTASH(sv)	(0+((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_stash)
#define CvSTASH_set(cv,st) Perl_cvstash_set(aTHX_ cv, st)
#define CvSTART(sv)	((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_start_u.xcv_start
#define CvROOT(sv)	((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_root_u.xcv_root
#define CvXSUB(sv)	((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_root_u.xcv_xsub
#define CvXSUBANY(sv)	((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_start_u.xcv_xsubany
#define CvGV(sv)	S_CvGV(aTHX_ (CV *)(sv))
#define CvGV_set(cv,gv)	Perl_cvgv_set(aTHX_ cv, gv)
#define CvHASGV(cv)	cBOOL(SvANY(cv)->xcv_gv_u.xcv_gv)
#define CvFILE(sv)	((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_file
#ifdef USE_ITHREADS
#  define CvFILE_set_from_cop(sv, cop)	\
    (CvFILE(sv) = savepv(CopFILE(cop)), CvDYNFILE_on(sv))
#else
#  define CvFILE_set_from_cop(sv, cop)	\
    (CvFILE(sv) = CopFILE(cop), CvDYNFILE_off(sv))
#endif
#define CvFILEGV(sv)	(gv_fetchfile(CvFILE(sv)))
#define CvDEPTH(sv)	(*S_CvDEPTHp((const CV *)sv))
/* For use when you only have a XPVCV*, not a real CV*.
   Must be assert protected as in S_CvDEPTHp before use. */
#define CvDEPTHunsafe(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_depth

/* these CvPADLIST/CvRESERVED asserts can be reverted one day, once stabilized */
#define CvPADLIST(sv)	  (*(assert_(!CvISXSUB((CV*)(sv))) \
	&(((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_padlist)))
/* CvPADLIST_set is not public API, it can be removed one day, once stabilized */
#ifdef DEBUGGING
#  define CvPADLIST_set(sv, padlist) Perl_set_padlist((CV*)sv, padlist)
#else
#  define CvPADLIST_set(sv, padlist) (CvPADLIST(sv) = (padlist))
#endif
#define CvHSCXT(sv)	  *(assert_(CvISXSUB((CV*)(sv))) \
	&(((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_hscxt))
#ifdef DEBUGGING
#  if PTRSIZE == 8
#    define PoisonPADLIST(sv) \
        (((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_padlist = (PADLIST *)UINT64_C(0xEFEFEFEFEFEFEFEF))
#  elif PTRSIZE == 4
#    define PoisonPADLIST(sv) \
        (((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_padlist = (PADLIST *)0xEFEFEFEF)
#  else
#    error unknown pointer size
#  endif
#else
#  define PoisonPADLIST(sv) NOOP
#endif

#define CvOUTSIDE(sv)	  ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_outside
#define CvOUTSIDE_SEQ(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_outside_seq
#define CvFLAGS(sv)	  ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_flags

/* These two are sometimes called on non-CVs */
#define CvPROTO(sv)                               \
	(                                          \
	 SvPOK(sv)                                  \
	  ? SvTYPE(sv) == SVt_PVCV && CvAUTOLOAD(sv) \
	     ? SvEND(sv)+1 : SvPVX_const(sv)          \
	  : NULL                                       \
	)
#define CvPROTOLEN(sv)	                          \
	(                                          \
	 SvPOK(sv)                                  \
	  ? SvTYPE(sv) == SVt_PVCV && CvAUTOLOAD(sv) \
	     ? SvLEN(sv)-SvCUR(sv)-2                  \
	     : SvCUR(sv)                               \
	  : 0                                           \
	)

#define CVf_METHOD	0x0001	/* CV is explicitly marked as a method */
#define CVf_LVALUE	0x0002  /* CV return value can be used as lvalue */
#define CVf_CONST	0x0004  /* inlinable sub */
#define CVf_ISXSUB	0x0008	/* CV is an XSUB, not pure perl.  */

#define CVf_WEAKOUTSIDE	0x0010  /* CvOUTSIDE isn't ref counted */
#define CVf_CLONE	0x0020	/* anon CV uses external lexicals */
#define CVf_CLONED	0x0040	/* a clone of one of those */
#define CVf_ANON	0x0080	/* CV is not pointed to by a GV */
#define CVf_UNIQUE	0x0100	/* sub is only called once (eg PL_main_cv,
				 * require, eval). */
#define CVf_NODEBUG	0x0200	/* no DB::sub indirection for this CV
				   (esp. useful for special XSUBs) */
#define CVf_CVGV_RC	0x0400	/* CvGV is reference counted */
#ifdef PERL_CORE
# define CVf_SLABBED	0x0800	/* Holds refcount on op slab  */
#endif
#define CVf_DYNFILE	0x1000	/* The filename isn't static  */
#define CVf_AUTOLOAD	0x2000	/* SvPVX contains AUTOLOADed sub name  */
#define CVf_HASEVAL	0x4000	/* contains string eval  */
#define CVf_NAMED	0x8000  /* Has a name HEK */
#define CVf_LEXICAL	0x10000 /* Omit package from name */
#define CVf_ANONCONST	0x20000 /* :const - create anonconst op */

/* This symbol for optimised communication between toke.c and op.c: */
#define CVf_BUILTIN_ATTRS	(CVf_METHOD|CVf_LVALUE|CVf_ANONCONST)

#define CvCLONE(cv)		(CvFLAGS(cv) & CVf_CLONE)
#define CvCLONE_on(cv)		(CvFLAGS(cv) |= CVf_CLONE)
#define CvCLONE_off(cv)		(CvFLAGS(cv) &= ~CVf_CLONE)

#define CvCLONED(cv)		(CvFLAGS(cv) & CVf_CLONED)
#define CvCLONED_on(cv)		(CvFLAGS(cv) |= CVf_CLONED)
#define CvCLONED_off(cv)	(CvFLAGS(cv) &= ~CVf_CLONED)

#define CvANON(cv)		(CvFLAGS(cv) & CVf_ANON)
#define CvANON_on(cv)		(CvFLAGS(cv) |= CVf_ANON)
#define CvANON_off(cv)		(CvFLAGS(cv) &= ~CVf_ANON)

/* CvEVAL or CvSPECIAL */
#define CvUNIQUE(cv)		(CvFLAGS(cv) & CVf_UNIQUE)
#define CvUNIQUE_on(cv)		(CvFLAGS(cv) |= CVf_UNIQUE)
#define CvUNIQUE_off(cv)	(CvFLAGS(cv) &= ~CVf_UNIQUE)

#define CvNODEBUG(cv)		(CvFLAGS(cv) & CVf_NODEBUG)
#define CvNODEBUG_on(cv)	(CvFLAGS(cv) |= CVf_NODEBUG)
#define CvNODEBUG_off(cv)	(CvFLAGS(cv) &= ~CVf_NODEBUG)

#define CvMETHOD(cv)		(CvFLAGS(cv) & CVf_METHOD)
#define CvMETHOD_on(cv)		(CvFLAGS(cv) |= CVf_METHOD)
#define CvMETHOD_off(cv)	(CvFLAGS(cv) &= ~CVf_METHOD)

#define CvLVALUE(cv)		(CvFLAGS(cv) & CVf_LVALUE)
#define CvLVALUE_on(cv)		(CvFLAGS(cv) |= CVf_LVALUE)
#define CvLVALUE_off(cv)	(CvFLAGS(cv) &= ~CVf_LVALUE)

/* eval or PL_main_cv */
#define CvEVAL(cv)		(CvUNIQUE(cv) && !SvFAKE(cv))
#define CvEVAL_on(cv)		(CvUNIQUE_on(cv),SvFAKE_off(cv))
#define CvEVAL_off(cv)		CvUNIQUE_off(cv)

/* BEGIN|CHECK|INIT|UNITCHECK|END */
#define CvSPECIAL(cv)		(CvUNIQUE(cv) && SvFAKE(cv))
#define CvSPECIAL_on(cv)	(CvUNIQUE_on(cv),SvFAKE_on(cv))
#define CvSPECIAL_off(cv)	(CvUNIQUE_off(cv),SvFAKE_off(cv))

#define CvCONST(cv)		(CvFLAGS(cv) & CVf_CONST)
#define CvCONST_on(cv)		(CvFLAGS(cv) |= CVf_CONST)
#define CvCONST_off(cv)		(CvFLAGS(cv) &= ~CVf_CONST)

#define CvWEAKOUTSIDE(cv)	(CvFLAGS(cv) & CVf_WEAKOUTSIDE)
#define CvWEAKOUTSIDE_on(cv)	(CvFLAGS(cv) |= CVf_WEAKOUTSIDE)
#define CvWEAKOUTSIDE_off(cv)	(CvFLAGS(cv) &= ~CVf_WEAKOUTSIDE)

#define CvISXSUB(cv)		(CvFLAGS(cv) & CVf_ISXSUB)
#define CvISXSUB_on(cv)		(CvFLAGS(cv) |= CVf_ISXSUB)
#define CvISXSUB_off(cv)	(CvFLAGS(cv) &= ~CVf_ISXSUB)

#define CvCVGV_RC(cv)		(CvFLAGS(cv) & CVf_CVGV_RC)
#define CvCVGV_RC_on(cv)	(CvFLAGS(cv) |= CVf_CVGV_RC)
#define CvCVGV_RC_off(cv)	(CvFLAGS(cv) &= ~CVf_CVGV_RC)

#ifdef PERL_CORE
# define CvSLABBED(cv)		(CvFLAGS(cv) & CVf_SLABBED)
# define CvSLABBED_on(cv)	(CvFLAGS(cv) |= CVf_SLABBED)
# define CvSLABBED_off(cv)	(CvFLAGS(cv) &= ~CVf_SLABBED)
#endif

#define CvDYNFILE(cv)		(CvFLAGS(cv) & CVf_DYNFILE)
#define CvDYNFILE_on(cv)	(CvFLAGS(cv) |= CVf_DYNFILE)
#define CvDYNFILE_off(cv)	(CvFLAGS(cv) &= ~CVf_DYNFILE)

#define CvAUTOLOAD(cv)		(CvFLAGS(cv) & CVf_AUTOLOAD)
#define CvAUTOLOAD_on(cv)	(CvFLAGS(cv) |= CVf_AUTOLOAD)
#define CvAUTOLOAD_off(cv)	(CvFLAGS(cv) &= ~CVf_AUTOLOAD)

#define CvHASEVAL(cv)		(CvFLAGS(cv) & CVf_HASEVAL)
#define CvHASEVAL_on(cv)	(CvFLAGS(cv) |= CVf_HASEVAL)
#define CvHASEVAL_off(cv)	(CvFLAGS(cv) &= ~CVf_HASEVAL)

#define CvNAMED(cv)		(CvFLAGS(cv) & CVf_NAMED)
#define CvNAMED_on(cv)		(CvFLAGS(cv) |= CVf_NAMED)
#define CvNAMED_off(cv)		(CvFLAGS(cv) &= ~CVf_NAMED)

#define CvLEXICAL(cv)		(CvFLAGS(cv) & CVf_LEXICAL)
#define CvLEXICAL_on(cv)	(CvFLAGS(cv) |= CVf_LEXICAL)
#define CvLEXICAL_off(cv)	(CvFLAGS(cv) &= ~CVf_LEXICAL)

#define CvANONCONST(cv)		(CvFLAGS(cv) & CVf_ANONCONST)
#define CvANONCONST_on(cv)	(CvFLAGS(cv) |= CVf_ANONCONST)
#define CvANONCONST_off(cv)	(CvFLAGS(cv) &= ~CVf_ANONCONST)

/* Flags for newXS_flags  */
#define XS_DYNAMIC_FILENAME	0x01	/* The filename isn't static  */

PERL_STATIC_INLINE HEK *
CvNAME_HEK(CV *sv)
{
    return CvNAMED(sv)
	? ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_gv_u.xcv_hek
	: 0;
}
/* This lowers the refernce count of the previous value, but does *not*
   increment the reference count of the new value. */
#define CvNAME_HEK_set(cv, hek) ( \
	CvNAME_HEK((CV *)(cv))						 \
	    ? unshare_hek(SvANY((CV *)(cv))->xcv_gv_u.xcv_hek)	  \
	    : (void)0,						   \
	((XPVCV*)MUTABLE_PTR(SvANY(cv)))->xcv_gv_u.xcv_hek = (hek), \
	CvNAMED_on(cv)						     \
    )

/*
=head1 CV reference counts and CvOUTSIDE

=for apidoc m|bool|CvWEAKOUTSIDE|CV *cv

Each CV has a pointer, C<CvOUTSIDE()>, to its lexically enclosing
CV (if any).  Because pointers to anonymous sub prototypes are
stored in C<&> pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa.  To avoid the
ensuing memory leak, we do not increment the reference count of the CV
pointed to by C<CvOUTSIDE> in the I<one specific instance> that the parent
has a C<&> pad slot pointing back to us.  In this case, we set the
C<CvWEAKOUTSIDE> flag in the child.  This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.

There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub).  In this case, the
anonymous prototype is shared rather than being cloned.  This has the
consequence that the parent may be freed while there are still active
children, I<e.g.>,

    BEGIN { $a = sub { eval '$x' } }

In this case, the BEGIN is freed immediately after execution since there
are no active references to it: the anon sub prototype has
C<CvWEAKOUTSIDE> set since it's not a closure, and $a points to the same
CV, so it doesn't contribute to BEGIN's refcount either.  When $a is
executed, the C<eval '$x'> causes the chain of C<CvOUTSIDE>s to be followed,
and the freed BEGIN is accessed.

To avoid this, whenever a CV and its associated pad is freed, any
C<&> entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's C<CvOUTSIDE> is set to point to its grandparent.  This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as C<$a> above).

One other thing to consider is that a CV may be merely undefined
rather than freed, eg C<undef &foo>.  In this case, its refcount may
not have reached zero, but we still delete its pad and its C<CvROOT> etc.
Since various children may still have their C<CvOUTSIDE> pointing at this
undefined CV, we keep its own C<CvOUTSIDE> for the time being, so that
the chain of lexical scopes is unbroken.  For example, the following
should print 123:

    my $x = 123;
    sub tmp { sub { eval '$x' } }
    my $a = tmp();
    undef &tmp;
    print  $a->();

=cut
*/

typedef OP *(*Perl_call_checker)(pTHX_ OP *, GV *, SV *);

#define CALL_CHECKER_REQUIRE_GV	MGf_REQUIRE_GV

#define CV_NAME_NOTQUAL		1

#ifdef PERL_CORE
# define CV_UNDEF_KEEP_NAME	1
#endif

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                      /*    dosish.h
 *
 *    Copyright (C) 1993, 1994, 1996, 1997, 1998, 1999,
 *    2000, 2001, 2002, 2007, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */
#define ABORT() abort();

#ifndef SH_PATH
#define SH_PATH "/bin/sh"
#endif

#ifdef DJGPP
#  define BIT_BUCKET "nul"
#  define OP_BINARY O_BINARY
#  define PERL_SYS_INIT_BODY(c,v)					\
	 MALLOC_CHECK_TAINT2(*c,*v) Perl_DJGPP_init(c,v); PERLIO_INIT
#  define init_os_extras Perl_init_os_extras
#  define HAS_UTIME
#  define HAS_KILL
   char *djgpp_pathexp (const char*);
   void Perl_DJGPP_init (int *argcp,char ***argvp);
#  if (DJGPP==2 && DJGPP_MINOR < 2)
#    define NO_LOCALECONV_MON_THOUSANDS_SEP
#  endif
#  ifndef PERL_CORE
#    define PERL_FS_VER_FMT	"%d_%d_%d"
#  endif
#  define PERL_FS_VERSION	STRINGIFY(PERL_REVISION) "_" \
				STRINGIFY(PERL_VERSION) "_" \
				STRINGIFY(PERL_SUBVERSION)
#else	/* DJGPP */
#  ifdef WIN32
#    define PERL_SYS_INIT_BODY(c,v)					\
	MALLOC_CHECK_TAINT2(*c,*v) Perl_win32_init(c,v); PERLIO_INIT
#    define PERL_SYS_TERM_BODY()   Perl_win32_term()
#    define BIT_BUCKET "nul"
#  else
#	 ifdef NETWARE
#      define PERL_SYS_INIT_BODY(c,v)					\
	MALLOC_CHECK_TAINT2(*c,*v) Perl_nw5_init(c,v); PERLIO_INIT
#      define BIT_BUCKET "nwnul"
#    else
#      define PERL_SYS_INIT_BODY(c,v)		\
	MALLOC_CHECK_TAINT2(*c,*v); PERLIO_INIT
#      define BIT_BUCKET "\\dev\\nul" /* "wanna be like, umm, Newlined, or somethin?" */
#    endif /* NETWARE */
#  endif
#endif	/* DJGPP */

#ifndef PERL_SYS_TERM_BODY
#  define PERL_SYS_TERM_BODY()                              \
    HINTS_REFCNT_TERM; OP_CHECK_MUTEX_TERM;                 \
    OP_REFCNT_TERM; PERLIO_TERM; MALLOC_TERM; LOCALE_TERM;
#endif
#define dXSUB_SYS

/* USEMYBINMODE
 *	This symbol, if defined, indicates that the program should
 *	use the routine my_binmode(FILE *fp, char iotype, int mode) to insure
 *	that a file is in "binary" mode -- that is, that no translation
 *	of bytes occurs on read or write operations.
 */
#undef USEMYBINMODE

/* Stat_t:
 *	This symbol holds the type used to declare buffers for information
 *	returned by stat().  It's usually just struct stat.  It may be necessary
 *	to include <sys/stat.h> and <sys/types.h> to get any typedef'ed
 *	information.
 */
#if defined(WIN64) || defined(USE_LARGE_FILES)
#define Stat_t struct _stati64
#else
#if defined(UNDER_CE)
#define Stat_t struct xcestat
#else
#define Stat_t struct stat
#endif
#endif

/* USE_STAT_RDEV:
 *	This symbol is defined if this system has a stat structure declaring
 *	st_rdev
 */
#define USE_STAT_RDEV 	/**/

/* ACME_MESS:
 *	This symbol, if defined, indicates that error messages should be 
 *	should be generated in a format that allows the use of the Acme
 *	GUI/editor's autofind feature.
 */
#undef ACME_MESS	/**/

/* ALTERNATE_SHEBANG:
 *	This symbol, if defined, contains a "magic" string which may be used
 *	as the first line of a Perl program designed to be executed directly
 *	by name, instead of the standard Unix #!.  If ALTERNATE_SHEBANG
 *	begins with a character other then #, then Perl will only treat
 *	it as a command line if it finds the string "perl" in the first
 *	word; otherwise it's treated as the first line of code in the script.
 *	(IOW, Perl won't hand off to another interpreter via an alternate
 *	shebang sequence that might be legal Perl code.)
 */
/* #define ALTERNATE_SHEBANG "#!" / **/

#include <signal.h>

/*
 * fwrite1() should be a routine with the same calling sequence as fwrite(),
 * but which outputs all of the bytes requested as a single stream (unlike
 * fwrite() itself, which on some systems outputs several distinct records
 * if the number_of_items parameter is >1).
 */
#define fwrite1 fwrite

#define Fstat(fd,bufptr)   fstat((fd),(bufptr))
#ifdef DJGPP
#   define Fflush(fp)      djgpp_fflush(fp)
#else
#   define Fflush(fp)      fflush(fp)
#endif
#define Mkdir(path,mode)   mkdir((path),(mode))

#ifndef WIN32
#  define Stat(fname,bufptr) stat((fname),(bufptr))
#else
#  define HAS_IOCTL
#  define HAS_UTIME
#  define HAS_KILL
#  define HAS_WAIT
#  define HAS_CHOWN
#endif	/* WIN32 */

/*
 * <rich@phekda.freeserve.co.uk>: The DJGPP port has code that converts
 * the return code of system() into the form that Unixy wait usually
 * returns:
 *
 * - signal number in bits 0-6;
 * - core dump flag in bit 7;
 * - exit code in bits 8-15.
 *
 * Bits 0-7 are always zero for DJGPP, because it uses system().
 * See djgpp.c.
 *
 * POSIX::W* use the W* macros from <sys/wait.h> to decode
 * the return code. Unfortunately the W* macros for DJGPP use
 * a different format than Unixy wait does. So there's a mismatch
 * and, say, WEXITSTATUS($?) will return bogus values.
 *
 * So here we add hack to redefine the W* macros from DJGPP's <sys/wait.h>
 * to work with our return-code conversion.
 */

#ifdef DJGPP

#include <sys/wait.h>

#undef WEXITSTATUS
#undef WIFEXITED
#undef WIFSIGNALED
#undef WIFSTOPPED
#undef WNOHANG
#undef WSTOPSIG
#undef WTERMSIG
#undef WUNTRACED

#define WEXITSTATUS(stat_val) ((stat_val) >> 8)
#define WIFEXITED(stat_val)   0
#define WIFSIGNALED(stat_val) 0
#define WIFSTOPPED(stat_val)  0
#define WNOHANG               0
#define WSTOPSIG(stat_val)    0
#define WTERMSIG(stat_val)    0
#define WUNTRACED             0

#endif

/* Don't go reading from /dev/urandom */
#define PERL_NO_DEV_RANDOM

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /*    dquote_inline.h
 *
 *    Copyright (C) 2015 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 */

#ifndef DQUOTE_INLINE_H /* Guard against nested #inclusion */
#define DQUOTE_INLINE_H

/*
 - regcurly - a little FSA that accepts {\d+,?\d*}
    Pulled from reg.c.
 */
PERL_STATIC_INLINE I32
S_regcurly(const char *s)
{
    PERL_ARGS_ASSERT_REGCURLY;

    if (*s++ != '{')
	return FALSE;
    if (!isDIGIT(*s))
	return FALSE;
    while (isDIGIT(*s))
	s++;
    if (*s == ',') {
	s++;
	while (isDIGIT(*s))
	    s++;
    }

    return *s == '}';
}

/* This is inline not for speed, but because it is so tiny */

PERL_STATIC_INLINE char*
S_form_short_octal_warning(pTHX_
                           const char * const s, /* Points to first non-octal */
                           const STRLEN len      /* Length of octals string, so
                                                    (s-len) points to first
                                                    octal */
)
{
    /* Return a character string consisting of a warning message for when a
     * string constant in octal is weird, like "\078".  */

    const char * sans_leading_zeros = s - len;

    PERL_ARGS_ASSERT_FORM_SHORT_OCTAL_WARNING;

    assert(*s == '8' || *s == '9');

    /* Remove the leading zeros, retaining one zero so won't be zero length */
    while (*sans_leading_zeros == '0') sans_leading_zeros++;
    if (sans_leading_zeros == s) {
        sans_leading_zeros--;
    }

    return Perl_form(aTHX_
                     "'%.*s' resolved to '\\o{%.*s}%c'",
                     (int) (len + 2), s - len - 1,
                     (int) (s - sans_leading_zeros), sans_leading_zeros,
                     *s);
}
#endif  /* DQUOTE_INLINE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /* -*- buffer-read-only: t -*-
 *
 *    embedvar.h
 *
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/embed.pl from data in embed.fnc,
 * regen/embed.pl, regen/opcodes, intrpvar.h and perlvars.h.
 * Any changes made here will be lost!
 *
 * Edit those files and run 'make regen_headers' to effect changes.
 */

/* (Doing namespace management portably in C is really gross.) */

/*
   The following combinations of MULTIPLICITY and PERL_IMPLICIT_CONTEXT
   are supported:
     1) none
     2) MULTIPLICITY	# supported for compatibility
     3) MULTIPLICITY && PERL_IMPLICIT_CONTEXT

   All other combinations of these flags are errors.

   only #3 is supported directly, while #2 is a special
   case of #3 (supported by redefining vTHX appropriately).
*/

#if defined(MULTIPLICITY)
/* cases 2 and 3 above */

#  if defined(PERL_IMPLICIT_CONTEXT)
#    define vTHX	aTHX
#  else
#    define vTHX	PERL_GET_INTERP
#  endif

#define PL_AboveLatin1		(vTHX->IAboveLatin1)
#define PL_Argv			(vTHX->IArgv)
#define PL_Cmd			(vTHX->ICmd)
#define PL_DBcontrol		(vTHX->IDBcontrol)
#define PL_DBcv			(vTHX->IDBcv)
#define PL_DBgv			(vTHX->IDBgv)
#define PL_DBline		(vTHX->IDBline)
#define PL_DBsignal		(vTHX->IDBsignal)
#define PL_DBsingle		(vTHX->IDBsingle)
#define PL_DBsub		(vTHX->IDBsub)
#define PL_DBtrace		(vTHX->IDBtrace)
#define PL_Dir			(vTHX->IDir)
#define PL_Env			(vTHX->IEnv)
#define PL_GCB_invlist		(vTHX->IGCB_invlist)
#define PL_HasMultiCharFold	(vTHX->IHasMultiCharFold)
#define PL_InBitmap		(vTHX->IInBitmap)
#define PL_LB_invlist		(vTHX->ILB_invlist)
#define PL_LIO			(vTHX->ILIO)
#define PL_Latin1		(vTHX->ILatin1)
#define PL_Mem			(vTHX->IMem)
#define PL_MemParse		(vTHX->IMemParse)
#define PL_MemShared		(vTHX->IMemShared)
#define PL_NonL1NonFinalFold	(vTHX->INonL1NonFinalFold)
#define PL_Posix_ptrs		(vTHX->IPosix_ptrs)
#define PL_Proc			(vTHX->IProc)
#define PL_SB_invlist		(vTHX->ISB_invlist)
#define PL_Sock			(vTHX->ISock)
#define PL_StdIO		(vTHX->IStdIO)
#define PL_Sv			(vTHX->ISv)
#define PL_UpperLatin1		(vTHX->IUpperLatin1)
#define PL_WB_invlist		(vTHX->IWB_invlist)
#define PL_XPosix_ptrs		(vTHX->IXPosix_ptrs)
#define PL_Xpv			(vTHX->IXpv)
#define PL_an			(vTHX->Ian)
#define PL_argvgv		(vTHX->Iargvgv)
#define PL_argvout_stack	(vTHX->Iargvout_stack)
#define PL_argvoutgv		(vTHX->Iargvoutgv)
#define PL_basetime		(vTHX->Ibasetime)
#define PL_beginav		(vTHX->Ibeginav)
#define PL_beginav_save		(vTHX->Ibeginav_save)
#define PL_blockhooks		(vTHX->Iblockhooks)
#define PL_body_arenas		(vTHX->Ibody_arenas)
#define PL_body_roots		(vTHX->Ibody_roots)
#define PL_bodytarget		(vTHX->Ibodytarget)
#define PL_breakable_sub_gen	(vTHX->Ibreakable_sub_gen)
#define PL_checkav		(vTHX->Icheckav)
#define PL_checkav_save		(vTHX->Icheckav_save)
#define PL_chopset		(vTHX->Ichopset)
#define PL_clocktick		(vTHX->Iclocktick)
#define PL_collation_ix		(vTHX->Icollation_ix)
#define PL_collation_name	(vTHX->Icollation_name)
#define PL_collation_standard	(vTHX->Icollation_standard)
#define PL_collxfrm_base	(vTHX->Icollxfrm_base)
#define PL_collxfrm_mult	(vTHX->Icollxfrm_mult)
#define PL_colors		(vTHX->Icolors)
#define PL_colorset		(vTHX->Icolorset)
#define PL_compcv		(vTHX->Icompcv)
#define PL_compiling		(vTHX->Icompiling)
#define PL_comppad		(vTHX->Icomppad)
#define PL_comppad_name		(vTHX->Icomppad_name)
#define PL_comppad_name_fill	(vTHX->Icomppad_name_fill)
#define PL_comppad_name_floor	(vTHX->Icomppad_name_floor)
#define PL_constpadix		(vTHX->Iconstpadix)
#define PL_cop_seqmax		(vTHX->Icop_seqmax)
#define PL_cryptseen		(vTHX->Icryptseen)
#define PL_curcop		(vTHX->Icurcop)
#define PL_curcopdb		(vTHX->Icurcopdb)
#define PL_curpad		(vTHX->Icurpad)
#define PL_curpm		(vTHX->Icurpm)
#define PL_curstack		(vTHX->Icurstack)
#define PL_curstackinfo		(vTHX->Icurstackinfo)
#define PL_curstash		(vTHX->Icurstash)
#define PL_curstname		(vTHX->Icurstname)
#define PL_custom_op_descs	(vTHX->Icustom_op_descs)
#define PL_custom_op_names	(vTHX->Icustom_op_names)
#define PL_custom_ops		(vTHX->Icustom_ops)
#define PL_cv_has_eval		(vTHX->Icv_has_eval)
#define PL_dbargs		(vTHX->Idbargs)
#define PL_debstash		(vTHX->Idebstash)
#define PL_debug		(vTHX->Idebug)
#define PL_debug_pad		(vTHX->Idebug_pad)
#define PL_def_layerlist	(vTHX->Idef_layerlist)
#define PL_defgv		(vTHX->Idefgv)
#define PL_defoutgv		(vTHX->Idefoutgv)
#define PL_defstash		(vTHX->Idefstash)
#define PL_delaymagic		(vTHX->Idelaymagic)
#define PL_delaymagic_egid	(vTHX->Idelaymagic_egid)
#define PL_delaymagic_euid	(vTHX->Idelaymagic_euid)
#define PL_delaymagic_gid	(vTHX->Idelaymagic_gid)
#define PL_delaymagic_uid	(vTHX->Idelaymagic_uid)
#define PL_destroyhook		(vTHX->Idestroyhook)
#define PL_diehook		(vTHX->Idiehook)
#define PL_doswitches		(vTHX->Idoswitches)
#define PL_dowarn		(vTHX->Idowarn)
#define PL_dump_re_max_len	(vTHX->Idump_re_max_len)
#define PL_dumper_fd		(vTHX->Idumper_fd)
#define PL_dumpindent		(vTHX->Idumpindent)
#define PL_e_script		(vTHX->Ie_script)
#define PL_efloatbuf		(vTHX->Iefloatbuf)
#define PL_efloatsize		(vTHX->Iefloatsize)
#define PL_encoding		(vTHX->Iencoding)
#define PL_endav		(vTHX->Iendav)
#define PL_envgv		(vTHX->Ienvgv)
#define PL_errgv		(vTHX->Ierrgv)
#define PL_errors		(vTHX->Ierrors)
#define PL_eval_root		(vTHX->Ieval_root)
#define PL_eval_start		(vTHX->Ieval_start)
#define PL_evalseq		(vTHX->Ievalseq)
#define PL_exit_flags		(vTHX->Iexit_flags)
#define PL_exitlist		(vTHX->Iexitlist)
#define PL_exitlistlen		(vTHX->Iexitlistlen)
#define PL_fdpid		(vTHX->Ifdpid)
#define PL_filemode		(vTHX->Ifilemode)
#define PL_firstgv		(vTHX->Ifirstgv)
#define PL_forkprocess		(vTHX->Iforkprocess)
#define PL_formtarget		(vTHX->Iformtarget)
#define PL_generation		(vTHX->Igeneration)
#define PL_gensym		(vTHX->Igensym)
#define PL_globalstash		(vTHX->Iglobalstash)
#define PL_globhook		(vTHX->Iglobhook)
#define PL_hash_rand_bits	(vTHX->Ihash_rand_bits)
#define PL_hash_rand_bits_enabled	(vTHX->Ihash_rand_bits_enabled)
#define PL_hintgv		(vTHX->Ihintgv)
#define PL_hv_fetch_ent_mh	(vTHX->Ihv_fetch_ent_mh)
#define PL_in_clean_all		(vTHX->Iin_clean_all)
#define PL_in_clean_objs	(vTHX->Iin_clean_objs)
#define PL_in_eval		(vTHX->Iin_eval)
#define PL_in_load_module	(vTHX->Iin_load_module)
#define PL_in_utf8_CTYPE_locale	(vTHX->Iin_utf8_CTYPE_locale)
#define PL_incgv		(vTHX->Iincgv)
#define PL_initav		(vTHX->Iinitav)
#define PL_inplace		(vTHX->Iinplace)
#define PL_isarev		(vTHX->Iisarev)
#define PL_known_layers		(vTHX->Iknown_layers)
#define PL_last_in_gv		(vTHX->Ilast_in_gv)
#define PL_last_swash_hv	(vTHX->Ilast_swash_hv)
#define PL_last_swash_key	(vTHX->Ilast_swash_key)
#define PL_last_swash_klen	(vTHX->Ilast_swash_klen)
#define PL_last_swash_slen	(vTHX->Ilast_swash_slen)
#define PL_last_swash_tmps	(vTHX->Ilast_swash_tmps)
#define PL_lastfd		(vTHX->Ilastfd)
#define PL_lastgotoprobe	(vTHX->Ilastgotoprobe)
#define PL_laststatval		(vTHX->Ilaststatval)
#define PL_laststype		(vTHX->Ilaststype)
#define PL_lex_encoding		(vTHX->Ilex_encoding)
#define PL_localizing		(vTHX->Ilocalizing)
#define PL_localpatches		(vTHX->Ilocalpatches)
#define PL_lockhook		(vTHX->Ilockhook)
#define PL_main_cv		(vTHX->Imain_cv)
#define PL_main_root		(vTHX->Imain_root)
#define PL_main_start		(vTHX->Imain_start)
#define PL_mainstack		(vTHX->Imainstack)
#define PL_markstack		(vTHX->Imarkstack)
#define PL_markstack_max	(vTHX->Imarkstack_max)
#define PL_markstack_ptr	(vTHX->Imarkstack_ptr)
#define PL_max_intro_pending	(vTHX->Imax_intro_pending)
#define PL_maxo			(vTHX->Imaxo)
#define PL_maxsysfd		(vTHX->Imaxsysfd)
#define PL_memory_debug_header	(vTHX->Imemory_debug_header)
#define PL_mess_sv		(vTHX->Imess_sv)
#define PL_min_intro_pending	(vTHX->Imin_intro_pending)
#define PL_minus_E		(vTHX->Iminus_E)
#define PL_minus_F		(vTHX->Iminus_F)
#define PL_minus_a		(vTHX->Iminus_a)
#define PL_minus_c		(vTHX->Iminus_c)
#define PL_minus_l		(vTHX->Iminus_l)
#define PL_minus_n		(vTHX->Iminus_n)
#define PL_minus_p		(vTHX->Iminus_p)
#define PL_modcount		(vTHX->Imodcount)
#define PL_modglobal		(vTHX->Imodglobal)
#define PL_multideref_pc	(vTHX->Imultideref_pc)
#define PL_my_cxt_keys		(vTHX->Imy_cxt_keys)
#define PL_my_cxt_list		(vTHX->Imy_cxt_list)
#define PL_my_cxt_size		(vTHX->Imy_cxt_size)
#define PL_na			(vTHX->Ina)
#define PL_nomemok		(vTHX->Inomemok)
#define PL_numeric_local	(vTHX->Inumeric_local)
#define PL_numeric_name		(vTHX->Inumeric_name)
#define PL_numeric_radix_sv	(vTHX->Inumeric_radix_sv)
#define PL_numeric_standard	(vTHX->Inumeric_standard)
#define PL_ofsgv		(vTHX->Iofsgv)
#define PL_oldname		(vTHX->Ioldname)
#define PL_op			(vTHX->Iop)
#define PL_op_exec_cnt		(vTHX->Iop_exec_cnt)
#define PL_op_mask		(vTHX->Iop_mask)
#define PL_opfreehook		(vTHX->Iopfreehook)
#define PL_origalen		(vTHX->Iorigalen)
#define PL_origargc		(vTHX->Iorigargc)
#define PL_origargv		(vTHX->Iorigargv)
#define PL_origenviron		(vTHX->Iorigenviron)
#define PL_origfilename		(vTHX->Iorigfilename)
#define PL_ors_sv		(vTHX->Iors_sv)
#define PL_osname		(vTHX->Iosname)
#define PL_pad_reset_pending	(vTHX->Ipad_reset_pending)
#define PL_padix		(vTHX->Ipadix)
#define PL_padix_floor		(vTHX->Ipadix_floor)
#define PL_padlist_generation	(vTHX->Ipadlist_generation)
#define PL_padname_const	(vTHX->Ipadname_const)
#define PL_padname_undef	(vTHX->Ipadname_undef)
#define PL_parser		(vTHX->Iparser)
#define PL_patchlevel		(vTHX->Ipatchlevel)
#define PL_peepp		(vTHX->Ipeepp)
#define PL_perl_destruct_level	(vTHX->Iperl_destruct_level)
#define PL_perldb		(vTHX->Iperldb)
#define PL_perlio		(vTHX->Iperlio)
#define PL_phase		(vTHX->Iphase)
#define PL_pidstatus		(vTHX->Ipidstatus)
#define PL_preambleav		(vTHX->Ipreambleav)
#define PL_profiledata		(vTHX->Iprofiledata)
#define PL_psig_name		(vTHX->Ipsig_name)
#define PL_psig_pend		(vTHX->Ipsig_pend)
#define PL_psig_ptr		(vTHX->Ipsig_ptr)
#define PL_ptr_table		(vTHX->Iptr_table)
#define PL_random_state		(vTHX->Irandom_state)
#define PL_reentrant_buffer	(vTHX->Ireentrant_buffer)
#define PL_reentrant_retint	(vTHX->Ireentrant_retint)
#define PL_reg_curpm		(vTHX->Ireg_curpm)
#define PL_regex_pad		(vTHX->Iregex_pad)
#define PL_regex_padav		(vTHX->Iregex_padav)
#define PL_registered_mros	(vTHX->Iregistered_mros)
#define PL_regmatch_slab	(vTHX->Iregmatch_slab)
#define PL_regmatch_state	(vTHX->Iregmatch_state)
#define PL_replgv		(vTHX->Ireplgv)
#define PL_restartjmpenv	(vTHX->Irestartjmpenv)
#define PL_restartop		(vTHX->Irestartop)
#define PL_rpeepp		(vTHX->Irpeepp)
#define PL_rs			(vTHX->Irs)
#define PL_runops		(vTHX->Irunops)
#define PL_savebegin		(vTHX->Isavebegin)
#define PL_savestack		(vTHX->Isavestack)
#define PL_savestack_ix		(vTHX->Isavestack_ix)
#define PL_savestack_max	(vTHX->Isavestack_max)
#ifndef PL_sawampersand
#define PL_sawampersand		(vTHX->Isawampersand)
#endif
#define PL_scopestack		(vTHX->Iscopestack)
#define PL_scopestack_ix	(vTHX->Iscopestack_ix)
#define PL_scopestack_max	(vTHX->Iscopestack_max)
#define PL_scopestack_name	(vTHX->Iscopestack_name)
#define PL_secondgv		(vTHX->Isecondgv)
#define PL_sharehook		(vTHX->Isharehook)
#define PL_sig_pending		(vTHX->Isig_pending)
#define PL_sighandlerp		(vTHX->Isighandlerp)
#define PL_signalhook		(vTHX->Isignalhook)
#define PL_signals		(vTHX->Isignals)
#define PL_sort_RealCmp		(vTHX->Isort_RealCmp)
#define PL_sortcop		(vTHX->Isortcop)
#define PL_sortstash		(vTHX->Isortstash)
#define PL_splitstr		(vTHX->Isplitstr)
#define PL_srand_called		(vTHX->Isrand_called)
#define PL_stack_base		(vTHX->Istack_base)
#define PL_stack_max		(vTHX->Istack_max)
#define PL_stack_sp		(vTHX->Istack_sp)
#define PL_start_env		(vTHX->Istart_env)
#define PL_stashcache		(vTHX->Istashcache)
#define PL_stashpad		(vTHX->Istashpad)
#define PL_stashpadix		(vTHX->Istashpadix)
#define PL_stashpadmax		(vTHX->Istashpadmax)
#define PL_statbuf		(vTHX->Istatbuf)
#define PL_statcache		(vTHX->Istatcache)
#define PL_statgv		(vTHX->Istatgv)
#define PL_statname		(vTHX->Istatname)
#define PL_statusvalue		(vTHX->Istatusvalue)
#define PL_statusvalue_posix	(vTHX->Istatusvalue_posix)
#define PL_statusvalue_vms	(vTHX->Istatusvalue_vms)
#define PL_stderrgv		(vTHX->Istderrgv)
#define PL_stdingv		(vTHX->Istdingv)
#define PL_strtab		(vTHX->Istrtab)
#define PL_sub_generation	(vTHX->Isub_generation)
#define PL_subline		(vTHX->Isubline)
#define PL_subname		(vTHX->Isubname)
#define PL_sv_arenaroot		(vTHX->Isv_arenaroot)
#define PL_sv_consts		(vTHX->Isv_consts)
#define PL_sv_count		(vTHX->Isv_count)
#define PL_sv_no		(vTHX->Isv_no)
#define PL_sv_root		(vTHX->Isv_root)
#define PL_sv_serial		(vTHX->Isv_serial)
#define PL_sv_undef		(vTHX->Isv_undef)
#define PL_sv_yes		(vTHX->Isv_yes)
#define PL_sys_intern		(vTHX->Isys_intern)
#define PL_taint_warn		(vTHX->Itaint_warn)
#define PL_tainted		(vTHX->Itainted)
#define PL_tainting		(vTHX->Itainting)
#define PL_threadhook		(vTHX->Ithreadhook)
#define PL_tmps_floor		(vTHX->Itmps_floor)
#define PL_tmps_ix		(vTHX->Itmps_ix)
#define PL_tmps_max		(vTHX->Itmps_max)
#define PL_tmps_stack		(vTHX->Itmps_stack)
#define PL_top_env		(vTHX->Itop_env)
#define PL_toptarget		(vTHX->Itoptarget)
#define PL_unicode		(vTHX->Iunicode)
#define PL_unitcheckav		(vTHX->Iunitcheckav)
#define PL_unitcheckav_save	(vTHX->Iunitcheckav_save)
#define PL_unlockhook		(vTHX->Iunlockhook)
#define PL_unsafe		(vTHX->Iunsafe)
#define PL_utf8_charname_begin	(vTHX->Iutf8_charname_begin)
#define PL_utf8_charname_continue	(vTHX->Iutf8_charname_continue)
#define PL_utf8_foldable	(vTHX->Iutf8_foldable)
#define PL_utf8_foldclosures	(vTHX->Iutf8_foldclosures)
#define PL_utf8_idcont		(vTHX->Iutf8_idcont)
#define PL_utf8_idstart		(vTHX->Iutf8_idstart)
#define PL_utf8_mark		(vTHX->Iutf8_mark)
#define PL_utf8_perl_idcont	(vTHX->Iutf8_perl_idcont)
#define PL_utf8_perl_idstart	(vTHX->Iutf8_perl_idstart)
#define PL_utf8_swash_ptrs	(vTHX->Iutf8_swash_ptrs)
#define PL_utf8_tofold		(vTHX->Iutf8_tofold)
#define PL_utf8_tolower		(vTHX->Iutf8_tolower)
#define PL_utf8_totitle		(vTHX->Iutf8_totitle)
#define PL_utf8_toupper		(vTHX->Iutf8_toupper)
#define PL_utf8_xidcont		(vTHX->Iutf8_xidcont)
#define PL_utf8_xidstart	(vTHX->Iutf8_xidstart)
#define PL_utf8cache		(vTHX->Iutf8cache)
#define PL_utf8locale		(vTHX->Iutf8locale)
#define PL_warn_locale		(vTHX->Iwarn_locale)
#define PL_warnhook		(vTHX->Iwarnhook)
#define PL_watchaddr		(vTHX->Iwatchaddr)
#define PL_watchok		(vTHX->Iwatchok)
#define PL_xsubfilename		(vTHX->Ixsubfilename)

#endif	/* MULTIPLICITY */

#if defined(PERL_GLOBAL_STRUCT)

#define PL_appctx		(my_vars->Gappctx)
#define PL_Gappctx		(my_vars->Gappctx)
#define PL_check		(my_vars->Gcheck)
#define PL_Gcheck		(my_vars->Gcheck)
#define PL_check_mutex		(my_vars->Gcheck_mutex)
#define PL_Gcheck_mutex		(my_vars->Gcheck_mutex)
#define PL_csighandlerp		(my_vars->Gcsighandlerp)
#define PL_Gcsighandlerp	(my_vars->Gcsighandlerp)
#define PL_curinterp		(my_vars->Gcurinterp)
#define PL_Gcurinterp		(my_vars->Gcurinterp)
#define PL_do_undump		(my_vars->Gdo_undump)
#define PL_Gdo_undump		(my_vars->Gdo_undump)
#define PL_dollarzero_mutex	(my_vars->Gdollarzero_mutex)
#define PL_Gdollarzero_mutex	(my_vars->Gdollarzero_mutex)
#define PL_fold_locale		(my_vars->Gfold_locale)
#define PL_Gfold_locale		(my_vars->Gfold_locale)
#define PL_hash_seed		(my_vars->Ghash_seed)
#define PL_Ghash_seed		(my_vars->Ghash_seed)
#define PL_hash_seed_set	(my_vars->Ghash_seed_set)
#define PL_Ghash_seed_set	(my_vars->Ghash_seed_set)
#define PL_hints_mutex		(my_vars->Ghints_mutex)
#define PL_Ghints_mutex		(my_vars->Ghints_mutex)
#define PL_keyword_plugin	(my_vars->Gkeyword_plugin)
#define PL_Gkeyword_plugin	(my_vars->Gkeyword_plugin)
#define PL_locale_mutex		(my_vars->Glocale_mutex)
#define PL_Glocale_mutex	(my_vars->Glocale_mutex)
#define PL_malloc_mutex		(my_vars->Gmalloc_mutex)
#define PL_Gmalloc_mutex	(my_vars->Gmalloc_mutex)
#define PL_mmap_page_size	(my_vars->Gmmap_page_size)
#define PL_Gmmap_page_size	(my_vars->Gmmap_page_size)
#define PL_my_ctx_mutex		(my_vars->Gmy_ctx_mutex)
#define PL_Gmy_ctx_mutex	(my_vars->Gmy_ctx_mutex)
#define PL_my_cxt_index		(my_vars->Gmy_cxt_index)
#define PL_Gmy_cxt_index	(my_vars->Gmy_cxt_index)
#define PL_op_mutex		(my_vars->Gop_mutex)
#define PL_Gop_mutex		(my_vars->Gop_mutex)
#define PL_op_seq		(my_vars->Gop_seq)
#define PL_Gop_seq		(my_vars->Gop_seq)
#define PL_op_sequence		(my_vars->Gop_sequence)
#define PL_Gop_sequence		(my_vars->Gop_sequence)
#define PL_perlio_debug_fd	(my_vars->Gperlio_debug_fd)
#define PL_Gperlio_debug_fd	(my_vars->Gperlio_debug_fd)
#define PL_perlio_fd_refcnt	(my_vars->Gperlio_fd_refcnt)
#define PL_Gperlio_fd_refcnt	(my_vars->Gperlio_fd_refcnt)
#define PL_perlio_fd_refcnt_size	(my_vars->Gperlio_fd_refcnt_size)
#define PL_Gperlio_fd_refcnt_size	(my_vars->Gperlio_fd_refcnt_size)
#define PL_perlio_mutex		(my_vars->Gperlio_mutex)
#define PL_Gperlio_mutex	(my_vars->Gperlio_mutex)
#define PL_ppaddr		(my_vars->Gppaddr)
#define PL_Gppaddr		(my_vars->Gppaddr)
#ifdef OS2
#define PL_sh_path		(my_vars->Gsh_path)
#define PL_Gsh_path		(my_vars->Gsh_path)
#endif
#define PL_sig_defaulting	(my_vars->Gsig_defaulting)
#define PL_Gsig_defaulting	(my_vars->Gsig_defaulting)
#define PL_sig_handlers_initted	(my_vars->Gsig_handlers_initted)
#define PL_Gsig_handlers_initted	(my_vars->Gsig_handlers_initted)
#define PL_sig_ignoring		(my_vars->Gsig_ignoring)
#define PL_Gsig_ignoring	(my_vars->Gsig_ignoring)
#define PL_sig_trapped		(my_vars->Gsig_trapped)
#define PL_Gsig_trapped		(my_vars->Gsig_trapped)
#define PL_sigfpe_saved		(my_vars->Gsigfpe_saved)
#define PL_Gsigfpe_saved	(my_vars->Gsigfpe_saved)
#define PL_sv_placeholder	(my_vars->Gsv_placeholder)
#define PL_Gsv_placeholder	(my_vars->Gsv_placeholder)
#define PL_thr_key		(my_vars->Gthr_key)
#define PL_Gthr_key		(my_vars->Gthr_key)
#define PL_timesbase		(my_vars->Gtimesbase)
#define PL_Gtimesbase		(my_vars->Gtimesbase)
#define PL_use_safe_putenv	(my_vars->Guse_safe_putenv)
#define PL_Guse_safe_putenv	(my_vars->Guse_safe_putenv)
#define PL_veto_cleanup		(my_vars->Gveto_cleanup)
#define PL_Gveto_cleanup	(my_vars->Gveto_cleanup)
#define PL_watch_pvx		(my_vars->Gwatch_pvx)
#define PL_Gwatch_pvx		(my_vars->Gwatch_pvx)

#endif /* PERL_GLOBAL_STRUCT */

/* ex: set ro: */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          /*    fakestdio.h
 *
 *    Copyright (C) 2000, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * This is "source level" stdio compatibility mode.
 * We try and #define stdio functions in terms of PerlIO.
 */
#define _CANNOT "CANNOT"
#undef FILE
#define FILE			PerlIO
#undef clearerr
#undef fclose
#undef fdopen
#undef feof
#undef ferror
#undef fflush
#undef fgetc
#undef fgetpos
#undef fgets
#undef fileno
#undef flockfile
#undef fopen
#undef fprintf
#undef fputc
#undef fputs
#undef fread
#undef freopen
#undef fscanf
#undef fseek
#undef fsetpos
#undef ftell
#undef ftrylockfile
#undef funlockfile
#undef fwrite
#undef getc
#undef getc_unlocked
#undef getw
#undef pclose
#undef popen
#undef putc
#undef putc_unlocked
#undef putw
#undef rewind
#undef setbuf
#undef setvbuf
#undef stderr
#undef stdin
#undef stdout
#undef tmpfile
#undef ungetc
#undef vfprintf
#undef printf

/* printf used to live in perl.h like this - more sophisticated 
   than the rest 
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__) && !defined(PERL_GCC_PEDANTIC)
#define printf(fmt,args...) PerlIO_stdoutf(fmt,##args)
#else
#define printf PerlIO_stdoutf
#endif

#define fprintf			PerlIO_printf
#define stdin			PerlIO_stdin()
#define stdout			PerlIO_stdout()
#define stderr			PerlIO_stderr()
#define tmpfile()		PerlIO_tmpfile()
#define fclose(f)		PerlIO_close(f)
#define fflush(f)		PerlIO_flush(f)
#define fopen(p,m)		PerlIO_open(p,m)
#define vfprintf(f,fmt,a)	PerlIO_vprintf(f,fmt,a)
#define fgetc(f)		PerlIO_getc(f)
#define fputc(c,f)		PerlIO_putc(f,c)
#define fputs(s,f)		PerlIO_puts(f,s)
#define getc(f)			PerlIO_getc(f)
#define getc_unlocked(f)	PerlIO_getc(f)
#define putc(c,f)		PerlIO_putc(f,c)
#define putc_unlocked(c,f)	PerlIO_putc(c,f)
#define ungetc(c,f)		PerlIO_ungetc(f,c)
#if 0
/* return values of read/write need work */
#define fread(b,s,c,f)		PerlIO_read(f,b,(s*c))
#define fwrite(b,s,c,f)		PerlIO_write(f,b,(s*c))
#else
#define fread(b,s,c,f)		_CANNOT fread
#define fwrite(b,s,c,f)		_CANNOT fwrite
#endif
#define fseek(f,o,w)		PerlIO_seek(f,o,w)
#define ftell(f)		PerlIO_tell(f)
#define rewind(f)		PerlIO_rewind(f)
#define clearerr(f)		PerlIO_clearerr(f)
#define feof(f)			PerlIO_eof(f)
#define ferror(f)		PerlIO_error(f)
#define fdopen(fd,p)		PerlIO_fdopen(fd,p)
#define fileno(f)		PerlIO_fileno(f)
#define popen(c,m)		my_popen(c,m)
#define pclose(f)		my_pclose(f)

#define fsetpos(f,p)		_CANNOT _fsetpos_
#define fgetpos(f,p)		_CANNOT _fgetpos_

#define __filbuf(f)		_CANNOT __filbuf_
#define _filbuf(f)		_CANNOT _filbuf_
#define __flsbuf(c,f)		_CANNOT __flsbuf_
#define _flsbuf(c,f)		_CANNOT _flsbuf_
#define getw(f)			_CANNOT _getw_
#define putw(v,f)		_CANNOT _putw_
#if SFIO_VERSION < 20000101L
#define flockfile(f)		_CANNOT _flockfile_
#define ftrylockfile(f)		_CANNOT _ftrylockfile_
#define funlockfile(f)		_CANNOT _funlockfile_
#endif
#define freopen(p,m,f)		_CANNOT _freopen_
#define setbuf(f,b)		_CANNOT _setbuf_
#define setvbuf(f,b,x,s)	_CANNOT _setvbuf_
#define fscanf			_CANNOT _fscanf_
#define fgets(s,n,f)		_CANNOT _fgets_

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /*    form.h
 *
 *    Copyright (C) 1991, 1992, 1993, 2000, 2004, 2011 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#define FF_END          0  /* tidy up, then return */
#define FF_LINEMARK     1  /* start (or end) of a line */
#define FF_LITERAL      2  /* append <arg> literal chars */
#define FF_SKIP         3  /* skip <arg> chars in format */
#define FF_FETCH        4  /* get next item and set field size to <arg> */
#define FF_CHECKNL      5  /* find max len of item (up to \n) that fits field */
#define FF_CHECKCHOP    6  /* like CHECKNL, but up to highest split point */
#define FF_SPACE        7  /* append padding space (diff of field, item size) */
#define FF_HALFSPACE    8  /* like FF_SPACE, but only append half as many */
#define FF_ITEM         9  /* append a text item, while blanking ctrl chars */
#define FF_CHOP         10 /* (for ^*) chop the current item */
#define FF_LINEGLOB     11 /* process @*  */
#define FF_DECIMAL      12 /* do @##, ^##, where <arg>=(precision|flags) */
#define FF_NEWLINE      13 /* delete trailing spaces, then append \n */
#define FF_BLANK        14 /* for arg==0: do '~'; for arg>0 : do '~~' */
#define FF_MORE         15 /* replace long end of string with '...' */
#define FF_0DECIMAL     16 /* like FF_DECIMAL but for 0### */
#define FF_LINESNGL     17 /* process ^*  */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /* -*- buffer-read-only: t -*-
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/ebcdic.pl.
 * Any changes made here will be lost!
 */


#ifndef H_EBCDIC_TABLES   /* Guard against nested #includes */
#define H_EBCDIC_TABLES   1

/* This file contains definitions for various tables used in EBCDIC handling.
 * More info is in utfebcdic.h */

#if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Index is ASCII platform code point; value is EBCDIC 1047 equivalent */
EXTCONST U8 PL_a2e[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x15,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x3F,0x27,0x1C,0x1D,0x1E,0x1F,
0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAD,0xE0,0xBD,0x5F,0x6D,
0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,0xA1,0x07,
0x20,0x21,0x22,0x23,0x24,0x25,0x06,0x17,0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B,
0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08,0x38,0x39,0x3A,0x3B,0x04,0x14,0x3E,0xFF,
0x41,0xAA,0x4A,0xB1,0x9F,0xB2,0x6A,0xB5,0xBB,0xB4,0x9A,0x8A,0xB0,0xCA,0xAF,0xBC,
0x90,0x8F,0xEA,0xFA,0xBE,0xA0,0xB6,0xB3,0x9D,0xDA,0x9B,0x8B,0xB7,0xB8,0xB9,0xAB,
0x64,0x65,0x62,0x66,0x63,0x67,0x9E,0x68,0x74,0x71,0x72,0x73,0x78,0x75,0x76,0x77,
0xAC,0x69,0xED,0xEE,0xEB,0xEF,0xEC,0xBF,0x80,0xFD,0xFE,0xFB,0xFC,0xBA,0xAE,0x59,
0x44,0x45,0x42,0x46,0x43,0x47,0x9C,0x48,0x54,0x51,0x52,0x53,0x58,0x55,0x56,0x57,
0x8C,0x49,0xCD,0xCE,0xCB,0xCF,0xCC,0xE1,0x70,0xDD,0xDE,0xDB,0xDC,0x8D,0x8E,0xDF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 1047 code point; value is ASCII platform equivalent */
EXTCONST U8 PL_e2a[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F,0x97,0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x9D,0x0A,0x08,0x87,0x18,0x19,0x92,0x8F,0x1C,0x1D,0x1E,0x1F,
0x80,0x81,0x82,0x83,0x84,0x85,0x17,0x1B,0x88,0x89,0x8A,0x8B,0x8C,0x05,0x06,0x07,
0x90,0x91,0x16,0x93,0x94,0x95,0x96,0x04,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,0x1A,
0x20,0xA0,0xE2,0xE4,0xE0,0xE1,0xE3,0xE5,0xE7,0xF1,0xA2,0x2E,0x3C,0x28,0x2B,0x7C,
0x26,0xE9,0xEA,0xEB,0xE8,0xED,0xEE,0xEF,0xEC,0xDF,0x21,0x24,0x2A,0x29,0x3B,0x5E,
0x2D,0x2F,0xC2,0xC4,0xC0,0xC1,0xC3,0xC5,0xC7,0xD1,0xA6,0x2C,0x25,0x5F,0x3E,0x3F,
0xF8,0xC9,0xCA,0xCB,0xC8,0xCD,0xCE,0xCF,0xCC,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
0xD8,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xAB,0xBB,0xF0,0xFD,0xFE,0xB1,
0xB0,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xAA,0xBA,0xE6,0xB8,0xC6,0xA4,
0xB5,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xA1,0xBF,0xD0,0x5B,0xDE,0xAE,
0xAC,0xA3,0xA5,0xB7,0xA9,0xA7,0xB6,0xBC,0xBD,0xBE,0xDD,0xA8,0xAF,0x5D,0xB4,0xD7,
0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xAD,0xF4,0xF6,0xF2,0xF3,0xF5,
0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xB9,0xFB,0xFC,0xF9,0xFA,0xFF,
0x5C,0xF7,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xB2,0xD4,0xD6,0xD2,0xD3,0xD5,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xB3,0xDB,0xDC,0xD9,0xDA,0x9F
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* (Confusingly named) Index is EBCDIC 1047 I8 byte; value is
 * EBCDIC 1047 UTF-EBCDIC equivalent */
EXTCONST U8 PL_utf2e[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x15,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x3F,0x27,0x1C,0x1D,0x1E,0x1F,
0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAD,0xE0,0xBD,0x5F,0x6D,
0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,0xA1,0x07,
0x20,0x21,0x22,0x23,0x24,0x25,0x06,0x17,0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B,
0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08,0x38,0x39,0x3A,0x3B,0x04,0x14,0x3E,0xFF,
0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x51,0x52,0x53,0x54,0x55,0x56,
0x57,0x58,0x59,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x70,0x71,0x72,0x73,
0x74,0x75,0x76,0x77,0x78,0x80,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x9A,0x9B,0x9C,
0x9D,0x9E,0x9F,0xA0,0xAA,0xAB,0xAC,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,
0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBF,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xDA,0xDB,
0xDC,0xDD,0xDE,0xDF,0xE1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xFA,0xFB,0xFC,0xFD,0xFE
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* (Confusingly named) Index is EBCDIC 1047 UTF-EBCDIC byte; value is
 * EBCDIC 1047 I8 equivalent */
EXTCONST U8 PL_e2utf[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F,0x97,0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x9D,0x0A,0x08,0x87,0x18,0x19,0x92,0x8F,0x1C,0x1D,0x1E,0x1F,
0x80,0x81,0x82,0x83,0x84,0x85,0x17,0x1B,0x88,0x89,0x8A,0x8B,0x8C,0x05,0x06,0x07,
0x90,0x91,0x16,0x93,0x94,0x95,0x96,0x04,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,0x1A,
0x20,0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0x2E,0x3C,0x28,0x2B,0x7C,
0x26,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0x21,0x24,0x2A,0x29,0x3B,0x5E,
0x2D,0x2F,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0x2C,0x25,0x5F,0x3E,0x3F,
0xBC,0xBD,0xBE,0xBF,0xC0,0xC1,0xC2,0xC3,0xC4,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
0xC5,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,
0xCC,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
0xD3,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xD4,0xD5,0xD6,0x5B,0xD7,0xD8,
0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0x5D,0xE6,0xE7,
0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,
0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,
0x5C,0xF4,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xFB,0xFC,0xFD,0xFE,0xFF,0x9F
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 1047 UTF-EBCDIC byte; value is UTF8SKIP for start bytes;
 * 1 for continuation.  Adapted from the shadow flags table in tr16.  The
 * entries marked 9 in tr16 are continuation bytes and are marked as length 1
 * here so that we can recover. */
EXTCONST U8 PL_utf8skip[] = {
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   2,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   1,   2,   2,
   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   1,   3,   3,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3,   3,   3,   3,   3,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3,   4,   4,   4,   4,
   1,   4,   1,   1,   1,   1,   1,   1,   1,   1,   4,   4,   4,   5,   5,   5,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   5,   6,   6,   7,  14,   1
};

/* Index is EBCDIC 1047 code point; value is its lowercase equivalent */
EXTCONST U8 PL_latin1_lc[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x70,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x70,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9C,0x9F,
0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x8C,0xAD,0x8E,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0x8D,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xD0,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,
0xE0,0xE1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xEA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xDB,0xDC,0xDD,0xDE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 1047 code point; value is its uppercase equivalent.
 * The 'mod' in the name means that codepoints whose uppercase is above 255 or
 * longer than 1 character map to LATIN SMALL LETTER Y WITH DIARESIS */
EXTCONST U8 PL_mod_latin1_uc[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0xDF,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x80,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x80,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0x8A,0x8B,0xAC,0xBA,0xAE,0x8F,
0x90,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0x9A,0x9B,0x9E,0x9D,0x9E,0x9F,
0xDF,0xA1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xEB,0xEC,0xED,0xEE,0xEF,
0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xFC,0xFD,0xFE,0xDF,
0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 1047 code point; For A-Z, value is a-z; for a-z, value
 * is A-Z; all other code points map to themselves */
EXTCONST U8 PL_fold[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x80,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
0x90,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
0xA0,0xA1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xD0,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,
0xE0,0xE1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 1047 code point; value is its other fold-pair equivalent
 * (A => a; a => A, etc) in the 0-255 range.  If no such equivalent, value is
 * the code point itself */
EXTCONST U8 PL_fold_latin1[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x80,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x70,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0x8A,0x8B,0xAC,0xBA,0xAE,0x8F,
0x90,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0x9A,0x9B,0x9E,0x9D,0x9C,0x9F,
0xA0,0xA1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAA,0xAB,0x8C,0xAD,0x8E,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0x8D,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0xCA,0xEB,0xEC,0xED,0xEE,0xEF,
0xD0,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xDA,0xFB,0xFC,0xFD,0xFE,0xDF,
0xE0,0xE1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xEA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xDB,0xDC,0xDD,0xDE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

#endif	/* EBCDIC 1047 */

#if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Index is ASCII platform code point; value is EBCDIC 037 equivalent */
EXTCONST U8 PL_a2e[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x25,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x3F,0x27,0x1C,0x1D,0x1E,0x1F,
0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xBA,0xE0,0xBB,0xB0,0x6D,
0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,0xA1,0x07,
0x20,0x21,0x22,0x23,0x24,0x15,0x06,0x17,0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B,
0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08,0x38,0x39,0x3A,0x3B,0x04,0x14,0x3E,0xFF,
0x41,0xAA,0x4A,0xB1,0x9F,0xB2,0x6A,0xB5,0xBD,0xB4,0x9A,0x8A,0x5F,0xCA,0xAF,0xBC,
0x90,0x8F,0xEA,0xFA,0xBE,0xA0,0xB6,0xB3,0x9D,0xDA,0x9B,0x8B,0xB7,0xB8,0xB9,0xAB,
0x64,0x65,0x62,0x66,0x63,0x67,0x9E,0x68,0x74,0x71,0x72,0x73,0x78,0x75,0x76,0x77,
0xAC,0x69,0xED,0xEE,0xEB,0xEF,0xEC,0xBF,0x80,0xFD,0xFE,0xFB,0xFC,0xAD,0xAE,0x59,
0x44,0x45,0x42,0x46,0x43,0x47,0x9C,0x48,0x54,0x51,0x52,0x53,0x58,0x55,0x56,0x57,
0x8C,0x49,0xCD,0xCE,0xCB,0xCF,0xCC,0xE1,0x70,0xDD,0xDE,0xDB,0xDC,0x8D,0x8E,0xDF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 037 code point; value is ASCII platform equivalent */
EXTCONST U8 PL_e2a[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F,0x97,0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x9D,0x85,0x08,0x87,0x18,0x19,0x92,0x8F,0x1C,0x1D,0x1E,0x1F,
0x80,0x81,0x82,0x83,0x84,0x0A,0x17,0x1B,0x88,0x89,0x8A,0x8B,0x8C,0x05,0x06,0x07,
0x90,0x91,0x16,0x93,0x94,0x95,0x96,0x04,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,0x1A,
0x20,0xA0,0xE2,0xE4,0xE0,0xE1,0xE3,0xE5,0xE7,0xF1,0xA2,0x2E,0x3C,0x28,0x2B,0x7C,
0x26,0xE9,0xEA,0xEB,0xE8,0xED,0xEE,0xEF,0xEC,0xDF,0x21,0x24,0x2A,0x29,0x3B,0xAC,
0x2D,0x2F,0xC2,0xC4,0xC0,0xC1,0xC3,0xC5,0xC7,0xD1,0xA6,0x2C,0x25,0x5F,0x3E,0x3F,
0xF8,0xC9,0xCA,0xCB,0xC8,0xCD,0xCE,0xCF,0xCC,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
0xD8,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xAB,0xBB,0xF0,0xFD,0xFE,0xB1,
0xB0,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xAA,0xBA,0xE6,0xB8,0xC6,0xA4,
0xB5,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xA1,0xBF,0xD0,0xDD,0xDE,0xAE,
0x5E,0xA3,0xA5,0xB7,0xA9,0xA7,0xB6,0xBC,0xBD,0xBE,0x5B,0x5D,0xAF,0xA8,0xB4,0xD7,
0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xAD,0xF4,0xF6,0xF2,0xF3,0xF5,
0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xB9,0xFB,0xFC,0xF9,0xFA,0xFF,
0x5C,0xF7,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xB2,0xD4,0xD6,0xD2,0xD3,0xD5,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xB3,0xDB,0xDC,0xD9,0xDA,0x9F
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* (Confusingly named) Index is EBCDIC 037 I8 byte; value is
 * EBCDIC 037 UTF-EBCDIC equivalent */
EXTCONST U8 PL_utf2e[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x25,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x3F,0x27,0x1C,0x1D,0x1E,0x1F,
0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xBA,0xE0,0xBB,0xB0,0x6D,
0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,0xA1,0x07,
0x20,0x21,0x22,0x23,0x24,0x15,0x06,0x17,0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B,
0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08,0x38,0x39,0x3A,0x3B,0x04,0x14,0x3E,0xFF,
0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x51,0x52,0x53,0x54,0x55,0x56,
0x57,0x58,0x59,0x5F,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x70,0x71,0x72,
0x73,0x74,0x75,0x76,0x77,0x78,0x80,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x9A,0x9B,
0x9C,0x9D,0x9E,0x9F,0xA0,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB1,0xB2,0xB3,0xB4,0xB5,
0xB6,0xB7,0xB8,0xB9,0xBC,0xBD,0xBE,0xBF,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xDA,0xDB,
0xDC,0xDD,0xDE,0xDF,0xE1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xFA,0xFB,0xFC,0xFD,0xFE
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* (Confusingly named) Index is EBCDIC 037 UTF-EBCDIC byte; value is
 * EBCDIC 037 I8 equivalent */
EXTCONST U8 PL_e2utf[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F,0x97,0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x9D,0x85,0x08,0x87,0x18,0x19,0x92,0x8F,0x1C,0x1D,0x1E,0x1F,
0x80,0x81,0x82,0x83,0x84,0x0A,0x17,0x1B,0x88,0x89,0x8A,0x8B,0x8C,0x05,0x06,0x07,
0x90,0x91,0x16,0x93,0x94,0x95,0x96,0x04,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,0x1A,
0x20,0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0x2E,0x3C,0x28,0x2B,0x7C,
0x26,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0x21,0x24,0x2A,0x29,0x3B,0xB3,
0x2D,0x2F,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0x2C,0x25,0x5F,0x3E,0x3F,
0xBD,0xBE,0xBF,0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
0xC6,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,
0xCD,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,
0xD4,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,
0x5E,0xDB,0xDC,0xDD,0xDE,0xDF,0xE0,0xE1,0xE2,0xE3,0x5B,0x5D,0xE4,0xE5,0xE6,0xE7,
0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,
0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,
0x5C,0xF4,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xFB,0xFC,0xFD,0xFE,0xFF,0x9F
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 037 UTF-EBCDIC byte; value is UTF8SKIP for start bytes;
 * 1 for continuation.  Adapted from the shadow flags table in tr16.  The
 * entries marked 9 in tr16 are continuation bytes and are marked as length 1
 * here so that we can recover. */
EXTCONST U8 PL_utf8skip[] = {
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,
   1,   2,   2,   2,   2,   2,   3,   3,   3,   3,   1,   1,   3,   3,   3,   3,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3,   3,   3,   3,   3,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3,   4,   4,   4,   4,
   1,   4,   1,   1,   1,   1,   1,   1,   1,   1,   4,   4,   4,   5,   5,   5,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   5,   6,   6,   7,  14,   1
};

/* Index is EBCDIC 037 code point; value is its lowercase equivalent */
EXTCONST U8 PL_latin1_lc[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x70,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x70,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9C,0x9F,
0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x8C,0x8D,0x8E,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xD0,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,
0xE0,0xE1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xEA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xDB,0xDC,0xDD,0xDE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 037 code point; value is its uppercase equivalent.
 * The 'mod' in the name means that codepoints whose uppercase is above 255 or
 * longer than 1 character map to LATIN SMALL LETTER Y WITH DIARESIS */
EXTCONST U8 PL_mod_latin1_uc[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0xDF,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x80,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x80,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0x8A,0x8B,0xAC,0xAD,0xAE,0x8F,
0x90,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0x9A,0x9B,0x9E,0x9D,0x9E,0x9F,
0xDF,0xA1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xEB,0xEC,0xED,0xEE,0xEF,
0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xFC,0xFD,0xFE,0xDF,
0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 037 code point; For A-Z, value is a-z; for a-z, value
 * is A-Z; all other code points map to themselves */
EXTCONST U8 PL_fold[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x80,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
0x90,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
0xA0,0xA1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xD0,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,
0xE0,0xE1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

/* Index is EBCDIC 037 code point; value is its other fold-pair equivalent
 * (A => a; a => A, etc) in the 0-255 range.  If no such equivalent, value is
 * the code point itself */
EXTCONST U8 PL_fold_latin1[] = {
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x80,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x70,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0x8A,0x8B,0xAC,0xAD,0xAE,0x8F,
0x90,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0x9A,0x9B,0x9E,0x9D,0x9C,0x9F,
0xA0,0xA1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAA,0xAB,0x8C,0x8D,0x8E,0xAF,
0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xC0,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0xCA,0xEB,0xEC,0xED,0xEE,0xEF,
0xD0,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xDA,0xFB,0xFC,0xFD,0xFE,0xDF,
0xE0,0xE1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xEA,0xCB,0xCC,0xCD,0xCE,0xCF,
0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xDB,0xDC,0xDD,0xDE,0xFF
/*_0   _1   _2   _3   _4   _5   _6   _7   _8   _9   _A   _B   _C   _D   _E  _F*/
};

#endif	/* EBCDIC 037 */

#endif /* H_EBCDIC_TABLES */

/* ex: set ro: */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /* -*- buffer-read-only: t -*-
 *
 *    embed.h
 *
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/embed.pl from data in embed.fnc,
 * regen/embed.pl, regen/opcodes, intrpvar.h and perlvars.h.
 * Any changes made here will be lost!
 *
 * Edit those files and run 'make regen_headers' to effect changes.
 */

/* (Doing namespace management portably in C is really gross.) */

/* By defining PERL_NO_SHORT_NAMES (not done by default) the short forms
 * (like warn instead of Perl_warn) for the API are not defined.
 * Not defining the short forms is a good thing for cleaner embedding. */

#ifndef PERL_NO_SHORT_NAMES

/* Hide global symbols */

#define Gv_AMupdate(a,b)	Perl_Gv_AMupdate(aTHX_ a,b)
#define _is_in_locale_category(a,b)	Perl__is_in_locale_category(aTHX_ a,b)
#define _is_uni_FOO(a,b)	Perl__is_uni_FOO(aTHX_ a,b)
#define _is_uni_perl_idcont(a)	Perl__is_uni_perl_idcont(aTHX_ a)
#define _is_uni_perl_idstart(a)	Perl__is_uni_perl_idstart(aTHX_ a)
#define _is_utf8_FOO(a,b)	Perl__is_utf8_FOO(aTHX_ a,b)
#define _is_utf8_idcont(a)	Perl__is_utf8_idcont(aTHX_ a)
#define _is_utf8_idstart(a)	Perl__is_utf8_idstart(aTHX_ a)
#define _is_utf8_mark(a)	Perl__is_utf8_mark(aTHX_ a)
#define _is_utf8_perl_idcont(a)	Perl__is_utf8_perl_idcont(aTHX_ a)
#define _is_utf8_perl_idstart(a)	Perl__is_utf8_perl_idstart(aTHX_ a)
#define _is_utf8_xidcont(a)	Perl__is_utf8_xidcont(aTHX_ a)
#define _is_utf8_xidstart(a)	Perl__is_utf8_xidstart(aTHX_ a)
#define _to_uni_fold_flags(a,b,c,d)	Perl__to_uni_fold_flags(aTHX_ a,b,c,d)
#define _to_utf8_fold_flags(a,b,c,d)	Perl__to_utf8_fold_flags(aTHX_ a,b,c,d)
#define _to_utf8_lower_flags(a,b,c,d)	Perl__to_utf8_lower_flags(aTHX_ a,b,c,d)
#define _to_utf8_title_flags(a,b,c,d)	Perl__to_utf8_title_flags(aTHX_ a,b,c,d)
#define _to_utf8_upper_flags(a,b,c,d)	Perl__to_utf8_upper_flags(aTHX_ a,b,c,d)
#define amagic_call(a,b,c,d)	Perl_amagic_call(aTHX_ a,b,c,d)
#define amagic_deref_call(a,b)	Perl_amagic_deref_call(aTHX_ a,b)
#define apply_attrs_string(a,b,c,d)	Perl_apply_attrs_string(aTHX_ a,b,c,d)
#define atfork_lock		Perl_atfork_lock
#define atfork_unlock		Perl_atfork_unlock
#define av_clear(a)		Perl_av_clear(aTHX_ a)
#define av_delete(a,b,c)	Perl_av_delete(aTHX_ a,b,c)
#define av_exists(a,b)		Perl_av_exists(aTHX_ a,b)
#define av_extend(a,b)		Perl_av_extend(aTHX_ a,b)
#define av_fetch(a,b,c)		Perl_av_fetch(aTHX_ a,b,c)
#define av_fill(a,b)		Perl_av_fill(aTHX_ a,b)
#define av_len(a)		Perl_av_len(aTHX_ a)
#define av_make(a,b)		Perl_av_make(aTHX_ a,b)
#define av_pop(a)		Perl_av_pop(aTHX_ a)
#define av_push(a,b)		Perl_av_push(aTHX_ a,b)
#define av_shift(a)		Perl_av_shift(aTHX_ a)
#define av_store(a,b,c)		Perl_av_store(aTHX_ a,b,c)
#define av_undef(a)		Perl_av_undef(aTHX_ a)
#define av_unshift(a,b)		Perl_av_unshift(aTHX_ a,b)
#define block_end(a,b)		Perl_block_end(aTHX_ a,b)
#define block_gimme()		Perl_block_gimme(aTHX)
#define block_start(a)		Perl_block_start(aTHX_ a)
#define bytes_cmp_utf8(a,b,c,d)	Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
#define bytes_from_utf8(a,b,c)	Perl_bytes_from_utf8(aTHX_ a,b,c)
#define bytes_to_utf8(a,b)	Perl_bytes_to_utf8(aTHX_ a,b)
#define call_argv(a,b,c)	Perl_call_argv(aTHX_ a,b,c)
#define call_atexit(a,b)	Perl_call_atexit(aTHX_ a,b)
#define call_list(a,b)		Perl_call_list(aTHX_ a,b)
#define call_method(a,b)	Perl_call_method(aTHX_ a,b)
#define call_pv(a,b)		Perl_call_pv(aTHX_ a,b)
#define call_sv(a,b)		Perl_call_sv(aTHX_ a,b)
#define caller_cx(a,b)		Perl_caller_cx(aTHX_ a,b)
#define cast_i32		Perl_cast_i32
#define cast_iv			Perl_cast_iv
#define cast_ulong		Perl_cast_ulong
#define cast_uv			Perl_cast_uv
#define ck_entersub_args_list(a)	Perl_ck_entersub_args_list(aTHX_ a)
#define ck_entersub_args_proto(a,b,c)	Perl_ck_entersub_args_proto(aTHX_ a,b,c)
#define ck_entersub_args_proto_or_list(a,b,c)	Perl_ck_entersub_args_proto_or_list(aTHX_ a,b,c)
#ifndef PERL_IMPLICIT_CONTEXT
#define ck_warner		Perl_ck_warner
#define ck_warner_d		Perl_ck_warner_d
#endif
#define clear_defarray(a,b)	Perl_clear_defarray(aTHX_ a,b)
#ifndef PERL_IMPLICIT_CONTEXT
#define croak			Perl_croak
#endif
#define croak_memory_wrap	S_croak_memory_wrap
#define croak_no_modify		Perl_croak_no_modify
#define croak_sv(a)		Perl_croak_sv(aTHX_ a)
#define croak_xs_usage		Perl_croak_xs_usage
#define custom_op_desc(a)	Perl_custom_op_desc(aTHX_ a)
#define custom_op_name(a)	Perl_custom_op_name(aTHX_ a)
#define cv_clone(a)		Perl_cv_clone(aTHX_ a)
#define cv_const_sv		Perl_cv_const_sv
#define cv_get_call_checker(a,b,c)	Perl_cv_get_call_checker(aTHX_ a,b,c)
#define cv_name(a,b,c)		Perl_cv_name(aTHX_ a,b,c)
#define cv_set_call_checker(a,b,c)	Perl_cv_set_call_checker(aTHX_ a,b,c)
#define cv_set_call_checker_flags(a,b,c,d)	Perl_cv_set_call_checker_flags(aTHX_ a,b,c,d)
#define cv_undef(a)		Perl_cv_undef(aTHX_ a)
#define cx_dump(a)		Perl_cx_dump(aTHX_ a)
#define cxinc()			Perl_cxinc(aTHX)
#ifndef PERL_IMPLICIT_CONTEXT
#define deb			Perl_deb
#endif
#define debop(a)		Perl_debop(aTHX_ a)
#define debprofdump()		Perl_debprofdump(aTHX)
#define debstack()		Perl_debstack(aTHX)
#define debstackptrs()		Perl_debstackptrs(aTHX)
#define delimcpy		Perl_delimcpy
#define despatch_signals()	Perl_despatch_signals(aTHX)
#ifndef PERL_IMPLICIT_CONTEXT
#define die			Perl_die
#endif
#define die_sv(a)		Perl_die_sv(aTHX_ a)
#define do_binmode(a,b,c)	Perl_do_binmode(aTHX_ a,b,c)
#define do_close(a,b)		Perl_do_close(aTHX_ a,b)
#define do_gv_dump(a,b,c,d)	Perl_do_gv_dump(aTHX_ a,b,c,d)
#define do_gvgv_dump(a,b,c,d)	Perl_do_gvgv_dump(aTHX_ a,b,c,d)
#define do_hv_dump(a,b,c,d)	Perl_do_hv_dump(aTHX_ a,b,c,d)
#define do_join(a,b,c,d)	Perl_do_join(aTHX_ a,b,c,d)
#define do_magic_dump(a,b,c,d,e,f,g)	Perl_do_magic_dump(aTHX_ a,b,c,d,e,f,g)
#define do_op_dump(a,b,c)	Perl_do_op_dump(aTHX_ a,b,c)
#define do_open9(a,b,c,d,e,f,g,h,i)	Perl_do_open9(aTHX_ a,b,c,d,e,f,g,h,i)
#define do_openn(a,b,c,d,e,f,g,h,i)	Perl_do_openn(aTHX_ a,b,c,d,e,f,g,h,i)
#define do_pmop_dump(a,b,c)	Perl_do_pmop_dump(aTHX_ a,b,c)
#define do_sprintf(a,b,c)	Perl_do_sprintf(aTHX_ a,b,c)
#define do_sv_dump(a,b,c,d,e,f,g)	Perl_do_sv_dump(aTHX_ a,b,c,d,e,f,g)
#define doing_taint		Perl_doing_taint
#define doref(a,b,c)		Perl_doref(aTHX_ a,b,c)
#define dounwind(a)		Perl_dounwind(aTHX_ a)
#define dowantarray()		Perl_dowantarray(aTHX)
#define dump_all()		Perl_dump_all(aTHX)
#define dump_eval()		Perl_dump_eval(aTHX)
#define dump_form(a)		Perl_dump_form(aTHX_ a)
#ifndef PERL_IMPLICIT_CONTEXT
#define dump_indent		Perl_dump_indent
#endif
#define dump_packsubs(a)	Perl_dump_packsubs(aTHX_ a)
#define dump_sub(a)		Perl_dump_sub(aTHX_ a)
#define dump_vindent(a,b,c,d)	Perl_dump_vindent(aTHX_ a,b,c,d)
#define eval_pv(a,b)		Perl_eval_pv(aTHX_ a,b)
#define eval_sv(a,b)		Perl_eval_sv(aTHX_ a,b)
#define fbm_compile(a,b)	Perl_fbm_compile(aTHX_ a,b)
#define fbm_instr(a,b,c,d)	Perl_fbm_instr(aTHX_ a,b,c,d)
#define filter_add(a,b)		Perl_filter_add(aTHX_ a,b)
#define filter_del(a)		Perl_filter_del(aTHX_ a)
#define filter_read(a,b,c)	Perl_filter_read(aTHX_ a,b,c)
#define find_runcv(a)		Perl_find_runcv(aTHX_ a)
#define find_rundefsv()		Perl_find_rundefsv(aTHX)
#define find_rundefsvoffset()	Perl_find_rundefsvoffset(aTHX)
#define foldEQ			Perl_foldEQ
#define foldEQ_latin1		Perl_foldEQ_latin1
#define foldEQ_locale		Perl_foldEQ_locale
#define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)	Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
#ifndef PERL_IMPLICIT_CONTEXT
#define form			Perl_form
#endif
#define free_tmps()		Perl_free_tmps(aTHX)
#define get_av(a,b)		Perl_get_av(aTHX_ a,b)
#define get_context		Perl_get_context
#define get_cv(a,b)		Perl_get_cv(aTHX_ a,b)
#define get_cvn_flags(a,b,c)	Perl_get_cvn_flags(aTHX_ a,b,c)
#define get_hv(a,b)		Perl_get_hv(aTHX_ a,b)
#define get_op_descs()		Perl_get_op_descs(aTHX)
#define get_op_names()		Perl_get_op_names(aTHX)
#define get_ppaddr()		Perl_get_ppaddr(aTHX)
#define get_sv(a,b)		Perl_get_sv(aTHX_ a,b)
#define get_vtbl(a)		Perl_get_vtbl(aTHX_ a)
#define getcwd_sv(a)		Perl_getcwd_sv(aTHX_ a)
#define gp_free(a)		Perl_gp_free(aTHX_ a)
#define gp_ref(a)		Perl_gp_ref(aTHX_ a)
#define grok_bin(a,b,c,d)	Perl_grok_bin(aTHX_ a,b,c,d)
#define grok_hex(a,b,c,d)	Perl_grok_hex(aTHX_ a,b,c,d)
#define grok_infnan(a,b)	Perl_grok_infnan(aTHX_ a,b)
#define grok_number(a,b,c)	Perl_grok_number(aTHX_ a,b,c)
#define grok_number_flags(a,b,c,d)	Perl_grok_number_flags(aTHX_ a,b,c,d)
#define grok_numeric_radix(a,b)	Perl_grok_numeric_radix(aTHX_ a,b)
#define grok_oct(a,b,c,d)	Perl_grok_oct(aTHX_ a,b,c,d)
#define gv_add_by_type(a,b)	Perl_gv_add_by_type(aTHX_ a,b)
#define gv_autoload_pv(a,b,c)	Perl_gv_autoload_pv(aTHX_ a,b,c)
#define gv_autoload_pvn(a,b,c,d)	Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
#define gv_autoload_sv(a,b,c)	Perl_gv_autoload_sv(aTHX_ a,b,c)
#define gv_check(a)		Perl_gv_check(aTHX_ a)
#define gv_const_sv(a)		Perl_gv_const_sv(aTHX_ a)
#define gv_dump(a)		Perl_gv_dump(aTHX_ a)
#define gv_efullname(a,b)	Perl_gv_efullname(aTHX_ a,b)
#define gv_efullname4(a,b,c,d)	Perl_gv_efullname4(aTHX_ a,b,c,d)
#define gv_fetchfile(a)		Perl_gv_fetchfile(aTHX_ a)
#define gv_fetchfile_flags(a,b,c)	Perl_gv_fetchfile_flags(aTHX_ a,b,c)
#define gv_fetchmeth_pv(a,b,c,d)	Perl_gv_fetchmeth_pv(aTHX_ a,b,c,d)
#define gv_fetchmeth_pv_autoload(a,b,c,d)	Perl_gv_fetchmeth_pv_autoload(aTHX_ a,b,c,d)
#define gv_fetchmeth_pvn(a,b,c,d,e)	Perl_gv_fetchmeth_pvn(aTHX_ a,b,c,d,e)
#define gv_fetchmeth_pvn_autoload(a,b,c,d,e)	Perl_gv_fetchmeth_pvn_autoload(aTHX_ a,b,c,d,e)
#define gv_fetchmeth_sv(a,b,c,d)	Perl_gv_fetchmeth_sv(aTHX_ a,b,c,d)
#define gv_fetchmeth_sv_autoload(a,b,c,d)	Perl_gv_fetchmeth_sv_autoload(aTHX_ a,b,c,d)
#define gv_fetchmethod_autoload(a,b,c)	Perl_gv_fetchmethod_autoload(aTHX_ a,b,c)
#define gv_fetchmethod_pv_flags(a,b,c)	Perl_gv_fetchmethod_pv_flags(aTHX_ a,b,c)
#define gv_fetchmethod_pvn_flags(a,b,c,d)	Perl_gv_fetchmethod_pvn_flags(aTHX_ a,b,c,d)
#define gv_fetchmethod_sv_flags(a,b,c)	Perl_gv_fetchmethod_sv_flags(aTHX_ a,b,c)
#define gv_fetchpv(a,b,c)	Perl_gv_fetchpv(aTHX_ a,b,c)
#define gv_fetchpvn_flags(a,b,c,d)	Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
#define gv_fetchsv(a,b,c)	Perl_gv_fetchsv(aTHX_ a,b,c)
#define gv_fullname(a,b)	Perl_gv_fullname(aTHX_ a,b)
#define gv_fullname4(a,b,c,d)	Perl_gv_fullname4(aTHX_ a,b,c,d)
#define gv_handler(a,b)		Perl_gv_handler(aTHX_ a,b)
#define gv_init_pv(a,b,c,d)	Perl_gv_init_pv(aTHX_ a,b,c,d)
#define gv_init_pvn(a,b,c,d,e)	Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
#define gv_init_sv(a,b,c,d)	Perl_gv_init_sv(aTHX_ a,b,c,d)
#define gv_name_set(a,b,c,d)	Perl_gv_name_set(aTHX_ a,b,c,d)
#define gv_stashpv(a,b)		Perl_gv_stashpv(aTHX_ a,b)
#define gv_stashpvn(a,b,c)	Perl_gv_stashpvn(aTHX_ a,b,c)
#define gv_stashsv(a,b)		Perl_gv_stashsv(aTHX_ a,b)
#define hv_clear(a)		Perl_hv_clear(aTHX_ a)
#define hv_clear_placeholders(a)	Perl_hv_clear_placeholders(aTHX_ a)
#define hv_common(a,b,c,d,e,f,g,h)	Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
#define hv_common_key_len(a,b,c,d,e,f)	Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
#define hv_copy_hints_hv(a)	Perl_hv_copy_hints_hv(aTHX_ a)
#define hv_delayfree_ent(a,b)	Perl_hv_delayfree_ent(aTHX_ a,b)
#define hv_free_ent(a,b)	Perl_hv_free_ent(aTHX_ a,b)
#define hv_iterinit(a)		Perl_hv_iterinit(aTHX_ a)
#define hv_iterkey(a,b)		Perl_hv_iterkey(aTHX_ a,b)
#define hv_iterkeysv(a)		Perl_hv_iterkeysv(aTHX_ a)
#define hv_iternext_flags(a,b)	Perl_hv_iternext_flags(aTHX_ a,b)
#define hv_iternextsv(a,b,c)	Perl_hv_iternextsv(aTHX_ a,b,c)
#define hv_iterval(a,b)		Perl_hv_iterval(aTHX_ a,b)
#define hv_ksplit(a,b)		Perl_hv_ksplit(aTHX_ a,b)
#define hv_name_set(a,b,c,d)	Perl_hv_name_set(aTHX_ a,b,c,d)
#define hv_rand_set(a,b)	Perl_hv_rand_set(aTHX_ a,b)
#define hv_scalar(a)		Perl_hv_scalar(aTHX_ a)
#define init_i18nl10n(a)	Perl_init_i18nl10n(aTHX_ a)
#define init_i18nl14n(a)	Perl_init_i18nl14n(aTHX_ a)
#define init_stacks()		Perl_init_stacks(aTHX)
#define init_tm(a)		Perl_init_tm(aTHX_ a)
#define instr			Perl_instr
#define intro_my()		Perl_intro_my(aTHX)
#define isALNUM_lazy(a)		Perl_isALNUM_lazy(aTHX_ a)
#define isIDFIRST_lazy(a)	Perl_isIDFIRST_lazy(aTHX_ a)
#define is_invariant_string	Perl_is_invariant_string
#define is_lvalue_sub()		Perl_is_lvalue_sub(aTHX)
#define is_uni_alnum(a)		Perl_is_uni_alnum(aTHX_ a)
#define is_uni_alnum_lc(a)	Perl_is_uni_alnum_lc(aTHX_ a)
#define is_uni_alnumc(a)	Perl_is_uni_alnumc(aTHX_ a)
#define is_uni_alnumc_lc(a)	Perl_is_uni_alnumc_lc(aTHX_ a)
#define is_uni_alpha(a)		Perl_is_uni_alpha(aTHX_ a)
#define is_uni_alpha_lc(a)	Perl_is_uni_alpha_lc(aTHX_ a)
#define is_uni_ascii(a)		Perl_is_uni_ascii(aTHX_ a)
#define is_uni_ascii_lc(a)	Perl_is_uni_ascii_lc(aTHX_ a)
#define is_uni_blank(a)		Perl_is_uni_blank(aTHX_ a)
#define is_uni_blank_lc(a)	Perl_is_uni_blank_lc(aTHX_ a)
#define is_uni_cntrl(a)		Perl_is_uni_cntrl(aTHX_ a)
#define is_uni_cntrl_lc(a)	Perl_is_uni_cntrl_lc(aTHX_ a)
#define is_uni_digit(a)		Perl_is_uni_digit(aTHX_ a)
#define is_uni_digit_lc(a)	Perl_is_uni_digit_lc(aTHX_ a)
#define is_uni_graph(a)		Perl_is_uni_graph(aTHX_ a)
#define is_uni_graph_lc(a)	Perl_is_uni_graph_lc(aTHX_ a)
#define is_uni_idfirst(a)	Perl_is_uni_idfirst(aTHX_ a)
#define is_uni_idfirst_lc(a)	Perl_is_uni_idfirst_lc(aTHX_ a)
#define is_uni_lower(a)		Perl_is_uni_lower(aTHX_ a)
#define is_uni_lower_lc(a)	Perl_is_uni_lower_lc(aTHX_ a)
#define is_uni_print(a)		Perl_is_uni_print(aTHX_ a)
#define is_uni_print_lc(a)	Perl_is_uni_print_lc(aTHX_ a)
#define is_uni_punct(a)		Perl_is_uni_punct(aTHX_ a)
#define is_uni_punct_lc(a)	Perl_is_uni_punct_lc(aTHX_ a)
#define is_uni_space(a)		Perl_is_uni_space(aTHX_ a)
#define is_uni_space_lc(a)	Perl_is_uni_space_lc(aTHX_ a)
#define is_uni_upper(a)		Perl_is_uni_upper(aTHX_ a)
#define is_uni_upper_lc(a)	Perl_is_uni_upper_lc(aTHX_ a)
#define is_uni_xdigit(a)	Perl_is_uni_xdigit(aTHX_ a)
#define is_uni_xdigit_lc(a)	Perl_is_uni_xdigit_lc(aTHX_ a)
#define is_utf8_alnum(a)	Perl_is_utf8_alnum(aTHX_ a)
#define is_utf8_alnumc(a)	Perl_is_utf8_alnumc(aTHX_ a)
#define is_utf8_alpha(a)	Perl_is_utf8_alpha(aTHX_ a)
#define is_utf8_ascii(a)	Perl_is_utf8_ascii(aTHX_ a)
#define is_utf8_blank(a)	Perl_is_utf8_blank(aTHX_ a)
#define is_utf8_char		Perl_is_utf8_char
#define is_utf8_cntrl(a)	Perl_is_utf8_cntrl(aTHX_ a)
#define is_utf8_digit(a)	Perl_is_utf8_digit(aTHX_ a)
#define is_utf8_graph(a)	Perl_is_utf8_graph(aTHX_ a)
#define is_utf8_idcont(a)	Perl_is_utf8_idcont(aTHX_ a)
#define is_utf8_idfirst(a)	Perl_is_utf8_idfirst(aTHX_ a)
#define is_utf8_lower(a)	Perl_is_utf8_lower(aTHX_ a)
#define is_utf8_mark(a)		Perl_is_utf8_mark(aTHX_ a)
#define is_utf8_perl_space(a)	Perl_is_utf8_perl_space(aTHX_ a)
#define is_utf8_perl_word(a)	Perl_is_utf8_perl_word(aTHX_ a)
#define is_utf8_posix_digit(a)	Perl_is_utf8_posix_digit(aTHX_ a)
#define is_utf8_print(a)	Perl_is_utf8_print(aTHX_ a)
#define is_utf8_punct(a)	Perl_is_utf8_punct(aTHX_ a)
#define is_utf8_space(a)	Perl_is_utf8_space(aTHX_ a)
#define is_utf8_string		Perl_is_utf8_string
#define is_utf8_string_loclen	Perl_is_utf8_string_loclen
#define is_utf8_upper(a)	Perl_is_utf8_upper(aTHX_ a)
#define is_utf8_xdigit(a)	Perl_is_utf8_xdigit(aTHX_ a)
#define is_utf8_xidcont(a)	Perl_is_utf8_xidcont(aTHX_ a)
#define is_utf8_xidfirst(a)	Perl_is_utf8_xidfirst(aTHX_ a)
#define isinfnan		Perl_isinfnan
#define leave_adjust_stacks(a,b,c,d)	Perl_leave_adjust_stacks(aTHX_ a,b,c,d)
#define leave_scope(a)		Perl_leave_scope(aTHX_ a)
#define lex_bufutf8()		Perl_lex_bufutf8(aTHX)
#define lex_discard_to(a)	Perl_lex_discard_to(aTHX_ a)
#define lex_grow_linestr(a)	Perl_lex_grow_linestr(aTHX_ a)
#define lex_next_chunk(a)	Perl_lex_next_chunk(aTHX_ a)
#define lex_peek_unichar(a)	Perl_lex_peek_unichar(aTHX_ a)
#define lex_read_space(a)	Perl_lex_read_space(aTHX_ a)
#define lex_read_to(a)		Perl_lex_read_to(aTHX_ a)
#define lex_read_unichar(a)	Perl_lex_read_unichar(aTHX_ a)
#define lex_start(a,b,c)	Perl_lex_start(aTHX_ a,b,c)
#define lex_stuff_pv(a,b)	Perl_lex_stuff_pv(aTHX_ a,b)
#define lex_stuff_pvn(a,b,c)	Perl_lex_stuff_pvn(aTHX_ a,b,c)
#define lex_stuff_sv(a,b)	Perl_lex_stuff_sv(aTHX_ a,b)
#define lex_unstuff(a)		Perl_lex_unstuff(aTHX_ a)
#ifndef PERL_IMPLICIT_CONTEXT
#define load_module		Perl_load_module
#endif
#define looks_like_number(a)	Perl_looks_like_number(aTHX_ a)
#define magic_dump(a)		Perl_magic_dump(aTHX_ a)
#define markstack_grow()	Perl_markstack_grow(aTHX)
#ifndef PERL_IMPLICIT_CONTEXT
#define mess			Perl_mess
#endif
#define mess_sv(a,b)		Perl_mess_sv(aTHX_ a,b)
#define mg_clear(a)		Perl_mg_clear(aTHX_ a)
#define mg_copy(a,b,c,d)	Perl_mg_copy(aTHX_ a,b,c,d)
#define mg_find			Perl_mg_find
#define mg_findext		Perl_mg_findext
#define mg_free(a)		Perl_mg_free(aTHX_ a)
#define mg_free_type(a,b)	Perl_mg_free_type(aTHX_ a,b)
#define mg_get(a)		Perl_mg_get(aTHX_ a)
#define mg_length(a)		Perl_mg_length(aTHX_ a)
#define mg_magical		Perl_mg_magical
#define mg_set(a)		Perl_mg_set(aTHX_ a)
#define mg_size(a)		Perl_mg_size(aTHX_ a)
#define mini_mktime		Perl_mini_mktime
#define moreswitches(a)		Perl_moreswitches(aTHX_ a)
#define mro_get_linear_isa(a)	Perl_mro_get_linear_isa(aTHX_ a)
#define mro_method_changed_in(a)	Perl_mro_method_changed_in(aTHX_ a)
#define my_atof(a)		Perl_my_atof(aTHX_ a)
#define my_atof2(a,b)		Perl_my_atof2(aTHX_ a,b)
#define my_dirfd		Perl_my_dirfd
#define my_exit(a)		Perl_my_exit(aTHX_ a)
#define my_failure_exit()	Perl_my_failure_exit(aTHX)
#define my_fflush_all()		Perl_my_fflush_all(aTHX)
#define my_fork			Perl_my_fork
#define my_popen_list(a,b,c)	Perl_my_popen_list(aTHX_ a,b,c)
#define my_setenv(a,b)		Perl_my_setenv(aTHX_ a,b)
#define my_socketpair		Perl_my_socketpair
#define my_strerror(a)		Perl_my_strerror(aTHX_ a)
#define my_strftime(a,b,c,d,e,f,g,h,i,j)	Perl_my_strftime(aTHX_ a,b,c,d,e,f,g,h,i,j)
#define newANONATTRSUB(a,b,c,d)	Perl_newANONATTRSUB(aTHX_ a,b,c,d)
#define newANONHASH(a)		Perl_newANONHASH(aTHX_ a)
#define newANONLIST(a)		Perl_newANONLIST(aTHX_ a)
#define newANONSUB(a,b,c)	Perl_newANONSUB(aTHX_ a,b,c)
#define newASSIGNOP(a,b,c,d)	Perl_newASSIGNOP(aTHX_ a,b,c,d)
#define newAVREF(a)		Perl_newAVREF(aTHX_ a)
#define newBINOP(a,b,c,d)	Perl_newBINOP(aTHX_ a,b,c,d)
#define newCONDOP(a,b,c,d)	Perl_newCONDOP(aTHX_ a,b,c,d)
#define newCONSTSUB(a,b,c)	Perl_newCONSTSUB(aTHX_ a,b,c)
#define newCONSTSUB_flags(a,b,c,d,e)	Perl_newCONSTSUB_flags(aTHX_ a,b,c,d,e)
#define newCVREF(a,b)		Perl_newCVREF(aTHX_ a,b)
#define newDEFSVOP()		Perl_newDEFSVOP(aTHX)
#define newFORM(a,b,c)		Perl_newFORM(aTHX_ a,b,c)
#define newFOROP(a,b,c,d,e)	Perl_newFOROP(aTHX_ a,b,c,d,e)
#define newGIVENOP(a,b,c)	Perl_newGIVENOP(aTHX_ a,b,c)
#define newGVOP(a,b,c)		Perl_newGVOP(aTHX_ a,b,c)
#define newGVREF(a,b)		Perl_newGVREF(aTHX_ a,b)
#define newGVgen_flags(a,b)	Perl_newGVgen_flags(aTHX_ a,b)
#define newHVREF(a)		Perl_newHVREF(aTHX_ a)
#define newHVhv(a)		Perl_newHVhv(aTHX_ a)
#define newLISTOP(a,b,c,d)	Perl_newLISTOP(aTHX_ a,b,c,d)
#define newLOGOP(a,b,c,d)	Perl_newLOGOP(aTHX_ a,b,c,d)
#define newLOOPEX(a,b)		Perl_newLOOPEX(aTHX_ a,b)
#define newLOOPOP(a,b,c,d)	Perl_newLOOPOP(aTHX_ a,b,c,d)
#define newMETHOP(a,b,c)	Perl_newMETHOP(aTHX_ a,b,c)
#define newMETHOP_named(a,b,c)	Perl_newMETHOP_named(aTHX_ a,b,c)
#define newMYSUB(a,b,c,d,e)	Perl_newMYSUB(aTHX_ a,b,c,d,e)
#define newNULLLIST()		Perl_newNULLLIST(aTHX)
#define newOP(a,b)		Perl_newOP(aTHX_ a,b)
#define newPADNAMELIST		Perl_newPADNAMELIST
#define newPADNAMEouter		Perl_newPADNAMEouter
#define newPADNAMEpvn		Perl_newPADNAMEpvn
#define newPMOP(a,b)		Perl_newPMOP(aTHX_ a,b)
#define newPROG(a)		Perl_newPROG(aTHX_ a)
#define newPVOP(a,b,c)		Perl_newPVOP(aTHX_ a,b,c)
#define newRANGE(a,b,c)		Perl_newRANGE(aTHX_ a,b,c)
#define newRV(a)		Perl_newRV(aTHX_ a)
#define newRV_noinc(a)		Perl_newRV_noinc(aTHX_ a)
#define newSLICEOP(a,b,c)	Perl_newSLICEOP(aTHX_ a,b,c)
#define newSTATEOP(a,b,c)	Perl_newSTATEOP(aTHX_ a,b,c)
#define newSV(a)		Perl_newSV(aTHX_ a)
#define newSVOP(a,b,c)		Perl_newSVOP(aTHX_ a,b,c)
#define newSVREF(a)		Perl_newSVREF(aTHX_ a)
#define newSV_type(a)		Perl_newSV_type(aTHX_ a)
#define newSVhek(a)		Perl_newSVhek(aTHX_ a)
#define newSViv(a)		Perl_newSViv(aTHX_ a)
#define newSVnv(a)		Perl_newSVnv(aTHX_ a)
#define newSVpv(a,b)		Perl_newSVpv(aTHX_ a,b)
#define newSVpv_share(a,b)	Perl_newSVpv_share(aTHX_ a,b)
#ifndef PERL_IMPLICIT_CONTEXT
#define newSVpvf		Perl_newSVpvf
#endif
#define newSVpvn(a,b)		Perl_newSVpvn(aTHX_ a,b)
#define newSVpvn_flags(a,b,c)	Perl_newSVpvn_flags(aTHX_ a,b,c)
#define newSVpvn_share(a,b,c)	Perl_newSVpvn_share(aTHX_ a,b,c)
#define newSVrv(a,b)		Perl_newSVrv(aTHX_ a,b)
#define newSVsv(a)		Perl_newSVsv(aTHX_ a)
#define newSVuv(a)		Perl_newSVuv(aTHX_ a)
#define newUNOP(a,b,c)		Perl_newUNOP(aTHX_ a,b,c)
#define newUNOP_AUX(a,b,c,d)	Perl_newUNOP_AUX(aTHX_ a,b,c,d)
#define newWHENOP(a,b)		Perl_newWHENOP(aTHX_ a,b)
#define newWHILEOP(a,b,c,d,e,f,g)	Perl_newWHILEOP(aTHX_ a,b,c,d,e,f,g)
#define newXS(a,b,c)		Perl_newXS(aTHX_ a,b,c)
#define newXS_flags(a,b,c,d,e)	Perl_newXS_flags(aTHX_ a,b,c,d,e)
#define new_collate(a)		Perl_new_collate(aTHX_ a)
#define new_ctype(a)		Perl_new_ctype(aTHX_ a)
#define new_numeric(a)		Perl_new_numeric(aTHX_ a)
#define new_stackinfo(a,b)	Perl_new_stackinfo(aTHX_ a,b)
#define new_version(a)		Perl_new_version(aTHX_ a)
#define ninstr			Perl_ninstr
#define nothreadhook()		Perl_nothreadhook(aTHX)
#define op_append_elem(a,b,c)	Perl_op_append_elem(aTHX_ a,b,c)
#define op_append_list(a,b,c)	Perl_op_append_list(aTHX_ a,b,c)
#define op_contextualize(a,b)	Perl_op_contextualize(aTHX_ a,b)
#define op_convert_list(a,b,c)	Perl_op_convert_list(aTHX_ a,b,c)
#define op_dump(a)		Perl_op_dump(aTHX_ a)
#define op_free(a)		Perl_op_free(aTHX_ a)
#define op_linklist(a)		Perl_op_linklist(aTHX_ a)
#define op_null(a)		Perl_op_null(aTHX_ a)
#define op_prepend_elem(a,b,c)	Perl_op_prepend_elem(aTHX_ a,b,c)
#define op_refcnt_lock()	Perl_op_refcnt_lock(aTHX)
#define op_refcnt_unlock()	Perl_op_refcnt_unlock(aTHX)
#define op_scope(a)		Perl_op_scope(aTHX_ a)
#define op_sibling_splice	Perl_op_sibling_splice
#define pack_cat(a,b,c,d,e,f,g)	Perl_pack_cat(aTHX_ a,b,c,d,e,f,g)
#define packlist(a,b,c,d,e)	Perl_packlist(aTHX_ a,b,c,d,e)
#define pad_add_anon(a,b)	Perl_pad_add_anon(aTHX_ a,b)
#define pad_add_name_pv(a,b,c,d)	Perl_pad_add_name_pv(aTHX_ a,b,c,d)
#define pad_add_name_pvn(a,b,c,d,e)	Perl_pad_add_name_pvn(aTHX_ a,b,c,d,e)
#define pad_add_name_sv(a,b,c,d)	Perl_pad_add_name_sv(aTHX_ a,b,c,d)
#define pad_alloc(a,b)		Perl_pad_alloc(aTHX_ a,b)
#define pad_compname_type(a)	Perl_pad_compname_type(aTHX_ a)
#define pad_findmy_pv(a,b)	Perl_pad_findmy_pv(aTHX_ a,b)
#define pad_findmy_pvn(a,b,c)	Perl_pad_findmy_pvn(aTHX_ a,b,c)
#define pad_findmy_sv(a,b)	Perl_pad_findmy_sv(aTHX_ a,b)
#define pad_new(a)		Perl_pad_new(aTHX_ a)
#define pad_tidy(a)		Perl_pad_tidy(aTHX_ a)
#define padnamelist_fetch	Perl_padnamelist_fetch
#define padnamelist_store(a,b,c)	Perl_padnamelist_store(aTHX_ a,b,c)
#define parse_arithexpr(a)	Perl_parse_arithexpr(aTHX_ a)
#define parse_barestmt(a)	Perl_parse_barestmt(aTHX_ a)
#define parse_block(a)		Perl_parse_block(aTHX_ a)
#define parse_fullexpr(a)	Perl_parse_fullexpr(aTHX_ a)
#define parse_fullstmt(a)	Perl_parse_fullstmt(aTHX_ a)
#define parse_label(a)		Perl_parse_label(aTHX_ a)
#define parse_listexpr(a)	Perl_parse_listexpr(aTHX_ a)
#define parse_stmtseq(a)	Perl_parse_stmtseq(aTHX_ a)
#define parse_termexpr(a)	Perl_parse_termexpr(aTHX_ a)
#define pmop_dump(a)		Perl_pmop_dump(aTHX_ a)
#define pop_scope()		Perl_pop_scope(aTHX)
#define pregcomp(a,b)		Perl_pregcomp(aTHX_ a,b)
#define pregexec(a,b,c,d,e,f,g)	Perl_pregexec(aTHX_ a,b,c,d,e,f,g)
#define pregfree(a)		Perl_pregfree(aTHX_ a)
#define pregfree2(a)		Perl_pregfree2(aTHX_ a)
#define prescan_version(a,b,c,d,e,f,g)	Perl_prescan_version(aTHX_ a,b,c,d,e,f,g)
#define ptr_table_clear(a)	Perl_ptr_table_clear(aTHX_ a)
#define ptr_table_fetch(a,b)	Perl_ptr_table_fetch(aTHX_ a,b)
#define ptr_table_free(a)	Perl_ptr_table_free(aTHX_ a)
#define ptr_table_new()		Perl_ptr_table_new(aTHX)
#define ptr_table_split(a)	Perl_ptr_table_split(aTHX_ a)
#define ptr_table_store(a,b,c)	Perl_ptr_table_store(aTHX_ a,b,c)
#define push_scope()		Perl_push_scope(aTHX)
#define pv_display(a,b,c,d,e)	Perl_pv_display(aTHX_ a,b,c,d,e)
#define pv_escape(a,b,c,d,e,f)	Perl_pv_escape(aTHX_ a,b,c,d,e,f)
#define pv_pretty(a,b,c,d,e,f,g)	Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
#define pv_uni_display(a,b,c,d,e)	Perl_pv_uni_display(aTHX_ a,b,c,d,e)
#define re_compile(a,b)		Perl_re_compile(aTHX_ a,b)
#define re_intuit_start(a,b,c,d,e,f,g)	Perl_re_intuit_start(aTHX_ a,b,c,d,e,f,g)
#define re_intuit_string(a)	Perl_re_intuit_string(aTHX_ a)
#define reentrant_free()	Perl_reentrant_free(aTHX)
#define reentrant_init()	Perl_reentrant_init(aTHX)
#define reentrant_retry		Perl_reentrant_retry
#define reentrant_size()	Perl_reentrant_size(aTHX)
#define reg_named_buff_all(a,b)	Perl_reg_named_buff_all(aTHX_ a,b)
#define reg_named_buff_exists(a,b,c)	Perl_reg_named_buff_exists(aTHX_ a,b,c)
#define reg_named_buff_fetch(a,b,c)	Perl_reg_named_buff_fetch(aTHX_ a,b,c)
#define reg_named_buff_firstkey(a,b)	Perl_reg_named_buff_firstkey(aTHX_ a,b)
#define reg_named_buff_nextkey(a,b)	Perl_reg_named_buff_nextkey(aTHX_ a,b)
#define reg_named_buff_scalar(a,b)	Perl_reg_named_buff_scalar(aTHX_ a,b)
#define regclass_swash(a,b,c,d,e)	Perl_regclass_swash(aTHX_ a,b,c,d,e)
#define regdump(a)		Perl_regdump(aTHX_ a)
#define regexec_flags(a,b,c,d,e,f,g,h)	Perl_regexec_flags(aTHX_ a,b,c,d,e,f,g,h)
#define regfree_internal(a)	Perl_regfree_internal(aTHX_ a)
#define reginitcolors()		Perl_reginitcolors(aTHX)
#define regnext(a)		Perl_regnext(aTHX_ a)
#define repeatcpy		Perl_repeatcpy
#define require_pv(a)		Perl_require_pv(aTHX_ a)
#define rninstr			Perl_rninstr
#define rsignal(a,b)		Perl_rsignal(aTHX_ a,b)
#define rsignal_state(a)	Perl_rsignal_state(aTHX_ a)
#define runops_debug()		Perl_runops_debug(aTHX)
#define runops_standard()	Perl_runops_standard(aTHX)
#define rv2cv_op_cv(a,b)	Perl_rv2cv_op_cv(aTHX_ a,b)
#define safesyscalloc		Perl_safesyscalloc
#define safesysfree		Perl_safesysfree
#define safesysmalloc		Perl_safesysmalloc
#define safesysrealloc		Perl_safesysrealloc
#define save_I16(a)		Perl_save_I16(aTHX_ a)
#define save_I32(a)		Perl_save_I32(aTHX_ a)
#define save_I8(a)		Perl_save_I8(aTHX_ a)
#define save_adelete(a,b)	Perl_save_adelete(aTHX_ a,b)
#define save_aelem_flags(a,b,c,d)	Perl_save_aelem_flags(aTHX_ a,b,c,d)
#define save_alloc(a,b)		Perl_save_alloc(aTHX_ a,b)
#define save_aptr(a)		Perl_save_aptr(aTHX_ a)
#define save_ary(a)		Perl_save_ary(aTHX_ a)
#define save_bool(a)		Perl_save_bool(aTHX_ a)
#define save_clearsv(a)		Perl_save_clearsv(aTHX_ a)
#define save_delete(a,b,c)	Perl_save_delete(aTHX_ a,b,c)
#define save_destructor(a,b)	Perl_save_destructor(aTHX_ a,b)
#define save_destructor_x(a,b)	Perl_save_destructor_x(aTHX_ a,b)
#define save_generic_pvref(a)	Perl_save_generic_pvref(aTHX_ a)
#define save_generic_svref(a)	Perl_save_generic_svref(aTHX_ a)
#define save_gp(a,b)		Perl_save_gp(aTHX_ a,b)
#define save_hash(a)		Perl_save_hash(aTHX_ a)
#define save_hdelete(a,b)	Perl_save_hdelete(aTHX_ a,b)
#define save_helem_flags(a,b,c,d)	Perl_save_helem_flags(aTHX_ a,b,c,d)
#define save_hints()		Perl_save_hints(aTHX)
#define save_hptr(a)		Perl_save_hptr(aTHX_ a)
#define save_int(a)		Perl_save_int(aTHX_ a)
#define save_item(a)		Perl_save_item(aTHX_ a)
#define save_iv(a)		Perl_save_iv(aTHX_ a)
#define save_list(a,b)		Perl_save_list(aTHX_ a,b)
#define save_long(a)		Perl_save_long(aTHX_ a)
#define save_nogv(a)		Perl_save_nogv(aTHX_ a)
#define save_padsv_and_mortalize(a)	Perl_save_padsv_and_mortalize(aTHX_ a)
#define save_pptr(a)		Perl_save_pptr(aTHX_ a)
#define save_pushi32ptr(a,b,c)	Perl_save_pushi32ptr(aTHX_ a,b,c)
#define save_pushptr(a,b)	Perl_save_pushptr(aTHX_ a,b)
#define save_pushptrptr(a,b,c)	Perl_save_pushptrptr(aTHX_ a,b,c)
#define save_re_context()	Perl_save_re_context(aTHX)
#define save_scalar(a)		Perl_save_scalar(aTHX_ a)
#define save_set_svflags(a,b,c)	Perl_save_set_svflags(aTHX_ a,b,c)
#define save_shared_pvref(a)	Perl_save_shared_pvref(aTHX_ a)
#define save_sptr(a)		Perl_save_sptr(aTHX_ a)
#define save_svref(a)		Perl_save_svref(aTHX_ a)
#define save_vptr(a)		Perl_save_vptr(aTHX_ a)
#define savepv(a)		Perl_savepv(aTHX_ a)
#define savepvn(a,b)		Perl_savepvn(aTHX_ a,b)
#define savesharedpv(a)		Perl_savesharedpv(aTHX_ a)
#define savesharedpvn(a,b)	Perl_savesharedpvn(aTHX_ a,b)
#define savesharedsvpv(a)	Perl_savesharedsvpv(aTHX_ a)
#define savestack_grow()	Perl_savestack_grow(aTHX)
#define savestack_grow_cnt(a)	Perl_savestack_grow_cnt(aTHX_ a)
#define savesvpv(a)		Perl_savesvpv(aTHX_ a)
#define scan_bin(a,b,c)		Perl_scan_bin(aTHX_ a,b,c)
#define scan_hex(a,b,c)		Perl_scan_hex(aTHX_ a,b,c)
#define scan_num(a,b)		Perl_scan_num(aTHX_ a,b)
#define scan_oct(a,b,c)		Perl_scan_oct(aTHX_ a,b,c)
#define scan_version(a,b,c)	Perl_scan_version(aTHX_ a,b,c)
#define scan_vstring(a,b,c)	Perl_scan_vstring(aTHX_ a,b,c)
#define seed()			Perl_seed(aTHX)
#define set_context		Perl_set_context
#define set_numeric_local()	Perl_set_numeric_local(aTHX)
#define set_numeric_radix()	Perl_set_numeric_radix(aTHX)
#define set_numeric_standard()	Perl_set_numeric_standard(aTHX)
#define setdefout(a)		Perl_setdefout(aTHX_ a)
#define share_hek(a,b,c)	Perl_share_hek(aTHX_ a,b,c)
#define sortsv(a,b,c)		Perl_sortsv(aTHX_ a,b,c)
#define sortsv_flags(a,b,c,d)	Perl_sortsv_flags(aTHX_ a,b,c,d)
#define stack_grow(a,b,c)	Perl_stack_grow(aTHX_ a,b,c)
#define start_subparse(a,b)	Perl_start_subparse(aTHX_ a,b)
#define str_to_version(a)	Perl_str_to_version(aTHX_ a)
#define sv_2bool_flags(a,b)	Perl_sv_2bool_flags(aTHX_ a,b)
#define sv_2cv(a,b,c,d)		Perl_sv_2cv(aTHX_ a,b,c,d)
#define sv_2io(a)		Perl_sv_2io(aTHX_ a)
#define sv_2iv_flags(a,b)	Perl_sv_2iv_flags(aTHX_ a,b)
#define sv_2mortal(a)		Perl_sv_2mortal(aTHX_ a)
#define sv_2nv_flags(a,b)	Perl_sv_2nv_flags(aTHX_ a,b)
#define sv_2pv_flags(a,b,c)	Perl_sv_2pv_flags(aTHX_ a,b,c)
#define sv_2pvbyte(a,b)		Perl_sv_2pvbyte(aTHX_ a,b)
#define sv_2pvutf8(a,b)		Perl_sv_2pvutf8(aTHX_ a,b)
#define sv_2uv_flags(a,b)	Perl_sv_2uv_flags(aTHX_ a,b)
#define sv_backoff		Perl_sv_backoff
#define sv_bless(a,b)		Perl_sv_bless(aTHX_ a,b)
#define sv_cat_decode(a,b,c,d,e,f)	Perl_sv_cat_decode(aTHX_ a,b,c,d,e,f)
#define sv_catpv(a,b)		Perl_sv_catpv(aTHX_ a,b)
#define sv_catpv_flags(a,b,c)	Perl_sv_catpv_flags(aTHX_ a,b,c)
#define sv_catpv_mg(a,b)	Perl_sv_catpv_mg(aTHX_ a,b)
#ifndef PERL_IMPLICIT_CONTEXT
#define sv_catpvf		Perl_sv_catpvf
#define sv_catpvf_mg		Perl_sv_catpvf_mg
#endif
#define sv_catpvn_flags(a,b,c,d)	Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
#define sv_catsv_flags(a,b,c)	Perl_sv_catsv_flags(aTHX_ a,b,c)
#define sv_chop(a,b)		Perl_sv_chop(aTHX_ a,b)
#define sv_clear(a)		Perl_sv_clear(aTHX_ a)
#define sv_cmp_flags(a,b,c)	Perl_sv_cmp_flags(aTHX_ a,b,c)
#define sv_cmp_locale_flags(a,b,c)	Perl_sv_cmp_locale_flags(aTHX_ a,b,c)
#define sv_copypv_flags(a,b,c)	Perl_sv_copypv_flags(aTHX_ a,b,c)
#define sv_dec(a)		Perl_sv_dec(aTHX_ a)
#define sv_dec_nomg(a)		Perl_sv_dec_nomg(aTHX_ a)
#define sv_derived_from(a,b)	Perl_sv_derived_from(aTHX_ a,b)
#define sv_derived_from_pv(a,b,c)	Perl_sv_derived_from_pv(aTHX_ a,b,c)
#define sv_derived_from_pvn(a,b,c,d)	Perl_sv_derived_from_pvn(aTHX_ a,b,c,d)
#define sv_derived_from_sv(a,b,c)	Perl_sv_derived_from_sv(aTHX_ a,b,c)
#define sv_destroyable(a)	Perl_sv_destroyable(aTHX_ a)
#define sv_does(a,b)		Perl_sv_does(aTHX_ a,b)
#define sv_does_pv(a,b,c)	Perl_sv_does_pv(aTHX_ a,b,c)
#define sv_does_pvn(a,b,c,d)	Perl_sv_does_pvn(aTHX_ a,b,c,d)
#define sv_does_sv(a,b,c)	Perl_sv_does_sv(aTHX_ a,b,c)
#define sv_dump(a)		Perl_sv_dump(aTHX_ a)
#define sv_eq_flags(a,b,c)	Perl_sv_eq_flags(aTHX_ a,b,c)
#define sv_force_normal_flags(a,b)	Perl_sv_force_normal_flags(aTHX_ a,b)
#define sv_free(a)		Perl_sv_free(aTHX_ a)
#define sv_get_backrefs		Perl_sv_get_backrefs
#define sv_gets(a,b,c)		Perl_sv_gets(aTHX_ a,b,c)
#define sv_grow(a,b)		Perl_sv_grow(aTHX_ a,b)
#define sv_inc(a)		Perl_sv_inc(aTHX_ a)
#define sv_inc_nomg(a)		Perl_sv_inc_nomg(aTHX_ a)
#define sv_insert_flags(a,b,c,d,e,f)	Perl_sv_insert_flags(aTHX_ a,b,c,d,e,f)
#define sv_isa(a,b)		Perl_sv_isa(aTHX_ a,b)
#define sv_isobject(a)		Perl_sv_isobject(aTHX_ a)
#define sv_iv(a)		Perl_sv_iv(aTHX_ a)
#define sv_len(a)		Perl_sv_len(aTHX_ a)
#define sv_len_utf8(a)		Perl_sv_len_utf8(aTHX_ a)
#define sv_magic(a,b,c,d,e)	Perl_sv_magic(aTHX_ a,b,c,d,e)
#define sv_magicext(a,b,c,d,e,f)	Perl_sv_magicext(aTHX_ a,b,c,d,e,f)
#define sv_newmortal()		Perl_sv_newmortal(aTHX)
#define sv_newref(a)		Perl_sv_newref(aTHX_ a)
#define sv_nosharing(a)		Perl_sv_nosharing(aTHX_ a)
#define sv_nv(a)		Perl_sv_nv(aTHX_ a)
#define sv_peek(a)		Perl_sv_peek(aTHX_ a)
#define sv_pos_b2u(a,b)		Perl_sv_pos_b2u(aTHX_ a,b)
#define sv_pos_b2u_flags(a,b,c)	Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
#define sv_pos_u2b(a,b,c)	Perl_sv_pos_u2b(aTHX_ a,b,c)
#define sv_pos_u2b_flags(a,b,c,d)	Perl_sv_pos_u2b_flags(aTHX_ a,b,c,d)
#define sv_pvbyten(a,b)		Perl_sv_pvbyten(aTHX_ a,b)
#define sv_pvbyten_force(a,b)	Perl_sv_pvbyten_force(aTHX_ a,b)
#define sv_pvn(a,b)		Perl_sv_pvn(aTHX_ a,b)
#define sv_pvn_force_flags(a,b,c)	Perl_sv_pvn_force_flags(aTHX_ a,b,c)
#define sv_pvn_nomg(a,b)	Perl_sv_pvn_nomg(aTHX_ a,b)
#define sv_pvutf8n(a,b)		Perl_sv_pvutf8n(aTHX_ a,b)
#define sv_pvutf8n_force(a,b)	Perl_sv_pvutf8n_force(aTHX_ a,b)
#define sv_recode_to_utf8(a,b)	Perl_sv_recode_to_utf8(aTHX_ a,b)
#define sv_ref(a,b,c)		Perl_sv_ref(aTHX_ a,b,c)
#define sv_reftype(a,b)		Perl_sv_reftype(aTHX_ a,b)
#define sv_replace(a,b)		Perl_sv_replace(aTHX_ a,b)
#define sv_report_used()	Perl_sv_report_used(aTHX)
#define sv_reset(a,b)		Perl_sv_reset(aTHX_ a,b)
#define sv_rvweaken(a)		Perl_sv_rvweaken(aTHX_ a)
#define sv_setiv(a,b)		Perl_sv_setiv(aTHX_ a,b)
#define sv_setiv_mg(a,b)	Perl_sv_setiv_mg(aTHX_ a,b)
#define sv_setnv(a,b)		Perl_sv_setnv(aTHX_ a,b)
#define sv_setnv_mg(a,b)	Perl_sv_setnv_mg(aTHX_ a,b)
#define sv_setpv(a,b)		Perl_sv_setpv(aTHX_ a,b)
#define sv_setpv_mg(a,b)	Perl_sv_setpv_mg(aTHX_ a,b)
#ifndef PERL_IMPLICIT_CONTEXT
#define sv_setpvf		Perl_sv_setpvf
#define sv_setpvf_mg		Perl_sv_setpvf_mg
#endif
#define sv_setpviv(a,b)		Perl_sv_setpviv(aTHX_ a,b)
#define sv_setpviv_mg(a,b)	Perl_sv_setpviv_mg(aTHX_ a,b)
#define sv_setpvn(a,b,c)	Perl_sv_setpvn(aTHX_ a,b,c)
#define sv_setpvn_mg(a,b,c)	Perl_sv_setpvn_mg(aTHX_ a,b,c)
#define sv_setref_iv(a,b,c)	Perl_sv_setref_iv(aTHX_ a,b,c)
#define sv_setref_nv(a,b,c)	Perl_sv_setref_nv(aTHX_ a,b,c)
#define sv_setref_pv(a,b,c)	Perl_sv_setref_pv(aTHX_ a,b,c)
#define sv_setref_pvn(a,b,c,d)	Perl_sv_setref_pvn(aTHX_ a,b,c,d)
#define sv_setref_uv(a,b,c)	Perl_sv_setref_uv(aTHX_ a,b,c)
#define sv_setsv_flags(a,b,c)	Perl_sv_setsv_flags(aTHX_ a,b,c)
#define sv_setsv_mg(a,b)	Perl_sv_setsv_mg(aTHX_ a,b)
#define sv_setuv(a,b)		Perl_sv_setuv(aTHX_ a,b)
#define sv_setuv_mg(a,b)	Perl_sv_setuv_mg(aTHX_ a,b)
#define sv_tainted(a)		Perl_sv_tainted(aTHX_ a)
#define sv_true(a)		Perl_sv_true(aTHX_ a)
#define sv_uni_display(a,b,c,d)	Perl_sv_uni_display(aTHX_ a,b,c,d)
#define sv_unmagic(a,b)		Perl_sv_unmagic(aTHX_ a,b)
#define sv_unmagicext(a,b,c)	Perl_sv_unmagicext(aTHX_ a,b,c)
#define sv_unref_flags(a,b)	Perl_sv_unref_flags(aTHX_ a,b)
#define sv_untaint(a)		Perl_sv_untaint(aTHX_ a)
#define sv_upgrade(a,b)		Perl_sv_upgrade(aTHX_ a,b)
#define sv_usepvn_flags(a,b,c,d)	Perl_sv_usepvn_flags(aTHX_ a,b,c,d)
#define sv_utf8_decode(a)	Perl_sv_utf8_decode(aTHX_ a)
#define sv_utf8_downgrade(a,b)	Perl_sv_utf8_downgrade(aTHX_ a,b)
#define sv_utf8_encode(a)	Perl_sv_utf8_encode(aTHX_ a)
#define sv_utf8_upgrade_flags_grow(a,b,c)	Perl_sv_utf8_upgrade_flags_grow(aTHX_ a,b,c)
#define sv_uv(a)		Perl_sv_uv(aTHX_ a)
#define sv_vcatpvf(a,b,c)	Perl_sv_vcatpvf(aTHX_ a,b,c)
#define sv_vcatpvf_mg(a,b,c)	Perl_sv_vcatpvf_mg(aTHX_ a,b,c)
#define sv_vcatpvfn(a,b,c,d,e,f,g)	Perl_sv_vcatpvfn(aTHX_ a,b,c,d,e,f,g)
#define sv_vcatpvfn_flags(a,b,c,d,e,f,g,h)	Perl_sv_vcatpvfn_flags(aTHX_ a,b,c,d,e,f,g,h)
#define sv_vsetpvf(a,b,c)	Perl_sv_vsetpvf(aTHX_ a,b,c)
#define sv_vsetpvf_mg(a,b,c)	Perl_sv_vsetpvf_mg(aTHX_ a,b,c)
#define sv_vsetpvfn(a,b,c,d,e,f,g)	Perl_sv_vsetpvfn(aTHX_ a,b,c,d,e,f,g)
#define swash_fetch(a,b,c)	Perl_swash_fetch(aTHX_ a,b,c)
#define swash_init(a,b,c,d,e)	Perl_swash_init(aTHX_ a,b,c,d,e)
#define sync_locale()		Perl_sync_locale(aTHX)
#define taint_env()		Perl_taint_env(aTHX)
#define taint_proper(a,b)	Perl_taint_proper(aTHX_ a,b)
#define to_uni_lower(a,b,c)	Perl_to_uni_lower(aTHX_ a,b,c)
#define to_uni_lower_lc(a)	Perl_to_uni_lower_lc(aTHX_ a)
#define to_uni_title(a,b,c)	Perl_to_uni_title(aTHX_ a,b,c)
#define to_uni_title_lc(a)	Perl_to_uni_title_lc(aTHX_ a)
#define to_uni_upper(a,b,c)	Perl_to_uni_upper(aTHX_ a,b,c)
#define to_uni_upper_lc(a)	Perl_to_uni_upper_lc(aTHX_ a)
#define to_utf8_case(a,b,c,d,e,f)	Perl_to_utf8_case(aTHX_ a,b,c,d,e,f)
#define unpack_str(a,b,c,d,e,f,g,h)	Perl_unpack_str(aTHX_ a,b,c,d,e,f,g,h)
#define unpackstring(a,b,c,d,e)	Perl_unpackstring(aTHX_ a,b,c,d,e)
#define unsharepvn(a,b,c)	Perl_unsharepvn(aTHX_ a,b,c)
#define upg_version(a,b)	Perl_upg_version(aTHX_ a,b)
#define utf16_to_utf8(a,b,c,d)	Perl_utf16_to_utf8(aTHX_ a,b,c,d)
#define utf16_to_utf8_reversed(a,b,c,d)	Perl_utf16_to_utf8_reversed(aTHX_ a,b,c,d)
#define utf8_distance(a,b)	Perl_utf8_distance(aTHX_ a,b)
#define utf8_hop		Perl_utf8_hop
#define utf8_length(a,b)	Perl_utf8_length(aTHX_ a,b)
#define utf8_to_bytes(a,b)	Perl_utf8_to_bytes(aTHX_ a,b)
#define utf8_to_uvchr(a,b)	Perl_utf8_to_uvchr(aTHX_ a,b)
#define utf8_to_uvuni(a,b)	Perl_utf8_to_uvuni(aTHX_ a,b)
#define utf8_to_uvuni_buf(a,b,c)	Perl_utf8_to_uvuni_buf(aTHX_ a,b,c)
#define utf8n_to_uvchr(a,b,c,d)	Perl_utf8n_to_uvchr(aTHX_ a,b,c,d)
#define utf8n_to_uvuni(a,b,c,d)	Perl_utf8n_to_uvuni(aTHX_ a,b,c,d)
#define uvoffuni_to_utf8_flags(a,b,c)	Perl_uvoffuni_to_utf8_flags(aTHX_ a,b,c)
#define uvuni_to_utf8(a,b)	Perl_uvuni_to_utf8(aTHX_ a,b)
#define uvuni_to_utf8_flags(a,b,c)	Perl_uvuni_to_utf8_flags(aTHX_ a,b,c)
#define valid_utf8_to_uvchr(a,b)	Perl_valid_utf8_to_uvchr(aTHX_ a,b)
#define valid_utf8_to_uvuni(a,b)	Perl_valid_utf8_to_uvuni(aTHX_ a,b)
#define vcmp(a,b)		Perl_vcmp(aTHX_ a,b)
#define vcroak(a,b)		Perl_vcroak(aTHX_ a,b)
#define vdeb(a,b)		Perl_vdeb(aTHX_ a,b)
#define vform(a,b)		Perl_vform(aTHX_ a,b)
#define vload_module(a,b,c,d)	Perl_vload_module(aTHX_ a,b,c,d)
#define vmess(a,b)		Perl_vmess(aTHX_ a,b)
#define vnewSVpvf(a,b)		Perl_vnewSVpvf(aTHX_ a,b)
#define vnormal(a)		Perl_vnormal(aTHX_ a)
#define vnumify(a)		Perl_vnumify(aTHX_ a)
#define vstringify(a)		Perl_vstringify(aTHX_ a)
#define vverify(a)		Perl_vverify(aTHX_ a)
#define vwarn(a,b)		Perl_vwarn(aTHX_ a,b)
#define vwarner(a,b,c)		Perl_vwarner(aTHX_ a,b,c)
#ifndef PERL_IMPLICIT_CONTEXT
#define warn			Perl_warn
#endif
#define warn_sv(a)		Perl_warn_sv(aTHX_ a)
#ifndef PERL_IMPLICIT_CONTEXT
#define warner			Perl_warner
#endif
#define whichsig_pv(a)		Perl_whichsig_pv(aTHX_ a)
#define whichsig_pvn(a,b)	Perl_whichsig_pvn(aTHX_ a,b)
#define whichsig_sv(a)		Perl_whichsig_sv(aTHX_ a)
#define wrap_op_checker(a,b,c)	Perl_wrap_op_checker(aTHX_ a,b,c)
#if !(defined(HAS_SIGACTION) && defined(SA_SIGINFO))
#define csighandler		Perl_csighandler
#endif
#if !(defined(NO_MATHOMS))
#define sv_nounlocking(a)	Perl_sv_nounlocking(aTHX_ a)
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
#define my_bzero		Perl_my_bzero
#endif
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
#define my_memcmp		Perl_my_memcmp
#endif
#if !defined(HAS_MEMCPY) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY))
#define my_bcopy		Perl_my_bcopy
#endif
#if !defined(HAS_MEMSET)
#define my_memset		Perl_my_memset
#endif
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
#define my_chsize(a,b)		Perl_my_chsize(aTHX_ a,b)
#endif
#if !defined(PERL_IMPLICIT_SYS)
#define my_pclose(a)		Perl_my_pclose(aTHX_ a)
#define my_popen(a,b)		Perl_my_popen(aTHX_ a,b)
#endif
#if !defined(PERL_NO_INLINE_FUNCTIONS)
#define _is_utf8_char_slow	S__is_utf8_char_slow
#define append_utf8_from_native_byte	S_append_utf8_from_native_byte
#define av_top_index(a)		S_av_top_index(aTHX_ a)
#define cx_popblock(a)		S_cx_popblock(aTHX_ a)
#define cx_popeval(a)		S_cx_popeval(aTHX_ a)
#define cx_popformat(a)		S_cx_popformat(aTHX_ a)
#define cx_popgiven(a)		S_cx_popgiven(aTHX_ a)
#define cx_poploop(a)		S_cx_poploop(aTHX_ a)
#define cx_popsub(a)		S_cx_popsub(aTHX_ a)
#define cx_popsub_args(a)	S_cx_popsub_args(aTHX_ a)
#define cx_popsub_common(a)	S_cx_popsub_common(aTHX_ a)
#define cx_popwhen(a)		S_cx_popwhen(aTHX_ a)
#define cx_pushblock(a,b,c,d)	S_cx_pushblock(aTHX_ a,b,c,d)
#define cx_pusheval(a,b,c)	S_cx_pusheval(aTHX_ a,b,c)
#define cx_pushformat(a,b,c,d)	S_cx_pushformat(aTHX_ a,b,c,d)
#define cx_pushgiven(a,b)	S_cx_pushgiven(aTHX_ a,b)
#define cx_pushloop_for(a,b,c)	S_cx_pushloop_for(aTHX_ a,b,c)
#define cx_pushloop_plain(a)	S_cx_pushloop_plain(aTHX_ a)
#define cx_pushsub(a,b,c,d)	S_cx_pushsub(aTHX_ a,b,c,d)
#define cx_pushwhen(a)		S_cx_pushwhen(aTHX_ a)
#define cx_topblock(a)		S_cx_topblock(aTHX_ a)
#define is_safe_syscall(a,b,c,d)	S_is_safe_syscall(aTHX_ a,b,c,d)
#endif
#if defined(DEBUGGING)
#define pad_setsv(a,b)		Perl_pad_setsv(aTHX_ a,b)
#define pad_sv(a)		Perl_pad_sv(aTHX_ a)
#  if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
#define _setlocale_debug_string	Perl__setlocale_debug_string
#  endif
#endif
#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
#define csighandler		Perl_csighandler
#endif
#if defined(HAVE_INTERP_INTERN)
#define sys_intern_clear()	Perl_sys_intern_clear(aTHX)
#define sys_intern_init()	Perl_sys_intern_init(aTHX)
#  if defined(USE_ITHREADS)
#define sys_intern_dup(a,b)	Perl_sys_intern_dup(aTHX_ a,b)
#  endif
#endif
#if defined(MYMALLOC)
#define dump_mstats(a)		Perl_dump_mstats(aTHX_ a)
#define get_mstats(a,b,c)	Perl_get_mstats(aTHX_ a,b,c)
#endif
#if defined(PERL_GLOBAL_STRUCT)
#define GetVars()		Perl_GetVars(aTHX)
#define free_global_struct(a)	Perl_free_global_struct(aTHX_ a)
#define init_global_struct()	Perl_init_global_struct(aTHX)
#endif
#if defined(PERL_IMPLICIT_CONTEXT)
#define croak_nocontext		Perl_croak_nocontext
#define deb_nocontext		Perl_deb_nocontext
#define die_nocontext		Perl_die_nocontext
#define form_nocontext		Perl_form_nocontext
#define fprintf_nocontext	Perl_fprintf_nocontext
#define load_module_nocontext	Perl_load_module_nocontext
#define mess_nocontext		Perl_mess_nocontext
#define newSVpvf_nocontext	Perl_newSVpvf_nocontext
#define printf_nocontext	Perl_printf_nocontext
#define sv_catpvf_mg_nocontext	Perl_sv_catpvf_mg_nocontext
#define sv_catpvf_nocontext	Perl_sv_catpvf_nocontext
#define sv_setpvf_mg_nocontext	Perl_sv_setpvf_mg_nocontext
#define sv_setpvf_nocontext	Perl_sv_setpvf_nocontext
#define warn_nocontext		Perl_warn_nocontext
#define warner_nocontext	Perl_warner_nocontext
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_PERL_C) || defined(PERL_IN_UTF8_C)
#define _new_invlist_C_array(a)	Perl__new_invlist_C_array(aTHX_ a)
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
#define _get_regclass_nonbitmap_data(a,b,c,d,e,f)	Perl__get_regclass_nonbitmap_data(aTHX_ a,b,c,d,e,f)
#endif
#if defined(PERL_OP_PARENT)
#define op_parent		Perl_op_parent
#endif
#if defined(UNLINK_ALL_VERSIONS)
#define unlnk(a)		Perl_unlnk(aTHX_ a)
#endif
#if defined(USE_C_BACKTRACE)
#define dump_c_backtrace(a,b,c)	Perl_dump_c_backtrace(aTHX_ a,b,c)
#define get_c_backtrace_dump(a,b)	Perl_get_c_backtrace_dump(aTHX_ a,b)
#endif
#if defined(USE_ITHREADS)
#define alloccopstash(a)	Perl_alloccopstash(aTHX_ a)
#define any_dup(a,b)		Perl_any_dup(aTHX_ a,b)
#define cx_dup(a,b,c,d)		Perl_cx_dup(aTHX_ a,b,c,d)
#define dirp_dup(a,b)		Perl_dirp_dup(aTHX_ a,b)
#define fp_dup(a,b,c)		Perl_fp_dup(aTHX_ a,b,c)
#define gp_dup(a,b)		Perl_gp_dup(aTHX_ a,b)
#define he_dup(a,b,c)		Perl_he_dup(aTHX_ a,b,c)
#define hek_dup(a,b)		Perl_hek_dup(aTHX_ a,b)
#define mg_dup(a,b)		Perl_mg_dup(aTHX_ a,b)
#define newPADOP(a,b,c)		Perl_newPADOP(aTHX_ a,b,c)
#define parser_dup(a,b)		Perl_parser_dup(aTHX_ a,b)
#define re_dup_guts(a,b,c)	Perl_re_dup_guts(aTHX_ a,b,c)
#define regdupe_internal(a,b)	Perl_regdupe_internal(aTHX_ a,b)
#define rvpv_dup(a,b,c)		Perl_rvpv_dup(aTHX_ a,b,c)
#define si_dup(a,b)		Perl_si_dup(aTHX_ a,b)
#define ss_dup(a,b)		Perl_ss_dup(aTHX_ a,b)
#define sv_dup(a,b)		Perl_sv_dup(aTHX_ a,b)
#define sv_dup_inc(a,b)		Perl_sv_dup_inc(aTHX_ a,b)
#endif
#if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
#define _is_cur_LC_category_utf8(a)	Perl__is_cur_LC_category_utf8(aTHX_ a)
#endif
#if defined(USE_LOCALE_COLLATE)
#define sv_collxfrm_flags(a,b,c)	Perl_sv_collxfrm_flags(aTHX_ a,b,c)
#endif
#if defined(USE_PERLIO)
#define PerlIO_clearerr(a)	Perl_PerlIO_clearerr(aTHX_ a)
#define PerlIO_close(a)		Perl_PerlIO_close(aTHX_ a)
#define PerlIO_eof(a)		Perl_PerlIO_eof(aTHX_ a)
#define PerlIO_error(a)		Perl_PerlIO_error(aTHX_ a)
#define PerlIO_fileno(a)	Perl_PerlIO_fileno(aTHX_ a)
#define PerlIO_fill(a)		Perl_PerlIO_fill(aTHX_ a)
#define PerlIO_flush(a)		Perl_PerlIO_flush(aTHX_ a)
#define PerlIO_get_base(a)	Perl_PerlIO_get_base(aTHX_ a)
#define PerlIO_get_bufsiz(a)	Perl_PerlIO_get_bufsiz(aTHX_ a)
#define PerlIO_get_cnt(a)	Perl_PerlIO_get_cnt(aTHX_ a)
#define PerlIO_get_ptr(a)	Perl_PerlIO_get_ptr(aTHX_ a)
#define PerlIO_read(a,b,c)	Perl_PerlIO_read(aTHX_ a,b,c)
#define PerlIO_seek(a,b,c)	Perl_PerlIO_seek(aTHX_ a,b,c)
#define PerlIO_set_cnt(a,b)	Perl_PerlIO_set_cnt(aTHX_ a,b)
#define PerlIO_set_ptrcnt(a,b,c)	Perl_PerlIO_set_ptrcnt(aTHX_ a,b,c)
#define PerlIO_setlinebuf(a)	Perl_PerlIO_setlinebuf(aTHX_ a)
#define PerlIO_stderr()		Perl_PerlIO_stderr(aTHX)
#define PerlIO_stdin()		Perl_PerlIO_stdin(aTHX)
#define PerlIO_stdout()		Perl_PerlIO_stdout(aTHX)
#define PerlIO_tell(a)		Perl_PerlIO_tell(aTHX_ a)
#define PerlIO_unread(a,b,c)	Perl_PerlIO_unread(aTHX_ a,b,c)
#define PerlIO_write(a,b,c)	Perl_PerlIO_write(aTHX_ a,b,c)
#endif
#if defined(USE_QUADMATH)
#define quadmath_format_needed	Perl_quadmath_format_needed
#define quadmath_format_single	Perl_quadmath_format_single
#endif
#if defined(WIN32)
#define my_setlocale(a,b)	Perl_my_setlocale(aTHX_ a,b)
#endif
#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
#define do_aspawn(a,b,c)	Perl_do_aspawn(aTHX_ a,b,c)
#define do_spawn(a)		Perl_do_spawn(aTHX_ a)
#define do_spawn_nowait(a)	Perl_do_spawn_nowait(aTHX_ a)
#endif
#if defined(PERL_CORE) || defined(PERL_EXT)
#define _get_encoding()		Perl__get_encoding(aTHX)
#define _warn_problematic_locale	Perl__warn_problematic_locale
#define av_reify(a)		Perl_av_reify(aTHX_ a)
#define current_re_engine()	Perl_current_re_engine(aTHX)
#define cv_ckproto_len_flags(a,b,c,d,e)	Perl_cv_ckproto_len_flags(aTHX_ a,b,c,d,e)
#define grok_atoUV		Perl_grok_atoUV
#define mg_find_mglob(a)	Perl_mg_find_mglob(aTHX_ a)
#define multideref_stringify(a,b)	Perl_multideref_stringify(aTHX_ a,b)
#define op_clear(a)		Perl_op_clear(aTHX_ a)
#define qerror(a)		Perl_qerror(aTHX_ a)
#define reg_named_buff(a,b,c,d)	Perl_reg_named_buff(aTHX_ a,b,c,d)
#define reg_named_buff_iter(a,b,c)	Perl_reg_named_buff_iter(aTHX_ a,b,c)
#define reg_numbered_buff_fetch(a,b,c)	Perl_reg_numbered_buff_fetch(aTHX_ a,b,c)
#define reg_numbered_buff_length(a,b,c)	Perl_reg_numbered_buff_length(aTHX_ a,b,c)
#define reg_numbered_buff_store(a,b,c)	Perl_reg_numbered_buff_store(aTHX_ a,b,c)
#define reg_qr_package(a)	Perl_reg_qr_package(aTHX_ a)
#define reg_temp_copy(a,b)	Perl_reg_temp_copy(aTHX_ a,b)
#define report_uninit(a)	Perl_report_uninit(aTHX_ a)
#define sv_magicext_mglob(a)	Perl_sv_magicext_mglob(aTHX_ a)
#define validate_proto(a,b,c)	Perl_validate_proto(aTHX_ a,b,c)
#define vivify_defelem(a)	Perl_vivify_defelem(aTHX_ a)
#define yylex()			Perl_yylex(aTHX)
#  if !defined(PERL_EXT_RE_BUILD)
#    if defined(PERL_IN_REGCOMP_C)
#define get_invlist_previous_index_addr	S_get_invlist_previous_index_addr
#define invlist_clear(a)	S_invlist_clear(aTHX_ a)
#define invlist_previous_index	S_invlist_previous_index
#define invlist_replace_list_destroys_src(a,b)	S_invlist_replace_list_destroys_src(aTHX_ a,b)
#define invlist_set_previous_index	S_invlist_set_previous_index
#define invlist_trim		S_invlist_trim
#    endif
#  endif
#  if !defined(PERL_NO_INLINE_FUNCTIONS)
#define sv_only_taint_gmagic	S_sv_only_taint_gmagic
#  endif
#  if defined(DEBUGGING)
#    if defined(PERL_IN_REGCOMP_C)
#define dump_trie(a,b,c,d)	S_dump_trie(aTHX_ a,b,c,d)
#define dump_trie_interim_list(a,b,c,d,e)	S_dump_trie_interim_list(aTHX_ a,b,c,d,e)
#define dump_trie_interim_table(a,b,c,d,e)	S_dump_trie_interim_table(aTHX_ a,b,c,d,e)
#define dumpuntil(a,b,c,d,e,f,g,h)	S_dumpuntil(aTHX_ a,b,c,d,e,f,g,h)
#define put_charclass_bitmap_innards(a,b,c,d,e)	S_put_charclass_bitmap_innards(aTHX_ a,b,c,d,e)
#define put_charclass_bitmap_innards_common(a,b,c,d,e,f)	S_put_charclass_bitmap_innards_common(aTHX_ a,b,c,d,e,f)
#define put_charclass_bitmap_innards_invlist(a,b)	S_put_charclass_bitmap_innards_invlist(aTHX_ a,b)
#define put_code_point(a,b)	S_put_code_point(aTHX_ a,b)
#define put_range(a,b,c,d)	S_put_range(aTHX_ a,b,c,d)
#ifndef PERL_IMPLICIT_CONTEXT
#define re_indentf		Perl_re_indentf
#endif
#define regdump_extflags(a,b)	S_regdump_extflags(aTHX_ a,b)
#define regdump_intflags(a,b)	S_regdump_intflags(aTHX_ a,b)
#define regtail_study(a,b,c,d)	S_regtail_study(aTHX_ a,b,c,d)
#    endif
#    if defined(PERL_IN_REGEXEC_C)
#define debug_start_match(a,b,c,d,e)	S_debug_start_match(aTHX_ a,b,c,d,e)
#define dump_exec_pos(a,b,c,d,e,f,g)	S_dump_exec_pos(aTHX_ a,b,c,d,e,f,g)
#ifndef PERL_IMPLICIT_CONTEXT
#define re_exec_indentf		Perl_re_exec_indentf
#endif
#    endif
#  endif
#  if defined(PERL_ANY_COW)
#define sv_setsv_cow(a,b)	Perl_sv_setsv_cow(aTHX_ a,b)
#  endif
#  if defined(PERL_CORE) || defined (PERL_EXT)
#define sv_or_pv_pos_u2b(a,b,c,d)	S_sv_or_pv_pos_u2b(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_REGCOMP_C)
#define _append_range_to_invlist(a,b,c)	S__append_range_to_invlist(aTHX_ a,b,c)
#define _invlist_array_init	S__invlist_array_init
#define _make_exactf_invlist(a,b)	S__make_exactf_invlist(aTHX_ a,b)
#define add_above_Latin1_folds(a,b,c)	S_add_above_Latin1_folds(aTHX_ a,b,c)
#define add_cp_to_invlist(a,b)	S_add_cp_to_invlist(aTHX_ a,b)
#define add_data		S_add_data
#define add_multi_match(a,b,c)	S_add_multi_match(aTHX_ a,b,c)
#define alloc_maybe_populate_EXACT(a,b,c,d,e,f)	S_alloc_maybe_populate_EXACT(aTHX_ a,b,c,d,e,f)
#define cntrl_to_mnemonic	S_cntrl_to_mnemonic
#define compute_EXACTish	S_compute_EXACTish
#define construct_ahocorasick_from_trie(a,b,c)	S_construct_ahocorasick_from_trie(aTHX_ a,b,c)
#define edit_distance		S_edit_distance
#define get_ANYOF_cp_list_for_ssc(a,b)	S_get_ANYOF_cp_list_for_ssc(aTHX_ a,b)
#define get_invlist_iter_addr	S_get_invlist_iter_addr
#define grok_bslash_N(a,b,c,d,e,f,g)	S_grok_bslash_N(aTHX_ a,b,c,d,e,f,g)
#define handle_named_backref(a,b,c,d)	S_handle_named_backref(aTHX_ a,b,c,d)
#define handle_possible_posix(a,b,c,d,e)	S_handle_possible_posix(aTHX_ a,b,c,d,e)
#define handle_regex_sets(a,b,c,d,e)	S_handle_regex_sets(aTHX_ a,b,c,d,e)
#define invlist_clone(a)	S_invlist_clone(aTHX_ a)
#define invlist_contents(a,b)	S_invlist_contents(aTHX_ a,b)
#define invlist_extend(a,b)	S_invlist_extend(aTHX_ a,b)
#define invlist_highest		S_invlist_highest
#define invlist_is_iterating	S_invlist_is_iterating
#define invlist_iterfinish	S_invlist_iterfinish
#define invlist_iterinit	S_invlist_iterinit
#define invlist_iternext	S_invlist_iternext
#define invlist_max		S_invlist_max
#define invlist_set_len(a,b,c)	S_invlist_set_len(aTHX_ a,b,c)
#define is_ssc_worth_it		S_is_ssc_worth_it
#define join_exact(a,b,c,d,e,f,g)	S_join_exact(aTHX_ a,b,c,d,e,f,g)
#define make_trie(a,b,c,d,e,f,g,h)	S_make_trie(aTHX_ a,b,c,d,e,f,g,h)
#define nextchar(a)		S_nextchar(aTHX_ a)
#define output_or_return_posix_warnings(a,b,c)	S_output_or_return_posix_warnings(aTHX_ a,b,c)
#define parse_lparen_question_flags(a)	S_parse_lparen_question_flags(aTHX_ a)
#define populate_ANYOF_from_invlist(a,b)	S_populate_ANYOF_from_invlist(aTHX_ a,b)
#define reg(a,b,c,d)		S_reg(aTHX_ a,b,c,d)
#define reg2Lanode(a,b,c,d)	S_reg2Lanode(aTHX_ a,b,c,d)
#define reg_node(a,b)		S_reg_node(aTHX_ a,b)
#define reg_recode(a,b)		S_reg_recode(aTHX_ a,b)
#define reg_scan_name(a,b)	S_reg_scan_name(aTHX_ a,b)
#define reg_skipcomment		S_reg_skipcomment
#define reganode(a,b,c)		S_reganode(aTHX_ a,b,c)
#define regatom(a,b,c)		S_regatom(aTHX_ a,b,c)
#define regbranch(a,b,c,d)	S_regbranch(aTHX_ a,b,c,d)
#define regclass(a,b,c,d,e,f,g,h,i,j)	S_regclass(aTHX_ a,b,c,d,e,f,g,h,i,j)
#define regex_set_precedence	S_regex_set_precedence
#define reginsert(a,b,c,d)	S_reginsert(aTHX_ a,b,c,d)
#define regnode_guts(a,b,c,d)	S_regnode_guts(aTHX_ a,b,c,d)
#define regpiece(a,b,c)		S_regpiece(aTHX_ a,b,c)
#define regtail(a,b,c,d)	S_regtail(aTHX_ a,b,c,d)
#define scan_commit(a,b,c,d)	S_scan_commit(aTHX_ a,b,c,d)
#define set_ANYOF_arg(a,b,c,d,e,f,g)	S_set_ANYOF_arg(aTHX_ a,b,c,d,e,f,g)
#define skip_to_be_ignored_text(a,b,c)	S_skip_to_be_ignored_text(aTHX_ a,b,c)
#define ssc_add_range(a,b,c)	S_ssc_add_range(aTHX_ a,b,c)
#define ssc_and(a,b,c)		S_ssc_and(aTHX_ a,b,c)
#define ssc_anything(a)		S_ssc_anything(aTHX_ a)
#define ssc_clear_locale	S_ssc_clear_locale
#define ssc_cp_and(a,b)		S_ssc_cp_and(aTHX_ a,b)
#define ssc_finalize(a,b)	S_ssc_finalize(aTHX_ a,b)
#define ssc_init(a,b)		S_ssc_init(aTHX_ a,b)
#define ssc_intersection(a,b,c)	S_ssc_intersection(aTHX_ a,b,c)
#define ssc_is_anything		S_ssc_is_anything
#define ssc_is_cp_posixl_init	S_ssc_is_cp_posixl_init
#define ssc_or(a,b,c)		S_ssc_or(aTHX_ a,b,c)
#define ssc_union(a,b,c)	S_ssc_union(aTHX_ a,b,c)
#define study_chunk(a,b,c,d,e,f,g,h,i,j,k)	S_study_chunk(aTHX_ a,b,c,d,e,f,g,h,i,j,k)
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined (PERL_IN_DUMP_C)
#define _invlist_dump(a,b,c,d)	Perl__invlist_dump(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_PERL_C) || defined(PERL_IN_UTF8_C)
#define _invlistEQ(a,b,c)	Perl__invlistEQ(aTHX_ a,b,c)
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
#define _load_PL_utf8_foldclosures()	Perl__load_PL_utf8_foldclosures(aTHX)
#ifndef PERL_IMPLICIT_CONTEXT
#define re_printf		Perl_re_printf
#endif
#define regprop(a,b,c,d,e)	Perl_regprop(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C)
#define _get_swash_invlist(a)	Perl__get_swash_invlist(aTHX_ a)
#define _invlist_contains_cp	S__invlist_contains_cp
#define _invlist_len		S__invlist_len
#define _invlist_search		Perl__invlist_search
#define _swash_inversion_hash(a)	Perl__swash_inversion_hash(aTHX_ a)
#define get_invlist_offset_addr	S_get_invlist_offset_addr
#define invlist_array		S_invlist_array
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C) || defined(PERL_IN_TOKE_C)
#define _core_swash_init(a,b,c,d,e,f,g)	Perl__core_swash_init(aTHX_ a,b,c,d,e,f,g)
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C) || defined(PERL_IN_DQUOTE_C)
#define form_short_octal_warning(a,b)	S_form_short_octal_warning(aTHX_ a,b)
#define grok_bslash_c(a,b)	Perl_grok_bslash_c(aTHX_ a,b)
#define grok_bslash_o(a,b,c,d,e,f,g)	Perl_grok_bslash_o(aTHX_ a,b,c,d,e,f,g)
#define grok_bslash_x(a,b,c,d,e,f,g)	Perl_grok_bslash_x(aTHX_ a,b,c,d,e,f,g)
#define regcurly		S_regcurly
#  endif
#  if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_UTF8_C)
#define _add_range_to_invlist(a,b,c)	Perl__add_range_to_invlist(aTHX_ a,b,c)
#define _invlist_intersection_maybe_complement_2nd(a,b,c,d)	Perl__invlist_intersection_maybe_complement_2nd(aTHX_ a,b,c,d)
#define _invlist_invert(a)	Perl__invlist_invert(aTHX_ a)
#define _invlist_populate_swatch	Perl__invlist_populate_swatch
#define _invlist_union_maybe_complement_2nd(a,b,c,d)	Perl__invlist_union_maybe_complement_2nd(aTHX_ a,b,c,d)
#define _new_invlist(a)		Perl__new_invlist(aTHX_ a)
#define _setup_canned_invlist(a,b,c)	Perl__setup_canned_invlist(aTHX_ a,b,c)
#define _swash_to_invlist(a)	Perl__swash_to_invlist(aTHX_ a)
#  endif
#  if defined(PERL_IN_REGEXEC_C)
#define advance_one_LB(a,b,c)	S_advance_one_LB(aTHX_ a,b,c)
#define advance_one_SB(a,b,c)	S_advance_one_SB(aTHX_ a,b,c)
#define advance_one_WB(a,b,c,d)	S_advance_one_WB(aTHX_ a,b,c,d)
#define backup_one_LB(a,b,c)	S_backup_one_LB(aTHX_ a,b,c)
#define backup_one_SB(a,b,c)	S_backup_one_SB(aTHX_ a,b,c)
#define backup_one_WB(a,b,c,d)	S_backup_one_WB(aTHX_ a,b,c,d)
#define find_byclass(a,b,c,d,e)	S_find_byclass(aTHX_ a,b,c,d,e)
#define isFOO_lc(a,b)		S_isFOO_lc(aTHX_ a,b)
#define isFOO_utf8_lc(a,b)	S_isFOO_utf8_lc(aTHX_ a,b)
#define isGCB			S_isGCB
#define isLB(a,b,c,d,e,f)	S_isLB(aTHX_ a,b,c,d,e,f)
#define isSB(a,b,c,d,e,f)	S_isSB(aTHX_ a,b,c,d,e,f)
#define isWB(a,b,c,d,e,f,g)	S_isWB(aTHX_ a,b,c,d,e,f,g)
#define reg_check_named_buff_matched	S_reg_check_named_buff_matched
#define regcppop(a,b)		S_regcppop(aTHX_ a,b)
#define regcppush(a,b,c)	S_regcppush(aTHX_ a,b,c)
#define reghop3			S_reghop3
#define reghop4			S_reghop4
#define reghopmaybe3		S_reghopmaybe3
#define reginclass(a,b,c,d,e)	S_reginclass(aTHX_ a,b,c,d,e)
#define regmatch(a,b,c)		S_regmatch(aTHX_ a,b,c)
#define regrepeat(a,b,c,d,e,f)	S_regrepeat(aTHX_ a,b,c,d,e,f)
#define regtry(a,b)		S_regtry(aTHX_ a,b)
#define to_byte_substr(a)	S_to_byte_substr(aTHX_ a)
#define to_utf8_substr(a)	S_to_utf8_substr(aTHX_ a)
#  endif
#  if defined(PERL_IN_UTF8_C) || defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
#define _to_fold_latin1(a,b,c,d)	Perl__to_fold_latin1(aTHX_ a,b,c,d)
#  endif
#endif
#ifdef PERL_CORE
#define Slab_Alloc(a)		Perl_Slab_Alloc(aTHX_ a)
#define Slab_Free(a)		Perl_Slab_Free(aTHX_ a)
#define allocmy(a,b,c)		Perl_allocmy(aTHX_ a,b,c)
#define amagic_is_enabled(a)	Perl_amagic_is_enabled(aTHX_ a)
#define apply(a,b,c)		Perl_apply(aTHX_ a,b,c)
#define av_extend_guts(a,b,c,d,e)	Perl_av_extend_guts(aTHX_ a,b,c,d,e)
#define bind_match(a,b,c)	Perl_bind_match(aTHX_ a,b,c)
#define boot_core_PerlIO()	Perl_boot_core_PerlIO(aTHX)
#define boot_core_UNIVERSAL()	Perl_boot_core_UNIVERSAL(aTHX)
#define boot_core_mro()		Perl_boot_core_mro(aTHX)
#define cando(a,b,c)		Perl_cando(aTHX_ a,b,c)
#define check_utf8_print(a,b)	Perl_check_utf8_print(aTHX_ a,b)
#define ck_anoncode(a)		Perl_ck_anoncode(aTHX_ a)
#define ck_backtick(a)		Perl_ck_backtick(aTHX_ a)
#define ck_bitop(a)		Perl_ck_bitop(aTHX_ a)
#define ck_cmp(a)		Perl_ck_cmp(aTHX_ a)
#define ck_concat(a)		Perl_ck_concat(aTHX_ a)
#define ck_defined(a)		Perl_ck_defined(aTHX_ a)
#define ck_delete(a)		Perl_ck_delete(aTHX_ a)
#define ck_each(a)		Perl_ck_each(aTHX_ a)
#define ck_eof(a)		Perl_ck_eof(aTHX_ a)
#define ck_eval(a)		Perl_ck_eval(aTHX_ a)
#define ck_exec(a)		Perl_ck_exec(aTHX_ a)
#define ck_exists(a)		Perl_ck_exists(aTHX_ a)
#define ck_ftst(a)		Perl_ck_ftst(aTHX_ a)
#define ck_fun(a)		Perl_ck_fun(aTHX_ a)
#define ck_glob(a)		Perl_ck_glob(aTHX_ a)
#define ck_grep(a)		Perl_ck_grep(aTHX_ a)
#define ck_index(a)		Perl_ck_index(aTHX_ a)
#define ck_join(a)		Perl_ck_join(aTHX_ a)
#define ck_length(a)		Perl_ck_length(aTHX_ a)
#define ck_lfun(a)		Perl_ck_lfun(aTHX_ a)
#define ck_listiob(a)		Perl_ck_listiob(aTHX_ a)
#define ck_match(a)		Perl_ck_match(aTHX_ a)
#define ck_method(a)		Perl_ck_method(aTHX_ a)
#define ck_null(a)		Perl_ck_null(aTHX_ a)
#define ck_open(a)		Perl_ck_open(aTHX_ a)
#define ck_prototype(a)		Perl_ck_prototype(aTHX_ a)
#define ck_readline(a)		Perl_ck_readline(aTHX_ a)
#define ck_refassign(a)		Perl_ck_refassign(aTHX_ a)
#define ck_repeat(a)		Perl_ck_repeat(aTHX_ a)
#define ck_require(a)		Perl_ck_require(aTHX_ a)
#define ck_return(a)		Perl_ck_return(aTHX_ a)
#define ck_rfun(a)		Perl_ck_rfun(aTHX_ a)
#define ck_rvconst(a)		Perl_ck_rvconst(aTHX_ a)
#define ck_sassign(a)		Perl_ck_sassign(aTHX_ a)
#define ck_select(a)		Perl_ck_select(aTHX_ a)
#define ck_shift(a)		Perl_ck_shift(aTHX_ a)
#define ck_smartmatch(a)	Perl_ck_smartmatch(aTHX_ a)
#define ck_sort(a)		Perl_ck_sort(aTHX_ a)
#define ck_spair(a)		Perl_ck_spair(aTHX_ a)
#define ck_split(a)		Perl_ck_split(aTHX_ a)
#define ck_stringify(a)		Perl_ck_stringify(aTHX_ a)
#define ck_subr(a)		Perl_ck_subr(aTHX_ a)
#define ck_substr(a)		Perl_ck_substr(aTHX_ a)
#define ck_svconst(a)		Perl_ck_svconst(aTHX_ a)
#define ck_tell(a)		Perl_ck_tell(aTHX_ a)
#define ck_trunc(a)		Perl_ck_trunc(aTHX_ a)
#define closest_cop(a,b,c,d)	Perl_closest_cop(aTHX_ a,b,c,d)
#define core_prototype(a,b,c,d)	Perl_core_prototype(aTHX_ a,b,c,d)
#define coresub_op(a,b,c)	Perl_coresub_op(aTHX_ a,b,c)
#define create_eval_scope(a,b)	Perl_create_eval_scope(aTHX_ a,b)
#define croak_no_mem		Perl_croak_no_mem
#define croak_popstack		Perl_croak_popstack
#define custom_op_get_field(a,b)	Perl_custom_op_get_field(aTHX_ a,b)
#define cv_clone_into(a,b)	Perl_cv_clone_into(aTHX_ a,b)
#define cv_const_sv_or_av	Perl_cv_const_sv_or_av
#define cv_forget_slab(a)	Perl_cv_forget_slab(aTHX_ a)
#define cv_undef_flags(a,b)	Perl_cv_undef_flags(aTHX_ a,b)
#define cvgv_set(a,b)		Perl_cvgv_set(aTHX_ a,b)
#define cvstash_set(a,b)	Perl_cvstash_set(aTHX_ a,b)
#define deb_stack_all()		Perl_deb_stack_all(aTHX)
#define defelem_target(a,b)	Perl_defelem_target(aTHX_ a,b)
#define delete_eval_scope()	Perl_delete_eval_scope(aTHX)
#define die_unwind(a)		Perl_die_unwind(aTHX_ a)
#define do_aexec5(a,b,c,d,e)	Perl_do_aexec5(aTHX_ a,b,c,d,e)
#define do_dump_pad(a,b,c,d)	Perl_do_dump_pad(aTHX_ a,b,c,d)
#define do_eof(a)		Perl_do_eof(aTHX_ a)
#define do_execfree()		Perl_do_execfree(aTHX)
#define do_ncmp(a,b)		Perl_do_ncmp(aTHX_ a,b)
#define do_open6(a,b,c,d,e,f)	Perl_do_open6(aTHX_ a,b,c,d,e,f)
#define do_open_raw(a,b,c,d,e)	Perl_do_open_raw(aTHX_ a,b,c,d,e)
#define do_print(a,b)		Perl_do_print(aTHX_ a,b)
#define do_readline()		Perl_do_readline(aTHX)
#define do_seek(a,b,c)		Perl_do_seek(aTHX_ a,b,c)
#define do_sysseek(a,b,c)	Perl_do_sysseek(aTHX_ a,b,c)
#define do_tell(a)		Perl_do_tell(aTHX_ a)
#define do_trans(a)		Perl_do_trans(aTHX_ a)
#define do_vecget(a,b,c)	Perl_do_vecget(aTHX_ a,b,c)
#define do_vecset(a)		Perl_do_vecset(aTHX_ a)
#define do_vop(a,b,c,d)		Perl_do_vop(aTHX_ a,b,c,d)
#define dofile(a,b)		Perl_dofile(aTHX_ a,b)
#define dump_all_perl(a)	Perl_dump_all_perl(aTHX_ a)
#define dump_packsubs_perl(a,b)	Perl_dump_packsubs_perl(aTHX_ a,b)
#define dump_sub_perl(a,b)	Perl_dump_sub_perl(aTHX_ a,b)
#define finalize_optree(a)	Perl_finalize_optree(aTHX_ a)
#define find_lexical_cv(a)	Perl_find_lexical_cv(aTHX_ a)
#define find_runcv_where(a,b,c)	Perl_find_runcv_where(aTHX_ a,b,c)
#define find_script(a,b,c,d)	Perl_find_script(aTHX_ a,b,c,d)
#define free_tied_hv_pool()	Perl_free_tied_hv_pool(aTHX)
#define get_hash_seed(a)	Perl_get_hash_seed(aTHX_ a)
#define get_no_modify()		Perl_get_no_modify(aTHX)
#define get_opargs()		Perl_get_opargs(aTHX)
#define gv_override(a,b)	Perl_gv_override(aTHX_ a,b)
#define gv_setref(a,b)		Perl_gv_setref(aTHX_ a,b)
#define gv_try_downgrade(a)	Perl_gv_try_downgrade(aTHX_ a)
#define hv_ename_add(a,b,c,d)	Perl_hv_ename_add(aTHX_ a,b,c,d)
#define hv_ename_delete(a,b,c,d)	Perl_hv_ename_delete(aTHX_ a,b,c,d)
#define init_argv_symbols(a,b)	Perl_init_argv_symbols(aTHX_ a,b)
#define init_constants()	Perl_init_constants(aTHX)
#define init_debugger()		Perl_init_debugger(aTHX)
#define invert(a)		Perl_invert(aTHX_ a)
#define io_close(a,b,c,d)	Perl_io_close(aTHX_ a,b,c,d)
#define isinfnansv(a)		Perl_isinfnansv(aTHX_ a)
#define jmaybe(a)		Perl_jmaybe(aTHX_ a)
#define keyword(a,b,c)		Perl_keyword(aTHX_ a,b,c)
#define list(a)			Perl_list(aTHX_ a)
#define localize(a,b)		Perl_localize(aTHX_ a,b)
#define magic_clear_all_env(a,b)	Perl_magic_clear_all_env(aTHX_ a,b)
#define magic_cleararylen_p(a,b)	Perl_magic_cleararylen_p(aTHX_ a,b)
#define magic_clearenv(a,b)	Perl_magic_clearenv(aTHX_ a,b)
#define magic_clearhint(a,b)	Perl_magic_clearhint(aTHX_ a,b)
#define magic_clearhints(a,b)	Perl_magic_clearhints(aTHX_ a,b)
#define magic_clearisa(a,b)	Perl_magic_clearisa(aTHX_ a,b)
#define magic_clearpack(a,b)	Perl_magic_clearpack(aTHX_ a,b)
#define magic_clearsig(a,b)	Perl_magic_clearsig(aTHX_ a,b)
#define magic_copycallchecker(a,b,c,d,e)	Perl_magic_copycallchecker(aTHX_ a,b,c,d,e)
#define magic_existspack(a,b)	Perl_magic_existspack(aTHX_ a,b)
#define magic_freearylen_p(a,b)	Perl_magic_freearylen_p(aTHX_ a,b)
#define magic_freeovrld(a,b)	Perl_magic_freeovrld(aTHX_ a,b)
#define magic_get(a,b)		Perl_magic_get(aTHX_ a,b)
#define magic_getarylen(a,b)	Perl_magic_getarylen(aTHX_ a,b)
#define magic_getdebugvar(a,b)	Perl_magic_getdebugvar(aTHX_ a,b)
#define magic_getdefelem(a,b)	Perl_magic_getdefelem(aTHX_ a,b)
#define magic_getnkeys(a,b)	Perl_magic_getnkeys(aTHX_ a,b)
#define magic_getpack(a,b)	Perl_magic_getpack(aTHX_ a,b)
#define magic_getpos(a,b)	Perl_magic_getpos(aTHX_ a,b)
#define magic_getsig(a,b)	Perl_magic_getsig(aTHX_ a,b)
#define magic_getsubstr(a,b)	Perl_magic_getsubstr(aTHX_ a,b)
#define magic_gettaint(a,b)	Perl_magic_gettaint(aTHX_ a,b)
#define magic_getuvar(a,b)	Perl_magic_getuvar(aTHX_ a,b)
#define magic_getvec(a,b)	Perl_magic_getvec(aTHX_ a,b)
#define magic_killbackrefs(a,b)	Perl_magic_killbackrefs(aTHX_ a,b)
#define magic_nextpack(a,b,c)	Perl_magic_nextpack(aTHX_ a,b,c)
#define magic_regdata_cnt(a,b)	Perl_magic_regdata_cnt(aTHX_ a,b)
#define magic_regdatum_get(a,b)	Perl_magic_regdatum_get(aTHX_ a,b)
#define magic_scalarpack(a,b)	Perl_magic_scalarpack(aTHX_ a,b)
#define magic_set(a,b)		Perl_magic_set(aTHX_ a,b)
#define magic_set_all_env(a,b)	Perl_magic_set_all_env(aTHX_ a,b)
#define magic_setarylen(a,b)	Perl_magic_setarylen(aTHX_ a,b)
#define magic_setdbline(a,b)	Perl_magic_setdbline(aTHX_ a,b)
#define magic_setdebugvar(a,b)	Perl_magic_setdebugvar(aTHX_ a,b)
#define magic_setdefelem(a,b)	Perl_magic_setdefelem(aTHX_ a,b)
#define magic_setenv(a,b)	Perl_magic_setenv(aTHX_ a,b)
#define magic_sethint(a,b)	Perl_magic_sethint(aTHX_ a,b)
#define magic_setisa(a,b)	Perl_magic_setisa(aTHX_ a,b)
#define magic_setlvref(a,b)	Perl_magic_setlvref(aTHX_ a,b)
#define magic_setmglob(a,b)	Perl_magic_setmglob(aTHX_ a,b)
#define magic_setnkeys(a,b)	Perl_magic_setnkeys(aTHX_ a,b)
#define magic_setpack(a,b)	Perl_magic_setpack(aTHX_ a,b)
#define magic_setpos(a,b)	Perl_magic_setpos(aTHX_ a,b)
#define magic_setregexp(a,b)	Perl_magic_setregexp(aTHX_ a,b)
#define magic_setsig(a,b)	Perl_magic_setsig(aTHX_ a,b)
#define magic_setsubstr(a,b)	Perl_magic_setsubstr(aTHX_ a,b)
#define magic_settaint(a,b)	Perl_magic_settaint(aTHX_ a,b)
#define magic_setutf8(a,b)	Perl_magic_setutf8(aTHX_ a,b)
#define magic_setuvar(a,b)	Perl_magic_setuvar(aTHX_ a,b)
#define magic_setvec(a,b)	Perl_magic_setvec(aTHX_ a,b)
#define magic_sizepack(a,b)	Perl_magic_sizepack(aTHX_ a,b)
#define magic_wipepack(a,b)	Perl_magic_wipepack(aTHX_ a,b)
#define mg_localize(a,b,c)	Perl_mg_localize(aTHX_ a,b,c)
#define mode_from_discipline(a,b)	Perl_mode_from_discipline(aTHX_ a,b)
#define mro_isa_changed_in(a)	Perl_mro_isa_changed_in(aTHX_ a)
#define mro_package_moved(a,b,c,d)	Perl_mro_package_moved(aTHX_ a,b,c,d)
#define my_attrs(a,b)		Perl_my_attrs(aTHX_ a,b)
#define my_clearenv()		Perl_my_clearenv(aTHX)
#define my_lstat_flags(a)	Perl_my_lstat_flags(aTHX_ a)
#define my_stat_flags(a)	Perl_my_stat_flags(aTHX_ a)
#define my_unexec()		Perl_my_unexec(aTHX)
#define newATTRSUB_x(a,b,c,d,e,f)	Perl_newATTRSUB_x(aTHX_ a,b,c,d,e,f)
#define newSTUB(a,b)		Perl_newSTUB(aTHX_ a,b)
#define newSVavdefelem(a,b,c)	Perl_newSVavdefelem(aTHX_ a,b,c)
#define newXS_deffile(a,b)	Perl_newXS_deffile(aTHX_ a,b)
#define newXS_len_flags(a,b,c,d,e,f,g)	Perl_newXS_len_flags(aTHX_ a,b,c,d,e,f,g)
#define nextargv(a,b)		Perl_nextargv(aTHX_ a,b)
#define noperl_die		Perl_noperl_die
#define oopsAV(a)		Perl_oopsAV(aTHX_ a)
#define oopsHV(a)		Perl_oopsHV(aTHX_ a)
#define op_unscope(a)		Perl_op_unscope(aTHX_ a)
#define package(a)		Perl_package(aTHX_ a)
#define package_version(a)	Perl_package_version(aTHX_ a)
#define pad_add_weakref(a)	Perl_pad_add_weakref(aTHX_ a)
#define pad_block_start(a)	Perl_pad_block_start(aTHX_ a)
#define pad_fixup_inner_anons(a,b,c)	Perl_pad_fixup_inner_anons(aTHX_ a,b,c)
#define pad_free(a)		Perl_pad_free(aTHX_ a)
#define pad_leavemy()		Perl_pad_leavemy(aTHX)
#define pad_push(a,b)		Perl_pad_push(aTHX_ a,b)
#define pad_swipe(a,b)		Perl_pad_swipe(aTHX_ a,b)
#define padlist_store(a,b,c)	Perl_padlist_store(aTHX_ a,b,c)
#define parse_subsignature()	Perl_parse_subsignature(aTHX)
#define parse_unicode_opts(a)	Perl_parse_unicode_opts(aTHX_ a)
#define parser_free(a)		Perl_parser_free(aTHX_ a)
#define peep(a)			Perl_peep(aTHX_ a)
#define pmruntime(a,b,c,d,e)	Perl_pmruntime(aTHX_ a,b,c,d,e)
#define re_op_compile(a,b,c,d,e,f,g,h)	Perl_re_op_compile(aTHX_ a,b,c,d,e,f,g,h)
#define refcounted_he_chain_2hv(a,b)	Perl_refcounted_he_chain_2hv(aTHX_ a,b)
#define refcounted_he_fetch_pv(a,b,c,d)	Perl_refcounted_he_fetch_pv(aTHX_ a,b,c,d)
#define refcounted_he_fetch_pvn(a,b,c,d,e)	Perl_refcounted_he_fetch_pvn(aTHX_ a,b,c,d,e)
#define refcounted_he_fetch_sv(a,b,c,d)	Perl_refcounted_he_fetch_sv(aTHX_ a,b,c,d)
#define refcounted_he_free(a)	Perl_refcounted_he_free(aTHX_ a)
#define refcounted_he_inc(a)	Perl_refcounted_he_inc(aTHX_ a)
#define refcounted_he_new_pv(a,b,c,d,e)	Perl_refcounted_he_new_pv(aTHX_ a,b,c,d,e)
#define refcounted_he_new_pvn(a,b,c,d,e,f)	Perl_refcounted_he_new_pvn(aTHX_ a,b,c,d,e,f)
#define refcounted_he_new_sv(a,b,c,d,e)	Perl_refcounted_he_new_sv(aTHX_ a,b,c,d,e)
#define report_evil_fh(a)	Perl_report_evil_fh(aTHX_ a)
#define report_wrongway_fh(a,b)	Perl_report_wrongway_fh(aTHX_ a,b)
#define rpeep(a)		Perl_rpeep(aTHX_ a)
#define rsignal_restore(a,b)	Perl_rsignal_restore(aTHX_ a,b)
#define rsignal_save(a,b,c)	Perl_rsignal_save(aTHX_ a,b,c)
#define rxres_save(a,b)		Perl_rxres_save(aTHX_ a,b)
#define save_strlen(a)		Perl_save_strlen(aTHX_ a)
#define sawparens(a)		Perl_sawparens(aTHX_ a)
#define scalar(a)		Perl_scalar(aTHX_ a)
#define scalarvoid(a)		Perl_scalarvoid(aTHX_ a)
#define set_caret_X()		Perl_set_caret_X(aTHX)
#define sub_crush_depth(a)	Perl_sub_crush_depth(aTHX_ a)
#define sv_2num(a)		Perl_sv_2num(aTHX_ a)
#define sv_clean_all()		Perl_sv_clean_all(aTHX)
#define sv_clean_objs()		Perl_sv_clean_objs(aTHX)
#define sv_del_backref(a,b)	Perl_sv_del_backref(aTHX_ a,b)
#define sv_free_arenas()	Perl_sv_free_arenas(aTHX)
#define sv_len_utf8_nomg(a)	Perl_sv_len_utf8_nomg(aTHX_ a)
#define sv_mortalcopy_flags(a,b)	Perl_sv_mortalcopy_flags(aTHX_ a,b)
#define sv_resetpvn(a,b,c)	Perl_sv_resetpvn(aTHX_ a,b,c)
#define sv_sethek(a,b)		Perl_sv_sethek(aTHX_ a,b)
#ifndef PERL_IMPLICIT_CONTEXT
#define tied_method		Perl_tied_method
#endif
#define tmps_grow_p(a)		Perl_tmps_grow_p(aTHX_ a)
#define unshare_hek(a)		Perl_unshare_hek(aTHX_ a)
#define utilize(a,b,c,d,e)	Perl_utilize(aTHX_ a,b,c,d,e)
#define vivify_ref(a,b)		Perl_vivify_ref(aTHX_ a,b)
#define wait4pid(a,b,c)		Perl_wait4pid(aTHX_ a,b,c)
#define watch(a)		Perl_watch(aTHX_ a)
#define write_to_stderr(a)	Perl_write_to_stderr(aTHX_ a)
#define xs_boot_epilog(a)	Perl_xs_boot_epilog(aTHX_ a)
#define yyerror(a)		Perl_yyerror(aTHX_ a)
#define yyerror_pv(a,b)		Perl_yyerror_pv(aTHX_ a,b)
#define yyerror_pvn(a,b,c)	Perl_yyerror_pvn(aTHX_ a,b,c)
#define yyparse(a)		Perl_yyparse(aTHX_ a)
#define yyunlex()		Perl_yyunlex(aTHX)
#  if !(defined(DEBUGGING))
#    if !defined(NV_PRESERVES_UV)
#      if defined(PERL_IN_SV_C)
#define sv_2iuv_non_preserve(a)	S_sv_2iuv_non_preserve(aTHX_ a)
#      endif
#    endif
#  endif
#  if !(defined(HAS_SIGACTION) && defined(SA_SIGINFO))
#define sighandler		Perl_sighandler
#  endif
#  if !(defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION))
#define do_exec(a)		Perl_do_exec(aTHX_ a)
#  endif
#  if !(defined(_MSC_VER))
#define magic_regdatum_set(a,b)	Perl_magic_regdatum_set(aTHX_ a,b)
#  endif
#  if !defined(HAS_GETENV_LEN)
#define getenv_len(a,b)		Perl_getenv_len(aTHX_ a,b)
#  endif
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#    if defined(PERL_IN_PP_SYS_C)
#define dooneliner(a,b)		S_dooneliner(aTHX_ a,b)
#    endif
#  endif
#  if !defined(HAS_RENAME)
#define same_dirent(a,b)	Perl_same_dirent(aTHX_ a,b)
#  endif
#  if !defined(NV_PRESERVES_UV)
#    if defined(DEBUGGING)
#      if defined(PERL_IN_SV_C)
#define sv_2iuv_non_preserve(a,b)	S_sv_2iuv_non_preserve(aTHX_ a,b)
#      endif
#    endif
#  endif
#  if !defined(PERL_DISABLE_PMC)
#    if defined(PERL_IN_PP_CTL_C)
#define doopen_pm(a)		S_doopen_pm(aTHX_ a)
#    endif
#  endif
#  if !defined(PERL_IS_MINIPERL)
#    if defined(PERL_IN_PERL_C)
#define incpush_if_exists(a,b,c)	S_incpush_if_exists(aTHX_ a,b,c)
#    endif
#  endif
#  if !defined(PERL_NO_UTF16_FILTER)
#    if defined(PERL_IN_TOKE_C)
#define add_utf16_textfilter(a,b)	S_add_utf16_textfilter(aTHX_ a,b)
#define utf16_textfilter(a,b,c)	S_utf16_textfilter(aTHX_ a,b,c)
#    endif
#  endif
#  if !defined(USE_QUADMATH)
#    if defined(PERL_IN_NUMERIC_C)
#define mulexp10		S_mulexp10
#    endif
#  endif
#  if !defined(WIN32)
#define do_exec3(a,b,c)		Perl_do_exec3(aTHX_ a,b,c)
#  endif
#  if defined(DEBUGGING)
#define get_debug_opts(a,b)	Perl_get_debug_opts(aTHX_ a,b)
#define set_padlist		Perl_set_padlist
#    if defined(PERL_IN_PAD_C)
#define cv_dump(a,b)		S_cv_dump(aTHX_ a,b)
#    endif
#    if defined(PERL_IN_SV_C)
#define del_sv(a)		S_del_sv(aTHX_ a)
#    endif
#    if defined(PERL_IN_TOKE_C)
#define printbuf(a,b)		S_printbuf(aTHX_ a,b)
#define tokereport(a,b)		S_tokereport(aTHX_ a,b)
#    endif
#  endif
#  if defined(DEBUG_LEAKING_SCALARS_FORK_DUMP)
#define dump_sv_child(a)	Perl_dump_sv_child(aTHX_ a)
#  endif
#  if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
#define do_ipcctl(a,b,c)	Perl_do_ipcctl(aTHX_ a,b,c)
#define do_ipcget(a,b,c)	Perl_do_ipcget(aTHX_ a,b,c)
#define do_msgrcv(a,b)		Perl_do_msgrcv(aTHX_ a,b)
#define do_msgsnd(a,b)		Perl_do_msgsnd(aTHX_ a,b)
#define do_semop(a,b)		Perl_do_semop(aTHX_ a,b)
#define do_shmio(a,b,c)		Perl_do_shmio(aTHX_ a,b,c)
#  endif
#  if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
#define sighandler		Perl_sighandler
#  endif
#  if defined(MYMALLOC)
#define malloc_good_size	Perl_malloc_good_size
#define malloced_size		Perl_malloced_size
#  endif
#  if defined(PERL_CORE)
#define opslab_force_free(a)	Perl_opslab_force_free(aTHX_ a)
#define opslab_free(a)		Perl_opslab_free(aTHX_ a)
#define opslab_free_nopad(a)	Perl_opslab_free_nopad(aTHX_ a)
#define parser_free_nexttoke_ops(a,b)	Perl_parser_free_nexttoke_ops(aTHX_ a,b)
#define should_warn_nl		S_should_warn_nl
#    if defined(PERL_DEBUG_READONLY_OPS)
#define Slab_to_ro(a)		Perl_Slab_to_ro(aTHX_ a)
#define Slab_to_rw(a)		Perl_Slab_to_rw(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_CR_FILTER)
#    if defined(PERL_IN_TOKE_C)
#define cr_textfilter(a,b,c)	S_cr_textfilter(aTHX_ a,b,c)
#define strip_return(a)		S_strip_return(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_DEBUG_READONLY_COW)
#define sv_buf_to_ro(a)		Perl_sv_buf_to_ro(aTHX_ a)
#    if defined(PERL_IN_SV_C)
#define sv_buf_to_rw(a)		S_sv_buf_to_rw(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_IN_AV_C)
#define get_aux_mg(a)		S_get_aux_mg(aTHX_ a)
#  endif
#  if defined(PERL_IN_DEB_C)
#define deb_stack_n(a,b,c,d,e)	S_deb_stack_n(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_DOIO_C)
#define exec_failed(a,b,c)	S_exec_failed(aTHX_ a,b,c)
#define ingroup(a,b)		S_ingroup(aTHX_ a,b)
#define openn_cleanup(a,b,c,d,e,f,g,h,i,j,k,l)	S_openn_cleanup(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l)
#define openn_setup(a,b,c,d,e,f)	S_openn_setup(aTHX_ a,b,c,d,e,f)
#  endif
#  if defined(PERL_IN_DOOP_C)
#define do_trans_complex(a)	S_do_trans_complex(aTHX_ a)
#define do_trans_complex_utf8(a)	S_do_trans_complex_utf8(aTHX_ a)
#define do_trans_count(a)	S_do_trans_count(aTHX_ a)
#define do_trans_count_utf8(a)	S_do_trans_count_utf8(aTHX_ a)
#define do_trans_simple(a)	S_do_trans_simple(aTHX_ a)
#define do_trans_simple_utf8(a)	S_do_trans_simple_utf8(aTHX_ a)
#  endif
#  if defined(PERL_IN_DUMP_C)
#define deb_curcv(a)		S_deb_curcv(aTHX_ a)
#define debprof(a)		S_debprof(aTHX_ a)
#define pm_description(a)	S_pm_description(aTHX_ a)
#define sequence_num(a)		S_sequence_num(aTHX_ a)
#  endif
#  if defined(PERL_IN_GV_C)
#define find_default_stash(a,b,c,d,e,f)	S_find_default_stash(aTHX_ a,b,c,d,e,f)
#define gv_fetchmeth_internal(a,b,c,d,e,f)	S_gv_fetchmeth_internal(aTHX_ a,b,c,d,e,f)
#define gv_init_svtype(a,b)	S_gv_init_svtype(aTHX_ a,b)
#define gv_is_in_main(a,b,c)	S_gv_is_in_main(aTHX_ a,b,c)
#define gv_magicalize(a,b,c,d,e,f)	S_gv_magicalize(aTHX_ a,b,c,d,e,f)
#define gv_magicalize_isa(a)	S_gv_magicalize_isa(aTHX_ a)
#define gv_stashpvn_internal(a,b,c)	S_gv_stashpvn_internal(aTHX_ a,b,c)
#define gv_stashsvpvn_cached(a,b,c,d)	S_gv_stashsvpvn_cached(aTHX_ a,b,c,d)
#define maybe_multimagic_gv(a,b,c)	S_maybe_multimagic_gv(aTHX_ a,b,c)
#define parse_gv_stash_name(a,b,c,d,e,f,g,h)	S_parse_gv_stash_name(aTHX_ a,b,c,d,e,f,g,h)
#define require_tie_mod(a,b,c,d,e)	S_require_tie_mod(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_HV_C)
#define clear_placeholders(a,b)	S_clear_placeholders(aTHX_ a,b)
#define hfreeentries(a)		S_hfreeentries(aTHX_ a)
#define hsplit(a,b,c)		S_hsplit(aTHX_ a,b,c)
#define hv_auxinit(a)		S_hv_auxinit(aTHX_ a)
#define hv_auxinit_internal	S_hv_auxinit_internal
#define hv_delete_common(a,b,c,d,e,f,g)	S_hv_delete_common(aTHX_ a,b,c,d,e,f,g)
#define hv_free_ent_ret(a,b)	S_hv_free_ent_ret(aTHX_ a,b)
#define hv_magic_check		S_hv_magic_check
#define hv_notallowed(a,b,c,d)	S_hv_notallowed(aTHX_ a,b,c,d)
#define new_he()		S_new_he(aTHX)
#define ptr_hash		S_ptr_hash
#define refcounted_he_value(a)	S_refcounted_he_value(aTHX_ a)
#define save_hek_flags		S_save_hek_flags
#define share_hek_flags(a,b,c,d)	S_share_hek_flags(aTHX_ a,b,c,d)
#define unshare_hek_or_pvn(a,b,c,d)	S_unshare_hek_or_pvn(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_MALLOC_C)
#define adjust_size_and_find_bucket	S_adjust_size_and_find_bucket
#  endif
#  if defined(PERL_IN_MG_C)
#define fixup_errno_string(a)	S_fixup_errno_string(aTHX_ a)
#define magic_methcall1(a,b,c,d,e,f)	S_magic_methcall1(aTHX_ a,b,c,d,e,f)
#define magic_methpack(a,b,c)	S_magic_methpack(aTHX_ a,b,c)
#define restore_magic(a)	S_restore_magic(aTHX_ a)
#define save_magic_flags(a,b,c)	S_save_magic_flags(aTHX_ a,b,c)
#define unwind_handler_stack(a)	S_unwind_handler_stack(aTHX_ a)
#  endif
#  if defined(PERL_IN_MG_C) || defined(PERL_IN_PP_C)
#define translate_substr_offsets	Perl_translate_substr_offsets
#  endif
#  if defined(PERL_IN_MRO_C)
#define mro_clean_isarev(a,b,c,d,e,f)	S_mro_clean_isarev(aTHX_ a,b,c,d,e,f)
#define mro_gather_and_rename(a,b,c,d,e)	S_mro_gather_and_rename(aTHX_ a,b,c,d,e)
#define mro_get_linear_isa_dfs(a,b)	S_mro_get_linear_isa_dfs(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_OP_C)
#define apply_attrs(a,b,c)	S_apply_attrs(aTHX_ a,b,c)
#define apply_attrs_my(a,b,c,d)	S_apply_attrs_my(aTHX_ a,b,c,d)
#define assignment_type(a)	S_assignment_type(aTHX_ a)
#define bad_type_gv(a,b,c,d)	S_bad_type_gv(aTHX_ a,b,c,d)
#define bad_type_pv(a,b,c,d)	S_bad_type_pv(aTHX_ a,b,c,d)
#define clear_special_blocks(a,b,c)	S_clear_special_blocks(aTHX_ a,b,c)
#define cop_free(a)		S_cop_free(aTHX_ a)
#define dup_attrlist(a)		S_dup_attrlist(aTHX_ a)
#define finalize_op(a)		S_finalize_op(aTHX_ a)
#define find_and_forget_pmops(a)	S_find_and_forget_pmops(aTHX_ a)
#define fold_constants(a)	S_fold_constants(aTHX_ a)
#define force_list(a,b)		S_force_list(aTHX_ a,b)
#define forget_pmop(a)		S_forget_pmop(aTHX_ a)
#define gen_constant_list(a)	S_gen_constant_list(aTHX_ a)
#define inplace_aassign(a)	S_inplace_aassign(aTHX_ a)
#define is_handle_constructor	S_is_handle_constructor
#define listkids(a)		S_listkids(aTHX_ a)
#define looks_like_bool(a)	S_looks_like_bool(aTHX_ a)
#define modkids(a,b)		S_modkids(aTHX_ a,b)
#define move_proto_attr(a,b,c)	S_move_proto_attr(aTHX_ a,b,c)
#define my_kid(a,b,c)		S_my_kid(aTHX_ a,b,c)
#define newGIVWHENOP(a,b,c,d,e)	S_newGIVWHENOP(aTHX_ a,b,c,d,e)
#define newMETHOP_internal(a,b,c,d)	S_newMETHOP_internal(aTHX_ a,b,c,d)
#define new_logop(a,b,c,d)	S_new_logop(aTHX_ a,b,c,d)
#define no_bareword_allowed(a)	S_no_bareword_allowed(aTHX_ a)
#define no_fh_allowed(a)	S_no_fh_allowed(aTHX_ a)
#define op_integerize(a)	S_op_integerize(aTHX_ a)
#define op_std_init(a)		S_op_std_init(aTHX_ a)
#define pmtrans(a,b,c)		S_pmtrans(aTHX_ a,b,c)
#define process_special_blocks(a,b,c,d)	S_process_special_blocks(aTHX_ a,b,c,d)
#define ref_array_or_hash(a)	S_ref_array_or_hash(aTHX_ a)
#define refkids(a,b)		S_refkids(aTHX_ a,b)
#define scalar_mod_type		S_scalar_mod_type
#define scalarboolean(a)	S_scalarboolean(aTHX_ a)
#define scalarkids(a)		S_scalarkids(aTHX_ a)
#define scalarseq(a)		S_scalarseq(aTHX_ a)
#define search_const(a)		S_search_const(aTHX_ a)
#define simplify_sort(a)	S_simplify_sort(aTHX_ a)
#define too_few_arguments_pv(a,b,c)	S_too_few_arguments_pv(aTHX_ a,b,c)
#define too_many_arguments_pv(a,b,c)	S_too_many_arguments_pv(aTHX_ a,b,c)
#    if defined(USE_ITHREADS)
#define op_relocate_sv(a,b)	S_op_relocate_sv(aTHX_ a,b)
#    endif
#  endif
#  if defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C)
#define report_redefined_cv(a,b,c)	Perl_report_redefined_cv(aTHX_ a,b,c)
#  endif
#  if defined(PERL_IN_PAD_C)
#define pad_alloc_name(a,b,c,d)	S_pad_alloc_name(aTHX_ a,b,c,d)
#define pad_check_dup(a,b,c)	S_pad_check_dup(aTHX_ a,b,c)
#define pad_findlex(a,b,c,d,e,f,g,h,i)	S_pad_findlex(aTHX_ a,b,c,d,e,f,g,h,i)
#define pad_reset()		S_pad_reset(aTHX)
#  endif
#  if defined(PERL_IN_PERL_C)
#define find_beginning(a,b)	S_find_beginning(aTHX_ a,b)
#define forbid_setid(a,b)	S_forbid_setid(aTHX_ a,b)
#define incpush(a,b,c)		S_incpush(aTHX_ a,b,c)
#define incpush_use_sep(a,b,c)	S_incpush_use_sep(aTHX_ a,b,c)
#define init_ids()		S_init_ids(aTHX)
#define init_interp()		S_init_interp(aTHX)
#define init_main_stash()	S_init_main_stash(aTHX)
#define init_perllib()		S_init_perllib(aTHX)
#define init_postdump_symbols(a,b,c)	S_init_postdump_symbols(aTHX_ a,b,c)
#define init_predump_symbols()	S_init_predump_symbols(aTHX)
#define mayberelocate(a,b,c)	S_mayberelocate(aTHX_ a,b,c)
#define minus_v()		S_minus_v(aTHX)
#define my_exit_jump()		S_my_exit_jump(aTHX)
#define nuke_stacks()		S_nuke_stacks(aTHX)
#define open_script(a,b,c)	S_open_script(aTHX_ a,b,c)
#define parse_body(a,b)		S_parse_body(aTHX_ a,b)
#define run_body(a)		S_run_body(aTHX_ a)
#define usage()			S_usage(aTHX)
#  endif
#  if defined(PERL_IN_PP_C)
#define do_chomp(a,b,c)		S_do_chomp(aTHX_ a,b,c)
#define do_delete_local()	S_do_delete_local(aTHX)
#define refto(a)		S_refto(aTHX_ a)
#  endif
#  if defined(PERL_IN_PP_CTL_C)
#define check_type_and_open(a)	S_check_type_and_open(aTHX_ a)
#define destroy_matcher(a)	S_destroy_matcher(aTHX_ a)
#define do_smartmatch(a,b,c)	S_do_smartmatch(aTHX_ a,b,c)
#define docatch(a)		S_docatch(aTHX_ a)
#define doeval_compile(a,b,c,d)	S_doeval_compile(aTHX_ a,b,c,d)
#define dofindlabel(a,b,c,d,e,f)	S_dofindlabel(aTHX_ a,b,c,d,e,f)
#define doparseform(a)		S_doparseform(aTHX_ a)
#define dopoptoeval(a)		S_dopoptoeval(aTHX_ a)
#define dopoptogivenfor(a)	S_dopoptogivenfor(aTHX_ a)
#define dopoptolabel(a,b,c)	S_dopoptolabel(aTHX_ a,b,c)
#define dopoptoloop(a)		S_dopoptoloop(aTHX_ a)
#define dopoptosub_at(a,b)	S_dopoptosub_at(aTHX_ a,b)
#define dopoptowhen(a)		S_dopoptowhen(aTHX_ a)
#define make_matcher(a)		S_make_matcher(aTHX_ a)
#define matcher_matches_sv(a,b)	S_matcher_matches_sv(aTHX_ a,b)
#define num_overflow		S_num_overflow
#define path_is_searchable	S_path_is_searchable
#define run_user_filter(a,b,c)	S_run_user_filter(aTHX_ a,b,c)
#define rxres_free(a)		S_rxres_free(aTHX_ a)
#define rxres_restore(a,b)	S_rxres_restore(aTHX_ a,b)
#define save_lines(a,b)		S_save_lines(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_PP_HOT_C)
#define do_oddball(a,b)		S_do_oddball(aTHX_ a,b)
#define opmethod_stash(a)	S_opmethod_stash(aTHX_ a)
#  endif
#  if defined(PERL_IN_PP_PACK_C)
#define div128(a,b)		S_div128(aTHX_ a,b)
#define first_symbol		S_first_symbol
#define get_num(a,b)		S_get_num(aTHX_ a,b)
#define group_end(a,b,c)	S_group_end(aTHX_ a,b,c)
#define is_an_int(a,b)		S_is_an_int(aTHX_ a,b)
#define measure_struct(a)	S_measure_struct(aTHX_ a)
#define mul128(a,b)		S_mul128(aTHX_ a,b)
#define my_bytes_to_utf8	S_my_bytes_to_utf8
#define need_utf8		S_need_utf8
#define next_symbol(a)		S_next_symbol(aTHX_ a)
#define pack_rec(a,b,c,d)	S_pack_rec(aTHX_ a,b,c,d)
#define sv_exp_grow(a,b)	S_sv_exp_grow(aTHX_ a,b)
#define unpack_rec(a,b,c,d,e)	S_unpack_rec(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_PP_SORT_C)
#define amagic_cmp(a,b)		S_amagic_cmp(aTHX_ a,b)
#define amagic_i_ncmp(a,b)	S_amagic_i_ncmp(aTHX_ a,b)
#define amagic_ncmp(a,b)	S_amagic_ncmp(aTHX_ a,b)
#define qsortsvu(a,b,c)		S_qsortsvu(aTHX_ a,b,c)
#define sortcv(a,b)		S_sortcv(aTHX_ a,b)
#define sortcv_stacked(a,b)	S_sortcv_stacked(aTHX_ a,b)
#define sortcv_xsub(a,b)	S_sortcv_xsub(aTHX_ a,b)
#define sv_i_ncmp(a,b)		S_sv_i_ncmp(aTHX_ a,b)
#define sv_ncmp(a,b)		S_sv_ncmp(aTHX_ a,b)
#    if defined(USE_LOCALE_COLLATE)
#define amagic_cmp_locale(a,b)	S_amagic_cmp_locale(aTHX_ a,b)
#    endif
#  endif
#  if defined(PERL_IN_PP_SYS_C)
#define doform(a,b,c)		S_doform(aTHX_ a,b,c)
#define space_join_names_mortal(a)	S_space_join_names_mortal(aTHX_ a)
#  endif
#  if defined(PERL_IN_SCOPE_C)
#define save_pushptri32ptr(a,b,c,d)	S_save_pushptri32ptr(aTHX_ a,b,c,d)
#define save_scalar_at(a,b)	S_save_scalar_at(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_SV_C)
#define F0convert		S_F0convert
#define anonymise_cv_maybe(a,b)	S_anonymise_cv_maybe(aTHX_ a,b)
#define assert_uft8_cache_coherent(a,b,c,d)	S_assert_uft8_cache_coherent(aTHX_ a,b,c,d)
#define curse(a,b)		S_curse(aTHX_ a,b)
#define expect_number(a)	S_expect_number(aTHX_ a)
#define find_array_subscript(a,b)	S_find_array_subscript(aTHX_ a,b)
#define find_hash_subscript(a,b)	S_find_hash_subscript(aTHX_ a,b)
#define find_uninit_var(a,b,c,d)	S_find_uninit_var(aTHX_ a,b,c,d)
#define glob_2number(a)		S_glob_2number(aTHX_ a)
#define glob_assign_glob(a,b,c)	S_glob_assign_glob(aTHX_ a,b,c)
#define more_sv()		S_more_sv(aTHX)
#define not_a_number(a)		S_not_a_number(aTHX_ a)
#define not_incrementable(a)	S_not_incrementable(aTHX_ a)
#define ptr_table_find		S_ptr_table_find
#define sv_2iuv_common(a)	S_sv_2iuv_common(aTHX_ a)
#define sv_add_arena(a,b,c)	S_sv_add_arena(aTHX_ a,b,c)
#define sv_display(a,b,c)	S_sv_display(aTHX_ a,b,c)
#define sv_pos_b2u_midway(a,b,c,d)	S_sv_pos_b2u_midway(aTHX_ a,b,c,d)
#define sv_pos_u2b_cached(a,b,c,d,e,f,g)	S_sv_pos_u2b_cached(aTHX_ a,b,c,d,e,f,g)
#define sv_pos_u2b_forwards	S_sv_pos_u2b_forwards
#define sv_pos_u2b_midway	S_sv_pos_u2b_midway
#define sv_unglob(a,b)		S_sv_unglob(aTHX_ a,b)
#define uiv_2buf		S_uiv_2buf
#define utf8_mg_len_cache_update(a,b,c)	S_utf8_mg_len_cache_update(aTHX_ a,b,c)
#define utf8_mg_pos_cache_update(a,b,c,d,e)	S_utf8_mg_pos_cache_update(aTHX_ a,b,c,d,e)
#define visit(a,b,c)		S_visit(aTHX_ a,b,c)
#    if defined(USE_ITHREADS)
#define sv_dup_common(a,b)	S_sv_dup_common(aTHX_ a,b)
#define sv_dup_inc_multiple(a,b,c,d)	S_sv_dup_inc_multiple(aTHX_ a,b,c,d)
#define unreferenced_to_tmp_stack(a)	S_unreferenced_to_tmp_stack(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_IN_SV_C) || defined (PERL_IN_OP_C)
#define varname(a,b,c,d,e,f)	Perl_varname(aTHX_ a,b,c,d,e,f)
#  endif
#  if defined(PERL_IN_TOKE_C)
#define ao(a)			S_ao(aTHX_ a)
#define check_uni()		S_check_uni(aTHX)
#define checkcomma(a,b,c)	S_checkcomma(aTHX_ a,b,c)
#define deprecate_commaless_var_list()	S_deprecate_commaless_var_list(aTHX)
#define filter_gets(a,b)	S_filter_gets(aTHX_ a,b)
#define find_in_my_stash(a,b)	S_find_in_my_stash(aTHX_ a,b)
#define force_ident(a,b)	S_force_ident(aTHX_ a,b)
#define force_ident_maybe_lex(a)	S_force_ident_maybe_lex(aTHX_ a)
#define force_next(a)		S_force_next(aTHX_ a)
#define force_strict_version(a)	S_force_strict_version(aTHX_ a)
#define force_version(a,b)	S_force_version(aTHX_ a,b)
#define force_word(a,b,c,d)	S_force_word(aTHX_ a,b,c,d)
#define get_and_check_backslash_N_name(a,b)	S_get_and_check_backslash_N_name(aTHX_ a,b)
#define incline(a)		S_incline(aTHX_ a)
#define intuit_method(a,b,c)	S_intuit_method(aTHX_ a,b,c)
#define intuit_more(a)		S_intuit_more(aTHX_ a)
#define lop(a,b,c)		S_lop(aTHX_ a,b,c)
#define missingterm(a)		S_missingterm(aTHX_ a)
#define no_op(a,b)		S_no_op(aTHX_ a,b)
#define parse_ident(a,b,c,d,e)	S_parse_ident(aTHX_ a,b,c,d,e)
#define pending_ident()		S_pending_ident(aTHX)
#define scan_const(a)		S_scan_const(aTHX_ a)
#define scan_formline(a)	S_scan_formline(aTHX_ a)
#define scan_heredoc(a)		S_scan_heredoc(aTHX_ a)
#define scan_ident(a,b,c,d)	S_scan_ident(aTHX_ a,b,c,d)
#define scan_inputsymbol(a)	S_scan_inputsymbol(aTHX_ a)
#define scan_pat(a,b)		S_scan_pat(aTHX_ a,b)
#define scan_str(a,b,c,d,e)	S_scan_str(aTHX_ a,b,c,d,e)
#define scan_subst(a)		S_scan_subst(aTHX_ a)
#define scan_trans(a)		S_scan_trans(aTHX_ a)
#define scan_word(a,b,c,d,e)	S_scan_word(aTHX_ a,b,c,d,e)
#define skipspace_flags(a,b)	S_skipspace_flags(aTHX_ a,b)
#define sublex_done()		S_sublex_done(aTHX)
#define sublex_push()		S_sublex_push(aTHX)
#define sublex_start()		S_sublex_start(aTHX)
#define swallow_bom(a)		S_swallow_bom(aTHX_ a)
#define tokenize_use(a,b)	S_tokenize_use(aTHX_ a,b)
#define tokeq(a)		S_tokeq(aTHX_ a)
#define update_debugger_info(a,b,c)	S_update_debugger_info(aTHX_ a,b,c)
#define yywarn(a,b)		S_yywarn(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_UNIVERSAL_C)
#define isa_lookup(a,b,c,d)	S_isa_lookup(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_UTF8_C)
#define _to_utf8_case(a,b,c,d,e,f,g)	S__to_utf8_case(aTHX_ a,b,c,d,e,f,g)
#define check_locale_boundary_crossing(a,b,c,d)	S_check_locale_boundary_crossing(aTHX_ a,b,c,d)
#define is_utf8_common(a,b,c,d)	S_is_utf8_common(aTHX_ a,b,c,d)
#define swash_scan_list_line(a,b,c,d,e,f,g)	S_swash_scan_list_line(aTHX_ a,b,c,d,e,f,g)
#define swatch_get(a,b,c)	S_swatch_get(aTHX_ a,b,c)
#define to_lower_latin1		S_to_lower_latin1
#  endif
#  if defined(PERL_IN_UTF8_C) || defined(PERL_IN_PP_C)
#define _to_upper_title_latin1(a,b,c,d)	Perl__to_upper_title_latin1(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_UTIL_C)
#define ckwarn_common(a)	S_ckwarn_common(aTHX_ a)
#define invoke_exception_hook(a,b)	S_invoke_exception_hook(aTHX_ a,b)
#define mess_alloc()		S_mess_alloc(aTHX)
#define with_queued_errors(a)	S_with_queued_errors(aTHX_ a)
#    if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
#define mem_log_common		S_mem_log_common
#    endif
#  endif
#  if defined(PERL_MEM_LOG)
#define mem_log_alloc		Perl_mem_log_alloc
#define mem_log_free		Perl_mem_log_free
#define mem_log_realloc		Perl_mem_log_realloc
#  endif
#  if defined(PERL_USES_PL_PIDSTATUS) && defined(PERL_IN_UTIL_C)
#define pidgone(a,b)		S_pidgone(aTHX_ a,b)
#  endif
#  if defined(USE_C_BACKTRACE)
#define get_c_backtrace(a,b)	Perl_get_c_backtrace(aTHX_ a,b)
#  endif
#  if defined(USE_ITHREADS)
#define mro_meta_dup(a,b)	Perl_mro_meta_dup(aTHX_ a,b)
#define padlist_dup(a,b)	Perl_padlist_dup(aTHX_ a,b)
#define padname_dup(a,b)	Perl_padname_dup(aTHX_ a,b)
#define padnamelist_dup(a,b)	Perl_padnamelist_dup(aTHX_ a,b)
#  endif
#  if defined(USE_LOCALE) && defined(PERL_IN_LOCALE_C)
#define stdize_locale(a)	S_stdize_locale(aTHX_ a)
#  endif
#  if defined(USE_LOCALE_COLLATE)
#define magic_setcollxfrm(a,b)	Perl_magic_setcollxfrm(aTHX_ a,b)
#define mem_collxfrm(a,b,c)	Perl_mem_collxfrm(aTHX_ a,b,c)
#  endif
#  if defined(USE_PERLIO)
#define PerlIO_restore_errno(a)	Perl_PerlIO_restore_errno(aTHX_ a)
#define PerlIO_save_errno(a)	Perl_PerlIO_save_errno(aTHX_ a)
#  endif
#  if defined(_MSC_VER)
#define magic_regdatum_set(a,b)	Perl_magic_regdatum_set(aTHX_ a,b)
#  endif
#endif

#endif	/* #ifndef PERL_NO_SHORT_NAMES */

/* Compatibility stubs.  Compile extensions with -DPERL_NOCOMPAT to
   disable them.
 */

#if !defined(PERL_CORE)
#  define sv_setptrobj(rv,ptr,name)	sv_setref_iv(rv,name,PTR2IV(ptr))
#  define sv_setptrref(rv,ptr)		sv_setref_iv(rv,NULL,PTR2IV(ptr))
#endif

#if !defined(PERL_CORE) && !defined(PERL_NOCOMPAT)

/* Compatibility for various misnamed functions.  All functions
   in the API that begin with "perl_" (not "Perl_") take an explicit
   interpreter context pointer.
   The following are not like that, but since they had a "perl_"
   prefix in previous versions, we provide compatibility macros.
 */
#  define perl_atexit(a,b)		call_atexit(a,b)
#  define perl_call_argv(a,b,c)		call_argv(a,b,c)
#  define perl_call_method(a,b)		call_method(a,b)
#  define perl_call_pv(a,b)		call_pv(a,b)
#  define perl_call_sv(a,b)		call_sv(a,b)
#  define perl_eval_pv(a,b)		eval_pv(a,b)
#  define perl_eval_sv(a,b)		eval_sv(a,b)
#  define perl_get_av(a,b)		get_av(a,b)
#  define perl_get_cv(a,b)		get_cv(a,b)
#  define perl_get_hv(a,b)		get_hv(a,b)
#  define perl_get_sv(a,b)		get_sv(a,b)
#  define perl_init_i18nl10n(a)		init_i18nl10n(a)
#  define perl_init_i18nl14n(a)		init_i18nl14n(a)
#  define perl_new_collate(a)		new_collate(a)
#  define perl_new_ctype(a)		new_ctype(a)
#  define perl_new_numeric(a)		new_numeric(a)
#  define perl_require_pv(a)		require_pv(a)

/* varargs functions can't be handled with CPP macros. :-(
   This provides a set of compatibility functions that don't take
   an extra argument but grab the context pointer using the macro
   dTHX.
 */
#if defined(PERL_IMPLICIT_CONTEXT) && !defined(PERL_NO_SHORT_NAMES)
#  define croak			Perl_croak_nocontext
#  define deb			Perl_deb_nocontext
#  define die			Perl_die_nocontext
#  define form			Perl_form_nocontext
#  define load_module		Perl_load_module_nocontext
#  define mess			Perl_mess_nocontext
#  define newSVpvf		Perl_newSVpvf_nocontext
#  define sv_catpvf		Perl_sv_catpvf_nocontext
#  define sv_catpvf_mg		Perl_sv_catpvf_mg_nocontext
#  define sv_setpvf		Perl_sv_setpvf_nocontext
#  define sv_setpvf_mg		Perl_sv_setpvf_mg_nocontext
#  define warn			Perl_warn_nocontext
#  define warner		Perl_warner_nocontext
#endif

#endif /* !defined(PERL_CORE) && !defined(PERL_NOCOMPAT) */

#if !defined(PERL_IMPLICIT_CONTEXT)
/* undefined symbols, point them back at the usual ones */
#  define Perl_croak_nocontext	Perl_croak
#  define Perl_deb_nocontext	Perl_deb
#  define Perl_die_nocontext	Perl_die
#  define Perl_form_nocontext	Perl_form
#  define Perl_load_module_nocontext	Perl_load_module
#  define Perl_mess_nocontext	Perl_mess
#  define Perl_newSVpvf_nocontext	Perl_newSVpvf
#  define Perl_sv_catpvf_nocontext	Perl_sv_catpvf
#  define Perl_sv_catpvf_mg_nocontext	Perl_sv_catpvf_mg
#  define Perl_sv_setpvf_nocontext	Perl_sv_setpvf
#  define Perl_sv_setpvf_mg_nocontext	Perl_sv_setpvf_mg
#  define Perl_warn_nocontext	Perl_warn
#  define Perl_warner_nocontext	Perl_warner
#endif

/* ex: set ro: */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen/feature.pl.
   Any changes made here will be lost!
 */


#if defined(PERL_CORE) || defined (PERL_EXT)

#define HINT_FEATURE_SHIFT	26

#define FEATURE_BUNDLE_DEFAULT	0
#define FEATURE_BUNDLE_510	1
#define FEATURE_BUNDLE_511	2
#define FEATURE_BUNDLE_515	3
#define FEATURE_BUNDLE_523	4
#define FEATURE_BUNDLE_CUSTOM	(HINT_FEATURE_MASK >> HINT_FEATURE_SHIFT)

#define CURRENT_HINTS \
    (PL_curcop == &PL_compiling ? PL_hints : PL_curcop->cop_hints)
#define CURRENT_FEATURE_BUNDLE \
    ((CURRENT_HINTS & HINT_FEATURE_MASK) >> HINT_FEATURE_SHIFT)

/* Avoid using ... && Perl_feature_is_enabled(...) as that triggers a bug in
   the HP-UX cc on PA-RISC */
#define FEATURE_IS_ENABLED(name)				        \
	((CURRENT_HINTS							 \
	   & HINT_LOCALIZE_HH)						  \
	    ? Perl_feature_is_enabled(aTHX_ STR_WITH_LEN(name)) : FALSE)
/* The longest string we pass in.  */
#define MAX_FEATURE_LEN (sizeof("postderef_qq")-1)

#define FEATURE_FC_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_515 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("fc")) \
    )

#define FEATURE_SAY_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_510 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("say")) \
    )

#define FEATURE_STATE_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_510 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("state")) \
    )

#define FEATURE_SWITCH_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_510 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("switch")) \
    )

#define FEATURE_BITWISE_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("bitwise") \
    )

#define FEATURE_EVALBYTES_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_515 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("evalbytes")) \
    )

#define FEATURE_POSTDEREF_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("postderef") \
    )

#define FEATURE_ARYBASE_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_511 \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("arybase")) \
    )

#define FEATURE_SIGNATURES_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("signatures") \
    )

#define FEATURE___SUB___IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_515 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("__SUB__")) \
    )

#define FEATURE_REFALIASING_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("refaliasing") \
    )

#define FEATURE_LEXSUBS_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("lexsubs") \
    )

#define FEATURE_POSTDEREF_QQ_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_523 \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("postderef_qq")) \
    )

#define FEATURE_UNIEVAL_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_515 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("unieval")) \
    )

#define FEATURE_UNICODE_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_511 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_523) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED("unicode")) \
    )


#endif /* PERL_CORE or PERL_EXT */

#ifdef PERL_IN_OP_C
PERL_STATIC_INLINE void
S_enable_feature_bundle(pTHX_ SV *ver)
{
    SV *comp_ver = sv_newmortal();
    PL_hints = (PL_hints &~ HINT_FEATURE_MASK)
	     | (
		  (sv_setnv(comp_ver, 5.023),
		   vcmp(ver, upg_version(comp_ver, FALSE)) >= 0)
			? FEATURE_BUNDLE_523 :
		  (sv_setnv(comp_ver, 5.015),
		   vcmp(ver, upg_version(comp_ver, FALSE)) >= 0)
			? FEATURE_BUNDLE_515 :
		  (sv_setnv(comp_ver, 5.011),
		   vcmp(ver, upg_version(comp_ver, FALSE)) >= 0)
			? FEATURE_BUNDLE_511 :
		  (sv_setnv(comp_ver, 5.009005),
		   vcmp(ver, upg_version(comp_ver, FALSE)) >= 0)
			? FEATURE_BUNDLE_510 :
			  FEATURE_BUNDLE_DEFAULT
	       ) << HINT_FEATURE_SHIFT;
    /* special case */
    assert(PL_curcop == &PL_compiling);
    if (FEATURE_UNICODE_IS_ENABLED) PL_hints |=  HINT_UNI_8_BIT;
    else			    PL_hints &= ~HINT_UNI_8_BIT;
}
#endif /* PERL_IN_OP_C */

/* ex: set ro: */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         /**************************************************************************
* WARNING: 'git_version.h' is automatically generated by make_patchnum.pl
*          DO NOT EDIT DIRECTLY - edit make_patchnum.pl instead
***************************************************************************/

#define PERL_GIT_UNPUSHED_COMMITS		\
    /*leave-this-comment*/

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /*    gv.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
 *    2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

struct gp {
    SV *	gp_sv;		/* scalar value */
    struct io *	gp_io;		/* filehandle value */
    CV *	gp_cv;		/* subroutine value */
    U32		gp_cvgen;	/* generational validity of cached gp_cv */
    U32		gp_refcnt;	/* how many globs point to this? */
    HV *	gp_hv;		/* hash value */
    AV *	gp_av;		/* array value */
    CV *	gp_form;	/* format value */
    GV *	gp_egv;		/* effective gv, if *glob */
    PERL_BITFIELD32 gp_line:31;	/* line first declared at (for -w) */
    PERL_BITFIELD32 gp_flags:1;
    HEK *	gp_file_hek;	/* file first declared in (for -w) */
};

#define GvXPVGV(gv)	((XPVGV*)SvANY(gv))


#if defined (DEBUGGING) && defined(__GNUC__) && !defined(PERL_GCC_BRACE_GROUPS_FORBIDDEN) && !defined(__INTEL_COMPILER)
#  define GvGP(gv)							\
	(0+(*({GV *const _gvgp = (GV *) (gv);				\
	    assert(SvTYPE(_gvgp) == SVt_PVGV || SvTYPE(_gvgp) == SVt_PVLV); \
	    assert(isGV_with_GP(_gvgp));				\
	    &((_gvgp)->sv_u.svu_gp);})))
#  define GvGP_set(gv,gp)						\
	{GV *const _gvgp = (GV *) (gv);				\
	    assert(SvTYPE(_gvgp) == SVt_PVGV || SvTYPE(_gvgp) == SVt_PVLV); \
	    assert(isGV_with_GP(_gvgp));				\
	    (_gvgp)->sv_u.svu_gp = (gp); }
#  define GvFLAGS(gv)							\
	(*({GV *const _gvflags = (GV *) (gv);				\
	    assert(SvTYPE(_gvflags) == SVt_PVGV || SvTYPE(_gvflags) == SVt_PVLV); \
	    assert(isGV_with_GP(_gvflags));				\
	    &(GvXPVGV(_gvflags)->xpv_cur);}))
#  define GvSTASH(gv)							\
	(*({ GV * const _gvstash = (GV *) (gv);				\
	    assert(isGV_with_GP(_gvstash));				\
	    assert(SvTYPE(_gvstash) == SVt_PVGV || SvTYPE(_gvstash) >= SVt_PVLV); \
	    &(GvXPVGV(_gvstash)->xnv_u.xgv_stash);			\
	 }))
#  define GvNAME_HEK(gv)						\
    (*({ GV * const _gvname_hek = (GV *) (gv);				\
	   assert(isGV_with_GP(_gvname_hek));				\
	   assert(SvTYPE(_gvname_hek) == SVt_PVGV || SvTYPE(_gvname_hek) >= SVt_PVLV); \
	   assert(!SvVALID(_gvname_hek));				\
	   &(GvXPVGV(_gvname_hek)->xiv_u.xivu_namehek);			\
	 }))
#  define GvNAME_get(gv)	({ assert(GvNAME_HEK(gv)); (char *)HEK_KEY(GvNAME_HEK(gv)); })
#  define GvNAMELEN_get(gv)	({ assert(GvNAME_HEK(gv)); HEK_LEN(GvNAME_HEK(gv)); })
#  define GvNAMEUTF8(gv)	({ assert(GvNAME_HEK(gv)); HEK_UTF8(GvNAME_HEK(gv)); })
#else
#  define GvGP(gv)	(0+(gv)->sv_u.svu_gp)
#  define GvGP_set(gv,gp)	((gv)->sv_u.svu_gp = (gp))
#  define GvFLAGS(gv)	(GvXPVGV(gv)->xpv_cur)
#  define GvSTASH(gv)	(GvXPVGV(gv)->xnv_u.xgv_stash)
#  define GvNAME_HEK(gv)	(GvXPVGV(gv)->xiv_u.xivu_namehek)
#  define GvNAME_get(gv)	HEK_KEY(GvNAME_HEK(gv))
#  define GvNAMELEN_get(gv)	HEK_LEN(GvNAME_HEK(gv))
#  define GvNAMEUTF8(gv)	HEK_UTF8(GvNAME_HEK(gv))
#endif

#define GvNAME(gv)	GvNAME_get(gv)
#define GvNAMELEN(gv)	GvNAMELEN_get(gv)

/*
=head1 GV Functions

=for apidoc Am|SV*|GvSV|GV* gv

Return the SV from the GV.

=for apidoc Am|AV*|GvAV|GV* gv

Return the AV from the GV.

=for apidoc Am|HV*|GvHV|GV* gv

Return the HV from the GV.

=for apidoc Am|CV*|GvCV|GV* gv

Return the CV from the GV.

=cut
*/

#define GvSV(gv)	(GvGP(gv)->gp_sv)
#ifdef PERL_DONT_CREATE_GVSV
#define GvSVn(gv)	(*(GvGP(gv)->gp_sv ? \
			 &(GvGP(gv)->gp_sv) : \
			 &(GvGP(gv_SVadd(gv))->gp_sv)))
#else
#define GvSVn(gv)	GvSV(gv)
#endif

#define GvREFCNT(gv)	(GvGP(gv)->gp_refcnt)
#define GvIO(gv)                         \
 (                                        \
     (gv)                                  \
  && (                                      \
         SvTYPE((const SV*)(gv)) == SVt_PVGV \
      || SvTYPE((const SV*)(gv)) == SVt_PVLV  \
     )                                         \
  && GvGP(gv)                                   \
   ? GvIOp(gv)                                   \
   : NULL                                         \
 )
#define GvIOp(gv)	(GvGP(gv)->gp_io)
#define GvIOn(gv)	(GvIO(gv) ? GvIOp(gv) : GvIOp(gv_IOadd(gv)))

#define GvFORM(gv)	(GvGP(gv)->gp_form)
#define GvAV(gv)	(GvGP(gv)->gp_av)

#define GvAVn(gv)	(GvGP(gv)->gp_av ? \
			 GvGP(gv)->gp_av : \
			 GvGP(gv_AVadd(gv))->gp_av)
#define GvHV(gv)	((GvGP(gv))->gp_hv)

#define GvHVn(gv)	(GvGP(gv)->gp_hv ? \
			 GvGP(gv)->gp_hv : \
			 GvGP(gv_HVadd(gv))->gp_hv)

#define GvCV(gv)	(0+GvGP(gv)->gp_cv)
#define GvCV_set(gv,cv)	(GvGP(gv)->gp_cv = (cv))
#define GvCVGEN(gv)	(GvGP(gv)->gp_cvgen)
#define GvCVu(gv)	(GvGP(gv)->gp_cvgen ? NULL : GvGP(gv)->gp_cv)

#define GvGPFLAGS(gv)	(GvGP(gv)->gp_flags)

#define GvLINE(gv)	(GvGP(gv)->gp_line)
#define GvFILE_HEK(gv)	(GvGP(gv)->gp_file_hek)
#define GvFILEx(gv)	HEK_KEY(GvFILE_HEK(gv))
#define GvFILE(gv)	(GvFILE_HEK(gv) ? GvFILEx(gv) : NULL)
#define GvFILEGV(gv)	(GvFILE_HEK(gv) ? gv_fetchfile(GvFILEx(gv)) : NULL)

#define GvEGV(gv)	(GvGP(gv)->gp_egv)
#define GvEGVx(gv)	(isGV_with_GP(gv) ? GvEGV(gv) : NULL)
#define GvENAME(gv)	GvNAME(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAMELEN(gv)  GvNAMELEN(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAMEUTF8(gv) GvNAMEUTF8(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAME_HEK(gv) GvNAME_HEK(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvESTASH(gv)	GvSTASH(GvEGV(gv) ? GvEGV(gv) : gv)

/* GVf_INTRO is one-shot flag which indicates that the next assignment
   of a reference to the glob is to be localised; it distinguishes
   'local *g = $ref' from '*g = $ref'.
*/
#define GVf_INTRO	0x01
#define GVf_MULTI	0x02
#define GVf_ASSUMECV	0x04
/*	UNUSED		0x08 */
#define GVf_IMPORTED	0xF0
#define GVf_IMPORTED_SV	  0x10
#define GVf_IMPORTED_AV	  0x20
#define GVf_IMPORTED_HV	  0x40
#define GVf_IMPORTED_CV	  0x80

#define GvINTRO(gv)		(GvFLAGS(gv) & GVf_INTRO)
#define GvINTRO_on(gv)		(GvFLAGS(gv) |= GVf_INTRO)
#define GvINTRO_off(gv)		(GvFLAGS(gv) &= ~GVf_INTRO)

#define GvMULTI(gv)		(GvFLAGS(gv) & GVf_MULTI)
#define GvMULTI_on(gv)		(GvFLAGS(gv) |= GVf_MULTI)
#define GvMULTI_off(gv)		(GvFLAGS(gv) &= ~GVf_MULTI)

#define GvASSUMECV(gv)		(GvFLAGS(gv) & GVf_ASSUMECV)
#define GvASSUMECV_on(gv)	(GvFLAGS(gv) |= GVf_ASSUMECV)
#define GvASSUMECV_off(gv)	(GvFLAGS(gv) &= ~GVf_ASSUMECV)

#define GvIMPORTED(gv)		(GvFLAGS(gv) & GVf_IMPORTED)
#define GvIMPORTED_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED)
#define GvIMPORTED_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED)

#define GvIMPORTED_SV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_SV)
#define GvIMPORTED_SV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_SV)
#define GvIMPORTED_SV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_SV)

#define GvIMPORTED_AV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_AV)
#define GvIMPORTED_AV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_AV)
#define GvIMPORTED_AV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_AV)

#define GvIMPORTED_HV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_HV)
#define GvIMPORTED_HV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_HV)
#define GvIMPORTED_HV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_HV)

#define GvIMPORTED_CV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_CV)
#define GvIMPORTED_CV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_CV)
#define GvIMPORTED_CV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_CV)

#ifndef PERL_CORE
#  define GvIN_PAD(gv)		0
#  define GvIN_PAD_on(gv)	NOOP
#  define GvIN_PAD_off(gv)	NOOP
#  define Nullgv Null(GV*)
#endif

#define DM_RUID      0x001
#define DM_EUID      0x002
#define DM_UID       (DM_RUID|DM_EUID)
#define DM_ARRAY_ISA 0x004
#define DM_RGID      0x010
#define DM_EGID      0x020
#define DM_GID       (DM_RGID|DM_EGID)
#define DM_DELAY     0x100

/*
 * symbol creation flags, for use in gv_fetchpv() and get_*v()
 */
#define GV_ADD		0x01	/* add, if symbol not already there
				   For gv_name_set, adding a HEK for the first
				   time, so don't try to free what's there.  */
#define GV_ADDMULTI	0x02	/* add, pretending it has been added
				   already; used also by gv_init_* */
#define GV_ADDWARN	0x04	/* add, but warn if symbol wasn't already there */
		/*	0x08	   UNUSED */
#define GV_NOINIT	0x10	/* add, but don't init symbol, if type != PVGV */
/* This is used by toke.c to avoid turing placeholder constants in the symbol
   table into full PVGVs with attached constant subroutines.  */
#define GV_NOADD_NOINIT	0x20	/* Don't add the symbol if it's not there.
				   Don't init it if it is there but ! PVGV */
#define GV_NOEXPAND	0x40	/* Don't expand SvOK() entries to PVGV */
#define GV_NOTQUAL	0x80	/* A plain symbol name, not qualified with a
				   package (so skip checks for :: and ')  */
#define GV_AUTOLOAD	0x100	/* gv_fetchmethod_flags() should AUTOLOAD  */
#define GV_CROAK	0x200	/* gv_fetchmethod_flags() should croak  */
#define GV_ADDMG	0x400	/* add if magical */
#define GV_NO_SVGMAGIC	0x800	/* Skip get-magic on an SV argument;
				   used only by gv_fetchsv(_nomg) */
#define GV_CACHE_ONLY	0x1000  /* return stash only if found in cache;
				   used only in flags parameter to gv_stash* family */

/* Flags for gv_fetchmeth_pvn and gv_autoload_pvn*/
#define GV_SUPER	0x1000	/* SUPER::method */

/* Flags for gv_autoload_*/
#define GV_AUTOLOAD_ISMETHOD 1	/* autoloading a method? */

/*      SVf_UTF8 (more accurately the return value from SvUTF8) is also valid
	as a flag to various gv_* functions, so ensure it lies
	outside this range.
*/

#define GV_NOADD_MASK \
  (SVf_UTF8|GV_NOADD_NOINIT|GV_NOEXPAND|GV_NOTQUAL|GV_ADDMG|GV_NO_SVGMAGIC)
/* The bit flags that don't cause gv_fetchpv() to add a symbol if not
   found (with the exception GV_ADDMG, which *might* cause the symbol
   to be added) */

#define gv_fullname3(sv,gv,prefix) gv_fullname4(sv,gv,prefix,TRUE)
#define gv_efullname3(sv,gv,prefix) gv_efullname4(sv,gv,prefix,TRUE)
#define gv_fetchmethod(stash, name) gv_fetchmethod_autoload(stash, name, TRUE)
#define gv_fetchsv_nomg(n,f,t) gv_fetchsv(n,(f)|GV_NO_SVGMAGIC,t)
#define gv_init(gv,stash,name,len,multi) \
	gv_init_pvn(gv,stash,name,len,GV_ADDMULTI*!!(multi))
#define gv_fetchmeth(stash,name,len,level) gv_fetchmeth_pvn(stash, name, len, level, 0)
#define gv_fetchmeth_autoload(stash,name,len,level) gv_fetchmeth_pvn_autoload(stash, name, len, level, 0)
#define gv_fetchmethod_flags(stash,name,flags) gv_fetchmethod_pv_flags(stash, name, flags)
#define gv_autoload4(stash, name, len, method) \
	gv_autoload_pvn(stash, name, len, !!(method))
#define newGVgen(pack)  newGVgen_flags(pack, 0)
#define gv_method_changed(gv)		    \
    (					     \
    	assert_(isGV_with_GP(gv))	      \
	GvREFCNT(gv) > 1		       \
	    ? (void)++PL_sub_generation		\
	    : mro_method_changed_in(GvSTASH(gv)) \
    )

#define gv_AVadd(gv) gv_add_by_type((gv), SVt_PVAV)
#define gv_HVadd(gv) gv_add_by_type((gv), SVt_PVHV)
#define gv_IOadd(gv) gv_add_by_type((gv), SVt_PVIO)
#define gv_SVadd(gv) gv_add_by_type((gv), SVt_NULL)

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 /*    handy.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1999, 2000,
 *    2001, 2002, 2004, 2005, 2006, 2007, 2008, 2012 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/* IMPORTANT NOTE: Everything whose name begins with an underscore is for
 * internal core Perl use only. */

#ifndef HANDY_H /* Guard against nested #inclusion */
#define HANDY_H

#if !defined(__STDC__)
#ifdef NULL
#undef NULL
#endif
#  define NULL 0
#endif

#ifndef PERL_CORE
#  define Null(type) ((type)NULL)

/*
=head1 Handy Values

=for apidoc AmU||Nullch
Null character pointer.  (No longer available when C<PERL_CORE> is
defined.)

=for apidoc AmU||Nullsv
Null SV pointer.  (No longer available when C<PERL_CORE> is defined.)

=cut
*/

#  define Nullch Null(char*)
#  define Nullfp Null(PerlIO*)
#  define Nullsv Null(SV*)
#endif

#ifdef TRUE
#undef TRUE
#endif
#ifdef FALSE
#undef FALSE
#endif
#define TRUE (1)
#define FALSE (0)

/* The MUTABLE_*() macros cast pointers to the types shown, in such a way
 * (compiler permitting) that casting away const-ness will give a warning;
 * e.g.:
 *
 * const SV *sv = ...;
 * AV *av1 = (AV*)sv;        <== BAD:  the const has been silently cast away
 * AV *av2 = MUTABLE_AV(sv); <== GOOD: it may warn
 */

#if defined(__GNUC__) && !defined(PERL_GCC_BRACE_GROUPS_FORBIDDEN)
#  define MUTABLE_PTR(p) ({ void *_p = (p); _p; })
#else
#  define MUTABLE_PTR(p) ((void *) (p))
#endif

#define MUTABLE_AV(p)	((AV *)MUTABLE_PTR(p))
#define MUTABLE_CV(p)	((CV *)MUTABLE_PTR(p))
#define MUTABLE_GV(p)	((GV *)MUTABLE_PTR(p))
#define MUTABLE_HV(p)	((HV *)MUTABLE_PTR(p))
#define MUTABLE_IO(p)	((IO *)MUTABLE_PTR(p))
#define MUTABLE_SV(p)	((SV *)MUTABLE_PTR(p))

#if defined(I_STDBOOL) && !defined(PERL_BOOL_AS_CHAR)
#  include <stdbool.h>
#  ifndef HAS_BOOL
#    define HAS_BOOL 1
#  endif
#endif

/* bool is built-in for g++-2.6.3 and later, which might be used
   for extensions.  <_G_config.h> defines _G_HAVE_BOOL, but we can't
   be sure _G_config.h will be included before this file.  _G_config.h
   also defines _G_HAVE_BOOL for both gcc and g++, but only g++
   actually has bool.  Hence, _G_HAVE_BOOL is pretty useless for us.
   g++ can be identified by __GNUG__.
   Andy Dougherty	February 2000
*/
#ifdef __GNUG__		/* GNU g++ has bool built-in */
# ifndef PERL_BOOL_AS_CHAR
#  ifndef HAS_BOOL
#    define HAS_BOOL 1
#  endif
# endif
#endif

#ifndef HAS_BOOL
# ifdef bool
#  undef bool
# endif
# define bool char
# define HAS_BOOL 1
#endif

/* cast-to-bool.  A simple (bool) cast may not do the right thing: if bool is
 * defined as char for example, then the cast from int is
 * implementation-defined (bool)!!(cbool) in a ternary triggers a bug in xlc on
 * AIX */
#define cBOOL(cbool) ((cbool) ? (bool)1 : (bool)0)

/* Try to figure out __func__ or __FUNCTION__ equivalent, if any.
 * XXX Should really be a Configure probe, with HAS__FUNCTION__
 *     and FUNCTION__ as results.
 * XXX Similarly, a Configure probe for __FILE__ and __LINE__ is needed. */
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (defined(__SUNPRO_C)) /* C99 or close enough. */
#  define FUNCTION__ __func__
#else
#  if (defined(USING_MSVC6)) || /* MSVC6 has neither __func__ nor __FUNCTION and no good workarounds, either. */ \
      (defined(__DECC_VER)) /* Tru64 or VMS, and strict C89 being used, but not modern enough cc (in Tur64, -c99 not known, only -std1). */
#    define FUNCTION__ ""
#  else
#    define FUNCTION__ __FUNCTION__ /* Common extension. */
#  endif
#endif

/* XXX A note on the perl source internal type system.  The
   original intent was that I32 be *exactly* 32 bits.

   Currently, we only guarantee that I32 is *at least* 32 bits.
   Specifically, if int is 64 bits, then so is I32.  (This is the case
   for the Cray.)  This has the advantage of meshing nicely with
   standard library calls (where we pass an I32 and the library is
   expecting an int), but the disadvantage that an I32 is not 32 bits.
   Andy Dougherty	August 1996

   There is no guarantee that there is *any* integral type with
   exactly 32 bits.  It is perfectly legal for a system to have
   sizeof(short) == sizeof(int) == sizeof(long) == 8.

   Similarly, there is no guarantee that I16 and U16 have exactly 16
   bits.

   For dealing with issues that may arise from various 32/64-bit
   systems, we will ask Configure to check out

	SHORTSIZE == sizeof(short)
	INTSIZE == sizeof(int)
	LONGSIZE == sizeof(long)
	LONGLONGSIZE == sizeof(long long) (if HAS_LONG_LONG)
	PTRSIZE == sizeof(void *)
	DOUBLESIZE == sizeof(double)
	LONG_DOUBLESIZE == sizeof(long double) (if HAS_LONG_DOUBLE).

*/

#ifdef I_INTTYPES /* e.g. Linux has int64_t without <inttypes.h> */
#   include <inttypes.h>
#   ifdef INT32_MIN_BROKEN
#       undef  INT32_MIN
#       define INT32_MIN (-2147483647-1)
#   endif
#   ifdef INT64_MIN_BROKEN
#       undef  INT64_MIN
#       define INT64_MIN (-9223372036854775807LL-1)
#   endif
#endif

typedef I8TYPE I8;
typedef U8TYPE U8;
typedef I16TYPE I16;
typedef U16TYPE U16;
typedef I32TYPE I32;
typedef U32TYPE U32;

#ifdef HAS_QUAD
typedef I64TYPE I64;
typedef U64TYPE U64;
#endif

/* INT64_C/UINT64_C are C99 from <stdint.h> (so they will not be
 * available in strict C89 mode), but they are nice, so let's define
 * them if necessary. */
#if defined(HAS_QUAD)
#  undef PeRl_INT64_C
#  undef PeRl_UINT64_C
/* Prefer the native integer types (int and long) over long long
 * (which is not C89) and Win32-specific __int64. */
#  if QUADKIND == QUAD_IS_INT && INTSIZE == 8
#    define PeRl_INT64_C(c)	(c)
#    define PeRl_UINT64_C(c)	CAT2(c,U)
#  endif
#  if QUADKIND == QUAD_IS_LONG && LONGSIZE == 8
#    define PeRl_INT64_C(c)	CAT2(c,L)
#    define PeRl_UINT64_C(c)	CAT2(c,UL)
#  endif
#  if QUADKIND == QUAD_IS_LONG_LONG && defined(HAS_LONG_LONG)
#    define PeRl_INT64_C(c)	CAT2(c,LL)
#    define PeRl_UINT64_C(c)	CAT2(c,ULL)
#  endif
#  if QUADKIND == QUAD_IS___INT64
#    define PeRl_INT64_C(c)	CAT2(c,I64)
#    define PeRl_UINT64_C(c)	CAT2(c,UI64)
#  endif
#  ifndef PeRl_INT64_C
#    define PeRl_INT64_C(c)	((I64)(c)) /* last resort */
#    define PeRl_UINT64_C(c)	((U64)(c))
#  endif
/* In OS X the INT64_C/UINT64_C are defined with LL/ULL, which will
 * not fly with C89-pedantic gcc, so let's undefine them first so that
 * we can redefine them with our native integer preferring versions. */
#  if defined(PERL_DARWIN) && defined(PERL_GCC_PEDANTIC)
#    undef INT64_C
#    undef UINT64_C
#  endif
#  ifndef INT64_C
#    define INT64_C(c) PeRl_INT64_C(c)
#  endif
#  ifndef UINT64_C
#    define UINT64_C(c) PeRl_UINT64_C(c)
#  endif
#endif

#if defined(UINT8_MAX) && defined(INT16_MAX) && defined(INT32_MAX)

/* I8_MAX and I8_MIN constants are not defined, as I8 is an ambiguous type.
   Please search CHAR_MAX in perl.h for further details. */
#define U8_MAX UINT8_MAX
#define U8_MIN UINT8_MIN

#define I16_MAX INT16_MAX
#define I16_MIN INT16_MIN
#define U16_MAX UINT16_MAX
#define U16_MIN UINT16_MIN

#define I32_MAX INT32_MAX
#define I32_MIN INT32_MIN
#ifndef UINT32_MAX_BROKEN /* e.g. HP-UX with gcc messes this up */
#  define U32_MAX UINT32_MAX
#else
#  define U32_MAX 4294967295U
#endif
#define U32_MIN UINT32_MIN

#else

/* I8_MAX and I8_MIN constants are not defined, as I8 is an ambiguous type.
   Please search CHAR_MAX in perl.h for further details. */
#define U8_MAX PERL_UCHAR_MAX
#define U8_MIN PERL_UCHAR_MIN

#define I16_MAX PERL_SHORT_MAX
#define I16_MIN PERL_SHORT_MIN
#define U16_MAX PERL_USHORT_MAX
#define U16_MIN PERL_USHORT_MIN

#if LONGSIZE > 4
# define I32_MAX PERL_INT_MAX
# define I32_MIN PERL_INT_MIN
# define U32_MAX PERL_UINT_MAX
# define U32_MIN PERL_UINT_MIN
#else
# define I32_MAX PERL_LONG_MAX
# define I32_MIN PERL_LONG_MIN
# define U32_MAX PERL_ULONG_MAX
# define U32_MIN PERL_ULONG_MIN
#endif

#endif

/* log(2) is pretty close to  0.30103, just in case anyone is grepping for it */
#define BIT_DIGITS(N)   (((N)*146)/485 + 1)  /* log2(10) =~ 146/485 */
#define TYPE_DIGITS(T)  BIT_DIGITS(sizeof(T) * 8)
#define TYPE_CHARS(T)   (TYPE_DIGITS(T) + 2) /* sign, NUL */

/* Unused by core; should be deprecated */
#define Ctl(ch) ((ch) & 037)

/* This is a helper macro to avoid preprocessor issues, replaced by nothing
 * unless under DEBUGGING, where it expands to an assert of its argument,
 * followed by a comma (hence the comma operator).  If we just used a straight
 * assert(), we would get a comma with nothing before it when not DEBUGGING.
 *
 * We also use empty definition under Coverity since the __ASSERT__
 * checks often check for things that Really Cannot Happen, and Coverity
 * detects that and gets all excited. */

#if defined(DEBUGGING) && !defined(__COVERITY__)
#   define __ASSERT_(statement)  assert(statement),
#else
#   define __ASSERT_(statement)
#endif

/*
=head1 SV-Body Allocation

=for apidoc Ama|SV*|newSVpvs|const char* s
Like C<newSVpvn>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Ama|SV*|newSVpvs_flags|const char* s|U32 flags
Like C<newSVpvn_flags>, but takes a C<NUL>-terminated literal string instead of
a string/length pair.

=for apidoc Ama|SV*|newSVpvs_share|const char* s
Like C<newSVpvn_share>, but takes a C<NUL>-terminated literal string instead of
a string/length pair and omits the hash parameter.

=for apidoc Am|void|sv_catpvs_flags|SV* sv|const char* s|I32 flags
Like C<sv_catpvn_flags>, but takes a C<NUL>-terminated literal string instead
of a string/length pair.

=for apidoc Am|void|sv_catpvs_nomg|SV* sv|const char* s
Like C<sv_catpvn_nomg>, but takes a C<NUL>-terminated literal string instead of
a string/length pair.

=for apidoc Am|void|sv_catpvs|SV* sv|const char* s
Like C<sv_catpvn>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Am|void|sv_catpvs_mg|SV* sv|const char* s
Like C<sv_catpvn_mg>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Am|void|sv_setpvs|SV* sv|const char* s
Like C<sv_setpvn>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Am|void|sv_setpvs_mg|SV* sv|const char* s
Like C<sv_setpvn_mg>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Am|SV *|sv_setref_pvs|const char* s
Like C<sv_setref_pvn>, but takes a C<NUL>-terminated literal string instead of
a string/length pair.

=head1 Memory Management

=for apidoc Ama|char*|savepvs|const char* s
Like C<savepvn>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Ama|char*|savesharedpvs|const char* s
A version of C<savepvs()> which allocates the duplicate string in memory
which is shared between threads.

=head1 GV Functions

=for apidoc Am|HV*|gv_stashpvs|const char* name|I32 create
Like C<gv_stashpvn>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=head1 Hash Manipulation Functions

=for apidoc Am|SV**|hv_fetchs|HV* tb|const char* key|I32 lval
Like C<hv_fetch>, but takes a C<NUL>-terminated literal string instead of a
string/length pair.

=for apidoc Am|SV**|hv_stores|HV* tb|const char* key|NULLOK SV* val
Like C<hv_store>, but takes a C<NUL>-terminated literal string instead of a
string/length pair
and omits the hash parameter.

=head1 Lexer interface

=for apidoc Amx|void|lex_stuff_pvs|const char *pv|U32 flags

Like L</lex_stuff_pvn>, but takes a C<NUL>-terminated literal string instead of
a string/length pair.

=cut
*/

/* concatenating with "" ensures that only literal strings are accepted as
 * argument */
#define STR_WITH_LEN(s)  ("" s ""), (sizeof(s)-1)

/* note that STR_WITH_LEN() can't be used as argument to macros or functions
 * that under some configurations might be macros, which means that it requires
 * the full Perl_xxx(aTHX_ ...) form for any API calls where it's used.
 */

/* STR_WITH_LEN() shortcuts */
#define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))
#define newSVpvs_flags(str,flags)	\
    Perl_newSVpvn_flags(aTHX_ STR_WITH_LEN(str), flags)
#define newSVpvs_share(str) Perl_newSVpvn_share(aTHX_ STR_WITH_LEN(str), 0)
#define sv_catpvs_flags(sv, str, flags) \
    Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), flags)
#define sv_catpvs_nomg(sv, str) \
    Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), 0)
#define sv_catpvs(sv, str) \
    Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), SV_GMAGIC)
#define sv_catpvs_mg(sv, str) \
    Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), SV_GMAGIC|SV_SMAGIC)
#define sv_setpvs(sv, str) Perl_sv_setpvn(aTHX_ sv, STR_WITH_LEN(str))
#define sv_setpvs_mg(sv, str) Perl_sv_setpvn_mg(aTHX_ sv, STR_WITH_LEN(str))
#define sv_setref_pvs(rv, classname, str) \
    Perl_sv_setref_pvn(aTHX_ rv, classname, STR_WITH_LEN(str))
#define savepvs(str) Perl_savepvn(aTHX_ STR_WITH_LEN(str))
#define savesharedpvs(str) Perl_savesharedpvn(aTHX_ STR_WITH_LEN(str))
#define gv_stashpvs(str, create) \
    Perl_gv_stashpvn(aTHX_ STR_WITH_LEN(str), create)
#define gv_fetchpvs(namebeg, add, sv_type) \
    Perl_gv_fetchpvn_flags(aTHX_ STR_WITH_LEN(namebeg), add, sv_type)
#define gv_fetchpvn(namebeg, len, add, sv_type) \
    Perl_gv_fetchpvn_flags(aTHX_ namebeg, len, add, sv_type)
#define sv_catxmlpvs(dsv, str, utf8) \
    Perl_sv_catxmlpvn(aTHX_ dsv, STR_WITH_LEN(str), utf8)
#define hv_fetchs(hv,key,lval)						\
  ((SV **)Perl_hv_common(aTHX_ (hv), NULL, STR_WITH_LEN(key), 0,	\
			 (lval) ? (HV_FETCH_JUST_SV | HV_FETCH_LVALUE)	\
			 : HV_FETCH_JUST_SV, NULL, 0))

#define hv_stores(hv,key,val)						\
  ((SV **)Perl_hv_common(aTHX_ (hv), NULL, STR_WITH_LEN(key), 0,	\
			 (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val), 0))

#define lex_stuff_pvs(pv,flags) Perl_lex_stuff_pvn(aTHX_ STR_WITH_LEN(pv), flags)

#define get_cvs(str, flags)					\
	Perl_get_cvn_flags(aTHX_ STR_WITH_LEN(str), (flags))

/*
=head1 Miscellaneous Functions

=for apidoc Am|bool|strNE|char* s1|char* s2
Test two C<NUL>-terminated strings to see if they are different.  Returns true
or false.

=for apidoc Am|bool|strEQ|char* s1|char* s2
Test two C<NUL>-terminated strings to see if they are equal.  Returns true or
false.

=for apidoc Am|bool|strLT|char* s1|char* s2
Test two C<NUL>-terminated strings to see if the first, C<s1>, is less than the
second, C<s2>.  Returns true or false.

=for apidoc Am|bool|strLE|char* s1|char* s2
Test two C<NUL>-terminated strings to see if the first, C<s1>, is less than or
equal to the second, C<s2>.  Returns true or false.

=for apidoc Am|bool|strGT|char* s1|char* s2
Test two C<NUL>-terminated strings to see if the first, C<s1>, is greater than
the second, C<s2>.  Returns true or false.

=for apidoc Am|bool|strGE|char* s1|char* s2
Test two C<NUL>-terminated strings to see if the first, C<s1>, is greater than
or equal to the second, C<s2>.  Returns true or false.

=for apidoc Am|bool|strnNE|char* s1|char* s2|STRLEN len
Test two C<NUL>-terminated strings to see if they are different.  The C<len>
parameter indicates the number of bytes to compare.  Returns true or false.  (A
wrapper for C<strncmp>).

=for apidoc Am|bool|strnEQ|char* s1|char* s2|STRLEN len
Test two C<NUL>-terminated strings to see if they are equal.  The C<len>
parameter indicates the number of bytes to compare.  Returns true or false.  (A
wrapper for C<strncmp>).

=for apidoc Am|bool|memEQ|char* s1|char* s2|STRLEN len
Test two buffers (which may contain embedded C<NUL> characters, to see if they
are equal.  The C<len> parameter indicates the number of bytes to compare.
Returns zero if equal, or non-zero if non-equal.

=for apidoc Am|bool|memNE|char* s1|char* s2|STRLEN len
Test two buffers (which may contain embedded C<NUL> characters, to see if they
are not equal.  The C<len> parameter indicates the number of bytes to compare.
Returns zero if non-equal, or non-zero if equal.

=cut
*/

#define strNE(s1,s2) (strcmp(s1,s2))
#define strEQ(s1,s2) (!strcmp(s1,s2))
#define strLT(s1,s2) (strcmp(s1,s2) < 0)
#define strLE(s1,s2) (strcmp(s1,s2) <= 0)
#define strGT(s1,s2) (strcmp(s1,s2) > 0)
#define strGE(s1,s2) (strcmp(s1,s2) >= 0)
#define strnNE(s1,s2,l) (strncmp(s1,s2,l))
#define strnEQ(s1,s2,l) (!strncmp(s1,s2,l))

#ifdef HAS_MEMCMP
#  define memNE(s1,s2,l) (memcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!memcmp(s1,s2,l))
#else
#  define memNE(s1,s2,l) (bcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!bcmp(s1,s2,l))
#endif

#define memEQs(s1, l, s2) \
	(sizeof(s2)-1 == l && memEQ(s1, ("" s2 ""), (sizeof(s2)-1)))
#define memNEs(s1, l, s2) !memEQs(s1, l, s2)

/*
 * Character classes.
 *
 * Unfortunately, the introduction of locales means that we
 * can't trust isupper(), etc. to tell the truth.  And when
 * it comes to /\w+/ with tainting enabled, we *must* be able
 * to trust our character classes.
 *
 * Therefore, the default tests in the text of Perl will be
 * independent of locale.  Any code that wants to depend on
 * the current locale will use the tests that begin with "lc".
 */

#ifdef HAS_SETLOCALE  /* XXX Is there a better test for this? */
#  ifndef CTYPE256
#    define CTYPE256
#  endif
#endif

/*

=head1 Character classification
This section is about functions (really macros) that classify characters
into types, such as punctuation versus alphabetic, etc.  Most of these are
analogous to regular expression character classes.  (See
L<perlrecharclass/POSIX Character Classes>.)  There are several variants for
each class.  (Not all macros have all variants; each item below lists the
ones valid for it.)  None are affected by C<use bytes>, and only the ones
with C<LC> in the name are affected by the current locale.

The base function, e.g., C<isALPHA()>, takes an octet (either a C<char> or a
C<U8>) as input and returns a boolean as to whether or not the character
represented by that octet is (or on non-ASCII platforms, corresponds to) an
ASCII character in the named class based on platform, Unicode, and Perl rules.
If the input is a number that doesn't fit in an octet, FALSE is returned.

Variant C<isFOO_A> (e.g., C<isALPHA_A()>) is identical to the base function
with no suffix C<"_A">.

Variant C<isFOO_L1> imposes the Latin-1 (or EBCDIC equivlalent) character set
onto the platform.  That is, the code points that are ASCII are unaffected,
since ASCII is a subset of Latin-1.  But the non-ASCII code points are treated
as if they are Latin-1 characters.  For example, C<isWORDCHAR_L1()> will return
true when called with the code point 0xDF, which is a word character in both
ASCII and EBCDIC (though it represents different characters in each).

Variant C<isFOO_uvchr> is like the C<isFOO_L1> variant, but accepts any UV code
point as input.  If the code point is larger than 255, Unicode rules are used
to determine if it is in the character class.  For example,
C<isWORDCHAR_uvchr(0x100)> returns TRUE, since 0x100 is LATIN CAPITAL LETTER A
WITH MACRON in Unicode, and is a word character.

Variant C<isFOO_utf8> is like C<isFOO_uvchr>, but the input is a pointer to a
(known to be well-formed) UTF-8 encoded string (C<U8*> or C<char*>, and
possibly containing embedded C<NUL> characters).  The classification of just
the first (possibly multi-byte) character in the string is tested.

Variant C<isFOO_LC> is like the C<isFOO_A> and C<isFOO_L1> variants, but the
result is based on the current locale, which is what C<LC> in the name stands
for.  If Perl can determine that the current locale is a UTF-8 locale, it uses
the published Unicode rules; otherwise, it uses the C library function that
gives the named classification.  For example, C<isDIGIT_LC()> when not in a
UTF-8 locale returns the result of calling C<isdigit()>.  FALSE is always
returned if the input won't fit into an octet.  On some platforms where the C
library function is known to be defective, Perl changes its result to follow
the POSIX standard's rules.

Variant C<isFOO_LC_uvchr> is like C<isFOO_LC>, but is defined on any UV.  It
returns the same as C<isFOO_LC> for input code points less than 256, and
returns the hard-coded, not-affected-by-locale, Unicode results for larger ones.

Variant C<isFOO_LC_utf8> is like C<isFOO_LC_uvchr>, but the input is a pointer
to a (known to be well-formed) UTF-8 encoded string (C<U8*> or C<char*>, and
possibly containing embedded C<NUL> characters).  The classification of just
the first (possibly multi-byte) character in the string is tested.

=for apidoc Am|bool|isALPHA|char ch
Returns a boolean indicating whether the specified character is an
alphabetic character, analogous to C<m/[[:alpha:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isALPHA_A>, C<isALPHA_L1>, C<isALPHA_uvchr>, C<isALPHA_utf8>, C<isALPHA_LC>,
C<isALPHA_LC_uvchr>, and C<isALPHA_LC_utf8>.

=for apidoc Am|bool|isALPHANUMERIC|char ch
Returns a boolean indicating whether the specified character is a either an
alphabetic character or decimal digit, analogous to C<m/[[:alnum:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isALPHANUMERIC_A>, C<isALPHANUMERIC_L1>, C<isALPHANUMERIC_uvchr>,
C<isALPHANUMERIC_utf8>, C<isALPHANUMERIC_LC>, C<isALPHANUMERIC_LC_uvchr>, and
C<isALPHANUMERIC_LC_utf8>.

=for apidoc Am|bool|isASCII|char ch
Returns a boolean indicating whether the specified character is one of the 128
characters in the ASCII character set, analogous to C<m/[[:ascii:]]/>.
On non-ASCII platforms, it returns TRUE iff this
character corresponds to an ASCII character.  Variants C<isASCII_A()> and
C<isASCII_L1()> are identical to C<isASCII()>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isASCII_uvchr>, C<isASCII_utf8>, C<isASCII_LC>, C<isASCII_LC_uvchr>, and
C<isASCII_LC_utf8>.  Note, however, that some platforms do not have the C
library routine C<isascii()>.  In these cases, the variants whose names contain
C<LC> are the same as the corresponding ones without.

Also note, that because all ASCII characters are UTF-8 invariant (meaning they
have the exact same representation (always a single byte) whether encoded in
UTF-8 or not), C<isASCII> will give the correct results when called with any
byte in any string encoded or not in UTF-8.  And similarly C<isASCII_utf8> will
work properly on any string encoded or not in UTF-8.

=for apidoc Am|bool|isBLANK|char ch
Returns a boolean indicating whether the specified character is a
character considered to be a blank, analogous to C<m/[[:blank:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isBLANK_A>, C<isBLANK_L1>, C<isBLANK_uvchr>, C<isBLANK_utf8>, C<isBLANK_LC>,
C<isBLANK_LC_uvchr>, and C<isBLANK_LC_utf8>.  Note, however, that some
platforms do not have the C library routine C<isblank()>.  In these cases, the
variants whose names contain C<LC> are the same as the corresponding ones
without.

=for apidoc Am|bool|isCNTRL|char ch
Returns a boolean indicating whether the specified character is a
control character, analogous to C<m/[[:cntrl:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isCNTRL_A>, C<isCNTRL_L1>, C<isCNTRL_uvchr>, C<isCNTRL_utf8>, C<isCNTRL_LC>,
C<isCNTRL_LC_uvchr>, and C<isCNTRL_LC_utf8>
On EBCDIC platforms, you almost always want to use the C<isCNTRL_L1> variant.

=for apidoc Am|bool|isDIGIT|char ch
Returns a boolean indicating whether the specified character is a
digit, analogous to C<m/[[:digit:]]/>.
Variants C<isDIGIT_A> and C<isDIGIT_L1> are identical to C<isDIGIT>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isDIGIT_uvchr>, C<isDIGIT_utf8>, C<isDIGIT_LC>, C<isDIGIT_LC_uvchr>, and
C<isDIGIT_LC_utf8>.

=for apidoc Am|bool|isGRAPH|char ch
Returns a boolean indicating whether the specified character is a
graphic character, analogous to C<m/[[:graph:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isGRAPH_A>, C<isGRAPH_L1>, C<isGRAPH_uvchr>, C<isGRAPH_utf8>, C<isGRAPH_LC>,
C<isGRAPH_LC_uvchr>, and C<isGRAPH_LC_utf8>.

=for apidoc Am|bool|isLOWER|char ch
Returns a boolean indicating whether the specified character is a
lowercase character, analogous to C<m/[[:lower:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isLOWER_A>, C<isLOWER_L1>, C<isLOWER_uvchr>, C<isLOWER_utf8>, C<isLOWER_LC>,
C<isLOWER_LC_uvchr>, and C<isLOWER_LC_utf8>.

=for apidoc Am|bool|isOCTAL|char ch
Returns a boolean indicating whether the specified character is an
octal digit, [0-7].
The only two variants are C<isOCTAL_A> and C<isOCTAL_L1>; each is identical to
C<isOCTAL>.

=for apidoc Am|bool|isPUNCT|char ch
Returns a boolean indicating whether the specified character is a
punctuation character, analogous to C<m/[[:punct:]]/>.
Note that the definition of what is punctuation isn't as
straightforward as one might desire.  See L<perlrecharclass/POSIX Character
Classes> for details.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isPUNCT_A>, C<isPUNCT_L1>, C<isPUNCT_uvchr>, C<isPUNCT_utf8>, C<isPUNCT_LC>,
C<isPUNCT_LC_uvchr>, and C<isPUNCT_LC_utf8>.

=for apidoc Am|bool|isSPACE|char ch
Returns a boolean indicating whether the specified character is a
whitespace character.  This is analogous
to what C<m/\s/> matches in a regular expression.  Starting in Perl 5.18
this also matches what C<m/[[:space:]]/> does.  Prior to 5.18, only the
locale forms of this macro (the ones with C<LC> in their names) matched
precisely what C<m/[[:space:]]/> does.  In those releases, the only difference,
in the non-locale variants, was that C<isSPACE()> did not match a vertical tab.
(See L</isPSXSPC> for a macro that matches a vertical tab in all releases.)
See the L<top of this section|/Character classification> for an explanation of
variants
C<isSPACE_A>, C<isSPACE_L1>, C<isSPACE_uvchr>, C<isSPACE_utf8>, C<isSPACE_LC>,
C<isSPACE_LC_uvchr>, and C<isSPACE_LC_utf8>.

=for apidoc Am|bool|isPSXSPC|char ch
(short for Posix Space)
Starting in 5.18, this is identical in all its forms to the
corresponding C<isSPACE()> macros.
The locale forms of this macro are identical to their corresponding
C<isSPACE()> forms in all Perl releases.  In releases prior to 5.18, the
non-locale forms differ from their C<isSPACE()> forms only in that the
C<isSPACE()> forms don't match a Vertical Tab, and the C<isPSXSPC()> forms do.
Otherwise they are identical.  Thus this macro is analogous to what
C<m/[[:space:]]/> matches in a regular expression.
See the L<top of this section|/Character classification> for an explanation of
variants C<isPSXSPC_A>, C<isPSXSPC_L1>, C<isPSXSPC_uvchr>, C<isPSXSPC_utf8>,
C<isPSXSPC_LC>, C<isPSXSPC_LC_uvchr>, and C<isPSXSPC_LC_utf8>.

=for apidoc Am|bool|isUPPER|char ch
Returns a boolean indicating whether the specified character is an
uppercase character, analogous to C<m/[[:upper:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isUPPER_A>, C<isUPPER_L1>, C<isUPPER_uvchr>, C<isUPPER_utf8>, C<isUPPER_LC>,
C<isUPPER_LC_uvchr>, and C<isUPPER_LC_utf8>.

=for apidoc Am|bool|isPRINT|char ch
Returns a boolean indicating whether the specified character is a
printable character, analogous to C<m/[[:print:]]/>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isPRINT_A>, C<isPRINT_L1>, C<isPRINT_uvchr>, C<isPRINT_utf8>, C<isPRINT_LC>,
C<isPRINT_LC_uvchr>, and C<isPRINT_LC_utf8>.

=for apidoc Am|bool|isWORDCHAR|char ch
Returns a boolean indicating whether the specified character is a character
that is a word character, analogous to what C<m/\w/> and C<m/[[:word:]]/> match
in a regular expression.  A word character is an alphabetic character, a
decimal digit, a connecting punctuation character (such as an underscore), or
a "mark" character that attaches to one of those (like some sort of accent).
C<isALNUM()> is a synonym provided for backward compatibility, even though a
word character includes more than the standard C language meaning of
alphanumeric.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isWORDCHAR_A>, C<isWORDCHAR_L1>, C<isWORDCHAR_uvchr>, and C<isWORDCHAR_utf8>.
C<isWORDCHAR_LC>, C<isWORDCHAR_LC_uvchr>, and C<isWORDCHAR_LC_utf8> are also as
described there, but additionally include the platform's native underscore.

=for apidoc Am|bool|isXDIGIT|char ch
Returns a boolean indicating whether the specified character is a hexadecimal
digit.  In the ASCII range these are C<[0-9A-Fa-f]>.  Variants C<isXDIGIT_A()>
and C<isXDIGIT_L1()> are identical to C<isXDIGIT()>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isXDIGIT_uvchr>, C<isXDIGIT_utf8>, C<isXDIGIT_LC>, C<isXDIGIT_LC_uvchr>, and
C<isXDIGIT_LC_utf8>.

=for apidoc Am|bool|isIDFIRST|char ch
Returns a boolean indicating whether the specified character can be the first
character of an identifier.  This is very close to, but not quite the same as
the official Unicode property C<XID_Start>.  The difference is that this
returns true only if the input character also matches L</isWORDCHAR>.
See the L<top of this section|/Character classification> for an explanation of
variants
C<isIDFIRST_A>, C<isIDFIRST_L1>, C<isIDFIRST_uvchr>, C<isIDFIRST_utf8>,
C<isIDFIRST_LC>, C<isIDFIRST_LC_uvchr>, and C<isIDFIRST_LC_utf8>.

=for apidoc Am|bool|isIDCONT|char ch
Returns a boolean indicating whether the specified character can be the
second or succeeding character of an identifier.  This is very close to, but
not quite the same as the official Unicode property C<XID_Continue>.  The
difference is that this returns true only if the input character also matches
L</isWORDCHAR>.  See the L<top of this section|/Character classification> for
an
explanation of variants C<isIDCONT_A>, C<isIDCONT_L1>, C<isIDCONT_uvchr>,
C<isIDCONT_utf8>, C<isIDCONT_LC>, C<isIDCONT_LC_uvchr>, and
C<isIDCONT_LC_utf8>.

=head1 Miscellaneous Functions

=for apidoc Am|U8|READ_XDIGIT|char str*
Returns the value of an ASCII-range hex digit and advances the string pointer.
Behaviour is only well defined when isXDIGIT(*str) is true.

=head1 Character case changing

=for apidoc Am|U8|toUPPER|U8 ch
Converts the specified character to uppercase.  If the input is anything but an
ASCII lowercase character, that input character itself is returned.  Variant
C<toUPPER_A> is equivalent.

=for apidoc Am|UV|toUPPER_uvchr|UV cp|U8* s|STRLEN* lenp
Converts the code point C<cp> to its uppercase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the uppercase version may be longer than the original character.

The first code point of the uppercased version is returned
(but note, as explained just above, that there may be more.)

=for apidoc Am|UV|toUPPER_utf8|U8* p|U8* s|STRLEN* lenp
Converts the UTF-8 encoded character at C<p> to its uppercase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the uppercase version may be longer than the original character.

The first code point of the uppercased version is returned
(but note, as explained just above, that there may be more.)

The input character at C<p> is assumed to be well-formed.

=for apidoc Am|U8|toFOLD|U8 ch
Converts the specified character to foldcase.  If the input is anything but an
ASCII uppercase character, that input character itself is returned.  Variant
C<toFOLD_A> is equivalent.  (There is no equivalent C<to_FOLD_L1> for the full
Latin1 range, as the full generality of L</toFOLD_uvchr> is needed there.)

=for apidoc Am|UV|toFOLD_uvchr|UV cp|U8* s|STRLEN* lenp
Converts the code point C<cp> to its foldcase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the foldcase version may be longer than the original character.

The first code point of the foldcased version is returned
(but note, as explained just above, that there may be more.)

=for apidoc Am|UV|toFOLD_utf8|U8* p|U8* s|STRLEN* lenp
Converts the UTF-8 encoded character at C<p> to its foldcase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the foldcase version may be longer than the original character.

The first code point of the foldcased version is returned
(but note, as explained just above, that there may be more.)

The input character at C<p> is assumed to be well-formed.

=for apidoc Am|U8|toLOWER|U8 ch
Converts the specified character to lowercase.  If the input is anything but an
ASCII uppercase character, that input character itself is returned.  Variant
C<toLOWER_A> is equivalent.

=for apidoc Am|U8|toLOWER_L1|U8 ch
Converts the specified Latin1 character to lowercase.  The results are
undefined if the input doesn't fit in a byte.

=for apidoc Am|U8|toLOWER_LC|U8 ch
Converts the specified character to lowercase using the current locale's rules,
if possible; otherwise returns the input character itself.

=for apidoc Am|UV|toLOWER_uvchr|UV cp|U8* s|STRLEN* lenp
Converts the code point C<cp> to its lowercase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the lowercase version may be longer than the original character.

The first code point of the lowercased version is returned
(but note, as explained just above, that there may be more.)

=for apidoc Am|UV|toLOWER_utf8|U8* p|U8* s|STRLEN* lenp
Converts the UTF-8 encoded character at C<p> to its lowercase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the lowercase version may be longer than the original character.

The first code point of the lowercased version is returned
(but note, as explained just above, that there may be more.)

The input character at C<p> is assumed to be well-formed.

=for apidoc Am|U8|toTITLE|U8 ch
Converts the specified character to titlecase.  If the input is anything but an
ASCII lowercase character, that input character itself is returned.  Variant
C<toTITLE_A> is equivalent.  (There is no C<toTITLE_L1> for the full Latin1
range, as the full generality of L</toTITLE_uvchr> is needed there.  Titlecase is
not a concept used in locale handling, so there is no functionality for that.)

=for apidoc Am|UV|toTITLE_uvchr|UV cp|U8* s|STRLEN* lenp
Converts the code point C<cp> to its titlecase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the titlecase version may be longer than the original character.

The first code point of the titlecased version is returned
(but note, as explained just above, that there may be more.)

=for apidoc Am|UV|toTITLE_utf8|U8* p|U8* s|STRLEN* lenp
Converts the UTF-8 encoded character at C<p> to its titlecase version, and
stores that in UTF-8 in C<s>, and its length in bytes in C<lenp>.  Note
that the buffer pointed to by C<s> needs to be at least C<UTF8_MAXBYTES_CASE+1>
bytes since the titlecase version may be longer than the original character.

The first code point of the titlecased version is returned
(but note, as explained just above, that there may be more.)

The input character at C<p> is assumed to be well-formed.

=cut

XXX Still undocumented isVERTWS_uvchr and _utf8; it's unclear what their names
really should be.  Also toUPPER_LC and toFOLD_LC, which are subject to change.

Note that these macros are repeated in Devel::PPPort, so should also be
patched there.  The file as of this writing is cpan/Devel-PPPort/parts/inc/misc

*/

/* Specify the widest unsigned type on the platform.  Use U64TYPE because U64
 * is known only in the perl core, and this macro can be called from outside
 * that */
#ifdef HAS_QUAD
#   define WIDEST_UTYPE U64TYPE
#else
#   define WIDEST_UTYPE U32
#endif

/* FITS_IN_8_BITS(c) returns true if c doesn't have  a bit set other than in
 * the lower 8.  It is designed to be hopefully bomb-proof, making sure that no
 * bits of information are lost even on a 64-bit machine, but to get the
 * compiler to optimize it out if possible.  This is because Configure makes
 * sure that the machine has an 8-bit byte, so if c is stored in a byte, the
 * sizeof() guarantees that this evaluates to a constant true at compile time.
 *
 * For Coverity, be always true, because otherwise Coverity thinks
 * it finds several expressions that are always true, independent
 * of operands.  Well, they are, but that is kind of the point.
 */
#ifndef __COVERITY__
#define FITS_IN_8_BITS(c) ((sizeof(c) == 1) || !(((WIDEST_UTYPE)(c)) & ~0xFF))
#else
#define FITS_IN_8_BITS(c) (1)
#endif

#ifdef EBCDIC
#   ifndef _ALL_SOURCE
        /* The native libc isascii() et.al. functions return the wrong results
         * on at least z/OS unless this is defined. */
#       error   _ALL_SOURCE should probably be defined
#   endif
#else
    /* There is a simple definition of ASCII for ASCII platforms.  But the
     * EBCDIC one isn't so simple, so is defined using table look-up like the
     * other macros below.
     * The '| 0' part ensures that c is an integer (and not e.g. a pointer) */
#   define isASCII(c)    ((WIDEST_UTYPE)((c) | 0) < 128)
#endif

/* The lower 3 bits in both the ASCII and EBCDIC representations of '0' are 0,
 * and the 8 possible permutations of those bits exactly comprise the 8 octal
 * digits */
#define isOCTAL_A(c)  cBOOL(FITS_IN_8_BITS(c) && (0xF8 & (c)) == '0')

#ifdef H_PERL       /* If have access to perl.h, lookup in its table */

/* Character class numbers.  For internal core Perl use only.  The ones less
 * than 32 are used in PL_charclass[] and the ones up through the one that
 * corresponds to <_HIGHEST_REGCOMP_DOT_H_SYNC> are used by regcomp.h and
 * related files.  PL_charclass ones use names used in l1_char_class_tab.h but
 * their actual definitions are here.  If that file has a name not used here,
 * it won't compile.
 *
 * The first group of these is ordered in what I (khw) estimate to be the
 * frequency of their use.  This gives a slight edge to exiting a loop earlier
 * (in reginclass() in regexec.c) */
#  define _CC_WORDCHAR           0      /* \w and [:word:] */
#  define _CC_DIGIT              1      /* \d and [:digit:] */
#  define _CC_ALPHA              2      /* [:alpha:] */
#  define _CC_LOWER              3      /* [:lower:] */
#  define _CC_UPPER              4      /* [:upper:] */
#  define _CC_PUNCT              5      /* [:punct:] */
#  define _CC_PRINT              6      /* [:print:] */
#  define _CC_ALPHANUMERIC       7      /* [:alnum:] */
#  define _CC_GRAPH              8      /* [:graph:] */
#  define _CC_CASED              9      /* [:lower:] and [:upper:] under /i */

#define _FIRST_NON_SWASH_CC     10
/* The character classes above are implemented with swashes.  The second group
 * (just below) contains the ones implemented without.  These are also sorted
 * in rough order of the frequency of their use, except that \v should be last,
 * as it isn't a real Posix character class, and some (small) inefficiencies in
 * regular expression handling would be introduced by putting it in the middle
 * of those that are.  Also, cntrl and ascii come after the others as it may be
 * useful to group these which have no members that match above Latin1, (or
 * above ASCII in the latter case) */

#  define _CC_SPACE             10      /* \s, [:space:] */
#  define _CC_BLANK             11      /* [:blank:] */
#  define _CC_XDIGIT            12      /* [:xdigit:] */
#  define _CC_CNTRL             13      /* [:cntrl:] */
#  define _CC_ASCII             14      /* [:ascii:] */
#  define _CC_VERTSPACE         15      /* \v */

#  define _HIGHEST_REGCOMP_DOT_H_SYNC _CC_VERTSPACE

/* The members of the third group below do not need to be coordinated with data
 * structures in regcomp.[ch] and regexec.c. */
#  define _CC_IDFIRST                  16
#  define _CC_CHARNAME_CONT            17
#  define _CC_NONLATIN1_FOLD           18
#  define _CC_NONLATIN1_SIMPLE_FOLD    19
#  define _CC_QUOTEMETA                20
#  define _CC_NON_FINAL_FOLD           21
#  define _CC_IS_IN_SOME_FOLD          22
#  define _CC_MNEMONIC_CNTRL           23

/* This next group is only used on EBCDIC platforms, so theoretically could be
 * shared with something entirely different that's only on ASCII platforms */
#  define _CC_UTF8_START_BYTE_IS_FOR_AT_LEAST_SURROGATE 28
#  define _CC_UTF8_IS_START                             29
#  define _CC_UTF8_IS_DOWNGRADEABLE_START               30
#  define _CC_UTF8_IS_CONTINUATION                      31
/* Unused: 24-27
 * If more bits are needed, one could add a second word for non-64bit
 * QUAD_IS_INT systems, using some #ifdefs to distinguish between having a 2nd
 * word or not.  The IS_IN_SOME_FOLD bit is the most easily expendable, as it
 * is used only for optimization (as of this writing), and differs in the
 * Latin1 range from the ALPHA bit only in two relatively unimportant
 * characters: the masculine and feminine ordinal indicators, so removing it
 * would just cause /i regexes which match them to run less efficiently.
 * Similarly the EBCDIC-only bits are used just for speed, and could be
 * replaced by other means */

#if defined(PERL_CORE) || defined(PERL_EXT)
/* An enum version of the character class numbers, to help compilers
 * optimize */
typedef enum {
    _CC_ENUM_ALPHA          = _CC_ALPHA,
    _CC_ENUM_ALPHANUMERIC   = _CC_ALPHANUMERIC,
    _CC_ENUM_ASCII          = _CC_ASCII,
    _CC_ENUM_BLANK          = _CC_BLANK,
    _CC_ENUM_CASED          = _CC_CASED,
    _CC_ENUM_CNTRL          = _CC_CNTRL,
    _CC_ENUM_DIGIT          = _CC_DIGIT,
    _CC_ENUM_GRAPH          = _CC_GRAPH,
    _CC_ENUM_LOWER          = _CC_LOWER,
    _CC_ENUM_PRINT          = _CC_PRINT,
    _CC_ENUM_PUNCT          = _CC_PUNCT,
    _CC_ENUM_SPACE          = _CC_SPACE,
    _CC_ENUM_UPPER          = _CC_UPPER,
    _CC_ENUM_VERTSPACE      = _CC_VERTSPACE,
    _CC_ENUM_WORDCHAR       = _CC_WORDCHAR,
    _CC_ENUM_XDIGIT         = _CC_XDIGIT
} _char_class_number;
#endif

#define POSIX_SWASH_COUNT _FIRST_NON_SWASH_CC
#define POSIX_CC_COUNT    (_HIGHEST_REGCOMP_DOT_H_SYNC + 1)

#if defined(PERL_IN_UTF8_C)                         \
 || defined(PERL_IN_REGCOMP_C)                      \
 || defined(PERL_IN_REGEXEC_C)
#   if _CC_WORDCHAR != 0 || _CC_DIGIT != 1 || _CC_ALPHA != 2 || _CC_LOWER != 3 \
       || _CC_UPPER != 4 || _CC_PUNCT != 5 || _CC_PRINT != 6                   \
       || _CC_ALPHANUMERIC != 7 || _CC_GRAPH != 8 || _CC_CASED != 9
      #error Need to adjust order of swash_property_names[]
#   endif

/* This is declared static in each of the few files that this is #defined for
 * to keep them from being publicly accessible.  Hence there is a small amount
 * of wasted space */

static const char* const swash_property_names[] = {
    "XPosixWord",
    "XPosixDigit",
    "XPosixAlpha",
    "XPosixLower",
    "XPosixUpper",
    "XPosixPunct",
    "XPosixPrint",
    "XPosixAlnum",
    "XPosixGraph",
    "Cased"
};
#endif

START_EXTERN_C
#  ifdef DOINIT
EXTCONST  U32 PL_charclass[] = {
#    include "l1_char_class_tab.h"
};

#  else /* ! DOINIT */
EXTCONST U32 PL_charclass[];
#  endif
END_EXTERN_C

    /* The 1U keeps Solaris from griping when shifting sets the uppermost bit */
#   define _CC_mask(classnum) (1U << (classnum))

    /* For internal core Perl use only: the base macro for defining macros like
     * isALPHA */
#   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
                && (PL_charclass[(U8) (c)] & _CC_mask(classnum)))

    /* The mask for the _A versions of the macros; it just adds in the bit for
     * ASCII. */
#   define _CC_mask_A(classnum) (_CC_mask(classnum) | _CC_mask(_CC_ASCII))

    /* For internal core Perl use only: the base macro for defining macros like
     * isALPHA_A.  The foo_A version makes sure that both the desired bit and
     * the ASCII bit are present */
#   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
        && ((PL_charclass[(U8) (c)] & _CC_mask_A(classnum))     \
                                   == _CC_mask_A(classnum)))

#   define isALPHA_A(c)  _generic_isCC_A(c, _CC_ALPHA)
#   define isALPHANUMERIC_A(c) _generic_isCC_A(c, _CC_ALPHANUMERIC)
#   define isBLANK_A(c)  _generic_isCC_A(c, _CC_BLANK)
#   define isCNTRL_A(c)  _generic_isCC_A(c, _CC_CNTRL)
#   define isDIGIT_A(c)  _generic_isCC(c, _CC_DIGIT) /* No non-ASCII digits */
#   define isGRAPH_A(c)  _generic_isCC_A(c, _CC_GRAPH)
#   define isLOWER_A(c)  _generic_isCC_A(c, _CC_LOWER)
#   define isPRINT_A(c)  _generic_isCC_A(c, _CC_PRINT)
#   define isPUNCT_A(c)  _generic_isCC_A(c, _CC_PUNCT)
#   define isSPACE_A(c)  _generic_isCC_A(c, _CC_SPACE)
#   define isUPPER_A(c)  _generic_isCC_A(c, _CC_UPPER)
#   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
#   define isXDIGIT_A(c)  _generic_isCC(c, _CC_XDIGIT) /* No non-ASCII xdigits
                                                        */
#   define isIDFIRST_A(c) _generic_isCC_A(c, _CC_IDFIRST)
#   define isALPHA_L1(c)  _generic_isCC(c, _CC_ALPHA)
#   define isALPHANUMERIC_L1(c) _generic_isCC(c, _CC_ALPHANUMERIC)
#   define isBLANK_L1(c)  _generic_isCC(c, _CC_BLANK)

    /* continuation character for legal NAME in \N{NAME} */
#   define isCHARNAME_CONT(c) _generic_isCC(c, _CC_CHARNAME_CONT)

#   define isCNTRL_L1(c)  _generic_isCC(c, _CC_CNTRL)
#   define isGRAPH_L1(c)  _generic_isCC(c, _CC_GRAPH)
#   define isLOWER_L1(c)  _generic_isCC(c, _CC_LOWER)
#   define isPRINT_L1(c)  _generic_isCC(c, _CC_PRINT)
#   define isPSXSPC_L1(c)  isSPACE_L1(c)
#   define isPUNCT_L1(c)  _generic_isCC(c, _CC_PUNCT)
#   define isSPACE_L1(c)  _generic_isCC(c, _CC_SPACE)
#   define isUPPER_L1(c)  _generic_isCC(c, _CC_UPPER)
#   define isWORDCHAR_L1(c) _generic_isCC(c, _CC_WORDCHAR)
#   define isIDFIRST_L1(c) _generic_isCC(c, _CC_IDFIRST)

#   ifdef EBCDIC
#       define isASCII(c) _generic_isCC(c, _CC_ASCII)
#   endif

    /* Participates in a single-character fold with a character above 255 */
#   define _HAS_NONLATIN1_SIMPLE_FOLD_CLOSURE_ONLY_FOR_USE_BY_REGCOMP_DOT_C_AND_REGEXEC_DOT_C(c) ((! cBOOL(FITS_IN_8_BITS(c))) || (PL_charclass[(U8) (c)] & _CC_mask(_CC_NONLATIN1_SIMPLE_FOLD)))

    /* Like the above, but also can be part of a multi-char fold */
#   define _HAS_NONLATIN1_FOLD_CLOSURE_ONLY_FOR_USE_BY_REGCOMP_DOT_C_AND_REGEXEC_DOT_C(c) ((! cBOOL(FITS_IN_8_BITS(c))) || (PL_charclass[(U8) (c)] & _CC_mask(_CC_NONLATIN1_FOLD)))

#   define _isQUOTEMETA(c) _generic_isCC(c, _CC_QUOTEMETA)
#   define _IS_NON_FINAL_FOLD_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) \
                                           _generic_isCC(c, _CC_NON_FINAL_FOLD)
#   define _IS_IN_SOME_FOLD_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) \
                                           _generic_isCC(c, _CC_IS_IN_SOME_FOLD)
#   define _IS_MNEMONIC_CNTRL_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) \
                                            _generic_isCC(c, _CC_MNEMONIC_CNTRL)
#else   /* else we don't have perl.h H_PERL */

    /* If we don't have perl.h, we are compiling a utility program.  Below we
     * hard-code various macro definitions that wouldn't otherwise be available
     * to it. Most are coded based on first principals.  First some ones common
     * to both ASCII and EBCDIC */
#   define isDIGIT_A(c)  ((c) <= '9' && (c) >= '0')
#   define isBLANK_A(c)  ((c) == ' ' || (c) == '\t')
#   define isSPACE_A(c)  (isBLANK_A(c)                                       \
                          || (c) == '\n'                                     \
                          || (c) == '\r'                                     \
                          || (c) == '\v'                                     \
                          || (c) == '\f')
#   ifdef EBCDIC    /* There are gaps between 'i' and 'j'; 'r' and 's'.  Same
                       for uppercase.  This is ordered to exclude most things
                       early */
#       define isLOWER_A(c)  ((c) >= 'a' && (c) <= 'z'                       \
                               && ((c) <= 'i'                                \
                                   || ((c) >= 'j' && (c) <= 'r')             \
                                   || (c) >= 's'))
#       define isUPPER_A(c)  ((c) >= 'A' && (c) <= 'Z'                       \
                               && ((c) <= 'I'                                \
                                   || ((c) >= 'J' && (c) <= 'R')             \
                                   || (c) >= 'S'))
#   else   /* ASCII platform. */
#       define isLOWER_A(c)  ((c) >= 'a' && (c) <= 'z')
#       define isUPPER_A(c)  ((c) <= 'Z' && (c) >= 'A')
#   endif

    /* Some more ASCII, non-ASCII common definitions */
#   define isALPHA_A(c)  (isUPPER_A(c) || isLOWER_A(c))
#   define isALPHANUMERIC_A(c) (isALPHA_A(c) || isDIGIT_A(c))
#   define isWORDCHAR_A(c)   (isALPHANUMERIC_A(c) || (c) == '_')
#   define isIDFIRST_A(c)    (isALPHA_A(c) || (c) == '_')
#   define isXDIGIT_A(c) (isDIGIT_A(c)                                      \
                          || ((c) >= 'a' && (c) <= 'f')                     \
                          || ((c) <= 'F' && (c) >= 'A'))

#   ifdef EBCDIC
#       define isPUNCT_A(c)  ((c) == '-' || (c) == '!' || (c) == '"'        \
                           || (c) == '#' || (c) == '$' || (c) == '%'        \
                           || (c) == '&' || (c) == '\'' || (c) == '('       \
                           || (c) == ')' || (c) == '*' || (c) == '+'        \
                           || (c) == ',' || (c) == '.' || (c) == '/'        \
                           || (c) == ':' || (c) == ';' || (c) == '<'        \
                           || (c) == '=' || (c) == '>' || (c) == '?'        \
                           || (c) == '@' || (c) == '[' || (c) == '\\'       \
                           || (c) == ']' || (c) == '^' || (c) == '_'        \
                           || (c) == '`' || (c) == '{' || (c) == '|'        \
                           || (c) == '}' || (c) == '~')
#       define isGRAPH_A(c)  (isALPHANUMERIC_A(c) || isPUNCT_A(c))
#       define isPRINT_A(c)  (isGRAPH_A(c) || (c) == ' ')

#       ifdef QUESTION_MARK_CTRL
#           define _isQMC(c) ((c) == QUESTION_MARK_CTRL)
#       else
#           define _isQMC(c) 0
#       endif

        /* I (khw) can't think of a way to define all the ASCII controls
         * without resorting to a libc (locale-sensitive) call.  But we know
         * that all controls but the question-mark one are in the range 0-0x3f.
         * This makes sure that all the controls that have names are included,
         * and all controls that are also considered ASCII in the locale.  This
         * may include more or fewer than what it actually should, but the
         * wrong ones are less-important controls, so likely won't impact
         * things (keep in mind that this is compiled only if perl.h isn't
         * available).  The question mark control is included if available */
#       define isCNTRL_A(c)  (((c) < 0x40 && isascii(c))                    \
                            || (c) == '\0' || (c) == '\a' || (c) == '\b'    \
                            || (c) == '\f' || (c) == '\n' || (c) == '\r'    \
                            || (c) == '\t' || (c) == '\v' || _isQMC(c))

#       define isASCII(c)    (isCNTRL_A(c) || isPRINT_A(c))
#   else    /* ASCII platform; things are simpler, and  isASCII has already
               been defined */
#       define isGRAPH_A(c)  (((c) > ' ' && (c) < 127))
#       define isPRINT_A(c)  (isGRAPH_A(c) || (c) == ' ')
#       define isPUNCT_A(c)  (isGRAPH_A(c) && (! isALPHANUMERIC_A(c)))
#       define isCNTRL_A(c)  (isASCII(c) && (! isPRINT_A(c)))
#   endif

    /* The _L1 macros may be unnecessary for the utilities; I (khw) added them
     * during debugging, and it seems best to keep them.  We may be called
     * without NATIVE_TO_LATIN1 being defined.  On ASCII platforms, it doesn't
     * do anything anyway, so make it not a problem */
#   if ! defined(EBCDIC) && ! defined(NATIVE_TO_LATIN1)
#       define NATIVE_TO_LATIN1(ch) (ch)
#   endif
#   define isALPHA_L1(c)     (isUPPER_L1(c) || isLOWER_L1(c))
#   define isALPHANUMERIC_L1(c) (isALPHA_L1(c) || isDIGIT_A(c))
#   define isBLANK_L1(c)     (isBLANK_A(c)                                   \
                              || (FITS_IN_8_BITS(c)                          \
                                  && NATIVE_TO_LATIN1((U8) c) == 0xA0))
#   define isCNTRL_L1(c)     (FITS_IN_8_BITS(c) && (! isPRINT_L1(c)))
#   define isGRAPH_L1(c)     (isPRINT_L1(c) && (! isBLANK_L1(c)))
#   define isLOWER_L1(c)     (isLOWER_A(c)                                   \
                              || (FITS_IN_8_BITS(c)                          \
                                  && ((NATIVE_TO_LATIN1((U8) c) >= 0xDF      \
                                       && NATIVE_TO_LATIN1((U8) c) != 0xF7)  \
                                       || NATIVE_TO_LATIN1((U8) c) == 0xAA   \
                                       || NATIVE_TO_LATIN1((U8) c) == 0xBA   \
                                       || NATIVE_TO_LATIN1((U8) c) == 0xB5)))
#   define isPRINT_L1(c)     (isPRINT_A(c)                                   \
                              || (FITS_IN_8_BITS(c)                          \
                                  && NATIVE_TO_LATIN1((U8) c) >= 0xA0))
#   define isPUNCT_L1(c)     (isPUNCT_A(c)                                   \
                              || (FITS_IN_8_BITS(c)                          \
                                  && (NATIVE_TO_LATIN1((U8) c) == 0xA1       \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xA7    \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xAB    \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xB6    \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xB7    \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xBB    \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xBF)))
#   define isSPACE_L1(c)     (isSPACE_A(c)                                   \
                              || (FITS_IN_8_BITS(c)                          \
                                  && (NATIVE_TO_LATIN1((U8) c) == 0x85       \
                                      || NATIVE_TO_LATIN1((U8) c) == 0xA0)))
#   define isUPPER_L1(c)     (isUPPER_A(c)                                   \
                              || (FITS_IN_8_BITS(c)                          \
                                  && (NATIVE_TO_LATIN1((U8) c) >= 0xC0       \
                                      && NATIVE_TO_LATIN1((U8) c) <= 0xDE    \
                                      && NATIVE_TO_LATIN1((U8) c) != 0xD7)))
#   define isWORDCHAR_L1(c)  (isIDFIRST_L1(c) || isDIGIT_A(c))
#   define isIDFIRST_L1(c)   (isALPHA_L1(c) || NATIVE_TO_LATIN1(c) == '_')
#   define isCHARNAME_CONT(c) (isWORDCHAR_L1(c)                              \
                               || isBLANK_L1(c)                              \
                               || (c) == '-'                                 \
                               || (c) == '('                                 \
                               || (c) == ')')
    /* The following are not fully accurate in the above-ASCII range.  I (khw)
     * don't think it's necessary to be so for the purposes where this gets
     * compiled */
#   define _isQUOTEMETA(c)      (FITS_IN_8_BITS(c) && ! isWORDCHAR_L1(c))
#   define _IS_IN_SOME_FOLD_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) isALPHA_L1(c)

    /*  And these aren't accurate at all.  They are useful only for above
     *  Latin1, which utilities and bootstrapping don't deal with */
#   define _IS_NON_FINAL_FOLD_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) 0
#   define _HAS_NONLATIN1_SIMPLE_FOLD_CLOSURE_ONLY_FOR_USE_BY_REGCOMP_DOT_C_AND_REGEXEC_DOT_C(c) 0
#   define _HAS_NONLATIN1_FOLD_CLOSURE_ONLY_FOR_USE_BY_REGCOMP_DOT_C_AND_REGEXEC_DOT_C(c) 0

    /* Many of the macros later in this file are defined in terms of these.  By
     * implementing them with a function, which converts the class number into
     * a call to the desired macro, all of the later ones work.  However, that
     * function won't be actually defined when building a utility program (no
     * perl.h), and so a compiler error will be generated if one is attempted
     * to be used.  And the above-Latin1 code points require Unicode tables to
     * be present, something unlikely to be the case when bootstrapping */
#   define _generic_isCC(c, classnum)                                        \
         (FITS_IN_8_BITS(c) && S_bootstrap_ctype((U8) (c), (classnum), TRUE))
#   define _generic_isCC_A(c, classnum)                                      \
         (FITS_IN_8_BITS(c) && S_bootstrap_ctype((U8) (c), (classnum), FALSE))
#endif  /* End of no perl.h H_PERL */

#define isALPHANUMERIC(c)  isALPHANUMERIC_A(c)
#define isALPHA(c)   isALPHA_A(c)
#define isASCII_A(c)  isASCII(c)
#define isASCII_L1(c)  isASCII(c)
#define isBLANK(c)   isBLANK_A(c)
#define isCNTRL(c)   isCNTRL_A(c)
#define isDIGIT(c)   isDIGIT_A(c)
#define isGRAPH(c)   isGRAPH_A(c)
#define isIDFIRST(c) isIDFIRST_A(c)
#define isLOWER(c)   isLOWER_A(c)
#define isPRINT(c)   isPRINT_A(c)
#define isPSXSPC_A(c) isSPACE_A(c)
#define isPSXSPC(c)  isPSXSPC_A(c)
#define isPSXSPC_L1(c) isSPACE_L1(c)
#define isPUNCT(c)   isPUNCT_A(c)
#define isSPACE(c)   isSPACE_A(c)
#define isUPPER(c)   isUPPER_A(c)
#define isWORDCHAR(c) isWORDCHAR_A(c)
#define isXDIGIT(c)  isXDIGIT_A(c)

/* ASCII casing.  These could also be written as
    #define toLOWER(c) (isASCII(c) ? toLOWER_LATIN1(c) : (c))
    #define toUPPER(c) (isASCII(c) ? toUPPER_LATIN1_MOD(c) : (c))
   which uses table lookup and mask instead of subtraction.  (This would
   work because the _MOD does not apply in the ASCII range) */
#define toLOWER(c)  (isUPPER(c) ? (U8)((c) + ('a' - 'A')) : (c))
#define toUPPER(c)  (isLOWER(c) ? (U8)((c) - ('a' - 'A')) : (c))

/* In the ASCII range, these are equivalent to what they're here defined to be.
 * But by creating these definitions, other code doesn't have to be aware of
 * this detail */
#define toFOLD(c)    toLOWER(c)
#define toTITLE(c)   toUPPER(c)

#define toLOWER_A(c) toLOWER(c)
#define toUPPER_A(c) toUPPER(c)
#define toFOLD_A(c)  toFOLD(c)
#define toTITLE_A(c) toTITLE(c)

/* Use table lookup for speed; returns the input itself if is out-of-range */
#define toLOWER_LATIN1(c)    ((! FITS_IN_8_BITS(c))                        \
                             ? (c)                                         \
                             : PL_latin1_lc[ (U8) (c) ])
#define toLOWER_L1(c)    toLOWER_LATIN1(c)  /* Synonym for consistency */

/* Modified uc.  Is correct uc except for three non-ascii chars which are
 * all mapped to one of them, and these need special handling; returns the
 * input itself if is out-of-range */
#define toUPPER_LATIN1_MOD(c) ((! FITS_IN_8_BITS(c))                       \
                               ? (c)                                       \
                               : PL_mod_latin1_uc[ (U8) (c) ])
#define IN_UTF8_CTYPE_LOCALE PL_in_utf8_CTYPE_locale

/* Use foo_LC_uvchr() instead  of these for beyond the Latin1 range */

/* For internal core Perl use only: the base macro for defining macros like
 * isALPHA_LC, which uses the current LC_CTYPE locale.  'c' is the code point
 * (0-255) to check.  In a UTF-8 locale, the result is the same as calling
 * isFOO_L1(); the 'utf8_locale_classnum' parameter is something like
 * _CC_UPPER, which gives the class number for doing this.  For non-UTF-8
 * locales, the code to actually do the test this is passed in 'non_utf8'.  If
 * 'c' is above 255, 0 is returned.  For accessing the full range of possible
 * code points under locale rules, use the macros based on _generic_LC_uvchr
 * instead of this. */
#define _generic_LC_base(c, utf8_locale_classnum, non_utf8)                    \
           (! FITS_IN_8_BITS(c)                                                \
           ? 0                                                                 \
           : IN_UTF8_CTYPE_LOCALE                                              \
             ? cBOOL(PL_charclass[(U8) (c)] & _CC_mask(utf8_locale_classnum))  \
             : cBOOL(non_utf8))

/* For internal core Perl use only: a helper macro for defining macros like
 * isALPHA_LC.  'c' is the code point (0-255) to check.  The function name to
 * actually do this test is passed in 'non_utf8_func', which is called on 'c',
 * casting 'c' to the macro _LC_CAST, which should not be parenthesized.  See
 * _generic_LC_base for more info */
#define _generic_LC(c, utf8_locale_classnum, non_utf8_func)                    \
                        _generic_LC_base(c,utf8_locale_classnum,               \
                                         non_utf8_func( (_LC_CAST) (c)))

/* For internal core Perl use only: like _generic_LC, but also returns TRUE if
 * 'c' is the platform's native underscore character */
#define _generic_LC_underscore(c,utf8_locale_classnum,non_utf8_func)           \
                        _generic_LC_base(c, utf8_locale_classnum,              \
                                         (non_utf8_func( (_LC_CAST) (c))       \
                                          || (char)(c) == '_'))

/* These next three are also for internal core Perl use only: case-change
 * helper macros */
#define _generic_toLOWER_LC(c, function, cast)  (! FITS_IN_8_BITS(c)           \
                                                ? (c)                          \
                                                : (IN_UTF8_CTYPE_LOCALE)       \
                                                  ? PL_latin1_lc[ (U8) (c) ]   \
                                                : (cast)function((cast)(c)))

/* Note that the result can be larger than a byte in a UTF-8 locale.  It
 * returns a single value, so can't adequately return the upper case of LATIN
 * SMALL LETTER SHARP S in a UTF-8 locale (which should be a string of two
 * values "SS");  instead it asserts against that under DEBUGGING, and
 * otherwise returns its input */
#define _generic_toUPPER_LC(c, function, cast)                                 \
                    (! FITS_IN_8_BITS(c)                                       \
                    ? (c)                                                      \
                    : ((! IN_UTF8_CTYPE_LOCALE)                                \
                      ? (cast)function((cast)(c))                              \
                      : ((((U8)(c)) == MICRO_SIGN)                             \
                        ? GREEK_CAPITAL_LETTER_MU                              \
                        : ((((U8)(c)) == LATIN_SMALL_LETTER_Y_WITH_DIAERESIS)  \
                          ? LATIN_CAPITAL_LETTER_Y_WITH_DIAERESIS              \
                          : ((((U8)(c)) == LATIN_SMALL_LETTER_SHARP_S)         \
                            ? (__ASSERT_(0) (c))                               \
                            : PL_mod_latin1_uc[ (U8) (c) ])))))

/* Note that the result can be larger than a byte in a UTF-8 locale.  It
 * returns a single value, so can't adequately return the fold case of LATIN
 * SMALL LETTER SHARP S in a UTF-8 locale (which should be a string of two
 * values "ss"); instead it asserts against that under DEBUGGING, and
 * otherwise returns its input */
#define _generic_toFOLD_LC(c, function, cast)                                  \
                    ((UNLIKELY((c) == MICRO_SIGN) && IN_UTF8_CTYPE_LOCALE)     \
                      ? GREEK_SMALL_LETTER_MU                                  \
                      : (__ASSERT_(! IN_UTF8_CTYPE_LOCALE                      \
                                   || (c) != LATIN_SMALL_LETTER_SHARP_S)       \
                         _generic_toLOWER_LC(c, function, cast)))

/* Use the libc versions for these if available. */
#if defined(HAS_ISASCII)
#   define isASCII_LC(c) (FITS_IN_8_BITS(c) && isascii( (U8) (c)))
#else
#   define isASCII_LC(c) isASCII(c)
#endif

#if defined(HAS_ISBLANK)
#   define isBLANK_LC(c) _generic_LC(c, _CC_BLANK, isblank)
#else /* Unlike isASCII, varies if in a UTF-8 locale */
#   define isBLANK_LC(c) ((IN_UTF8_CTYPE_LOCALE) ? isBLANK_L1(c) : isBLANK(c))
#endif

#define _LC_CAST U8

#ifdef WIN32
    /* The Windows functions don't bother to follow the POSIX standard, which
     * for example says that something can't both be a printable and a control.
     * But Windows treats the \t control as a printable, and does such things
     * as making superscripts into both digits and punctuation.  This tames
     * these flaws by assuming that the definitions of both controls and space
     * are correct, and then making sure that other definitions don't have
     * weirdnesses, by making sure that isalnum() isn't also ispunct(), etc.
     * Not all possible weirdnesses are checked for, just the ones that were
     * detected on actual Microsoft code pages */

#  define isCNTRL_LC(c)  _generic_LC(c, _CC_CNTRL, iscntrl)
#  define isSPACE_LC(c)  _generic_LC(c, _CC_SPACE, isspace)

#  define isALPHA_LC(c)  (_generic_LC(c, _CC_ALPHA, isalpha)                  \
                                                    && isALPHANUMERIC_LC(c))
#  define isALPHANUMERIC_LC(c)  (_generic_LC(c, _CC_ALPHANUMERIC, isalnum) && \
                                                              ! isPUNCT_LC(c))
#  define isDIGIT_LC(c)  (_generic_LC(c, _CC_DIGIT, isdigit) &&               \
                                                         isALPHANUMERIC_LC(c))
#  define isGRAPH_LC(c)  (_generic_LC(c, _CC_GRAPH, isgraph) && isPRINT_LC(c))
#  define isIDFIRST_LC(c) (((c) == '_')                                       \
                 || (_generic_LC(c, _CC_IDFIRST, isalpha) && ! isPUNCT_LC(c)))
#  define isLOWER_LC(c)  (_generic_LC(c, _CC_LOWER, islower) && isALPHA_LC(c))
#  define isPRINT_LC(c)  (_generic_LC(c, _CC_PRINT, isprint) && ! isCNTRL_LC(c))
#  define isPUNCT_LC(c)  (_generic_LC(c, _CC_PUNCT, ispunct) && ! isCNTRL_LC(c))
#  define isUPPER_LC(c)  (_generic_LC(c, _CC_UPPER, isupper) && isALPHA_LC(c))
#  define isWORDCHAR_LC(c) (((c) == '_') || isALPHANUMERIC_LC(c))
#  define isXDIGIT_LC(c) (_generic_LC(c, _CC_XDIGIT, isxdigit)                \
                                                    && isALPHANUMERIC_LC(c))

#  define toLOWER_LC(c) _generic_toLOWER_LC((c), tolower, U8)
#  define toUPPER_LC(c) _generic_toUPPER_LC((c), toupper, U8)
#  define toFOLD_LC(c)  _generic_toFOLD_LC((c), tolower, U8)

#elif defined(CTYPE256) || (!defined(isascii) && !defined(HAS_ISASCII))
    /* For most other platforms */

#  define isALPHA_LC(c)   _generic_LC(c, _CC_ALPHA, isalpha)
#  define isALPHANUMERIC_LC(c)  _generic_LC(c, _CC_ALPHANUMERIC, isalnum)
#  define isCNTRL_LC(c)    _generic_LC(c, _CC_CNTRL, iscntrl)
#  define isDIGIT_LC(c)    _generic_LC(c, _CC_DIGIT, isdigit)
#  define isGRAPH_LC(c)    _generic_LC(c, _CC_GRAPH, isgraph)
#  define isIDFIRST_LC(c)  _generic_LC_underscore(c, _CC_IDFIRST, isalpha)
#  define isLOWER_LC(c)    _generic_LC(c, _CC_LOWER, islower)
#  define isPRINT_LC(c)    _generic_LC(c, _CC_PRINT, isprint)
#  define isPUNCT_LC(c)    _generic_LC(c, _CC_PUNCT, ispunct)
#  define isSPACE_LC(c)    _generic_LC(c, _CC_SPACE, isspace)
#  define isUPPER_LC(c)    _generic_LC(c, _CC_UPPER, isupper)
#  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
#  define isXDIGIT_LC(c)   _generic_LC(c, _CC_XDIGIT, isxdigit)


#  define toLOWER_LC(c) _generic_toLOWER_LC((c), tolower, U8)
#  define toUPPER_LC(c) _generic_toUPPER_LC((c), toupper, U8)
#  define toFOLD_LC(c)  _generic_toFOLD_LC((c), tolower, U8)

#else  /* The final fallback position */

#  define isALPHA_LC(c)	        (isascii(c) && isalpha(c))
#  define isALPHANUMERIC_LC(c)  (isascii(c) && isalnum(c))
#  define isCNTRL_LC(c)	        (isascii(c) && iscntrl(c))
#  define isDIGIT_LC(c)	        (isascii(c) && isdigit(c))
#  define isGRAPH_LC(c)	        (isascii(c) && isgraph(c))
#  define isIDFIRST_LC(c)	(isascii(c) && (isalpha(c) || (c) == '_'))
#  define isLOWER_LC(c)	        (isascii(c) && islower(c))
#  define isPRINT_LC(c)	        (isascii(c) && isprint(c))
#  define isPUNCT_LC(c)	        (isascii(c) && ispunct(c))
#  define isSPACE_LC(c)	        (isascii(c) && isspace(c))
#  define isUPPER_LC(c)	        (isascii(c) && isupper(c))
#  define isWORDCHAR_LC(c)	(isascii(c) && (isalnum(c) || (c) == '_'))
#  define isXDIGIT_LC(c)        (isascii(c) && isxdigit(c))

#  define toLOWER_LC(c)	(isascii(c) ? tolower(c) : (c))
#  define toUPPER_LC(c)	(isascii(c) ? toupper(c) : (c))
#  define toFOLD_LC(c)	(isascii(c) ? tolower(c) : (c))

#endif

#define isIDCONT(c)             isWORDCHAR(c)
#define isIDCONT_A(c)           isWORDCHAR_A(c)
#define isIDCONT_L1(c)	        isWORDCHAR_L1(c)
#define isIDCONT_LC(c)	        isWORDCHAR_LC(c)
#define isPSXSPC_LC(c)		isSPACE_LC(c)

/* For internal core Perl use only: the base macros for defining macros like
 * isALPHA_uvchr.  'c' is the code point to check.  'classnum' is the POSIX class
 * number defined earlier in this file.  _generic_uvchr() is used for POSIX
 * classes where there is a macro or function 'above_latin1' that takes the
 * single argument 'c' and returns the desired value.  These exist for those
 * classes which have simple definitions, avoiding the overhead of a hash
 * lookup or inversion list binary search.  _generic_swash_uvchr() can be used
 * for classes where that overhead is faster than a direct lookup.
 * _generic_uvchr() won't compile if 'c' isn't unsigned, as it won't match the
 * 'above_latin1' prototype. _generic_isCC() macro does bounds checking, so
 * have duplicate checks here, so could create versions of the macros that
 * don't, but experiments show that gcc optimizes them out anyway. */

/* Note that all ignore 'use bytes' */
#define _generic_uvchr(classnum, above_latin1, c) ((c) < 256                    \
                                             ? _generic_isCC(c, classnum)     \
                                             : above_latin1(c))
#define _generic_swash_uvchr(classnum, c) ((c) < 256                            \
                                             ? _generic_isCC(c, classnum)     \
                                             : _is_uni_FOO(classnum, c))
#define isALPHA_uvchr(c)      _generic_swash_uvchr(_CC_ALPHA, c)
#define isALPHANUMERIC_uvchr(c) _generic_swash_uvchr(_CC_ALPHANUMERIC, c)
#define isASCII_uvchr(c)      isASCII(c)
#define isBLANK_uvchr(c)      _generic_uvchr(_CC_BLANK, is_HORIZWS_cp_high, c)
#define isCNTRL_uvchr(c)      isCNTRL_L1(c) /* All controls are in Latin1 */
#define isDIGIT_uvchr(c)      _generic_swash_uvchr(_CC_DIGIT, c)
#define isGRAPH_uvchr(c)      _generic_swash_uvchr(_CC_GRAPH, c)
#define isIDCONT_uvchr(c)     _generic_uvchr(_CC_WORDCHAR, _is_uni_perl_idcont, c)
#define isIDFIRST_uvchr(c)    _generic_uvchr(_CC_IDFIRST, _is_uni_perl_idstart, c)
#define isLOWER_uvchr(c)      _generic_swash_uvchr(_CC_LOWER, c)
#define isPRINT_uvchr(c)      _generic_swash_uvchr(_CC_PRINT, c)

#define isPUNCT_uvchr(c)      _generic_swash_uvchr(_CC_PUNCT, c)
#define isSPACE_uvchr(c)      _generic_uvchr(_CC_SPACE, is_XPERLSPACE_cp_high, c)
#define isPSXSPC_uvchr(c)     isSPACE_uvchr(c)

#define isUPPER_uvchr(c)      _generic_swash_uvchr(_CC_UPPER, c)
#define isVERTWS_uvchr(c)     _generic_uvchr(_CC_VERTSPACE, is_VERTWS_cp_high, c)
#define isWORDCHAR_uvchr(c)   _generic_swash_uvchr(_CC_WORDCHAR, c)
#define isXDIGIT_uvchr(c)     _generic_uvchr(_CC_XDIGIT, is_XDIGIT_cp_high, c)

#define toFOLD_uvchr(c,s,l)	to_uni_fold(c,s,l)
#define toLOWER_uvchr(c,s,l)	to_uni_lower(c,s,l)
#define toTITLE_uvchr(c,s,l)	to_uni_title(c,s,l)
#define toUPPER_uvchr(c,s,l)	to_uni_upper(c,s,l)

/* For backwards compatibility, even though '_uni' should mean official Unicode
 * code points, in Perl it means native for those below 256 */
#define isALPHA_uni(c)          isALPHA_uvchr(c)
#define isALPHANUMERIC_uni(c)   isALPHANUMERIC_uvchr(c)
#define isASCII_uni(c)          isASCII_uvchr(c)
#define isBLANK_uni(c)          isBLANK_uvchr(c)
#define isCNTRL_uni(c)          isCNTRL_uvchr(c)
#define isDIGIT_uni(c)          isDIGIT_uvchr(c)
#define isGRAPH_uni(c)          isGRAPH_uvchr(c)
#define isIDCONT_uni(c)         isIDCONT_uvchr(c)
#define isIDFIRST_uni(c)        isIDFIRST_uvchr(c)
#define isLOWER_uni(c)          isLOWER_uvchr(c)
#define isPRINT_uni(c)          isPRINT_uvchr(c)
#define isPUNCT_uni(c)          isPUNCT_uvchr(c)
#define isSPACE_uni(c)          isSPACE_uvchr(c)
#define isPSXSPC_uni(c)         isPSXSPC_uvchr(c)
#define isUPPER_uni(c)          isUPPER_uvchr(c)
#define isVERTWS_uni(c)         isVERTWS_uvchr(c)
#define isWORDCHAR_uni(c)       isWORDCHAR_uvchr(c)
#define isXDIGIT_uni(c)         isXDIGIT_uvchr(c)
#define toFOLD_uni(c,s,l)       toFOLD_uvchr(c,s,l)
#define toLOWER_uni(c,s,l)      toLOWER_uvchr(c,s,l)
#define toTITLE_uni(c,s,l)      toTITLE_uvchr(c,s,l)
#define toUPPER_uni(c,s,l)      toUPPER_uvchr(c,s,l)

/* For internal core Perl use only: the base macros for defining macros like
 * isALPHA_LC_uvchr.  These are like isALPHA_LC, but the input can be any code
 * point, not just 0-255.  Like _generic_uvchr, there are two versions, one for
 * simple class definitions; the other for more complex.  These are like
 * _generic_uvchr, so see it for more info. */
#define _generic_LC_uvchr(latin1, above_latin1, c)                            \
                                    (c < 256 ? latin1(c) : above_latin1(c))
#define _generic_LC_swash_uvchr(latin1, classnum, c)                          \
                            (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))

#define isALPHA_LC_uvchr(c)  _generic_LC_swash_uvchr(isALPHA_LC, _CC_ALPHA, c)
#define isALPHANUMERIC_LC_uvchr(c)  _generic_LC_swash_uvchr(isALPHANUMERIC_LC, \
                                                         _CC_ALPHANUMERIC, c)
#define isASCII_LC_uvchr(c)   isASCII_LC(c)
#define isBLANK_LC_uvchr(c)  _generic_LC_uvchr(isBLANK_LC,                    \
                                                        is_HORIZWS_cp_high, c)
#define isCNTRL_LC_uvchr(c)  (c < 256 ? isCNTRL_LC(c) : 0)
#define isDIGIT_LC_uvchr(c)  _generic_LC_swash_uvchr(isDIGIT_LC, _CC_DIGIT, c)
#define isGRAPH_LC_uvchr(c)  _generic_LC_swash_uvchr(isGRAPH_LC, _CC_GRAPH, c)
#define isIDCONT_LC_uvchr(c) _generic_LC_uvchr(isIDCONT_LC,                   \
                                                  _is_uni_perl_idcont, c)
#define isIDFIRST_LC_uvchr(c) _generic_LC_uvchr(isIDFIRST_LC,                 \
                                                  _is_uni_perl_idstart, c)
#define isLOWER_LC_uvchr(c)  _generic_LC_swash_uvchr(isLOWER_LC, _CC_LOWER, c)
#define isPRINT_LC_uvchr(c)  _generic_LC_swash_uvchr(isPRINT_LC, _CC_PRINT, c)
#define isPSXSPC_LC_uvchr(c)  isSPACE_LC_uvchr(c)
#define isPUNCT_LC_uvchr(c)  _generic_LC_swash_uvchr(isPUNCT_LC, _CC_PUNCT, c)
#define isSPACE_LC_uvchr(c)  _generic_LC_uvchr(isSPACE_LC,                    \
                                                    is_XPERLSPACE_cp_high, c)
#define isUPPER_LC_uvchr(c)  _generic_LC_swash_uvchr(isUPPER_LC, _CC_UPPER, c)
#define isWORDCHAR_LC_uvchr(c) _generic_LC_swash_uvchr(isWORDCHAR_LC,         \
                                                           _CC_WORDCHAR, c)
#define isXDIGIT_LC_uvchr(c) _generic_LC_uvchr(isXDIGIT_LC,                  \
                                                       is_XDIGIT_cp_high, c)

#define isBLANK_LC_uni(c)    isBLANK_LC_uvchr(UNI_TO_NATIVE(c))

/* For internal core Perl use only: the base macros for defining macros like
 * isALPHA_utf8.  These are like the earlier defined macros, but take an input
 * UTF-8 encoded string 'p'. If the input is in the Latin1 range, use
 * the Latin1 macro 'classnum' on 'p'.  Otherwise use the value given by the
 * 'utf8' parameter.  This relies on the fact that ASCII characters have the
 * same representation whether utf8 or not.  Note that it assumes that the utf8
 * has been validated, and ignores 'use bytes' */
#define _generic_utf8(classnum, p, utf8) (UTF8_IS_INVARIANT(*(p))              \
                                         ? _generic_isCC(*(p), classnum)       \
                                         : (UTF8_IS_DOWNGRADEABLE_START(*(p))) \
                                           ? _generic_isCC(                    \
                                                EIGHT_BIT_UTF8_TO_NATIVE(*(p), \
                                                                   *((p)+1 )), \
                                                classnum)                      \
                                           : utf8)
/* Like the above, but calls 'above_latin1(p)' to get the utf8 value.
 * 'above_latin1' can be a macro */
#define _generic_func_utf8(classnum, above_latin1, p)  \
                                    _generic_utf8(classnum, p, above_latin1(p))
/* Like the above, but passes classnum to _isFOO_utf8(), instead of having an
 * 'above_latin1' parameter */
#define _generic_swash_utf8(classnum, p)  \
                      _generic_utf8(classnum, p, _is_utf8_FOO(classnum, p))

/* Like the above, but should be used only when it is known that there are no
 * characters in the upper-Latin1 range (128-255 on ASCII platforms) which the
 * class is TRUE for.  Hence it can skip the tests for this range.
 * 'above_latin1' should include its arguments */
#define _generic_utf8_no_upper_latin1(classnum, p, above_latin1)               \
                                         (UTF8_IS_INVARIANT(*(p))              \
                                         ? _generic_isCC(*(p), classnum)       \
                                         : (UTF8_IS_ABOVE_LATIN1(*(p)))        \
                                           ? above_latin1                      \
                                           : 0)

/* NOTE that some of these macros have very similar ones in regcharclass.h.
 * For example, there is (at the time of this writing) an 'is_SPACE_utf8()'
 * there, differing in name only by an underscore from the one here
 * 'isSPACE_utf8().  The difference is that the ones here are probably more
 * efficient and smaller, using an O(1) array lookup for Latin1-range code
 * points; the regcharclass.h ones are implemented as a series of
 * "if-else-if-else ..." */

#define isALPHA_utf8(p)        _generic_swash_utf8(_CC_ALPHA, p)
#define isALPHANUMERIC_utf8(p) _generic_swash_utf8(_CC_ALPHANUMERIC, p)
#define isASCII_utf8(p)        isASCII(*p) /* Because ASCII is invariant under
                                               utf8, the non-utf8 macro works
                                             */
#define isBLANK_utf8(p)        _generic_func_utf8(_CC_BLANK, is_HORIZWS_high, p)

#ifdef EBCDIC
    /* Because all controls are UTF-8 invariants in EBCDIC, we can use this
     * more efficient macro instead of the more general one */
#   define isCNTRL_utf8(p)      isCNTRL_L1(*(p))
#else
#   define isCNTRL_utf8(p)      _generic_utf8(_CC_CNTRL, p, 0)
#endif

#define isDIGIT_utf8(p)         _generic_utf8_no_upper_latin1(_CC_DIGIT, p,   \
                                                  _is_utf8_FOO(_CC_DIGIT, p))
#define isGRAPH_utf8(p)         _generic_swash_utf8(_CC_GRAPH, p)
#define isIDCONT_utf8(p)        _generic_func_utf8(_CC_WORDCHAR,              \
                                                  _is_utf8_perl_idcont, p)

/* To prevent S_scan_word in toke.c from hanging, we have to make sure that
 * IDFIRST is an alnum.  See
 * http://rt.perl.org/rt3/Ticket/Display.html?id=74022 for more detail than you
 * ever wanted to know about.  (In the ASCII range, there isn't a difference.)
 * This used to be not the XID version, but we decided to go with the more
 * modern Unicode definition */
#define isIDFIRST_utf8(p)   _generic_func_utf8(_CC_IDFIRST,                  \
                                                _is_utf8_perl_idstart, p)

#define isLOWER_utf8(p)     _generic_swash_utf8(_CC_LOWER, p)
#define isPRINT_utf8(p)     _generic_swash_utf8(_CC_PRINT, p)
#define isPSXSPC_utf8(p)    isSPACE_utf8(p)
#define isPUNCT_utf8(p)     _generic_swash_utf8(_CC_PUNCT, p)
#define isSPACE_utf8(p)     _generic_func_utf8(_CC_SPACE, is_XPERLSPACE_high, p)
#define isUPPER_utf8(p)     _generic_swash_utf8(_CC_UPPER, p)
#define isVERTWS_utf8(p)    _generic_func_utf8(_CC_VERTSPACE, is_VERTWS_high, p)
#define isWORDCHAR_utf8(p)  _generic_swash_utf8(_CC_WORDCHAR, p)
#define isXDIGIT_utf8(p)    _generic_utf8_no_upper_latin1(_CC_XDIGIT, p,     \
                                                          is_XDIGIT_high(p))

#define toFOLD_utf8(p,s,l)	to_utf8_fold(p,s,l)
#define toLOWER_utf8(p,s,l)	to_utf8_lower(p,s,l)
#define toTITLE_utf8(p,s,l)	to_utf8_title(p,s,l)
#define toUPPER_utf8(p,s,l)	to_utf8_upper(p,s,l)

/* For internal core Perl use only: the base macros for defining macros like
 * isALPHA_LC_utf8.  These are like _generic_utf8, but if the first code point
 * in 'p' is within the 0-255 range, it uses locale rules from the passed-in
 * 'macro' parameter */
#define _generic_LC_utf8(macro, p, utf8)                                    \
                         (UTF8_IS_INVARIANT(*(p))                           \
                         ? macro(*(p))                                      \
                         : (UTF8_IS_DOWNGRADEABLE_START(*(p)))              \
                           ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))\
                           : utf8)

#define _generic_LC_swash_utf8(macro, classnum, p)                         \
                    _generic_LC_utf8(macro, p, _is_utf8_FOO(classnum, p))
#define _generic_LC_func_utf8(macro, above_latin1, p)                         \
                              _generic_LC_utf8(macro, p, above_latin1(p))

#define isALPHANUMERIC_LC_utf8(p) _generic_LC_swash_utf8(isALPHANUMERIC_LC,   \
                                                      _CC_ALPHANUMERIC, p)
#define isALPHA_LC_utf8(p)    _generic_LC_swash_utf8(isALPHA_LC, _CC_ALPHA, p)
#define isASCII_LC_utf8(p)     isASCII_LC(*p)
#define isBLANK_LC_utf8(p)    _generic_LC_func_utf8(isBLANK_LC,               \
                                                         is_HORIZWS_high, p)
#define isCNTRL_LC_utf8(p)    _generic_LC_utf8(isCNTRL_LC, p, 0)
#define isDIGIT_LC_utf8(p)    _generic_LC_swash_utf8(isDIGIT_LC, _CC_DIGIT, p)
#define isGRAPH_LC_utf8(p)    _generic_LC_swash_utf8(isGRAPH_LC, _CC_GRAPH, p)
#define isIDCONT_LC_utf8(p)   _generic_LC_func_utf8(isIDCONT_LC,              \
                                                    _is_utf8_perl_idcont, p)
#define isIDFIRST_LC_utf8(p)  _generic_LC_func_utf8(isIDFIRST_LC,             \
                                                    _is_utf8_perl_idstart, p)
#define isLOWER_LC_utf8(p)    _generic_LC_swash_utf8(isLOWER_LC, _CC_LOWER, p)
#define isPRINT_LC_utf8(p)    _generic_LC_swash_utf8(isPRINT_LC, _CC_PRINT, p)
#define isPSXSPC_LC_utf8(p)    isSPACE_LC_utf8(p)
#define isPUNCT_LC_utf8(p)    _generic_LC_swash_utf8(isPUNCT_LC, _CC_PUNCT, p)
#define isSPACE_LC_utf8(p)    _generic_LC_func_utf8(isSPACE_LC,               \
                                                        is_XPERLSPACE_high, p)
#define isUPPER_LC_utf8(p)    _generic_LC_swash_utf8(isUPPER_LC, _CC_UPPER, p)
#define isWORDCHAR_LC_utf8(p) _generic_LC_swash_utf8(isWORDCHAR_LC,           \
                                                            _CC_WORDCHAR, p)
#define isXDIGIT_LC_utf8(p)   _generic_LC_func_utf8(isXDIGIT_LC,              \
                                                            is_XDIGIT_high, p)

/* Macros for backwards compatibility and for completeness when the ASCII and
 * Latin1 values are identical */
#define isALPHAU(c)         isALPHA_L1(c)
#define isDIGIT_L1(c)       isDIGIT_A(c)
#define isOCTAL(c)          isOCTAL_A(c)
#define isOCTAL_L1(c)       isOCTAL_A(c)
#define isXDIGIT_L1(c)      isXDIGIT_A(c)
#define isALNUM(c)          isWORDCHAR(c)
#define isALNUMU(c)         isWORDCHAR_L1(c)
#define isALNUM_LC(c)       isWORDCHAR_LC(c)
#define isALNUM_uni(c)      isWORDCHAR_uni(c)
#define isALNUM_LC_uvchr(c) isWORDCHAR_LC_uvchr(c)
#define isALNUM_utf8(p)     isWORDCHAR_utf8(p)
#define isALNUM_LC_utf8(p)  isWORDCHAR_LC_utf8(p)
#define isALNUMC_A(c)       isALPHANUMERIC_A(c)      /* Mnemonic: "C's alnum" */
#define isALNUMC_L1(c)      isALPHANUMERIC_L1(c)
#define isALNUMC(c)	    isALPHANUMERIC(c)
#define isALNUMC_LC(c)	    isALPHANUMERIC_LC(c)
#define isALNUMC_uni(c)     isALPHANUMERIC_uni(c)
#define isALNUMC_LC_uvchr(c) isALPHANUMERIC_LC_uvchr(c)
#define isALNUMC_utf8(p)    isALPHANUMERIC_utf8(p)
#define isALNUMC_LC_utf8(p) isALPHANUMERIC_LC_utf8(p)

/* On EBCDIC platforms, CTRL-@ is 0, CTRL-A is 1, etc, just like on ASCII,
 * except that they don't necessarily mean the same characters, e.g. CTRL-D is
 * 4 on both systems, but that is EOT on ASCII;  ST on EBCDIC.
 * '?' is special-cased on EBCDIC to APC, which is the control there that is
 * the outlier from the block that contains the other controls, just like
 * toCTRL('?') on ASCII yields DEL, the control that is the outlier from the C0
 * block.  If it weren't special cased, it would yield a non-control.
 * The conversion works both ways, so toCTRL('D') is 4, and toCTRL(4) is D,
 * etc. */
#ifndef EBCDIC
#  define toCTRL(c)    (__ASSERT_(FITS_IN_8_BITS(c)) toUPPER(((U8)(c))) ^ 64)
#else
#  define toCTRL(c)   (__ASSERT_(FITS_IN_8_BITS(c))                     \
                      ((isPRINT_A(c))                                   \
                       ? (UNLIKELY((c) == '?')                          \
                         ? QUESTION_MARK_CTRL                           \
                         : (NATIVE_TO_LATIN1(toUPPER((U8) (c))) ^ 64))  \
                       : (UNLIKELY((c) == QUESTION_MARK_CTRL)           \
                         ? '?'                                          \
                         : (LATIN1_TO_NATIVE(((U8) (c)) ^ 64)))))
#endif

/* Line numbers are unsigned, 32 bits. */
typedef U32 line_t;
#define NOLINE ((line_t) 4294967295UL)  /* = FFFFFFFF */

/* Helpful alias for version prescan */
#define is_LAX_VERSION(a,b) \
	(a != Perl_prescan_version(aTHX_ a, FALSE, b, NULL, NULL, NULL, NULL))

#define is_STRICT_VERSION(a,b) \
	(a != Perl_prescan_version(aTHX_ a, TRUE, b, NULL, NULL, NULL, NULL))

#define BADVERSION(a,b,c) \
	if (b) { \
	    *b = c; \
	} \
	return a;

/* Converts a character known to represent a hexadecimal digit (0-9, A-F, or
 * a-f) to its numeric value.  READ_XDIGIT's argument is a string pointer,
 * which is advanced.  The input is validated only by an assert() in DEBUGGING
 * builds.  In both ASCII and EBCDIC the last 4 bits of the digits are 0-9; and
 * the last 4 bits of A-F and a-f are 1-6, so adding 9 yields 10-15 */
#define XDIGIT_VALUE(c) (__ASSERT_(isXDIGIT(c)) (0xf & (isDIGIT(c)        \
                                                        ? (c)             \
                                                        : ((c) + 9))))
#define READ_XDIGIT(s)  (__ASSERT_(isXDIGIT(*s)) (0xf & (isDIGIT(*(s))     \
                                                        ? (*(s)++)         \
                                                        : (*(s)++ + 9))))

/* Converts a character known to represent an octal digit (0-7) to its numeric
 * value.  The input is validated only by an assert() in DEBUGGING builds.  In
 * both ASCII and EBCDIC the last 3 bits of the octal digits range from 0-7. */
#define OCTAL_VALUE(c) (__ASSERT_(isOCTAL(c)) (7 & (c)))

/* Efficiently returns a boolean as to if two native characters are equivalent
 * case-insenstively.  At least one of the characters must be one of [A-Za-z];
 * the ALPHA in the name is to remind you of that.  This is asserted() in
 * DEBUGGING builds.  Because [A-Za-z] are invariant under UTF-8, this macro
 * works (on valid input) for both non- and UTF-8-encoded bytes.
 *
 * When one of the inputs is a compile-time constant and gets folded by the
 * compiler, this reduces to an AND and a TEST.  On both EBCDIC and ASCII
 * machines, 'A' and 'a' differ by a single bit; the same with the upper and
 * lower case of all other ASCII-range alphabetics.  On ASCII platforms, they
 * are 32 apart; on EBCDIC, they are 64.  At compile time, this uses an
 * exclusive 'or' to find that bit and then inverts it to form a mask, with
 * just a single 0, in the bit position where the upper- and lowercase differ.
 * */
#define isALPHA_FOLD_EQ(c1, c2)                                         \
                      (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
                      ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
#define isALPHA_FOLD_NE(c1, c2) (! isALPHA_FOLD_EQ((c1), (c2)))

/*
=head1 Memory Management

=for apidoc Am|void|Newx|void* ptr|int nitems|type
The XSUB-writer's interface to the C C<malloc> function.

Memory obtained by this should B<ONLY> be freed with L<"Safefree">.

In 5.9.3, Newx() and friends replace the older New() API, and drops
the first parameter, I<x>, a debug aid which allowed callers to identify
themselves.  This aid has been superseded by a new build option,
PERL_MEM_LOG (see L<perlhacktips/PERL_MEM_LOG>).  The older API is still
there for use in XS modules supporting older perls.

=for apidoc Am|void|Newxc|void* ptr|int nitems|type|cast
The XSUB-writer's interface to the C C<malloc> function, with
cast.  See also C<L</Newx>>.

Memory obtained by this should B<ONLY> be freed with L<"Safefree">.

=for apidoc Am|void|Newxz|void* ptr|int nitems|type
The XSUB-writer's interface to the C C<malloc> function.  The allocated
memory is zeroed with C<memzero>.  See also C<L</Newx>>.

Memory obtained by this should B<ONLY> be freed with L<"Safefree">.

=for apidoc Am|void|Renew|void* ptr|int nitems|type
The XSUB-writer's interface to the C C<realloc> function.

Memory obtained by this should B<ONLY> be freed with L<"Safefree">.

=for apidoc Am|void|Renewc|void* ptr|int nitems|type|cast
The XSUB-writer's interface to the C C<realloc> function, with
cast.

Memory obtained by this should B<ONLY> be freed with L<"Safefree">.

=for apidoc Am|void|Safefree|void* ptr
The XSUB-writer's interface to the C C<free> function.

This should B<ONLY> be used on memory obtained using L<"Newx"> and friends.

=for apidoc Am|void|Move|void* src|void* dest|int nitems|type
The XSUB-writer's interface to the C C<memmove> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and
C<type> is the type.  Can do overlapping moves.  See also C<L</Copy>>.

=for apidoc Am|void *|MoveD|void* src|void* dest|int nitems|type
Like C<Move> but returns C<dest>.  Useful
for encouraging compilers to tail-call
optimise.

=for apidoc Am|void|Copy|void* src|void* dest|int nitems|type
The XSUB-writer's interface to the C C<memcpy> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and
C<type> is the type.  May fail on overlapping copies.  See also C<L</Move>>.

=for apidoc Am|void *|CopyD|void* src|void* dest|int nitems|type

Like C<Copy> but returns C<dest>.  Useful
for encouraging compilers to tail-call
optimise.

=for apidoc Am|void|Zero|void* dest|int nitems|type

The XSUB-writer's interface to the C C<memzero> function.  The C<dest> is the
destination, C<nitems> is the number of items, and C<type> is the type.

=for apidoc Am|void *|ZeroD|void* dest|int nitems|type

Like C<Zero> but returns dest.  Useful
for encouraging compilers to tail-call
optimise.

=for apidoc Am|void|StructCopy|type *src|type *dest|type
This is an architecture-independent macro to copy one structure to another.

=for apidoc Am|void|PoisonWith|void* dest|int nitems|type|U8 byte

Fill up memory with a byte pattern (a byte repeated over and over
again) that hopefully catches attempts to access uninitialized memory.

=for apidoc Am|void|PoisonNew|void* dest|int nitems|type

PoisonWith(0xAB) for catching access to allocated but uninitialized memory.

=for apidoc Am|void|PoisonFree|void* dest|int nitems|type

PoisonWith(0xEF) for catching access to freed memory.

=for apidoc Am|void|Poison|void* dest|int nitems|type

PoisonWith(0xEF) for catching access to freed memory.

=cut */

/* Maintained for backwards-compatibility only. Use newSV() instead. */
#ifndef PERL_CORE
#define NEWSV(x,len)	newSV(len)
#endif

#define MEM_SIZE_MAX ((MEM_SIZE)~0)


#ifdef PERL_MALLOC_WRAP

/* This expression will be constant-folded at compile time.  It checks
 * whether or not the type of the count n is so small (e.g. U8 or U16, or
 * U32 on 64-bit systems) that there's no way a wrap-around could occur.
 * As well as avoiding the need for a run-time check in some cases, it's
 * designed to avoid compiler warnings like:
 *     comparison is always false due to limited range of data type
 * It's mathematically equivalent to
 *    max(n) * sizeof(t) > MEM_SIZE_MAX
 */

#  define _MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) \
    (8 * sizeof(n) + sizeof(t) > sizeof(MEM_SIZE))

/* This is written in a slightly odd way to avoid various spurious
 * compiler warnings. We *want* to write the expression as
 *    _MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) && (n > C)
 * (for some compile-time constant C), but even when the LHS
 * constant-folds to false at compile-time, g++ insists on emitting
 * warnings about the RHS (e.g. "comparison is always false"), so instead
 * we write it as
 *
 *    (cond ? n : X) > C
 *
 * where X is a constant with X > C always false. Choosing a value for X
 * is tricky. If 0, some compilers will complain about 0 > C always being
 * false; if 1, Coverity complains when n happens to be the constant value
 * '1', that cond ? 1 : 1 has the same value on both branches; so use C
 * for X and hope that nothing else whines.
 */

#  define _MEM_WRAP_WILL_WRAP(n,t) \
      ((_MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) ? (MEM_SIZE)(n) : \
            MEM_SIZE_MAX/sizeof(t)) > MEM_SIZE_MAX/sizeof(t))

#  define MEM_WRAP_CHECK(n,t) \
	(void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
        && (croak_memory_wrap(),0))

#  define MEM_WRAP_CHECK_1(n,t,a) \
	(void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
	&& (Perl_croak_nocontext("%s",(a)),0))

#define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),

#define PERL_STRLEN_ROUNDUP(n) ((void)(((n) > MEM_SIZE_MAX - 2 * PERL_STRLEN_ROUNDUP_QUANTUM) ? (croak_memory_wrap(),0):0),((n-1+PERL_STRLEN_ROUNDUP_QUANTUM)&~((MEM_SIZE)PERL_STRLEN_ROUNDUP_QUANTUM-1)))
#else

#define MEM_WRAP_CHECK(n,t)
#define MEM_WRAP_CHECK_1(n,t,a)
#define MEM_WRAP_CHECK_2(n,t,a,b)
#define MEM_WRAP_CHECK_(n,t)

#define PERL_STRLEN_ROUNDUP(n) (((n-1+PERL_STRLEN_ROUNDUP_QUANTUM)&~((MEM_SIZE)PERL_STRLEN_ROUNDUP_QUANTUM-1)))

#endif

#ifdef PERL_MEM_LOG
/*
 * If PERL_MEM_LOG is defined, all Newx()s, Renew()s, and Safefree()s
 * go through functions, which are handy for debugging breakpoints, but
 * which more importantly get the immediate calling environment (file and
 * line number, and C function name if available) passed in.  This info can
 * then be used for logging the calls, for which one gets a sample
 * implementation unless -DPERL_MEM_LOG_NOIMPL is also defined.
 *
 * Known problems:
 * - not all memory allocs get logged, only those
 *   that go through Newx() and derivatives (while all
 *   Safefrees do get logged)
 * - __FILE__ and __LINE__ do not work everywhere
 * - __func__ or __FUNCTION__ even less so
 * - I think more goes on after the perlio frees but
 *   the thing is that STDERR gets closed (as do all
 *   the file descriptors)
 * - no deeper calling stack than the caller of the Newx()
 *   or the kind, but do I look like a C reflection/introspection
 *   utility to you?
 * - the function prototypes for the logging functions
 *   probably should maybe be somewhere else than handy.h
 * - one could consider inlining (macrofying) the logging
 *   for speed, but I am too lazy
 * - one could imagine recording the allocations in a hash,
 *   (keyed by the allocation address?), and maintain that
 *   through reallocs and frees, but how to do that without
 *   any News() happening...?
 * - lots of -Ddefines to get useful/controllable output
 * - lots of ENV reads
 */

# ifdef PERL_CORE
#  ifndef PERL_MEM_LOG_NOIMPL
enum mem_log_type {
  MLT_ALLOC,
  MLT_REALLOC,
  MLT_FREE,
  MLT_NEW_SV,
  MLT_DEL_SV
};
#  endif
#  if defined(PERL_IN_SV_C)  /* those are only used in sv.c */
void Perl_mem_log_new_sv(const SV *sv, const char *filename, const int linenumber, const char *funcname);
void Perl_mem_log_del_sv(const SV *sv, const char *filename, const int linenumber, const char *funcname);
#  endif
# endif

#endif

#ifdef PERL_MEM_LOG
#define MEM_LOG_ALLOC(n,t,a)     Perl_mem_log_alloc(n,sizeof(t),STRINGIFY(t),a,__FILE__,__LINE__,FUNCTION__)
#define MEM_LOG_REALLOC(n,t,v,a) Perl_mem_log_realloc(n,sizeof(t),STRINGIFY(t),v,a,__FILE__,__LINE__,FUNCTION__)
#define MEM_LOG_FREE(a)          Perl_mem_log_free(a,__FILE__,__LINE__,FUNCTION__)
#endif

#ifndef MEM_LOG_ALLOC
#define MEM_LOG_ALLOC(n,t,a)     (a)
#endif
#ifndef MEM_LOG_REALLOC
#define MEM_LOG_REALLOC(n,t,v,a) (a)
#endif
#ifndef MEM_LOG_FREE
#define MEM_LOG_FREE(a)          (a)
#endif

#define Newx(v,n,t)	(v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
#define Newxc(v,n,t,c)	(v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
#define Newxz(v,n,t)	(v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))

#ifndef PERL_CORE
/* pre 5.9.x compatibility */
#define New(x,v,n,t)	Newx(v,n,t)
#define Newc(x,v,n,t,c)	Newxc(v,n,t,c)
#define Newz(x,v,n,t)	Newxz(v,n,t)
#endif

#define Renew(v,n,t) \
	  (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
#define Renewc(v,n,t,c) \
	  (v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))

#ifdef PERL_POISON
#define Safefree(d) \
  ((d) ? (void)(safefree(MEM_LOG_FREE((Malloc_t)(d))), Poison(&(d), 1, Malloc_t)) : (void) 0)
#else
#define Safefree(d)	safefree(MEM_LOG_FREE((Malloc_t)(d)))
#endif

#define Move(s,d,n,t)	(MEM_WRAP_CHECK_(n,t) (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define Copy(s,d,n,t)	(MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define Zero(d,n,t)	(MEM_WRAP_CHECK_(n,t) (void)memzero((char*)(d), (n) * sizeof(t)))

#define MoveD(s,d,n,t)	(MEM_WRAP_CHECK_(n,t) memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define CopyD(s,d,n,t)	(MEM_WRAP_CHECK_(n,t) memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#ifdef HAS_MEMSET
#define ZeroD(d,n,t)	(MEM_WRAP_CHECK_(n,t) memzero((char*)(d), (n) * sizeof(t)))
#else
/* Using bzero(), which returns void.  */
#define ZeroD(d,n,t)	(MEM_WRAP_CHECK_(n,t) memzero((char*)(d), (n) * sizeof(t)),d)
#endif

#define PoisonWith(d,n,t,b)	(MEM_WRAP_CHECK_(n,t) (void)memset((char*)(d), (U8)(b), (n) * sizeof(t)))
#define PoisonNew(d,n,t)	PoisonWith(d,n,t,0xAB)
#define PoisonFree(d,n,t)	PoisonWith(d,n,t,0xEF)
#define Poison(d,n,t)		PoisonFree(d,n,t)

#ifdef PERL_POISON
#  define PERL_POISON_EXPR(x) x
#else
#  define PERL_POISON_EXPR(x)
#endif

#ifdef USE_STRUCT_COPY
#define StructCopy(s,d,t) (*((t*)(d)) = *((t*)(s)))
#else
#define StructCopy(s,d,t) Copy(s,d,1,t)
#endif

/* C_ARRAY_LENGTH is the number of elements in the C array (so you
 * want your zero-based indices to be less than but not equal to).
 *
 * C_ARRAY_END is one past the last: half-open/half-closed range,
 * not last-inclusive range. */
#define C_ARRAY_LENGTH(a)	(sizeof(a)/sizeof((a)[0]))
#define C_ARRAY_END(a)		((a) + C_ARRAY_LENGTH(a))

#ifdef NEED_VA_COPY
# ifdef va_copy
#  define Perl_va_copy(s, d) va_copy(d, s)
# else
#  if defined(__va_copy)
#   define Perl_va_copy(s, d) __va_copy(d, s)
#  else
#   define Perl_va_copy(s, d) Copy(s, d, 1, va_list)
#  endif
# endif
#endif

/* convenience debug macros */
#ifdef USE_ITHREADS
#define pTHX_FORMAT  "Perl interpreter: 0x%p"
#define pTHX__FORMAT ", Perl interpreter: 0x%p"
#define pTHX_VALUE_   (void *)my_perl,
#define pTHX_VALUE    (void *)my_perl
#define pTHX__VALUE_ ,(void *)my_perl,
#define pTHX__VALUE  ,(void *)my_perl
#else
#define pTHX_FORMAT
#define pTHX__FORMAT
#define pTHX_VALUE_
#define pTHX_VALUE
#define pTHX__VALUE_
#define pTHX__VALUE
#endif /* USE_ITHREADS */

/* Perl_deprecate was not part of the public API, and did not have a deprecate()
   shortcut macro defined without -DPERL_CORE. Neither codesearch.google.com nor
   CPAN::Unpack show any users outside the core.  */
#ifdef PERL_CORE
#  define deprecate(s) Perl_ck_warner_d(aTHX_ packWARN(WARN_DEPRECATED),    \
                                            "Use of " s " is deprecated")
#endif

/* Internal macros to deal with gids and uids */
#ifdef PERL_CORE

#  if Uid_t_size > IVSIZE
#    define sv_setuid(sv, uid)       sv_setnv((sv), (NV)(uid))
#    define SvUID(sv)                SvNV(sv)
#  else
#    if Uid_t_sign <= 0
#      define sv_setuid(sv, uid)       sv_setiv((sv), (IV)(uid))
#      define SvUID(sv)                SvIV(sv)
#    else
#      define sv_setuid(sv, uid)       sv_setuv((sv), (UV)(uid))
#      define SvUID(sv)                SvUV(sv)
#    endif
#  endif /* Uid_t_size */

#  if Gid_t_size > IVSIZE
#    define sv_setgid(sv, gid)       sv_setnv((sv), (NV)(gid))
#    define SvGID(sv)                SvNV(sv)
#  else
#    if Gid_t_sign <= 0
#      define sv_setgid(sv, gid)       sv_setiv((sv), (IV)(gid))
#      define SvGID(sv)                SvIV(sv)
#    else
#      define sv_setgid(sv, gid)       sv_setuv((sv), (UV)(gid))
#      define SvGID(sv)                SvUV(sv)
#    endif
#  endif /* Gid_t_size */

#endif

#endif  /* HANDY_H */

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /*    hv.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1996, 1997, 1998, 1999,
 *    2000, 2001, 2002, 2003, 2005, 2006, 2007, 2008, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/* These control hash traversal randomization and the environment variable PERL_PERTURB_KEYS.
 * Currently disabling this functionality will break a few tests, but should otherwise work fine.
 * See perlrun for more details. */

#if defined(PERL_PERTURB_KEYS_DISABLED)
#   define PL_HASH_RAND_BITS_ENABLED        0
#   define PERL_HASH_ITER_BUCKET(iter)      ((iter)->xhv_riter)
#else
#   define PERL_HASH_RANDOMIZE_KEYS         1
#   if defined(PERL_PERTURB_KEYS_RANDOM)
#       define PL_HASH_RAND_BITS_ENABLED    1
#   elif defined(PERL_PERTURB_KEYS_DETERMINISTIC)
#       define PL_HASH_RAND_BITS_ENABLED    2
#   else
#       define USE_PERL_PERTURB_KEYS        1
#       define PL_HASH_RAND_BITS_ENABLED    PL_hash_rand_bits_enabled
#   endif
#   define PERL_HASH_ITER_BUCKET(iter)      (((iter)->xhv_riter) ^ ((iter)->xhv_rand))
#endif

/* entry in hash value chain */
struct he {
    /* Keep hent_next first in this structure, because sv_free_arenas take
       advantage of this to share code between the he arenas and the SV
       body arenas  */
    HE		*hent_next;	/* next entry in chain */
    HEK		*hent_hek;	/* hash key */
    union {
	SV	*hent_val;	/* scalar value that was hashed */
	Size_t	hent_refcount;	/* references for this shared hash key */
    } he_valu;
};

/* hash key -- defined separately for use as shared pointer */
struct hek {
    U32		hek_hash;	/* hash of key */
    I32		hek_len;	/* length of hash key */
    char	hek_key[1];	/* variable-length hash key */
    /* the hash-key is \0-terminated */
    /* after the \0 there is a byte for flags, such as whether the key
       is UTF-8 */
};

struct shared_he {
    struct he shared_he_he;
    struct hek shared_he_hek;
};

/* Subject to change.
   Don't access this directly.
   Use the funcs in mro_core.c
*/

struct mro_alg {
    AV *(*resolve)(pTHX_ HV* stash, U32 level);
    const char *name;
    U16 length;
    U16	kflags;	/* For the hash API - set HVhek_UTF8 if name is UTF-8 */
    U32 hash; /* or 0 */
};

struct mro_meta {
    /* a hash holding the different MROs private data.  */
    HV      *mro_linear_all;
    /* a pointer directly to the current MROs private data.  If mro_linear_all
       is NULL, this owns the SV reference, else it is just a pointer to a
       value stored in and owned by mro_linear_all.  */
    SV      *mro_linear_current;
    HV      *mro_nextmethod; /* next::method caching */
    U32     cache_gen;       /* Bumping this invalidates our method cache */
    U32     pkg_gen;         /* Bumps when local methods/@ISA change */
    const struct mro_alg *mro_which; /* which mro alg is in use? */
    HV      *isa;            /* Everything this class @ISA */
    HV      *super;          /* SUPER method cache */
    CV      *destroy;        /* DESTROY method if destroy_gen non-zero */
    U32     destroy_gen;     /* Generation number of DESTROY cache */
};

#define MRO_GET_PRIVATE_DATA(smeta, which)		   \
    (((smeta)->mro_which && (which) == (smeta)->mro_which) \
     ? (smeta)->mro_linear_current			   \
     : Perl_mro_get_private_data(aTHX_ (smeta), (which)))

/* Subject to change.
   Don't access this directly.
*/

union _xhvnameu {
    HEK *xhvnameu_name;		/* When xhv_name_count is 0 */
    HEK **xhvnameu_names;	/* When xhv_name_count is non-0 */
};

struct xpvhv_aux {
    union _xhvnameu xhv_name_u;	/* name, if a symbol table */
    AV		*xhv_backreferences; /* back references for weak references */
    HE		*xhv_eiter;	/* current entry of iterator */
    I32		xhv_riter;	/* current root of iterator */

/* Concerning xhv_name_count: When non-zero, xhv_name_u contains a pointer 
 * to an array of HEK pointers, this being the length. The first element is
 * the name of the stash, which may be NULL. If xhv_name_count is positive,
 * then *xhv_name is one of the effective names. If xhv_name_count is nega-
 * tive, then xhv_name_u.xhvnameu_names[1] is the first effective name.
 */
    I32		xhv_name_count;
    struct mro_meta *xhv_mro_meta;
#ifdef PERL_HASH_RANDOMIZE_KEYS
    U32         xhv_rand;       /* random value for hash traversal */
    U32         xhv_last_rand;  /* last random value for hash traversal,
                                   used to detect each() after insert for warnings */
#endif
    U32         xhv_fill_lazy;
    U32         xhv_aux_flags;      /* assorted extra flags */
};

#define HvAUXf_SCAN_STASH   0x1   /* stash is being scanned by gv_check */
#define HvAUXf_NO_DEREF     0x2   /* @{}, %{} etc (and nomethod) not present */

/* hash structure: */
/* This structure must match the beginning of struct xpvmg in sv.h. */
struct xpvhv {
    HV*		xmg_stash;	/* class package */
    union _xmgu	xmg_u;
    STRLEN      xhv_keys;       /* total keys, including placeholders */
    STRLEN      xhv_max;        /* subscript of last element of xhv_array */
};

/*
=head1 Hash Manipulation Functions

=for apidoc AmU||HEf_SVKEY
This flag, used in the length slot of hash entries and magic structures,
specifies the structure contains an C<SV*> pointer where a C<char*> pointer
is to be expected.  (For information only--not to be used).

=head1 Handy Values

=for apidoc AmU||Nullhv
Null HV pointer.

(deprecated - use C<(HV *)NULL> instead)

=head1 Hash Manipulation Functions

=for apidoc Am|char*|HvNAME|HV* stash
Returns the package name of a stash, or C<NULL> if C<stash> isn't a stash.
See C<L</SvSTASH>>, C<L</CvSTASH>>.

=for apidoc Am|STRLEN|HvNAMELEN|HV *stash
Returns the length of the stash's name.

=for apidoc Am|unsigned char|HvNAMEUTF8|HV *stash
Returns true if the name is in UTF-8 encoding.

=for apidoc Am|char*|HvENAME|HV* stash
Returns the effective name of a stash, or NULL if there is none.  The
effective name represents a location in the symbol table where this stash
resides.  It is updated automatically when packages are aliased or deleted.
A stash that is no longer in the symbol table has no effective name.  This
name is preferable to C<HvNAME> for use in MRO linearisations and isa
caches.

=for apidoc Am|STRLEN|HvENAMELEN|HV *stash
Returns the length of the stash's effective name.

=for apidoc Am|unsigned char|HvENAMEUTF8|HV *stash
Returns true if the effective name is in UTF-8 encoding.

=for apidoc Am|void*|HeKEY|HE* he
Returns the actual pointer stored in the key slot of the hash entry.  The
pointer may be either C<char*> or C<SV*>, depending on the value of
C<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros are
usually preferable for finding the value of a key.

=for apidoc Am|STRLEN|HeKLEN|HE* he
If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry
holds an C<SV*> key.  Otherwise, holds the actual length of the key.  Can
be assigned to.  The C<HePV()> macro is usually preferable for finding key
lengths.

=for apidoc Am|SV*|HeVAL|HE* he
Returns the value slot (type C<SV*>)
stored in the hash entry.  Can be assigned
to.

  SV *foo= HeVAL(hv);
  HeVAL(hv)= sv;


=for apidoc Am|U32|HeHASH|HE* he
Returns the computed hash stored in the hash entry.

=for apidoc Am|char*|HePV|HE* he|STRLEN len
Returns the key slot of the hash entry as a C<char*> value, doing any
necessary dereferencing of possibly C<SV*> keys.  The length of the string
is placed in C<len> (this is a macro, so do I<not> use C<&len>).  If you do
not care about what the length of the key is, you may use the global
variable C<PL_na>, though this is rather less efficient than using a local
variable.  Remember though, that hash keys in perl are free to contain
embedded nulls, so using C<strlen()> or similar is not a good way to find
the length of hash keys.  This is very similar to the C<SvPV()> macro
described elsewhere in this document.  See also C<L</HeUTF8>>.

If you are using C<HePV> to get values to pass to C<newSVpvn()> to create a
new SV, you should consider using C<newSVhek(HeKEY_hek(he))> as it is more
efficient.

=for apidoc Am|U32|HeUTF8|HE* he
Returns whether the C<char *> value returned by C<HePV> is encoded in UTF-8,
doing any necessary dereferencing of possibly C<SV*> keys.  The value returned
will be 0 or non-0, not necessarily 1 (or even a value with any low bits set),
so B<do not> blindly assign this to a C<bool> variable, as C<bool> may be a
typedef for C<char>.

=for apidoc Am|SV*|HeSVKEY|HE* he
Returns the key as an C<SV*>, or C<NULL> if the hash entry does not
contain an C<SV*> key.

=for apidoc Am|SV*|HeSVKEY_force|HE* he
Returns the key as an C<SV*>.  Will create and return a temporary mortal
C<SV*> if the hash entry contains only a C<char*> key.

=for apidoc Am|SV*|HeSVKEY_set|HE* he|SV* sv
Sets the key to a given C<SV*>, taking care to set the appropriate flags to
indicate the presence of an C<SV*> key, and returns the same
C<SV*>.

=cut
*/

#define PERL_HASH_DEFAULT_HvMAX 7

/* During hsplit(), if HvMAX(hv)+1 (the new bucket count) is >= this value,
 * we preallocate the HvAUX() struct.
 * The assumption being that we are using so much space anyway we might
 * as well allocate the extra bytes and speed up later keys()
 * or each() operations. We don't do this to small hashes as we assume
 * that a) it will be easy/fast to resize them to add the iterator, and b) that
 * many of them will be objects which won't be traversed. Larger hashes however
 * will take longer to extend, and the size of the aux struct is swamped by the
 * overall length of the bucket array.
 * */
#define PERL_HV_ALLOC_AUX_SIZE (1 << 9)

/* these hash entry flags ride on hent_klen (for use only in magic/tied HVs) */
#define HEf_SVKEY	-2	/* hent_key is an SV* */

#ifndef PERL_CORE
#  define Nullhv Null(HV*)
#endif
#define HvARRAY(hv)	((hv)->sv_u.svu_hash)
#define HvFILL(hv)	Perl_hv_fill(aTHX_ MUTABLE_HV(hv))
#define HvMAX(hv)	((XPVHV*)  SvANY(hv))->xhv_max
/* This quite intentionally does no flag checking first. That's your
   responsibility.  */
#define HvAUX(hv)	((struct xpvhv_aux*)&(HvARRAY(hv)[HvMAX(hv)+1]))
#define HvRITER(hv)	(*Perl_hv_riter_p(aTHX_ MUTABLE_HV(hv)))
#define HvEITER(hv)	(*Perl_hv_eiter_p(aTHX_ MUTABLE_HV(hv)))
#define HvRITER_set(hv,r)	Perl_hv_riter_set(aTHX_ MUTABLE_HV(hv), r)
#define HvEITER_set(hv,e)	Perl_hv_eiter_set(aTHX_ MUTABLE_HV(hv), e)
#define HvRITER_get(hv)	(SvOOK(hv) ? HvAUX(hv)->xhv_riter : -1)
#define HvEITER_get(hv)	(SvOOK(hv) ? HvAUX(hv)->xhv_eiter : NULL)
#define HvRAND_get(hv)	(SvOOK(hv) ? HvAUX(hv)->xhv_rand : 0)
#define HvLASTRAND_get(hv)	(SvOOK(hv) ? HvAUX(hv)->xhv_last_rand : 0)

#define HvNAME(hv)	HvNAME_get(hv)
#define HvNAMELEN(hv)   HvNAMELEN_get(hv)
#define HvENAME(hv)	HvENAME_get(hv)
#define HvENAMELEN(hv)  HvENAMELEN_get(hv)

/* Checking that hv is a valid package stash is the
   caller's responsibility */
#define HvMROMETA(hv) (HvAUX(hv)->xhv_mro_meta \
                       ? HvAUX(hv)->xhv_mro_meta \
                       : Perl_mro_meta_init(aTHX_ hv))

#define HvNAME_HEK_NN(hv)			  \
 (						  \
  HvAUX(hv)->xhv_name_count			  \
  ? *HvAUX(hv)->xhv_name_u.xhvnameu_names	  \
  : HvAUX(hv)->xhv_name_u.xhvnameu_name		  \
 )
/* This macro may go away without notice.  */
#define HvNAME_HEK(hv) \
	(SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name ? HvNAME_HEK_NN(hv) : NULL)
#define HvNAME_get(hv) \
	((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
			 ? HEK_KEY(HvNAME_HEK_NN(hv)) : NULL)
#define HvNAMELEN_get(hv) \
	((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
				 ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
#define HvNAMEUTF8(hv) \
	((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
				 ? HEK_UTF8(HvNAME_HEK_NN(hv)) : 0)
#define HvENAME_HEK_NN(hv)                                             \
 (                                                                      \
  HvAUX(hv)->xhv_name_count > 0   ? HvAUX(hv)->xhv_name_u.xhvnameu_names[0] : \
  HvAUX(hv)->xhv_name_count < -1  ? HvAUX(hv)->xhv_name_u.xhvnameu_names[1] : \
  HvAUX(hv)->xhv_name_count == -1 ? NULL                              : \
                                    HvAUX(hv)->xhv_name_u.xhvnameu_name \
 )
#define HvENAME_HEK(hv) \
	(SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name ? HvENAME_HEK_NN(hv) : NULL)
#define HvENAME_get(hv) \
   ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) \
			 ? HEK_KEY(HvENAME_HEK_NN(hv)) : NULL)
#define HvENAMELEN_get(hv) \
   ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) \
				 ? HEK_LEN(HvENAME_HEK_NN(hv)) : 0)
#define HvENAMEUTF8(hv) \
   ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) \
				 ? HEK_UTF8(HvENAME_HEK_NN(hv)) : 0)

/* the number of keys (including any placeholders) */
#define XHvTOTALKEYS(xhv)	((xhv)->xhv_keys)

/*
 * HvKEYS gets the number of keys that actually exist(), and is provided
 * for backwards compatibility with old XS code. The core uses HvUSEDKEYS
 * (keys, excluding placeholders) and HvTOTALKEYS (including placeholders)
 */
#define HvKEYS(hv)		HvUSEDKEYS(hv)
#define HvUSEDKEYS(hv)		(HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
#define HvTOTALKEYS(hv)		XHvTOTALKEYS((XPVHV*)  SvANY(hv))
#define HvPLACEHOLDERS(hv)	(*Perl_hv_placeholders_p(aTHX_ MUTABLE_HV(hv)))
#define HvPLACEHOLDERS_get(hv)	(SvMAGIC(hv) ? Perl_hv_placeholders_get(aTHX_ (const HV *)hv) : 0)
#define HvPLACEHOLDERS_set(hv,p)	Perl_hv_placeholders_set(aTHX_ MUTABLE_HV(hv), p)

#define HvSHAREKEYS(hv)		(SvFLAGS(hv) & SVphv_SHAREKEYS)
#define HvSHAREKEYS_on(hv)	(SvFLAGS(hv) |= SVphv_SHAREKEYS)
#define HvSHAREKEYS_off(hv)	(SvFLAGS(hv) &= ~SVphv_SHAREKEYS)

/* This is an optimisation flag. It won't be set if all hash keys have a 0
 * flag. Currently the only flags relate to utf8.
 * Hence it won't be set if all keys are 8 bit only. It will be set if any key
 * is utf8 (including 8 bit keys that were entered as utf8, and need upgrading
 * when retrieved during iteration. It may still be set when there are no longer
 * any utf8 keys.
 * See HVhek_ENABLEHVKFLAGS for the trigger.
 */
#define HvHASKFLAGS(hv)		(SvFLAGS(hv) & SVphv_HASKFLAGS)
#define HvHASKFLAGS_on(hv)	(SvFLAGS(hv) |= SVphv_HASKFLAGS)
#define HvHASKFLAGS_off(hv)	(SvFLAGS(hv) &= ~SVphv_HASKFLAGS)

#define HvLAZYDEL(hv)		(SvFLAGS(hv) & SVphv_LAZYDEL)
#define HvLAZYDEL_on(hv)	(SvFLAGS(hv) |= SVphv_LAZYDEL)
#define HvLAZYDEL_off(hv)	(SvFLAGS(hv) &= ~SVphv_LAZYDEL)

#ifndef PERL_CORE
#  define Nullhe Null(HE*)
#endif
#define HeNEXT(he)		(he)->hent_next
#define HeKEY_hek(he)		(he)->hent_hek
#define HeKEY(he)		HEK_KEY(HeKEY_hek(he))
#define HeKEY_sv(he)		(*(SV**)HeKEY(he))
#define HeKLEN(he)		HEK_LEN(HeKEY_hek(he))
#define HeKUTF8(he)  HEK_UTF8(HeKEY_hek(he))
#define HeKWASUTF8(he)  HEK_WASUTF8(HeKEY_hek(he))
#define HeKLEN_UTF8(he)  (HeKUTF8(he) ? -HeKLEN(he) : HeKLEN(he))
#define HeKFLAGS(he)  HEK_FLAGS(HeKEY_hek(he))
#define HeVAL(he)		(he)->he_valu.hent_val
#define HeHASH(he)		HEK_HASH(HeKEY_hek(he))
#define HePV(he,lp)		((HeKLEN(he) == HEf_SVKEY) ?		\
				 SvPV(HeKEY_sv(he),lp) :		\
				 ((lp = HeKLEN(he)), HeKEY(he)))
#define HeUTF8(he)		((HeKLEN(he) == HEf_SVKEY) ?		\
				 SvUTF8(HeKEY_sv(he)) :			\
				 (U32)HeKUTF8(he))

#define HeSVKEY(he)		((HeKEY(he) && 				\
				  HeKLEN(he) == HEf_SVKEY) ?		\
				 HeKEY_sv(he) : NULL)

#define HeSVKEY_force(he)	(HeKEY(he) ?				\
				 ((HeKLEN(he) == HEf_SVKEY) ?		\
				  HeKEY_sv(he) :			\
				  newSVpvn_flags(HeKEY(he),		\
                                                 HeKLEN(he),            \
                                                 SVs_TEMP |             \
                                      ( HeKUTF8(he) ? SVf_UTF8 : 0 ))) : \
				 &PL_sv_undef)
#define HeSVKEY_set(he,sv)	((HeKLEN(he) = HEf_SVKEY), (HeKEY_sv(he) = sv))

#ifndef PERL_CORE
#  define Nullhek Null(HEK*)
#endif
#define HEK_BASESIZE		STRUCT_OFFSET(HEK, hek_key[0])
#define HEK_HASH(hek)		(hek)->hek_hash
#define HEK_LEN(hek)		(hek)->hek_len
#define HEK_KEY(hek)		(hek)->hek_key
#define HEK_FLAGS(hek)	(*((unsigned char *)(HEK_KEY(hek))+HEK_LEN(hek)+1))

#define HVhek_UTF8	0x01 /* Key is utf8 encoded. */
#define HVhek_WASUTF8	0x02 /* Key is bytes here, but was supplied as utf8. */
#define HVhek_UNSHARED	0x08 /* This key isn't a shared hash key. */
/* the following flags are options for functions, they are not stored in heks */
#define HVhek_FREEKEY	0x100 /* Internal flag to say key is Newx()ed.  */
#define HVhek_PLACEHOLD	0x200 /* Internal flag to create placeholder.
                               * (may change, but Storable is a core module) */
#define HVhek_KEYCANONICAL 0x400 /* Internal flag - key is in canonical form.
				    If the string is UTF-8, it cannot be
				    converted to bytes. */
#define HVhek_MASK	0xFF

#define HVhek_ENABLEHVKFLAGS        (HVhek_MASK & ~(HVhek_UNSHARED))

#define HEK_UTF8(hek)		(HEK_FLAGS(hek) & HVhek_UTF8)
#define HEK_UTF8_on(hek)	(HEK_FLAGS(hek) |= HVhek_UTF8)
#define HEK_UTF8_off(hek)	(HEK_FLAGS(hek) &= ~HVhek_UTF8)
#define HEK_WASUTF8(hek)	(HEK_FLAGS(hek) & HVhek_WASUTF8)
#define HEK_WASUTF8_on(hek)	(HEK_FLAGS(hek) |= HVhek_WASUTF8)
#define HEK_WASUTF8_off(hek)	(HEK_FLAGS(hek) &= ~HVhek_WASUTF8)

/* calculate HV array allocation */
#ifndef PERL_USE_LARGE_HV_ALLOC
/* Default to allocating the correct size - default to assuming that malloc()
   is not broken and is efficient at allocating blocks sized at powers-of-two.
*/   
#  define PERL_HV_ARRAY_ALLOC_BYTES(size) ((size) * sizeof(HE*))
#else
#  define MALLOC_OVERHEAD 16
#  define PERL_HV_ARRAY_ALLOC_BYTES(size) \
			(((size) < 64)					\
			 ? (size) * sizeof(HE*)				\
			 : (size) * sizeof(HE*) * 2 - MALLOC_OVERHEAD)
#endif

/* Flags for hv_iternext_flags.  */
#define HV_ITERNEXT_WANTPLACEHOLDERS	0x01	/* Don't skip placeholders.  */

#define hv_iternext(hv)	hv_iternext_flags(hv, 0)
#define hv_magic(hv, gv, how) sv_magic(MUTABLE_SV(hv), MUTABLE_SV(gv), how, NULL, 0)
#define hv_undef(hv) Perl_hv_undef_flags(aTHX_ hv, 0)

#define Perl_sharepvn(pv, len, hash) HEK_KEY(share_hek(pv, len, hash))
#define sharepvn(pv, len, hash)	     Perl_sharepvn(pv, len, hash)

#define share_hek_hek(hek)						\
    (++(((struct shared_he *)(((char *)hek)				\
			      - STRUCT_OFFSET(struct shared_he,		\
					      shared_he_hek)))		\
	->shared_he_he.he_valu.hent_refcount),				\
     hek)

#define hv_store_ent(hv, keysv, val, hash)				\
    ((HE *) hv_common((hv), (keysv), NULL, 0, 0, HV_FETCH_ISSTORE,	\
		      (val), (hash)))

#define hv_exists_ent(hv, keysv, hash)					\
    (hv_common((hv), (keysv), NULL, 0, 0, HV_FETCH_ISEXISTS, 0, (hash))	\
     ? TRUE : FALSE)
#define hv_fetch_ent(hv, keysv, lval, hash)				\
    ((HE *) hv_common((hv), (keysv), NULL, 0, 0,			\
		      ((lval) ? HV_FETCH_LVALUE : 0), NULL, (hash)))
#define hv_delete_ent(hv, key, flags, hash)				\
    (MUTABLE_SV(hv_common((hv), (key), NULL, 0, 0, (flags) | HV_DELETE,	\
			  NULL, (hash))))

#define hv_store_flags(hv, key, klen, val, hash, flags)			\
    ((SV**) hv_common((hv), NULL, (key), (klen), (flags),		\
		      (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val),	\
		      (hash)))

#define hv_store(hv, key, klen, val, hash)				\
    ((SV**) hv_common_key_len((hv), (key), (klen),			\
			      (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV),	\
			      (val), (hash)))

#define hv_exists(hv, key, klen)					\
    (hv_common_key_len((hv), (key), (klen), HV_FETCH_ISEXISTS, NULL, 0) \
     ? TRUE : FALSE)

#define hv_fetch(hv, key, klen, lval)					\
    ((SV**) hv_common_key_len((hv), (key), (klen), (lval)		\
			      ? (HV_FETCH_JUST_SV | HV_FETCH_LVALUE)	\
			      : HV_FETCH_JUST_SV, NULL, 0))

#define hv_delete(hv, key, klen, flags)					\
    (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),			\
				  (flags) | HV_DELETE, NULL, 0)))

#ifdef PERL_CORE
# define hv_storehek(hv, hek, val) \
    hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),	\
	      HV_FETCH_ISSTORE|HV_FETCH_JUST_SV, (val), HEK_HASH(hek))
# define hv_fetchhek(hv, hek, lval) \
    ((SV **)								\
     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),	\
	       (lval)							\
		? (HV_FETCH_JUST_SV | HV_FETCH_LVALUE)			\
		: HV_FETCH_JUST_SV,					\
	       NULL, HEK_HASH(hek)))
# define hv_deletehek(hv, hek, flags) \
    hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
	      (flags)|HV_DELETE, NULL, HEK_HASH(hek))
#endif

/* This refcounted he structure is used for storing the hints used for lexical
   pragmas. Without threads, it's basically struct he + refcount.
   With threads, life gets more complex as the structure needs to be shared
   between threads (because it hangs from OPs, which are shared), hence the
   alternate definition and mutex.  */

struct refcounted_he;

/* flags for the refcounted_he API */
#define REFCOUNTED_HE_KEY_UTF8		0x00000001
#ifdef PERL_CORE
# define REFCOUNTED_HE_EXISTS		0x00000002
#endif

#ifdef PERL_CORE

/* Gosh. This really isn't a good name any longer.  */
struct refcounted_he {
    struct refcounted_he *refcounted_he_next;	/* next entry in chain */
#ifdef USE_ITHREADS
    U32                   refcounted_he_hash;
    U32                   refcounted_he_keylen;
#else
    HEK                  *refcounted_he_hek;	/* hint key */
#endif
    union {
	IV                refcounted_he_u_iv;
	UV                refcounted_he_u_uv;
	STRLEN            refcounted_he_u_len;
	void		 *refcounted_he_u_ptr;	/* Might be useful in future */
    } refcounted_he_val;
    U32	                  refcounted_he_refcnt;	/* reference count */
    /* First byte is flags. Then NUL-terminated value. Then for ithreads,
       non-NUL terminated key.  */
    char                  refcounted_he_data[1];
};

/*
=for apidoc m|SV *|refcounted_he_fetch_pvs|const struct refcounted_he *chain|const char *key|U32 flags

Like L</refcounted_he_fetch_pvn>, but takes a C<NUL>-terminated literal string
instead of a string/length pair, and no precomputed hash.

=cut
*/

#define refcounted_he_fetch_pvs(chain, key, flags) \
    Perl_refcounted_he_fetch_pvn(aTHX_ chain, STR_WITH_LEN(key), 0, flags)

/*
=for apidoc m|struct refcounted_he *|refcounted_he_new_pvs|struct refcounted_he *parent|const char *key|SV *value|U32 flags

Like L</refcounted_he_new_pvn>, but takes a C<NUL>-terminated literal string
instead of a string/length pair, and no precomputed hash.

=cut
*/

#define refcounted_he_new_pvs(parent, key, value, flags) \
    Perl_refcounted_he_new_pvn(aTHX_ parent, STR_WITH_LEN(key), 0, value, flags)

/* Flag bits are HVhek_UTF8, HVhek_WASUTF8, then */
#define HVrhek_undef	0x00 /* Value is undef. */
#define HVrhek_delete	0x10 /* Value is placeholder - signifies delete. */
#define HVrhek_IV	0x20 /* Value is IV. */
#define HVrhek_UV	0x30 /* Value is UV. */
#define HVrhek_PV	0x40 /* Value is a (byte) string. */
#define HVrhek_PV_UTF8	0x50 /* Value is a (utf8) string. */
/* Two spare. As these have to live in the optree, you can't store anything
   interpreter specific, such as SVs. :-( */
#define HVrhek_typemask 0x70

#ifdef USE_ITHREADS
/* A big expression to find the key offset */
#define REF_HE_KEY(chain)						\
	((((chain->refcounted_he_data[0] & 0x60) == 0x40)		\
	    ? chain->refcounted_he_val.refcounted_he_u_len + 1 : 0)	\
	 + 1 + chain->refcounted_he_data)
#endif

#  ifdef USE_ITHREADS
#    define HINTS_REFCNT_LOCK		MUTEX_LOCK(&PL_hints_mutex)
#    define HINTS_REFCNT_UNLOCK		MUTEX_UNLOCK(&PL_hints_mutex)
#  else
#    define HINTS_REFCNT_LOCK		NOOP
#    define HINTS_REFCNT_UNLOCK		NOOP
#  endif
#endif

#ifdef USE_ITHREADS
#  define HINTS_REFCNT_INIT		MUTEX_INIT(&PL_hints_mutex)
#  define HINTS_REFCNT_TERM		MUTEX_DESTROY(&PL_hints_mutex)
#else
#  define HINTS_REFCNT_INIT		NOOP
#  define HINTS_REFCNT_TERM		NOOP
#endif

/* Hash actions
 * Passed in PERL_MAGIC_uvar calls
 */
#define HV_DISABLE_UVAR_XKEY	0x01
/* We need to ensure that these don't clash with G_DISCARD, which is 2, as it
   is documented as being passed to hv_delete().  */
#define HV_FETCH_ISSTORE	0x04
#define HV_FETCH_ISEXISTS	0x08
#define HV_FETCH_LVALUE		0x10
#define HV_FETCH_JUST_SV	0x20
#define HV_DELETE		0x40
#define HV_FETCH_EMPTY_HE	0x80 /* Leave HeVAL null. */

/* Must not conflict with HVhek_UTF8 */
#define HV_NAME_SETALL		0x02

/*
=for apidoc newHV

Creates a new HV.  The reference count is set to 1.

=cut
*/

#define newHV()	MUTABLE_HV(newSV_type(SVt_PVHV))

#include "hv_func.h"

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /* hash a key
 *--------------------------------------------------------------------------------------
 * The "hash seed" feature was added in Perl 5.8.1 to perturb the results
 * to avoid "algorithmic complexity attacks".
 *
 * If USE_HASH_SEED is defined, hash randomisation is done by default
 * If USE_HASH_SEED_EXPLICIT is defined, hash randomisation is done
 * only if the environment variable PERL_HASH_SEED is set.
 * (see also perl.c:perl_parse() and S_init_tls_and_interp() and util.c:get_hash_seed())
 */

#ifndef PERL_SEEN_HV_FUNC_H /* compile once */
#define PERL_SEEN_HV_FUNC_H

#if !( 0 \
        || defined(PERL_HASH_FUNC_SIPHASH) \
        || defined(PERL_HASH_FUNC_SDBM) \
        || defined(PERL_HASH_FUNC_DJB2) \
        || defined(PERL_HASH_FUNC_SUPERFAST) \
        || defined(PERL_HASH_FUNC_MURMUR3) \
        || defined(PERL_HASH_FUNC_ONE_AT_A_TIME) \
        || defined(PERL_HASH_FUNC_ONE_AT_A_TIME_HARD) \
        || defined(PERL_HASH_FUNC_ONE_AT_A_TIME_OLD) \
        || defined(PERL_HASH_FUNC_MURMUR_HASH_64A) \
        || defined(PERL_HASH_FUNC_MURMUR_HASH_64B) \
    )
#define PERL_HASH_FUNC_ONE_AT_A_TIME_HARD
#endif

#if defined(PERL_HASH_FUNC_SIPHASH)
#   define PERL_HASH_FUNC "SIPHASH_2_4"
#   define PERL_HASH_SEED_BYTES 16
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_siphash_2_4((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_SUPERFAST)
#   define PERL_HASH_FUNC "SUPERFAST"
#   define PERL_HASH_SEED_BYTES 4
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_superfast((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_MURMUR3)
#   define PERL_HASH_FUNC "MURMUR3"
#   define PERL_HASH_SEED_BYTES 4
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_murmur3((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_DJB2)
#   define PERL_HASH_FUNC "DJB2"
#   define PERL_HASH_SEED_BYTES 4
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_djb2((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_SDBM)
#   define PERL_HASH_FUNC "SDBM"
#   define PERL_HASH_SEED_BYTES 4
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_sdbm((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_ONE_AT_A_TIME_HARD)
#   define PERL_HASH_FUNC "ONE_AT_A_TIME_HARD"
#   define PERL_HASH_SEED_BYTES 8
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_one_at_a_time_hard((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_ONE_AT_A_TIME)
#   define PERL_HASH_FUNC "ONE_AT_A_TIME"
#   define PERL_HASH_SEED_BYTES 4
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_one_at_a_time((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_ONE_AT_A_TIME_OLD)
#   define PERL_HASH_FUNC "ONE_AT_A_TIME_OLD"
#   define PERL_HASH_SEED_BYTES 4
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_old_one_at_a_time((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_MURMUR_HASH_64A)
#   define PERL_HASH_FUNC "MURMUR_HASH_64A"
#   define PERL_HASH_SEED_BYTES 8
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_murmur_hash_64a((seed),(U8*)(str),(len))
#elif defined(PERL_HASH_FUNC_MURMUR_HASH_64B)
#   define PERL_HASH_FUNC "MURMUR_HASH_64B"
#   define PERL_HASH_SEED_BYTES 8
#   define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_murmur_hash_64b((seed),(U8*)(str),(len))
#endif

#ifndef PERL_HASH_WITH_SEED
#error "No hash function defined!"
#endif
#ifndef PERL_HASH_SEED_BYTES
#error "PERL_HASH_SEED_BYTES not defined"
#endif
#ifndef PERL_HASH_FUNC
#error "PERL_HASH_FUNC not defined"
#endif

#ifndef PERL_HASH_SEED
#   if defined(USE_HASH_SEED) || defined(USE_HASH_SEED_EXPLICIT)
#       define PERL_HASH_SEED PL_hash_seed
#   elif PERL_HASH_SEED_BYTES == 4
#       define PERL_HASH_SEED ((const U8 *)"PeRl")
#   elif PERL_HASH_SEED_BYTES == 8
#       define PERL_HASH_SEED ((const U8 *)"PeRlHaSh")
#   elif PERL_HASH_SEED_BYTES == 16
#       define PERL_HASH_SEED ((const U8 *)"PeRlHaShhAcKpErl")
#   else
#       error "No PERL_HASH_SEED definition for " PERL_HASH_FUNC
#   endif
#endif

#define PERL_HASH(hash,str,len) PERL_HASH_WITH_SEED(PERL_HASH_SEED,hash,str,len)

/*-----------------------------------------------------------------------------
 * Endianess, misalignment capabilities and util macros
 *
 * The following 3 macros are defined in this section. The other macros defined
 * are only needed to help derive these 3.
 *
 * U8TO32_LE(x)   Read a little endian unsigned 32-bit int
 * UNALIGNED_SAFE   Defined if unaligned access is safe
 * ROTL32(x,r)      Rotate x left by r bits
 */

#if (defined(__GNUC__) && defined(__i386__)) || defined(__WATCOMC__) \
  || defined(_MSC_VER) || defined (__TURBOC__)
#define U8TO16_LE(d) (*((const U16 *) (d)))
#endif

#if !defined (U8TO16_LE)
#define U8TO16_LE(d) ((((const U8 *)(d))[1] << 8)\
                      +((const U8 *)(d))[0])
#endif

#if (BYTEORDER == 0x1234 || BYTEORDER == 0x12345678) && U32SIZE == 4
  /* CPU endian matches murmurhash algorithm, so read 32-bit word directly */
  #define U8TO32_LE(ptr)   (*((U32*)(ptr)))
#elif BYTEORDER == 0x4321 || BYTEORDER == 0x87654321
  /* TODO: Add additional cases below where a compiler provided bswap32 is available */
  #if defined(__GNUC__) && (__GNUC__>4 || (__GNUC__==4 && __GNUC_MINOR__>=3))
    #define U8TO32_LE(ptr)   (__builtin_bswap32(*((U32*)(ptr))))
  #else
    /* Without a known fast bswap32 we're just as well off doing this */
    #define U8TO32_LE(ptr)   (ptr[0]|ptr[1]<<8|ptr[2]<<16|ptr[3]<<24)
    #define UNALIGNED_SAFE
  #endif
#else
  /* Unknown endianess so last resort is to read individual bytes */
  #define U8TO32_LE(ptr)   (ptr[0]|ptr[1]<<8|ptr[2]<<16|ptr[3]<<24)
  /* Since we're not doing word-reads we can skip the messing about with realignment */
  #define UNALIGNED_SAFE
#endif

#ifdef HAS_QUAD
#ifndef U64TYPE
/* This probably isn't going to work, but failing with a compiler error due to
   lack of uint64_t is no worse than failing right now with an #error.  */
#define U64 uint64_t
#endif
#endif

/* Find best way to ROTL32/ROTL64 */
#if defined(_MSC_VER)
  #include <stdlib.h>  /* Microsoft put _rotl declaration in here */
  #define ROTL32(x,r)  _rotl(x,r)
  #ifdef HAS_QUAD
    #define ROTL64(x,r)  _rotl64(x,r)
  #endif
#else
  /* gcc recognises this code and generates a rotate instruction for CPUs with one */
  #define ROTL32(x,r)  (((U32)x << r) | ((U32)x >> (32 - r)))
  #ifdef HAS_QUAD
    #define ROTL64(x,r)  (((U64)x << r) | ((U64)x >> (64 - r)))
  #endif
#endif


#ifdef UV_IS_QUAD
#define ROTL_UV(x,r) ROTL64(x,r)
#else
#define ROTL_UV(x,r) ROTL32(x,r)
#endif

/* This is SipHash by Jean-Philippe Aumasson and Daniel J. Bernstein.
 * The authors claim it is relatively secure compared to the alternatives
 * and that performance wise it is a suitable hash for languages like Perl.
 * See:
 *
 * https://www.131002.net/siphash/
 *
 * This implementation seems to perform slightly slower than one-at-a-time for
 * short keys, but degrades slower for longer keys. Murmur Hash outperforms it
 * regardless of keys size.
 *
 * It is 64 bit only.
 */

#ifdef HAS_QUAD

#define U8TO64_LE(p) \
  (((U64)((p)[0])      ) | \
   ((U64)((p)[1]) <<  8) | \
   ((U64)((p)[2]) << 16) | \
   ((U64)((p)[3]) << 24) | \
   ((U64)((p)[4]) << 32) | \
   ((U64)((p)[5]) << 40) | \
   ((U64)((p)[6]) << 48) | \
   ((U64)((p)[7]) << 56))

#define SIPROUND            \
  do {              \
    v0 += v1; v1=ROTL64(v1,13); v1 ^= v0; v0=ROTL64(v0,32); \
    v2 += v3; v3=ROTL64(v3,16); v3 ^= v2;     \
    v0 += v3; v3=ROTL64(v3,21); v3 ^= v0;     \
    v2 += v1; v1=ROTL64(v1,17); v1 ^= v2; v2=ROTL64(v2,32); \
  } while(0)

/* SipHash-2-4 */

PERL_STATIC_INLINE U32
S_perl_hash_siphash_2_4(const unsigned char * const seed, const unsigned char *in, const STRLEN inlen) {
  /* "somepseudorandomlygeneratedbytes" */
  U64 v0 = UINT64_C(0x736f6d6570736575);
  U64 v1 = UINT64_C(0x646f72616e646f6d);
  U64 v2 = UINT64_C(0x6c7967656e657261);
  U64 v3 = UINT64_C(0x7465646279746573);

  U64 b;
  U64 k0 = ((U64*)seed)[0];
  U64 k1 = ((U64*)seed)[1];
  U64 m;
  const int left = inlen & 7;
  const U8 *end = in + inlen - left;

  b = ( ( U64 )(inlen) ) << 56;
  v3 ^= k1;
  v2 ^= k0;
  v1 ^= k1;
  v0 ^= k0;

  for ( ; in != end; in += 8 )
  {
    m = U8TO64_LE( in );
    v3 ^= m;
    SIPROUND;
    SIPROUND;
    v0 ^= m;
  }

  switch( left )
  {
  case 7: b |= ( ( U64 )in[ 6] )  << 48;
  case 6: b |= ( ( U64 )in[ 5] )  << 40;
  case 5: b |= ( ( U64 )in[ 4] )  << 32;
  case 4: b |= ( ( U64 )in[ 3] )  << 24;
  case 3: b |= ( ( U64 )in[ 2] )  << 16;
  case 2: b |= ( ( U64 )in[ 1] )  <<  8;
  case 1: b |= ( ( U64 )in[ 0] ); break;
  case 0: break;
  }

  v3 ^= b;
  SIPROUND;
  SIPROUND;
  v0 ^= b;

  v2 ^= 0xff;
  SIPROUND;
  SIPROUND;
  SIPROUND;
  SIPROUND;
  b = v0 ^ v1 ^ v2  ^ v3;
  return (U32)(b & U32_MAX);
}
#endif /* defined(HAS_QUAD) */

/* FYI: This is the "Super-Fast" algorithm mentioned by Bob Jenkins in
 * (http://burtleburtle.net/bob/hash/doobs.html)
 * It is by Paul Hsieh (c) 2004 and is analysed here
 * http://www.azillionmonkeys.com/qed/hash.html
 * license terms are here:
 * http://www.azillionmonkeys.com/qed/weblicense.html
 */


PERL_STATIC_INLINE U32
S_perl_hash_superfast(const unsigned char * const seed, const unsigned char *str, STRLEN len) {
    U32 hash = *((U32*)seed) + (U32)len;
    U32 tmp;
    int rem= len & 3;
    len >>= 2;

    for (;len > 0; len--) {
        hash  += U8TO16_LE (str);
        tmp    = (U8TO16_LE (str+2) << 11) ^ hash;
        hash   = (hash << 16) ^ tmp;
        str   += 2 * sizeof (U16);
        hash  += hash >> 11;
    }

    /* Handle end cases */
    switch (rem) { \
        case 3: hash += U8TO16_LE (str);
                hash ^= hash << 16;
                hash ^= str[sizeof (U16)] << 18;
                hash += hash >> 11;
                break;
        case 2: hash += U8TO16_LE (str);
                hash ^= hash << 11;
                hash += hash >> 17;
                break;
        case 1: hash += *str;
                hash ^= hash << 10;
                hash += hash >> 1;
    }
    /* Force "avalanching" of final 127 bits */
    hash ^= hash << 3;
    hash += hash >> 5;
    hash ^= hash << 4;
    hash += hash >> 17;
    hash ^= hash << 25;
    return (hash + (hash >> 6));
}


/*-----------------------------------------------------------------------------
 * MurmurHash3 was written by Austin Appleby, and is placed in the public
 * domain.
 *
 * This implementation was originally written by Shane Day, and is also public domain,
 * and was modified to function as a macro similar to other perl hash functions by
 * Yves Orton.
 *
 * This is a portable ANSI C implementation of MurmurHash3_x86_32 (Murmur3A)
 * with support for progressive processing.
 *
 * If you want to understand the MurmurHash algorithm you would be much better
 * off reading the original source. Just point your browser at:
 * http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp
 *
 * How does it work?
 *
 * We can only process entire 32 bit chunks of input, except for the very end
 * that may be shorter.
 *
 * To handle endianess I simply use a macro that reads a U32 and define
 * that macro to be a direct read on little endian machines, a read and swap
 * on big endian machines, or a byte-by-byte read if the endianess is unknown.
 */


/*-----------------------------------------------------------------------------
 * Core murmurhash algorithm macros */

#define MURMUR_C1  (0xcc9e2d51)
#define MURMUR_C2  (0x1b873593)
#define MURMUR_C3  (0xe6546b64)
#define MURMUR_C4  (0x85ebca6b)
#define MURMUR_C5  (0xc2b2ae35)

/* This is the main processing body of the algorithm. It operates
 * on each full 32-bits of input. */
#define MURMUR_DOBLOCK(h1, k1) STMT_START { \
    k1 *= MURMUR_C1; \
    k1 = ROTL32(k1,15); \
    k1 *= MURMUR_C2; \
    \
    h1 ^= k1; \
    h1 = ROTL32(h1,13); \
    h1 = h1 * 5 + MURMUR_C3; \
} STMT_END


/* Append unaligned bytes to carry, forcing hash churn if we have 4 bytes */
/* cnt=bytes to process, h1=name of h1 var, c=carry, n=bytes in c, ptr/len=payload */
#define MURMUR_DOBYTES(cnt, h1, c, n, ptr, len) STMT_START { \
    int MURMUR_DOBYTES_i = cnt; \
    while(MURMUR_DOBYTES_i--) { \
        c = c>>8 | *ptr++<<24; \
        n++; len--; \
        if(n==4) { \
            MURMUR_DOBLOCK(h1, c); \
            n = 0; \
        } \
    } \
} STMT_END


/* now we create the hash function */
PERL_STATIC_INLINE U32
S_perl_hash_murmur3(const unsigned char * const seed, const unsigned char *ptr, STRLEN len) {
    U32 h1 = *((U32*)seed);
    U32 k1;
    U32 carry = 0;

    const unsigned char *end;
    int bytes_in_carry = 0; /* bytes in carry */
    I32 total_length= (I32)len;

#if defined(UNALIGNED_SAFE)
    /* Handle carry: commented out as its only used in incremental mode - it never fires for us
    int i = (4-n) & 3;
    if(i && i <= len) {
      MURMUR_DOBYTES(i, h1, carry, bytes_in_carry, ptr, len);
    }
    */

    /* This CPU handles unaligned word access */
    /* Process 32-bit chunks */
    end = ptr + len/4*4;
    for( ; ptr < end ; ptr+=4) {
        k1 = U8TO32_LE(ptr);
        MURMUR_DOBLOCK(h1, k1);
    }
#else
    /* This CPU does not handle unaligned word access */

    /* Consume enough so that the next data byte is word aligned */
    STRLEN i = -PTR2IV(ptr) & 3;
    if(i && i <= len) {
      MURMUR_DOBYTES((int)i, h1, carry, bytes_in_carry, ptr, len);
    }

    /* We're now aligned. Process in aligned blocks. Specialise for each possible carry count */
    end = ptr + len/4*4;
    switch(bytes_in_carry) { /* how many bytes in carry */
        case 0: /* c=[----]  w=[3210]  b=[3210]=w            c'=[----] */
        for( ; ptr < end ; ptr+=4) {
            k1 = U8TO32_LE(ptr);
            MURMUR_DOBLOCK(h1, k1);
        }
        break;
        case 1: /* c=[0---]  w=[4321]  b=[3210]=c>>24|w<<8   c'=[4---] */
        for( ; ptr < end ; ptr+=4) {
            k1 = carry>>24;
            carry = U8TO32_LE(ptr);
            k1 |= carry<<8;
            MURMUR_DOBLOCK(h1, k1);
        }
        break;
        case 2: /* c=[10--]  w=[5432]  b=[3210]=c>>16|w<<16  c'=[54--] */
        for( ; ptr < end ; ptr+=4) {
            k1 = carry>>16;
            carry = U8TO32_LE(ptr);
            k1 |= carry<<16;
            MURMUR_DOBLOCK(h1, k1);
        }
        break;
        case 3: /* c=[210-]  w=[6543]  b=[3210]=c>>8|w<<24   c'=[654-] */
        for( ; ptr < end ; ptr+=4) {
            k1 = carry>>8;
            carry = U8TO32_LE(ptr);
            k1 |= carry<<24;
            MURMUR_DOBLOCK(h1, k1);
        }
    }
#endif
    /* Advance over whole 32-bit chunks, possibly leaving 1..3 bytes */
    len -= len/4*4;

    /* Append any remaining bytes into carry */
    MURMUR_DOBYTES((int)len, h1, carry, bytes_in_carry, ptr, len);

    if (bytes_in_carry) {
        k1 = carry >> ( 4 - bytes_in_carry ) * 8;
        k1 *= MURMUR_C1;
        k1 = ROTL32(k1,15);
        k1 *= MURMUR_C2;
        h1 ^= k1;
    }
    h1 ^= total_length;

    /* fmix */
    h1 ^= h1 >> 16;
    h1 *= MURMUR_C4;
    h1 ^= h1 >> 13;
    h1 *= MURMUR_C5;
    h1 ^= h1 >> 16;
    return h1;
}


PERL_STATIC_INLINE U32
S_perl_hash_djb2(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    while (str < end) {
        hash = ((hash << 5) + hash) + *str++;
    }
    return hash;
}

PERL_STATIC_INLINE U32
S_perl_hash_sdbm(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    while (str < end) {
        hash = (hash << 6) + (hash << 16) - hash + *str++;
    }
    return hash;
}

/* - ONE_AT_A_TIME_HARD is the 5.17+ recommend ONE_AT_A_TIME algorithm
 * - ONE_AT_A_TIME_OLD is the unmodified 5.16 and older algorithm
 * - ONE_AT_A_TIME is a 5.17+ tweak of ONE_AT_A_TIME_OLD to
 *   prevent strings of only \0 but different lengths from colliding
 *
 * Security-wise, from best to worst,
 * ONE_AT_A_TIME_HARD > ONE_AT_A_TIME > ONE_AT_A_TIME_OLD
 * There is a big drop-off in security between ONE_AT_A_TIME_HARD and
 * ONE_AT_A_TIME
 * */

/* This is the "One-at-a-Time" algorithm by Bob Jenkins
 * from requirements by Colin Plumb.
 * (http://burtleburtle.net/bob/hash/doobs.html)
 * With seed/len tweak.
 * */
PERL_STATIC_INLINE U32
S_perl_hash_one_at_a_time(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    while (str < end) {
        hash += *str++;
        hash += (hash << 10);
        hash ^= (hash >> 6);
    }
    hash += (hash << 3);
    hash ^= (hash >> 11);
    return (hash + (hash << 15));
}

/* Derived from "One-at-a-Time" algorithm by Bob Jenkins */
PERL_STATIC_INLINE U32
S_perl_hash_one_at_a_time_hard(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    
    while (str < end) {
        hash += (hash << 10);
        hash ^= (hash >> 6);
        hash += *str++;
    }
    
    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[4];
    
    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[5];
    
    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[6];
    
    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[7];
    
    hash += (hash << 10);
    hash ^= (hash >> 6);

    hash += (hash << 3);
    hash ^= (hash >> 11);
    return (hash + (hash << 15));
}

PERL_STATIC_INLINE U32
S_perl_hash_old_one_at_a_time(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed);
    while (str < end) {
        hash += *str++;
        hash += (hash << 10);
        hash ^= (hash >> 6);
    }
    hash += (hash << 3);
    hash ^= (hash >> 11);
    return (hash + (hash << 15));
}

#ifdef PERL_HASH_FUNC_MURMUR_HASH_64A
/* This code is from Austin Appleby and is in the public domain.
   Altered by Yves Orton to match Perl's hash interface, and to
   return a 32 bit hash.

   Note uses unaligned 64 bit loads - will NOT work on machines with
   strict alignment requirements.

   Also this code may not be suitable for big-endian machines.
*/

/* a 64 bit hash where we only use the low 32 bits */
PERL_STATIC_INLINE U32
S_perl_hash_murmur_hash_64a (const unsigned char * const seed, const unsigned char *str, const STRLEN len)
{
        const U64 m = UINT64_C(0xc6a4a7935bd1e995);
        const int r = 47;
        U64 h = *((U64*)seed) ^ len;
        const U64 * data = (const U64 *)str;
        const U64 * end = data + (len/8);
        const unsigned char * data2;

        while(data != end)
        {
            U64 k = *data++;

            k *= m;
            k ^= k >> r;
            k *= m;

            h ^= k;
            h *= m;
        }

        data2 = (const unsigned char *)data;

        switch(len & 7)
        {
            case 7: h ^= (U64)(data2[6]) << 48; /* fallthrough */
            case 6: h ^= (U64)(data2[5]) << 40; /* fallthrough */
            case 5: h ^= (U64)(data2[4]) << 32; /* fallthrough */
            case 4: h ^= (U64)(data2[3]) << 24; /* fallthrough */
            case 3: h ^= (U64)(data2[2]) << 16; /* fallthrough */
            case 2: h ^= (U64)(data2[1]) << 8;  /* fallthrough */
            case 1: h ^= (U64)(data2[0]);       /* fallthrough */
                    h *= m;
        };

        h ^= h >> r;
        h *= m;
        h ^= h >> r;

        /* was: return h; */
        return h & 0xFFFFFFFF;
}

#endif

#ifdef PERL_HASH_FUNC_MURMUR_HASH_64B
/* This code is from Austin Appleby and is in the public domain.
   Altered by Yves Orton to match Perl's hash interface and return
   a 32 bit value

   Note uses unaligned 32 bit loads - will NOT work on machines with
   strict alignment requirements.

   Also this code may not be suitable for big-endian machines.
*/

/* a 64-bit hash for 32-bit platforms where we only use the low 32 bits */
PERL_STATIC_INLINE U32
S_perl_hash_murmur_hash_64b (const unsigned char * const seed, const unsigned char *str, STRLEN len)
{
        const U32 m = 0x5bd1e995;
        const int r = 24;

        U32 h1 = ((U32 *)seed)[0] ^ len;
        U32 h2 = ((U32 *)seed)[1];

        const U32 * data = (const U32 *)str;

        while(len >= 8)
        {
            U32 k1, k2;
            k1 = *data++;
            k1 *= m; k1 ^= k1 >> r; k1 *= m;
            h1 *= m; h1 ^= k1;
            len -= 4;

            k2 = *data++;
            k2 *= m; k2 ^= k2 >> r; k2 *= m;
            h2 *= m; h2 ^= k2;
            len -= 4;
        }

        if(len >= 4)
        {
            U32 k1 = *data++;
            k1 *= m; k1 ^= k1 >> r; k1 *= m;
            h1 *= m; h1 ^= k1;
            len -= 4;
        }

        switch(len)
        {
            case 3: h2 ^= ((unsigned char*)data)[2] << 16;  /* fallthrough */
            case 2: h2 ^= ((unsigned char*)data)[1] << 8;   /* fallthrough */
            case 1: h2 ^= ((unsigned char*)data)[0];        /* fallthrough */
                    h2 *= m;
        };

        h1 ^= h2 >> 18; h1 *= m;
        h2 ^= h1 >> 22; h2 *= m;
        /*
        The following code has been removed as it is unused
        when only the low 32 bits are used. -- Yves

        h1 ^= h2 >> 17; h1 *= m;

        U64 h = h1;

        h = (h << 32) | h2;
        */

        return h2;
}
#endif

/* legacy - only mod_perl should be doing this.  */
#ifdef PERL_HASH_INTERNAL_ACCESS
#define PERL_HASH_INTERNAL(hash,str,len) PERL_HASH(hash,str,len)
#endif

#endif /*compile once*/

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    /*    inline.h
 *
 *    Copyright (C) 2012 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * This file is a home for static inline functions that cannot go in other
 * headers files, because they depend on proto.h (included after most other
 * headers) or struct definitions.
 *
 * Each section names the header file that the functions "belong" to.
 */

/* ------------------------------- av.h ------------------------------- */

PERL_STATIC_INLINE SSize_t
S_av_top_index(pTHX_ AV *av)
{
    PERL_ARGS_ASSERT_AV_TOP_INDEX;
    assert(SvTYPE(av) == SVt_PVAV);

    return AvFILL(av);
}

/* ------------------------------- cv.h ------------------------------- */

PERL_STATIC_INLINE GV *
S_CvGV(pTHX_ CV *sv)
{
    return CvNAMED(sv)
	? Perl_cvgv_from_hek(aTHX_ sv)
	: ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_gv_u.xcv_gv;
}

PERL_STATIC_INLINE I32 *
S_CvDEPTHp(const CV * const sv)
{
    assert(SvTYPE(sv) == SVt_PVCV || SvTYPE(sv) == SVt_PVFM);
    return &((XPVCV*)SvANY(sv))->xcv_depth;
}

/*
 CvPROTO returns the prototype as stored, which is not necessarily what
 the interpreter should be using. Specifically, the interpreter assumes
 that spaces have been stripped, which has been the case if the prototype
 was added by toke.c, but is generally not the case if it was added elsewhere.
 Since we can't enforce the spacelessness at assignment time, this routine
 provides a temporary copy at parse time with spaces removed.
 I<orig> is the start of the original buffer, I<len> is the length of the
 prototype and will be updated when this returns.
 */

#ifdef PERL_CORE
PERL_STATIC_INLINE char *
S_strip_spaces(pTHX_ const char * orig, STRLEN * const len)
{
    SV * tmpsv;
    char * tmps;
    tmpsv = newSVpvn_flags(orig, *len, SVs_TEMP);
    tmps = SvPVX(tmpsv);
    while ((*len)--) {
	if (!isSPACE(*orig))
	    *tmps++ = *orig;
	orig++;
    }
    *tmps = '\0';
    *len = tmps - SvPVX(tmpsv);
		return SvPVX(tmpsv);
}
#endif

/* ------------------------------- mg.h ------------------------------- */

#if defined(PERL_CORE) || defined(PERL_EXT)
/* assumes get-magic and stringification have already occurred */
PERL_STATIC_INLINE STRLEN
S_MgBYTEPOS(pTHX_ MAGIC *mg, SV *sv, const char *s, STRLEN len)
{
    assert(mg->mg_type == PERL_MAGIC_regex_global);
    assert(mg->mg_len != -1);
    if (mg->mg_flags & MGf_BYTES || !DO_UTF8(sv))
	return (STRLEN)mg->mg_len;
    else {
	const STRLEN pos = (STRLEN)mg->mg_len;
	/* Without this check, we may read past the end of the buffer: */
	if (pos > sv_or_pv_len_utf8(sv, s, len)) return len+1;
	return sv_or_pv_pos_u2b(sv, s, pos, NULL);
    }
}
#endif

/* ------------------------------- pad.h ------------------------------ */

#if defined(PERL_IN_PAD_C) || defined(PERL_IN_OP_C)
PERL_STATIC_INLINE bool
PadnameIN_SCOPE(const PADNAME * const pn, const U32 seq)
{
    /* is seq within the range _LOW to _HIGH ?
     * This is complicated by the fact that PL_cop_seqmax
     * may have wrapped around at some point */
    if (COP_SEQ_RANGE_LOW(pn) == PERL_PADSEQ_INTRO)
	return FALSE; /* not yet introduced */

    if (COP_SEQ_RANGE_HIGH(pn) == PERL_PADSEQ_INTRO) {
    /* in compiling scope */
	if (
	    (seq >  COP_SEQ_RANGE_LOW(pn))
	    ? (seq - COP_SEQ_RANGE_LOW(pn) < (U32_MAX >> 1))
	    : (COP_SEQ_RANGE_LOW(pn) - seq > (U32_MAX >> 1))
	)
	    return TRUE;
    }
    else if (
	(COP_SEQ_RANGE_LOW(pn) > COP_SEQ_RANGE_HIGH(pn))
	?
	    (  seq >  COP_SEQ_RANGE_LOW(pn)
	    || seq <= COP_SEQ_RANGE_HIGH(pn))

	:    (  seq >  COP_SEQ_RANGE_LOW(pn)
	     && seq <= COP_SEQ_RANGE_HIGH(pn))
    )
	return TRUE;
    return FALSE;
}
#endif

/* ----------------------------- regexp.h ----------------------------- */

PERL_STATIC_INLINE struct regexp *
S_ReANY(const REGEXP * const re)
{
    assert(isREGEXP(re));
    return re->sv_u.svu_rx;
}

/* ------------------------------- sv.h ------------------------------- */

PERL_STATIC_INLINE SV *
S_SvREFCNT_inc(SV *sv)
{
    if (LIKELY(sv != NULL))
	SvREFCNT(sv)++;
    return sv;
}
PERL_STATIC_INLINE SV *
S_SvREFCNT_inc_NN(SV *sv)
{
    SvREFCNT(sv)++;
    return sv;
}
PERL_STATIC_INLINE void
S_SvREFCNT_inc_void(SV *sv)
{
    if (LIKELY(sv != NULL))
	SvREFCNT(sv)++;
}
PERL_STATIC_INLINE void
S_SvREFCNT_dec(pTHX_ SV *sv)
{
    if (LIKELY(sv != NULL)) {
	U32 rc = SvREFCNT(sv);
	if (LIKELY(rc > 1))
	    SvREFCNT(sv) = rc - 1;
	else
	    Perl_sv_free2(aTHX_ sv, rc);
    }
}

PERL_STATIC_INLINE void
S_SvREFCNT_dec_NN(pTHX_ SV *sv)
{
    U32 rc = SvREFCNT(sv);
    if (LIKELY(rc > 1))
	SvREFCNT(sv) = rc - 1;
    else
	Perl_sv_free2(aTHX_ sv, rc);
}

PERL_STATIC_INLINE void
SvAMAGIC_on(SV *sv)
{
    assert(SvROK(sv));
    if (SvOBJECT(SvRV(sv))) HvAMAGIC_on(SvSTASH(SvRV(sv)));
}
PERL_STATIC_INLINE void
SvAMAGIC_off(SV *sv)
{
    if (SvROK(sv) && SvOBJECT(SvRV(sv)))
	HvAMAGIC_off(SvSTASH(SvRV(sv)));
}

PERL_STATIC_INLINE U32
S_SvPADSTALE_on(SV *sv)
{
    assert(!(SvFLAGS(sv) & SVs_PADTMP));
    return SvFLAGS(sv) |= SVs_PADSTALE;
}
PERL_STATIC_INLINE U32
S_SvPADSTALE_off(SV *sv)
{
    assert(!(SvFLAGS(sv) & SVs_PADTMP));
    return SvFLAGS(sv) &= ~SVs_PADSTALE;
}
#if defined(PERL_CORE) || defined (PERL_EXT)
PERL_STATIC_INLINE STRLEN
S_sv_or_pv_pos_u2b(pTHX_ SV *sv, const char *pv, STRLEN pos, STRLEN *lenp)
{
    PERL_ARGS_ASSERT_SV_OR_PV_POS_U2B;
    if (SvGAMAGIC(sv)) {
	U8 *hopped = utf8_hop((U8 *)pv, pos);
	if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
	return (STRLEN)(hopped - (U8 *)pv);
    }
    return sv_pos_u2b_flags(sv,pos,lenp,SV_CONST_RETURN);
}
#endif

/* ------------------------------- handy.h ------------------------------- */

/* saves machine code for a common noreturn idiom typically used in Newx*() */
#ifdef GCC_DIAG_PRAGMA
GCC_DIAG_IGNORE(-Wunused-function) /* Intentionally left semicolonless. */
#endif
static void
S_croak_memory_wrap(void)
{
    Perl_croak_nocontext("%s",PL_memory_wrap);
}
#ifdef GCC_DIAG_PRAGMA
GCC_DIAG_RESTORE /* Intentionally left semicolonless. */
#endif

/* ------------------------------- utf8.h ------------------------------- */

PERL_STATIC_INLINE void
S_append_utf8_from_native_byte(const U8 byte, U8** dest)
{
    /* Takes an input 'byte' (Latin1 or EBCDIC) and appends it to the UTF-8
     * encoded string at '*dest', updating '*dest' to include it */

    PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE;

    if (NATIVE_BYTE_IS_INVARIANT(byte))
        *(*dest)++ = byte;
    else {
        *(*dest)++ = UTF8_EIGHT_BIT_HI(byte);
        *(*dest)++ = UTF8_EIGHT_BIT_LO(byte);
    }
}

/*

A helper function for the macro isUTF8_CHAR(), which should be used instead of
this function.  The macro will handle smaller code points directly saving time,
using this function as a fall-back for higher code points.

Tests if the first bytes of string C<s> form a valid UTF-8 character.  0 is
returned if the bytes starting at C<s> up to but not including C<e> do not form a
complete well-formed UTF-8 character; otherwise the number of bytes in the
character is returned.

Note that an INVARIANT (i.e. ASCII on non-EBCDIC) character is a valid UTF-8
character.

=cut */
PERL_STATIC_INLINE STRLEN
S__is_utf8_char_slow(const U8 *s, const U8 *e)
{
    dTHX;   /* The function called below requires thread context */

    STRLEN actual_len;

    PERL_ARGS_ASSERT__IS_UTF8_CHAR_SLOW;

    assert(e >= s);
    utf8n_to_uvchr(s, e - s, &actual_len, UTF8_CHECK_ONLY);

    return (actual_len == (STRLEN) -1) ? 0 : actual_len;
}

/* ------------------------------- perl.h ----------------------------- */

/*
=head1 Miscellaneous Functions

=for apidoc AiR|bool|is_safe_syscall|const char *pv|STRLEN len|const char *what|const char *op_name

Test that the given C<pv> doesn't contain any internal C<NUL> characters.
If it does, set C<errno> to C<ENOENT>, optionally warn, and return FALSE.

Return TRUE if the name is safe.

Used by the C<IS_SAFE_SYSCALL()> macro.

=cut
*/

PERL_STATIC_INLINE bool
S_is_safe_syscall(pTHX_ const char *pv, STRLEN len, const char *what, const char *op_name) {
    /* While the Windows CE API provides only UCS-16 (or UTF-16) APIs
     * perl itself uses xce*() functions which accept 8-bit strings.
     */

    PERL_ARGS_ASSERT_IS_SAFE_SYSCALL;

    if (len > 1) {
        char *null_at;
        if (UNLIKELY((null_at = (char *)memchr(pv, 0, len-1)) != NULL)) {
                SETERRNO(ENOENT, LIB_INVARG);
                Perl_ck_warner(aTHX_ packWARN(WARN_SYSCALLS),
                                   "Invalid \\0 character in %s for %s: %s\\0%s",
                                   what, op_name, pv, null_at+1);
                return FALSE;
        }
    }

    return TRUE;
}

/*

Return true if the supplied filename has a newline character
immediately before the first (hopefully only) NUL.

My original look at this incorrectly used the len from SvPV(), but
that's incorrect, since we allow for a NUL in pv[len-1].

So instead, strlen() and work from there.

This allow for the user reading a filename, forgetting to chomp it,
then calling:

  open my $foo, "$file\0";

*/

#ifdef PERL_CORE

PERL_STATIC_INLINE bool
S_should_warn_nl(const char *pv) {
    STRLEN len;

    PERL_ARGS_ASSERT_SHOULD_WARN_NL;

    len = strlen(pv);

    return len > 0 && pv[len-1] == '\n';
}

#endif

/* ------------------ pp.c, regcomp.c, toke.c, universal.c ------------ */

#define MAX_CHARSET_NAME_LENGTH 2

PERL_STATIC_INLINE const char *
get_regex_charset_name(const U32 flags, STRLEN* const lenp)
{
    /* Returns a string that corresponds to the name of the regex character set
     * given by 'flags', and *lenp is set the length of that string, which
     * cannot exceed MAX_CHARSET_NAME_LENGTH characters */

    *lenp = 1;
    switch (get_regex_charset(flags)) {
        case REGEX_DEPENDS_CHARSET: return DEPENDS_PAT_MODS;
        case REGEX_LOCALE_CHARSET:  return LOCALE_PAT_MODS;
        case REGEX_UNICODE_CHARSET: return UNICODE_PAT_MODS;
	case REGEX_ASCII_RESTRICTED_CHARSET: return ASCII_RESTRICT_PAT_MODS;
	case REGEX_ASCII_MORE_RESTRICTED_CHARSET:
	    *lenp = 2;
	    return ASCII_MORE_RESTRICT_PAT_MODS;
    }
    /* The NOT_REACHED; hides an assert() which has a rather complex
     * definition in perl.h. */
    NOT_REACHED; /* NOTREACHED */
    return "?";	    /* Unknown */
}

/*

Return false if any get magic is on the SV other than taint magic.

*/

PERL_STATIC_INLINE bool
S_sv_only_taint_gmagic(SV *sv) {
    MAGIC *mg = SvMAGIC(sv);

    PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC;

    while (mg) {
        if (mg->mg_type != PERL_MAGIC_taint
            && !(mg->mg_flags & MGf_GSKIP)
            && mg->mg_virtual->svt_get) {
            return FALSE;
        }
        mg = mg->mg_moremagic;
    }

    return TRUE;
}

/* ------------------ cop.h ------------------------------------------- */


/* Enter a block. Push a new base context and return its address. */

PERL_STATIC_INLINE PERL_CONTEXT *
S_cx_pushblock(pTHX_ U8 type, U8 gimme, SV** sp, I32 saveix)
{
    PERL_CONTEXT * cx;

    PERL_ARGS_ASSERT_CX_PUSHBLOCK;

    CXINC;
    cx = CX_CUR();
    cx->cx_type        = type;
    cx->blk_gimme      = gimme;
    cx->blk_oldsaveix  = saveix;
    cx->blk_oldsp      = (I32)(sp - PL_stack_base);
    cx->blk_oldcop     = PL_curcop;
    cx->blk_oldmarksp  = (I32)(PL_markstack_ptr - PL_markstack);
    cx->blk_oldscopesp = PL_scopestack_ix;
    cx->blk_oldpm      = PL_curpm;
    cx->blk_old_tmpsfloor = PL_tmps_floor;

    PL_tmps_floor        = PL_tmps_ix;
    CX_DEBUG(cx, "PUSH");
    return cx;
}


/* Exit a block (RETURN and LAST). */

PERL_STATIC_INLINE void
S_cx_popblock(pTHX_ PERL_CONTEXT *cx)
{
    PERL_ARGS_ASSERT_CX_POPBLOCK;

    CX_DEBUG(cx, "POP");
    /* these 3 are common to cx_popblock and cx_topblock */
    PL_markstack_ptr = PL_markstack + cx->blk_oldmarksp;
    PL_scopestack_ix = cx->blk_oldscopesp;
    PL_curpm         = cx->blk_oldpm;

    /* LEAVE_SCOPE() should have made this true. /(?{})/ cheats
     * and leaves a CX entry lying around for repeated use, so
     * skip for multicall */                  \
    assert(   (CxTYPE(cx) == CXt_SUB && CxMULTICALL(cx))
            || PL_savestack_ix == cx->blk_oldsaveix);
    PL_curcop     = cx->blk_oldcop;
    PL_tmps_floor = cx->blk_ol